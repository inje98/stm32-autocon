
TCP_TEST_STM32F746_PJT_V0.2_DESTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef54  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033e0  0800f124  0800f124  00010124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012504  08012504  000141e0  2**0
                  CONTENTS
  4 .ARM          00000008  08012504  08012504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801250c  0801250c  000141e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801250c  0801250c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012510  08012510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08012514  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 000000a0  200000a0  080125b4  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDecripSection 000000a0  20000140  08012654  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000334c4  200001e0  080126f4  000141e0  2**3
                  ALLOC
 12 ._user_heap_stack 00000c04  200336a4  080126f4  000146a4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000141e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0005960c  00000000  00000000  00014210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c2e4  00000000  00000000  0006d81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0002173c  00000000  00000000  00079b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002a60  00000000  00000000  0009b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000034b6  00000000  00000000  0009dca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003bb21  00000000  00000000  000a1156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005604c  00000000  00000000  000dcc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0012aedd  00000000  00000000  00132cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0025dba0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00008518  00000000  00000000  0025dbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007d  00000000  00000000  002660fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f10c 	.word	0x0800f10c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800f10c 	.word	0x0800f10c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <TCP_Server_Modbus>:
void TCP_Server_Modbus(void)
{
	uint16_t i, j;
	uint16_t Data_Cnt = 0;

	if((u1f_eth_rx_buff_01[6] == Modbus.u.Header.ID)||(u1f_eth_rx_buff_01[6] == 0x01))
 80005b0:	4b96      	ldr	r3, [pc, #600]	@ (800080c <TCP_Server_Modbus+0x25c>)
 80005b2:	4a97      	ldr	r2, [pc, #604]	@ (8000810 <TCP_Server_Modbus+0x260>)
{
 80005b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if((u1f_eth_rx_buff_01[6] == Modbus.u.Header.ID)||(u1f_eth_rx_buff_01[6] == 0x01))
 80005b8:	f8b2 288a 	ldrh.w	r2, [r2, #2186]	@ 0x88a
{
 80005bc:	b085      	sub	sp, #20
	if((u1f_eth_rx_buff_01[6] == Modbus.u.Header.ID)||(u1f_eth_rx_buff_01[6] == 0x01))
 80005be:	7999      	ldrb	r1, [r3, #6]
 80005c0:	428a      	cmp	r2, r1
 80005c2:	d002      	beq.n	80005ca <TCP_Server_Modbus+0x1a>
 80005c4:	2901      	cmp	r1, #1
 80005c6:	f040 811b 	bne.w	8000800 <TCP_Server_Modbus+0x250>
	{
		//읽기 영억
		if(u1f_eth_rx_buff_01[7] == 0x03)
 80005ca:	79dc      	ldrb	r4, [r3, #7]
 80005cc:	2c03      	cmp	r4, #3
 80005ce:	d153      	bne.n	8000678 <TCP_Server_Modbus+0xc8>
		{
			MORD.u.stream[0] = u1f_eth_rx_buff_01[6];  //Unit ID
 80005d0:	4a90      	ldr	r2, [pc, #576]	@ (8000814 <TCP_Server_Modbus+0x264>)
			MORD.u.stream[1] = u1f_eth_rx_buff_01[7];  //Function code
			MORD.u.stream[2] = u1f_eth_rx_buff_01[9];  //Start Add
 80005d2:	7a58      	ldrb	r0, [r3, #9]
			MORD.u.stream[0] = u1f_eth_rx_buff_01[6];  //Unit ID
 80005d4:	7011      	strb	r1, [r2, #0]
			MORD.u.stream[2] = u1f_eth_rx_buff_01[9];  //Start Add
 80005d6:	7090      	strb	r0, [r2, #2]
			MORD.u.stream[3] = u1f_eth_rx_buff_01[8];  //Start_Add
 80005d8:	7a18      	ldrb	r0, [r3, #8]
			MORD.u.stream[1] = u1f_eth_rx_buff_01[7];  //Function code
 80005da:	7054      	strb	r4, [r2, #1]
			MORD.u.stream[3] = u1f_eth_rx_buff_01[8];  //Start_Add
 80005dc:	70d0      	strb	r0, [r2, #3]
			MORD.u.stream[4] = u1f_eth_rx_buff_01[11]; //Length
 80005de:	7ad8      	ldrb	r0, [r3, #11]
			MORD.u.stream[5] = u1f_eth_rx_buff_01[10]; //Length
			if(MORD.u.Header.Add == 40976)
 80005e0:	8855      	ldrh	r5, [r2, #2]
			MORD.u.stream[4] = u1f_eth_rx_buff_01[11]; //Length
 80005e2:	7110      	strb	r0, [r2, #4]
			MORD.u.stream[5] = u1f_eth_rx_buff_01[10]; //Length
 80005e4:	7a98      	ldrb	r0, [r3, #10]
 80005e6:	7150      	strb	r0, [r2, #5]
			if(MORD.u.Header.Add == 40976)
 80005e8:	f24a 0010 	movw	r0, #40976	@ 0xa010
 80005ec:	4285      	cmp	r5, r0
 80005ee:	d107      	bne.n	8000600 <TCP_Server_Modbus+0x50>
			{
				StandardCount++;
 80005f0:	4c89      	ldr	r4, [pc, #548]	@ (8000818 <TCP_Server_Modbus+0x268>)
 80005f2:	e9d4 0600 	ldrd	r0, r6, [r4]
 80005f6:	3001      	adds	r0, #1
 80005f8:	f146 0600 	adc.w	r6, r6, #0
 80005fc:	e9c4 0600 	strd	r0, r6, [r4]
			}
			j = MORD.u.Header.Inx*2 + 3;
 8000600:	8894      	ldrh	r4, [r2, #4]

			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 8000602:	4886      	ldr	r0, [pc, #536]	@ (800081c <TCP_Server_Modbus+0x26c>)
 8000604:	781f      	ldrb	r7, [r3, #0]
			j = MORD.u.Header.Inx*2 + 3;
 8000606:	0062      	lsls	r2, r4, #1
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
			u1f_eth_tx_buff_01[4] = (unsigned char)(j >> 8);
			u1f_eth_tx_buff_01[5] = (unsigned char)(j); //길이정보

			u1f_eth_tx_buff_01[6] = u1f_eth_rx_buff_01[6]; //ID
 8000608:	7181      	strb	r1, [r0, #6]
			u1f_eth_tx_buff_01[7] = 0x03;               //FunctionCode
			u1f_eth_tx_buff_01[8] = MORD.u.Header.Inx*2*2;
			for(i=0;i<MORD.u.Header.Inx;i++)
 800060a:	2100      	movs	r1, #0
			j = MORD.u.Header.Inx*2 + 3;
 800060c:	b292      	uxth	r2, r2
			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 800060e:	7007      	strb	r7, [r0, #0]
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 8000610:	785f      	ldrb	r7, [r3, #1]
			j = MORD.u.Header.Inx*2 + 3;
 8000612:	1cd6      	adds	r6, r2, #3
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 8000614:	7047      	strb	r7, [r0, #1]
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 8000616:	789f      	ldrb	r7, [r3, #2]
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 8000618:	78db      	ldrb	r3, [r3, #3]
			u1f_eth_tx_buff_01[5] = (unsigned char)(j); //길이정보
 800061a:	7146      	strb	r6, [r0, #5]
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 800061c:	70c3      	strb	r3, [r0, #3]
			u1f_eth_tx_buff_01[4] = (unsigned char)(j >> 8);
 800061e:	f3c6 2307 	ubfx	r3, r6, #8, #8
			{
				j = MORD.u.Header.Add+i;

				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1];
 8000622:	4e7f      	ldr	r6, [pc, #508]	@ (8000820 <TCP_Server_Modbus+0x270>)
			u1f_eth_tx_buff_01[4] = (unsigned char)(j >> 8);
 8000624:	7103      	strb	r3, [r0, #4]
			u1f_eth_tx_buff_01[7] = 0x03;               //FunctionCode
 8000626:	2303      	movs	r3, #3
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 8000628:	7087      	strb	r7, [r0, #2]
			u1f_eth_tx_buff_01[7] = 0x03;               //FunctionCode
 800062a:	71c3      	strb	r3, [r0, #7]
			u1f_eth_tx_buff_01[8] = MORD.u.Header.Inx*2*2;
 800062c:	00a3      	lsls	r3, r4, #2
 800062e:	7203      	strb	r3, [r0, #8]
			for(i=0;i<MORD.u.Header.Inx;i++)
 8000630:	b28b      	uxth	r3, r1
 8000632:	3002      	adds	r0, #2
 8000634:	429c      	cmp	r4, r3
 8000636:	d814      	bhi.n	8000662 <TCP_Server_Modbus+0xb2>
				u1f_eth_tx_buff_01[9+i*2 + 1] = Modbus.u.stream[j*2];

			}

			Data_Cnt = (MORD.u.Header.Inx*2) + 9;
 8000638:	3209      	adds	r2, #9
			TCP_TX_COUNT_A++;
 800063a:	497a      	ldr	r1, [pc, #488]	@ (8000824 <TCP_Server_Modbus+0x274>)
			Data_Cnt = (MORD.u.Header.Inx*2) + 9;
 800063c:	b292      	uxth	r2, r2
				u1f_eth_tx_buff_01[9+i*2 + 1] = Modbus.u.stream[j*2]; // 10

			}

			Data_Cnt = (MORD.u.Header.Inx*2) + 9;
			TCP_TX_COUNT_C++;
 800063e:	e9d1 3000 	ldrd	r3, r0, [r1]
 8000642:	3301      	adds	r3, #1
 8000644:	f140 0000 	adc.w	r0, r0, #0
 8000648:	e9c1 3000 	strd	r3, r0, [r1]
			 Data_Cnt = 12;
			 TCP_TX_COUNT_D++;
		}


		netconn_write(newconn_01, u1f_eth_tx_buff_01, Data_Cnt, NETCONN_COPY);
 800064c:	2300      	movs	r3, #0
 800064e:	4876      	ldr	r0, [pc, #472]	@ (8000828 <TCP_Server_Modbus+0x278>)
 8000650:	4972      	ldr	r1, [pc, #456]	@ (800081c <TCP_Server_Modbus+0x26c>)
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2301      	movs	r3, #1
 8000656:	6800      	ldr	r0, [r0, #0]
 8000658:	f005 f934 	bl	80058c4 <netconn_write_partly>
	{
		Data_Cnt = 0;

		Check_ETH_ERR++;
	}
}
 800065c:	b005      	add	sp, #20
 800065e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				j = MORD.u.Header.Add+i;
 8000662:	442b      	add	r3, r5
 8000664:	3101      	adds	r1, #1
				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1];
 8000666:	b29b      	uxth	r3, r3
 8000668:	eb06 0743 	add.w	r7, r6, r3, lsl #1
				u1f_eth_tx_buff_01[9+i*2 + 1] = Modbus.u.stream[j*2];
 800066c:	f816 3013 	ldrb.w	r3, [r6, r3, lsl #1]
				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1];
 8000670:	787f      	ldrb	r7, [r7, #1]
				u1f_eth_tx_buff_01[9+i*2 + 1] = Modbus.u.stream[j*2];
 8000672:	7203      	strb	r3, [r0, #8]
				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1];
 8000674:	71c7      	strb	r7, [r0, #7]
			for(i=0;i<MORD.u.Header.Inx;i++)
 8000676:	e7db      	b.n	8000630 <TCP_Server_Modbus+0x80>
		else if(u1f_eth_rx_buff_01[7] == 0x10) // broadcast
 8000678:	2c10      	cmp	r4, #16
 800067a:	d145      	bne.n	8000708 <TCP_Server_Modbus+0x158>
			MOWR.u.stream[0] = u1f_eth_rx_buff_01[6];   //Unit ID
 800067c:	4a6b      	ldr	r2, [pc, #428]	@ (800082c <TCP_Server_Modbus+0x27c>)
			MOWR.u.stream[2] = u1f_eth_rx_buff_01[9];   //Start Add
 800067e:	7a5f      	ldrb	r7, [r3, #9]
			MOWR.u.stream[3] = u1f_eth_rx_buff_01[8];   //Start_Add
 8000680:	f893 c008 	ldrb.w	ip, [r3, #8]
			MOWR.u.stream[4] = u1f_eth_rx_buff_01[11];  //Length
 8000684:	7add      	ldrb	r5, [r3, #11]
			MOWR.u.stream[5] = u1f_eth_rx_buff_01[10];  //Length
 8000686:	7a9e      	ldrb	r6, [r3, #10]
			MOWR.u.stream[1] = u1f_eth_rx_buff_01[7];   //Function code
 8000688:	7054      	strb	r4, [r2, #1]
			for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 800068a:	2400      	movs	r4, #0
			MOWR.u.stream[2] = u1f_eth_rx_buff_01[9];   //Start Add
 800068c:	7097      	strb	r7, [r2, #2]
			MOWR.u.stream[3] = u1f_eth_rx_buff_01[8];   //Start_Add
 800068e:	f882 c003 	strb.w	ip, [r2, #3]
			MOWR.u.stream[4] = u1f_eth_rx_buff_01[11];  //Length
 8000692:	7115      	strb	r5, [r2, #4]
			MOWR.u.stream[5] = u1f_eth_rx_buff_01[10];  //Length
 8000694:	7156      	strb	r6, [r2, #5]
				j = MOWR.u.Header.Add+i;
 8000696:	f8b2 9002 	ldrh.w	r9, [r2, #2]
			for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 800069a:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 800069e:	485b      	ldr	r0, [pc, #364]	@ (800080c <TCP_Server_Modbus+0x25c>)
				Modbus.u.stream[(j*2)+1] = u1f_eth_rx_buff_01[(i*2)+13];
 80006a0:	f8df e17c 	ldr.w	lr, [pc, #380]	@ 8000820 <TCP_Server_Modbus+0x270>
			MOWR.u.stream[0] = u1f_eth_rx_buff_01[6];   //Unit ID
 80006a4:	7011      	strb	r1, [r2, #0]
			for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 80006a6:	b2a2      	uxth	r2, r4
 80006a8:	3002      	adds	r0, #2
 80006aa:	4590      	cmp	r8, r2
 80006ac:	d81e      	bhi.n	80006ec <TCP_Server_Modbus+0x13c>
			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 80006ae:	4a5b      	ldr	r2, [pc, #364]	@ (800081c <TCP_Server_Modbus+0x26c>)
 80006b0:	7818      	ldrb	r0, [r3, #0]
			u1f_eth_tx_buff_01[6]  = u1f_eth_rx_buff_01[6];
 80006b2:	7191      	strb	r1, [r2, #6]
			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 80006b4:	7010      	strb	r0, [r2, #0]
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 80006b6:	7858      	ldrb	r0, [r3, #1]
			u1f_eth_tx_buff_01[8]  = u1f_eth_rx_buff_01[8];
 80006b8:	f882 c008 	strb.w	ip, [r2, #8]
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 80006bc:	7050      	strb	r0, [r2, #1]
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 80006be:	7898      	ldrb	r0, [r3, #2]
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 80006c0:	78db      	ldrb	r3, [r3, #3]
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 80006c2:	7090      	strb	r0, [r2, #2]
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 80006c4:	70d3      	strb	r3, [r2, #3]
			u1f_eth_tx_buff_01[4]  = 0;
 80006c6:	2300      	movs	r3, #0
			u1f_eth_tx_buff_01[9]  = u1f_eth_rx_buff_01[9];
 80006c8:	7257      	strb	r7, [r2, #9]
			u1f_eth_tx_buff_01[4]  = 0;
 80006ca:	7113      	strb	r3, [r2, #4]
			u1f_eth_tx_buff_01[5]  = 0x06;
 80006cc:	2306      	movs	r3, #6
			u1f_eth_tx_buff_01[10] = u1f_eth_rx_buff_01[10];
 80006ce:	7296      	strb	r6, [r2, #10]
			u1f_eth_tx_buff_01[5]  = 0x06;
 80006d0:	7153      	strb	r3, [r2, #5]
			u1f_eth_tx_buff_01[7]  = u1f_eth_rx_buff_01[7];
 80006d2:	2310      	movs	r3, #16
			u1f_eth_tx_buff_01[11] = u1f_eth_rx_buff_01[11];
 80006d4:	72d5      	strb	r5, [r2, #11]
			u1f_eth_tx_buff_01[7]  = u1f_eth_rx_buff_01[7];
 80006d6:	71d3      	strb	r3, [r2, #7]
			TCP_TX_COUNT_B++;
 80006d8:	4a55      	ldr	r2, [pc, #340]	@ (8000830 <TCP_Server_Modbus+0x280>)
			 TCP_TX_COUNT_D++;
 80006da:	e9d2 3100 	ldrd	r3, r1, [r2]
 80006de:	3301      	adds	r3, #1
 80006e0:	f141 0100 	adc.w	r1, r1, #0
 80006e4:	e9c2 3100 	strd	r3, r1, [r2]
			Data_Cnt = 12;
 80006e8:	220c      	movs	r2, #12
 80006ea:	e7af      	b.n	800064c <TCP_Server_Modbus+0x9c>
				j = MOWR.u.Header.Add+i;
 80006ec:	444a      	add	r2, r9
				Modbus.u.stream[(j*2)+1] = u1f_eth_rx_buff_01[(i*2)+13];
 80006ee:	f890 b00b 	ldrb.w	fp, [r0, #11]
 80006f2:	3401      	adds	r4, #1
 80006f4:	b292      	uxth	r2, r2
 80006f6:	eb0e 0a42 	add.w	sl, lr, r2, lsl #1
 80006fa:	f88a b001 	strb.w	fp, [sl, #1]
				Modbus.u.stream[j*2]     = u1f_eth_rx_buff_01[(i*2)+14];
 80006fe:	f890 a00c 	ldrb.w	sl, [r0, #12]
 8000702:	f80e a012 	strb.w	sl, [lr, r2, lsl #1]
			for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 8000706:	e7ce      	b.n	80006a6 <TCP_Server_Modbus+0xf6>
		else if(u1f_eth_rx_buff_01[7] == 0x01)
 8000708:	2c01      	cmp	r4, #1
 800070a:	d13a      	bne.n	8000782 <TCP_Server_Modbus+0x1d2>
			MORD.u.stream[0] = u1f_eth_rx_buff_01[6];  //Unit ID
 800070c:	4d41      	ldr	r5, [pc, #260]	@ (8000814 <TCP_Server_Modbus+0x264>)
			MORD.u.stream[2] = u1f_eth_rx_buff_01[9];  //Start Add
 800070e:	7a5a      	ldrb	r2, [r3, #9]
			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 8000710:	4842      	ldr	r0, [pc, #264]	@ (800081c <TCP_Server_Modbus+0x26c>)
			MORD.u.stream[2] = u1f_eth_rx_buff_01[9];  //Start Add
 8000712:	70aa      	strb	r2, [r5, #2]
			MORD.u.stream[3] = u1f_eth_rx_buff_01[8];  //Start_Add
 8000714:	7a1a      	ldrb	r2, [r3, #8]
			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 8000716:	f893 c000 	ldrb.w	ip, [r3]
			MORD.u.stream[3] = u1f_eth_rx_buff_01[8];  //Start_Add
 800071a:	70ea      	strb	r2, [r5, #3]
			MORD.u.stream[4] = u1f_eth_rx_buff_01[11]; //Length
 800071c:	7ada      	ldrb	r2, [r3, #11]
			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 800071e:	f880 c000 	strb.w	ip, [r0]
			MORD.u.stream[4] = u1f_eth_rx_buff_01[11]; //Length
 8000722:	712a      	strb	r2, [r5, #4]
			MORD.u.stream[5] = u1f_eth_rx_buff_01[10]; //Length
 8000724:	7a9a      	ldrb	r2, [r3, #10]
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 8000726:	f893 c001 	ldrb.w	ip, [r3, #1]
			MORD.u.stream[5] = u1f_eth_rx_buff_01[10]; //Length
 800072a:	716a      	strb	r2, [r5, #5]
			MORD.u.Header.Inx = MORD.u.Header.Inx / 16;
 800072c:	88ae      	ldrh	r6, [r5, #4]
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 800072e:	f880 c001 	strb.w	ip, [r0, #1]
			MORD.u.Header.Inx = MORD.u.Header.Inx / 16;
 8000732:	0936      	lsrs	r6, r6, #4
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 8000734:	f893 c002 	ldrb.w	ip, [r3, #2]
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 8000738:	78db      	ldrb	r3, [r3, #3]
			j = MORD.u.Header.Inx*2 + 3;
 800073a:	0072      	lsls	r2, r6, #1
			MORD.u.stream[0] = u1f_eth_rx_buff_01[6];  //Unit ID
 800073c:	7029      	strb	r1, [r5, #0]
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 800073e:	70c3      	strb	r3, [r0, #3]
			j = MORD.u.Header.Inx*2 + 3;
 8000740:	1cd7      	adds	r7, r2, #3
			MORD.u.stream[1] = u1f_eth_rx_buff_01[7];  //Function code
 8000742:	706c      	strb	r4, [r5, #1]
			MORD.u.Header.Inx = MORD.u.Header.Inx / 16;
 8000744:	80ae      	strh	r6, [r5, #4]
			u1f_eth_tx_buff_01[4] = (unsigned char)(j >> 8);
 8000746:	0a3b      	lsrs	r3, r7, #8
			u1f_eth_tx_buff_01[6] = u1f_eth_rx_buff_01[6]; //ID
 8000748:	7181      	strb	r1, [r0, #6]
			u1f_eth_tx_buff_01[7] = 0x01;               //FunctionCode
 800074a:	71c4      	strb	r4, [r0, #7]
			for(i=0;i<MORD.u.Header.Inx;i++)
 800074c:	2100      	movs	r1, #0
			u1f_eth_tx_buff_01[4] = (unsigned char)(j >> 8);
 800074e:	7103      	strb	r3, [r0, #4]
			u1f_eth_tx_buff_01[8] = MORD.u.Header.Inx*2*2;  // 4 * 4byte
 8000750:	00b3      	lsls	r3, r6, #2
				j = MORD.u.Header.Add+i;
 8000752:	886d      	ldrh	r5, [r5, #2]
				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1]; // 11
 8000754:	4c32      	ldr	r4, [pc, #200]	@ (8000820 <TCP_Server_Modbus+0x270>)
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 8000756:	f880 c002 	strb.w	ip, [r0, #2]
			u1f_eth_tx_buff_01[5] = (unsigned char)(j); //길이정보
 800075a:	7147      	strb	r7, [r0, #5]
			u1f_eth_tx_buff_01[8] = MORD.u.Header.Inx*2*2;  // 4 * 4byte
 800075c:	7203      	strb	r3, [r0, #8]
			for(i=0;i<MORD.u.Header.Inx;i++)
 800075e:	b28b      	uxth	r3, r1
 8000760:	3002      	adds	r0, #2
 8000762:	429e      	cmp	r6, r3
 8000764:	d802      	bhi.n	800076c <TCP_Server_Modbus+0x1bc>
			Data_Cnt = (MORD.u.Header.Inx*2) + 9;
 8000766:	3209      	adds	r2, #9
			TCP_TX_COUNT_C++;
 8000768:	4932      	ldr	r1, [pc, #200]	@ (8000834 <TCP_Server_Modbus+0x284>)
 800076a:	e768      	b.n	800063e <TCP_Server_Modbus+0x8e>
				j = MORD.u.Header.Add+i;
 800076c:	442b      	add	r3, r5
 800076e:	3101      	adds	r1, #1
				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1]; // 11
 8000770:	b29b      	uxth	r3, r3
 8000772:	eb04 0743 	add.w	r7, r4, r3, lsl #1
				u1f_eth_tx_buff_01[9+i*2 + 1] = Modbus.u.stream[j*2]; // 10
 8000776:	f814 3013 	ldrb.w	r3, [r4, r3, lsl #1]
				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1]; // 11
 800077a:	787f      	ldrb	r7, [r7, #1]
				u1f_eth_tx_buff_01[9+i*2 + 1] = Modbus.u.stream[j*2]; // 10
 800077c:	7203      	strb	r3, [r0, #8]
				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1]; // 11
 800077e:	71c7      	strb	r7, [r0, #7]
			for(i=0;i<MORD.u.Header.Inx;i++)
 8000780:	e7ed      	b.n	800075e <TCP_Server_Modbus+0x1ae>
		else if(u1f_eth_rx_buff_01[7] == 0x0F) // broadcast
 8000782:	2c0f      	cmp	r4, #15
 8000784:	d13a      	bne.n	80007fc <TCP_Server_Modbus+0x24c>
			 MOWR.u.stream[0] = u1f_eth_rx_buff_01[6];   //Unit ID
 8000786:	4a29      	ldr	r2, [pc, #164]	@ (800082c <TCP_Server_Modbus+0x27c>)
			 for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 8000788:	2000      	movs	r0, #0
			 MOWR.u.stream[2] = u1f_eth_rx_buff_01[9];   //Start Add
 800078a:	7a5e      	ldrb	r6, [r3, #9]
			 MOWR.u.stream[3] = u1f_eth_rx_buff_01[8];   //Start_Add
 800078c:	7a1f      	ldrb	r7, [r3, #8]
				Modbus.u.stream[j*2]     = 0x00;
 800078e:	4681      	mov	r9, r0
			 MOWR.u.stream[5] = u1f_eth_rx_buff_01[10];  //Length
 8000790:	7a9d      	ldrb	r5, [r3, #10]
			 MOWR.u.stream[1] = u1f_eth_rx_buff_01[7];   //Function code
 8000792:	7054      	strb	r4, [r2, #1]
			 MOWR.u.stream[4] = u1f_eth_rx_buff_01[11];  //Length
 8000794:	7adc      	ldrb	r4, [r3, #11]
			 MOWR.u.stream[2] = u1f_eth_rx_buff_01[9];   //Start Add
 8000796:	7096      	strb	r6, [r2, #2]
			 MOWR.u.stream[3] = u1f_eth_rx_buff_01[8];   //Start_Add
 8000798:	70d7      	strb	r7, [r2, #3]
			 MOWR.u.stream[4] = u1f_eth_rx_buff_01[11];  //Length
 800079a:	7114      	strb	r4, [r2, #4]
			 MOWR.u.stream[5] = u1f_eth_rx_buff_01[10];  //Length
 800079c:	7155      	strb	r5, [r2, #5]
				j = MOWR.u.Header.Add+i;
 800079e:	f8b2 e002 	ldrh.w	lr, [r2, #2]
			 for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 80007a2:	f8b2 8004 	ldrh.w	r8, [r2, #4]
				Modbus.u.stream[(j*2)+1] = u1f_eth_rx_buff_01[(i*2)+13];
 80007a6:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8000820 <TCP_Server_Modbus+0x270>
			 MOWR.u.stream[0] = u1f_eth_rx_buff_01[6];   //Unit ID
 80007aa:	7011      	strb	r1, [r2, #0]
			 for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 80007ac:	b282      	uxth	r2, r0
 80007ae:	4590      	cmp	r8, r2
 80007b0:	d815      	bhi.n	80007de <TCP_Server_Modbus+0x22e>
			 u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 80007b2:	4a1a      	ldr	r2, [pc, #104]	@ (800081c <TCP_Server_Modbus+0x26c>)
 80007b4:	7818      	ldrb	r0, [r3, #0]
			 u1f_eth_tx_buff_01[6]  = u1f_eth_rx_buff_01[6];
 80007b6:	7191      	strb	r1, [r2, #6]
			 u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 80007b8:	7010      	strb	r0, [r2, #0]
			 u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 80007ba:	7858      	ldrb	r0, [r3, #1]
			 u1f_eth_tx_buff_01[8]  = u1f_eth_rx_buff_01[8];
 80007bc:	7217      	strb	r7, [r2, #8]
			 u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 80007be:	7050      	strb	r0, [r2, #1]
			 u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 80007c0:	7898      	ldrb	r0, [r3, #2]
			 u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 80007c2:	78db      	ldrb	r3, [r3, #3]
			 u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 80007c4:	7090      	strb	r0, [r2, #2]
			 u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 80007c6:	70d3      	strb	r3, [r2, #3]
			 u1f_eth_tx_buff_01[4]  = 0;
 80007c8:	2300      	movs	r3, #0
			 u1f_eth_tx_buff_01[9]  = u1f_eth_rx_buff_01[9];
 80007ca:	7256      	strb	r6, [r2, #9]
			 u1f_eth_tx_buff_01[4]  = 0;
 80007cc:	7113      	strb	r3, [r2, #4]
			 u1f_eth_tx_buff_01[5]  = 0x06;
 80007ce:	2306      	movs	r3, #6
			 u1f_eth_tx_buff_01[10] = u1f_eth_rx_buff_01[10];
 80007d0:	7295      	strb	r5, [r2, #10]
			 u1f_eth_tx_buff_01[5]  = 0x06;
 80007d2:	7153      	strb	r3, [r2, #5]
			 u1f_eth_tx_buff_01[7]  = u1f_eth_rx_buff_01[7];
 80007d4:	230f      	movs	r3, #15
			 u1f_eth_tx_buff_01[11] = u1f_eth_rx_buff_01[11];
 80007d6:	72d4      	strb	r4, [r2, #11]
			 u1f_eth_tx_buff_01[7]  = u1f_eth_rx_buff_01[7];
 80007d8:	71d3      	strb	r3, [r2, #7]
			 TCP_TX_COUNT_D++;
 80007da:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <TCP_Server_Modbus+0x288>)
 80007dc:	e77d      	b.n	80006da <TCP_Server_Modbus+0x12a>
				j = MOWR.u.Header.Add+i;
 80007de:	4472      	add	r2, lr
				Modbus.u.stream[(j*2)+1] = u1f_eth_rx_buff_01[(i*2)+13];
 80007e0:	b292      	uxth	r2, r2
 80007e2:	eb0c 0a42 	add.w	sl, ip, r2, lsl #1
 80007e6:	9203      	str	r2, [sp, #12]
 80007e8:	4a14      	ldr	r2, [pc, #80]	@ (800083c <TCP_Server_Modbus+0x28c>)
 80007ea:	f812 b010 	ldrb.w	fp, [r2, r0, lsl #1]
 80007ee:	3001      	adds	r0, #1
				Modbus.u.stream[j*2]     = 0x00;
 80007f0:	9a03      	ldr	r2, [sp, #12]
				Modbus.u.stream[(j*2)+1] = u1f_eth_rx_buff_01[(i*2)+13];
 80007f2:	f88a b001 	strb.w	fp, [sl, #1]
				Modbus.u.stream[j*2]     = 0x00;
 80007f6:	f80c 9012 	strb.w	r9, [ip, r2, lsl #1]
			 for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 80007fa:	e7d7      	b.n	80007ac <TCP_Server_Modbus+0x1fc>
	uint16_t Data_Cnt = 0;
 80007fc:	2200      	movs	r2, #0
 80007fe:	e725      	b.n	800064c <TCP_Server_Modbus+0x9c>
		Check_ETH_ERR++;
 8000800:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <TCP_Server_Modbus+0x290>)
 8000802:	6813      	ldr	r3, [r2, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	e728      	b.n	800065c <TCP_Server_Modbus+0xac>
 800080a:	bf00      	nop
 800080c:	20000a32 	.word	0x20000a32
 8000810:	20013c32 	.word	0x20013c32
 8000814:	2001458e 	.word	0x2001458e
 8000818:	20000200 	.word	0x20000200
 800081c:	20000232 	.word	0x20000232
 8000820:	20000c32 	.word	0x20000c32
 8000824:	20000220 	.word	0x20000220
 8000828:	20014598 	.word	0x20014598
 800082c:	200144be 	.word	0x200144be
 8000830:	20000218 	.word	0x20000218
 8000834:	20000210 	.word	0x20000210
 8000838:	20000208 	.word	0x20000208
 800083c:	20000a3f 	.word	0x20000a3f
 8000840:	200001fc 	.word	0x200001fc

08000844 <TCP_RX_DATA_TASK>:
	  conn_01 = netconn_new(NETCONN_TCP);
 8000844:	2200      	movs	r2, #0
 8000846:	2010      	movs	r0, #16
{
 8000848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  conn_01 = netconn_new(NETCONN_TCP);
 800084c:	4611      	mov	r1, r2
{
 800084e:	b085      	sub	sp, #20
	  conn_01 = netconn_new(NETCONN_TCP);
 8000850:	f004 ff0a 	bl	8005668 <netconn_new_with_proto_and_callback>
	  netconn_bind(conn_01, IP_ADDR_ANY, TCP_Server_Port_01);
 8000854:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <TCP_RX_DATA_TASK+0xac>)
	  conn_01 = netconn_new(NETCONN_TCP);
 8000856:	4e27      	ldr	r6, [pc, #156]	@ (80008f4 <TCP_RX_DATA_TASK+0xb0>)
	  netconn_bind(conn_01, IP_ADDR_ANY, TCP_Server_Port_01);
 8000858:	881a      	ldrh	r2, [r3, #0]
 800085a:	4927      	ldr	r1, [pc, #156]	@ (80008f8 <TCP_RX_DATA_TASK+0xb4>)
	  conn_01 = netconn_new(NETCONN_TCP);
 800085c:	6030      	str	r0, [r6, #0]
	  netconn_bind(conn_01, IP_ADDR_ANY, TCP_Server_Port_01);
 800085e:	f004 ff7b 	bl	8005758 <netconn_bind>
	  LWIP_ERROR("tcpecho: invalid conn", (conn_01 != NULL), return;);
 8000862:	6830      	ldr	r0, [r6, #0]
 8000864:	b940      	cbnz	r0, 8000878 <TCP_RX_DATA_TASK+0x34>
 8000866:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <TCP_RX_DATA_TASK+0xb8>)
 8000868:	223c      	movs	r2, #60	@ 0x3c
 800086a:	4925      	ldr	r1, [pc, #148]	@ (8000900 <TCP_RX_DATA_TASK+0xbc>)
 800086c:	4825      	ldr	r0, [pc, #148]	@ (8000904 <TCP_RX_DATA_TASK+0xc0>)
}
 800086e:	b005      	add	sp, #20
 8000870:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  LWIP_ERROR("tcpecho: invalid conn", (conn_01 != NULL), return;);
 8000874:	f00d bda0 	b.w	800e3b8 <iprintf>
	    err = netconn_accept(conn_01, &newconn_01);
 8000878:	4c23      	ldr	r4, [pc, #140]	@ (8000908 <TCP_RX_DATA_TASK+0xc4>)
	  netconn_listen(conn_01);
 800087a:	21ff      	movs	r1, #255	@ 0xff
				 memcpy(&u1f_eth_rx_buff_01, data, len);
 800087c:	4f23      	ldr	r7, [pc, #140]	@ (800090c <TCP_RX_DATA_TASK+0xc8>)
	  netconn_listen(conn_01);
 800087e:	f004 ff91 	bl	80057a4 <netconn_listen_with_backlog>
	    err = netconn_accept(conn_01, &newconn_01);
 8000882:	4621      	mov	r1, r4
 8000884:	6830      	ldr	r0, [r6, #0]
 8000886:	f005 f83b 	bl	8005900 <netconn_accept>
	    if(err == ERR_OK)
 800088a:	2800      	cmp	r0, #0
 800088c:	d1f9      	bne.n	8000882 <TCP_RX_DATA_TASK+0x3e>
				 u1f_eth_rx_length_01 = len;
 800088e:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8000914 <TCP_RX_DATA_TASK+0xd0>
	      while((err = netconn_recv(newconn_01, &buf)) == ERR_OK)
 8000892:	a902      	add	r1, sp, #8
 8000894:	6820      	ldr	r0, [r4, #0]
 8000896:	f005 f94b 	bl	8005b30 <netconn_recv>
 800089a:	bb08      	cbnz	r0, 80008e0 <TCP_RX_DATA_TASK+0x9c>
				 Check_TCP_01_RX_Cnt++;
 800089c:	4d1c      	ldr	r5, [pc, #112]	@ (8000910 <TCP_RX_DATA_TASK+0xcc>)
				 netbuf_data(buf, &data, &len);       //receive data pointer & length
 800089e:	f10d 0206 	add.w	r2, sp, #6
 80008a2:	a903      	add	r1, sp, #12
 80008a4:	9802      	ldr	r0, [sp, #8]
 80008a6:	f006 f925 	bl	8006af4 <netbuf_data>
				 memcpy(&u1f_eth_rx_buff_01, data, len);
 80008aa:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80008ae:	9903      	ldr	r1, [sp, #12]
 80008b0:	4638      	mov	r0, r7
 80008b2:	464a      	mov	r2, r9
 80008b4:	f00d ff55 	bl	800e762 <memcpy>
				 u1f_eth_rx_length_01 = len;
 80008b8:	f8a8 9000 	strh.w	r9, [r8]
				 Check_TCP_01_RX_Cnt++;
 80008bc:	e9d5 3200 	ldrd	r3, r2, [r5]
 80008c0:	3301      	adds	r3, #1
 80008c2:	f142 0200 	adc.w	r2, r2, #0
 80008c6:	e9c5 3200 	strd	r3, r2, [r5]
				   TCP_Server_Modbus();
 80008ca:	f7ff fe71 	bl	80005b0 <TCP_Server_Modbus>
	        while(netbuf_next(buf) >= 0);  //check buffer empty
 80008ce:	9802      	ldr	r0, [sp, #8]
 80008d0:	f006 f93c 	bl	8006b4c <netbuf_next>
 80008d4:	2800      	cmp	r0, #0
 80008d6:	dae2      	bge.n	800089e <TCP_RX_DATA_TASK+0x5a>
	        netbuf_delete(buf);      	   //clear buffer
 80008d8:	9802      	ldr	r0, [sp, #8]
 80008da:	f006 f8f9 	bl	8006ad0 <netbuf_delete>
 80008de:	e7d8      	b.n	8000892 <TCP_RX_DATA_TASK+0x4e>
	      netconn_close(newconn_01);
 80008e0:	6820      	ldr	r0, [r4, #0]
 80008e2:	f004 fffb 	bl	80058dc <netconn_close>
	      netconn_delete(newconn_01);         //clear buffer
 80008e6:	6820      	ldr	r0, [r4, #0]
 80008e8:	f004 ff28 	bl	800573c <netconn_delete>
 80008ec:	e7c9      	b.n	8000882 <TCP_RX_DATA_TASK+0x3e>
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	2001459c 	.word	0x2001459c
 80008f8:	08011968 	.word	0x08011968
 80008fc:	0800f124 	.word	0x0800f124
 8000900:	0800f144 	.word	0x0800f144
 8000904:	0800f15a 	.word	0x0800f15a
 8000908:	20014598 	.word	0x20014598
 800090c:	20000a32 	.word	0x20000a32
 8000910:	20000228 	.word	0x20000228
 8000914:	20000230 	.word	0x20000230

08000918 <Task_Schedule>:




void Task_Schedule(void) // Task 스퀘줄링 함수
{
 8000918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	TimeTaskCnt.TimeScheduleCnt++;
 800091a:	4f28      	ldr	r7, [pc, #160]	@ (80009bc <Task_Schedule+0xa4>)
//	}
//
//
//	if((TimeTaskCnt.TimeScheduleCnt%1) == 0)    //10ms 카운터 체크
//	{
		TimeTask.bit.Task_10ms = 1;
 800091c:	2205      	movs	r2, #5
 800091e:	4c28      	ldr	r4, [pc, #160]	@ (80009c0 <Task_Schedule+0xa8>)
	TimeTaskCnt.TimeScheduleCnt++;
 8000920:	e9d7 5600 	ldrd	r5, r6, [r7]
		TimeTask.bit.Task_10ms = 1;
 8000924:	7823      	ldrb	r3, [r4, #0]
	TimeTaskCnt.TimeScheduleCnt++;
 8000926:	3501      	adds	r5, #1
		TimeTask.bit.Task_10ms = 1;
 8000928:	f043 0304 	orr.w	r3, r3, #4
	TimeTaskCnt.TimeScheduleCnt++;
 800092c:	f146 0600 	adc.w	r6, r6, #0
		TimeTask.bit.Task_10ms = 1;
 8000930:	4628      	mov	r0, r5
 8000932:	7023      	strb	r3, [r4, #0]
 8000934:	2300      	movs	r3, #0
 8000936:	4631      	mov	r1, r6
	TimeTaskCnt.TimeScheduleCnt++;
 8000938:	e9c7 5600 	strd	r5, r6, [r7]
		TimeTask.bit.Task_10ms = 1;
 800093c:	f7ff fcc0 	bl	80002c0 <__aeabi_uldivmod>
//	}

	if((TimeTaskCnt.TimeScheduleCnt%5) == 0)    //50ms 카운터 체크
 8000940:	431a      	orrs	r2, r3
	{
		TimeTask.bit.Task_50ms = 1;
 8000942:	4631      	mov	r1, r6
 8000944:	f04f 020a 	mov.w	r2, #10
 8000948:	bf08      	it	eq
 800094a:	7823      	ldrbeq	r3, [r4, #0]
 800094c:	4628      	mov	r0, r5
 800094e:	bf04      	itt	eq
 8000950:	f043 0308 	orreq.w	r3, r3, #8
 8000954:	7023      	strbeq	r3, [r4, #0]
 8000956:	2300      	movs	r3, #0
 8000958:	f7ff fcb2 	bl	80002c0 <__aeabi_uldivmod>
	}

	if((TimeTaskCnt.TimeScheduleCnt%10) == 0)    //100ms 카운터 체크
 800095c:	431a      	orrs	r2, r3
	{
		TimeTask.bit.Task_100ms = 1;
 800095e:	4631      	mov	r1, r6
 8000960:	f04f 0219 	mov.w	r2, #25
 8000964:	bf08      	it	eq
 8000966:	7823      	ldrbeq	r3, [r4, #0]
 8000968:	4628      	mov	r0, r5
 800096a:	bf04      	itt	eq
 800096c:	f043 0310 	orreq.w	r3, r3, #16
 8000970:	7023      	strbeq	r3, [r4, #0]
 8000972:	2300      	movs	r3, #0
 8000974:	f7ff fca4 	bl	80002c0 <__aeabi_uldivmod>
	}

	if((TimeTaskCnt.TimeScheduleCnt%25) == 0)    //250ms 카운터 체크
 8000978:	431a      	orrs	r2, r3
	{
		TimeTask.bit.Task_250ms = 1;
 800097a:	4631      	mov	r1, r6
 800097c:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8000980:	bf08      	it	eq
 8000982:	7823      	ldrbeq	r3, [r4, #0]
 8000984:	4628      	mov	r0, r5
 8000986:	bf04      	itt	eq
 8000988:	f043 0320 	orreq.w	r3, r3, #32
 800098c:	7023      	strbeq	r3, [r4, #0]
 800098e:	2300      	movs	r3, #0
 8000990:	f7ff fc96 	bl	80002c0 <__aeabi_uldivmod>
	}

	if((TimeTaskCnt.TimeScheduleCnt%50) == 0)    //500ms 카운터 체크
 8000994:	431a      	orrs	r2, r3
	{
		TimeTask.bit.Task_500ms = 1;
 8000996:	bf02      	ittt	eq
 8000998:	7823      	ldrbeq	r3, [r4, #0]
 800099a:	f043 0340 	orreq.w	r3, r3, #64	@ 0x40
 800099e:	7023      	strbeq	r3, [r4, #0]
	}

	if(TimeTaskCnt.TimeScheduleCnt >= 100)       //1sec 카운터 체크
 80009a0:	2d64      	cmp	r5, #100	@ 0x64
 80009a2:	f176 0600 	sbcs.w	r6, r6, #0
 80009a6:	d307      	bcc.n	80009b8 <Task_Schedule+0xa0>
	{
		TimeTask.bit.Task_1000ms = 1;
 80009a8:	7823      	ldrb	r3, [r4, #0]
		TimeTaskCnt.TimeScheduleCnt = 0;
 80009aa:	2200      	movs	r2, #0
		TimeTask.bit.Task_1000ms = 1;
 80009ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b0:	7023      	strb	r3, [r4, #0]
		TimeTaskCnt.TimeScheduleCnt = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e9c7 2300 	strd	r2, r3, [r7]
	}

}
 80009b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200145a0 	.word	0x200145a0
 80009c0:	200145e8 	.word	0x200145e8

080009c4 <Task_Schedule_FreeRun>:
	{
		Task_5ms();
		TimeTask.bit.Task_5ms = 0;
	}*/

	if(TimeTask.bit.Task_10ms==1)                // 10ms  체크
 80009c4:	4b49      	ldr	r3, [pc, #292]	@ (8000aec <Task_Schedule_FreeRun+0x128>)
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	0751      	lsls	r1, r2, #29
{
 80009ca:	b510      	push	{r4, lr}
	if(TimeTask.bit.Task_10ms==1)                // 10ms  체크
 80009cc:	d50a      	bpl.n	80009e4 <Task_Schedule_FreeRun+0x20>
	TimeTaskCnt.Task_10msCnt++;
 80009ce:	4848      	ldr	r0, [pc, #288]	@ (8000af0 <Task_Schedule_FreeRun+0x12c>)
	{
		Task_10ms();
		TimeTask.bit.Task_10ms = 0;
 80009d0:	f36f 0282 	bfc	r2, #2, #1
	TimeTaskCnt.Task_10msCnt++;
 80009d4:	e9d0 1406 	ldrd	r1, r4, [r0, #24]
		TimeTask.bit.Task_10ms = 0;
 80009d8:	701a      	strb	r2, [r3, #0]
	TimeTaskCnt.Task_10msCnt++;
 80009da:	3101      	adds	r1, #1
 80009dc:	f144 0400 	adc.w	r4, r4, #0
 80009e0:	e9c0 1406 	strd	r1, r4, [r0, #24]
	}

	if(TimeTask.bit.Task_50ms==1)                // 10ms  체크
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	0714      	lsls	r4, r2, #28
 80009e8:	d50a      	bpl.n	8000a00 <Task_Schedule_FreeRun+0x3c>
	TimeTaskCnt.Task_50msCnt++;
 80009ea:	4841      	ldr	r0, [pc, #260]	@ (8000af0 <Task_Schedule_FreeRun+0x12c>)
	{
		Task_50ms();
		TimeTask.bit.Task_50ms = 0;
 80009ec:	f36f 02c3 	bfc	r2, #3, #1
	TimeTaskCnt.Task_50msCnt++;
 80009f0:	e9d0 1408 	ldrd	r1, r4, [r0, #32]
		TimeTask.bit.Task_50ms = 0;
 80009f4:	701a      	strb	r2, [r3, #0]
	TimeTaskCnt.Task_50msCnt++;
 80009f6:	3101      	adds	r1, #1
 80009f8:	f144 0400 	adc.w	r4, r4, #0
 80009fc:	e9c0 1408 	strd	r1, r4, [r0, #32]
	}

	if(TimeTask.bit.Task_100ms==1)               // 100ms 체크
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	06d0      	lsls	r0, r2, #27
 8000a04:	d517      	bpl.n	8000a36 <Task_Schedule_FreeRun+0x72>
	TimeTaskCnt.Task_100msCnt++;
 8000a06:	493a      	ldr	r1, [pc, #232]	@ (8000af0 <Task_Schedule_FreeRun+0x12c>)
 8000a08:	e9d1 200a 	ldrd	r2, r0, [r1, #40]	@ 0x28
 8000a0c:	3201      	adds	r2, #1
 8000a0e:	f140 0000 	adc.w	r0, r0, #0
 8000a12:	e9c1 200a 	strd	r2, r0, [r1, #40]	@ 0x28
	if(Modbus.u.Header.Temperature++>15000)
 8000a16:	4937      	ldr	r1, [pc, #220]	@ (8000af4 <Task_Schedule_FreeRun+0x130>)
 8000a18:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8000a1c:	f8b1 2882 	ldrh.w	r2, [r1, #2178]	@ 0x882
 8000a20:	4282      	cmp	r2, r0
 8000a22:	bf96      	itet	ls
 8000a24:	3201      	addls	r2, #1
		Modbus.u.Header.Temperature = 0;
 8000a26:	2200      	movhi	r2, #0
	if(Modbus.u.Header.Temperature++>15000)
 8000a28:	b292      	uxthls	r2, r2
 8000a2a:	f8a1 2882 	strh.w	r2, [r1, #2178]	@ 0x882
	{
		Task_100ms();
		TimeTask.bit.Task_100ms = 0;
 8000a2e:	781a      	ldrb	r2, [r3, #0]
 8000a30:	f36f 1204 	bfc	r2, #4, #1
 8000a34:	701a      	strb	r2, [r3, #0]
	}

	if(TimeTask.bit.Task_250ms==1)               // 250ms 체크
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	0691      	lsls	r1, r2, #26
 8000a3a:	d50a      	bpl.n	8000a52 <Task_Schedule_FreeRun+0x8e>
	TimeTaskCnt.Task_250msCnt++;
 8000a3c:	482c      	ldr	r0, [pc, #176]	@ (8000af0 <Task_Schedule_FreeRun+0x12c>)
	{
		Task_250ms();
		TimeTask.bit.Task_250ms = 0;
 8000a3e:	f36f 1245 	bfc	r2, #5, #1
	TimeTaskCnt.Task_250msCnt++;
 8000a42:	e9d0 140c 	ldrd	r1, r4, [r0, #48]	@ 0x30
		TimeTask.bit.Task_250ms = 0;
 8000a46:	701a      	strb	r2, [r3, #0]
	TimeTaskCnt.Task_250msCnt++;
 8000a48:	3101      	adds	r1, #1
 8000a4a:	f144 0400 	adc.w	r4, r4, #0
 8000a4e:	e9c0 140c 	strd	r1, r4, [r0, #48]	@ 0x30
	}

	if(TimeTask.bit.Task_500ms==1)               // 500ms 체크
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	0652      	lsls	r2, r2, #25
 8000a56:	d517      	bpl.n	8000a88 <Task_Schedule_FreeRun+0xc4>
	TimeTaskCnt.Task_500msCnt++;
 8000a58:	4925      	ldr	r1, [pc, #148]	@ (8000af0 <Task_Schedule_FreeRun+0x12c>)
 8000a5a:	e9d1 200e 	ldrd	r2, r0, [r1, #56]	@ 0x38
 8000a5e:	3201      	adds	r2, #1
 8000a60:	f140 0000 	adc.w	r0, r0, #0
 8000a64:	e9c1 200e 	strd	r2, r0, [r1, #56]	@ 0x38
	if(Modbus.u.Header.Humidity++>10000)
 8000a68:	4922      	ldr	r1, [pc, #136]	@ (8000af4 <Task_Schedule_FreeRun+0x130>)
 8000a6a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000a6e:	f8b1 2884 	ldrh.w	r2, [r1, #2180]	@ 0x884
 8000a72:	4282      	cmp	r2, r0
 8000a74:	bf96      	itet	ls
 8000a76:	3201      	addls	r2, #1
		Modbus.u.Header.Humidity = 0;
 8000a78:	2200      	movhi	r2, #0
	if(Modbus.u.Header.Humidity++>10000)
 8000a7a:	b292      	uxthls	r2, r2
 8000a7c:	f8a1 2884 	strh.w	r2, [r1, #2180]	@ 0x884
	{
		Task_500ms();
		TimeTask.bit.Task_500ms = 0;
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	f36f 1286 	bfc	r2, #6, #1
 8000a86:	701a      	strb	r2, [r3, #0]
	}

	if(TimeTask.bit.Task_1000ms==1)              // 1sec  체크
 8000a88:	f993 2000 	ldrsb.w	r2, [r3]
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	da24      	bge.n	8000ada <Task_Schedule_FreeRun+0x116>
	TimeTaskCnt.Task_1000msCnt++;
 8000a90:	4917      	ldr	r1, [pc, #92]	@ (8000af0 <Task_Schedule_FreeRun+0x12c>)
 8000a92:	e9d1 2010 	ldrd	r2, r0, [r1, #64]	@ 0x40
 8000a96:	3201      	adds	r2, #1
 8000a98:	f140 0000 	adc.w	r0, r0, #0
 8000a9c:	e9c1 2010 	strd	r2, r0, [r1, #64]	@ 0x40
	if(Modbus.u.Header.WarningStandard-- <= 0)
 8000aa0:	4a14      	ldr	r2, [pc, #80]	@ (8000af4 <Task_Schedule_FreeRun+0x130>)
 8000aa2:	f8b2 1886 	ldrh.w	r1, [r2, #2182]	@ 0x886
 8000aa6:	b1c9      	cbz	r1, 8000adc <Task_Schedule_FreeRun+0x118>
 8000aa8:	3901      	subs	r1, #1
 8000aaa:	b289      	uxth	r1, r1
	if(Modbus.u.Header.GUI++>10000)
 8000aac:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000ab0:	f8a2 1886 	strh.w	r1, [r2, #2182]	@ 0x886
 8000ab4:	f8b2 1888 	ldrh.w	r1, [r2, #2184]	@ 0x888
 8000ab8:	4281      	cmp	r1, r0
 8000aba:	bf96      	itet	ls
 8000abc:	3101      	addls	r1, #1
		Modbus.u.Header.GUI = 0;
 8000abe:	2100      	movhi	r1, #0
	if(Modbus.u.Header.GUI++>10000)
 8000ac0:	b289      	uxthls	r1, r1
 8000ac2:	f8a2 1888 	strh.w	r1, [r2, #2184]	@ 0x888
	if(Modbus.u.Header.Alert == 0x00)
 8000ac6:	f8b2 1880 	ldrh.w	r1, [r2, #2176]	@ 0x880
 8000aca:	b951      	cbnz	r1, 8000ae2 <Task_Schedule_FreeRun+0x11e>
		Modbus.u.Header.Alert = 0x01;
 8000acc:	2101      	movs	r1, #1
		Modbus.u.Header.Alert = 0x00;
 8000ace:	f8a2 1880 	strh.w	r1, [r2, #2176]	@ 0x880
	{
		Task_1000ms();
		TimeTask.bit.Task_1000ms = 0;
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	f36f 12c7 	bfc	r2, #7, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
	}
}
 8000ada:	bd10      	pop	{r4, pc}
		Modbus.u.Header.WarningStandard = 10000;
 8000adc:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000ae0:	e7e4      	b.n	8000aac <Task_Schedule_FreeRun+0xe8>
	else if(Modbus.u.Header.Alert == 0x01)
 8000ae2:	2901      	cmp	r1, #1
 8000ae4:	d1f5      	bne.n	8000ad2 <Task_Schedule_FreeRun+0x10e>
		Modbus.u.Header.Alert = 0x00;
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	e7f1      	b.n	8000ace <Task_Schedule_FreeRun+0x10a>
 8000aea:	bf00      	nop
 8000aec:	200145e8 	.word	0x200145e8
 8000af0:	200145a0 	.word	0x200145a0
 8000af4:	20013c32 	.word	0x20013c32

08000af8 <des_encrypt>:
uint8_t iv[8] = "abcdef01"; // 초기화 벡터
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void des_encrypt(uint8_t *input, uint8_t *output) {
 8000af8:	b530      	push	{r4, r5, lr}
 8000afa:	b0a3      	sub	sp, #140	@ 0x8c
 8000afc:	4604      	mov	r4, r0
 8000afe:	460d      	mov	r5, r1
    mbedtls_des_context ctx;
    mbedtls_des_init(&ctx);
 8000b00:	a802      	add	r0, sp, #8
 8000b02:	f00c ff7c 	bl	800d9fe <mbedtls_des_init>

    // 암호화 키 설정
    mbedtls_des_setkey_enc(&ctx, key);
 8000b06:	4909      	ldr	r1, [pc, #36]	@ (8000b2c <des_encrypt+0x34>)
 8000b08:	a802      	add	r0, sp, #8
 8000b0a:	f00d f917 	bl	800dd3c <mbedtls_des_setkey_enc>

    // CBC 모드에서 암호화 수행
    mbedtls_des_crypt_cbc(&ctx, MBEDTLS_DES_ENCRYPT, 8, iv, input, output);
 8000b0e:	2208      	movs	r2, #8
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <des_encrypt+0x38>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	eb0d 0002 	add.w	r0, sp, r2
 8000b18:	e9cd 4500 	strd	r4, r5, [sp]
 8000b1c:	f00d fa1c 	bl	800df58 <mbedtls_des_crypt_cbc>

    mbedtls_des_free(&ctx);
 8000b20:	a802      	add	r0, sp, #8
 8000b22:	f00c ff70 	bl	800da06 <mbedtls_des_free>
}
 8000b26:	b023      	add	sp, #140	@ 0x8c
 8000b28:	bd30      	pop	{r4, r5, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000000a 	.word	0x2000000a
 8000b30:	20000002 	.word	0x20000002

08000b34 <des_decrypt>:

// DES 복호화 함수
void des_decrypt(uint8_t *input, uint8_t *output) {
 8000b34:	b530      	push	{r4, r5, lr}
 8000b36:	b0a3      	sub	sp, #140	@ 0x8c
 8000b38:	4604      	mov	r4, r0
 8000b3a:	460d      	mov	r5, r1
    mbedtls_des_context ctx;
    mbedtls_des_init(&ctx);
 8000b3c:	a802      	add	r0, sp, #8
 8000b3e:	f00c ff5e 	bl	800d9fe <mbedtls_des_init>

    // 복호화 키 설정
    mbedtls_des_setkey_dec(&ctx, key);
 8000b42:	4909      	ldr	r1, [pc, #36]	@ (8000b68 <des_decrypt+0x34>)
 8000b44:	a802      	add	r0, sp, #8
 8000b46:	f00d f8fe 	bl	800dd46 <mbedtls_des_setkey_dec>

    // CBC 모드에서 복호화 수행
    mbedtls_des_crypt_cbc(&ctx, MBEDTLS_DES_DECRYPT, 8, iv, input, output);
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <des_decrypt+0x38>)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	eb0d 0002 	add.w	r0, sp, r2
 8000b54:	e9cd 4500 	strd	r4, r5, [sp]
 8000b58:	f00d f9fe 	bl	800df58 <mbedtls_des_crypt_cbc>

    mbedtls_des_free(&ctx);
 8000b5c:	a802      	add	r0, sp, #8
 8000b5e:	f00c ff52 	bl	800da06 <mbedtls_des_free>
}
 8000b62:	b023      	add	sp, #140	@ 0x8c
 8000b64:	bd30      	pop	{r4, r5, pc}
 8000b66:	bf00      	nop
 8000b68:	2000000a 	.word	0x2000000a
 8000b6c:	20000002 	.word	0x20000002

08000b70 <StartDefaultTask>:
/* USER CODE END Header_StartDefaultTask */

uint64_t MAIN_CNT = 0;

void StartDefaultTask(void *argument)
{
 8000b70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b72:	f001 fe8b 	bl	800288c <MX_LWIP_Init>

  uint8_t input[8] = "Hello!01";  // 8바이트 평문
 8000b76:	4a16      	ldr	r2, [pc, #88]	@ (8000bd0 <StartDefaultTask+0x60>)
 8000b78:	466b      	mov	r3, sp
  for(;;)
  {
	osDelay(10);
    Task_Schedule();
    Task_Schedule_FreeRun();
	MAIN_CNT++;
 8000b7a:	4c16      	ldr	r4, [pc, #88]	@ (8000bd4 <StartDefaultTask+0x64>)
  uint8_t input[8] = "Hello!01";  // 8바이트 평문
 8000b7c:	6810      	ldr	r0, [r2, #0]
 8000b7e:	6851      	ldr	r1, [r2, #4]
 8000b80:	c303      	stmia	r3!, {r0, r1}
  des_encrypt(input, encrypted);
 8000b82:	4668      	mov	r0, sp
 8000b84:	4619      	mov	r1, r3
 8000b86:	f7ff ffb7 	bl	8000af8 <des_encrypt>
  des_decrypt(encrypted, decrypted);
 8000b8a:	a904      	add	r1, sp, #16
 8000b8c:	a802      	add	r0, sp, #8
 8000b8e:	f7ff ffd1 	bl	8000b34 <des_decrypt>
  Modbus.u.Header.Alert = 0x00;
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <StartDefaultTask+0x68>)
 8000b94:	2200      	movs	r2, #0
  Modbus.u.Header.WarningStandard = 10000;
 8000b96:	f242 7110 	movw	r1, #10000	@ 0x2710
  Modbus.u.Header.Alert = 0x00;
 8000b9a:	f8a3 2880 	strh.w	r2, [r3, #2176]	@ 0x880
  Modbus.u.Header.Temperature = 2000;
 8000b9e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
  Modbus.u.Header.WarningStandard = 10000;
 8000ba2:	f8a3 1886 	strh.w	r1, [r3, #2182]	@ 0x886
  Modbus.u.Header.Temperature = 2000;
 8000ba6:	f8a3 2882 	strh.w	r2, [r3, #2178]	@ 0x882
  Modbus.u.Header.Humidity = 2000;
 8000baa:	f8a3 2884 	strh.w	r2, [r3, #2180]	@ 0x884
  Modbus.u.Header.GUI = 2000;
 8000bae:	f8a3 2888 	strh.w	r2, [r3, #2184]	@ 0x888
	osDelay(10);
 8000bb2:	200a      	movs	r0, #10
 8000bb4:	f002 fa56 	bl	8003064 <osDelay>
    Task_Schedule();
 8000bb8:	f7ff feae 	bl	8000918 <Task_Schedule>
    Task_Schedule_FreeRun();
 8000bbc:	f7ff ff02 	bl	80009c4 <Task_Schedule_FreeRun>
	MAIN_CNT++;
 8000bc0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	f142 0200 	adc.w	r2, r2, #0
 8000bca:	e9c4 3200 	strd	r3, r2, [r4]
  for(;;)
 8000bce:	e7f0      	b.n	8000bb2 <StartDefaultTask+0x42>
 8000bd0:	0800f182 	.word	0x0800f182
 8000bd4:	200145f0 	.word	0x200145f0
 8000bd8:	20013c32 	.word	0x20013c32

08000bdc <SystemClock_Config>:
{
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be0:	2230      	movs	r2, #48	@ 0x30
 8000be2:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be4:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	a808      	add	r0, sp, #32
 8000be8:	f00d fce0 	bl	800e5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	2214      	movs	r2, #20
 8000bee:	2100      	movs	r1, #0
 8000bf0:	a803      	add	r0, sp, #12
 8000bf2:	f00d fcdb 	bl	800e5ac <memset>
  HAL_PWR_EnableBkUpAccess();
 8000bf6:	f001 f9cb 	bl	8001f90 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfc:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000bfe:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c02:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000c06:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c12:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <SystemClock_Config+0xa4>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c22:	9302      	str	r3, [sp, #8]
 8000c24:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c2a:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c32:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c36:	23d8      	movs	r3, #216	@ 0xd8
 8000c38:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c3e:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c42:	f001 f9e5 	bl	8002010 <HAL_RCC_OscConfig>
 8000c46:	b108      	cbz	r0, 8000c4c <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <SystemClock_Config+0x6e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c4c:	f001 f9a8 	bl	8001fa0 <HAL_PWREx_EnableOverDrive>
 8000c50:	b108      	cbz	r0, 8000c56 <SystemClock_Config+0x7a>
 8000c52:	b672      	cpsid	i
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c56:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c58:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5c:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c5e:	2107      	movs	r1, #7
 8000c60:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c6e:	f001 fbb7 	bl	80023e0 <HAL_RCC_ClockConfig>
 8000c72:	b108      	cbz	r0, 8000c78 <SystemClock_Config+0x9c>
 8000c74:	b672      	cpsid	i
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <SystemClock_Config+0x9a>
}
 8000c78:	b014      	add	sp, #80	@ 0x50
 8000c7a:	bd10      	pop	{r4, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40007000 	.word	0x40007000

08000c84 <main>:
{
 8000c84:	b500      	push	{lr}
 8000c86:	b08d      	sub	sp, #52	@ 0x34
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c88:	2210      	movs	r2, #16
 8000c8a:	2100      	movs	r1, #0
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c8c:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c8e:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c90:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c92:	f00d fc8b 	bl	800e5ac <memset>
  HAL_MPU_Disable();
 8000c96:	f000 fabf 	bl	8001218 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c9a:	f248 731f 	movw	r3, #34591	@ 0x871f
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c9e:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ca0:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ca4:	e9cd 4308 	strd	r4, r3, [sp, #32]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ca8:	f240 1301 	movw	r3, #257	@ 0x101
 8000cac:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cae:	f000 fad1 	bl	8001254 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cb2:	2004      	movs	r0, #4
 8000cb4:	f000 fabe 	bl	8001234 <HAL_MPU_Enable>
  HAL_Init();
 8000cb8:	f000 fa2c 	bl	8001114 <HAL_Init>
  SystemClock_Config();
 8000cbc:	f7ff ff8e 	bl	8000bdc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	4621      	mov	r1, r4
 8000cc4:	a807      	add	r0, sp, #28
 8000cc6:	f00d fc71 	bl	800e5ac <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cca:	4b3b      	ldr	r3, [pc, #236]	@ (8000db8 <main+0x134>)
  HAL_GPIO_WritePin(GPIOC, DO_EXT_OUT1_Pin|DO_EXT_OUT2_Pin|DO_EXT_OUT3_Pin, GPIO_PIN_RESET);
 8000ccc:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000cd0:	483a      	ldr	r0, [pc, #232]	@ (8000dbc <main+0x138>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cd4:	f042 0210 	orr.w	r2, r2, #16
 8000cd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cdc:	f002 0210 	and.w	r2, r2, #16
 8000ce0:	9201      	str	r2, [sp, #4]
 8000ce2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ce6:	f042 0204 	orr.w	r2, r2, #4
 8000cea:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cee:	f002 0204 	and.w	r2, r2, #4
 8000cf2:	9202      	str	r2, [sp, #8]
 8000cf4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cf8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000cfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d00:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000d04:	9203      	str	r2, [sp, #12]
 8000d06:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d0a:	432a      	orrs	r2, r5
 8000d0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d10:	402a      	ands	r2, r5
 8000d12:	9204      	str	r2, [sp, #16]
 8000d14:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d18:	f042 0202 	orr.w	r2, r2, #2
 8000d1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d20:	f002 0202 	and.w	r2, r2, #2
 8000d24:	9205      	str	r2, [sp, #20]
 8000d26:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d2a:	f042 0208 	orr.w	r2, r2, #8
 8000d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOC, DO_EXT_OUT1_Pin|DO_EXT_OUT2_Pin|DO_EXT_OUT3_Pin, GPIO_PIN_RESET);
 8000d30:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	9306      	str	r3, [sp, #24]
 8000d3a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, DO_EXT_OUT1_Pin|DO_EXT_OUT2_Pin|DO_EXT_OUT3_Pin, GPIO_PIN_RESET);
 8000d3c:	f001 f922 	bl	8001f84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DI_SW_RST_Pin;
 8000d40:	2320      	movs	r3, #32
  HAL_GPIO_Init(DI_SW_RST_GPIO_Port, &GPIO_InitStruct);
 8000d42:	a907      	add	r1, sp, #28
 8000d44:	481e      	ldr	r0, [pc, #120]	@ (8000dc0 <main+0x13c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(DI_SW_RST_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f001 f836 	bl	8001dbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_IN_Pin;
 8000d50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000d54:	a907      	add	r1, sp, #28
 8000d56:	481b      	ldr	r0, [pc, #108]	@ (8000dc4 <main+0x140>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f001 f82d 	bl	8001dbc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d62:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(DI_EXT_IN1_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	a907      	add	r1, sp, #28
 8000d6c:	4815      	ldr	r0, [pc, #84]	@ (8000dc4 <main+0x140>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d70:	e9cd 2307 	strd	r2, r3, [sp, #28]
  HAL_GPIO_Init(DI_EXT_IN1_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f001 f822 	bl	8001dbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_EXT_OUT1_Pin|DO_EXT_OUT2_Pin|DO_EXT_OUT3_Pin;
 8000d78:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7c:	a907      	add	r1, sp, #28
 8000d7e:	480f      	ldr	r0, [pc, #60]	@ (8000dbc <main+0x138>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f001 f818 	bl	8001dbc <HAL_GPIO_Init>
  MX_MBEDTLS_Init();
 8000d8c:	f002 f8ac 	bl	8002ee8 <MX_MBEDTLS_Init>
  osKernelInitialize();
 8000d90:	f002 f8c6 	bl	8002f20 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d94:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <main+0x144>)
 8000d96:	4621      	mov	r1, r4
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <main+0x148>)
 8000d9a:	f002 f90f 	bl	8002fbc <osThreadNew>
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <main+0x14c>)
  ETH_TASKHandle = osThreadNew(TCP_RX_DATA_TASK, NULL, &ETH_TASK_attributes);
 8000da0:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd4 <main+0x150>)
 8000da2:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000da4:	6018      	str	r0, [r3, #0]
  ETH_TASKHandle = osThreadNew(TCP_RX_DATA_TASK, NULL, &ETH_TASK_attributes);
 8000da6:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <main+0x154>)
 8000da8:	f002 f908 	bl	8002fbc <osThreadNew>
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <main+0x158>)
 8000dae:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000db0:	f002 f8d0 	bl	8002f54 <osKernelStart>
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <main+0x130>
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020800 	.word	0x40020800
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40020c00 	.word	0x40020c00
 8000dc8:	0800f1c4 	.word	0x0800f1c4
 8000dcc:	08000b71 	.word	0x08000b71
 8000dd0:	200145fc 	.word	0x200145fc
 8000dd4:	0800f1a0 	.word	0x0800f1a0
 8000dd8:	08000845 	.word	0x08000845
 8000ddc:	200145f8 	.word	0x200145f8

08000de0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8000de0:	6802      	ldr	r2, [r0, #0]
 8000de2:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d101      	bne.n	8000dec <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000de8:	f000 b9a0 	b.w	800112c <HAL_IncTick>
}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40010000 	.word	0x40010000

08000df4 <Error_Handler>:
 8000df4:	b672      	cpsid	i
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <Error_Handler+0x2>

08000df8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <HAL_MspInit+0x38>)
{
 8000dfa:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e04:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e0c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000e10:	9200      	str	r2, [sp, #0]
 8000e12:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000e1a:	645a      	str	r2, [r3, #68]	@ 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e1c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e2a:	f000 b9b5 	b.w	8001198 <HAL_NVIC_SetPriority>
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e34:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <HAL_InitTick+0x7c>)
 8000e36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e38:	f042 0201 	orr.w	r2, r2, #1
{
 8000e3c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e3e:	645a      	str	r2, [r3, #68]	@ 0x44
{
 8000e40:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
{
 8000e44:	4606      	mov	r6, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e46:	a901      	add	r1, sp, #4
 8000e48:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4a:	f003 0301 	and.w	r3, r3, #1

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e4e:	4d19      	ldr	r5, [pc, #100]	@ (8000eb4 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e50:	9302      	str	r3, [sp, #8]
 8000e52:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e54:	f001 fb78 	bl	8002548 <HAL_RCC_GetClockConfig>
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e58:	f001 fb66 	bl	8002528 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <HAL_InitTick+0x84>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e5e:	4a17      	ldr	r2, [pc, #92]	@ (8000ebc <HAL_InitTick+0x88>)
  htim1.Instance = TIM1;
 8000e60:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e62:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000e66:	60eb      	str	r3, [r5, #12]
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e68:	0043      	lsls	r3, r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8000e6a:	4628      	mov	r0, r5
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e70:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e72:	606b      	str	r3, [r5, #4]
  htim1.Init.ClockDivision = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7a:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8000e7c:	f001 fcd2 	bl	8002824 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000e80:	4604      	mov	r4, r0
 8000e82:	b980      	cbnz	r0, 8000ea6 <HAL_InitTick+0x72>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e84:	4628      	mov	r0, r5
 8000e86:	f001 fb7f 	bl	8002588 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	b958      	cbnz	r0, 8000ea6 <HAL_InitTick+0x72>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e8e:	2019      	movs	r0, #25
 8000e90:	f000 f9b4 	bl	80011fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e94:	2e0f      	cmp	r6, #15
 8000e96:	d809      	bhi.n	8000eac <HAL_InitTick+0x78>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e98:	4622      	mov	r2, r4
 8000e9a:	4631      	mov	r1, r6
 8000e9c:	2019      	movs	r0, #25
 8000e9e:	f000 f97b 	bl	8001198 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <HAL_InitTick+0x8c>)
 8000ea4:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	b008      	add	sp, #32
 8000eaa:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 8000eac:	2401      	movs	r4, #1
 8000eae:	e7fa      	b.n	8000ea6 <HAL_InitTick+0x72>
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	20014600 	.word	0x20014600
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	000f4240 	.word	0x000f4240
 8000ec0:	2000001c 	.word	0x2000001c

08000ec4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler>

08000ec6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler>

08000ec8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler>

08000eca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler>

08000ecc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler>

08000ece <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	4770      	bx	lr

08000ed0 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ed0:	4801      	ldr	r0, [pc, #4]	@ (8000ed8 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000ed2:	f001 bb9b 	b.w	800260c <HAL_TIM_IRQHandler>
 8000ed6:	bf00      	nop
 8000ed8:	20014600 	.word	0x20014600

08000edc <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000edc:	4801      	ldr	r0, [pc, #4]	@ (8000ee4 <ETH_IRQHandler+0x8>)
 8000ede:	f000 be13 	b.w	8001b08 <HAL_ETH_IRQHandler>
 8000ee2:	bf00      	nop
 8000ee4:	2001471c 	.word	0x2001471c

08000ee8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4770      	bx	lr

08000eec <_kill>:

int _kill(int pid, int sig)
{
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eec:	4b02      	ldr	r3, [pc, #8]	@ (8000ef8 <_kill+0xc>)
 8000eee:	2216      	movs	r2, #22
  return -1;
}
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 8000ef4:	601a      	str	r2, [r3, #0]
}
 8000ef6:	4770      	bx	lr
 8000ef8:	2003369c 	.word	0x2003369c

08000efc <_exit>:
  errno = EINVAL;
 8000efc:	4b01      	ldr	r3, [pc, #4]	@ (8000f04 <_exit+0x8>)
 8000efe:	2216      	movs	r2, #22
 8000f00:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8000f02:	e7fe      	b.n	8000f02 <_exit+0x6>
 8000f04:	2003369c 	.word	0x2003369c

08000f08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b570      	push	{r4, r5, r6, lr}
 8000f0a:	460d      	mov	r5, r1
 8000f0c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	460e      	mov	r6, r1
 8000f10:	1b73      	subs	r3, r6, r5
 8000f12:	429c      	cmp	r4, r3
 8000f14:	dc01      	bgt.n	8000f1a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8000f16:	4620      	mov	r0, r4
 8000f18:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	e7f5      	b.n	8000f10 <_read+0x8>

08000f24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f24:	b570      	push	{r4, r5, r6, lr}
 8000f26:	460d      	mov	r5, r1
 8000f28:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	460e      	mov	r6, r1
 8000f2c:	1b73      	subs	r3, r6, r5
 8000f2e:	429c      	cmp	r4, r3
 8000f30:	dc01      	bgt.n	8000f36 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8000f32:	4620      	mov	r0, r4
 8000f34:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8000f36:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000f3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	e7f5      	b.n	8000f2c <_write+0x8>

08000f40 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	4770      	bx	lr

08000f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000f46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8000f4a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000f4c:	604b      	str	r3, [r1, #4]
}
 8000f4e:	4770      	bx	lr

08000f50 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000f50:	2001      	movs	r0, #1
 8000f52:	4770      	bx	lr

08000f54 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000f54:	2000      	movs	r0, #0
 8000f56:	4770      	bx	lr

08000f58 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <_sbrk+0x2c>)
{
 8000f5a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000f5c:	6811      	ldr	r1, [r2, #0]
{
 8000f5e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000f60:	b909      	cbnz	r1, 8000f66 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000f62:	4909      	ldr	r1, [pc, #36]	@ (8000f88 <_sbrk+0x30>)
 8000f64:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	6810      	ldr	r0, [r2, #0]
 8000f68:	4c08      	ldr	r4, [pc, #32]	@ (8000f8c <_sbrk+0x34>)
 8000f6a:	4909      	ldr	r1, [pc, #36]	@ (8000f90 <_sbrk+0x38>)
 8000f6c:	4403      	add	r3, r0
 8000f6e:	1b09      	subs	r1, r1, r4
 8000f70:	428b      	cmp	r3, r1
  {
    errno = ENOMEM;
 8000f72:	bf83      	ittte	hi
 8000f74:	4b07      	ldrhi	r3, [pc, #28]	@ (8000f94 <_sbrk+0x3c>)
 8000f76:	220c      	movhi	r2, #12
    return (void *)-1;
 8000f78:	f04f 30ff 	movhi.w	r0, #4294967295
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f7c:	6013      	strls	r3, [r2, #0]
    errno = ENOMEM;
 8000f7e:	bf88      	it	hi
 8000f80:	601a      	strhi	r2, [r3, #0]

  return (void *)prev_heap_end;
}
 8000f82:	bd10      	pop	{r4, pc}
 8000f84:	2001464c 	.word	0x2001464c
 8000f88:	200336a8 	.word	0x200336a8
 8000f8c:	00000800 	.word	0x00000800
 8000f90:	20050000 	.word	0x20050000
 8000f94:	2003369c 	.word	0x2003369c

08000f98 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4a03      	ldr	r2, [pc, #12]	@ (8000fa8 <SystemInit+0x10>)
 8000f9a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000f9e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fe4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb0:	f7ff fff2 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	@ (8000fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	@ (8000fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f00d fb9b 	bl	800e714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fe51 	bl	8000c84 <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000ff0:	08012514 	.word	0x08012514
  ldr r2, =_sbss
 8000ff4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000ff8:	200336a4 	.word	0x200336a4

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>

08000ffe <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000ffe:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001000:	b170      	cbz	r0, 8001020 <DP83848_RegisterBusIO+0x22>
 8001002:	68cc      	ldr	r4, [r1, #12]
 8001004:	b164      	cbz	r4, 8001020 <DP83848_RegisterBusIO+0x22>
 8001006:	688a      	ldr	r2, [r1, #8]
 8001008:	b152      	cbz	r2, 8001020 <DP83848_RegisterBusIO+0x22>
 800100a:	690b      	ldr	r3, [r1, #16]
 800100c:	b143      	cbz	r3, 8001020 <DP83848_RegisterBusIO+0x22>
  {
    return DP83848_STATUS_ERROR;
  }

  pObj->IO.Init = ioctx->Init;
 800100e:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 8001010:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 8001012:	6085      	str	r5, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001014:	60c1      	str	r1, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
 8001016:	6183      	str	r3, [r0, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001018:	e9c0 2404 	strd	r2, r4, [r0, #16]

  return DP83848_STATUS_OK;
 800101c:	2000      	movs	r0, #0
}
 800101e:	bd30      	pop	{r4, r5, pc}
    return DP83848_STATUS_ERROR;
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	e7fb      	b.n	800101e <DP83848_RegisterBusIO+0x20>

08001026 <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8001026:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t regvalue = 0, addr = 0;
 8001028:	2300      	movs	r3, #0
   int32_t status = DP83848_STATUS_OK;

   if(pObj->Is_Initialized == 0)
 800102a:	6845      	ldr	r5, [r0, #4]
 {
 800102c:	4604      	mov	r4, r0
   uint32_t regvalue = 0, addr = 0;
 800102e:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8001030:	b9a5      	cbnz	r5, 800105c <DP83848_Init+0x36>
   {
     if(pObj->IO.Init != 0)
 8001032:	6883      	ldr	r3, [r0, #8]
 8001034:	b103      	cbz	r3, 8001038 <DP83848_Init+0x12>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001036:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001038:	2320      	movs	r3, #32
   int32_t status = DP83848_STATUS_OK;
 800103a:	2600      	movs	r6, #0
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 800103c:	6023      	str	r3, [r4, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 800103e:	6963      	ldr	r3, [r4, #20]
 8001040:	aa01      	add	r2, sp, #4
 8001042:	2119      	movs	r1, #25
 8001044:	4628      	mov	r0, r5
 8001046:	4798      	blx	r3
 8001048:	2800      	cmp	r0, #0
 800104a:	db09      	blt.n	8001060 <DP83848_Init+0x3a>
         /* Can't read from this device address
            continue with next address */
         continue;
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 800104c:	9b01      	ldr	r3, [sp, #4]
 800104e:	f003 031f 	and.w	r3, r3, #31
 8001052:	42ab      	cmp	r3, r5
 8001054:	d106      	bne.n	8001064 <DP83848_Init+0x3e>
       {
         pObj->DevAddr = addr;
 8001056:	6025      	str	r5, [r4, #0]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
     {
       pObj->Is_Initialized = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	6063      	str	r3, [r4, #4]
   int32_t status = DP83848_STATUS_OK;
 800105c:	2600      	movs	r6, #0
 800105e:	e009      	b.n	8001074 <DP83848_Init+0x4e>
         status = DP83848_STATUS_READ_ERROR;
 8001060:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001064:	3501      	adds	r5, #1
 8001066:	2d20      	cmp	r5, #32
 8001068:	d1e9      	bne.n	800103e <DP83848_Init+0x18>
     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	2b1f      	cmp	r3, #31
 800106e:	d804      	bhi.n	800107a <DP83848_Init+0x54>
     if(status == DP83848_STATUS_OK)
 8001070:	2e00      	cmp	r6, #0
 8001072:	d0f1      	beq.n	8001058 <DP83848_Init+0x32>
     }
   }

   return status;
 }
 8001074:	4630      	mov	r0, r6
 8001076:	b002      	add	sp, #8
 8001078:	bd70      	pop	{r4, r5, r6, pc}
       status = DP83848_STATUS_ADDRESS_ERROR;
 800107a:	f06f 0602 	mvn.w	r6, #2
   return status;
 800107e:	e7f9      	b.n	8001074 <DP83848_Init+0x4e>

08001080 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8001080:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t readval = 0;
 8001082:	2500      	movs	r5, #0

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001084:	6943      	ldr	r3, [r0, #20]
{
 8001086:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001088:	aa01      	add	r2, sp, #4
 800108a:	2101      	movs	r1, #1
 800108c:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 800108e:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001090:	4798      	blx	r3
 8001092:	42a8      	cmp	r0, r5
 8001094:	da03      	bge.n	800109e <DP83848_GetLinkState+0x1e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001096:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
    }
  }
}
 800109a:	b003      	add	sp, #12
 800109c:	bd30      	pop	{r4, r5, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800109e:	6963      	ldr	r3, [r4, #20]
 80010a0:	aa01      	add	r2, sp, #4
 80010a2:	2101      	movs	r1, #1
 80010a4:	6820      	ldr	r0, [r4, #0]
 80010a6:	4798      	blx	r3
 80010a8:	2800      	cmp	r0, #0
 80010aa:	dbf4      	blt.n	8001096 <DP83848_GetLinkState+0x16>
  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80010ac:	9b01      	ldr	r3, [sp, #4]
 80010ae:	075b      	lsls	r3, r3, #29
 80010b0:	d52c      	bpl.n	800110c <DP83848_GetLinkState+0x8c>
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80010b2:	6963      	ldr	r3, [r4, #20]
 80010b4:	aa01      	add	r2, sp, #4
 80010b6:	4629      	mov	r1, r5
 80010b8:	6820      	ldr	r0, [r4, #0]
 80010ba:	4798      	blx	r3
 80010bc:	2800      	cmp	r0, #0
 80010be:	dbea      	blt.n	8001096 <DP83848_GetLinkState+0x16>
  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80010c0:	9b01      	ldr	r3, [sp, #4]
 80010c2:	04dd      	lsls	r5, r3, #19
 80010c4:	d40e      	bmi.n	80010e4 <DP83848_GetLinkState+0x64>
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80010c6:	f403 5204 	and.w	r2, r3, #8448	@ 0x2100
 80010ca:	f5b2 5f04 	cmp.w	r2, #8448	@ 0x2100
 80010ce:	d101      	bne.n	80010d4 <DP83848_GetLinkState+0x54>
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80010d0:	2002      	movs	r0, #2
 80010d2:	e7e2      	b.n	800109a <DP83848_GetLinkState+0x1a>
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80010d4:	0498      	lsls	r0, r3, #18
 80010d6:	d501      	bpl.n	80010dc <DP83848_GetLinkState+0x5c>
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80010d8:	2003      	movs	r0, #3
 80010da:	e7de      	b.n	800109a <DP83848_GetLinkState+0x1a>
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80010dc:	05d9      	lsls	r1, r3, #23
 80010de:	d413      	bmi.n	8001108 <DP83848_GetLinkState+0x88>
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80010e0:	2005      	movs	r0, #5
 80010e2:	e7da      	b.n	800109a <DP83848_GetLinkState+0x1a>
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80010e4:	6963      	ldr	r3, [r4, #20]
 80010e6:	aa01      	add	r2, sp, #4
 80010e8:	2110      	movs	r1, #16
 80010ea:	6820      	ldr	r0, [r4, #0]
 80010ec:	4798      	blx	r3
 80010ee:	2800      	cmp	r0, #0
 80010f0:	dbd1      	blt.n	8001096 <DP83848_GetLinkState+0x16>
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80010f2:	9b01      	ldr	r3, [sp, #4]
 80010f4:	06da      	lsls	r2, r3, #27
 80010f6:	d50b      	bpl.n	8001110 <DP83848_GetLinkState+0x90>
    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80010f8:	f003 0306 	and.w	r3, r3, #6
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d0e7      	beq.n	80010d0 <DP83848_GetLinkState+0x50>
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0e9      	beq.n	80010d8 <DP83848_GetLinkState+0x58>
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001104:	2b06      	cmp	r3, #6
 8001106:	d1eb      	bne.n	80010e0 <DP83848_GetLinkState+0x60>
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001108:	2004      	movs	r0, #4
 800110a:	e7c6      	b.n	800109a <DP83848_GetLinkState+0x1a>
    return DP83848_STATUS_LINK_DOWN;
 800110c:	2001      	movs	r0, #1
 800110e:	e7c4      	b.n	800109a <DP83848_GetLinkState+0x1a>
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001110:	2006      	movs	r0, #6
 8001112:	e7c2      	b.n	800109a <DP83848_GetLinkState+0x1a>

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001116:	2003      	movs	r0, #3
 8001118:	f000 f82c 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111c:	200f      	movs	r0, #15
 800111e:	f7ff fe89 	bl	8000e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001122:	f7ff fe69 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001126:	2000      	movs	r0, #0
 8001128:	bd08      	pop	{r3, pc}
	...

0800112c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800112c:	4a03      	ldr	r2, [pc, #12]	@ (800113c <HAL_IncTick+0x10>)
 800112e:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <HAL_IncTick+0x14>)
 8001130:	6811      	ldr	r1, [r2, #0]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	440b      	add	r3, r1
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20014650 	.word	0x20014650
 8001140:	20000018 	.word	0x20000018

08001144 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001144:	4b01      	ldr	r3, [pc, #4]	@ (800114c <HAL_GetTick+0x8>)
 8001146:	6818      	ldr	r0, [r3, #0]
}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20014650 	.word	0x20014650

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff fff6 	bl	8001144 <HAL_GetTick>
 8001158:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800115c:	bf1e      	ittt	ne
 800115e:	4b04      	ldrne	r3, [pc, #16]	@ (8001170 <HAL_Delay+0x20>)
 8001160:	781b      	ldrbne	r3, [r3, #0]
 8001162:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	1b43      	subs	r3, r0, r5
 800116a:	42a3      	cmp	r3, r4
 800116c:	d3fa      	bcc.n	8001164 <HAL_Delay+0x14>
  {
  }
}
 800116e:	bd38      	pop	{r3, r4, r5, pc}
 8001170:	20000018 	.word	0x20000018

08001174 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4907      	ldr	r1, [pc, #28]	@ (8001194 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001176:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001182:	0412      	lsls	r2, r2, #16
 8001184:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001190:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b530      	push	{r4, r5, lr}
 800119c:	68dc      	ldr	r4, [r3, #12]
 800119e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	bf28      	it	cs
 80011ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b4:	bf8c      	ite	hi
 80011b6:	3c03      	subhi	r4, #3
 80011b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ba:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80011be:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	fa03 f304 	lsl.w	r3, r3, r4
 80011d0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80011d8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80011da:	db06      	blt.n	80011ea <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80011e0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80011e4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011e8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	f000 000f 	and.w	r0, r0, #15
 80011ee:	4a02      	ldr	r2, [pc, #8]	@ (80011f8 <HAL_NVIC_SetPriority+0x60>)
 80011f0:	5413      	strb	r3, [r2, r0]
 80011f2:	e7f9      	b.n	80011e8 <HAL_NVIC_SetPriority+0x50>
 80011f4:	e000ed00 	.word	0xe000ed00
 80011f8:	e000ed14 	.word	0xe000ed14

080011fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80011fc:	2800      	cmp	r0, #0
 80011fe:	db07      	blt.n	8001210 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001200:	0941      	lsrs	r1, r0, #5
 8001202:	2301      	movs	r3, #1
 8001204:	f000 001f 	and.w	r0, r0, #31
 8001208:	4a02      	ldr	r2, [pc, #8]	@ (8001214 <HAL_NVIC_EnableIRQ+0x18>)
 800120a:	4083      	lsls	r3, r0
 800120c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001218:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800121c:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <HAL_MPU_Disable+0x18>)
 800121e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001220:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001226:	2200      	movs	r2, #0
 8001228:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_MPU_Enable+0x1c>)
 8001236:	f040 0001 	orr.w	r0, r0, #1
 800123a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800123e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001240:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001246:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800124a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001254:	7843      	ldrb	r3, [r0, #1]
 8001256:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <HAL_MPU_ConfigRegion+0x54>)
 8001258:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800125c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001268:	6843      	ldr	r3, [r0, #4]
 800126a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800126e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001270:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001272:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001274:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001278:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800127a:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800127c:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800127e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001282:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001284:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001288:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800128a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800128e:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001294:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001296:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800129a:	7a01      	ldrb	r1, [r0, #8]
 800129c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012a0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80012ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80012b0:	6a86      	ldr	r6, [r0, #40]	@ 0x28
{
 80012b2:	4691      	mov	r9, r2
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80012b4:	688c      	ldr	r4, [r1, #8]
 80012b6:	eb00 0786 	add.w	r7, r0, r6, lsl #2
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80012ba:	69bb      	ldr	r3, [r7, #24]
  uint32_t           bd_count = 0;
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80012bc:	681d      	ldr	r5, [r3, #0]
 80012be:	2d00      	cmp	r5, #0
 80012c0:	da02      	bge.n	80012c8 <ETH_Prepare_Tx_Descriptors+0x1c>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
  {
    return HAL_ETH_ERROR_BUSY;
 80012c2:	2002      	movs	r0, #2
  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 80012c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80012c8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80012ca:	2d00      	cmp	r5, #0
 80012cc:	d1f9      	bne.n	80012c2 <ETH_Prepare_Tx_Descriptors+0x16>
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80012ce:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80012d0:	6862      	ldr	r2, [r4, #4]
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80012d2:	609d      	str	r5, [r3, #8]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80012d4:	685d      	ldr	r5, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80012d6:	f8d1 c000 	ldr.w	ip, [r1]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80012da:	f425 55ff 	bic.w	r5, r5, #8160	@ 0x1fe0
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80012de:	f01c 0f01 	tst.w	ip, #1
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80012e2:	f025 051f 	bic.w	r5, r5, #31
 80012e6:	ea45 0502 	orr.w	r5, r5, r2
 80012ea:	605d      	str	r5, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80012ec:	d005      	beq.n	80012fa <ETH_Prepare_Tx_Descriptors+0x4e>
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80012ee:	681d      	ldr	r5, [r3, #0]
 80012f0:	694a      	ldr	r2, [r1, #20]
 80012f2:	f425 0540 	bic.w	r5, r5, #12582912	@ 0xc00000
 80012f6:	4315      	orrs	r5, r2
 80012f8:	601d      	str	r5, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80012fa:	f01c 0f20 	tst.w	ip, #32
 80012fe:	d005      	beq.n	800130c <ETH_Prepare_Tx_Descriptors+0x60>
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001300:	681d      	ldr	r5, [r3, #0]
 8001302:	6909      	ldr	r1, [r1, #16]
 8001304:	f025 6540 	bic.w	r5, r5, #201326592	@ 0xc000000
 8001308:	4329      	orrs	r1, r5
 800130a:	6019      	str	r1, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800130c:	f01c 0f04 	tst.w	ip, #4
 8001310:	d003      	beq.n	800131a <ETH_Prepare_Tx_Descriptors+0x6e>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001318:	6019      	str	r1, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800131a:	6819      	ldr	r1, [r3, #0]
  uint32_t           bd_count = 0;
 800131c:	2500      	movs	r5, #0
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800131e:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 8001410 <ETH_Prepare_Tx_Descriptors+0x164>
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001322:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001326:	6019      	str	r1, [r3, #0]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001328:	4631      	mov	r1, r6
  while (txbuffer->next != NULL)
 800132a:	68a4      	ldr	r4, [r4, #8]
 800132c:	f105 0e01 	add.w	lr, r5, #1
 8001330:	bb1c      	cbnz	r4, 800137a <ETH_Prepare_Tx_Descriptors+0xce>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001332:	681a      	ldr	r2, [r3, #0]
  if (ItMode != ((uint32_t)RESET))
 8001334:	f1b9 0f00 	cmp.w	r9, #0
 8001338:	d066      	beq.n	8001408 <ETH_Prepare_Tx_Descriptors+0x15c>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800133a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800133e:	601a      	str	r2, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001346:	601a      	str	r2, [r3, #0]
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8001348:	69ba      	ldr	r2, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800134a:	f3bf 8f5f 	dmb	sy
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800134e:	6813      	ldr	r3, [r2, #0]
 8001350:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001354:	6013      	str	r3, [r2, #0]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001356:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800135a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800135c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 800135e:	6281      	str	r1, [r0, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001360:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001364:	2301      	movs	r3, #1
 8001366:	f383 8810 	msr	PRIMASK, r3
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800136a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800136c:	3301      	adds	r3, #1
 800136e:	442b      	add	r3, r5
 8001370:	6403      	str	r3, [r0, #64]	@ 0x40
 8001372:	f382 8810 	msr	PRIMASK, r2
  return HAL_ETH_ERROR_NONE;
 8001376:	2000      	movs	r0, #0
 8001378:	e7a4      	b.n	80012c4 <ETH_Prepare_Tx_Descriptors+0x18>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800137a:	681d      	ldr	r5, [r3, #0]
 800137c:	f025 5500 	bic.w	r5, r5, #536870912	@ 0x20000000
 8001380:	601d      	str	r5, [r3, #0]
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001382:	681d      	ldr	r5, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001384:	f1b9 0f00 	cmp.w	r9, #0
 8001388:	d023      	beq.n	80013d2 <ETH_Prepare_Tx_Descriptors+0x126>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800138a:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 800138e:	f101 0c01 	add.w	ip, r1, #1
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001392:	601d      	str	r5, [r3, #0]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001394:	f1bc 0f03 	cmp.w	ip, #3
 8001398:	bf88      	it	hi
 800139a:	f1a1 0c03 	subhi.w	ip, r1, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800139e:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 80013a2:	698b      	ldr	r3, [r1, #24]
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80013a4:	681d      	ldr	r5, [r3, #0]
 80013a6:	2d00      	cmp	r5, #0
 80013a8:	da16      	bge.n	80013d8 <ETH_Prepare_Tx_Descriptors+0x12c>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80013aa:	69b9      	ldr	r1, [r7, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80013ac:	2200      	movs	r2, #0
 80013ae:	4572      	cmp	r2, lr
 80013b0:	d087      	beq.n	80012c2 <ETH_Prepare_Tx_Descriptors+0x16>
  __ASM volatile ("dmb 0xF":::"memory");
 80013b2:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80013b6:	680b      	ldr	r3, [r1, #0]
      for (idx = 0; idx < descnbr; idx ++)
 80013b8:	3201      	adds	r2, #1
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80013ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013be:	600b      	str	r3, [r1, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 80013c0:	1c73      	adds	r3, r6, #1
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	bf88      	it	hi
 80013c6:	1ef3      	subhi	r3, r6, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80013c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for (idx = 0; idx < descnbr; idx ++)
 80013cc:	461e      	mov	r6, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80013ce:	6989      	ldr	r1, [r1, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80013d0:	e7ed      	b.n	80013ae <ETH_Prepare_Tx_Descriptors+0x102>
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80013d2:	f025 4580 	bic.w	r5, r5, #1073741824	@ 0x40000000
 80013d6:	e7da      	b.n	800138e <ETH_Prepare_Tx_Descriptors+0xe2>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80013d8:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 80013da:	2900      	cmp	r1, #0
 80013dc:	d1e5      	bne.n	80013aa <ETH_Prepare_Tx_Descriptors+0xfe>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80013de:	6819      	ldr	r1, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80013e0:	6865      	ldr	r5, [r4, #4]
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80013e2:	f021 5180 	bic.w	r1, r1, #268435456	@ 0x10000000
 80013e6:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80013e8:	6821      	ldr	r1, [r4, #0]
 80013ea:	6099      	str	r1, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	ea01 0108 	and.w	r1, r1, r8
 80013f2:	4329      	orrs	r1, r5
 80013f4:	6059      	str	r1, [r3, #4]
 80013f6:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	4675      	mov	r5, lr
 80013fe:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8001402:	6019      	str	r1, [r3, #0]
 8001404:	4661      	mov	r1, ip
 8001406:	e790      	b.n	800132a <ETH_Prepare_Tx_Descriptors+0x7e>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001408:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800140c:	e797      	b.n	800133e <ETH_Prepare_Tx_Descriptors+0x92>
 800140e:	bf00      	nop
 8001410:	ffffe000 	.word	0xffffe000

08001414 <ETH_SetMACConfig>:
{
 8001414:	b570      	push	{r4, r5, r6, lr}
 8001416:	460d      	mov	r5, r1
  tmpreg1 = (heth->Instance)->MACCR;
 8001418:	6802      	ldr	r2, [r0, #0]
{
 800141a:	4604      	mov	r4, r0
 800141c:	68ab      	ldr	r3, [r5, #8]
 800141e:	6968      	ldr	r0, [r5, #20]
  tmpreg1 = (heth->Instance)->MACCR;
 8001420:	6811      	ldr	r1, [r2, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001422:	4303      	orrs	r3, r0
 8001424:	69a8      	ldr	r0, [r5, #24]
 8001426:	4303      	orrs	r3, r0
 8001428:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800142a:	4303      	orrs	r3, r0
 800142c:	7ba8      	ldrb	r0, [r5, #14]
 800142e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001432:	7fe8      	ldrb	r0, [r5, #31]
 8001434:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001438:	7f28      	ldrb	r0, [r5, #28]
 800143a:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800143e:	7928      	ldrb	r0, [r5, #4]
 8001440:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001444:	7be8      	ldrb	r0, [r5, #15]
 8001446:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800144a:	f895 0028 	ldrb.w	r0, [r5, #40]	@ 0x28
 800144e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001452:	482a      	ldr	r0, [pc, #168]	@ (80014fc <ETH_SetMACConfig+0xe8>)
 8001454:	4008      	ands	r0, r1
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001456:	7c29      	ldrb	r1, [r5, #16]
 8001458:	fab1 f181 	clz	r1, r1
 800145c:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800145e:	2001      	movs	r0, #1
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001460:	0949      	lsrs	r1, r1, #5
 8001462:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001466:	7c69      	ldrb	r1, [r5, #17]
 8001468:	fab1 f181 	clz	r1, r1
 800146c:	0949      	lsrs	r1, r1, #5
 800146e:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001472:	7fa9      	ldrb	r1, [r5, #30]
 8001474:	fab1 f181 	clz	r1, r1
 8001478:	0949      	lsrs	r1, r1, #5
 800147a:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800147e:	f895 1020 	ldrb.w	r1, [r5, #32]
 8001482:	fab1 f181 	clz	r1, r1
 8001486:	0949      	lsrs	r1, r1, #5
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001488:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800148c:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800148e:	6816      	ldr	r6, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001490:	f7ff fe5e 	bl	8001150 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001494:	6821      	ldr	r1, [r4, #0]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001496:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
  (heth->Instance)->MACCR = tmpreg1;
 8001498:	600e      	str	r6, [r1, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 800149a:	698a      	ldr	r2, [r1, #24]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800149c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800149e:	f022 02be 	bic.w	r2, r2, #190	@ 0xbe
 80014a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80014a6:	0412      	lsls	r2, r2, #16
 80014a8:	0c12      	lsrs	r2, r2, #16
 80014aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014ac:	f895 204c 	ldrb.w	r2, [r5, #76]	@ 0x4c
 80014b0:	fab2 f282 	clz	r2, r2
 80014b4:	0952      	lsrs	r2, r2, #5
 80014b6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014ba:	f895 2055 	ldrb.w	r2, [r5, #85]	@ 0x55
 80014be:	1e50      	subs	r0, r2, #1
 80014c0:	4242      	negs	r2, r0
 80014c2:	4142      	adcs	r2, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c4:	2001      	movs	r0, #1
 80014c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014ca:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 80014ce:	1e56      	subs	r6, r2, #1
 80014d0:	4272      	negs	r2, r6
 80014d2:	4172      	adcs	r2, r6
 80014d4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014d8:	f895 2054 	ldrb.w	r2, [r5, #84]	@ 0x54
 80014dc:	f102 3cff 	add.w	ip, r2, #4294967295
 80014e0:	f1dc 0200 	rsbs	r2, ip, #0
 80014e4:	eb42 020c 	adc.w	r2, r2, ip
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014e8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014ec:	618b      	str	r3, [r1, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 80014ee:	698d      	ldr	r5, [r1, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014f0:	f7ff fe2e 	bl	8001150 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	619d      	str	r5, [r3, #24]
}
 80014f8:	bd70      	pop	{r4, r5, r6, pc}
 80014fa:	bf00      	nop
 80014fc:	fd20810f 	.word	0xfd20810f

08001500 <ETH_SetDMAConfig>:
{
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	694b      	ldr	r3, [r1, #20]
 8001504:	460d      	mov	r5, r1
 8001506:	6a09      	ldr	r1, [r1, #32]
 8001508:	4604      	mov	r4, r0
  tmpreg1 = (heth->Instance)->DMAOMR;
 800150a:	6802      	ldr	r2, [r0, #0]
 800150c:	430b      	orrs	r3, r1
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800150e:	7b69      	ldrb	r1, [r5, #13]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001510:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001514:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001518:	7ba9      	ldrb	r1, [r5, #14]
  tmpreg1 = (heth->Instance)->DMAOMR;
 800151a:	6990      	ldr	r0, [r2, #24]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800151c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001520:	7f29      	ldrb	r1, [r5, #28]
 8001522:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001526:	7fa9      	ldrb	r1, [r5, #30]
 8001528:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800152c:	f895 1024 	ldrb.w	r1, [r5, #36]	@ 0x24
 8001530:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001534:	491a      	ldr	r1, [pc, #104]	@ (80015a0 <ETH_SetDMAConfig+0xa0>)
 8001536:	4001      	ands	r1, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001538:	2001      	movs	r0, #1
 800153a:	430b      	orrs	r3, r1
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800153c:	7b29      	ldrb	r1, [r5, #12]
 800153e:	fab1 f181 	clz	r1, r1
 8001542:	0949      	lsrs	r1, r1, #5
 8001544:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001548:	7f69      	ldrb	r1, [r5, #29]
 800154a:	fab1 f181 	clz	r1, r1
 800154e:	0949      	lsrs	r1, r1, #5
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001550:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001554:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001556:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001558:	f7ff fdfa 	bl	8001150 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800155c:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800155e:	2001      	movs	r0, #1
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001560:	69a9      	ldr	r1, [r5, #24]
  (heth->Instance)->DMAOMR = tmpreg1;
 8001562:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001566:	68ab      	ldr	r3, [r5, #8]
  (heth->Instance)->DMAOMR = tmpreg1;
 8001568:	6196      	str	r6, [r2, #24]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800156a:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800156c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001570:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8001574:	6929      	ldr	r1, [r5, #16]
 8001576:	430b      	orrs	r3, r1
 8001578:	6829      	ldr	r1, [r5, #0]
 800157a:	430b      	orrs	r3, r1
 800157c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800157e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001582:	7929      	ldrb	r1, [r5, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001584:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001588:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800158c:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 800158e:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001590:	f7ff fdde 	bl	8001150 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800159a:	601d      	str	r5, [r3, #0]
}
 800159c:	bd70      	pop	{r4, r5, r6, pc}
 800159e:	bf00      	nop
 80015a0:	f8de3f23 	.word	0xf8de3f23

080015a4 <ETH_FlushTransmitFIFO>:
  __IO uint32_t tmpreg = 0;
 80015a4:	2300      	movs	r3, #0
{
 80015a6:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 80015a8:	9301      	str	r3, [sp, #4]
{
 80015aa:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80015ac:	6803      	ldr	r3, [r0, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ae:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80015b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80015ba:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015c0:	f7ff fdc6 	bl	8001150 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	9a01      	ldr	r2, [sp, #4]
 80015c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015cc:	619a      	str	r2, [r3, #24]
}
 80015ce:	b002      	add	sp, #8
 80015d0:	bd10      	pop	{r4, pc}
	...

080015d4 <ETH_UpdateDescriptor>:
{
 80015d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t *buff = NULL;
 80015d8:	2300      	movs	r3, #0
  descidx = heth->RxDescList.RxBuildDescIdx;
 80015da:	6e86      	ldr	r6, [r0, #104]	@ 0x68
{
 80015dc:	4604      	mov	r4, r0
  desccount = heth->RxDescList.RxBuildDescCnt;
 80015de:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
  uint8_t *buff = NULL;
 80015e0:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015e2:	f106 0312 	add.w	r3, r6, #18
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80015e6:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800165c <ETH_UpdateDescriptor+0x88>
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015ea:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 80015ee:	b137      	cbz	r7, 80015fe <ETH_UpdateDescriptor+0x2a>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80015f0:	6a2b      	ldr	r3, [r5, #32]
 80015f2:	b9db      	cbnz	r3, 800162c <ETH_UpdateDescriptor+0x58>
      HAL_ETH_RxAllocateCallback(&buff);
 80015f4:	a801      	add	r0, sp, #4
 80015f6:	f001 fc29 	bl	8002e4c <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 80015fa:	9b01      	ldr	r3, [sp, #4]
 80015fc:	b9a3      	cbnz	r3, 8001628 <ETH_UpdateDescriptor+0x54>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80015fe:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8001600:	42bb      	cmp	r3, r7
 8001602:	d00e      	beq.n	8001622 <ETH_UpdateDescriptor+0x4e>
 8001604:	f3bf 8f5f 	dmb	sy
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001608:	1c71      	adds	r1, r6, #1
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	6922      	ldr	r2, [r4, #16]
 800160e:	2028      	movs	r0, #40	@ 0x28
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001610:	f001 0103 	and.w	r1, r1, #3
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001618:	fb00 2201 	mla	r2, r0, r1, r2
 800161c:	609a      	str	r2, [r3, #8]
    heth->RxDescList.RxBuildDescCnt = desccount;
 800161e:	e9c4 671a 	strd	r6, r7, [r4, #104]	@ 0x68
}
 8001622:	b002      	add	sp, #8
 8001624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001628:	622b      	str	r3, [r5, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800162a:	60ab      	str	r3, [r5, #8]
      if (heth->RxDescList.ItMode == 0U)
 800162c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800162e:	6963      	ldr	r3, [r4, #20]
      if (heth->RxDescList.ItMode == 0U)
 8001630:	b98a      	cbnz	r2, 8001656 <ETH_UpdateDescriptor+0x82>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001632:	ea43 0308 	orr.w	r3, r3, r8
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001636:	606b      	str	r3, [r5, #4]
      desccount--;
 8001638:	3f01      	subs	r7, #1
      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001640:	602b      	str	r3, [r5, #0]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001642:	1c73      	adds	r3, r6, #1
 8001644:	2b03      	cmp	r3, #3
 8001646:	bf88      	it	hi
 8001648:	1ef3      	subhi	r3, r6, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800164a:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 800164e:	461e      	mov	r6, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001650:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
      desccount--;
 8001654:	e7cb      	b.n	80015ee <ETH_UpdateDescriptor+0x1a>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165a:	e7ec      	b.n	8001636 <ETH_UpdateDescriptor+0x62>
 800165c:	80004000 	.word	0x80004000

08001660 <HAL_ETH_Init>:
{
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 8001662:	4604      	mov	r4, r0
{
 8001664:	b0a7      	sub	sp, #156	@ 0x9c
  if (heth == NULL)
 8001666:	2800      	cmp	r0, #0
 8001668:	f000 80e8 	beq.w	800183c <HAL_ETH_Init+0x1dc>
  if (heth->gState == HAL_ETH_STATE_RESET)
 800166c:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8001670:	b923      	cbnz	r3, 800167c <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 8001672:	2323      	movs	r3, #35	@ 0x23
 8001674:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 8001678:	f001 fb1c 	bl	8002cb4 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167c:	4b73      	ldr	r3, [pc, #460]	@ (800184c <HAL_ETH_Init+0x1ec>)
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800167e:	68a1      	ldr	r1, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001682:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001686:	645a      	str	r2, [r3, #68]	@ 0x44
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001692:	4b6f      	ldr	r3, [pc, #444]	@ (8001850 <HAL_ETH_Init+0x1f0>)
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800169a:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	430a      	orrs	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 80016a2:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80016b2:	f7ff fd47 	bl	8001144 <HAL_GetTick>
 80016b6:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016b8:	6823      	ldr	r3, [r4, #0]
 80016ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016be:	681d      	ldr	r5, [r3, #0]
 80016c0:	f015 0501 	ands.w	r5, r5, #1
 80016c4:	f040 80ad 	bne.w	8001822 <HAL_ETH_Init+0x1c2>
  macDefaultConf.ChecksumOffload = ENABLE;
 80016c8:	2601      	movs	r6, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  macDefaultConf.Watchdog = ENABLE;
 80016ce:	f240 1701 	movw	r7, #257	@ 0x101
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016d6:	a90d      	add	r1, sp, #52	@ 0x34
 80016d8:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 80016da:	f88d 6038 	strb.w	r6, [sp, #56]	@ 0x38
  macDefaultConf.ReceiveOwn = ENABLE;
 80016de:	f8ad 6052 	strh.w	r6, [sp, #82]	@ 0x52
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80016e2:	f8ad 6042 	strh.w	r6, [sp, #66]	@ 0x42
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016e6:	950f      	str	r5, [sp, #60]	@ 0x3c
  macDefaultConf.LoopbackMode = DISABLE;
 80016e8:	f88d 5050 	strb.w	r5, [sp, #80]	@ 0x50
  macDefaultConf.RetryTransmission = DISABLE;
 80016ec:	f88d 5054 	strb.w	r5, [sp, #84]	@ 0x54
  macDefaultConf.Watchdog = ENABLE;
 80016f0:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016f4:	9516      	str	r5, [sp, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016f6:	f88d 505c 	strb.w	r5, [sp, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016fa:	951f      	str	r5, [sp, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016fc:	f88d 5080 	strb.w	r5, [sp, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001700:	9521      	str	r5, [sp, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001702:	f8ad 5088 	strh.w	r5, [sp, #136]	@ 0x88
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001706:	f88d 508a 	strb.w	r5, [sp, #138]	@ 0x8a
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800170a:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  ETH_SetMACConfig(heth, &macDefaultConf);
 800170e:	f7ff fe81 	bl	8001414 <ETH_SetMACConfig>
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001712:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001716:	4620      	mov	r0, r4
 8001718:	a902      	add	r1, sp, #8
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800171a:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800171c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001720:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001724:	f88d 6016 	strb.w	r6, [sp, #22]
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001728:	f8ad 7014 	strh.w	r7, [sp, #20]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800172c:	f88d 5026 	strb.w	r5, [sp, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001730:	950a      	str	r5, [sp, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001732:	f8ad 702c 	strh.w	r7, [sp, #44]	@ 0x2c
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001736:	950c      	str	r5, [sp, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001738:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800173a:	e9cd 3506 	strd	r3, r5, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800173e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001742:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001744:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001748:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800174c:	f7ff fed8 	bl	8001500 <ETH_SetDMAConfig>
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001750:	68e6      	ldr	r6, [r4, #12]
 8001752:	f104 0c14 	add.w	ip, r4, #20
    dmatxdesc = heth->Init.TxDesc + i;
 8001756:	462a      	mov	r2, r5
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001758:	4628      	mov	r0, r5
    dmatxdesc = heth->Init.TxDesc + i;
 800175a:	4633      	mov	r3, r6
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800175c:	6018      	str	r0, [r3, #0]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800175e:	4619      	mov	r1, r3
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001760:	6058      	str	r0, [r3, #4]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001762:	2a03      	cmp	r2, #3
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001764:	6098      	str	r0, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001766:	60d8      	str	r0, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001768:	f84c 3f04 	str.w	r3, [ip, #4]!
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800176c:	681f      	ldr	r7, [r3, #0]
 800176e:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 8001772:	f841 7b28 	str.w	r7, [r1], #40
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001776:	d064      	beq.n	8001842 <HAL_ETH_Init+0x1e2>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001778:	60d9      	str	r1, [r3, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800177a:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800177c:	3201      	adds	r2, #1
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800177e:	f447 0740 	orr.w	r7, r7, #12582912	@ 0xc00000
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001782:	2a04      	cmp	r2, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001784:	601f      	str	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001786:	460b      	mov	r3, r1
 8001788:	d1e8      	bne.n	800175c <HAL_ETH_Init+0xfc>
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800178a:	6822      	ldr	r2, [r4, #0]
  heth->TxDescList.CurTxDesc = 0;
 800178c:	2100      	movs	r1, #0
 800178e:	f104 0c44 	add.w	ip, r4, #68	@ 0x44
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001792:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001796:	f502 5780 	add.w	r7, r2, #4096	@ 0x1000
  heth->TxDescList.CurTxDesc = 0;
 800179a:	62a1      	str	r1, [r4, #40]	@ 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800179c:	613e      	str	r6, [r7, #16]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800179e:	6926      	ldr	r6, [r4, #16]
    dmarxdesc =  heth->Init.RxDesc + i;
 80017a0:	4633      	mov	r3, r6
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80017a2:	6019      	str	r1, [r3, #0]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017a4:	2d03      	cmp	r5, #3
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80017a6:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80017a8:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80017aa:	60d9      	str	r1, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017ac:	f8c3 e000 	str.w	lr, [r3]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80017b0:	e9c3 1108 	strd	r1, r1, [r3, #32]
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80017b4:	6960      	ldr	r0, [r4, #20]
 80017b6:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 80017ba:	6058      	str	r0, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017bc:	6858      	ldr	r0, [r3, #4]
 80017be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80017c2:	6058      	str	r0, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017c4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80017c8:	f84c 3f04 	str.w	r3, [ip, #4]!
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017cc:	d03b      	beq.n	8001846 <HAL_ETH_Init+0x1e6>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017ce:	60d8      	str	r0, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017d0:	3501      	adds	r5, #1
 80017d2:	4603      	mov	r3, r0
 80017d4:	2d04      	cmp	r5, #4
 80017d6:	d1e4      	bne.n	80017a2 <HAL_ETH_Init+0x142>
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017d8:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80017da:	2000      	movs	r0, #0
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <HAL_ETH_Init+0x1f4>)
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80017de:	65a0      	str	r0, [r4, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80017e0:	e9c4 0017 	strd	r0, r0, [r4, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80017e4:	e9c4 001a 	strd	r0, r0, [r4, #104]	@ 0x68
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017e8:	60fe      	str	r6, [r7, #12]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017ea:	888d      	ldrh	r5, [r1, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017ec:	641d      	str	r5, [r3, #64]	@ 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017ee:	6809      	ldr	r1, [r1, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017f0:	6459      	str	r1, [r3, #68]	@ 0x44
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80017f2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80017f4:	f443 7302 	orr.w	r3, r3, #520	@ 0x208
 80017f8:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80017fa:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
 80017fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001802:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001806:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800180a:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
 800180e:	f443 1303 	orr.w	r3, r3, #2146304	@ 0x20c000
 8001812:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  heth->gState = HAL_ETH_STATE_READY;
 8001816:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001818:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800181c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 8001820:	e00d      	b.n	800183e <HAL_ETH_Init+0x1de>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001822:	f7ff fc8f 	bl	8001144 <HAL_GetTick>
 8001826:	1b80      	subs	r0, r0, r6
 8001828:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 800182c:	f67f af44 	bls.w	80016b8 <HAL_ETH_Init+0x58>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001830:	2304      	movs	r3, #4
 8001832:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8001836:	23e0      	movs	r3, #224	@ 0xe0
 8001838:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return HAL_ERROR;
 800183c:	2001      	movs	r0, #1
}
 800183e:	b027      	add	sp, #156	@ 0x9c
 8001840:	bdf0      	pop	{r4, r5, r6, r7, pc}
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001842:	60de      	str	r6, [r3, #12]
 8001844:	e799      	b.n	800177a <HAL_ETH_Init+0x11a>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001846:	60de      	str	r6, [r3, #12]
 8001848:	e7c2      	b.n	80017d0 <HAL_ETH_Init+0x170>
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40013800 	.word	0x40013800
 8001854:	40028000 	.word	0x40028000

08001858 <HAL_ETH_Start_IT>:
{
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 800185a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 800185e:	4604      	mov	r4, r0
 8001860:	2501      	movs	r5, #1
  if (heth->gState == HAL_ETH_STATE_READY)
 8001862:	2b10      	cmp	r3, #16
 8001864:	d136      	bne.n	80018d4 <HAL_ETH_Start_IT+0x7c>
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001866:	2304      	movs	r3, #4
    heth->gState = HAL_ETH_STATE_BUSY;
 8001868:	2623      	movs	r6, #35	@ 0x23
    heth->RxDescList.ItMode = 1U;
 800186a:	6585      	str	r5, [r0, #88]	@ 0x58
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800186c:	66c3      	str	r3, [r0, #108]	@ 0x6c
    heth->gState = HAL_ETH_STATE_BUSY;
 800186e:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
    ETH_UpdateDescriptor(heth);
 8001872:	f7ff feaf 	bl	80015d4 <ETH_UpdateDescriptor>
    tmpreg1 = (heth->Instance)->MACCR;
 8001876:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001878:	4628      	mov	r0, r5
    tmpreg1 = (heth->Instance)->MACCR;
 800187a:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800187c:	f7ff fc68 	bl	8001150 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001880:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 8001882:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 8001884:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001890:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001892:	699a      	ldr	r2, [r3, #24]
 8001894:	f042 0202 	orr.w	r2, r2, #2
 8001898:	619a      	str	r2, [r3, #24]
    ETH_FlushTransmitFIFO(heth);
 800189a:	f7ff fe83 	bl	80015a4 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800189e:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018a0:	4628      	mov	r0, r5
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	f042 0208 	orr.w	r2, r2, #8
 80018a8:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80018aa:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ac:	f7ff fc50 	bl	8001150 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018b0:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 80018b2:	2000      	movs	r0, #0
    (heth->Instance)->MACCR = tmpreg1;
 80018b4:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	f042 0204 	orr.w	r2, r2, #4
 80018bc:	601a      	str	r2, [r3, #0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80018be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c2:	69da      	ldr	r2, [r3, #28]
 80018c4:	f442 32d0 	orr.w	r2, r2, #106496	@ 0x1a000
 80018c8:	f042 02c1 	orr.w	r2, r2, #193	@ 0xc1
 80018cc:	61da      	str	r2, [r3, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 80018ce:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
}
 80018d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80018d4:	4628      	mov	r0, r5
 80018d6:	e7fc      	b.n	80018d2 <HAL_ETH_Start_IT+0x7a>

080018d8 <HAL_ETH_Stop_IT>:
{
 80018d8:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018da:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 80018de:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018e0:	2b23      	cmp	r3, #35	@ 0x23
 80018e2:	d13c      	bne.n	800195e <HAL_ETH_Stop_IT+0x86>
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80018e4:	6801      	ldr	r1, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 80018e6:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ea:	2001      	movs	r0, #1
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80018ec:	f501 5380 	add.w	r3, r1, #4096	@ 0x1000
 80018f0:	69da      	ldr	r2, [r3, #28]
 80018f2:	f422 32d0 	bic.w	r2, r2, #106496	@ 0x1a000
 80018f6:	f022 02c1 	bic.w	r2, r2, #193	@ 0xc1
 80018fa:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018fc:	699a      	ldr	r2, [r3, #24]
 80018fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001902:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	f022 0202 	bic.w	r2, r2, #2
 800190a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800190c:	680b      	ldr	r3, [r1, #0]
 800190e:	f023 0304 	bic.w	r3, r3, #4
 8001912:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001914:	680d      	ldr	r5, [r1, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001916:	f7ff fc1b 	bl	8001150 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800191a:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 800191c:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 800191e:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001920:	f7ff fe40 	bl	80015a4 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001924:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001926:	2001      	movs	r0, #1
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f022 0208 	bic.w	r2, r2, #8
 800192e:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001930:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001932:	f7ff fc0d 	bl	8001150 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001936:	4623      	mov	r3, r4
 8001938:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800193c:	f853 2b44 	ldr.w	r2, [r3], #68
 8001940:	6015      	str	r5, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001942:	f853 1f04 	ldr.w	r1, [r3, #4]!
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001946:	684a      	ldr	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001948:	4283      	cmp	r3, r0
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800194a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800194e:	604a      	str	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001950:	d1f7      	bne.n	8001942 <HAL_ETH_Stop_IT+0x6a>
    heth->RxDescList.ItMode = 0U;
 8001952:	2000      	movs	r0, #0
    heth->gState = HAL_ETH_STATE_READY;
 8001954:	2310      	movs	r3, #16
    heth->RxDescList.ItMode = 0U;
 8001956:	65a0      	str	r0, [r4, #88]	@ 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8001958:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
}
 800195c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800195e:	2001      	movs	r0, #1
 8001960:	e7fc      	b.n	800195c <HAL_ETH_Stop_IT+0x84>

08001962 <HAL_ETH_Transmit_IT>:
{
 8001962:	b510      	push	{r4, lr}
 8001964:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001966:	b939      	cbnz	r1, 8001978 <HAL_ETH_Transmit_IT+0x16>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001968:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800196c:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001970:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_ERROR;
 8001974:	2001      	movs	r0, #1
}
 8001976:	bd10      	pop	{r4, pc}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001978:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800197c:	2a23      	cmp	r2, #35	@ 0x23
 800197e:	d1f9      	bne.n	8001974 <HAL_ETH_Transmit_IT+0x12>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001980:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001982:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001984:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001986:	f7ff fc91 	bl	80012ac <ETH_Prepare_Tx_Descriptors>
 800198a:	b120      	cbz	r0, 8001996 <HAL_ETH_Transmit_IT+0x34>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800198c:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	e7ec      	b.n	8001970 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 8001996:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800199a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800199c:	1c53      	adds	r3, r2, #1
 800199e:	2b03      	cmp	r3, #3
 80019a0:	bf88      	it	hi
 80019a2:	1ed3      	subhi	r3, r2, #3
 80019a4:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	0752      	lsls	r2, r2, #29
 80019b0:	d503      	bpl.n	80019ba <HAL_ETH_Transmit_IT+0x58>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80019b2:	2204      	movs	r2, #4
 80019b4:	615a      	str	r2, [r3, #20]
      (heth->Instance)->DMATPDR = 0U;
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
    return HAL_OK;
 80019ba:	2000      	movs	r0, #0
 80019bc:	e7db      	b.n	8001976 <HAL_ETH_Transmit_IT+0x14>

080019be <HAL_ETH_ReadData>:
{
 80019be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c2:	4604      	mov	r4, r0
 80019c4:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 80019c6:	4689      	mov	r9, r1
 80019c8:	b949      	cbnz	r1, 80019de <HAL_ETH_ReadData+0x20>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019ca:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
}
 80019d8:	b005      	add	sp, #20
 80019da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (heth->gState != HAL_ETH_STATE_STARTED)
 80019de:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80019e2:	2b23      	cmp	r3, #35	@ 0x23
 80019e4:	d1f7      	bne.n	80019d6 <HAL_ETH_ReadData+0x18>
  descidx = heth->RxDescList.RxDescIdx;
 80019e6:	f8d0 805c 	ldr.w	r8, [r0, #92]	@ 0x5c
  uint8_t rxdataready = 0U;
 80019ea:	2700      	movs	r7, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019ec:	f100 0180 	add.w	r1, r0, #128	@ 0x80
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019f0:	f108 0312 	add.w	r3, r8, #18
  uint32_t desccnt = 0U;
 80019f4:	463e      	mov	r6, r7
      dmarxdesc->BackupAddr0 = 0;
 80019f6:	46bb      	mov	fp, r7
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019f8:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019fc:	307c      	adds	r0, #124	@ 0x7c
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80019fe:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8001a02:	f1c3 0a04 	rsb	sl, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a06:	682b      	ldr	r3, [r5, #0]
         && (rxdataready == 0U))
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db02      	blt.n	8001a12 <HAL_ETH_ReadData+0x54>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a0c:	4556      	cmp	r6, sl
 8001a0e:	d000      	beq.n	8001a12 <HAL_ETH_ReadData+0x54>
         && (rxdataready == 0U))
 8001a10:	b187      	cbz	r7, 8001a34 <HAL_ETH_ReadData+0x76>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a12:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8001a14:	441e      	add	r6, r3
 8001a16:	66e6      	str	r6, [r4, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a18:	b116      	cbz	r6, 8001a20 <HAL_ETH_ReadData+0x62>
    ETH_UpdateDescriptor(heth);
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f7ff fdda 	bl	80015d4 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8001a20:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 8001a24:	2f00      	cmp	r7, #0
 8001a26:	d0d6      	beq.n	80019d6 <HAL_ETH_ReadData+0x18>
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a28:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
    heth->RxDescList.pRxStart = NULL;
 8001a2a:	2000      	movs	r0, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a2c:	f8c9 3000 	str.w	r3, [r9]
    heth->RxDescList.pRxStart = NULL;
 8001a30:	67e0      	str	r0, [r4, #124]	@ 0x7c
    return HAL_OK;
 8001a32:	e7d1      	b.n	80019d8 <HAL_ETH_ReadData+0x1a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	05db      	lsls	r3, r3, #23
 8001a38:	d503      	bpl.n	8001a42 <HAL_ETH_ReadData+0x84>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001a3a:	69eb      	ldr	r3, [r5, #28]
 8001a3c:	67a3      	str	r3, [r4, #120]	@ 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001a3e:	69ab      	ldr	r3, [r5, #24]
 8001a40:	6763      	str	r3, [r4, #116]	@ 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a42:	682b      	ldr	r3, [r5, #0]
 8001a44:	059a      	lsls	r2, r3, #22
 8001a46:	d401      	bmi.n	8001a4c <HAL_ETH_ReadData+0x8e>
 8001a48:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8001a4a:	b1fb      	cbz	r3, 8001a8c <HAL_ETH_ReadData+0xce>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	059b      	lsls	r3, r3, #22
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001a50:	682b      	ldr	r3, [r5, #0]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a52:	682a      	ldr	r2, [r5, #0]
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001a54:	f3c3 430d 	ubfx	r3, r3, #16, #14
        heth->RxDescList.RxDataLength = 0;
 8001a58:	bf48      	it	mi
 8001a5a:	e9c4 bb18 	strdmi	fp, fp, [r4, #96]	@ 0x60
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a5e:	05d2      	lsls	r2, r2, #23
 8001a60:	d502      	bpl.n	8001a68 <HAL_ETH_ReadData+0xaa>
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001a62:	682a      	ldr	r2, [r5, #0]
        rxdataready = 1;
 8001a64:	2701      	movs	r7, #1
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001a66:	6722      	str	r2, [r4, #112]	@ 0x70
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001a68:	68aa      	ldr	r2, [r5, #8]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a6a:	9001      	str	r0, [sp, #4]
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001a6c:	622a      	str	r2, [r5, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a6e:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8001a72:	f001 fa0d 	bl	8002e90 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8001a76:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a78:	9b03      	ldr	r3, [sp, #12]
      heth->RxDescList.RxDescCnt++;
 8001a7a:	3201      	adds	r2, #1
 8001a7c:	6622      	str	r2, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001a80:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
      heth->RxDescList.RxDataLength += bufflength;
 8001a84:	441a      	add	r2, r3
 8001a86:	6662      	str	r2, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001a88:	f8c5 b020 	str.w	fp, [r5, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a8c:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8001a90:	3601      	adds	r6, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	bf88      	it	hi
 8001a96:	f1a8 0303 	subhi.w	r3, r8, #3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a9a:	f103 0212 	add.w	r2, r3, #18
    desccnt++;
 8001a9e:	4698      	mov	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001aa0:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    desccnt++;
 8001aa4:	e7af      	b.n	8001a06 <HAL_ETH_ReadData+0x48>

08001aa6 <HAL_ETH_ReleaseTxPacket>:
{
 8001aa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aaa:	4605      	mov	r5, r0
  uint8_t pktTxStatus = 1U;
 8001aac:	2701      	movs	r7, #1
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001aae:	f04f 0928 	mov.w	r9, #40	@ 0x28
 8001ab2:	f04f 0a00 	mov.w	sl, #0
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001ab6:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001aba:	b106      	cbz	r6, 8001abe <HAL_ETH_ReleaseTxPacket+0x18>
 8001abc:	b917      	cbnz	r7, 8001ac4 <HAL_ETH_ReleaseTxPacket+0x1e>
}
 8001abe:	2000      	movs	r0, #0
 8001ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numOfBuf--;
 8001ac4:	eb05 0884 	add.w	r8, r5, r4, lsl #2
 8001ac8:	3e01      	subs	r6, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001aca:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8001ace:	b928      	cbnz	r0, 8001adc <HAL_ETH_ReleaseTxPacket+0x36>
      INCR_TX_DESC_INDEX(idx, 1U);
 8001ad0:	1c63      	adds	r3, r4, #1
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d900      	bls.n	8001ad8 <HAL_ETH_ReleaseTxPacket+0x32>
 8001ad6:	1ee3      	subs	r3, r4, #3
        pktTxStatus = 0U;
 8001ad8:	461c      	mov	r4, r3
 8001ada:	e7ee      	b.n	8001aba <HAL_ETH_ReleaseTxPacket+0x14>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001adc:	fb09 f304 	mul.w	r3, r9, r4
 8001ae0:	68ea      	ldr	r2, [r5, #12]
 8001ae2:	58d3      	ldr	r3, [r2, r3]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <HAL_ETH_ReleaseTxPacket+0x58>
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001ae8:	f001 f9fc 	bl	8002ee4 <HAL_ETH_TxFreeCallback>
        INCR_TX_DESC_INDEX(idx, 1U);
 8001aec:	1c63      	adds	r3, r4, #1
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001aee:	f8c8 a02c 	str.w	sl, [r8, #44]	@ 0x2c
        INCR_TX_DESC_INDEX(idx, 1U);
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	bf88      	it	hi
 8001af6:	1ee3      	subhi	r3, r4, #3
        dmatxdesclist->releaseIndex = idx;
 8001af8:	e9c5 6310 	strd	r6, r3, [r5, #64]	@ 0x40
 8001afc:	e7ec      	b.n	8001ad8 <HAL_ETH_ReleaseTxPacket+0x32>
 8001afe:	4623      	mov	r3, r4
        pktTxStatus = 0U;
 8001b00:	2700      	movs	r7, #0
 8001b02:	e7e9      	b.n	8001ad8 <HAL_ETH_ReleaseTxPacket+0x32>

08001b04 <HAL_ETH_PMTCallback>:
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
 8001b04:	4770      	bx	lr

08001b06 <HAL_ETH_WakeUpCallback>:
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
 8001b06:	4770      	bx	lr

08001b08 <HAL_ETH_IRQHandler>:
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001b08:	6803      	ldr	r3, [r0, #0]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001b0a:	4a34      	ldr	r2, [pc, #208]	@ (8001bdc <HAL_ETH_IRQHandler+0xd4>)
{
 8001b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001b10:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
{
 8001b16:	4604      	mov	r4, r0
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001b18:	695d      	ldr	r5, [r3, #20]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001b1a:	f8d3 801c 	ldr.w	r8, [r3, #28]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001b1e:	6956      	ldr	r6, [r2, #20]
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001b20:	066a      	lsls	r2, r5, #25
 8001b22:	d506      	bpl.n	8001b32 <HAL_ETH_IRQHandler+0x2a>
 8001b24:	f018 0f40 	tst.w	r8, #64	@ 0x40
 8001b28:	d003      	beq.n	8001b32 <HAL_ETH_IRQHandler+0x2a>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001be0 <HAL_ETH_IRQHandler+0xd8>)
 8001b2c:	615a      	str	r2, [r3, #20]
    HAL_ETH_RxCpltCallback(heth);
 8001b2e:	f000 ffc5 	bl	8002abc <HAL_ETH_RxCpltCallback>
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001b32:	07e8      	lsls	r0, r5, #31
 8001b34:	d50b      	bpl.n	8001b4e <HAL_ETH_IRQHandler+0x46>
 8001b36:	f018 0f01 	tst.w	r8, #1
 8001b3a:	d008      	beq.n	8001b4e <HAL_ETH_IRQHandler+0x46>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
    HAL_ETH_TxCpltCallback(heth);
 8001b42:	4620      	mov	r0, r4
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b48:	615a      	str	r2, [r3, #20]
    HAL_ETH_TxCpltCallback(heth);
 8001b4a:	f000 ffbd 	bl	8002ac8 <HAL_ETH_TxCpltCallback>
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001b4e:	0429      	lsls	r1, r5, #16
 8001b50:	d523      	bpl.n	8001b9a <HAL_ETH_IRQHandler+0x92>
 8001b52:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
 8001b56:	d020      	beq.n	8001b9a <HAL_ETH_IRQHandler+0x92>
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b58:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001b5c:	f415 5f00 	tst.w	r5, #8192	@ 0x2000
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b6e:	695a      	ldr	r2, [r3, #20]
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001b70:	d02c      	beq.n	8001bcc <HAL_ETH_IRQHandler+0xc4>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001b72:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001b76:	f422 0201 	bic.w	r2, r2, #8454144	@ 0x810000
 8001b7a:	f422 425f 	bic.w	r2, r2, #57088	@ 0xdf00
 8001b7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b82:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001b86:	69da      	ldr	r2, [r3, #28]
 8001b88:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
 8001b8c:	61da      	str	r2, [r3, #28]
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b8e:	23e0      	movs	r3, #224	@ 0xe0
 8001b90:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 8001b94:	4620      	mov	r0, r4
 8001b96:	f000 ff9d 	bl	8002ad4 <HAL_ETH_ErrorCallback>
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001b9a:	073a      	lsls	r2, r7, #28
 8001b9c:	d50b      	bpl.n	8001bb6 <HAL_ETH_IRQHandler+0xae>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001b9e:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_PMTCallback(heth);
 8001ba0:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001ba8:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_ETH_PMTCallback(heth);
 8001bac:	f7ff ffaa 	bl	8001b04 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001bb6:	0333      	lsls	r3, r6, #12
 8001bb8:	d506      	bpl.n	8001bc8 <HAL_ETH_IRQHandler+0xc0>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <HAL_ETH_IRQHandler+0xd4>)
 8001bbc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    HAL_ETH_WakeUpCallback(heth);
 8001bc0:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001bc2:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001bc4:	f7ff ff9f 	bl	8001b06 <HAL_ETH_WakeUpCallback>
}
 8001bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001bcc:	f248 6180 	movw	r1, #34432	@ 0x8680
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001bd6:	6159      	str	r1, [r3, #20]
 8001bd8:	e7dc      	b.n	8001b94 <HAL_ETH_IRQHandler+0x8c>
 8001bda:	bf00      	nop
 8001bdc:	40013c00 	.word	0x40013c00
 8001be0:	00010040 	.word	0x00010040

08001be4 <HAL_ETH_ReadPHYRegister>:
{
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001be8:	6800      	ldr	r0, [r0, #0]
{
 8001bea:	461e      	mov	r6, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001bec:	0192      	lsls	r2, r2, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8001bee:	6903      	ldr	r3, [r0, #16]
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001bf0:	02cc      	lsls	r4, r1, #11
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001bf2:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001bf6:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001bfa:	b2a4      	uxth	r4, r4
 8001bfc:	431a      	orrs	r2, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001bfe:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c00:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001c04:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8001c06:	f7ff fa9d 	bl	8001144 <HAL_GetTick>
 8001c0a:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c0c:	f014 0001 	ands.w	r0, r4, #1
 8001c10:	d104      	bne.n	8001c1c <HAL_ETH_ReadPHYRegister+0x38>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c12:	682b      	ldr	r3, [r5, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	6033      	str	r3, [r6, #0]
}
 8001c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001c1c:	f7ff fa92 	bl	8001144 <HAL_GetTick>
 8001c20:	1bc0      	subs	r0, r0, r7
 8001c22:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8001c26:	d202      	bcs.n	8001c2e <HAL_ETH_ReadPHYRegister+0x4a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	691c      	ldr	r4, [r3, #16]
 8001c2c:	e7ee      	b.n	8001c0c <HAL_ETH_ReadPHYRegister+0x28>
      return HAL_ERROR;
 8001c2e:	2001      	movs	r0, #1
 8001c30:	e7f3      	b.n	8001c1a <HAL_ETH_ReadPHYRegister+0x36>

08001c32 <HAL_ETH_WritePHYRegister>:
{
 8001c32:	b570      	push	{r4, r5, r6, lr}
 8001c34:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c36:	6800      	ldr	r0, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c38:	0192      	lsls	r2, r2, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c3a:	6904      	ldr	r4, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c42:	f004 041c 	and.w	r4, r4, #28
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c46:	6143      	str	r3, [r0, #20]
 8001c48:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001c4a:	02cc      	lsls	r4, r1, #11
 8001c4c:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c4e:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c50:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg1;
 8001c54:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8001c56:	f7ff fa75 	bl	8001144 <HAL_GetTick>
 8001c5a:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c5c:	f014 0001 	ands.w	r0, r4, #1
 8001c60:	d100      	bne.n	8001c64 <HAL_ETH_WritePHYRegister+0x32>
}
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001c64:	f7ff fa6e 	bl	8001144 <HAL_GetTick>
 8001c68:	1b80      	subs	r0, r0, r6
 8001c6a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8001c6e:	d202      	bcs.n	8001c76 <HAL_ETH_WritePHYRegister+0x44>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	691c      	ldr	r4, [r3, #16]
 8001c74:	e7f2      	b.n	8001c5c <HAL_ETH_WritePHYRegister+0x2a>
      return HAL_ERROR;
 8001c76:	2001      	movs	r0, #1
 8001c78:	e7f3      	b.n	8001c62 <HAL_ETH_WritePHYRegister+0x30>

08001c7a <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001c7a:	2900      	cmp	r1, #0
 8001c7c:	d061      	beq.n	8001d42 <HAL_ETH_GetMACConfig+0xc8>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001c7e:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8001c80:	2000      	movs	r0, #0
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001c88:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8001c92:	624a      	str	r2, [r1, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	f482 7200 	eor.w	r2, r2, #512	@ 0x200
 8001c9a:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001c9e:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ca2:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8001ca4:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ca8:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8001cb0:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001cb4:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001cbc:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001cc4:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001ccc:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	f482 0280 	eor.w	r2, r2, #4194304	@ 0x400000
 8001cd4:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001cd8:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	f482 0200 	eor.w	r2, r2, #8388608	@ 0x800000
 8001ce0:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001ce4:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001cec:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001cf4:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001cfc:	710a      	strb	r2, [r1, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8001d04:	738a      	strb	r2, [r1, #14]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001d0c:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8001d16:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001d1a:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8001d24:	650a      	str	r2, [r1, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	0c12      	lsrs	r2, r2, #16
 8001d2a:	648a      	str	r2, [r1, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001d32:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d36:	699b      	ldr	r3, [r3, #24]
                                      ? ENABLE : DISABLE;
 8001d38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d3c:	f881 3055 	strb.w	r3, [r1, #85]	@ 0x55
  return HAL_OK;
 8001d40:	4770      	bx	lr
    return HAL_ERROR;
 8001d42:	2001      	movs	r0, #1
}
 8001d44:	4770      	bx	lr

08001d46 <HAL_ETH_SetMACConfig>:
{
 8001d46:	b508      	push	{r3, lr}
  if (macconf == NULL)
 8001d48:	b139      	cbz	r1, 8001d5a <HAL_ETH_SetMACConfig+0x14>
  if (heth->gState == HAL_ETH_STATE_READY)
 8001d4a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d103      	bne.n	8001d5a <HAL_ETH_SetMACConfig+0x14>
    ETH_SetMACConfig(heth, macconf);
 8001d52:	f7ff fb5f 	bl	8001414 <ETH_SetMACConfig>
    return HAL_OK;
 8001d56:	2000      	movs	r0, #0
}
 8001d58:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	e7fc      	b.n	8001d58 <HAL_ETH_SetMACConfig+0x12>
	...

08001d60 <HAL_ETH_SetMDIOClockRange>:
{
 8001d60:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMIIAR;
 8001d62:	6803      	ldr	r3, [r0, #0]
{
 8001d64:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8001d66:	691c      	ldr	r4, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8001d68:	f000 fbd8 	bl	800251c <HAL_RCC_GetHCLKFreq>
  if (hclk < 35000000U)
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <HAL_ETH_SetMDIOClockRange+0x44>)
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001d6e:	f024 041c 	bic.w	r4, r4, #28
  if (hclk < 35000000U)
 8001d72:	4298      	cmp	r0, r3
 8001d74:	d804      	bhi.n	8001d80 <HAL_ETH_SetMDIOClockRange+0x20>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d76:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001d7a:	682b      	ldr	r3, [r5, #0]
 8001d7c:	611c      	str	r4, [r3, #16]
}
 8001d7e:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 60000000U)
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <HAL_ETH_SetMDIOClockRange+0x48>)
 8001d82:	4298      	cmp	r0, r3
 8001d84:	d202      	bcs.n	8001d8c <HAL_ETH_SetMDIOClockRange+0x2c>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d86:	f044 040c 	orr.w	r4, r4, #12
 8001d8a:	e7f6      	b.n	8001d7a <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 100000000U)
 8001d8c:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <HAL_ETH_SetMDIOClockRange+0x4c>)
 8001d8e:	4298      	cmp	r0, r3
 8001d90:	d9f3      	bls.n	8001d7a <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 150000000U)
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <HAL_ETH_SetMDIOClockRange+0x50>)
 8001d94:	4298      	cmp	r0, r3
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d96:	bf94      	ite	ls
 8001d98:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001d9c:	f044 0410 	orrhi.w	r4, r4, #16
 8001da0:	e7eb      	b.n	8001d7a <HAL_ETH_SetMDIOClockRange+0x1a>
 8001da2:	bf00      	nop
 8001da4:	02160ebf 	.word	0x02160ebf
 8001da8:	03938700 	.word	0x03938700
 8001dac:	05f5e0ff 	.word	0x05f5e0ff
 8001db0:	08f0d17f 	.word	0x08f0d17f

08001db4 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8001db4:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
}
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001dc0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8001f80 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc6:	4a6c      	ldr	r2, [pc, #432]	@ (8001f78 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8001dc8:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8001dcc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	ea04 0605 	and.w	r6, r4, r5
    if (iocurrent == ioposition)
 8001dd2:	43ac      	bics	r4, r5
 8001dd4:	f040 80b7 	bne.w	8001f46 <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd8:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dda:	2703      	movs	r7, #3
 8001ddc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de0:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001de4:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de8:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dea:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dee:	2f01      	cmp	r7, #1
 8001df0:	d834      	bhi.n	8001e5c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 8001df2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001df4:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8001df8:	68cf      	ldr	r7, [r1, #12]
 8001dfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8001dfe:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 8001e02:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e04:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e06:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001e0e:	409f      	lsls	r7, r3
 8001e10:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001e14:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001e16:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e18:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e1a:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e1e:	688f      	ldr	r7, [r1, #8]
 8001e20:	fa07 f70e 	lsl.w	r7, r7, lr
 8001e24:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8001e28:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2a:	d119      	bne.n	8001e60 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8001e2c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e30:	f003 0a07 	and.w	sl, r3, #7
 8001e34:	f04f 0b0f 	mov.w	fp, #15
 8001e38:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8001e3c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001e40:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e44:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001e48:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e4c:	690f      	ldr	r7, [r1, #16]
 8001e4e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001e52:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8001e56:	f8c8 7020 	str.w	r7, [r8, #32]
 8001e5a:	e001      	b.n	8001e60 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5c:	2c03      	cmp	r4, #3
 8001e5e:	d1da      	bne.n	8001e16 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001e60:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e62:	fa04 f40e 	lsl.w	r4, r4, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e66:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e6a:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e6e:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8001e72:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e74:	d067      	beq.n	8001f46 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8001e7a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e7e:	f003 0c03 	and.w	ip, r3, #3
 8001e82:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001e8a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e8e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8001e96:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8001e9a:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e9e:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8001ea6:	9401      	str	r4, [sp, #4]
 8001ea8:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001eaa:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eac:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eb0:	4c32      	ldr	r4, [pc, #200]	@ (8001f7c <HAL_GPIO_Init+0x1c0>)
 8001eb2:	42a0      	cmp	r0, r4
 8001eb4:	d04e      	beq.n	8001f54 <HAL_GPIO_Init+0x198>
 8001eb6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001eba:	42a0      	cmp	r0, r4
 8001ebc:	d04c      	beq.n	8001f58 <HAL_GPIO_Init+0x19c>
 8001ebe:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001ec2:	42a0      	cmp	r0, r4
 8001ec4:	d04a      	beq.n	8001f5c <HAL_GPIO_Init+0x1a0>
 8001ec6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001eca:	42a0      	cmp	r0, r4
 8001ecc:	d048      	beq.n	8001f60 <HAL_GPIO_Init+0x1a4>
 8001ece:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001ed2:	42a0      	cmp	r0, r4
 8001ed4:	d046      	beq.n	8001f64 <HAL_GPIO_Init+0x1a8>
 8001ed6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001eda:	42a0      	cmp	r0, r4
 8001edc:	d044      	beq.n	8001f68 <HAL_GPIO_Init+0x1ac>
 8001ede:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001ee2:	42a0      	cmp	r0, r4
 8001ee4:	d042      	beq.n	8001f6c <HAL_GPIO_Init+0x1b0>
 8001ee6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001eea:	42a0      	cmp	r0, r4
 8001eec:	d040      	beq.n	8001f70 <HAL_GPIO_Init+0x1b4>
 8001eee:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001ef2:	42a0      	cmp	r0, r4
 8001ef4:	d03e      	beq.n	8001f74 <HAL_GPIO_Init+0x1b8>
 8001ef6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001efa:	42a0      	cmp	r0, r4
 8001efc:	bf14      	ite	ne
 8001efe:	240a      	movne	r4, #10
 8001f00:	2409      	moveq	r4, #9
 8001f02:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f06:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f0a:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f0e:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 8001f14:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	bf0c      	ite	eq
 8001f18:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001f1a:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f1c:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8001f20:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8001f22:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	bf0c      	ite	eq
 8001f26:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001f28:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f2a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8001f2e:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8001f30:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	bf0c      	ite	eq
 8001f34:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001f36:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f38:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8001f3a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8001f3c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	bf54      	ite	pl
 8001f40:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001f42:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8001f44:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f46:	3301      	adds	r3, #1
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	f47f af3d 	bne.w	8001dc8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001f4e:	b003      	add	sp, #12
 8001f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f54:	2400      	movs	r4, #0
 8001f56:	e7d4      	b.n	8001f02 <HAL_GPIO_Init+0x146>
 8001f58:	2401      	movs	r4, #1
 8001f5a:	e7d2      	b.n	8001f02 <HAL_GPIO_Init+0x146>
 8001f5c:	2402      	movs	r4, #2
 8001f5e:	e7d0      	b.n	8001f02 <HAL_GPIO_Init+0x146>
 8001f60:	2403      	movs	r4, #3
 8001f62:	e7ce      	b.n	8001f02 <HAL_GPIO_Init+0x146>
 8001f64:	2404      	movs	r4, #4
 8001f66:	e7cc      	b.n	8001f02 <HAL_GPIO_Init+0x146>
 8001f68:	2405      	movs	r4, #5
 8001f6a:	e7ca      	b.n	8001f02 <HAL_GPIO_Init+0x146>
 8001f6c:	2406      	movs	r4, #6
 8001f6e:	e7c8      	b.n	8001f02 <HAL_GPIO_Init+0x146>
 8001f70:	2407      	movs	r4, #7
 8001f72:	e7c6      	b.n	8001f02 <HAL_GPIO_Init+0x146>
 8001f74:	2408      	movs	r4, #8
 8001f76:	e7c4      	b.n	8001f02 <HAL_GPIO_Init+0x146>
 8001f78:	40013c00 	.word	0x40013c00
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40023800 	.word	0x40023800

08001f84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f84:	b10a      	cbz	r2, 8001f8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f86:	6181      	str	r1, [r0, #24]
  }
}
 8001f88:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f8a:	0409      	lsls	r1, r1, #16
 8001f8c:	e7fb      	b.n	8001f86 <HAL_GPIO_WritePin+0x2>
	...

08001f90 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f90:	4a02      	ldr	r2, [pc, #8]	@ (8001f9c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001f92:	6813      	ldr	r3, [r2, #0]
 8001f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f98:	6013      	str	r3, [r2, #0]
}
 8001f9a:	4770      	bx	lr
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa0:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001fa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fa6:	4c19      	ldr	r4, [pc, #100]	@ (800200c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fbe:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fc0:	f7ff f8c0 	bl	8001144 <HAL_GetTick>
 8001fc4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fc6:	6863      	ldr	r3, [r4, #4]
 8001fc8:	03da      	lsls	r2, r3, #15
 8001fca:	d50c      	bpl.n	8001fe6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fcc:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fce:	4d0f      	ldr	r5, [pc, #60]	@ (800200c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd4:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001fd6:	f7ff f8b5 	bl	8001144 <HAL_GetTick>
 8001fda:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fdc:	686b      	ldr	r3, [r5, #4]
 8001fde:	039b      	lsls	r3, r3, #14
 8001fe0:	d50a      	bpl.n	8001ff8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	e006      	b.n	8001ff4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fe6:	f7ff f8ad 	bl	8001144 <HAL_GetTick>
 8001fea:	1b40      	subs	r0, r0, r5
 8001fec:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001ff0:	d9e9      	bls.n	8001fc6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001ff2:	2003      	movs	r0, #3
}
 8001ff4:	b003      	add	sp, #12
 8001ff6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ff8:	f7ff f8a4 	bl	8001144 <HAL_GetTick>
 8001ffc:	1b00      	subs	r0, r0, r4
 8001ffe:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002002:	d9eb      	bls.n	8001fdc <HAL_PWREx_EnableOverDrive+0x3c>
 8002004:	e7f5      	b.n	8001ff2 <HAL_PWREx_EnableOverDrive+0x52>
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40007000 	.word	0x40007000

08002010 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002014:	4604      	mov	r4, r0
 8002016:	b340      	cbz	r0, 800206a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002018:	6803      	ldr	r3, [r0, #0]
 800201a:	07de      	lsls	r6, r3, #31
 800201c:	d410      	bmi.n	8002040 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	079d      	lsls	r5, r3, #30
 8002022:	d461      	bmi.n	80020e8 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	0719      	lsls	r1, r3, #28
 8002028:	f100 80a6 	bmi.w	8002178 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	075a      	lsls	r2, r3, #29
 8002030:	f100 80c7 	bmi.w	80021c2 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002034:	69a2      	ldr	r2, [r4, #24]
 8002036:	2a00      	cmp	r2, #0
 8002038:	f040 8130 	bne.w	800229c <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800203c:	2000      	movs	r0, #0
 800203e:	e02c      	b.n	800209a <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002040:	4b94      	ldr	r3, [pc, #592]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	f002 020c 	and.w	r2, r2, #12
 8002048:	2a04      	cmp	r2, #4
 800204a:	d007      	beq.n	800205c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	f002 020c 	and.w	r2, r2, #12
 8002052:	2a08      	cmp	r2, #8
 8002054:	d10b      	bne.n	800206e <HAL_RCC_OscConfig+0x5e>
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	0259      	lsls	r1, r3, #9
 800205a:	d508      	bpl.n	800206e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	4b8d      	ldr	r3, [pc, #564]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	039a      	lsls	r2, r3, #14
 8002062:	d5dc      	bpl.n	800201e <HAL_RCC_OscConfig+0xe>
 8002064:	6863      	ldr	r3, [r4, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1d9      	bne.n	800201e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800206a:	2001      	movs	r0, #1
 800206c:	e015      	b.n	800209a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206e:	6863      	ldr	r3, [r4, #4]
 8002070:	4d88      	ldr	r5, [pc, #544]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
 8002072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002076:	d113      	bne.n	80020a0 <HAL_RCC_OscConfig+0x90>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002080:	f7ff f860 	bl	8001144 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002084:	4e83      	ldr	r6, [pc, #524]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8002086:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002088:	6833      	ldr	r3, [r6, #0]
 800208a:	039b      	lsls	r3, r3, #14
 800208c:	d4c7      	bmi.n	800201e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208e:	f7ff f859 	bl	8001144 <HAL_GetTick>
 8002092:	1b40      	subs	r0, r0, r5
 8002094:	2864      	cmp	r0, #100	@ 0x64
 8002096:	d9f7      	bls.n	8002088 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002098:	2003      	movs	r0, #3
}
 800209a:	b002      	add	sp, #8
 800209c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a0:	b99b      	cbnz	r3, 80020ca <HAL_RCC_OscConfig+0xba>
 80020a2:	682b      	ldr	r3, [r5, #0]
 80020a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a8:	602b      	str	r3, [r5, #0]
 80020aa:	682b      	ldr	r3, [r5, #0]
 80020ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020b2:	f7ff f847 	bl	8001144 <HAL_GetTick>
 80020b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b8:	682b      	ldr	r3, [r5, #0]
 80020ba:	039f      	lsls	r7, r3, #14
 80020bc:	d5af      	bpl.n	800201e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020be:	f7ff f841 	bl	8001144 <HAL_GetTick>
 80020c2:	1b80      	subs	r0, r0, r6
 80020c4:	2864      	cmp	r0, #100	@ 0x64
 80020c6:	d9f7      	bls.n	80020b8 <HAL_RCC_OscConfig+0xa8>
 80020c8:	e7e6      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020ce:	682b      	ldr	r3, [r5, #0]
 80020d0:	d103      	bne.n	80020da <HAL_RCC_OscConfig+0xca>
 80020d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d6:	602b      	str	r3, [r5, #0]
 80020d8:	e7ce      	b.n	8002078 <HAL_RCC_OscConfig+0x68>
 80020da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020de:	602b      	str	r3, [r5, #0]
 80020e0:	682b      	ldr	r3, [r5, #0]
 80020e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020e6:	e7ca      	b.n	800207e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	f012 0f0c 	tst.w	r2, #12
 80020f0:	d007      	beq.n	8002102 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	f002 020c 	and.w	r2, r2, #12
 80020f8:	2a08      	cmp	r2, #8
 80020fa:	d111      	bne.n	8002120 <HAL_RCC_OscConfig+0x110>
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	025d      	lsls	r5, r3, #9
 8002100:	d40e      	bmi.n	8002120 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	4a64      	ldr	r2, [pc, #400]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
 8002104:	6813      	ldr	r3, [r2, #0]
 8002106:	0799      	lsls	r1, r3, #30
 8002108:	d502      	bpl.n	8002110 <HAL_RCC_OscConfig+0x100>
 800210a:	68e3      	ldr	r3, [r4, #12]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d1ac      	bne.n	800206a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	6813      	ldr	r3, [r2, #0]
 8002112:	6921      	ldr	r1, [r4, #16]
 8002114:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002118:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800211c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e781      	b.n	8002024 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002120:	68e3      	ldr	r3, [r4, #12]
 8002122:	4d5c      	ldr	r5, [pc, #368]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
 8002124:	b1bb      	cbz	r3, 8002156 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800212e:	f7ff f809 	bl	8001144 <HAL_GetTick>
 8002132:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	682b      	ldr	r3, [r5, #0]
 8002136:	079b      	lsls	r3, r3, #30
 8002138:	d507      	bpl.n	800214a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	682b      	ldr	r3, [r5, #0]
 800213c:	6922      	ldr	r2, [r4, #16]
 800213e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002142:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002146:	602b      	str	r3, [r5, #0]
 8002148:	e76c      	b.n	8002024 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7fe fffb 	bl	8001144 <HAL_GetTick>
 800214e:	1b80      	subs	r0, r0, r6
 8002150:	2802      	cmp	r0, #2
 8002152:	d9ef      	bls.n	8002134 <HAL_RCC_OscConfig+0x124>
 8002154:	e7a0      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002156:	682b      	ldr	r3, [r5, #0]
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800215e:	f7fe fff1 	bl	8001144 <HAL_GetTick>
 8002162:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	079f      	lsls	r7, r3, #30
 8002168:	f57f af5c 	bpl.w	8002024 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216c:	f7fe ffea 	bl	8001144 <HAL_GetTick>
 8002170:	1b80      	subs	r0, r0, r6
 8002172:	2802      	cmp	r0, #2
 8002174:	d9f6      	bls.n	8002164 <HAL_RCC_OscConfig+0x154>
 8002176:	e78f      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002178:	6963      	ldr	r3, [r4, #20]
 800217a:	4d46      	ldr	r5, [pc, #280]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
 800217c:	b183      	cbz	r3, 80021a0 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 800217e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002186:	f7fe ffdd 	bl	8001144 <HAL_GetTick>
 800218a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800218e:	079b      	lsls	r3, r3, #30
 8002190:	f53f af4c 	bmi.w	800202c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7fe ffd6 	bl	8001144 <HAL_GetTick>
 8002198:	1b80      	subs	r0, r0, r6
 800219a:	2802      	cmp	r0, #2
 800219c:	d9f6      	bls.n	800218c <HAL_RCC_OscConfig+0x17c>
 800219e:	e77b      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80021a0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80021a8:	f7fe ffcc 	bl	8001144 <HAL_GetTick>
 80021ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ae:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80021b0:	079f      	lsls	r7, r3, #30
 80021b2:	f57f af3b 	bpl.w	800202c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b6:	f7fe ffc5 	bl	8001144 <HAL_GetTick>
 80021ba:	1b80      	subs	r0, r0, r6
 80021bc:	2802      	cmp	r0, #2
 80021be:	d9f6      	bls.n	80021ae <HAL_RCC_OscConfig+0x19e>
 80021c0:	e76a      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c2:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
 80021c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021c6:	00d5      	lsls	r5, r2, #3
 80021c8:	d427      	bmi.n	800221a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 80021cc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80021d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021de:	4d2e      	ldr	r5, [pc, #184]	@ (8002298 <HAL_RCC_OscConfig+0x288>)
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	05d8      	lsls	r0, r3, #23
 80021e4:	d51b      	bpl.n	800221e <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e6:	68a3      	ldr	r3, [r4, #8]
 80021e8:	4d2a      	ldr	r5, [pc, #168]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d127      	bne.n	800223e <HAL_RCC_OscConfig+0x22e>
 80021ee:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80021fa:	f7fe ffa3 	bl	8001144 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fe:	4e25      	ldr	r6, [pc, #148]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8002200:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002204:	079a      	lsls	r2, r3, #30
 8002206:	d53f      	bpl.n	8002288 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8002208:	2f00      	cmp	r7, #0
 800220a:	f43f af13 	beq.w	8002034 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4a21      	ldr	r2, [pc, #132]	@ (8002294 <HAL_RCC_OscConfig+0x284>)
 8002210:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002216:	6413      	str	r3, [r2, #64]	@ 0x40
 8002218:	e70c      	b.n	8002034 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800221a:	2700      	movs	r7, #0
 800221c:	e7df      	b.n	80021de <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800221e:	682b      	ldr	r3, [r5, #0]
 8002220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002224:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002226:	f7fe ff8d 	bl	8001144 <HAL_GetTick>
 800222a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222c:	682b      	ldr	r3, [r5, #0]
 800222e:	05d9      	lsls	r1, r3, #23
 8002230:	d4d9      	bmi.n	80021e6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002232:	f7fe ff87 	bl	8001144 <HAL_GetTick>
 8002236:	1b80      	subs	r0, r0, r6
 8002238:	2864      	cmp	r0, #100	@ 0x64
 800223a:	d9f7      	bls.n	800222c <HAL_RCC_OscConfig+0x21c>
 800223c:	e72c      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223e:	b9ab      	cbnz	r3, 800226c <HAL_RCC_OscConfig+0x25c>
 8002240:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	672b      	str	r3, [r5, #112]	@ 0x70
 800224c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800224e:	f023 0304 	bic.w	r3, r3, #4
 8002252:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002254:	f7fe ff76 	bl	8001144 <HAL_GetTick>
 8002258:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800225c:	079b      	lsls	r3, r3, #30
 800225e:	d5d3      	bpl.n	8002208 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7fe ff70 	bl	8001144 <HAL_GetTick>
 8002264:	1b80      	subs	r0, r0, r6
 8002266:	4540      	cmp	r0, r8
 8002268:	d9f7      	bls.n	800225a <HAL_RCC_OscConfig+0x24a>
 800226a:	e715      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226c:	2b05      	cmp	r3, #5
 800226e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002270:	d103      	bne.n	800227a <HAL_RCC_OscConfig+0x26a>
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	672b      	str	r3, [r5, #112]	@ 0x70
 8002278:	e7b9      	b.n	80021ee <HAL_RCC_OscConfig+0x1de>
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	672b      	str	r3, [r5, #112]	@ 0x70
 8002280:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002282:	f023 0304 	bic.w	r3, r3, #4
 8002286:	e7b5      	b.n	80021f4 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7fe ff5c 	bl	8001144 <HAL_GetTick>
 800228c:	1b40      	subs	r0, r0, r5
 800228e:	4540      	cmp	r0, r8
 8002290:	d9b7      	bls.n	8002202 <HAL_RCC_OscConfig+0x1f2>
 8002292:	e701      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
 8002294:	40023800 	.word	0x40023800
 8002298:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800229c:	4d38      	ldr	r5, [pc, #224]	@ (8002380 <HAL_RCC_OscConfig+0x370>)
 800229e:	68ab      	ldr	r3, [r5, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d041      	beq.n	800232c <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 80022a8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022aa:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80022ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022b0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b2:	d12e      	bne.n	8002312 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 80022b4:	f7fe ff46 	bl	8001144 <HAL_GetTick>
 80022b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	0199      	lsls	r1, r3, #6
 80022be:	d422      	bmi.n	8002306 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80022ca:	430b      	orrs	r3, r1
 80022cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80022d2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80022d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80022d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022e0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80022e2:	682b      	ldr	r3, [r5, #0]
 80022e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022ea:	f7fe ff2b 	bl	8001144 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	4d24      	ldr	r5, [pc, #144]	@ (8002380 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 80022f0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f2:	682b      	ldr	r3, [r5, #0]
 80022f4:	019a      	lsls	r2, r3, #6
 80022f6:	f53f aea1 	bmi.w	800203c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fa:	f7fe ff23 	bl	8001144 <HAL_GetTick>
 80022fe:	1b00      	subs	r0, r0, r4
 8002300:	2802      	cmp	r0, #2
 8002302:	d9f6      	bls.n	80022f2 <HAL_RCC_OscConfig+0x2e2>
 8002304:	e6c8      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7fe ff1d 	bl	8001144 <HAL_GetTick>
 800230a:	1b80      	subs	r0, r0, r6
 800230c:	2802      	cmp	r0, #2
 800230e:	d9d4      	bls.n	80022ba <HAL_RCC_OscConfig+0x2aa>
 8002310:	e6c2      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8002312:	f7fe ff17 	bl	8001144 <HAL_GetTick>
 8002316:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	019b      	lsls	r3, r3, #6
 800231c:	f57f ae8e 	bpl.w	800203c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe ff10 	bl	8001144 <HAL_GetTick>
 8002324:	1b00      	subs	r0, r0, r4
 8002326:	2802      	cmp	r0, #2
 8002328:	d9f6      	bls.n	8002318 <HAL_RCC_OscConfig+0x308>
 800232a:	e6b5      	b.n	8002098 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800232e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002330:	f43f ae9b 	beq.w	800206a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002334:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002338:	69e1      	ldr	r1, [r4, #28]
 800233a:	428a      	cmp	r2, r1
 800233c:	f47f ae95 	bne.w	800206a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002340:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002344:	6a21      	ldr	r1, [r4, #32]
 8002346:	428a      	cmp	r2, r1
 8002348:	f47f ae8f 	bne.w	800206a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800234c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002350:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002352:	401a      	ands	r2, r3
 8002354:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002358:	f47f ae87 	bne.w	800206a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800235c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800235e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002362:	0852      	lsrs	r2, r2, #1
 8002364:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002366:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800236a:	f47f ae7e 	bne.w	800206a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800236e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002370:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002374:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002378:	bf14      	ite	ne
 800237a:	2001      	movne	r0, #1
 800237c:	2000      	moveq	r0, #0
 800237e:	e68c      	b.n	800209a <HAL_RCC_OscConfig+0x8a>
 8002380:	40023800 	.word	0x40023800

08002384 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002384:	4913      	ldr	r1, [pc, #76]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002386:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002388:	688b      	ldr	r3, [r1, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d01b      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x46>
 8002392:	2b08      	cmp	r3, #8
 8002394:	d11b      	bne.n	80023ce <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002396:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002398:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800239a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800239c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023a0:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80023a8:	bf1a      	itte	ne
 80023aa:	480b      	ldrne	r0, [pc, #44]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x54>)
 80023ac:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ae:	480b      	ldreq	r0, [pc, #44]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x58>)
 80023b0:	fba1 0100 	umull	r0, r1, r1, r0
 80023b4:	f7fd ff84 	bl	80002c0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x50>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80023c0:	3301      	adds	r3, #1
 80023c2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80023c4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80023c8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ca:	4803      	ldr	r0, [pc, #12]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x54>)
 80023cc:	e7fc      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80023ce:	4803      	ldr	r0, [pc, #12]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80023d0:	e7fa      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x44>
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	007a1200 	.word	0x007a1200
 80023dc:	00f42400 	.word	0x00f42400

080023e0 <HAL_RCC_ClockConfig>:
{
 80023e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80023e6:	4604      	mov	r4, r0
 80023e8:	b910      	cbnz	r0, 80023f0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80023ea:	2001      	movs	r0, #1
}
 80023ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4a45      	ldr	r2, [pc, #276]	@ (8002508 <HAL_RCC_ClockConfig+0x128>)
 80023f2:	6813      	ldr	r3, [r2, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	428b      	cmp	r3, r1
 80023fa:	d328      	bcc.n	800244e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	6821      	ldr	r1, [r4, #0]
 80023fe:	078f      	lsls	r7, r1, #30
 8002400:	d430      	bmi.n	8002464 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002402:	07c8      	lsls	r0, r1, #31
 8002404:	d443      	bmi.n	800248e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002406:	4a40      	ldr	r2, [pc, #256]	@ (8002508 <HAL_RCC_ClockConfig+0x128>)
 8002408:	6813      	ldr	r3, [r2, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	42ab      	cmp	r3, r5
 8002410:	d866      	bhi.n	80024e0 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002412:	6822      	ldr	r2, [r4, #0]
 8002414:	0751      	lsls	r1, r2, #29
 8002416:	d46f      	bmi.n	80024f8 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002418:	0713      	lsls	r3, r2, #28
 800241a:	d507      	bpl.n	800242c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800241c:	4a3b      	ldr	r2, [pc, #236]	@ (800250c <HAL_RCC_ClockConfig+0x12c>)
 800241e:	6921      	ldr	r1, [r4, #16]
 8002420:	6893      	ldr	r3, [r2, #8]
 8002422:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002426:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800242a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800242c:	f7ff ffaa 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8002430:	4b36      	ldr	r3, [pc, #216]	@ (800250c <HAL_RCC_ClockConfig+0x12c>)
 8002432:	4a37      	ldr	r2, [pc, #220]	@ (8002510 <HAL_RCC_ClockConfig+0x130>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	40d8      	lsrs	r0, r3
 800243e:	4b35      	ldr	r3, [pc, #212]	@ (8002514 <HAL_RCC_ClockConfig+0x134>)
 8002440:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002442:	4b35      	ldr	r3, [pc, #212]	@ (8002518 <HAL_RCC_ClockConfig+0x138>)
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	f7fe fcf5 	bl	8000e34 <HAL_InitTick>
  return HAL_OK;
 800244a:	2000      	movs	r0, #0
 800244c:	e7ce      	b.n	80023ec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	f023 030f 	bic.w	r3, r3, #15
 8002454:	430b      	orrs	r3, r1
 8002456:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002458:	6813      	ldr	r3, [r2, #0]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	428b      	cmp	r3, r1
 8002460:	d1c3      	bne.n	80023ea <HAL_RCC_ClockConfig+0xa>
 8002462:	e7cb      	b.n	80023fc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	f011 0f04 	tst.w	r1, #4
 8002468:	4b28      	ldr	r3, [pc, #160]	@ (800250c <HAL_RCC_ClockConfig+0x12c>)
 800246a:	d003      	beq.n	8002474 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8002472:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002474:	070e      	lsls	r6, r1, #28
 8002476:	d503      	bpl.n	8002480 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800247e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	68a0      	ldr	r0, [r4, #8]
 8002484:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002488:	4302      	orrs	r2, r0
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e7b9      	b.n	8002402 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248e:	6861      	ldr	r1, [r4, #4]
 8002490:	4b1e      	ldr	r3, [pc, #120]	@ (800250c <HAL_RCC_ClockConfig+0x12c>)
 8002492:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002494:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	d11b      	bne.n	80024d0 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002498:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	d0a5      	beq.n	80023ea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a4:	4f19      	ldr	r7, [pc, #100]	@ (800250c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	f022 0203 	bic.w	r2, r2, #3
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80024ae:	f7fe fe49 	bl	8001144 <HAL_GetTick>
 80024b2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6862      	ldr	r2, [r4, #4]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80024c0:	d0a1      	beq.n	8002406 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c2:	f7fe fe3f 	bl	8001144 <HAL_GetTick>
 80024c6:	1b80      	subs	r0, r0, r6
 80024c8:	4540      	cmp	r0, r8
 80024ca:	d9f3      	bls.n	80024b4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80024cc:	2003      	movs	r0, #3
 80024ce:	e78d      	b.n	80023ec <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d0:	2902      	cmp	r1, #2
 80024d2:	d102      	bne.n	80024da <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d4:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80024d8:	e7e0      	b.n	800249c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	f012 0f02 	tst.w	r2, #2
 80024de:	e7dd      	b.n	800249c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e0:	6813      	ldr	r3, [r2, #0]
 80024e2:	f023 030f 	bic.w	r3, r3, #15
 80024e6:	432b      	orrs	r3, r5
 80024e8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	42ab      	cmp	r3, r5
 80024f2:	f47f af7a 	bne.w	80023ea <HAL_RCC_ClockConfig+0xa>
 80024f6:	e78c      	b.n	8002412 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4904      	ldr	r1, [pc, #16]	@ (800250c <HAL_RCC_ClockConfig+0x12c>)
 80024fa:	68e0      	ldr	r0, [r4, #12]
 80024fc:	688b      	ldr	r3, [r1, #8]
 80024fe:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002502:	4303      	orrs	r3, r0
 8002504:	608b      	str	r3, [r1, #8]
 8002506:	e787      	b.n	8002418 <HAL_RCC_ClockConfig+0x38>
 8002508:	40023c00 	.word	0x40023c00
 800250c:	40023800 	.word	0x40023800
 8002510:	0800f1f0 	.word	0x0800f1f0
 8002514:	20000014 	.word	0x20000014
 8002518:	2000001c 	.word	0x2000001c

0800251c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800251c:	4b01      	ldr	r3, [pc, #4]	@ (8002524 <HAL_RCC_GetHCLKFreq+0x8>)
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000014 	.word	0x20000014

08002528 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002528:	4b04      	ldr	r3, [pc, #16]	@ (800253c <HAL_RCC_GetPCLK2Freq+0x14>)
 800252a:	4a05      	ldr	r2, [pc, #20]	@ (8002540 <HAL_RCC_GetPCLK2Freq+0x18>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	4a03      	ldr	r2, [pc, #12]	@ (8002544 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002536:	6810      	ldr	r0, [r2, #0]
}
 8002538:	40d8      	lsrs	r0, r3
 800253a:	4770      	bx	lr
 800253c:	40023800 	.word	0x40023800
 8002540:	0800f1e8 	.word	0x0800f1e8
 8002544:	20000014 	.word	0x20000014

08002548 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002548:	230f      	movs	r3, #15
 800254a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_RCC_GetClockConfig+0x34>)
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	f002 0203 	and.w	r2, r2, #3
 8002554:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800255c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002564:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	08db      	lsrs	r3, r3, #3
 800256a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800256e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002570:	4b03      	ldr	r3, [pc, #12]	@ (8002580 <HAL_RCC_GetClockConfig+0x38>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	600b      	str	r3, [r1, #0]
}
 800257a:	4770      	bx	lr
 800257c:	40023800 	.word	0x40023800
 8002580:	40023c00 	.word	0x40023c00

08002584 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002584:	4770      	bx	lr
	...

08002588 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002588:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800258c:	2b01      	cmp	r3, #1
 800258e:	d133      	bne.n	80025f8 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	2302      	movs	r3, #2
 8002592:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002596:	6803      	ldr	r3, [r0, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a0:	4a16      	ldr	r2, [pc, #88]	@ (80025fc <HAL_TIM_Base_Start_IT+0x74>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01a      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x54>
 80025a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025aa:	d017      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x54>
 80025ac:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x54>
 80025b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00f      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x54>
 80025bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00b      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x54>
 80025c4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d007      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x54>
 80025cc:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d003      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x54>
 80025d4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80025d8:	4293      	cmp	r3, r2
 80025da:	d107      	bne.n	80025ec <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025dc:	6899      	ldr	r1, [r3, #8]
 80025de:	4a08      	ldr	r2, [pc, #32]	@ (8002600 <HAL_TIM_Base_Start_IT+0x78>)
 80025e0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e2:	2a06      	cmp	r2, #6
 80025e4:	d006      	beq.n	80025f4 <HAL_TIM_Base_Start_IT+0x6c>
 80025e6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80025ea:	d003      	beq.n	80025f4 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80025f4:	2000      	movs	r0, #0
 80025f6:	4770      	bx	lr
    return HAL_ERROR;
 80025f8:	2001      	movs	r0, #1
}
 80025fa:	4770      	bx	lr
 80025fc:	40010000 	.word	0x40010000
 8002600:	00010007 	.word	0x00010007

08002604 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8002604:	4770      	bx	lr

08002606 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8002606:	4770      	bx	lr

08002608 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8002608:	4770      	bx	lr

0800260a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800260a:	4770      	bx	lr

0800260c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800260c:	6803      	ldr	r3, [r0, #0]
{
 800260e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002610:	68dd      	ldr	r5, [r3, #12]
{
 8002612:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 8002614:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002616:	07b2      	lsls	r2, r6, #30
 8002618:	d50d      	bpl.n	8002636 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800261a:	07a9      	lsls	r1, r5, #30
 800261c:	d50b      	bpl.n	8002636 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800261e:	f06f 0202 	mvn.w	r2, #2
 8002622:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002624:	2201      	movs	r2, #1
 8002626:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	079a      	lsls	r2, r3, #30
 800262c:	d075      	beq.n	800271a <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800262e:	f7ff ffea 	bl	8002606 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	2300      	movs	r3, #0
 8002634:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002636:	0773      	lsls	r3, r6, #29
 8002638:	d510      	bpl.n	800265c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800263a:	0768      	lsls	r0, r5, #29
 800263c:	d50e      	bpl.n	800265c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002644:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002648:	2202      	movs	r2, #2
 800264a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002652:	d068      	beq.n	8002726 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002654:	f7ff ffd7 	bl	8002606 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002658:	2300      	movs	r3, #0
 800265a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800265c:	0731      	lsls	r1, r6, #28
 800265e:	d50f      	bpl.n	8002680 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002660:	072a      	lsls	r2, r5, #28
 8002662:	d50d      	bpl.n	8002680 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800266a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800266c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800266e:	2204      	movs	r2, #4
 8002670:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	079b      	lsls	r3, r3, #30
 8002676:	d05c      	beq.n	8002732 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002678:	f7ff ffc5 	bl	8002606 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267c:	2300      	movs	r3, #0
 800267e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002680:	06f1      	lsls	r1, r6, #27
 8002682:	d510      	bpl.n	80026a6 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002684:	06ea      	lsls	r2, r5, #27
 8002686:	d50e      	bpl.n	80026a6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002692:	2208      	movs	r2, #8
 8002694:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800269c:	d04f      	beq.n	800273e <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800269e:	f7ff ffb2 	bl	8002606 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	2300      	movs	r3, #0
 80026a4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026a6:	07f3      	lsls	r3, r6, #31
 80026a8:	d508      	bpl.n	80026bc <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026aa:	07e8      	lsls	r0, r5, #31
 80026ac:	d506      	bpl.n	80026bc <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b8:	f7fe fb92 	bl	8000de0 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026bc:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 80026c0:	d008      	beq.n	80026d4 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026c2:	0629      	lsls	r1, r5, #24
 80026c4:	d506      	bpl.n	80026d4 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 80026cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80026ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80026d0:	f000 f8d9 	bl	8002886 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026d4:	05f2      	lsls	r2, r6, #23
 80026d6:	d508      	bpl.n	80026ea <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026d8:	062b      	lsls	r3, r5, #24
 80026da:	d506      	bpl.n	80026ea <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 80026e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80026e6:	f000 f8cf 	bl	8002888 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026ea:	0670      	lsls	r0, r6, #25
 80026ec:	d508      	bpl.n	8002700 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026ee:	0669      	lsls	r1, r5, #25
 80026f0:	d506      	bpl.n	8002700 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 80026f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80026fc:	f7ff ff85 	bl	800260a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002700:	06b2      	lsls	r2, r6, #26
 8002702:	d522      	bpl.n	800274a <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002704:	06ab      	lsls	r3, r5, #26
 8002706:	d520      	bpl.n	800274a <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800270e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002710:	611a      	str	r2, [r3, #16]
}
 8002712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002716:	f000 b8b5 	b.w	8002884 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800271a:	f7ff ff73 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff ff72 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
 8002724:	e785      	b.n	8002632 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	f7ff ff6d 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272a:	4620      	mov	r0, r4
 800272c:	f7ff ff6c 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
 8002730:	e792      	b.n	8002658 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	f7ff ff67 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002736:	4620      	mov	r0, r4
 8002738:	f7ff ff66 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
 800273c:	e79e      	b.n	800267c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273e:	f7ff ff61 	bl	8002604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff ff60 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
 8002748:	e7ab      	b.n	80026a2 <HAL_TIM_IRQHandler+0x96>
}
 800274a:	bd70      	pop	{r4, r5, r6, pc}

0800274c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800274c:	4a33      	ldr	r2, [pc, #204]	@ (800281c <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 800274e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002750:	4290      	cmp	r0, r2
 8002752:	d012      	beq.n	800277a <TIM_Base_SetConfig+0x2e>
 8002754:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002758:	d00f      	beq.n	800277a <TIM_Base_SetConfig+0x2e>
 800275a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800275e:	4290      	cmp	r0, r2
 8002760:	d00b      	beq.n	800277a <TIM_Base_SetConfig+0x2e>
 8002762:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002766:	4290      	cmp	r0, r2
 8002768:	d007      	beq.n	800277a <TIM_Base_SetConfig+0x2e>
 800276a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800276e:	4290      	cmp	r0, r2
 8002770:	d003      	beq.n	800277a <TIM_Base_SetConfig+0x2e>
 8002772:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002776:	4290      	cmp	r0, r2
 8002778:	d119      	bne.n	80027ae <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800277a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002780:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002782:	4a26      	ldr	r2, [pc, #152]	@ (800281c <TIM_Base_SetConfig+0xd0>)
 8002784:	4290      	cmp	r0, r2
 8002786:	d029      	beq.n	80027dc <TIM_Base_SetConfig+0x90>
 8002788:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800278c:	d026      	beq.n	80027dc <TIM_Base_SetConfig+0x90>
 800278e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002792:	4290      	cmp	r0, r2
 8002794:	d022      	beq.n	80027dc <TIM_Base_SetConfig+0x90>
 8002796:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800279a:	4290      	cmp	r0, r2
 800279c:	d01e      	beq.n	80027dc <TIM_Base_SetConfig+0x90>
 800279e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027a2:	4290      	cmp	r0, r2
 80027a4:	d01a      	beq.n	80027dc <TIM_Base_SetConfig+0x90>
 80027a6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80027aa:	4290      	cmp	r0, r2
 80027ac:	d016      	beq.n	80027dc <TIM_Base_SetConfig+0x90>
 80027ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <TIM_Base_SetConfig+0xd4>)
 80027b0:	4290      	cmp	r0, r2
 80027b2:	d013      	beq.n	80027dc <TIM_Base_SetConfig+0x90>
 80027b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027b8:	4290      	cmp	r0, r2
 80027ba:	d00f      	beq.n	80027dc <TIM_Base_SetConfig+0x90>
 80027bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027c0:	4290      	cmp	r0, r2
 80027c2:	d00b      	beq.n	80027dc <TIM_Base_SetConfig+0x90>
 80027c4:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80027c8:	4290      	cmp	r0, r2
 80027ca:	d007      	beq.n	80027dc <TIM_Base_SetConfig+0x90>
 80027cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027d0:	4290      	cmp	r0, r2
 80027d2:	d003      	beq.n	80027dc <TIM_Base_SetConfig+0x90>
 80027d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027d8:	4290      	cmp	r0, r2
 80027da:	d103      	bne.n	80027e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027e0:	68ca      	ldr	r2, [r1, #12]
 80027e2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e4:	694a      	ldr	r2, [r1, #20]
 80027e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027ea:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80027ec:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ee:	688b      	ldr	r3, [r1, #8]
 80027f0:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f2:	680b      	ldr	r3, [r1, #0]
 80027f4:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f6:	4b09      	ldr	r3, [pc, #36]	@ (800281c <TIM_Base_SetConfig+0xd0>)
 80027f8:	4298      	cmp	r0, r3
 80027fa:	d003      	beq.n	8002804 <TIM_Base_SetConfig+0xb8>
 80027fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002800:	4298      	cmp	r0, r3
 8002802:	d101      	bne.n	8002808 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002804:	690b      	ldr	r3, [r1, #16]
 8002806:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002808:	2301      	movs	r3, #1
 800280a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800280c:	6903      	ldr	r3, [r0, #16]
 800280e:	07db      	lsls	r3, r3, #31
 8002810:	d503      	bpl.n	800281a <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002812:	6903      	ldr	r3, [r0, #16]
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6103      	str	r3, [r0, #16]
  }
}
 800281a:	4770      	bx	lr
 800281c:	40010000 	.word	0x40010000
 8002820:	40014000 	.word	0x40014000

08002824 <HAL_TIM_Base_Init>:
{
 8002824:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002826:	4604      	mov	r4, r0
 8002828:	b350      	cbz	r0, 8002880 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800282a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800282e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002832:	b91b      	cbnz	r3, 800283c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002834:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002838:	f7ff fea4 	bl	8002584 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283e:	6820      	ldr	r0, [r4, #0]
 8002840:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002842:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002846:	f7ff ff81 	bl	800274c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284a:	2301      	movs	r3, #1
  return HAL_OK;
 800284c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002852:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002856:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800285a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800285e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002862:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002866:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800286e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002872:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002876:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800287a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800287e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002880:	2001      	movs	r0, #1
 8002882:	e7fc      	b.n	800287e <HAL_TIM_Base_Init+0x5a>

08002884 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002884:	4770      	bx	lr

08002886 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8002886:	4770      	bx	lr

08002888 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8002888:	4770      	bx	lr

0800288a <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800288a:	4770      	bx	lr

0800288c <MX_LWIP_Init>:
{
 800288c:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[3] = 20;
 800288e:	2314      	movs	r3, #20
  IP_ADDRESS[0] = 192;
 8002890:	4f25      	ldr	r7, [pc, #148]	@ (8002928 <MX_LWIP_Init+0x9c>)
  NETMASK_ADDRESS[0] = 255;
 8002892:	4e26      	ldr	r6, [pc, #152]	@ (800292c <MX_LWIP_Init+0xa0>)
  IP_ADDRESS[2] = 0;
 8002894:	2400      	movs	r4, #0
  IP_ADDRESS[3] = 20;
 8002896:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 8002898:	23ff      	movs	r3, #255	@ 0xff
  GATEWAY_ADDRESS[0] = 192;
 800289a:	4d25      	ldr	r5, [pc, #148]	@ (8002930 <MX_LWIP_Init+0xa4>)
  IP_ADDRESS[0] = 192;
 800289c:	21c0      	movs	r1, #192	@ 0xc0
  IP_ADDRESS[1] = 168;
 800289e:	22a8      	movs	r2, #168	@ 0xa8
  NETMASK_ADDRESS[0] = 255;
 80028a0:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 80028a2:	7073      	strb	r3, [r6, #1]
{
 80028a4:	b085      	sub	sp, #20
  NETMASK_ADDRESS[2] = 255;
 80028a6:	70b3      	strb	r3, [r6, #2]
  GATEWAY_ADDRESS[3] = 1;
 80028a8:	2301      	movs	r3, #1
  tcpip_init( NULL, NULL );
 80028aa:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 80028ac:	7039      	strb	r1, [r7, #0]
  GATEWAY_ADDRESS[0] = 192;
 80028ae:	7029      	strb	r1, [r5, #0]
  tcpip_init( NULL, NULL );
 80028b0:	4621      	mov	r1, r4
  IP_ADDRESS[1] = 168;
 80028b2:	707a      	strb	r2, [r7, #1]
  GATEWAY_ADDRESS[1] = 168;
 80028b4:	706a      	strb	r2, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 80028b6:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 1;
 80028b8:	70eb      	strb	r3, [r5, #3]
  IP_ADDRESS[2] = 0;
 80028ba:	70bc      	strb	r4, [r7, #2]
  NETMASK_ADDRESS[3] = 0;
 80028bc:	70f4      	strb	r4, [r6, #3]
  tcpip_init( NULL, NULL );
 80028be:	f004 fa3f 	bl	8006d40 <tcpip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	491b      	ldr	r1, [pc, #108]	@ (8002934 <MX_LWIP_Init+0xa8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80028c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002938 <MX_LWIP_Init+0xac>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80028c8:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80028ca:	6833      	ldr	r3, [r6, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80028cc:	6828      	ldr	r0, [r5, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80028ce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80028d0:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <MX_LWIP_Init+0xb0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80028d2:	4d1b      	ldr	r5, [pc, #108]	@ (8002940 <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80028d4:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80028d6:	481b      	ldr	r0, [pc, #108]	@ (8002944 <MX_LWIP_Init+0xb8>)
 80028d8:	9002      	str	r0, [sp, #8]
 80028da:	481b      	ldr	r0, [pc, #108]	@ (8002948 <MX_LWIP_Init+0xbc>)
 80028dc:	e9cd 4000 	strd	r4, r0, [sp]
 80028e0:	4628      	mov	r0, r5
 80028e2:	f004 ff99 	bl	8007818 <netif_add>
  netif_set_default(&gnetif);
 80028e6:	4628      	mov	r0, r5
 80028e8:	f005 f822 	bl	8007930 <netif_set_default>
  netif_set_up(&gnetif);
 80028ec:	4628      	mov	r0, r5
 80028ee:	f005 f825 	bl	800793c <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80028f2:	4628      	mov	r0, r5
 80028f4:	4915      	ldr	r1, [pc, #84]	@ (800294c <MX_LWIP_Init+0xc0>)
 80028f6:	f005 f895 	bl	8007a24 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <MX_LWIP_Init+0xc4>)
 80028fc:	4621      	mov	r1, r4
 80028fe:	2220      	movs	r2, #32
 8002900:	4618      	mov	r0, r3
 8002902:	f00b fe53 	bl	800e5ac <memset>
  attributes.name = "EthLink";
 8002906:	4913      	ldr	r1, [pc, #76]	@ (8002954 <MX_LWIP_Init+0xc8>)
 8002908:	1f02      	subs	r2, r0, #4
  attributes.priority = osPriorityBelowNormal;
 800290a:	2310      	movs	r3, #16
  attributes.name = "EthLink";
 800290c:	f840 1c04 	str.w	r1, [r0, #-4]
  attributes.priority = osPriorityBelowNormal;
 8002910:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8002914:	4810      	ldr	r0, [pc, #64]	@ (8002958 <MX_LWIP_Init+0xcc>)
  attributes.priority = osPriorityBelowNormal;
 8002916:	e9c2 1305 	strd	r1, r3, [r2, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800291a:	4629      	mov	r1, r5
}
 800291c:	b005      	add	sp, #20
 800291e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8002922:	f000 bb4b 	b.w	8002fbc <osThreadNew>
 8002926:	bf00      	nop
 8002928:	20014680 	.word	0x20014680
 800292c:	2001467c 	.word	0x2001467c
 8002930:	20014678 	.word	0x20014678
 8002934:	2001468c 	.word	0x2001468c
 8002938:	20014688 	.word	0x20014688
 800293c:	20014684 	.word	0x20014684
 8002940:	20014690 	.word	0x20014690
 8002944:	08006cad 	.word	0x08006cad
 8002948:	08002af1 	.word	0x08002af1
 800294c:	0800288b 	.word	0x0800288b
 8002950:	20014658 	.word	0x20014658
 8002954:	0800f200 	.word	0x0800f200
 8002958:	08002da5 	.word	0x08002da5

0800295c <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 800295c:	2000      	movs	r0, #0
 800295e:	4770      	bx	lr

08002960 <low_level_output>:
{
 8002960:	b530      	push	{r4, r5, lr}
 8002962:	b08d      	sub	sp, #52	@ 0x34
 8002964:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8002966:	2230      	movs	r2, #48	@ 0x30
 8002968:	2100      	movs	r1, #0
 800296a:	4668      	mov	r0, sp
 800296c:	f00b fe1e 	bl	800e5ac <memset>
  for(q = p; q != NULL; q = q->next)
 8002970:	466a      	mov	r2, sp
 8002972:	4623      	mov	r3, r4
  uint32_t i = 0U;
 8002974:	2100      	movs	r1, #0
  for(q = p; q != NULL; q = q->next)
 8002976:	b9db      	cbnz	r3, 80029b0 <low_level_output+0x50>
  TxConfig.Length = p->tot_len;
 8002978:	4d18      	ldr	r5, [pc, #96]	@ (80029dc <low_level_output+0x7c>)
  pbuf_ref(p);
 800297a:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 800297c:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 800297e:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.Length = p->tot_len;
 8002982:	606b      	str	r3, [r5, #4]
  TxConfig.pData = p;
 8002984:	636c      	str	r4, [r5, #52]	@ 0x34
  pbuf_ref(p);
 8002986:	f005 fa8d 	bl	8007ea4 <pbuf_ref>
  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800298a:	4629      	mov	r1, r5
 800298c:	4814      	ldr	r0, [pc, #80]	@ (80029e0 <low_level_output+0x80>)
 800298e:	f7fe ffe8 	bl	8001962 <HAL_ETH_Transmit_IT>
 8002992:	b9e0      	cbnz	r0, 80029ce <low_level_output+0x6e>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8002994:	4c13      	ldr	r4, [pc, #76]	@ (80029e4 <low_level_output+0x84>)
 8002996:	f04f 31ff 	mov.w	r1, #4294967295
 800299a:	6820      	ldr	r0, [r4, #0]
 800299c:	f000 fc70 	bl	8003280 <osSemaphoreAcquire>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d1f8      	bne.n	8002996 <low_level_output+0x36>
    HAL_ETH_ReleaseTxPacket(&heth);
 80029a4:	480e      	ldr	r0, [pc, #56]	@ (80029e0 <low_level_output+0x80>)
 80029a6:	f7ff f87e 	bl	8001aa6 <HAL_ETH_ReleaseTxPacket>
  return errval;
 80029aa:	2000      	movs	r0, #0
}
 80029ac:	b00d      	add	sp, #52	@ 0x34
 80029ae:	bd30      	pop	{r4, r5, pc}
    if(i >= ETH_TX_DESC_CNT)
 80029b0:	2904      	cmp	r1, #4
 80029b2:	d010      	beq.n	80029d6 <low_level_output+0x76>
    Txbuffer[i].buffer = q->payload;
 80029b4:	6858      	ldr	r0, [r3, #4]
 80029b6:	6010      	str	r0, [r2, #0]
    Txbuffer[i].len = q->len;
 80029b8:	8958      	ldrh	r0, [r3, #10]
 80029ba:	6050      	str	r0, [r2, #4]
    if(i>0)
 80029bc:	b109      	cbz	r1, 80029c2 <low_level_output+0x62>
      Txbuffer[i-1].next = &Txbuffer[i];
 80029be:	f842 2c04 	str.w	r2, [r2, #-4]
    if(q->next == NULL)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	b903      	cbnz	r3, 80029c8 <low_level_output+0x68>
      Txbuffer[i].next = NULL;
 80029c6:	6093      	str	r3, [r2, #8]
    i++;
 80029c8:	3101      	adds	r1, #1
  for(q = p; q != NULL; q = q->next)
 80029ca:	320c      	adds	r2, #12
 80029cc:	e7d3      	b.n	8002976 <low_level_output+0x16>
    pbuf_free(p);
 80029ce:	4620      	mov	r0, r4
 80029d0:	f005 f90c 	bl	8007bec <pbuf_free>
 80029d4:	e7e9      	b.n	80029aa <low_level_output+0x4a>
      return ERR_IF;
 80029d6:	f06f 000b 	mvn.w	r0, #11
 80029da:	e7e7      	b.n	80029ac <low_level_output+0x4c>
 80029dc:	200146e4 	.word	0x200146e4
 80029e0:	2001471c 	.word	0x2001471c
 80029e4:	200147cc 	.word	0x200147cc

080029e8 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 80029e8:	f7fe bbac 	b.w	8001144 <HAL_GetTick>

080029ec <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <ETH_PHY_IO_Init+0xc>)
{
 80029ee:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 80029f0:	f7ff f9b6 	bl	8001d60 <HAL_ETH_SetMDIOClockRange>
}
 80029f4:	2000      	movs	r0, #0
 80029f6:	bd08      	pop	{r3, pc}
 80029f8:	2001471c 	.word	0x2001471c

080029fc <ETH_PHY_IO_ReadReg>:
{
 80029fc:	b508      	push	{r3, lr}
 80029fe:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8002a00:	460a      	mov	r2, r1
 8002a02:	4601      	mov	r1, r0
 8002a04:	4803      	ldr	r0, [pc, #12]	@ (8002a14 <ETH_PHY_IO_ReadReg+0x18>)
 8002a06:	f7ff f8ed 	bl	8001be4 <HAL_ETH_ReadPHYRegister>
 8002a0a:	3800      	subs	r0, #0
 8002a0c:	bf18      	it	ne
 8002a0e:	2001      	movne	r0, #1
}
 8002a10:	4240      	negs	r0, r0
 8002a12:	bd08      	pop	{r3, pc}
 8002a14:	2001471c 	.word	0x2001471c

08002a18 <ETH_PHY_IO_WriteReg>:
{
 8002a18:	b508      	push	{r3, lr}
 8002a1a:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	4601      	mov	r1, r0
 8002a20:	4803      	ldr	r0, [pc, #12]	@ (8002a30 <ETH_PHY_IO_WriteReg+0x18>)
 8002a22:	f7ff f906 	bl	8001c32 <HAL_ETH_WritePHYRegister>
 8002a26:	3800      	subs	r0, #0
 8002a28:	bf18      	it	ne
 8002a2a:	2001      	movne	r0, #1
}
 8002a2c:	4240      	negs	r0, r0
 8002a2e:	bd08      	pop	{r3, pc}
 8002a30:	2001471c 	.word	0x2001471c

08002a34 <pbuf_free_custom>:
{
 8002a34:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8002a36:	4808      	ldr	r0, [pc, #32]	@ (8002a58 <pbuf_free_custom+0x24>)
{
 8002a38:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8002a3a:	f004 fe55 	bl	80076e8 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8002a3e:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <pbuf_free_custom+0x28>)
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	2a01      	cmp	r2, #1
 8002a44:	d107      	bne.n	8002a56 <pbuf_free_custom+0x22>
    RxAllocStatus = RX_ALLOC_OK;
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8002a4a:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <pbuf_free_custom+0x2c>)
 8002a4c:	6818      	ldr	r0, [r3, #0]
}
 8002a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8002a52:	f000 bc51 	b.w	80032f8 <osSemaphoreRelease>
}
 8002a56:	bd08      	pop	{r3, pc}
 8002a58:	0800f254 	.word	0x0800f254
 8002a5c:	200147d4 	.word	0x200147d4
 8002a60:	200147d0 	.word	0x200147d0

08002a64 <ethernetif_input>:
{
 8002a64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002a68:	4605      	mov	r5, r0
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8002a6a:	4f11      	ldr	r7, [pc, #68]	@ (8002ab0 <ethernetif_input+0x4c>)
  if(RxAllocStatus == RX_ALLOC_OK)
 8002a6c:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8002ab4 <ethernetif_input+0x50>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8002a70:	f8df 9044 	ldr.w	r9, [pc, #68]	@ 8002ab8 <ethernetif_input+0x54>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	6838      	ldr	r0, [r7, #0]
 8002a7a:	f000 fc01 	bl	8003280 <osSemaphoreAcquire>
 8002a7e:	4604      	mov	r4, r0
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d1f7      	bne.n	8002a74 <ethernetif_input+0x10>
  if(RxAllocStatus == RX_ALLOC_OK)
 8002a84:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8002a88:	9401      	str	r4, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8002a8a:	b91b      	cbnz	r3, 8002a94 <ethernetif_input+0x30>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8002a8c:	a901      	add	r1, sp, #4
 8002a8e:	4648      	mov	r0, r9
 8002a90:	f7fe ff95 	bl	80019be <HAL_ETH_ReadData>
  return p;
 8002a94:	9e01      	ldr	r6, [sp, #4]
        if (p != NULL)
 8002a96:	2e00      	cmp	r6, #0
 8002a98:	d0ec      	beq.n	8002a74 <ethernetif_input+0x10>
          if (netif->input( p, netif) != ERR_OK )
 8002a9a:	692b      	ldr	r3, [r5, #16]
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	4798      	blx	r3
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d0ee      	beq.n	8002a84 <ethernetif_input+0x20>
            pbuf_free(p);
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	f005 f8a0 	bl	8007bec <pbuf_free>
 8002aac:	e7ea      	b.n	8002a84 <ethernetif_input+0x20>
 8002aae:	bf00      	nop
 8002ab0:	200147d0 	.word	0x200147d0
 8002ab4:	200147d4 	.word	0x200147d4
 8002ab8:	2001471c 	.word	0x2001471c

08002abc <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8002abc:	4b01      	ldr	r3, [pc, #4]	@ (8002ac4 <HAL_ETH_RxCpltCallback+0x8>)
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	f000 bc1a 	b.w	80032f8 <osSemaphoreRelease>
 8002ac4:	200147d0 	.word	0x200147d0

08002ac8 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8002ac8:	4b01      	ldr	r3, [pc, #4]	@ (8002ad0 <HAL_ETH_TxCpltCallback+0x8>)
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	f000 bc14 	b.w	80032f8 <osSemaphoreRelease>
 8002ad0:	200147cc 	.word	0x200147cc

08002ad4 <HAL_ETH_ErrorCallback>:
{
 8002ad4:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8002ad6:	f7ff f96d 	bl	8001db4 <HAL_ETH_GetDMAError>
 8002ada:	0603      	lsls	r3, r0, #24
 8002adc:	d505      	bpl.n	8002aea <HAL_ETH_ErrorCallback+0x16>
     osSemaphoreRelease(RxPktSemaphore);
 8002ade:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_ETH_ErrorCallback+0x18>)
 8002ae0:	6818      	ldr	r0, [r3, #0]
}
 8002ae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8002ae6:	f000 bc07 	b.w	80032f8 <osSemaphoreRelease>
}
 8002aea:	bd08      	pop	{r3, pc}
 8002aec:	200147d0 	.word	0x200147d0

08002af0 <ethernetif_init>:
{
 8002af0:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8002af2:	4604      	mov	r4, r0
{
 8002af4:	b0a5      	sub	sp, #148	@ 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8002af6:	b930      	cbnz	r0, 8002b06 <ethernetif_init+0x16>
 8002af8:	4b59      	ldr	r3, [pc, #356]	@ (8002c60 <ethernetif_init+0x170>)
 8002afa:	f240 12fd 	movw	r2, #509	@ 0x1fd
 8002afe:	4959      	ldr	r1, [pc, #356]	@ (8002c64 <ethernetif_init+0x174>)
 8002b00:	4859      	ldr	r0, [pc, #356]	@ (8002c68 <ethernetif_init+0x178>)
 8002b02:	f00b fc59 	bl	800e3b8 <iprintf>
  netif->name[0] = IFNAME0;
 8002b06:	f247 4373 	movw	r3, #29811	@ 0x7473
  ETH_MACConfigTypeDef MACConf = {0};
 8002b0a:	2264      	movs	r2, #100	@ 0x64
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	a80b      	add	r0, sp, #44	@ 0x2c
  netif->name[0] = IFNAME0;
 8002b10:	85e3      	strh	r3, [r4, #46]	@ 0x2e
  MACAddr[4] = 0x00;
 8002b12:	2600      	movs	r6, #0
  netif->output = etharp_output;
 8002b14:	4b55      	ldr	r3, [pc, #340]	@ (8002c6c <ethernetif_init+0x17c>)
  heth.Instance = ETH;
 8002b16:	4d56      	ldr	r5, [pc, #344]	@ (8002c70 <ethernetif_init+0x180>)
  netif->output = etharp_output;
 8002b18:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8002b1a:	4b56      	ldr	r3, [pc, #344]	@ (8002c74 <ethernetif_init+0x184>)
 8002b1c:	61a3      	str	r3, [r4, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 8002b1e:	f00b fd45 	bl	800e5ac <memset>
  heth.Instance = ETH;
 8002b22:	4b55      	ldr	r3, [pc, #340]	@ (8002c78 <ethernetif_init+0x188>)
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002b24:	4628      	mov	r0, r5
  MACAddr[4] = 0x00;
 8002b26:	f8ad 6004 	strh.w	r6, [sp, #4]
  heth.Instance = ETH;
 8002b2a:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 8002b2c:	4b53      	ldr	r3, [pc, #332]	@ (8002c7c <ethernetif_init+0x18c>)
  heth.Init.MACAddr = &MACAddr[0];
 8002b2e:	f8c5 d004 	str.w	sp, [r5, #4]
  MACAddr[0] = 0x00;
 8002b32:	9300      	str	r3, [sp, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002b34:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8002b38:	60ab      	str	r3, [r5, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002b3a:	4b51      	ldr	r3, [pc, #324]	@ (8002c80 <ethernetif_init+0x190>)
 8002b3c:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002b3e:	4b51      	ldr	r3, [pc, #324]	@ (8002c84 <ethernetif_init+0x194>)
 8002b40:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 8002b42:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b46:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002b48:	f7fe fd8a 	bl	8001660 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002b4c:	4b4e      	ldr	r3, [pc, #312]	@ (8002c88 <ethernetif_init+0x198>)
 8002b4e:	4631      	mov	r1, r6
 8002b50:	2234      	movs	r2, #52	@ 0x34
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002b52:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002b54:	4618      	mov	r0, r3
 8002b56:	f00b fd29 	bl	800e5ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002b5a:	2221      	movs	r2, #33	@ 0x21
 8002b5c:	f840 2c04 	str.w	r2, [r0, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002b60:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002b64:	6102      	str	r2, [r0, #16]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8002b66:	4849      	ldr	r0, [pc, #292]	@ (8002c8c <ethernetif_init+0x19c>)
 8002b68:	f004 fd6a 	bl	8007640 <memp_init_pool>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002b6c:	2306      	movs	r3, #6
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002b6e:	4631      	mov	r1, r6
 8002b70:	2001      	movs	r0, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002b72:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002b76:	686b      	ldr	r3, [r5, #4]
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	f884 2026 	strb.w	r2, [r4, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002b7e:	785a      	ldrb	r2, [r3, #1]
 8002b80:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002b84:	789a      	ldrb	r2, [r3, #2]
 8002b86:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002b8a:	78da      	ldrb	r2, [r3, #3]
 8002b8c:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002b90:	791a      	ldrb	r2, [r3, #4]
 8002b92:	f884 202a 	strb.w	r2, [r4, #42]	@ 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002b96:	4632      	mov	r2, r6
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002b98:	795b      	ldrb	r3, [r3, #5]
 8002b9a:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8002b9e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002ba2:	84a3      	strh	r3, [r4, #36]	@ 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002ba4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8002ba8:	f043 030a 	orr.w	r3, r3, #10
 8002bac:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002bb0:	f000 fb0e 	bl	80031d0 <osSemaphoreNew>
 8002bb4:	4b36      	ldr	r3, [pc, #216]	@ (8002c90 <ethernetif_init+0x1a0>)
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002bb6:	4632      	mov	r2, r6
 8002bb8:	4631      	mov	r1, r6
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002bba:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f000 fb07 	bl	80031d0 <osSemaphoreNew>
 8002bc2:	4b34      	ldr	r3, [pc, #208]	@ (8002c94 <ethernetif_init+0x1a4>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	4631      	mov	r1, r6
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002bc8:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8002bca:	a803      	add	r0, sp, #12
 8002bcc:	f00b fcee 	bl	800e5ac <memset>
  attributes.name = "EthIf";
 8002bd0:	4b31      	ldr	r3, [pc, #196]	@ (8002c98 <ethernetif_init+0x1a8>)
  attributes.priority = osPriorityRealtime;
 8002bd2:	f44f 70af 	mov.w	r0, #350	@ 0x15e
  osThreadNew(ethernetif_input, netif, &attributes);
 8002bd6:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8002bd8:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 8002bda:	2330      	movs	r3, #48	@ 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8002bdc:	4621      	mov	r1, r4
  attributes.priority = osPriorityRealtime;
 8002bde:	e9cd 0307 	strd	r0, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8002be2:	482e      	ldr	r0, [pc, #184]	@ (8002c9c <ethernetif_init+0x1ac>)
 8002be4:	f000 f9ea 	bl	8002fbc <osThreadNew>
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8002be8:	492d      	ldr	r1, [pc, #180]	@ (8002ca0 <ethernetif_init+0x1b0>)
 8002bea:	482e      	ldr	r0, [pc, #184]	@ (8002ca4 <ethernetif_init+0x1b4>)
 8002bec:	f7fe fa07 	bl	8000ffe <DP83848_RegisterBusIO>
  if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 8002bf0:	482c      	ldr	r0, [pc, #176]	@ (8002ca4 <ethernetif_init+0x1b4>)
 8002bf2:	f7fe fa18 	bl	8001026 <DP83848_Init>
 8002bf6:	b140      	cbz	r0, 8002c0a <ethernetif_init+0x11a>
      netif_set_link_down(netif);
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f004 fef9 	bl	80079f0 <netif_set_link_down>
      netif_set_down(netif);
 8002bfe:	4620      	mov	r0, r4
 8002c00:	f004 feb6 	bl	8007970 <netif_set_down>
}
 8002c04:	2000      	movs	r0, #0
 8002c06:	b025      	add	sp, #148	@ 0x94
 8002c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hal_eth_init_status == HAL_OK)
 8002c0a:	bb37      	cbnz	r7, 8002c5a <ethernetif_init+0x16a>
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 8002c0c:	4825      	ldr	r0, [pc, #148]	@ (8002ca4 <ethernetif_init+0x1b4>)
 8002c0e:	f7fe fa37 	bl	8001080 <DP83848_GetLinkState>
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8002c12:	2801      	cmp	r0, #1
 8002c14:	ddf0      	ble.n	8002bf8 <ethernetif_init+0x108>
      switch (PHYLinkState)
 8002c16:	3803      	subs	r0, #3
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8002c18:	a90b      	add	r1, sp, #44	@ 0x2c
 8002c1a:	2802      	cmp	r0, #2
 8002c1c:	bf93      	iteet	ls
 8002c1e:	4b22      	ldrls	r3, [pc, #136]	@ (8002ca8 <ethernetif_init+0x1b8>)
      switch (PHYLinkState)
 8002c20:	f44f 4580 	movhi.w	r5, #16384	@ 0x4000
 8002c24:	f44f 6600 	movhi.w	r6, #2048	@ 0x800
 8002c28:	f833 6010 	ldrhls.w	r6, [r3, r0, lsl #1]
 8002c2c:	bf9c      	itt	ls
 8002c2e:	4b1f      	ldrls	r3, [pc, #124]	@ (8002cac <ethernetif_init+0x1bc>)
 8002c30:	f833 5010 	ldrhls.w	r5, [r3, r0, lsl #1]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8002c34:	480e      	ldr	r0, [pc, #56]	@ (8002c70 <ethernetif_init+0x180>)
 8002c36:	f7ff f820 	bl	8001c7a <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8002c3a:	a90b      	add	r1, sp, #44	@ 0x2c
 8002c3c:	480c      	ldr	r0, [pc, #48]	@ (8002c70 <ethernetif_init+0x180>)
    MACConf.Speed = speed;
 8002c3e:	e9cd 5610 	strd	r5, r6, [sp, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8002c42:	f7ff f880 	bl	8001d46 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8002c46:	480a      	ldr	r0, [pc, #40]	@ (8002c70 <ethernetif_init+0x180>)
 8002c48:	f7fe fe06 	bl	8001858 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f004 fe75 	bl	800793c <netif_set_up>
    netif_set_link_up(netif);
 8002c52:	4620      	mov	r0, r4
 8002c54:	f004 fea8 	bl	80079a8 <netif_set_link_up>
 8002c58:	e7d4      	b.n	8002c04 <ethernetif_init+0x114>
    Error_Handler();
 8002c5a:	f7fe f8cb 	bl	8000df4 <Error_Handler>
 8002c5e:	e7d1      	b.n	8002c04 <ethernetif_init+0x114>
 8002c60:	0800f208 	.word	0x0800f208
 8002c64:	0800f224 	.word	0x0800f224
 8002c68:	0800f15a 	.word	0x0800f15a
 8002c6c:	0800c969 	.word	0x0800c969
 8002c70:	2001471c 	.word	0x2001471c
 8002c74:	08002961 	.word	0x08002961
 8002c78:	40028000 	.word	0x40028000
 8002c7c:	00e18000 	.word	0x00e18000
 8002c80:	200000a0 	.word	0x200000a0
 8002c84:	20000140 	.word	0x20000140
 8002c88:	200146e8 	.word	0x200146e8
 8002c8c:	0800f254 	.word	0x0800f254
 8002c90:	200147d0 	.word	0x200147d0
 8002c94:	200147cc 	.word	0x200147cc
 8002c98:	0800f232 	.word	0x0800f232
 8002c9c:	08002a65 	.word	0x08002a65
 8002ca0:	20000020 	.word	0x20000020
 8002ca4:	200146c4 	.word	0x200146c4
 8002ca8:	0800f24e 	.word	0x0800f24e
 8002cac:	0800f248 	.word	0x0800f248

08002cb0 <sys_now>:
  return HAL_GetTick();
 8002cb0:	f7fe ba48 	b.w	8001144 <HAL_GetTick>

08002cb4 <HAL_ETH_MspInit>:
{
 8002cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb6:	b08d      	sub	sp, #52	@ 0x34
 8002cb8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cba:	2214      	movs	r2, #20
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	a807      	add	r0, sp, #28
 8002cc0:	f00b fc74 	bl	800e5ac <memset>
  if(ethHandle->Instance==ETH)
 8002cc4:	6822      	ldr	r2, [r4, #0]
 8002cc6:	4b33      	ldr	r3, [pc, #204]	@ (8002d94 <HAL_ETH_MspInit+0xe0>)
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d161      	bne.n	8002d90 <HAL_ETH_MspInit+0xdc>
    __HAL_RCC_ETH_CLK_ENABLE();
 8002ccc:	f5a3 4390 	sub.w	r3, r3, #18432	@ 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cd2:	2603      	movs	r6, #3
 8002cd4:	250b      	movs	r5, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd8:	a907      	add	r1, sp, #28
 8002cda:	482f      	ldr	r0, [pc, #188]	@ (8002d98 <HAL_ETH_MspInit+0xe4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2400      	movs	r4, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 8002cde:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002ce2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ce6:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8002cea:	9201      	str	r2, [sp, #4]
 8002cec:	9a01      	ldr	r2, [sp, #4]
 8002cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cf0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002cf4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cf8:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8002cfc:	9202      	str	r2, [sp, #8]
 8002cfe:	9a02      	ldr	r2, [sp, #8]
 8002d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d02:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d0a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002d0e:	9203      	str	r2, [sp, #12]
 8002d10:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d14:	f042 0204 	orr.w	r2, r2, #4
 8002d18:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d1c:	f002 0204 	and.w	r2, r2, #4
 8002d20:	9204      	str	r2, [sp, #16]
 8002d22:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d2e:	f002 0201 	and.w	r2, r2, #1
 8002d32:	9205      	str	r2, [sp, #20]
 8002d34:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d38:	f042 0202 	orr.w	r2, r2, #2
 8002d3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	9306      	str	r3, [sp, #24]
 8002d46:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2332      	movs	r3, #50	@ 0x32
 8002d4a:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d4e:	e9cd 650a 	strd	r6, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d52:	f7ff f833 	bl	8001dbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002d56:	2386      	movs	r3, #134	@ 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d58:	a907      	add	r1, sp, #28
 8002d5a:	4810      	ldr	r0, [pc, #64]	@ (8002d9c <HAL_ETH_MspInit+0xe8>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d5c:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d62:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d66:	f7ff f829 	bl	8001dbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002d6a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6e:	a907      	add	r1, sp, #28
 8002d70:	480b      	ldr	r0, [pc, #44]	@ (8002da0 <HAL_ETH_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d72:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d78:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7c:	f7ff f81e 	bl	8001dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8002d80:	203d      	movs	r0, #61	@ 0x3d
 8002d82:	4622      	mov	r2, r4
 8002d84:	2105      	movs	r1, #5
 8002d86:	f7fe fa07 	bl	8001198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8002d8a:	203d      	movs	r0, #61	@ 0x3d
 8002d8c:	f7fe fa36 	bl	80011fc <HAL_NVIC_EnableIRQ>
}
 8002d90:	b00d      	add	sp, #52	@ 0x34
 8002d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d94:	40028000 	.word	0x40028000
 8002d98:	40020800 	.word	0x40020800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	40020400 	.word	0x40020400

08002da4 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8002da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ETH_MACConfigTypeDef MACConf = {0};
  int32_t PHYLinkState = 0;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8002da8:	2500      	movs	r5, #0
{
 8002daa:	b09a      	sub	sp, #104	@ 0x68

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8002dac:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8002e44 <ethernet_link_thread+0xa0>
{
 8002db0:	4604      	mov	r4, r0
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8002db2:	46a8      	mov	r8, r5
 8002db4:	462f      	mov	r7, r5
    }

    if(linkchanged)
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8002db6:	4e21      	ldr	r6, [pc, #132]	@ (8002e3c <ethernet_link_thread+0x98>)
  ETH_MACConfigTypeDef MACConf = {0};
 8002db8:	2264      	movs	r2, #100	@ 0x64
 8002dba:	f8df a08c 	ldr.w	sl, [pc, #140]	@ 8002e48 <ethernet_link_thread+0xa4>
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	a801      	add	r0, sp, #4
 8002dc2:	f00b fbf3 	bl	800e5ac <memset>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8002dc6:	4648      	mov	r0, r9
 8002dc8:	f7fe f95a 	bl	8001080 <DP83848_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8002dcc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8002dd0:	075a      	lsls	r2, r3, #29
 8002dd2:	d510      	bpl.n	8002df6 <ethernet_link_thread+0x52>
 8002dd4:	2801      	cmp	r0, #1
 8002dd6:	dc0c      	bgt.n	8002df2 <ethernet_link_thread+0x4e>
    HAL_ETH_Stop_IT(&heth);
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f7fe fd7d 	bl	80018d8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8002dde:	4620      	mov	r0, r4
 8002de0:	f004 fdc6 	bl	8007970 <netif_set_down>
    netif_set_link_down(netif);
 8002de4:	4620      	mov	r0, r4
 8002de6:	f004 fe03 	bl	80079f0 <netif_set_link_down>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8002dea:	2064      	movs	r0, #100	@ 0x64
 8002dec:	f000 f93a 	bl	8003064 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8002df0:	e7e9      	b.n	8002dc6 <ethernet_link_thread+0x22>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8002df2:	075b      	lsls	r3, r3, #29
 8002df4:	d4f9      	bmi.n	8002dea <ethernet_link_thread+0x46>
 8002df6:	2801      	cmp	r0, #1
 8002df8:	ddf7      	ble.n	8002dea <ethernet_link_thread+0x46>
    switch (PHYLinkState)
 8002dfa:	1e83      	subs	r3, r0, #2
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d819      	bhi.n	8002e34 <ethernet_link_thread+0x90>
 8002e00:	4a0f      	ldr	r2, [pc, #60]	@ (8002e40 <ethernet_link_thread+0x9c>)
 8002e02:	f83a 8013 	ldrh.w	r8, [sl, r3, lsl #1]
 8002e06:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8002e0a:	a901      	add	r1, sp, #4
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	f7fe ff34 	bl	8001c7a <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8002e12:	a901      	add	r1, sp, #4
 8002e14:	4630      	mov	r0, r6
      netif_set_link_up(netif);
 8002e16:	2701      	movs	r7, #1
      MACConf.Speed = speed;
 8002e18:	e9cd 8506 	strd	r8, r5, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8002e1c:	f7fe ff93 	bl	8001d46 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8002e20:	4630      	mov	r0, r6
 8002e22:	f7fe fd19 	bl	8001858 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8002e26:	4620      	mov	r0, r4
 8002e28:	f004 fd88 	bl	800793c <netif_set_up>
      netif_set_link_up(netif);
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f004 fdbb 	bl	80079a8 <netif_set_link_up>
 8002e32:	e7da      	b.n	8002dea <ethernet_link_thread+0x46>
    if(linkchanged)
 8002e34:	2f00      	cmp	r7, #0
 8002e36:	d0d8      	beq.n	8002dea <ethernet_link_thread+0x46>
 8002e38:	e7e7      	b.n	8002e0a <ethernet_link_thread+0x66>
 8002e3a:	bf00      	nop
 8002e3c:	2001471c 	.word	0x2001471c
 8002e40:	0800f238 	.word	0x0800f238
 8002e44:	200146c4 	.word	0x200146c4
 8002e48:	0800f240 	.word	0x0800f240

08002e4c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8002e4c:	b513      	push	{r0, r1, r4, lr}
 8002e4e:	4604      	mov	r4, r0
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8002e50:	480c      	ldr	r0, [pc, #48]	@ (8002e84 <HAL_ETH_RxAllocateCallback+0x38>)
 8002e52:	f004 fc17 	bl	8007684 <memp_malloc_pool>
  if (p)
 8002e56:	4603      	mov	r3, r0
 8002e58:	b178      	cbz	r0, 8002e7a <HAL_ETH_RxAllocateCallback+0x2e>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8002e5a:	f100 0220 	add.w	r2, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8002e5e:	490a      	ldr	r1, [pc, #40]	@ (8002e88 <HAL_ETH_RxAllocateCallback+0x3c>)
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8002e60:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8002e62:	6101      	str	r1, [r0, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8002e64:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002e68:	e9cd 2100 	strd	r2, r1, [sp]
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	2241      	movs	r2, #65	@ 0x41
 8002e70:	4608      	mov	r0, r1
 8002e72:	f004 fe69 	bl	8007b48 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8002e76:	b002      	add	sp, #8
 8002e78:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8002e7a:	4a04      	ldr	r2, [pc, #16]	@ (8002e8c <HAL_ETH_RxAllocateCallback+0x40>)
 8002e7c:	2101      	movs	r1, #1
    *buff = NULL;
 8002e7e:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8002e80:	7011      	strb	r1, [r2, #0]
}
 8002e82:	e7f8      	b.n	8002e76 <HAL_ETH_RxAllocateCallback+0x2a>
 8002e84:	0800f254 	.word	0x0800f254
 8002e88:	08002a35 	.word	0x08002a35
 8002e8c:	200147d4 	.word	0x200147d4

08002e90 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8002e90:	b530      	push	{r4, r5, lr}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8002e92:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8002e94:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 8002e98:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8002e9c:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8002ea0:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8002ea4:	6805      	ldr	r5, [r0, #0]
 8002ea6:	b96d      	cbnz	r5, 8002ec4 <HAL_ETH_RxLinkCallback+0x34>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8002ea8:	6004      	str	r4, [r0, #0]
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
  }
  *ppEnd  = p;
 8002eaa:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8002eac:	6801      	ldr	r1, [r0, #0]
 8002eae:	b961      	cbnz	r1, 8002eca <HAL_ETH_RxLinkCallback+0x3a>
 8002eb0:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCIMVAC = op_addr;
 8002eb4:	490a      	ldr	r1, [pc, #40]	@ (8002ee0 <HAL_ETH_RxLinkCallback+0x50>)
    while (op_size > 0) {
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	dc0c      	bgt.n	8002ed4 <HAL_ETH_RxLinkCallback+0x44>
 8002eba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ebe:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8002ec2:	bd30      	pop	{r4, r5, pc}
    (*ppEnd)->next = p;
 8002ec4:	680d      	ldr	r5, [r1, #0]
 8002ec6:	602c      	str	r4, [r5, #0]
 8002ec8:	e7ef      	b.n	8002eaa <HAL_ETH_RxLinkCallback+0x1a>
    p->tot_len += Length;
 8002eca:	8908      	ldrh	r0, [r1, #8]
 8002ecc:	4418      	add	r0, r3
 8002ece:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8002ed0:	6809      	ldr	r1, [r1, #0]
 8002ed2:	e7ec      	b.n	8002eae <HAL_ETH_RxLinkCallback+0x1e>
      SCB->DCIMVAC = op_addr;
 8002ed4:	f8c1 225c 	str.w	r2, [r1, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 8002ed8:	3b20      	subs	r3, #32
      op_addr += (uint32_t)linesize;
 8002eda:	3220      	adds	r2, #32
      op_size -=           linesize;
 8002edc:	e7eb      	b.n	8002eb6 <HAL_ETH_RxLinkCallback+0x26>
 8002ede:	bf00      	nop
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8002ee4:	f004 be82 	b.w	8007bec <pbuf_free>

08002ee8 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8002ee8:	b508      	push	{r3, lr}
   /**
  */
  mbedtls_ssl_init(&ssl);
 8002eea:	4808      	ldr	r0, [pc, #32]	@ (8002f0c <MX_MBEDTLS_Init+0x24>)
 8002eec:	f00b f8a0 	bl	800e030 <mbedtls_ssl_init>
  mbedtls_ssl_config_init(&conf);
 8002ef0:	4807      	ldr	r0, [pc, #28]	@ (8002f10 <MX_MBEDTLS_Init+0x28>)
 8002ef2:	f00b f8a2 	bl	800e03a <mbedtls_ssl_config_init>
  mbedtls_x509_crt_init(&cert);
 8002ef6:	4807      	ldr	r0, [pc, #28]	@ (8002f14 <MX_MBEDTLS_Init+0x2c>)
 8002ef8:	f00b f8a3 	bl	800e042 <mbedtls_x509_crt_init>
  mbedtls_ctr_drbg_init(&ctr_drbg);
 8002efc:	4806      	ldr	r0, [pc, #24]	@ (8002f18 <MX_MBEDTLS_Init+0x30>)
 8002efe:	f00a fd79 	bl	800d9f4 <mbedtls_ctr_drbg_init>
  mbedtls_entropy_init( &entropy );
 8002f02:	4806      	ldr	r0, [pc, #24]	@ (8002f1c <MX_MBEDTLS_Init+0x34>)
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8002f04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mbedtls_entropy_init( &entropy );
 8002f08:	f00b b874 	b.w	800dff4 <mbedtls_entropy_init>
 8002f0c:	20019720 	.word	0x20019720
 8002f10:	2001964c 	.word	0x2001964c
 8002f14:	20019518 	.word	0x20019518
 8002f18:	200193d8 	.word	0x200193d8
 8002f1c:	20019160 	.word	0x20019160

08002f20 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f20:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f24:	b113      	cbz	r3, 8002f2c <osKernelInitialize+0xc>
    stat = osErrorISR;
 8002f26:	f06f 0005 	mvn.w	r0, #5
 8002f2a:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2c:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8002f30:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8002f32:	b912      	cbnz	r2, 8002f3a <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f34:	f3ef 8211 	mrs	r2, BASEPRI
 8002f38:	b112      	cbz	r2, 8002f40 <osKernelInitialize+0x20>
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2a02      	cmp	r2, #2
 8002f3e:	d0f2      	beq.n	8002f26 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	b910      	cbnz	r0, 8002f4a <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f48:	4770      	bx	lr
    } else {
      stat = osError;
 8002f4a:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8002f4e:	4770      	bx	lr
 8002f50:	20019f88 	.word	0x20019f88

08002f54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f54:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f56:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f5a:	b113      	cbz	r3, 8002f62 <osKernelStart+0xe>
    stat = osErrorISR;
 8002f5c:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8002f60:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f62:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8002f66:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8002f68:	b912      	cbnz	r2, 8002f70 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f6a:	f3ef 8211 	mrs	r2, BASEPRI
 8002f6e:	b112      	cbz	r2, 8002f76 <osKernelStart+0x22>
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	2a02      	cmp	r2, #2
 8002f74:	d0f2      	beq.n	8002f5c <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2a01      	cmp	r2, #1
 8002f7a:	d105      	bne.n	8002f88 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002f80:	f001 fafa 	bl	8004578 <vTaskStartScheduler>
      stat = osOK;
 8002f84:	2000      	movs	r0, #0
 8002f86:	e7eb      	b.n	8002f60 <osKernelStart+0xc>
      stat = osError;
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8002f8c:	e7e8      	b.n	8002f60 <osKernelStart+0xc>
 8002f8e:	bf00      	nop
 8002f90:	20019f88 	.word	0x20019f88

08002f94 <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f94:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8002f98:	b10b      	cbz	r3, 8002f9e <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8002f9a:	f001 bb4f 	b.w	800463c <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9e:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8002fa2:	b913      	cbnz	r3, 8002faa <osKernelGetTickCount+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8002fa8:	b11b      	cbz	r3, 8002fb2 <osKernelGetTickCount+0x1e>
 8002faa:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <osKernelGetTickCount+0x24>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d0f3      	beq.n	8002f9a <osKernelGetTickCount+0x6>
  } else {
    ticks = xTaskGetTickCount();
 8002fb2:	f001 bb3d 	b.w	8004630 <xTaskGetTickCount>
 8002fb6:	bf00      	nop
 8002fb8:	20019f88 	.word	0x20019f88

08002fbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fbe:	4614      	mov	r4, r2
 8002fc0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002fc2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fc4:	460b      	mov	r3, r1
  hTask = NULL;
 8002fc6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fc8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8002fcc:	bb1a      	cbnz	r2, 8003016 <osThreadNew+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fce:	f3ef 8210 	mrs	r2, PRIMASK
 8002fd2:	b912      	cbnz	r2, 8002fda <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fd4:	f3ef 8211 	mrs	r2, BASEPRI
 8002fd8:	b11a      	cbz	r2, 8002fe2 <osThreadNew+0x26>
 8002fda:	4a21      	ldr	r2, [pc, #132]	@ (8003060 <osThreadNew+0xa4>)
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	2a02      	cmp	r2, #2
 8002fe0:	d019      	beq.n	8003016 <osThreadNew+0x5a>
 8002fe2:	b1c0      	cbz	r0, 8003016 <osThreadNew+0x5a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8002fe4:	b36c      	cbz	r4, 8003042 <osThreadNew+0x86>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8002fe6:	69a5      	ldr	r5, [r4, #24]
 8002fe8:	2d00      	cmp	r5, #0
 8002fea:	bf08      	it	eq
 8002fec:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002fee:	1e6a      	subs	r2, r5, #1
 8002ff0:	46ac      	mov	ip, r5
 8002ff2:	2a37      	cmp	r2, #55	@ 0x37
 8002ff4:	d82a      	bhi.n	800304c <osThreadNew+0x90>
 8002ff6:	6862      	ldr	r2, [r4, #4]
 8002ff8:	07d2      	lsls	r2, r2, #31
 8002ffa:	d427      	bmi.n	800304c <osThreadNew+0x90>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8002ffc:	6966      	ldr	r6, [r4, #20]
 8002ffe:	b16e      	cbz	r6, 800301c <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003000:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8003002:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003004:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8003008:	b157      	cbz	r7, 8003020 <osThreadNew+0x64>
 800300a:	f1be 0fa7 	cmp.w	lr, #167	@ 0xa7
 800300e:	d902      	bls.n	8003016 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003010:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003012:	b104      	cbz	r4, 8003016 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003014:	b9e6      	cbnz	r6, 8003050 <osThreadNew+0x94>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003016:	9805      	ldr	r0, [sp, #20]
}
 8003018:	b007      	add	sp, #28
 800301a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800301c:	2280      	movs	r2, #128	@ 0x80
 800301e:	e7f0      	b.n	8003002 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003020:	f1be 0f00 	cmp.w	lr, #0
 8003024:	d1f7      	bne.n	8003016 <osThreadNew+0x5a>
      if (mem == 0) {
 8003026:	6924      	ldr	r4, [r4, #16]
 8003028:	2c00      	cmp	r4, #0
 800302a:	d1f4      	bne.n	8003016 <osThreadNew+0x5a>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800302c:	ac05      	add	r4, sp, #20
 800302e:	b292      	uxth	r2, r2
 8003030:	e9cd c400 	strd	ip, r4, [sp]
 8003034:	f001 fa72 	bl	800451c <xTaskCreate>
 8003038:	2801      	cmp	r0, #1
          hTask = NULL;
 800303a:	bf1c      	itt	ne
 800303c:	2300      	movne	r3, #0
 800303e:	9305      	strne	r3, [sp, #20]
 8003040:	e7e9      	b.n	8003016 <osThreadNew+0x5a>
    name = NULL;
 8003042:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8003044:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8003048:	2280      	movs	r2, #128	@ 0x80
 800304a:	e7ef      	b.n	800302c <osThreadNew+0x70>
        return (NULL);
 800304c:	2000      	movs	r0, #0
 800304e:	e7e3      	b.n	8003018 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003050:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8003054:	9500      	str	r5, [sp, #0]
 8003056:	f001 fa23 	bl	80044a0 <xTaskCreateStatic>
 800305a:	9005      	str	r0, [sp, #20]
 800305c:	e7db      	b.n	8003016 <osThreadNew+0x5a>
 800305e:	bf00      	nop
 8003060:	20019f88 	.word	0x20019f88

08003064 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003064:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003066:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800306a:	b113      	cbz	r3, 8003072 <osDelay+0xe>
    stat = osErrorISR;
 800306c:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003070:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003072:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8003076:	b913      	cbnz	r3, 800307e <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003078:	f3ef 8311 	mrs	r3, BASEPRI
 800307c:	b11b      	cbz	r3, 8003086 <osDelay+0x22>
 800307e:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <osDelay+0x2c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d0f2      	beq.n	800306c <osDelay+0x8>
    if (ticks != 0U) {
 8003086:	b108      	cbz	r0, 800308c <osDelay+0x28>
      vTaskDelay(ticks);
 8003088:	f001 fbee 	bl	8004868 <vTaskDelay>
    stat = osOK;
 800308c:	2000      	movs	r0, #0
  return (stat);
 800308e:	e7ef      	b.n	8003070 <osDelay+0xc>
 8003090:	20019f88 	.word	0x20019f88

08003094 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003098:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800309c:	b116      	cbz	r6, 80030a4 <osMutexNew+0x10>
  hMutex = NULL;
 800309e:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80030a0:	4620      	mov	r0, r4
 80030a2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a4:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 80030a8:	b912      	cbnz	r2, 80030b0 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030aa:	f3ef 8211 	mrs	r2, BASEPRI
 80030ae:	b11a      	cbz	r2, 80030b8 <osMutexNew+0x24>
 80030b0:	4a18      	ldr	r2, [pc, #96]	@ (8003114 <osMutexNew+0x80>)
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	2a02      	cmp	r2, #2
 80030b6:	d0f2      	beq.n	800309e <osMutexNew+0xa>
    if (attr != NULL) {
 80030b8:	b115      	cbz	r5, 80030c0 <osMutexNew+0x2c>
      type = attr->attr_bits;
 80030ba:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 80030bc:	0733      	lsls	r3, r6, #28
 80030be:	d4ee      	bmi.n	800309e <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80030c0:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 80030c4:	b17d      	cbz	r5, 80030e6 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80030c6:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 80030ca:	b151      	cbz	r1, 80030e2 <osMutexNew+0x4e>
 80030cc:	2b4f      	cmp	r3, #79	@ 0x4f
 80030ce:	d9e6      	bls.n	800309e <osMutexNew+0xa>
        if (rmtx != 0U) {
 80030d0:	b1de      	cbz	r6, 800310a <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80030d2:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80030d4:	f000 fcf9 	bl	8003aca <xQueueCreateMutexStatic>
 80030d8:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 80030da:	2800      	cmp	r0, #0
 80030dc:	d0df      	beq.n	800309e <osMutexNew+0xa>
          name = attr->name;
 80030de:	682d      	ldr	r5, [r5, #0]
 80030e0:	e00a      	b.n	80030f8 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1db      	bne.n	800309e <osMutexNew+0xa>
          if (rmtx != 0U) {
 80030e6:	b196      	cbz	r6, 800310e <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80030e8:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 80030ea:	f000 fd24 	bl	8003b36 <xQueueCreateMutex>
 80030ee:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d0d4      	beq.n	800309e <osMutexNew+0xa>
        if (attr != NULL) {
 80030f4:	2d00      	cmp	r5, #0
 80030f6:	d1f2      	bne.n	80030de <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 80030f8:	4629      	mov	r1, r5
 80030fa:	4620      	mov	r0, r4
 80030fc:	f000 fff8 	bl	80040f0 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003100:	2e00      	cmp	r6, #0
 8003102:	d0cd      	beq.n	80030a0 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003104:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8003108:	e7ca      	b.n	80030a0 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800310a:	2001      	movs	r0, #1
 800310c:	e7e2      	b.n	80030d4 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800310e:	2001      	movs	r0, #1
 8003110:	e7eb      	b.n	80030ea <osMutexNew+0x56>
 8003112:	bf00      	nop
 8003114:	20019f88 	.word	0x20019f88

08003118 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003118:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800311a:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800311e:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8003120:	f003 0201 	and.w	r2, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003124:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003126:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800312a:	b111      	cbz	r1, 8003132 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800312c:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8003130:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003132:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 8003136:	b911      	cbnz	r1, 800313e <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003138:	f3ef 8111 	mrs	r1, BASEPRI
 800313c:	b119      	cbz	r1, 8003146 <osMutexAcquire+0x2e>
 800313e:	490d      	ldr	r1, [pc, #52]	@ (8003174 <osMutexAcquire+0x5c>)
 8003140:	6809      	ldr	r1, [r1, #0]
 8003142:	2902      	cmp	r1, #2
 8003144:	d0f2      	beq.n	800312c <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8003146:	2b01      	cmp	r3, #1
 8003148:	d911      	bls.n	800316e <osMutexAcquire+0x56>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800314a:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800314c:	b162      	cbz	r2, 8003168 <osMutexAcquire+0x50>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800314e:	f000 ff35 	bl	8003fbc <xQueueTakeMutexRecursive>
 8003152:	2801      	cmp	r0, #1
 8003154:	d101      	bne.n	800315a <osMutexAcquire+0x42>
  stat = osOK;
 8003156:	2000      	movs	r0, #0
 8003158:	e7ea      	b.n	8003130 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800315a:	2c00      	cmp	r4, #0
 800315c:	bf14      	ite	ne
 800315e:	f06f 0001 	mvnne.w	r0, #1
 8003162:	f06f 0002 	mvneq.w	r0, #2
 8003166:	e7e3      	b.n	8003130 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003168:	f000 fe63 	bl	8003e32 <xQueueSemaphoreTake>
 800316c:	e7f1      	b.n	8003152 <osMutexAcquire+0x3a>
    stat = osErrorParameter;
 800316e:	f06f 0003 	mvn.w	r0, #3
 8003172:	e7dd      	b.n	8003130 <osMutexAcquire+0x18>
 8003174:	20019f88 	.word	0x20019f88

08003178 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003178:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800317a:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800317e:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8003180:	f002 0301 	and.w	r3, r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003184:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8003188:	b111      	cbz	r1, 8003190 <osMutexRelease+0x18>
    stat = osErrorISR;
 800318a:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800318e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003190:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 8003194:	b911      	cbnz	r1, 800319c <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003196:	f3ef 8111 	mrs	r1, BASEPRI
 800319a:	b119      	cbz	r1, 80031a4 <osMutexRelease+0x2c>
 800319c:	490b      	ldr	r1, [pc, #44]	@ (80031cc <osMutexRelease+0x54>)
 800319e:	6809      	ldr	r1, [r1, #0]
 80031a0:	2902      	cmp	r1, #2
 80031a2:	d0f2      	beq.n	800318a <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 80031a4:	2a01      	cmp	r2, #1
 80031a6:	d90d      	bls.n	80031c4 <osMutexRelease+0x4c>
    if (rmtx != 0U) {
 80031a8:	b13b      	cbz	r3, 80031ba <osMutexRelease+0x42>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80031aa:	f000 fca3 	bl	8003af4 <xQueueGiveMutexRecursive>
 80031ae:	2801      	cmp	r0, #1
  stat = osOK;
 80031b0:	bf0c      	ite	eq
 80031b2:	2000      	moveq	r0, #0
        stat = osErrorResource;
 80031b4:	f06f 0002 	mvnne.w	r0, #2
 80031b8:	e7e9      	b.n	800318e <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80031ba:	461a      	mov	r2, r3
 80031bc:	4619      	mov	r1, r3
 80031be:	f000 fbca 	bl	8003956 <xQueueGenericSend>
 80031c2:	e7f4      	b.n	80031ae <osMutexRelease+0x36>
    stat = osErrorParameter;
 80031c4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80031c8:	e7e1      	b.n	800318e <osMutexRelease+0x16>
 80031ca:	bf00      	nop
 80031cc:	20019f88 	.word	0x20019f88

080031d0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80031d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031d2:	460e      	mov	r6, r1
 80031d4:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031d6:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80031da:	b993      	cbnz	r3, 8003202 <osSemaphoreNew+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031dc:	f3ef 8310 	mrs	r3, PRIMASK
 80031e0:	b913      	cbnz	r3, 80031e8 <osSemaphoreNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031e2:	f3ef 8311 	mrs	r3, BASEPRI
 80031e6:	b11b      	cbz	r3, 80031f0 <osSemaphoreNew+0x20>
 80031e8:	4b24      	ldr	r3, [pc, #144]	@ (800327c <osSemaphoreNew+0xac>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d008      	beq.n	8003202 <osSemaphoreNew+0x32>
 80031f0:	b138      	cbz	r0, 8003202 <osSemaphoreNew+0x32>
 80031f2:	42b0      	cmp	r0, r6
 80031f4:	d305      	bcc.n	8003202 <osSemaphoreNew+0x32>
    mem = -1;

    if (attr != NULL) {
 80031f6:	b155      	cbz	r5, 800320e <osSemaphoreNew+0x3e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80031f8:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80031fc:	b12b      	cbz	r3, 800320a <osSemaphoreNew+0x3a>
 80031fe:	2a4f      	cmp	r2, #79	@ 0x4f
 8003200:	d823      	bhi.n	800324a <osSemaphoreNew+0x7a>
  hSemaphore = NULL;
 8003202:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8003204:	4620      	mov	r0, r4
 8003206:	b002      	add	sp, #8
 8003208:	bd70      	pop	{r4, r5, r6, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800320a:	2a00      	cmp	r2, #0
 800320c:	d1f9      	bne.n	8003202 <osSemaphoreNew+0x32>
      if (max_count == 1U) {
 800320e:	2801      	cmp	r0, #1
 8003210:	d10e      	bne.n	8003230 <osSemaphoreNew+0x60>
          hSemaphore = xSemaphoreCreateBinary();
 8003212:	2203      	movs	r2, #3
 8003214:	2100      	movs	r1, #0
 8003216:	2001      	movs	r0, #1
 8003218:	f000 fb2c 	bl	8003874 <xQueueGenericCreate>
 800321c:	e01d      	b.n	800325a <osSemaphoreNew+0x8a>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800321e:	461a      	mov	r2, r3
 8003220:	4631      	mov	r1, r6
 8003222:	f000 fb50 	bl	80038c6 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8003226:	4604      	mov	r4, r0
 8003228:	2800      	cmp	r0, #0
 800322a:	d0ea      	beq.n	8003202 <osSemaphoreNew+0x32>
          name = attr->name;
 800322c:	682d      	ldr	r5, [r5, #0]
 800322e:	e007      	b.n	8003240 <osSemaphoreNew+0x70>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003230:	4631      	mov	r1, r6
 8003232:	f000 fb6e 	bl	8003912 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8003236:	4604      	mov	r4, r0
 8003238:	2800      	cmp	r0, #0
 800323a:	d0e2      	beq.n	8003202 <osSemaphoreNew+0x32>
        if (attr != NULL) {
 800323c:	2d00      	cmp	r5, #0
 800323e:	d1f5      	bne.n	800322c <osSemaphoreNew+0x5c>
        vQueueAddToRegistry (hSemaphore, name);
 8003240:	4629      	mov	r1, r5
 8003242:	4620      	mov	r0, r4
 8003244:	f000 ff54 	bl	80040f0 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8003248:	e7dc      	b.n	8003204 <osSemaphoreNew+0x34>
      if (max_count == 1U) {
 800324a:	2801      	cmp	r0, #1
 800324c:	d1e7      	bne.n	800321e <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800324e:	2203      	movs	r2, #3
 8003250:	9200      	str	r2, [sp, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	4611      	mov	r1, r2
 8003256:	f000 faf9 	bl	800384c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800325a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800325c:	2800      	cmp	r0, #0
 800325e:	d0d0      	beq.n	8003202 <osSemaphoreNew+0x32>
 8003260:	2e00      	cmp	r6, #0
 8003262:	d0eb      	beq.n	800323c <osSemaphoreNew+0x6c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003264:	2300      	movs	r3, #0
 8003266:	461a      	mov	r2, r3
 8003268:	4619      	mov	r1, r3
 800326a:	f000 fb74 	bl	8003956 <xQueueGenericSend>
 800326e:	2801      	cmp	r0, #1
 8003270:	d0e4      	beq.n	800323c <osSemaphoreNew+0x6c>
            vSemaphoreDelete (hSemaphore);
 8003272:	4620      	mov	r0, r4
 8003274:	f000 ff66 	bl	8004144 <vQueueDelete>
      if (hSemaphore != NULL) {
 8003278:	e7c3      	b.n	8003202 <osSemaphoreNew+0x32>
 800327a:	bf00      	nop
 800327c:	20019f88 	.word	0x20019f88

08003280 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003280:	b513      	push	{r0, r1, r4, lr}
 8003282:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003284:	b918      	cbnz	r0, 800328e <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8003286:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800328a:	b002      	add	sp, #8
 800328c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800328e:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 8003292:	b15b      	cbz	r3, 80032ac <osSemaphoreAcquire+0x2c>
    if (timeout != 0U) {
 8003294:	2c00      	cmp	r4, #0
 8003296:	d1f6      	bne.n	8003286 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003298:	aa01      	add	r2, sp, #4
 800329a:	4621      	mov	r1, r4
      yield = pdFALSE;
 800329c:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800329e:	f000 feb0 	bl	8004002 <xQueueReceiveFromISR>
 80032a2:	2801      	cmp	r0, #1
 80032a4:	d016      	beq.n	80032d4 <osSemaphoreAcquire+0x54>
        stat = osErrorResource;
 80032a6:	f06f 0002 	mvn.w	r0, #2
 80032aa:	e7ee      	b.n	800328a <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ac:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80032b0:	b913      	cbnz	r3, 80032b8 <osSemaphoreAcquire+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032b2:	f3ef 8311 	mrs	r3, BASEPRI
 80032b6:	b11b      	cbz	r3, 80032c0 <osSemaphoreAcquire+0x40>
 80032b8:	4b0e      	ldr	r3, [pc, #56]	@ (80032f4 <osSemaphoreAcquire+0x74>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d0e9      	beq.n	8003294 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80032c0:	4621      	mov	r1, r4
 80032c2:	f000 fdb6 	bl	8003e32 <xQueueSemaphoreTake>
 80032c6:	2801      	cmp	r0, #1
 80032c8:	d006      	beq.n	80032d8 <osSemaphoreAcquire+0x58>
      if (timeout != 0U) {
 80032ca:	2c00      	cmp	r4, #0
 80032cc:	d0eb      	beq.n	80032a6 <osSemaphoreAcquire+0x26>
        stat = osErrorTimeout;
 80032ce:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80032d2:	e7da      	b.n	800328a <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 80032d4:	9b01      	ldr	r3, [sp, #4]
 80032d6:	b90b      	cbnz	r3, 80032dc <osSemaphoreAcquire+0x5c>
  stat = osOK;
 80032d8:	2000      	movs	r0, #0
 80032da:	e7d6      	b.n	800328a <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 80032dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80032e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	e7f2      	b.n	80032d8 <osSemaphoreAcquire+0x58>
 80032f2:	bf00      	nop
 80032f4:	20019f88 	.word	0x20019f88

080032f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80032f8:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80032fa:	b370      	cbz	r0, 800335a <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032fc:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8003300:	b15b      	cbz	r3, 800331a <osSemaphoreRelease+0x22>
    yield = pdFALSE;
 8003302:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003304:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8003306:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003308:	f000 fc96 	bl	8003c38 <xQueueGiveFromISR>
 800330c:	2801      	cmp	r0, #1
 800330e:	d016      	beq.n	800333e <osSemaphoreRelease+0x46>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8003310:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8003314:	b003      	add	sp, #12
 8003316:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331a:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800331e:	b913      	cbnz	r3, 8003326 <osSemaphoreRelease+0x2e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003320:	f3ef 8311 	mrs	r3, BASEPRI
 8003324:	b11b      	cbz	r3, 800332e <osSemaphoreRelease+0x36>
 8003326:	4b0e      	ldr	r3, [pc, #56]	@ (8003360 <osSemaphoreRelease+0x68>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d0e9      	beq.n	8003302 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800332e:	2300      	movs	r3, #0
 8003330:	461a      	mov	r2, r3
 8003332:	4619      	mov	r1, r3
 8003334:	f000 fb0f 	bl	8003956 <xQueueGenericSend>
 8003338:	2801      	cmp	r0, #1
 800333a:	d00c      	beq.n	8003356 <osSemaphoreRelease+0x5e>
 800333c:	e7e8      	b.n	8003310 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800333e:	9b01      	ldr	r3, [sp, #4]
 8003340:	b14b      	cbz	r3, 8003356 <osSemaphoreRelease+0x5e>
 8003342:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800334a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003356:	2000      	movs	r0, #0
 8003358:	e7dc      	b.n	8003314 <osSemaphoreRelease+0x1c>
    stat = osErrorParameter;
 800335a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800335e:	e7d9      	b.n	8003314 <osSemaphoreRelease+0x1c>
 8003360:	20019f88 	.word	0x20019f88

08003364 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 8003364:	4603      	mov	r3, r0
 8003366:	b190      	cbz	r0, 800338e <osSemaphoreGetCount+0x2a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003368:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 800336c:	b112      	cbz	r2, 8003374 <osSemaphoreGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800336e:	4618      	mov	r0, r3
 8003370:	f000 beaf 	b.w	80040d2 <uxQueueMessagesWaitingFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003374:	f3ef 8210 	mrs	r2, PRIMASK
  else if (IS_IRQ()) {
 8003378:	b912      	cbnz	r2, 8003380 <osSemaphoreGetCount+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800337a:	f3ef 8211 	mrs	r2, BASEPRI
 800337e:	b11a      	cbz	r2, 8003388 <osSemaphoreGetCount+0x24>
 8003380:	4a03      	ldr	r2, [pc, #12]	@ (8003390 <osSemaphoreGetCount+0x2c>)
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	2a02      	cmp	r2, #2
 8003386:	d0f2      	beq.n	800336e <osSemaphoreGetCount+0xa>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8003388:	4618      	mov	r0, r3
 800338a:	f000 be8d 	b.w	80040a8 <uxQueueMessagesWaiting>
  }

  return (count);
}
 800338e:	4770      	bx	lr
 8003390:	20019f88 	.word	0x20019f88

08003394 <osSemaphoreDelete>:

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8003394:	b510      	push	{r4, lr}
 8003396:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003398:	f3ef 8305 	mrs	r3, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800339c:	b113      	cbz	r3, 80033a4 <osSemaphoreDelete+0x10>
    stat = osErrorISR;
 800339e:	f06f 0005 	mvn.w	r0, #5
#else
  stat = osError;
#endif

  return (stat);
}
 80033a2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80033a8:	b913      	cbnz	r3, 80033b0 <osSemaphoreDelete+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033aa:	f3ef 8311 	mrs	r3, BASEPRI
 80033ae:	b11b      	cbz	r3, 80033b8 <osSemaphoreDelete+0x24>
 80033b0:	4b07      	ldr	r3, [pc, #28]	@ (80033d0 <osSemaphoreDelete+0x3c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d0f2      	beq.n	800339e <osSemaphoreDelete+0xa>
  else if (hSemaphore == NULL) {
 80033b8:	b13c      	cbz	r4, 80033ca <osSemaphoreDelete+0x36>
    vQueueUnregisterQueue (hSemaphore);
 80033ba:	4620      	mov	r0, r4
 80033bc:	f000 feaa 	bl	8004114 <vQueueUnregisterQueue>
    vSemaphoreDelete (hSemaphore);
 80033c0:	4620      	mov	r0, r4
 80033c2:	f000 febf 	bl	8004144 <vQueueDelete>
    stat = osOK;
 80033c6:	2000      	movs	r0, #0
 80033c8:	e7eb      	b.n	80033a2 <osSemaphoreDelete+0xe>
    stat = osErrorParameter;
 80033ca:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80033ce:	e7e8      	b.n	80033a2 <osSemaphoreDelete+0xe>
 80033d0:	20019f88 	.word	0x20019f88

080033d4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80033d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033d6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033d8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80033dc:	b11b      	cbz	r3, 80033e6 <osMessageQueueNew+0x12>
  hQueue = NULL;
 80033de:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80033e0:	4628      	mov	r0, r5
 80033e2:	b002      	add	sp, #8
 80033e4:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e6:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80033ea:	b913      	cbnz	r3, 80033f2 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033ec:	f3ef 8311 	mrs	r3, BASEPRI
 80033f0:	b11b      	cbz	r3, 80033fa <osMessageQueueNew+0x26>
 80033f2:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <osMessageQueueNew+0x88>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d0f1      	beq.n	80033de <osMessageQueueNew+0xa>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d0ef      	beq.n	80033de <osMessageQueueNew+0xa>
 80033fe:	2900      	cmp	r1, #0
 8003400:	d0ed      	beq.n	80033de <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8003402:	b1ec      	cbz	r4, 8003440 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003404:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8003408:	b193      	cbz	r3, 8003430 <osMessageQueueNew+0x5c>
 800340a:	2a4f      	cmp	r2, #79	@ 0x4f
 800340c:	d9e7      	bls.n	80033de <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800340e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003410:	2a00      	cmp	r2, #0
 8003412:	d0e4      	beq.n	80033de <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003414:	fb01 f500 	mul.w	r5, r1, r0
 8003418:	6966      	ldr	r6, [r4, #20]
 800341a:	42ae      	cmp	r6, r5
 800341c:	d3df      	bcc.n	80033de <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800341e:	2500      	movs	r5, #0
 8003420:	9500      	str	r5, [sp, #0]
 8003422:	f000 fa13 	bl	800384c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8003426:	4605      	mov	r5, r0
 8003428:	2800      	cmp	r0, #0
 800342a:	d0d8      	beq.n	80033de <osMessageQueueNew+0xa>
        name = attr->name;
 800342c:	6824      	ldr	r4, [r4, #0]
 800342e:	e00f      	b.n	8003450 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003430:	2a00      	cmp	r2, #0
 8003432:	d1d4      	bne.n	80033de <osMessageQueueNew+0xa>
 8003434:	6923      	ldr	r3, [r4, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1d1      	bne.n	80033de <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800343a:	6963      	ldr	r3, [r4, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ce      	bne.n	80033de <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003440:	2200      	movs	r2, #0
 8003442:	f000 fa17 	bl	8003874 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8003446:	4605      	mov	r5, r0
 8003448:	2800      	cmp	r0, #0
 800344a:	d0c8      	beq.n	80033de <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800344c:	2c00      	cmp	r4, #0
 800344e:	d1ed      	bne.n	800342c <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 8003450:	4621      	mov	r1, r4
 8003452:	4628      	mov	r0, r5
 8003454:	f000 fe4c 	bl	80040f0 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8003458:	e7c2      	b.n	80033e0 <osMessageQueueNew+0xc>
 800345a:	bf00      	nop
 800345c:	20019f88 	.word	0x20019f88

08003460 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003460:	b513      	push	{r0, r1, r4, lr}
 8003462:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003464:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003468:	b123      	cbz	r3, 8003474 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800346a:	b9d8      	cbnz	r0, 80034a4 <osMessageQueuePut+0x44>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 800346c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8003470:	b002      	add	sp, #8
 8003472:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003474:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8003478:	b913      	cbnz	r3, 8003480 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800347a:	f3ef 8311 	mrs	r3, BASEPRI
 800347e:	b11b      	cbz	r3, 8003488 <osMessageQueuePut+0x28>
 8003480:	4b17      	ldr	r3, [pc, #92]	@ (80034e0 <osMessageQueuePut+0x80>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d0f0      	beq.n	800346a <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003488:	2800      	cmp	r0, #0
 800348a:	d0ef      	beq.n	800346c <osMessageQueuePut+0xc>
 800348c:	2900      	cmp	r1, #0
 800348e:	d0ed      	beq.n	800346c <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003490:	2300      	movs	r3, #0
 8003492:	4622      	mov	r2, r4
 8003494:	f000 fa5f 	bl	8003956 <xQueueGenericSend>
 8003498:	2801      	cmp	r0, #1
 800349a:	d013      	beq.n	80034c4 <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 800349c:	b16c      	cbz	r4, 80034ba <osMessageQueuePut+0x5a>
          stat = osErrorTimeout;
 800349e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80034a2:	e7e5      	b.n	8003470 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034a4:	2900      	cmp	r1, #0
 80034a6:	d0e1      	beq.n	800346c <osMessageQueuePut+0xc>
 80034a8:	2c00      	cmp	r4, #0
 80034aa:	d1df      	bne.n	800346c <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80034ac:	4623      	mov	r3, r4
 80034ae:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80034b0:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80034b2:	f000 fb5d 	bl	8003b70 <xQueueGenericSendFromISR>
 80034b6:	2801      	cmp	r0, #1
 80034b8:	d002      	beq.n	80034c0 <osMessageQueuePut+0x60>
        stat = osErrorResource;
 80034ba:	f06f 0002 	mvn.w	r0, #2
 80034be:	e7d7      	b.n	8003470 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80034c0:	9b01      	ldr	r3, [sp, #4]
 80034c2:	b90b      	cbnz	r3, 80034c8 <osMessageQueuePut+0x68>
  stat = osOK;
 80034c4:	2000      	movs	r0, #0
 80034c6:	e7d3      	b.n	8003470 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80034c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80034cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	e7f2      	b.n	80034c4 <osMessageQueuePut+0x64>
 80034de:	bf00      	nop
 80034e0:	20019f88 	.word	0x20019f88

080034e4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80034e4:	b513      	push	{r0, r1, r4, lr}
 80034e6:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034e8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80034ec:	b123      	cbz	r3, 80034f8 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034ee:	b9d0      	cbnz	r0, 8003526 <osMessageQueueGet+0x42>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 80034f0:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80034f4:	b002      	add	sp, #8
 80034f6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f8:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80034fc:	b913      	cbnz	r3, 8003504 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003502:	b11b      	cbz	r3, 800350c <osMessageQueueGet+0x28>
 8003504:	4b16      	ldr	r3, [pc, #88]	@ (8003560 <osMessageQueueGet+0x7c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d0f0      	beq.n	80034ee <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800350c:	2800      	cmp	r0, #0
 800350e:	d0ef      	beq.n	80034f0 <osMessageQueueGet+0xc>
 8003510:	2900      	cmp	r1, #0
 8003512:	d0ed      	beq.n	80034f0 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003514:	4622      	mov	r2, r4
 8003516:	f000 fbe8 	bl	8003cea <xQueueReceive>
 800351a:	2801      	cmp	r0, #1
 800351c:	d012      	beq.n	8003544 <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 800351e:	b164      	cbz	r4, 800353a <osMessageQueueGet+0x56>
          stat = osErrorTimeout;
 8003520:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8003524:	e7e6      	b.n	80034f4 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003526:	2900      	cmp	r1, #0
 8003528:	d0e2      	beq.n	80034f0 <osMessageQueueGet+0xc>
 800352a:	2c00      	cmp	r4, #0
 800352c:	d1e0      	bne.n	80034f0 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800352e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8003530:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003532:	f000 fd66 	bl	8004002 <xQueueReceiveFromISR>
 8003536:	2801      	cmp	r0, #1
 8003538:	d002      	beq.n	8003540 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800353a:	f06f 0002 	mvn.w	r0, #2
 800353e:	e7d9      	b.n	80034f4 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8003540:	9b01      	ldr	r3, [sp, #4]
 8003542:	b90b      	cbnz	r3, 8003548 <osMessageQueueGet+0x64>
  stat = osOK;
 8003544:	2000      	movs	r0, #0
 8003546:	e7d5      	b.n	80034f4 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8003548:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800354c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003550:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	e7f2      	b.n	8003544 <osMessageQueueGet+0x60>
 800355e:	bf00      	nop
 8003560:	20019f88 	.word	0x20019f88

08003564 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003564:	f7ff befe 	b.w	8003364 <osSemaphoreGetCount>

08003568 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8003568:	f7ff bf14 	b.w	8003394 <osSemaphoreDelete>

0800356c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800356c:	4b03      	ldr	r3, [pc, #12]	@ (800357c <vApplicationGetIdleTaskMemory+0x10>)
 800356e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <vApplicationGetIdleTaskMemory+0x14>)
 8003572:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003574:	2380      	movs	r3, #128	@ 0x80
 8003576:	6013      	str	r3, [r2, #0]
}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20019ee0 	.word	0x20019ee0
 8003580:	20019ce0 	.word	0x20019ce0

08003584 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003584:	4b03      	ldr	r3, [pc, #12]	@ (8003594 <vApplicationGetTimerTaskMemory+0x10>)
 8003586:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003588:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <vApplicationGetTimerTaskMemory+0x14>)
 800358a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800358c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003590:	6013      	str	r3, [r2, #0]
}
 8003592:	4770      	bx	lr
 8003594:	20019c38 	.word	0x20019c38
 8003598:	20019838 	.word	0x20019838

0800359c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800359c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035a0:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a6:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a8:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035b0:	4770      	bx	lr

080035b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035b6:	4770      	bx	lr

080035b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80035b8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035ba:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80035bc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035be:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035c0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035c2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80035c4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80035c6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80035c8:	3301      	adds	r3, #1
 80035ca:	6003      	str	r3, [r0, #0]
}
 80035cc:	4770      	bx	lr

080035ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035ce:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035d0:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035d2:	1c63      	adds	r3, r4, #1
 80035d4:	d10a      	bne.n	80035ec <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035d6:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035dc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035de:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80035e0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80035e2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80035e4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80035e6:	3301      	adds	r3, #1
 80035e8:	6003      	str	r3, [r0, #0]
}
 80035ea:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035ec:	f100 0208 	add.w	r2, r0, #8
 80035f0:	4613      	mov	r3, r2
 80035f2:	6852      	ldr	r2, [r2, #4]
 80035f4:	6815      	ldr	r5, [r2, #0]
 80035f6:	42a5      	cmp	r5, r4
 80035f8:	d9fa      	bls.n	80035f0 <vListInsert+0x22>
 80035fa:	e7ed      	b.n	80035d8 <vListInsert+0xa>

080035fc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035fc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035fe:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8003602:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003604:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800360a:	bf08      	it	eq
 800360c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800360e:	2200      	movs	r2, #0
 8003610:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	3a01      	subs	r2, #1
 8003616:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003618:	6818      	ldr	r0, [r3, #0]
}
 800361a:	4770      	bx	lr

0800361c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800361c:	b510      	push	{r4, lr}
 800361e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003620:	f001 fdb0 	bl	8005184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003624:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003626:	f001 fdd1 	bl	80051cc <vPortExitCritical>

	return xReturn;
}
 800362a:	fab4 f084 	clz	r0, r4
 800362e:	0940      	lsrs	r0, r0, #5
 8003630:	bd10      	pop	{r4, pc}

08003632 <prvCopyDataToQueue>:
{
 8003632:	b570      	push	{r4, r5, r6, lr}
 8003634:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003636:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8003638:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800363a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800363c:	b942      	cbnz	r2, 8003650 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800363e:	6806      	ldr	r6, [r0, #0]
 8003640:	b99e      	cbnz	r6, 800366a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003642:	6880      	ldr	r0, [r0, #8]
 8003644:	f001 fa9e 	bl	8004b84 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003648:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800364a:	3501      	adds	r5, #1
 800364c:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800364e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003650:	b96e      	cbnz	r6, 800366e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003652:	6840      	ldr	r0, [r0, #4]
 8003654:	f00b f885 	bl	800e762 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003658:	6863      	ldr	r3, [r4, #4]
 800365a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800365c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800365e:	68a2      	ldr	r2, [r4, #8]
 8003660:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003662:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003664:	bf24      	itt	cs
 8003666:	6823      	ldrcs	r3, [r4, #0]
 8003668:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800366a:	2000      	movs	r0, #0
 800366c:	e7ed      	b.n	800364a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800366e:	68c0      	ldr	r0, [r0, #12]
 8003670:	f00b f877 	bl	800e762 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003674:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003676:	68e3      	ldr	r3, [r4, #12]
 8003678:	4251      	negs	r1, r2
 800367a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800367c:	6822      	ldr	r2, [r4, #0]
 800367e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003680:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003682:	bf3e      	ittt	cc
 8003684:	68a3      	ldrcc	r3, [r4, #8]
 8003686:	185b      	addcc	r3, r3, r1
 8003688:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800368a:	2e02      	cmp	r6, #2
 800368c:	d1ed      	bne.n	800366a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800368e:	b10d      	cbz	r5, 8003694 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8003690:	3d01      	subs	r5, #1
 8003692:	e7ea      	b.n	800366a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8003694:	4628      	mov	r0, r5
 8003696:	e7d8      	b.n	800364a <prvCopyDataToQueue+0x18>

08003698 <prvCopyDataFromQueue>:
{
 8003698:	4603      	mov	r3, r0
 800369a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800369c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800369e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036a0:	b162      	cbz	r2, 80036bc <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036a2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036a4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036a6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036a8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036aa:	60dc      	str	r4, [r3, #12]
}
 80036ac:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80036b0:	bf24      	itt	cs
 80036b2:	6819      	ldrcs	r1, [r3, #0]
 80036b4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036b6:	68d9      	ldr	r1, [r3, #12]
 80036b8:	f00b b853 	b.w	800e762 <memcpy>
}
 80036bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <prvUnlockQueue>:
{
 80036c2:	b570      	push	{r4, r5, r6, lr}
 80036c4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80036c6:	f001 fd5d 	bl	8005184 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80036ca:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036ce:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80036d2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036d4:	2d00      	cmp	r5, #0
 80036d6:	dc14      	bgt.n	8003702 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80036d8:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036da:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80036de:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80036e2:	f001 fd73 	bl	80051cc <vPortExitCritical>
	taskENTER_CRITICAL();
 80036e6:	f001 fd4d 	bl	8005184 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80036ea:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 80036ee:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036f0:	2d00      	cmp	r5, #0
 80036f2:	dc12      	bgt.n	800371a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80036f4:	23ff      	movs	r3, #255	@ 0xff
 80036f6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80036fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80036fe:	f001 bd65 	b.w	80051cc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003702:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0e7      	beq.n	80036d8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003708:	4630      	mov	r0, r6
 800370a:	f001 f951 	bl	80049b0 <xTaskRemoveFromEventList>
 800370e:	b108      	cbz	r0, 8003714 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003710:	f001 f9de 	bl	8004ad0 <vTaskMissedYield>
			--cTxLock;
 8003714:	3d01      	subs	r5, #1
 8003716:	b26d      	sxtb	r5, r5
 8003718:	e7dc      	b.n	80036d4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800371a:	6923      	ldr	r3, [r4, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0e9      	beq.n	80036f4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003720:	4630      	mov	r0, r6
 8003722:	f001 f945 	bl	80049b0 <xTaskRemoveFromEventList>
 8003726:	b108      	cbz	r0, 800372c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003728:	f001 f9d2 	bl	8004ad0 <vTaskMissedYield>
				--cRxLock;
 800372c:	3d01      	subs	r5, #1
 800372e:	b26d      	sxtb	r5, r5
 8003730:	e7de      	b.n	80036f0 <prvUnlockQueue+0x2e>

08003732 <xQueueGenericReset>:
{
 8003732:	b538      	push	{r3, r4, r5, lr}
 8003734:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003736:	4604      	mov	r4, r0
 8003738:	b950      	cbnz	r0, 8003750 <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800373e:	b672      	cpsid	i
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	b662      	cpsie	i
 800374e:	e7fe      	b.n	800374e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8003750:	f001 fd18 	bl	8005184 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003754:	6822      	ldr	r2, [r4, #0]
 8003756:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800375a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800375c:	434b      	muls	r3, r1
 800375e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003760:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003762:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003764:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003766:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8003768:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800376a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800376c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800376e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003772:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8003776:	b9a5      	cbnz	r5, 80037a2 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003778:	6923      	ldr	r3, [r4, #16]
 800377a:	b173      	cbz	r3, 800379a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800377c:	f104 0010 	add.w	r0, r4, #16
 8003780:	f001 f916 	bl	80049b0 <xTaskRemoveFromEventList>
 8003784:	b148      	cbz	r0, 800379a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8003786:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800378a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800378e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800379a:	f001 fd17 	bl	80051cc <vPortExitCritical>
}
 800379e:	2001      	movs	r0, #1
 80037a0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037a2:	f104 0010 	add.w	r0, r4, #16
 80037a6:	f7ff fef9 	bl	800359c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037aa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80037ae:	f7ff fef5 	bl	800359c <vListInitialise>
 80037b2:	e7f2      	b.n	800379a <xQueueGenericReset+0x68>

080037b4 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 80037b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037b6:	460d      	mov	r5, r1
		configASSERT( pxStaticQueue != NULL );
 80037b8:	461c      	mov	r4, r3
 80037ba:	b953      	cbnz	r3, 80037d2 <xQueueGenericCreateStatic.part.0+0x1e>
 80037bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c0:	b672      	cpsid	i
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	b662      	cpsie	i
 80037d0:	e7fe      	b.n	80037d0 <xQueueGenericCreateStatic.part.0+0x1c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037d2:	b15a      	cbz	r2, 80037ec <xQueueGenericCreateStatic.part.0+0x38>
 80037d4:	b9b1      	cbnz	r1, 8003804 <xQueueGenericCreateStatic.part.0+0x50>
 80037d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037da:	b672      	cpsid	i
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	b662      	cpsie	i
 80037ea:	e7fe      	b.n	80037ea <xQueueGenericCreateStatic.part.0+0x36>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037ec:	b151      	cbz	r1, 8003804 <xQueueGenericCreateStatic.part.0+0x50>
 80037ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f2:	b672      	cpsid	i
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	b662      	cpsie	i
 8003802:	e7fe      	b.n	8003802 <xQueueGenericCreateStatic.part.0+0x4e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003804:	2350      	movs	r3, #80	@ 0x50
 8003806:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003808:	9b01      	ldr	r3, [sp, #4]
 800380a:	2b50      	cmp	r3, #80	@ 0x50
 800380c:	d00a      	beq.n	8003824 <xQueueGenericCreateStatic.part.0+0x70>
 800380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003812:	b672      	cpsid	i
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	b662      	cpsie	i
 8003822:	e7fe      	b.n	8003822 <xQueueGenericCreateStatic.part.0+0x6e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003824:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003826:	2d00      	cmp	r5, #0
 8003828:	bf08      	it	eq
 800382a:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800382c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800382e:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003832:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8003834:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003838:	4620      	mov	r0, r4
 800383a:	f7ff ff7a 	bl	8003732 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800383e:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 8003842:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8003844:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8003848:	b003      	add	sp, #12
 800384a:	bd30      	pop	{r4, r5, pc}

0800384c <xQueueGenericCreateStatic>:
	{
 800384c:	b410      	push	{r4}
 800384e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003852:	b950      	cbnz	r0, 800386a <xQueueGenericCreateStatic+0x1e>
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	b672      	cpsid	i
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	b662      	cpsie	i
 8003868:	e7fe      	b.n	8003868 <xQueueGenericCreateStatic+0x1c>
 800386a:	9401      	str	r4, [sp, #4]
	}
 800386c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003870:	f7ff bfa0 	b.w	80037b4 <xQueueGenericCreateStatic.part.0>

08003874 <xQueueGenericCreate>:
	{
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	460d      	mov	r5, r1
 8003878:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800387a:	4606      	mov	r6, r0
 800387c:	b950      	cbnz	r0, 8003894 <xQueueGenericCreate+0x20>
 800387e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003882:	b672      	cpsid	i
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	b662      	cpsie	i
 8003892:	e7fe      	b.n	8003892 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003894:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003896:	3050      	adds	r0, #80	@ 0x50
 8003898:	f001 fdc8 	bl	800542c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800389c:	4604      	mov	r4, r0
 800389e:	b170      	cbz	r0, 80038be <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80038a6:	b165      	cbz	r5, 80038c2 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038a8:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038ac:	2101      	movs	r1, #1
 80038ae:	4620      	mov	r0, r4
 80038b0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80038b2:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038b6:	f7ff ff3c 	bl	8003732 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80038ba:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80038be:	4620      	mov	r0, r4
 80038c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038c2:	4603      	mov	r3, r0
 80038c4:	e7f2      	b.n	80038ac <xQueueGenericCreate+0x38>

080038c6 <xQueueCreateCountingSemaphoreStatic>:
	{
 80038c6:	b513      	push	{r0, r1, r4, lr}
 80038c8:	4613      	mov	r3, r2
 80038ca:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80038cc:	b950      	cbnz	r0, 80038e4 <xQueueCreateCountingSemaphoreStatic+0x1e>
 80038ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d2:	b672      	cpsid	i
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	b662      	cpsie	i
 80038e2:	e7fe      	b.n	80038e2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 80038e4:	4288      	cmp	r0, r1
 80038e6:	d20a      	bcs.n	80038fe <xQueueCreateCountingSemaphoreStatic+0x38>
 80038e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ec:	b672      	cpsid	i
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	b662      	cpsie	i
 80038fc:	e7fe      	b.n	80038fc <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80038fe:	2202      	movs	r2, #2
 8003900:	9200      	str	r2, [sp, #0]
 8003902:	2200      	movs	r2, #0
 8003904:	4611      	mov	r1, r2
 8003906:	f7ff ffa1 	bl	800384c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800390a:	b100      	cbz	r0, 800390e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800390c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800390e:	b002      	add	sp, #8
 8003910:	bd10      	pop	{r4, pc}

08003912 <xQueueCreateCountingSemaphore>:
	{
 8003912:	b510      	push	{r4, lr}
 8003914:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8003916:	b950      	cbnz	r0, 800392e <xQueueCreateCountingSemaphore+0x1c>
 8003918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391c:	b672      	cpsid	i
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	b662      	cpsie	i
 800392c:	e7fe      	b.n	800392c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800392e:	4288      	cmp	r0, r1
 8003930:	d20a      	bcs.n	8003948 <xQueueCreateCountingSemaphore+0x36>
 8003932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003936:	b672      	cpsid	i
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	b662      	cpsie	i
 8003946:	e7fe      	b.n	8003946 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003948:	2202      	movs	r2, #2
 800394a:	2100      	movs	r1, #0
 800394c:	f7ff ff92 	bl	8003874 <xQueueGenericCreate>
		if( xHandle != NULL )
 8003950:	b100      	cbz	r0, 8003954 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003952:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8003954:	bd10      	pop	{r4, pc}

08003956 <xQueueGenericSend>:
{
 8003956:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800395a:	460f      	mov	r7, r1
 800395c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800395e:	4604      	mov	r4, r0
{
 8003960:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003962:	b950      	cbnz	r0, 800397a <xQueueGenericSend+0x24>
 8003964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003968:	b672      	cpsid	i
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	b662      	cpsie	i
 8003978:	e7fe      	b.n	8003978 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800397a:	b961      	cbnz	r1, 8003996 <xQueueGenericSend+0x40>
 800397c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800397e:	b153      	cbz	r3, 8003996 <xQueueGenericSend+0x40>
 8003980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003984:	b672      	cpsid	i
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	b662      	cpsie	i
 8003994:	e7fe      	b.n	8003994 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003996:	2e02      	cmp	r6, #2
 8003998:	d10d      	bne.n	80039b6 <xQueueGenericSend+0x60>
 800399a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d00a      	beq.n	80039b6 <xQueueGenericSend+0x60>
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	b672      	cpsid	i
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	b662      	cpsie	i
 80039b4:	e7fe      	b.n	80039b4 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039b6:	f001 f897 	bl	8004ae8 <xTaskGetSchedulerState>
 80039ba:	4605      	mov	r5, r0
 80039bc:	b330      	cbz	r0, 8003a0c <xQueueGenericSend+0xb6>
 80039be:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80039c0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80039c4:	f001 fbde 	bl	8005184 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039c8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80039ca:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d301      	bcc.n	80039d4 <xQueueGenericSend+0x7e>
 80039d0:	2e02      	cmp	r6, #2
 80039d2:	d129      	bne.n	8003a28 <xQueueGenericSend+0xd2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039d4:	4632      	mov	r2, r6
 80039d6:	4639      	mov	r1, r7
 80039d8:	4620      	mov	r0, r4
 80039da:	f7ff fe2a 	bl	8003632 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80039e0:	b11b      	cbz	r3, 80039ea <xQueueGenericSend+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039e2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80039e6:	f000 ffe3 	bl	80049b0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80039ea:	b148      	cbz	r0, 8003a00 <xQueueGenericSend+0xaa>
						queueYIELD_IF_USING_PREEMPTION();
 80039ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80039f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003a00:	f001 fbe4 	bl	80051cc <vPortExitCritical>
				return pdPASS;
 8003a04:	2001      	movs	r0, #1
}
 8003a06:	b004      	add	sp, #16
 8003a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a0c:	9b01      	ldr	r3, [sp, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0d6      	beq.n	80039c0 <xQueueGenericSend+0x6a>
 8003a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a16:	b672      	cpsid	i
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	b662      	cpsie	i
 8003a26:	e7fe      	b.n	8003a26 <xQueueGenericSend+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a28:	9b01      	ldr	r3, [sp, #4]
 8003a2a:	b91b      	cbnz	r3, 8003a34 <xQueueGenericSend+0xde>
					taskEXIT_CRITICAL();
 8003a2c:	f001 fbce 	bl	80051cc <vPortExitCritical>
					return errQUEUE_FULL;
 8003a30:	2000      	movs	r0, #0
 8003a32:	e7e8      	b.n	8003a06 <xQueueGenericSend+0xb0>
				else if( xEntryTimeSet == pdFALSE )
 8003a34:	b915      	cbnz	r5, 8003a3c <xQueueGenericSend+0xe6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a36:	a802      	add	r0, sp, #8
 8003a38:	f000 fffe 	bl	8004a38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003a3c:	f001 fbc6 	bl	80051cc <vPortExitCritical>
		vTaskSuspendAll();
 8003a40:	f000 fdee 	bl	8004620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a44:	f001 fb9e 	bl	8005184 <vPortEnterCritical>
 8003a48:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003a4c:	2bff      	cmp	r3, #255	@ 0xff
 8003a4e:	d101      	bne.n	8003a54 <xQueueGenericSend+0xfe>
 8003a50:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8003a54:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003a58:	2bff      	cmp	r3, #255	@ 0xff
 8003a5a:	d101      	bne.n	8003a60 <xQueueGenericSend+0x10a>
 8003a5c:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8003a60:	f001 fbb4 	bl	80051cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a64:	a901      	add	r1, sp, #4
 8003a66:	a802      	add	r0, sp, #8
 8003a68:	f000 fff2 	bl	8004a50 <xTaskCheckForTimeOut>
 8003a6c:	bb38      	cbnz	r0, 8003abe <xQueueGenericSend+0x168>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a6e:	f001 fb89 	bl	8005184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a72:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003a74:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d10e      	bne.n	8003a98 <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003a7a:	f001 fba7 	bl	80051cc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a7e:	9901      	ldr	r1, [sp, #4]
 8003a80:	f104 0010 	add.w	r0, r4, #16
 8003a84:	f000 ff58 	bl	8004938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff fe1a 	bl	80036c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a8e:	f000 fe75 	bl	800477c <xTaskResumeAll>
 8003a92:	b148      	cbz	r0, 8003aa8 <xQueueGenericSend+0x152>
 8003a94:	2501      	movs	r5, #1
 8003a96:	e795      	b.n	80039c4 <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 8003a98:	f001 fb98 	bl	80051cc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7ff fe10 	bl	80036c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aa2:	f000 fe6b 	bl	800477c <xTaskResumeAll>
 8003aa6:	e7f5      	b.n	8003a94 <xQueueGenericSend+0x13e>
					portYIELD_WITHIN_API();
 8003aa8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ab0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	e7ea      	b.n	8003a94 <xQueueGenericSend+0x13e>
			prvUnlockQueue( pxQueue );
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f7ff fdff 	bl	80036c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ac4:	f000 fe5a 	bl	800477c <xTaskResumeAll>
			return errQUEUE_FULL;
 8003ac8:	e7b2      	b.n	8003a30 <xQueueGenericSend+0xda>

08003aca <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003aca:	2200      	movs	r2, #0
	{
 8003acc:	460b      	mov	r3, r1
 8003ace:	b513      	push	{r0, r1, r4, lr}
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	9000      	str	r0, [sp, #0]
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f7ff fe6d 	bl	80037b4 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 8003ada:	4604      	mov	r4, r0
 8003adc:	b138      	cbz	r0, 8003aee <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ade:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ae4:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003ae6:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003ae8:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003aea:	f7ff ff34 	bl	8003956 <xQueueGenericSend>
	}
 8003aee:	4620      	mov	r0, r4
 8003af0:	b002      	add	sp, #8
 8003af2:	bd10      	pop	{r4, pc}

08003af4 <xQueueGiveMutexRecursive>:
	{
 8003af4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8003af6:	4604      	mov	r4, r0
 8003af8:	b950      	cbnz	r0, 8003b10 <xQueueGiveMutexRecursive+0x1c>
 8003afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afe:	b672      	cpsid	i
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	b662      	cpsie	i
 8003b0e:	e7fe      	b.n	8003b0e <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003b10:	6885      	ldr	r5, [r0, #8]
 8003b12:	f000 ffe3 	bl	8004adc <xTaskGetCurrentTaskHandle>
 8003b16:	4285      	cmp	r5, r0
 8003b18:	d10b      	bne.n	8003b32 <xQueueGiveMutexRecursive+0x3e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003b20:	b10b      	cbz	r3, 8003b26 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8003b22:	2001      	movs	r0, #1
	}
 8003b24:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003b26:	461a      	mov	r2, r3
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7ff ff13 	bl	8003956 <xQueueGenericSend>
 8003b30:	e7f7      	b.n	8003b22 <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdFAIL;
 8003b32:	2000      	movs	r0, #0
		return xReturn;
 8003b34:	e7f6      	b.n	8003b24 <xQueueGiveMutexRecursive+0x30>

08003b36 <xQueueCreateMutex>:
	{
 8003b36:	b570      	push	{r4, r5, r6, lr}
 8003b38:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b3a:	2050      	movs	r0, #80	@ 0x50
 8003b3c:	f001 fc76 	bl	800542c <pvPortMalloc>
 8003b40:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 8003b42:	b198      	cbz	r0, 8003b6c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b44:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8003b46:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b48:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b4a:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8003b4e:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b52:	f7ff fdee 	bl	8003732 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b56:	462b      	mov	r3, r5
 8003b58:	462a      	mov	r2, r5
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8003b5e:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b62:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003b64:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003b66:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b68:	f7ff fef5 	bl	8003956 <xQueueGenericSend>
	}
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}

08003b70 <xQueueGenericSendFromISR>:
{
 8003b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b74:	4689      	mov	r9, r1
 8003b76:	4617      	mov	r7, r2
 8003b78:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	b950      	cbnz	r0, 8003b94 <xQueueGenericSendFromISR+0x24>
 8003b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b82:	b672      	cpsid	i
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	b662      	cpsie	i
 8003b92:	e7fe      	b.n	8003b92 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b94:	b961      	cbnz	r1, 8003bb0 <xQueueGenericSendFromISR+0x40>
 8003b96:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003b98:	b153      	cbz	r3, 8003bb0 <xQueueGenericSendFromISR+0x40>
 8003b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9e:	b672      	cpsid	i
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	b662      	cpsie	i
 8003bae:	e7fe      	b.n	8003bae <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bb0:	2e02      	cmp	r6, #2
 8003bb2:	d10d      	bne.n	8003bd0 <xQueueGenericSendFromISR+0x60>
 8003bb4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d00a      	beq.n	8003bd0 <xQueueGenericSendFromISR+0x60>
 8003bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbe:	b672      	cpsid	i
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	b662      	cpsie	i
 8003bce:	e7fe      	b.n	8003bce <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bd0:	f001 fbd4 	bl	800537c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bd4:	f3ef 8811 	mrs	r8, BASEPRI
 8003bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bdc:	b672      	cpsid	i
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003bee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d301      	bcc.n	8003bf8 <xQueueGenericSendFromISR+0x88>
 8003bf4:	2e02      	cmp	r6, #2
 8003bf6:	d11d      	bne.n	8003c34 <xQueueGenericSendFromISR+0xc4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bf8:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bfc:	4632      	mov	r2, r6
 8003bfe:	4649      	mov	r1, r9
 8003c00:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c02:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c04:	f7ff fd15 	bl	8003632 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003c08:	1c6b      	adds	r3, r5, #1
 8003c0a:	d10e      	bne.n	8003c2a <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003c0e:	b13b      	cbz	r3, 8003c20 <xQueueGenericSendFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c10:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003c14:	f000 fecc 	bl	80049b0 <xTaskRemoveFromEventList>
 8003c18:	b110      	cbz	r0, 8003c20 <xQueueGenericSendFromISR+0xb0>
							if( pxHigherPriorityTaskWoken != NULL )
 8003c1a:	b10f      	cbz	r7, 8003c20 <xQueueGenericSendFromISR+0xb0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8003c20:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c22:	f388 8811 	msr	BASEPRI, r8
}
 8003c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c2a:	3501      	adds	r5, #1
 8003c2c:	b26d      	sxtb	r5, r5
 8003c2e:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8003c32:	e7f5      	b.n	8003c20 <xQueueGenericSendFromISR+0xb0>
			xReturn = errQUEUE_FULL;
 8003c34:	2000      	movs	r0, #0
 8003c36:	e7f4      	b.n	8003c22 <xQueueGenericSendFromISR+0xb2>

08003c38 <xQueueGiveFromISR>:
{
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	b950      	cbnz	r0, 8003c56 <xQueueGiveFromISR+0x1e>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c44:	b672      	cpsid	i
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	b662      	cpsie	i
 8003c54:	e7fe      	b.n	8003c54 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c56:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003c58:	b153      	cbz	r3, 8003c70 <xQueueGiveFromISR+0x38>
 8003c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5e:	b672      	cpsid	i
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	b662      	cpsie	i
 8003c6e:	e7fe      	b.n	8003c6e <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003c70:	6803      	ldr	r3, [r0, #0]
 8003c72:	b963      	cbnz	r3, 8003c8e <xQueueGiveFromISR+0x56>
 8003c74:	6883      	ldr	r3, [r0, #8]
 8003c76:	b153      	cbz	r3, 8003c8e <xQueueGiveFromISR+0x56>
 8003c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7c:	b672      	cpsid	i
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	b662      	cpsie	i
 8003c8c:	e7fe      	b.n	8003c8c <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c8e:	f001 fb75 	bl	800537c <vPortValidateInterruptPriority>
	__asm volatile
 8003c92:	f3ef 8611 	mrs	r6, BASEPRI
 8003c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9a:	b672      	cpsid	i
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003caa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003cac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d919      	bls.n	8003ce6 <xQueueGiveFromISR+0xae>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cb2:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cb6:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8003cb8:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cba:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cbc:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8003cbe:	d10d      	bne.n	8003cdc <xQueueGiveFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cc0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003cc2:	b13b      	cbz	r3, 8003cd4 <xQueueGiveFromISR+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cc4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003cc8:	f000 fe72 	bl	80049b0 <xTaskRemoveFromEventList>
 8003ccc:	b110      	cbz	r0, 8003cd4 <xQueueGiveFromISR+0x9c>
							if( pxHigherPriorityTaskWoken != NULL )
 8003cce:	b10d      	cbz	r5, 8003cd4 <xQueueGiveFromISR+0x9c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8003cd4:	2001      	movs	r0, #1
	__asm volatile
 8003cd6:	f386 8811 	msr	BASEPRI, r6
}
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cdc:	3301      	adds	r3, #1
 8003cde:	b25b      	sxtb	r3, r3
 8003ce0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003ce4:	e7f6      	b.n	8003cd4 <xQueueGiveFromISR+0x9c>
			xReturn = errQUEUE_FULL;
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e7f5      	b.n	8003cd6 <xQueueGiveFromISR+0x9e>

08003cea <xQueueReceive>:
{
 8003cea:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003cee:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 8003cf0:	4604      	mov	r4, r0
{
 8003cf2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003cf4:	b950      	cbnz	r0, 8003d0c <xQueueReceive+0x22>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfa:	b672      	cpsid	i
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	b662      	cpsie	i
 8003d0a:	e7fe      	b.n	8003d0a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d0c:	b961      	cbnz	r1, 8003d28 <xQueueReceive+0x3e>
 8003d0e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003d10:	b153      	cbz	r3, 8003d28 <xQueueReceive+0x3e>
 8003d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d16:	b672      	cpsid	i
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	b662      	cpsie	i
 8003d26:	e7fe      	b.n	8003d26 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d28:	f000 fede 	bl	8004ae8 <xTaskGetSchedulerState>
 8003d2c:	4605      	mov	r5, r0
 8003d2e:	b318      	cbz	r0, 8003d78 <xQueueReceive+0x8e>
 8003d30:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8003d32:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8003d36:	f001 fa25 	bl	8005184 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d3a:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d3c:	b357      	cbz	r7, 8003d94 <xQueueReceive+0xaa>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d3e:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d40:	4631      	mov	r1, r6
 8003d42:	4620      	mov	r0, r4
 8003d44:	f7ff fca8 	bl	8003698 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d48:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d4a:	6923      	ldr	r3, [r4, #16]
 8003d4c:	b173      	cbz	r3, 8003d6c <xQueueReceive+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d4e:	f104 0010 	add.w	r0, r4, #16
 8003d52:	f000 fe2d 	bl	80049b0 <xTaskRemoveFromEventList>
 8003d56:	b148      	cbz	r0, 8003d6c <xQueueReceive+0x82>
						queueYIELD_IF_USING_PREEMPTION();
 8003d58:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d60:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003d6c:	f001 fa2e 	bl	80051cc <vPortExitCritical>
				return pdPASS;
 8003d70:	2001      	movs	r0, #1
}
 8003d72:	b004      	add	sp, #16
 8003d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d78:	9b01      	ldr	r3, [sp, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0d9      	beq.n	8003d32 <xQueueReceive+0x48>
 8003d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d82:	b672      	cpsid	i
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	b662      	cpsie	i
 8003d92:	e7fe      	b.n	8003d92 <xQueueReceive+0xa8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d94:	9b01      	ldr	r3, [sp, #4]
 8003d96:	b91b      	cbnz	r3, 8003da0 <xQueueReceive+0xb6>
					taskEXIT_CRITICAL();
 8003d98:	f001 fa18 	bl	80051cc <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	e7e8      	b.n	8003d72 <xQueueReceive+0x88>
				else if( xEntryTimeSet == pdFALSE )
 8003da0:	b915      	cbnz	r5, 8003da8 <xQueueReceive+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003da2:	a802      	add	r0, sp, #8
 8003da4:	f000 fe48 	bl	8004a38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003da8:	f001 fa10 	bl	80051cc <vPortExitCritical>
		vTaskSuspendAll();
 8003dac:	f000 fc38 	bl	8004620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003db0:	f001 f9e8 	bl	8005184 <vPortEnterCritical>
 8003db4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003db8:	2bff      	cmp	r3, #255	@ 0xff
 8003dba:	d101      	bne.n	8003dc0 <xQueueReceive+0xd6>
 8003dbc:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8003dc0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003dc4:	2bff      	cmp	r3, #255	@ 0xff
 8003dc6:	d101      	bne.n	8003dcc <xQueueReceive+0xe2>
 8003dc8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8003dcc:	f001 f9fe 	bl	80051cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dd0:	a901      	add	r1, sp, #4
 8003dd2:	a802      	add	r0, sp, #8
 8003dd4:	f000 fe3c 	bl	8004a50 <xTaskCheckForTimeOut>
 8003dd8:	bb00      	cbnz	r0, 8003e1c <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f7ff fc1e 	bl	800361c <prvIsQueueEmpty>
 8003de0:	b1b0      	cbz	r0, 8003e10 <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003de2:	9901      	ldr	r1, [sp, #4]
 8003de4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003de8:	f000 fda6 	bl	8004938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dec:	4620      	mov	r0, r4
 8003dee:	f7ff fc68 	bl	80036c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003df2:	f000 fcc3 	bl	800477c <xTaskResumeAll>
 8003df6:	b948      	cbnz	r0, 8003e0c <xQueueReceive+0x122>
					portYIELD_WITHIN_API();
 8003df8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e00:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	2501      	movs	r5, #1
 8003e0e:	e792      	b.n	8003d36 <xQueueReceive+0x4c>
				prvUnlockQueue( pxQueue );
 8003e10:	4620      	mov	r0, r4
 8003e12:	f7ff fc56 	bl	80036c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e16:	f000 fcb1 	bl	800477c <xTaskResumeAll>
 8003e1a:	e7f7      	b.n	8003e0c <xQueueReceive+0x122>
			prvUnlockQueue( pxQueue );
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7ff fc50 	bl	80036c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e22:	f000 fcab 	bl	800477c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e26:	4620      	mov	r0, r4
 8003e28:	f7ff fbf8 	bl	800361c <prvIsQueueEmpty>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d0ed      	beq.n	8003e0c <xQueueReceive+0x122>
 8003e30:	e7b4      	b.n	8003d9c <xQueueReceive+0xb2>

08003e32 <xQueueSemaphoreTake>:
{
 8003e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e34:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8003e36:	4604      	mov	r4, r0
{
 8003e38:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003e3a:	b950      	cbnz	r0, 8003e52 <xQueueSemaphoreTake+0x20>
 8003e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e40:	b672      	cpsid	i
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	b662      	cpsie	i
 8003e50:	e7fe      	b.n	8003e50 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e52:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003e54:	b155      	cbz	r5, 8003e6c <xQueueSemaphoreTake+0x3a>
 8003e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5a:	b672      	cpsid	i
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	b662      	cpsie	i
 8003e6a:	e7fe      	b.n	8003e6a <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e6c:	f000 fe3c 	bl	8004ae8 <xTaskGetSchedulerState>
 8003e70:	4606      	mov	r6, r0
 8003e72:	b320      	cbz	r0, 8003ebe <xQueueSemaphoreTake+0x8c>
 8003e74:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8003e76:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8003e78:	f001 f984 	bl	8005184 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e7e:	b363      	cbz	r3, 8003eda <xQueueSemaphoreTake+0xa8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e80:	3b01      	subs	r3, #1
 8003e82:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	b913      	cbnz	r3, 8003e8e <xQueueSemaphoreTake+0x5c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e88:	f000 ff14 	bl	8004cb4 <pvTaskIncrementMutexHeldCount>
 8003e8c:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	b173      	cbz	r3, 8003eb0 <xQueueSemaphoreTake+0x7e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e92:	f104 0010 	add.w	r0, r4, #16
 8003e96:	f000 fd8b 	bl	80049b0 <xTaskRemoveFromEventList>
 8003e9a:	b148      	cbz	r0, 8003eb0 <xQueueSemaphoreTake+0x7e>
						queueYIELD_IF_USING_PREEMPTION();
 8003e9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003eb0:	f001 f98c 	bl	80051cc <vPortExitCritical>
				return pdPASS;
 8003eb4:	2001      	movs	r0, #1
}
 8003eb6:	b005      	add	sp, #20
 8003eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eba:	4635      	mov	r5, r6
 8003ebc:	e7db      	b.n	8003e76 <xQueueSemaphoreTake+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ebe:	9b01      	ldr	r3, [sp, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0fa      	beq.n	8003eba <xQueueSemaphoreTake+0x88>
 8003ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec8:	b672      	cpsid	i
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	b662      	cpsie	i
 8003ed8:	e7fe      	b.n	8003ed8 <xQueueSemaphoreTake+0xa6>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eda:	9b01      	ldr	r3, [sp, #4]
 8003edc:	b963      	cbnz	r3, 8003ef8 <xQueueSemaphoreTake+0xc6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	d068      	beq.n	8003fb4 <xQueueSemaphoreTake+0x182>
 8003ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee6:	b672      	cpsid	i
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	b662      	cpsie	i
 8003ef6:	e7fe      	b.n	8003ef6 <xQueueSemaphoreTake+0xc4>
				else if( xEntryTimeSet == pdFALSE )
 8003ef8:	b916      	cbnz	r6, 8003f00 <xQueueSemaphoreTake+0xce>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003efa:	a802      	add	r0, sp, #8
 8003efc:	f000 fd9c 	bl	8004a38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003f00:	f001 f964 	bl	80051cc <vPortExitCritical>
		vTaskSuspendAll();
 8003f04:	f000 fb8c 	bl	8004620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f08:	f001 f93c 	bl	8005184 <vPortEnterCritical>
 8003f0c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003f10:	2bff      	cmp	r3, #255	@ 0xff
 8003f12:	d101      	bne.n	8003f18 <xQueueSemaphoreTake+0xe6>
 8003f14:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8003f18:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003f1c:	2bff      	cmp	r3, #255	@ 0xff
 8003f1e:	d101      	bne.n	8003f24 <xQueueSemaphoreTake+0xf2>
 8003f20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f24:	f001 f952 	bl	80051cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f28:	a901      	add	r1, sp, #4
 8003f2a:	a802      	add	r0, sp, #8
 8003f2c:	f000 fd90 	bl	8004a50 <xTaskCheckForTimeOut>
 8003f30:	bb50      	cbnz	r0, 8003f88 <xQueueSemaphoreTake+0x156>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f32:	4620      	mov	r0, r4
 8003f34:	f7ff fb72 	bl	800361c <prvIsQueueEmpty>
 8003f38:	b300      	cbz	r0, 8003f7c <xQueueSemaphoreTake+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	b93b      	cbnz	r3, 8003f4e <xQueueSemaphoreTake+0x11c>
						taskENTER_CRITICAL();
 8003f3e:	f001 f921 	bl	8005184 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f42:	68a0      	ldr	r0, [r4, #8]
 8003f44:	f000 fde0 	bl	8004b08 <xTaskPriorityInherit>
 8003f48:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8003f4a:	f001 f93f 	bl	80051cc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f4e:	9901      	ldr	r1, [sp, #4]
 8003f50:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003f54:	f000 fcf0 	bl	8004938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f7ff fbb2 	bl	80036c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f5e:	f000 fc0d 	bl	800477c <xTaskResumeAll>
 8003f62:	b948      	cbnz	r0, 8003f78 <xQueueSemaphoreTake+0x146>
					portYIELD_WITHIN_API();
 8003f64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	2601      	movs	r6, #1
 8003f7a:	e77d      	b.n	8003e78 <xQueueSemaphoreTake+0x46>
				prvUnlockQueue( pxQueue );
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7ff fba0 	bl	80036c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f82:	f000 fbfb 	bl	800477c <xTaskResumeAll>
 8003f86:	e7f7      	b.n	8003f78 <xQueueSemaphoreTake+0x146>
			prvUnlockQueue( pxQueue );
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f7ff fb9a 	bl	80036c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f8e:	f000 fbf5 	bl	800477c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f92:	4620      	mov	r0, r4
 8003f94:	f7ff fb42 	bl	800361c <prvIsQueueEmpty>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d0ed      	beq.n	8003f78 <xQueueSemaphoreTake+0x146>
					if( xInheritanceOccurred != pdFALSE )
 8003f9c:	b165      	cbz	r5, 8003fb8 <xQueueSemaphoreTake+0x186>
						taskENTER_CRITICAL();
 8003f9e:	f001 f8f1 	bl	8005184 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003fa2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003fa4:	b119      	cbz	r1, 8003fae <xQueueSemaphoreTake+0x17c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fa6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003fa8:	6819      	ldr	r1, [r3, #0]
 8003faa:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003fae:	68a0      	ldr	r0, [r4, #8]
 8003fb0:	f000 fe2e 	bl	8004c10 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8003fb4:	f001 f90a 	bl	80051cc <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003fb8:	2000      	movs	r0, #0
 8003fba:	e77c      	b.n	8003eb6 <xQueueSemaphoreTake+0x84>

08003fbc <xQueueTakeMutexRecursive>:
	{
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	b950      	cbnz	r0, 8003fda <xQueueTakeMutexRecursive+0x1e>
 8003fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc8:	b672      	cpsid	i
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	b662      	cpsie	i
 8003fd8:	e7fe      	b.n	8003fd8 <xQueueTakeMutexRecursive+0x1c>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003fda:	6886      	ldr	r6, [r0, #8]
 8003fdc:	f000 fd7e 	bl	8004adc <xTaskGetCurrentTaskHandle>
 8003fe0:	4286      	cmp	r6, r0
 8003fe2:	d104      	bne.n	8003fee <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003fe4:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8003fe6:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003fe8:	3301      	adds	r3, #1
 8003fea:	60e3      	str	r3, [r4, #12]
	}
 8003fec:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003fee:	4629      	mov	r1, r5
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f7ff ff1e 	bl	8003e32 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d0f8      	beq.n	8003fec <xQueueTakeMutexRecursive+0x30>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003ffa:	68e3      	ldr	r3, [r4, #12]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	60e3      	str	r3, [r4, #12]
 8004000:	e7f4      	b.n	8003fec <xQueueTakeMutexRecursive+0x30>

08004002 <xQueueReceiveFromISR>:
{
 8004002:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004006:	4689      	mov	r9, r1
 8004008:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800400a:	4604      	mov	r4, r0
 800400c:	b950      	cbnz	r0, 8004024 <xQueueReceiveFromISR+0x22>
 800400e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004012:	b672      	cpsid	i
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	b662      	cpsie	i
 8004022:	e7fe      	b.n	8004022 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004024:	b961      	cbnz	r1, 8004040 <xQueueReceiveFromISR+0x3e>
 8004026:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004028:	b153      	cbz	r3, 8004040 <xQueueReceiveFromISR+0x3e>
 800402a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402e:	b672      	cpsid	i
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	b662      	cpsie	i
 800403e:	e7fe      	b.n	800403e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004040:	f001 f99c 	bl	800537c <vPortValidateInterruptPriority>
	__asm volatile
 8004044:	f3ef 8711 	mrs	r7, BASEPRI
 8004048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404c:	b672      	cpsid	i
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800405c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800405e:	b30d      	cbz	r5, 80040a4 <xQueueReceiveFromISR+0xa2>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004060:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004064:	4649      	mov	r1, r9
 8004066:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004068:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800406a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800406c:	f7ff fb14 	bl	8003698 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004070:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8004072:	1c73      	adds	r3, r6, #1
 8004074:	d111      	bne.n	800409a <xQueueReceiveFromISR+0x98>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004076:	6923      	ldr	r3, [r4, #16]
 8004078:	b153      	cbz	r3, 8004090 <xQueueReceiveFromISR+0x8e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800407a:	f104 0010 	add.w	r0, r4, #16
 800407e:	f000 fc97 	bl	80049b0 <xTaskRemoveFromEventList>
 8004082:	b128      	cbz	r0, 8004090 <xQueueReceiveFromISR+0x8e>
						if( pxHigherPriorityTaskWoken != NULL )
 8004084:	f1b8 0f00 	cmp.w	r8, #0
 8004088:	d002      	beq.n	8004090 <xQueueReceiveFromISR+0x8e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800408a:	2301      	movs	r3, #1
 800408c:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8004090:	2001      	movs	r0, #1
	__asm volatile
 8004092:	f387 8811 	msr	BASEPRI, r7
}
 8004096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800409a:	3601      	adds	r6, #1
 800409c:	b276      	sxtb	r6, r6
 800409e:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 80040a2:	e7f5      	b.n	8004090 <xQueueReceiveFromISR+0x8e>
			xReturn = pdFAIL;
 80040a4:	4628      	mov	r0, r5
 80040a6:	e7f4      	b.n	8004092 <xQueueReceiveFromISR+0x90>

080040a8 <uxQueueMessagesWaiting>:
{
 80040a8:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 80040aa:	4604      	mov	r4, r0
 80040ac:	b950      	cbnz	r0, 80040c4 <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	b672      	cpsid	i
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	b662      	cpsie	i
 80040c2:	e7fe      	b.n	80040c2 <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 80040c4:	f001 f85e 	bl	8005184 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80040c8:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 80040ca:	f001 f87f 	bl	80051cc <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80040ce:	4620      	mov	r0, r4
 80040d0:	bd10      	pop	{r4, pc}

080040d2 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80040d2:	b950      	cbnz	r0, 80040ea <uxQueueMessagesWaitingFromISR+0x18>
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	b672      	cpsid	i
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	b662      	cpsie	i
 80040e8:	e7fe      	b.n	80040e8 <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = pxQueue->uxMessagesWaiting;
 80040ea:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80040ec:	4770      	bx	lr
	...

080040f0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040f0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040f2:	4a07      	ldr	r2, [pc, #28]	@ (8004110 <vQueueAddToRegistry+0x20>)
	{
 80040f4:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040f6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80040fa:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80040fe:	b91d      	cbnz	r5, 8004108 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004100:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004104:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004106:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004108:	3301      	adds	r3, #1
 800410a:	2b08      	cmp	r3, #8
 800410c:	d1f3      	bne.n	80040f6 <vQueueAddToRegistry+0x6>
 800410e:	e7fa      	b.n	8004106 <vQueueAddToRegistry+0x16>
 8004110:	20019f8c 	.word	0x20019f8c

08004114 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004114:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004116:	4a09      	ldr	r2, [pc, #36]	@ (800413c <vQueueUnregisterQueue+0x28>)
	{
 8004118:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800411a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800411e:	00dc      	lsls	r4, r3, #3
 8004120:	4281      	cmp	r1, r0
 8004122:	d106      	bne.n	8004132 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004124:	4a06      	ldr	r2, [pc, #24]	@ (8004140 <vQueueUnregisterQueue+0x2c>)
 8004126:	2100      	movs	r1, #0
 8004128:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800412c:	4422      	add	r2, r4
 800412e:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004130:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004132:	3301      	adds	r3, #1
 8004134:	2b08      	cmp	r3, #8
 8004136:	d1f0      	bne.n	800411a <vQueueUnregisterQueue+0x6>
 8004138:	e7fa      	b.n	8004130 <vQueueUnregisterQueue+0x1c>
 800413a:	bf00      	nop
 800413c:	20019f90 	.word	0x20019f90
 8004140:	20019f8c 	.word	0x20019f8c

08004144 <vQueueDelete>:
{
 8004144:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8004146:	b950      	cbnz	r0, 800415e <vQueueDelete+0x1a>
 8004148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414c:	b672      	cpsid	i
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	b662      	cpsie	i
 800415c:	e7fe      	b.n	800415c <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
 800415e:	f7ff ffd9 	bl	8004114 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004162:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8004166:	b91b      	cbnz	r3, 8004170 <vQueueDelete+0x2c>
}
 8004168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800416c:	f001 b9f2 	b.w	8005554 <vPortFree>
}
 8004170:	bd10      	pop	{r4, pc}

08004172 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004172:	b570      	push	{r4, r5, r6, lr}
 8004174:	4604      	mov	r4, r0
 8004176:	460d      	mov	r5, r1
 8004178:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800417a:	f001 f803 	bl	8005184 <vPortEnterCritical>
 800417e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004182:	2bff      	cmp	r3, #255	@ 0xff
 8004184:	d102      	bne.n	800418c <vQueueWaitForMessageRestricted+0x1a>
 8004186:	2300      	movs	r3, #0
 8004188:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800418c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004190:	2bff      	cmp	r3, #255	@ 0xff
 8004192:	d102      	bne.n	800419a <vQueueWaitForMessageRestricted+0x28>
 8004194:	2300      	movs	r3, #0
 8004196:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800419a:	f001 f817 	bl	80051cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800419e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80041a0:	b92b      	cbnz	r3, 80041ae <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041a2:	4632      	mov	r2, r6
 80041a4:	4629      	mov	r1, r5
 80041a6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80041aa:	f000 fbe1 	bl	8004970 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041ae:	4620      	mov	r0, r4
	}
 80041b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80041b4:	f7ff ba85 	b.w	80036c2 <prvUnlockQueue>

080041b8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041bc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041be:	f000 ffe1 	bl	8005184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004280 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80041c4:	4e2f      	ldr	r6, [pc, #188]	@ (8004284 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4f2f      	ldr	r7, [pc, #188]	@ (8004288 <prvAddNewTaskToReadyList+0xd0>)
 80041ca:	3201      	adds	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80041ce:	6835      	ldr	r5, [r6, #0]
 80041d0:	2d00      	cmp	r5, #0
 80041d2:	d14a      	bne.n	800426a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041d4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d11f      	bne.n	800421c <prvAddNewTaskToReadyList+0x64>
 80041dc:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041de:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041e0:	4640      	mov	r0, r8
 80041e2:	f7ff f9db 	bl	800359c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041e6:	f108 0814 	add.w	r8, r8, #20
 80041ea:	2d38      	cmp	r5, #56	@ 0x38
 80041ec:	d1f7      	bne.n	80041de <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041ee:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 80042b0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80041f2:	4d26      	ldr	r5, [pc, #152]	@ (800428c <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80041f4:	4640      	mov	r0, r8
 80041f6:	f7ff f9d1 	bl	800359c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041fa:	4628      	mov	r0, r5
 80041fc:	f7ff f9ce 	bl	800359c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004200:	4823      	ldr	r0, [pc, #140]	@ (8004290 <prvAddNewTaskToReadyList+0xd8>)
 8004202:	f7ff f9cb 	bl	800359c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004206:	4823      	ldr	r0, [pc, #140]	@ (8004294 <prvAddNewTaskToReadyList+0xdc>)
 8004208:	f7ff f9c8 	bl	800359c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800420c:	4822      	ldr	r0, [pc, #136]	@ (8004298 <prvAddNewTaskToReadyList+0xe0>)
 800420e:	f7ff f9c5 	bl	800359c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004212:	4b22      	ldr	r3, [pc, #136]	@ (800429c <prvAddNewTaskToReadyList+0xe4>)
 8004214:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004218:	4b21      	ldr	r3, [pc, #132]	@ (80042a0 <prvAddNewTaskToReadyList+0xe8>)
 800421a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800421c:	4a21      	ldr	r2, [pc, #132]	@ (80042a4 <prvAddNewTaskToReadyList+0xec>)
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004224:	4a20      	ldr	r2, [pc, #128]	@ (80042a8 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004226:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004228:	6811      	ldr	r1, [r2, #0]
 800422a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800422c:	428b      	cmp	r3, r1
 800422e:	d900      	bls.n	8004232 <prvAddNewTaskToReadyList+0x7a>
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	2014      	movs	r0, #20
 8004234:	1d21      	adds	r1, r4, #4
 8004236:	fb00 7003 	mla	r0, r0, r3, r7
 800423a:	f7ff f9bd 	bl	80035b8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800423e:	f000 ffc5 	bl	80051cc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004242:	4b1a      	ldr	r3, [pc, #104]	@ (80042ac <prvAddNewTaskToReadyList+0xf4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	b173      	cbz	r3, 8004266 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004248:	6833      	ldr	r3, [r6, #0]
 800424a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800424c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800424e:	429a      	cmp	r2, r3
 8004250:	d209      	bcs.n	8004266 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8004252:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800425a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
}
 8004266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800426a:	4b10      	ldr	r3, [pc, #64]	@ (80042ac <prvAddNewTaskToReadyList+0xf4>)
 800426c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800426e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8004270:	2a00      	cmp	r2, #0
 8004272:	d1d3      	bne.n	800421c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004274:	6832      	ldr	r2, [r6, #0]
 8004276:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004278:	429a      	cmp	r2, r3
 800427a:	d8cf      	bhi.n	800421c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800427c:	6034      	str	r4, [r6, #0]
 800427e:	e7cd      	b.n	800421c <prvAddNewTaskToReadyList+0x64>
 8004280:	20019ff0 	.word	0x20019ff0
 8004284:	2001a4c4 	.word	0x2001a4c4
 8004288:	2001a064 	.word	0x2001a064
 800428c:	2001a03c 	.word	0x2001a03c
 8004290:	2001a020 	.word	0x2001a020
 8004294:	2001a00c 	.word	0x2001a00c
 8004298:	20019ff4 	.word	0x20019ff4
 800429c:	2001a038 	.word	0x2001a038
 80042a0:	2001a034 	.word	0x2001a034
 80042a4:	20019fd4 	.word	0x20019fd4
 80042a8:	20019fe8 	.word	0x20019fe8
 80042ac:	20019fe4 	.word	0x20019fe4
 80042b0:	2001a050 	.word	0x2001a050

080042b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042b6:	4b15      	ldr	r3, [pc, #84]	@ (800430c <prvAddCurrentTaskToDelayedList+0x58>)
{
 80042b8:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ba:	4d15      	ldr	r5, [pc, #84]	@ (8004310 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80042bc:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80042be:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042c0:	6828      	ldr	r0, [r5, #0]
 80042c2:	3004      	adds	r0, #4
 80042c4:	f7ff f99a 	bl	80035fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042c8:	1c73      	adds	r3, r6, #1
 80042ca:	d107      	bne.n	80042dc <prvAddCurrentTaskToDelayedList+0x28>
 80042cc:	b137      	cbz	r7, 80042dc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ce:	6829      	ldr	r1, [r5, #0]
 80042d0:	4810      	ldr	r0, [pc, #64]	@ (8004314 <prvAddCurrentTaskToDelayedList+0x60>)
 80042d2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042d8:	f7ff b96e 	b.w	80035b8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042dc:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042de:	682b      	ldr	r3, [r5, #0]
 80042e0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042e2:	d307      	bcc.n	80042f4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <prvAddCurrentTaskToDelayedList+0x64>)
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	6829      	ldr	r1, [r5, #0]
}
 80042ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ee:	3104      	adds	r1, #4
 80042f0:	f7ff b96d 	b.w	80035ce <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042f4:	4b09      	ldr	r3, [pc, #36]	@ (800431c <prvAddCurrentTaskToDelayedList+0x68>)
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	6829      	ldr	r1, [r5, #0]
 80042fa:	3104      	adds	r1, #4
 80042fc:	f7ff f967 	bl	80035ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004300:	4b07      	ldr	r3, [pc, #28]	@ (8004320 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	42a2      	cmp	r2, r4
 8004306:	d900      	bls.n	800430a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8004308:	601c      	str	r4, [r3, #0]
}
 800430a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800430c:	20019fec 	.word	0x20019fec
 8004310:	2001a4c4 	.word	0x2001a4c4
 8004314:	20019ff4 	.word	0x20019ff4
 8004318:	2001a034 	.word	0x2001a034
 800431c:	2001a038 	.word	0x2001a038
 8004320:	20019fd0 	.word	0x20019fd0

08004324 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004324:	4a06      	ldr	r2, [pc, #24]	@ (8004340 <prvResetNextTaskUnblockTime+0x1c>)
 8004326:	6813      	ldr	r3, [r2, #0]
 8004328:	6819      	ldr	r1, [r3, #0]
 800432a:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <prvResetNextTaskUnblockTime+0x20>)
 800432c:	b919      	cbnz	r1, 8004336 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800432e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004332:	601a      	str	r2, [r3, #0]
}
 8004334:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800433a:	68d2      	ldr	r2, [r2, #12]
 800433c:	6852      	ldr	r2, [r2, #4]
 800433e:	e7f8      	b.n	8004332 <prvResetNextTaskUnblockTime+0xe>
 8004340:	2001a038 	.word	0x2001a038
 8004344:	20019fd0 	.word	0x20019fd0

08004348 <prvDeleteTCB>:
	{
 8004348:	b510      	push	{r4, lr}
 800434a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800434c:	3054      	adds	r0, #84	@ 0x54
 800434e:	f00a f945 	bl	800e5dc <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004352:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8004356:	b93b      	cbnz	r3, 8004368 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8004358:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800435a:	f001 f8fb 	bl	8005554 <vPortFree>
				vPortFree( pxTCB );
 800435e:	4620      	mov	r0, r4
	}
 8004360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8004364:	f001 b8f6 	b.w	8005554 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004368:	2b01      	cmp	r3, #1
 800436a:	d0f8      	beq.n	800435e <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800436c:	2b02      	cmp	r3, #2
 800436e:	d00a      	beq.n	8004386 <prvDeleteTCB+0x3e>
 8004370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004374:	b672      	cpsid	i
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	b662      	cpsie	i
 8004384:	e7fe      	b.n	8004384 <prvDeleteTCB+0x3c>
	}
 8004386:	bd10      	pop	{r4, pc}

08004388 <prvIdleTask>:
{
 8004388:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800438a:	4c13      	ldr	r4, [pc, #76]	@ (80043d8 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800438c:	4f13      	ldr	r7, [pc, #76]	@ (80043dc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800438e:	4d14      	ldr	r5, [pc, #80]	@ (80043e0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	b973      	cbnz	r3, 80043b2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004394:	4b13      	ldr	r3, [pc, #76]	@ (80043e4 <prvIdleTask+0x5c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d9f8      	bls.n	800438e <prvIdleTask+0x6>
				taskYIELD();
 800439c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80043a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	e7ed      	b.n	800438e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80043b2:	f000 fee7 	bl	8005184 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043ba:	1d30      	adds	r0, r6, #4
 80043bc:	f7ff f91e 	bl	80035fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80043cc:	f000 fefe 	bl	80051cc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80043d0:	4630      	mov	r0, r6
 80043d2:	f7ff ffb9 	bl	8004348 <prvDeleteTCB>
 80043d6:	e7db      	b.n	8004390 <prvIdleTask+0x8>
 80043d8:	2001a008 	.word	0x2001a008
 80043dc:	2001a00c 	.word	0x2001a00c
 80043e0:	20019ff0 	.word	0x20019ff0
 80043e4:	2001a064 	.word	0x2001a064

080043e8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80043e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043ec:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80043ee:	4607      	mov	r7, r0
 80043f0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043f2:	21a5      	movs	r1, #165	@ 0xa5
 80043f4:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80043f6:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043f8:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80043fa:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043fe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004400:	f00a f8d4 	bl	800e5ac <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004404:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004406:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004408:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800440c:	2d00      	cmp	r5, #0
 800440e:	d041      	beq.n	8004494 <prvInitialiseNewTask.constprop.0+0xac>
 8004410:	1e6b      	subs	r3, r5, #1
 8004412:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8004416:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004418:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800441c:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8004420:	b109      	cbz	r1, 8004426 <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004422:	42ab      	cmp	r3, r5
 8004424:	d1f8      	bne.n	8004418 <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004426:	2300      	movs	r3, #0
 8004428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800442c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800442e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004432:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004434:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8004436:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800443a:	bf28      	it	cs
 800443c:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800443e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004440:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004442:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004446:	f7ff f8b4 	bl	80035b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800444a:	f104 0018 	add.w	r0, r4, #24
 800444e:	f7ff f8b0 	bl	80035b2 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004452:	224c      	movs	r2, #76	@ 0x4c
 8004454:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8004456:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800445a:	f104 0054 	add.w	r0, r4, #84	@ 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800445e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004460:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004462:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004464:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004468:	f00a f8a0 	bl	800e5ac <memset>
 800446c:	4b0b      	ldr	r3, [pc, #44]	@ (800449c <prvInitialiseNewTask.constprop.0+0xb4>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800446e:	4639      	mov	r1, r7
 8004470:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004472:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004476:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004478:	33d0      	adds	r3, #208	@ 0xd0
 800447a:	65e2      	str	r2, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800447c:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800447e:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004480:	f000 fe58 	bl	8005134 <pxPortInitialiseStack>
 8004484:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004486:	f1b9 0f00 	cmp.w	r9, #0
 800448a:	d001      	beq.n	8004490 <prvInitialiseNewTask.constprop.0+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800448c:	f8c9 4000 	str.w	r4, [r9]
}
 8004490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004494:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8004498:	e7c8      	b.n	800442c <prvInitialiseNewTask.constprop.0+0x44>
 800449a:	bf00      	nop
 800449c:	20033560 	.word	0x20033560

080044a0 <xTaskCreateStatic>:
	{
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80044a8:	b955      	cbnz	r5, 80044c0 <xTaskCreateStatic+0x20>
 80044aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ae:	b672      	cpsid	i
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	b662      	cpsie	i
 80044be:	e7fe      	b.n	80044be <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 80044c0:	b954      	cbnz	r4, 80044d8 <xTaskCreateStatic+0x38>
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	b672      	cpsid	i
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	b662      	cpsie	i
 80044d6:	e7fe      	b.n	80044d6 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 80044d8:	26a8      	movs	r6, #168	@ 0xa8
 80044da:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044dc:	9e05      	ldr	r6, [sp, #20]
 80044de:	2ea8      	cmp	r6, #168	@ 0xa8
 80044e0:	d00a      	beq.n	80044f8 <xTaskCreateStatic+0x58>
 80044e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e6:	b672      	cpsid	i
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	b662      	cpsie	i
 80044f6:	e7fe      	b.n	80044f6 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044f8:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044fa:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044fc:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044fe:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004502:	ad04      	add	r5, sp, #16
 8004504:	9402      	str	r4, [sp, #8]
 8004506:	9501      	str	r5, [sp, #4]
 8004508:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800450a:	9500      	str	r5, [sp, #0]
 800450c:	f7ff ff6c 	bl	80043e8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004510:	4620      	mov	r0, r4
 8004512:	f7ff fe51 	bl	80041b8 <prvAddNewTaskToReadyList>
	}
 8004516:	9804      	ldr	r0, [sp, #16]
 8004518:	b006      	add	sp, #24
 800451a:	bd70      	pop	{r4, r5, r6, pc}

0800451c <xTaskCreate>:
	{
 800451c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004520:	4607      	mov	r7, r0
 8004522:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004524:	0090      	lsls	r0, r2, #2
	{
 8004526:	4688      	mov	r8, r1
 8004528:	4616      	mov	r6, r2
 800452a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800452c:	f000 ff7e 	bl	800542c <pvPortMalloc>
			if( pxStack != NULL )
 8004530:	4605      	mov	r5, r0
 8004532:	b920      	cbnz	r0, 800453e <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004538:	b005      	add	sp, #20
 800453a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800453e:	20a8      	movs	r0, #168	@ 0xa8
 8004540:	f000 ff74 	bl	800542c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004544:	4604      	mov	r4, r0
 8004546:	b198      	cbz	r0, 8004570 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004548:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800454a:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800454c:	4632      	mov	r2, r6
 800454e:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004550:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004554:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004556:	9002      	str	r0, [sp, #8]
 8004558:	4638      	mov	r0, r7
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	464b      	mov	r3, r9
 8004562:	f7ff ff41 	bl	80043e8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004566:	4620      	mov	r0, r4
 8004568:	f7ff fe26 	bl	80041b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800456c:	2001      	movs	r0, #1
 800456e:	e7e3      	b.n	8004538 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8004570:	4628      	mov	r0, r5
 8004572:	f000 ffef 	bl	8005554 <vPortFree>
		if( pxNewTCB != NULL )
 8004576:	e7dd      	b.n	8004534 <xTaskCreate+0x18>

08004578 <vTaskStartScheduler>:
{
 8004578:	b510      	push	{r4, lr}
 800457a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800457c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800457e:	aa07      	add	r2, sp, #28
 8004580:	a906      	add	r1, sp, #24
 8004582:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004584:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004588:	f7fe fff0 	bl	800356c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800458c:	9b05      	ldr	r3, [sp, #20]
 800458e:	9a07      	ldr	r2, [sp, #28]
 8004590:	9302      	str	r3, [sp, #8]
 8004592:	9b06      	ldr	r3, [sp, #24]
 8004594:	491b      	ldr	r1, [pc, #108]	@ (8004604 <vTaskStartScheduler+0x8c>)
 8004596:	481c      	ldr	r0, [pc, #112]	@ (8004608 <vTaskStartScheduler+0x90>)
 8004598:	e9cd 4300 	strd	r4, r3, [sp]
 800459c:	4623      	mov	r3, r4
 800459e:	f7ff ff7f 	bl	80044a0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d02c      	beq.n	8004600 <vTaskStartScheduler+0x88>
			xReturn = xTimerCreateTimerTask();
 80045a6:	f000 fbe3 	bl	8004d70 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80045aa:	2801      	cmp	r0, #1
 80045ac:	d11b      	bne.n	80045e6 <vTaskStartScheduler+0x6e>
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	b672      	cpsid	i
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045c2:	4b12      	ldr	r3, [pc, #72]	@ (800460c <vTaskStartScheduler+0x94>)
 80045c4:	4a12      	ldr	r2, [pc, #72]	@ (8004610 <vTaskStartScheduler+0x98>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3354      	adds	r3, #84	@ 0x54
 80045ca:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	4b10      	ldr	r3, [pc, #64]	@ (8004614 <vTaskStartScheduler+0x9c>)
 80045d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045d4:	4b10      	ldr	r3, [pc, #64]	@ (8004618 <vTaskStartScheduler+0xa0>)
 80045d6:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045d8:	4b10      	ldr	r3, [pc, #64]	@ (800461c <vTaskStartScheduler+0xa4>)
 80045da:	601c      	str	r4, [r3, #0]
}
 80045dc:	b008      	add	sp, #32
 80045de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80045e2:	f000 be69 	b.w	80052b8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045e6:	3001      	adds	r0, #1
 80045e8:	d10a      	bne.n	8004600 <vTaskStartScheduler+0x88>
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	b672      	cpsid	i
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	b662      	cpsie	i
 80045fe:	e7fe      	b.n	80045fe <vTaskStartScheduler+0x86>
}
 8004600:	b008      	add	sp, #32
 8004602:	bd10      	pop	{r4, pc}
 8004604:	0800f260 	.word	0x0800f260
 8004608:	08004389 	.word	0x08004389
 800460c:	2001a4c4 	.word	0x2001a4c4
 8004610:	20000050 	.word	0x20000050
 8004614:	20019fd0 	.word	0x20019fd0
 8004618:	20019fe4 	.word	0x20019fe4
 800461c:	20019fec 	.word	0x20019fec

08004620 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004620:	4a02      	ldr	r2, [pc, #8]	@ (800462c <vTaskSuspendAll+0xc>)
 8004622:	6813      	ldr	r3, [r2, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	6013      	str	r3, [r2, #0]
}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20019fcc 	.word	0x20019fcc

08004630 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004630:	4b01      	ldr	r3, [pc, #4]	@ (8004638 <xTaskGetTickCount+0x8>)
 8004632:	6818      	ldr	r0, [r3, #0]
}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20019fec 	.word	0x20019fec

0800463c <xTaskGetTickCountFromISR>:
{
 800463c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800463e:	f000 fe9d 	bl	800537c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004642:	4b01      	ldr	r3, [pc, #4]	@ (8004648 <xTaskGetTickCountFromISR+0xc>)
 8004644:	6818      	ldr	r0, [r3, #0]
}
 8004646:	bd08      	pop	{r3, pc}
 8004648:	20019fec 	.word	0x20019fec

0800464c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800464c:	4b40      	ldr	r3, [pc, #256]	@ (8004750 <xTaskIncrementTick+0x104>)
 800464e:	681b      	ldr	r3, [r3, #0]
{
 8004650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004654:	2b00      	cmp	r3, #0
 8004656:	d173      	bne.n	8004740 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004658:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <xTaskIncrementTick+0x108>)
 800465a:	681c      	ldr	r4, [r3, #0]
 800465c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800465e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004660:	b9cc      	cbnz	r4, 8004696 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8004662:	4b3d      	ldr	r3, [pc, #244]	@ (8004758 <xTaskIncrementTick+0x10c>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	b152      	cbz	r2, 8004680 <xTaskIncrementTick+0x34>
 800466a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466e:	b672      	cpsid	i
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	b662      	cpsie	i
 800467e:	e7fe      	b.n	800467e <xTaskIncrementTick+0x32>
 8004680:	4a36      	ldr	r2, [pc, #216]	@ (800475c <xTaskIncrementTick+0x110>)
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	6810      	ldr	r0, [r2, #0]
 8004686:	6018      	str	r0, [r3, #0]
 8004688:	6011      	str	r1, [r2, #0]
 800468a:	4a35      	ldr	r2, [pc, #212]	@ (8004760 <xTaskIncrementTick+0x114>)
 800468c:	6813      	ldr	r3, [r2, #0]
 800468e:	3301      	adds	r3, #1
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	f7ff fe47 	bl	8004324 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004696:	4d33      	ldr	r5, [pc, #204]	@ (8004764 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8004698:	f04f 0b00 	mov.w	fp, #0
 800469c:	4e32      	ldr	r6, [pc, #200]	@ (8004768 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800469e:	682b      	ldr	r3, [r5, #0]
 80046a0:	4f32      	ldr	r7, [pc, #200]	@ (800476c <xTaskIncrementTick+0x120>)
 80046a2:	42a3      	cmp	r3, r4
 80046a4:	d911      	bls.n	80046ca <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	2114      	movs	r1, #20
 80046aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046ac:	434a      	muls	r2, r1
 80046ae:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80046b0:	2a02      	cmp	r2, #2
 80046b2:	bf28      	it	cs
 80046b4:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80046b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004770 <xTaskIncrementTick+0x124>)
 80046ba:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80046bc:	2a00      	cmp	r2, #0
}
 80046be:	bf0c      	ite	eq
 80046c0:	4658      	moveq	r0, fp
 80046c2:	2001      	movne	r0, #1
 80046c4:	b003      	add	sp, #12
 80046c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ca:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8004758 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80046ce:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8004778 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046d2:	f8d9 2000 	ldr.w	r2, [r9]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	b91a      	cbnz	r2, 80046e2 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046da:	f04f 32ff 	mov.w	r2, #4294967295
 80046de:	602a      	str	r2, [r5, #0]
					break;
 80046e0:	e7e1      	b.n	80046a6 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e2:	f8d9 2000 	ldr.w	r2, [r9]
 80046e6:	68d2      	ldr	r2, [r2, #12]
 80046e8:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80046f0:	428c      	cmp	r4, r1
 80046f2:	d201      	bcs.n	80046f8 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 80046f4:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046f6:	e7d6      	b.n	80046a6 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f8:	f108 0304 	add.w	r3, r8, #4
 80046fc:	4618      	mov	r0, r3
 80046fe:	9301      	str	r3, [sp, #4]
 8004700:	f7fe ff7c 	bl	80035fc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004704:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8004708:	b119      	cbz	r1, 8004712 <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800470a:	f108 0018 	add.w	r0, r8, #24
 800470e:	f7fe ff75 	bl	80035fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004712:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8004716:	f8da 1000 	ldr.w	r1, [sl]
 800471a:	4288      	cmp	r0, r1
 800471c:	d901      	bls.n	8004722 <xTaskIncrementTick+0xd6>
 800471e:	f8ca 0000 	str.w	r0, [sl]
 8004722:	2314      	movs	r3, #20
 8004724:	9901      	ldr	r1, [sp, #4]
 8004726:	fb03 6000 	mla	r0, r3, r0, r6
 800472a:	f7fe ff45 	bl	80035b8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800472e:	6838      	ldr	r0, [r7, #0]
 8004730:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8004734:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8004736:	4291      	cmp	r1, r2
 8004738:	bf28      	it	cs
 800473a:	f04f 0b01 	movcs.w	fp, #1
 800473e:	e7c8      	b.n	80046d2 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8004740:	4a0c      	ldr	r2, [pc, #48]	@ (8004774 <xTaskIncrementTick+0x128>)
BaseType_t xSwitchRequired = pdFALSE;
 8004742:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8004746:	6813      	ldr	r3, [r2, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	e7b4      	b.n	80046b8 <xTaskIncrementTick+0x6c>
 800474e:	bf00      	nop
 8004750:	20019fcc 	.word	0x20019fcc
 8004754:	20019fec 	.word	0x20019fec
 8004758:	2001a038 	.word	0x2001a038
 800475c:	2001a034 	.word	0x2001a034
 8004760:	20019fd8 	.word	0x20019fd8
 8004764:	20019fd0 	.word	0x20019fd0
 8004768:	2001a064 	.word	0x2001a064
 800476c:	2001a4c4 	.word	0x2001a4c4
 8004770:	20019fdc 	.word	0x20019fdc
 8004774:	20019fe0 	.word	0x20019fe0
 8004778:	20019fe8 	.word	0x20019fe8

0800477c <xTaskResumeAll>:
{
 800477c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8004780:	4c31      	ldr	r4, [pc, #196]	@ (8004848 <xTaskResumeAll+0xcc>)
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	b953      	cbnz	r3, 800479c <xTaskResumeAll+0x20>
 8004786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478a:	b672      	cpsid	i
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	b662      	cpsie	i
 800479a:	e7fe      	b.n	800479a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800479c:	f000 fcf2 	bl	8005184 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047a6:	6824      	ldr	r4, [r4, #0]
 80047a8:	b12c      	cbz	r4, 80047b6 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 80047aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80047ac:	f000 fd0e 	bl	80051cc <vPortExitCritical>
}
 80047b0:	4620      	mov	r0, r4
 80047b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047b6:	4b25      	ldr	r3, [pc, #148]	@ (800484c <xTaskResumeAll+0xd0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f5      	beq.n	80047aa <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047be:	4d24      	ldr	r5, [pc, #144]	@ (8004850 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 80047c0:	4e24      	ldr	r6, [pc, #144]	@ (8004854 <xTaskResumeAll+0xd8>)
 80047c2:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8004864 <xTaskResumeAll+0xe8>
 80047c6:	e01d      	b.n	8004804 <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c8:	68eb      	ldr	r3, [r5, #12]
 80047ca:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047cc:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ce:	f104 0018 	add.w	r0, r4, #24
 80047d2:	f7fe ff13 	bl	80035fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047d6:	4638      	mov	r0, r7
 80047d8:	f7fe ff10 	bl	80035fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80047de:	6832      	ldr	r2, [r6, #0]
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d900      	bls.n	80047e6 <xTaskResumeAll+0x6a>
 80047e4:	6033      	str	r3, [r6, #0]
 80047e6:	2014      	movs	r0, #20
 80047e8:	4639      	mov	r1, r7
 80047ea:	fb00 8003 	mla	r0, r0, r3, r8
 80047ee:	f7fe fee3 	bl	80035b8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047f2:	4b19      	ldr	r3, [pc, #100]	@ (8004858 <xTaskResumeAll+0xdc>)
 80047f4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d302      	bcc.n	8004804 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80047fe:	4b17      	ldr	r3, [pc, #92]	@ (800485c <xTaskResumeAll+0xe0>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1de      	bne.n	80047c8 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 800480a:	b10c      	cbz	r4, 8004810 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800480c:	f7ff fd8a 	bl	8004324 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004810:	4d13      	ldr	r5, [pc, #76]	@ (8004860 <xTaskResumeAll+0xe4>)
 8004812:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004814:	b144      	cbz	r4, 8004828 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8004816:	4e11      	ldr	r6, [pc, #68]	@ (800485c <xTaskResumeAll+0xe0>)
 8004818:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800481a:	f7ff ff17 	bl	800464c <xTaskIncrementTick>
 800481e:	b100      	cbz	r0, 8004822 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8004820:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004822:	3c01      	subs	r4, #1
 8004824:	d1f9      	bne.n	800481a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8004826:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004828:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <xTaskResumeAll+0xe0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0bc      	beq.n	80047aa <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8004830:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004834:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004838:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004844:	2401      	movs	r4, #1
 8004846:	e7b1      	b.n	80047ac <xTaskResumeAll+0x30>
 8004848:	20019fcc 	.word	0x20019fcc
 800484c:	20019ff0 	.word	0x20019ff0
 8004850:	2001a020 	.word	0x2001a020
 8004854:	20019fe8 	.word	0x20019fe8
 8004858:	2001a4c4 	.word	0x2001a4c4
 800485c:	20019fdc 	.word	0x20019fdc
 8004860:	20019fe0 	.word	0x20019fe0
 8004864:	2001a064 	.word	0x2001a064

08004868 <vTaskDelay>:
	{
 8004868:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800486a:	b950      	cbnz	r0, 8004882 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800486c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004874:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
	}
 8004880:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004882:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <vTaskDelay+0x48>)
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	b151      	cbz	r1, 800489e <vTaskDelay+0x36>
 8004888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488c:	b672      	cpsid	i
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	b662      	cpsie	i
 800489c:	e7fe      	b.n	800489c <vTaskDelay+0x34>
			vTaskSuspendAll();
 800489e:	f7ff febf 	bl	8004620 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048a2:	f7ff fd07 	bl	80042b4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80048a6:	f7ff ff69 	bl	800477c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d0de      	beq.n	800486c <vTaskDelay+0x4>
 80048ae:	e7e7      	b.n	8004880 <vTaskDelay+0x18>
 80048b0:	20019fcc 	.word	0x20019fcc

080048b4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004920 <vTaskSwitchContext+0x6c>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004924 <vTaskSwitchContext+0x70>)
{
 80048ba:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048bc:	b112      	cbz	r2, 80048c4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
}
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c4:	4d18      	ldr	r5, [pc, #96]	@ (8004928 <vTaskSwitchContext+0x74>)
 80048c6:	2614      	movs	r6, #20
		xYieldPending = pdFALSE;
 80048c8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ca:	4918      	ldr	r1, [pc, #96]	@ (800492c <vTaskSwitchContext+0x78>)
 80048cc:	682a      	ldr	r2, [r5, #0]
 80048ce:	fb06 f302 	mul.w	r3, r6, r2
 80048d2:	58cc      	ldr	r4, [r1, r3]
 80048d4:	18c8      	adds	r0, r1, r3
 80048d6:	b1ac      	cbz	r4, 8004904 <vTaskSwitchContext+0x50>
 80048d8:	6844      	ldr	r4, [r0, #4]
 80048da:	3308      	adds	r3, #8
 80048dc:	6864      	ldr	r4, [r4, #4]
 80048de:	440b      	add	r3, r1
 80048e0:	429c      	cmp	r4, r3
 80048e2:	6044      	str	r4, [r0, #4]
 80048e4:	bf04      	itt	eq
 80048e6:	6863      	ldreq	r3, [r4, #4]
 80048e8:	6043      	streq	r3, [r0, #4]
 80048ea:	2314      	movs	r3, #20
 80048ec:	fb03 1102 	mla	r1, r3, r2, r1
 80048f0:	684b      	ldr	r3, [r1, #4]
 80048f2:	68d9      	ldr	r1, [r3, #12]
 80048f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004930 <vTaskSwitchContext+0x7c>)
 80048f6:	6019      	str	r1, [r3, #0]
 80048f8:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004934 <vTaskSwitchContext+0x80>)
 80048fe:	3354      	adds	r3, #84	@ 0x54
 8004900:	6013      	str	r3, [r2, #0]
}
 8004902:	e7de      	b.n	80048c2 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004904:	b952      	cbnz	r2, 800491c <vTaskSwitchContext+0x68>
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	b672      	cpsid	i
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	b662      	cpsie	i
 800491a:	e7fe      	b.n	800491a <vTaskSwitchContext+0x66>
 800491c:	3a01      	subs	r2, #1
 800491e:	e7d6      	b.n	80048ce <vTaskSwitchContext+0x1a>
 8004920:	20019fcc 	.word	0x20019fcc
 8004924:	20019fdc 	.word	0x20019fdc
 8004928:	20019fe8 	.word	0x20019fe8
 800492c:	2001a064 	.word	0x2001a064
 8004930:	2001a4c4 	.word	0x2001a4c4
 8004934:	20000050 	.word	0x20000050

08004938 <vTaskPlaceOnEventList>:
{
 8004938:	b510      	push	{r4, lr}
 800493a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800493c:	b950      	cbnz	r0, 8004954 <vTaskPlaceOnEventList+0x1c>
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	b672      	cpsid	i
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	b662      	cpsie	i
 8004952:	e7fe      	b.n	8004952 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004954:	4b05      	ldr	r3, [pc, #20]	@ (800496c <vTaskPlaceOnEventList+0x34>)
 8004956:	6819      	ldr	r1, [r3, #0]
 8004958:	3118      	adds	r1, #24
 800495a:	f7fe fe38 	bl	80035ce <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800495e:	4620      	mov	r0, r4
 8004960:	2101      	movs	r1, #1
}
 8004962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004966:	f7ff bca5 	b.w	80042b4 <prvAddCurrentTaskToDelayedList>
 800496a:	bf00      	nop
 800496c:	2001a4c4 	.word	0x2001a4c4

08004970 <vTaskPlaceOnEventListRestricted>:
	{
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	460d      	mov	r5, r1
 8004974:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8004976:	b950      	cbnz	r0, 800498e <vTaskPlaceOnEventListRestricted+0x1e>
 8004978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497c:	b672      	cpsid	i
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	b662      	cpsie	i
 800498c:	e7fe      	b.n	800498c <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800498e:	4b07      	ldr	r3, [pc, #28]	@ (80049ac <vTaskPlaceOnEventListRestricted+0x3c>)
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	3118      	adds	r1, #24
 8004994:	f7fe fe10 	bl	80035b8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8004998:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800499a:	4621      	mov	r1, r4
 800499c:	bf0c      	ite	eq
 800499e:	4628      	moveq	r0, r5
 80049a0:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80049a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049a8:	f7ff bc84 	b.w	80042b4 <prvAddCurrentTaskToDelayedList>
 80049ac:	2001a4c4 	.word	0x2001a4c4

080049b0 <xTaskRemoveFromEventList>:
{
 80049b0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b2:	68c3      	ldr	r3, [r0, #12]
 80049b4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80049b6:	b954      	cbnz	r4, 80049ce <xTaskRemoveFromEventList+0x1e>
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	b672      	cpsid	i
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	b662      	cpsie	i
 80049cc:	e7fe      	b.n	80049cc <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049ce:	f104 0518 	add.w	r5, r4, #24
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7fe fe12 	bl	80035fc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049d8:	4b11      	ldr	r3, [pc, #68]	@ (8004a20 <xTaskRemoveFromEventList+0x70>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	b9d3      	cbnz	r3, 8004a14 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049de:	1d25      	adds	r5, r4, #4
 80049e0:	4628      	mov	r0, r5
 80049e2:	f7fe fe0b 	bl	80035fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004a24 <xTaskRemoveFromEventList+0x74>)
 80049e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80049ea:	6811      	ldr	r1, [r2, #0]
 80049ec:	428b      	cmp	r3, r1
 80049ee:	d900      	bls.n	80049f2 <xTaskRemoveFromEventList+0x42>
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	2014      	movs	r0, #20
 80049f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004a28 <xTaskRemoveFromEventList+0x78>)
 80049f6:	4629      	mov	r1, r5
 80049f8:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049fc:	f7fe fddc 	bl	80035b8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a00:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <xTaskRemoveFromEventList+0x7c>)
 8004a02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d906      	bls.n	8004a1a <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	4b08      	ldr	r3, [pc, #32]	@ (8004a30 <xTaskRemoveFromEventList+0x80>)
 8004a10:	6018      	str	r0, [r3, #0]
}
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a14:	4629      	mov	r1, r5
 8004a16:	4807      	ldr	r0, [pc, #28]	@ (8004a34 <xTaskRemoveFromEventList+0x84>)
 8004a18:	e7f0      	b.n	80049fc <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 8004a1a:	2000      	movs	r0, #0
	return xReturn;
 8004a1c:	e7f9      	b.n	8004a12 <xTaskRemoveFromEventList+0x62>
 8004a1e:	bf00      	nop
 8004a20:	20019fcc 	.word	0x20019fcc
 8004a24:	20019fe8 	.word	0x20019fe8
 8004a28:	2001a064 	.word	0x2001a064
 8004a2c:	2001a4c4 	.word	0x2001a4c4
 8004a30:	20019fdc 	.word	0x20019fdc
 8004a34:	2001a020 	.word	0x2001a020

08004a38 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a38:	4b03      	ldr	r3, [pc, #12]	@ (8004a48 <vTaskInternalSetTimeOutState+0x10>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a3e:	4b03      	ldr	r3, [pc, #12]	@ (8004a4c <vTaskInternalSetTimeOutState+0x14>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6043      	str	r3, [r0, #4]
}
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20019fd8 	.word	0x20019fd8
 8004a4c:	20019fec 	.word	0x20019fec

08004a50 <xTaskCheckForTimeOut>:
{
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004a54:	4605      	mov	r5, r0
 8004a56:	b950      	cbnz	r0, 8004a6e <xTaskCheckForTimeOut+0x1e>
 8004a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5c:	b672      	cpsid	i
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	b662      	cpsie	i
 8004a6c:	e7fe      	b.n	8004a6c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8004a6e:	b951      	cbnz	r1, 8004a86 <xTaskCheckForTimeOut+0x36>
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	b672      	cpsid	i
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	b662      	cpsie	i
 8004a84:	e7fe      	b.n	8004a84 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8004a86:	f000 fb7d 	bl	8005184 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac8 <xTaskCheckForTimeOut+0x78>)
 8004a8c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	d010      	beq.n	8004ab6 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a94:	480d      	ldr	r0, [pc, #52]	@ (8004acc <xTaskCheckForTimeOut+0x7c>)
 8004a96:	682e      	ldr	r6, [r5, #0]
 8004a98:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a9a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a9c:	4286      	cmp	r6, r0
 8004a9e:	d001      	beq.n	8004aa4 <xTaskCheckForTimeOut+0x54>
 8004aa0:	428a      	cmp	r2, r1
 8004aa2:	d90f      	bls.n	8004ac4 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004aa4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004aa6:	4283      	cmp	r3, r0
 8004aa8:	d90a      	bls.n	8004ac0 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8004aaa:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004aac:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8004aae:	4413      	add	r3, r2
 8004ab0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ab2:	f7ff ffc1 	bl	8004a38 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8004ab6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004ab8:	f000 fb88 	bl	80051cc <vPortExitCritical>
}
 8004abc:	4620      	mov	r0, r4
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004ac4:	2401      	movs	r4, #1
 8004ac6:	e7f7      	b.n	8004ab8 <xTaskCheckForTimeOut+0x68>
 8004ac8:	20019fec 	.word	0x20019fec
 8004acc:	20019fd8 	.word	0x20019fd8

08004ad0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004ad0:	4b01      	ldr	r3, [pc, #4]	@ (8004ad8 <vTaskMissedYield+0x8>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
}
 8004ad6:	4770      	bx	lr
 8004ad8:	20019fdc 	.word	0x20019fdc

08004adc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8004adc:	4b01      	ldr	r3, [pc, #4]	@ (8004ae4 <xTaskGetCurrentTaskHandle+0x8>)
 8004ade:	6818      	ldr	r0, [r3, #0]
	}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	2001a4c4 	.word	0x2001a4c4

08004ae8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004ae8:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <xTaskGetSchedulerState+0x18>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	b133      	cbz	r3, 8004afc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aee:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <xTaskGetSchedulerState+0x1c>)
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	fab0 f080 	clz	r0, r0
 8004af6:	0940      	lsrs	r0, r0, #5
 8004af8:	0040      	lsls	r0, r0, #1
 8004afa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004afc:	2001      	movs	r0, #1
	}
 8004afe:	4770      	bx	lr
 8004b00:	20019fe4 	.word	0x20019fe4
 8004b04:	20019fcc 	.word	0x20019fcc

08004b08 <xTaskPriorityInherit>:
	{
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	b338      	cbz	r0, 8004b5e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b0e:	4d1a      	ldr	r5, [pc, #104]	@ (8004b78 <xTaskPriorityInherit+0x70>)
 8004b10:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004b12:	682a      	ldr	r2, [r5, #0]
 8004b14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d226      	bcs.n	8004b68 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b1a:	6982      	ldr	r2, [r0, #24]
 8004b1c:	2a00      	cmp	r2, #0
 8004b1e:	db04      	blt.n	8004b2a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b20:	682a      	ldr	r2, [r5, #0]
 8004b22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b24:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8004b28:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b2a:	2214      	movs	r2, #20
 8004b2c:	4e13      	ldr	r6, [pc, #76]	@ (8004b7c <xTaskPriorityInherit+0x74>)
 8004b2e:	fb02 6303 	mla	r3, r2, r3, r6
 8004b32:	6962      	ldr	r2, [r4, #20]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d113      	bne.n	8004b60 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b38:	1d27      	adds	r7, r4, #4
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f7fe fd5e 	bl	80035fc <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b40:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b42:	4a0f      	ldr	r2, [pc, #60]	@ (8004b80 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b46:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b48:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b4a:	428b      	cmp	r3, r1
 8004b4c:	d900      	bls.n	8004b50 <xTaskPriorityInherit+0x48>
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	2014      	movs	r0, #20
 8004b52:	4639      	mov	r1, r7
 8004b54:	fb00 6003 	mla	r0, r0, r3, r6
 8004b58:	f7fe fd2e 	bl	80035b8 <vListInsertEnd>
				xReturn = pdTRUE;
 8004b5c:	2001      	movs	r0, #1
	}
 8004b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b66:	e7f9      	b.n	8004b5c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8004b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6e:	4298      	cmp	r0, r3
 8004b70:	bf2c      	ite	cs
 8004b72:	2000      	movcs	r0, #0
 8004b74:	2001      	movcc	r0, #1
 8004b76:	e7f2      	b.n	8004b5e <xTaskPriorityInherit+0x56>
 8004b78:	2001a4c4 	.word	0x2001a4c4
 8004b7c:	2001a064 	.word	0x2001a064
 8004b80:	20019fe8 	.word	0x20019fe8

08004b84 <xTaskPriorityDisinherit>:
	{
 8004b84:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8004b86:	b908      	cbnz	r0, 8004b8c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8004b88:	2000      	movs	r0, #0
	}
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <xTaskPriorityDisinherit+0x80>)
 8004b8e:	681c      	ldr	r4, [r3, #0]
 8004b90:	4284      	cmp	r4, r0
 8004b92:	d00a      	beq.n	8004baa <xTaskPriorityDisinherit+0x26>
 8004b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b98:	b672      	cpsid	i
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	b662      	cpsie	i
 8004ba8:	e7fe      	b.n	8004ba8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8004baa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004bac:	b953      	cbnz	r3, 8004bc4 <xTaskPriorityDisinherit+0x40>
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	b672      	cpsid	i
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	b662      	cpsie	i
 8004bc2:	e7fe      	b.n	8004bc2 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bc4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8004bc6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bc8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8004bca:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bcc:	4291      	cmp	r1, r2
 8004bce:	d0db      	beq.n	8004b88 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1d9      	bne.n	8004b88 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bd4:	1d25      	adds	r5, r4, #4
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f7fe fd10 	bl	80035fc <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bdc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bde:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004be2:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004be6:	4a08      	ldr	r2, [pc, #32]	@ (8004c08 <xTaskPriorityDisinherit+0x84>)
 8004be8:	6811      	ldr	r1, [r2, #0]
 8004bea:	428b      	cmp	r3, r1
 8004bec:	d900      	bls.n	8004bf0 <xTaskPriorityDisinherit+0x6c>
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	4a06      	ldr	r2, [pc, #24]	@ (8004c0c <xTaskPriorityDisinherit+0x88>)
 8004bf2:	2014      	movs	r0, #20
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	fb00 2003 	mla	r0, r0, r3, r2
 8004bfa:	f7fe fcdd 	bl	80035b8 <vListInsertEnd>
					xReturn = pdTRUE;
 8004bfe:	2001      	movs	r0, #1
		return xReturn;
 8004c00:	e7c3      	b.n	8004b8a <xTaskPriorityDisinherit+0x6>
 8004c02:	bf00      	nop
 8004c04:	2001a4c4 	.word	0x2001a4c4
 8004c08:	20019fe8 	.word	0x20019fe8
 8004c0c:	2001a064 	.word	0x2001a064

08004c10 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8004c10:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8004c12:	4604      	mov	r4, r0
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d046      	beq.n	8004ca6 <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c18:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004c1a:	b952      	cbnz	r2, 8004c32 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8004c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c20:	b672      	cpsid	i
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	b662      	cpsie	i
 8004c30:	e7fe      	b.n	8004c30 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004c32:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8004c34:	4299      	cmp	r1, r3
 8004c36:	bf38      	it	cc
 8004c38:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004c3a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004c3c:	428b      	cmp	r3, r1
 8004c3e:	d032      	beq.n	8004ca6 <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004c40:	2a01      	cmp	r2, #1
 8004c42:	d130      	bne.n	8004ca6 <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 8004c44:	4a18      	ldr	r2, [pc, #96]	@ (8004ca8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	4282      	cmp	r2, r0
 8004c4a:	d10a      	bne.n	8004c62 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8004c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c50:	b672      	cpsid	i
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	b662      	cpsie	i
 8004c60:	e7fe      	b.n	8004c60 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c62:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c64:	4d11      	ldr	r5, [pc, #68]	@ (8004cac <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c66:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c68:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8004c6c:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c6e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c72:	bfa8      	it	ge
 8004c74:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c78:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c7a:	bfa8      	it	ge
 8004c7c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d111      	bne.n	8004ca6 <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c82:	1d06      	adds	r6, r0, #4
 8004c84:	4630      	mov	r0, r6
 8004c86:	f7fe fcb9 	bl	80035fc <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8004c8a:	4a09      	ldr	r2, [pc, #36]	@ (8004cb0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8004c8c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004c8e:	6811      	ldr	r1, [r2, #0]
 8004c90:	428b      	cmp	r3, r1
 8004c92:	d900      	bls.n	8004c96 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	2014      	movs	r0, #20
 8004c98:	4631      	mov	r1, r6
 8004c9a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8004c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8004ca2:	f7fe bc89 	b.w	80035b8 <vListInsertEnd>
	}
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	2001a4c4 	.word	0x2001a4c4
 8004cac:	2001a064 	.word	0x2001a064
 8004cb0:	20019fe8 	.word	0x20019fe8

08004cb4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004cb4:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <pvTaskIncrementMutexHeldCount+0x14>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	b11a      	cbz	r2, 8004cc2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004cba:	6819      	ldr	r1, [r3, #0]
 8004cbc:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004cbe:	3201      	adds	r2, #1
 8004cc0:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8004cc2:	6818      	ldr	r0, [r3, #0]
	}
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	2001a4c4 	.word	0x2001a4c4

08004ccc <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8004ccc:	4291      	cmp	r1, r2
{
 8004cce:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cd0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cd2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8004cd4:	d80a      	bhi.n	8004cec <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd6:	1ad2      	subs	r2, r2, r3
 8004cd8:	6983      	ldr	r3, [r0, #24]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d20d      	bcs.n	8004cfa <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004cde:	1d01      	adds	r1, r0, #4
 8004ce0:	4b07      	ldr	r3, [pc, #28]	@ (8004d00 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	f7fe fc73 	bl	80035ce <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8004ce8:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8004cea:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d201      	bcs.n	8004cf4 <prvInsertTimerInActiveList+0x28>
 8004cf0:	4299      	cmp	r1, r3
 8004cf2:	d202      	bcs.n	8004cfa <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cf4:	1d01      	adds	r1, r0, #4
 8004cf6:	4b03      	ldr	r3, [pc, #12]	@ (8004d04 <prvInsertTimerInActiveList+0x38>)
 8004cf8:	e7f3      	b.n	8004ce2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8004cfa:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8004cfc:	e7f5      	b.n	8004cea <prvInsertTimerInActiveList+0x1e>
 8004cfe:	bf00      	nop
 8004d00:	2001a5c4 	.word	0x2001a5c4
 8004d04:	2001a5c8 	.word	0x2001a5c8

08004d08 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8004d0a:	4c11      	ldr	r4, [pc, #68]	@ (8004d50 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8004d0c:	f000 fa3a 	bl	8005184 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8004d10:	6825      	ldr	r5, [r4, #0]
 8004d12:	b9bd      	cbnz	r5, 8004d44 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d14:	4f0f      	ldr	r7, [pc, #60]	@ (8004d54 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8004d16:	4e10      	ldr	r6, [pc, #64]	@ (8004d58 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8004d18:	4638      	mov	r0, r7
 8004d1a:	f7fe fc3f 	bl	800359c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f7fe fc3c 	bl	800359c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d24:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d26:	4a0e      	ldr	r2, [pc, #56]	@ (8004d60 <prvCheckForValidListAndQueue+0x58>)
 8004d28:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8004d2a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d2c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d64 <prvCheckForValidListAndQueue+0x5c>)
 8004d30:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d32:	4b0d      	ldr	r3, [pc, #52]	@ (8004d68 <prvCheckForValidListAndQueue+0x60>)
 8004d34:	9500      	str	r5, [sp, #0]
 8004d36:	f7fe fd89 	bl	800384c <xQueueGenericCreateStatic>
 8004d3a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d3c:	b110      	cbz	r0, 8004d44 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d3e:	490b      	ldr	r1, [pc, #44]	@ (8004d6c <prvCheckForValidListAndQueue+0x64>)
 8004d40:	f7ff f9d6 	bl	80040f0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8004d44:	b003      	add	sp, #12
 8004d46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8004d4a:	f000 ba3f 	b.w	80051cc <vPortExitCritical>
 8004d4e:	bf00      	nop
 8004d50:	2001a5c0 	.word	0x2001a5c0
 8004d54:	2001a5e0 	.word	0x2001a5e0
 8004d58:	2001a5cc 	.word	0x2001a5cc
 8004d5c:	2001a5c8 	.word	0x2001a5c8
 8004d60:	2001a518 	.word	0x2001a518
 8004d64:	2001a5c4 	.word	0x2001a5c4
 8004d68:	2001a4c8 	.word	0x2001a4c8
 8004d6c:	0800f265 	.word	0x0800f265

08004d70 <xTimerCreateTimerTask>:
{
 8004d70:	b510      	push	{r4, lr}
 8004d72:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8004d74:	f7ff ffc8 	bl	8004d08 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8004d78:	4b13      	ldr	r3, [pc, #76]	@ (8004dc8 <xTimerCreateTimerTask+0x58>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	b1b3      	cbz	r3, 8004dac <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d7e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d80:	aa07      	add	r2, sp, #28
 8004d82:	a906      	add	r1, sp, #24
 8004d84:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d86:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d8a:	f7fe fbfb 	bl	8003584 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d8e:	9b05      	ldr	r3, [sp, #20]
 8004d90:	9a07      	ldr	r2, [sp, #28]
 8004d92:	9302      	str	r3, [sp, #8]
 8004d94:	9b06      	ldr	r3, [sp, #24]
 8004d96:	490d      	ldr	r1, [pc, #52]	@ (8004dcc <xTimerCreateTimerTask+0x5c>)
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	480c      	ldr	r0, [pc, #48]	@ (8004dd0 <xTimerCreateTimerTask+0x60>)
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	4623      	mov	r3, r4
 8004da2:	f7ff fb7d 	bl	80044a0 <xTaskCreateStatic>
 8004da6:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <xTimerCreateTimerTask+0x64>)
 8004da8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8004daa:	b950      	cbnz	r0, 8004dc2 <xTimerCreateTimerTask+0x52>
 8004dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db0:	b672      	cpsid	i
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	b662      	cpsie	i
	configASSERT( xReturn );
 8004dc0:	e7fe      	b.n	8004dc0 <xTimerCreateTimerTask+0x50>
}
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	b008      	add	sp, #32
 8004dc6:	bd10      	pop	{r4, pc}
 8004dc8:	2001a5c0 	.word	0x2001a5c0
 8004dcc:	0800f26a 	.word	0x0800f26a
 8004dd0:	08004ed9 	.word	0x08004ed9
 8004dd4:	2001a5bc 	.word	0x2001a5bc

08004dd8 <xTimerGenericCommand>:
{
 8004dd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004dda:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8004ddc:	4604      	mov	r4, r0
{
 8004dde:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8004de0:	b950      	cbnz	r0, 8004df8 <xTimerGenericCommand+0x20>
 8004de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de6:	b672      	cpsid	i
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	b662      	cpsie	i
 8004df6:	e7fe      	b.n	8004df6 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 8004df8:	4d0c      	ldr	r5, [pc, #48]	@ (8004e2c <xTimerGenericCommand+0x54>)
 8004dfa:	6828      	ldr	r0, [r5, #0]
 8004dfc:	b178      	cbz	r0, 8004e1e <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dfe:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e00:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e02:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e06:	dc0c      	bgt.n	8004e22 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e08:	f7ff fe6e 	bl	8004ae8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e0c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e0e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e10:	4669      	mov	r1, sp
 8004e12:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e14:	bf0c      	ite	eq
 8004e16:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e18:	461a      	movne	r2, r3
 8004e1a:	f7fe fd9c 	bl	8003956 <xQueueGenericSend>
}
 8004e1e:	b004      	add	sp, #16
 8004e20:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e22:	2300      	movs	r3, #0
 8004e24:	4669      	mov	r1, sp
 8004e26:	f7fe fea3 	bl	8003b70 <xQueueGenericSendFromISR>
 8004e2a:	e7f8      	b.n	8004e1e <xTimerGenericCommand+0x46>
 8004e2c:	2001a5c0 	.word	0x2001a5c0

08004e30 <prvSampleTimeNow>:
{
 8004e30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8004e34:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8004ed4 <prvSampleTimeNow+0xa4>
{
 8004e38:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8004e3a:	f7ff fbf9 	bl	8004630 <xTaskGetTickCount>
 8004e3e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8004e40:	f8d8 3000 	ldr.w	r3, [r8]
 8004e44:	4283      	cmp	r3, r0
 8004e46:	d909      	bls.n	8004e5c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e48:	4f20      	ldr	r7, [pc, #128]	@ (8004ecc <prvSampleTimeNow+0x9c>)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	b96a      	cbnz	r2, 8004e6c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8004e50:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed0 <prvSampleTimeNow+0xa0>)
 8004e52:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8004e58:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8004e5a:	e000      	b.n	8004e5e <prvSampleTimeNow+0x2e>
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8004e60:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8004e62:	f8c8 5000 	str.w	r5, [r8]
}
 8004e66:	b002      	add	sp, #8
 8004e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e6c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e6e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e70:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e74:	f104 0a04 	add.w	sl, r4, #4
 8004e78:	4650      	mov	r0, sl
 8004e7a:	f7fe fbbf 	bl	80035fc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e7e:	6a23      	ldr	r3, [r4, #32]
 8004e80:	4620      	mov	r0, r4
 8004e82:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e84:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004e88:	075b      	lsls	r3, r3, #29
 8004e8a:	d5de      	bpl.n	8004e4a <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e8c:	69a3      	ldr	r3, [r4, #24]
 8004e8e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8004e90:	4599      	cmp	r9, r3
 8004e92:	d206      	bcs.n	8004ea2 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e94:	4651      	mov	r1, sl
 8004e96:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e98:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e9a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e9c:	f7fe fb97 	bl	80035ce <vListInsert>
 8004ea0:	e7d3      	b.n	8004e4a <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	464a      	mov	r2, r9
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	f7ff ff94 	bl	8004dd8 <xTimerGenericCommand>
				configASSERT( xResult );
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d1ca      	bne.n	8004e4a <prvSampleTimeNow+0x1a>
 8004eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb8:	b672      	cpsid	i
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	b662      	cpsie	i
 8004ec8:	e7fe      	b.n	8004ec8 <prvSampleTimeNow+0x98>
 8004eca:	bf00      	nop
 8004ecc:	2001a5c8 	.word	0x2001a5c8
 8004ed0:	2001a5c4 	.word	0x2001a5c4
 8004ed4:	2001a5b8 	.word	0x2001a5b8

08004ed8 <prvTimerTask>:
{
 8004ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004edc:	4d71      	ldr	r5, [pc, #452]	@ (80050a4 <prvTimerTask+0x1cc>)
{
 8004ede:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ee0:	4e71      	ldr	r6, [pc, #452]	@ (80050a8 <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ee2:	682b      	ldr	r3, [r5, #0]
 8004ee4:	f8d3 8000 	ldr.w	r8, [r3]
 8004ee8:	f1b8 0f00 	cmp.w	r8, #0
 8004eec:	d037      	beq.n	8004f5e <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eee:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ef0:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ef2:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8004ef6:	f7ff fb93 	bl	8004620 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004efa:	a804      	add	r0, sp, #16
 8004efc:	f7ff ff98 	bl	8004e30 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8004f00:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f02:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d16b      	bne.n	8004fe0 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f08:	2c00      	cmp	r4, #0
 8004f0a:	d14e      	bne.n	8004faa <prvTimerTask+0xd2>
 8004f0c:	4540      	cmp	r0, r8
 8004f0e:	d352      	bcc.n	8004fb6 <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8004f10:	f7ff fc34 	bl	800477c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f1a:	1d38      	adds	r0, r7, #4
 8004f1c:	f7fe fb6e 	bl	80035fc <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f24:	0758      	lsls	r0, r3, #29
 8004f26:	d51c      	bpl.n	8004f62 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f28:	69b9      	ldr	r1, [r7, #24]
 8004f2a:	4643      	mov	r3, r8
 8004f2c:	464a      	mov	r2, r9
 8004f2e:	4638      	mov	r0, r7
 8004f30:	4441      	add	r1, r8
 8004f32:	f7ff fecb 	bl	8004ccc <prvInsertTimerInActiveList>
 8004f36:	b1c0      	cbz	r0, 8004f6a <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f38:	4623      	mov	r3, r4
 8004f3a:	4642      	mov	r2, r8
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	4638      	mov	r0, r7
 8004f40:	9400      	str	r4, [sp, #0]
 8004f42:	f7ff ff49 	bl	8004dd8 <xTimerGenericCommand>
			configASSERT( xResult );
 8004f46:	b980      	cbnz	r0, 8004f6a <prvTimerTask+0x92>
 8004f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4c:	b672      	cpsid	i
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	b662      	cpsie	i
 8004f5c:	e7fe      	b.n	8004f5c <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f5e:	2401      	movs	r4, #1
 8004f60:	e7c9      	b.n	8004ef6 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f70:	2200      	movs	r2, #0
 8004f72:	a904      	add	r1, sp, #16
 8004f74:	6830      	ldr	r0, [r6, #0]
 8004f76:	f7fe feb8 	bl	8003cea <xQueueReceive>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d0b1      	beq.n	8004ee2 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f7e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f80:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	db2f      	blt.n	8004fe6 <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f86:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f88:	6963      	ldr	r3, [r4, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d132      	bne.n	8004ff4 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f8e:	a803      	add	r0, sp, #12
 8004f90:	f7ff ff4e 	bl	8004e30 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8004f94:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f96:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8004f98:	2b09      	cmp	r3, #9
 8004f9a:	d8e9      	bhi.n	8004f70 <prvTimerTask+0x98>
 8004f9c:	e8df f003 	tbb	[pc, r3]
 8004fa0:	592e2e2e 	.word	0x592e2e2e
 8004fa4:	2e2e7a60 	.word	0x2e2e7a60
 8004fa8:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004faa:	4b40      	ldr	r3, [pc, #256]	@ (80050ac <prvTimerTask+0x1d4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681c      	ldr	r4, [r3, #0]
 8004fb0:	fab4 f484 	clz	r4, r4
 8004fb4:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	eba8 0109 	sub.w	r1, r8, r9
 8004fbc:	6830      	ldr	r0, [r6, #0]
 8004fbe:	f7ff f8d8 	bl	8004172 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004fc2:	f7ff fbdb 	bl	800477c <xTaskResumeAll>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d1d2      	bne.n	8004f70 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 8004fca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	e7c7      	b.n	8004f70 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 8004fe0:	f7ff fbcc 	bl	800477c <xTaskResumeAll>
}
 8004fe4:	e7c4      	b.n	8004f70 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fe6:	9b05      	ldr	r3, [sp, #20]
 8004fe8:	9907      	ldr	r1, [sp, #28]
 8004fea:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fec:	9b04      	ldr	r3, [sp, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	dbbe      	blt.n	8004f70 <prvTimerTask+0x98>
 8004ff2:	e7c8      	b.n	8004f86 <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ff4:	1d20      	adds	r0, r4, #4
 8004ff6:	f7fe fb01 	bl	80035fc <uxListRemove>
 8004ffa:	e7c8      	b.n	8004f8e <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ffc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005000:	4620      	mov	r0, r4
 8005002:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800500c:	9b05      	ldr	r3, [sp, #20]
 800500e:	4419      	add	r1, r3
 8005010:	f7ff fe5c 	bl	8004ccc <prvInsertTimerInActiveList>
 8005014:	2800      	cmp	r0, #0
 8005016:	d0ab      	beq.n	8004f70 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005018:	6a23      	ldr	r3, [r4, #32]
 800501a:	4620      	mov	r0, r4
 800501c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800501e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005022:	0759      	lsls	r1, r3, #29
 8005024:	d5a4      	bpl.n	8004f70 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005026:	69a2      	ldr	r2, [r4, #24]
 8005028:	2300      	movs	r3, #0
 800502a:	9905      	ldr	r1, [sp, #20]
 800502c:	4620      	mov	r0, r4
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	440a      	add	r2, r1
 8005032:	4619      	mov	r1, r3
 8005034:	f7ff fed0 	bl	8004dd8 <xTimerGenericCommand>
							configASSERT( xResult );
 8005038:	2800      	cmp	r0, #0
 800503a:	d199      	bne.n	8004f70 <prvTimerTask+0x98>
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	b672      	cpsid	i
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	b662      	cpsie	i
 8005050:	e7fe      	b.n	8005050 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005052:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800505e:	e787      	b.n	8004f70 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005060:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800506c:	9905      	ldr	r1, [sp, #20]
 800506e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005070:	b951      	cbnz	r1, 8005088 <prvTimerTask+0x1b0>
 8005072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005076:	b672      	cpsid	i
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	b662      	cpsie	i
 8005086:	e7fe      	b.n	8005086 <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005088:	4603      	mov	r3, r0
 800508a:	4401      	add	r1, r0
 800508c:	4620      	mov	r0, r4
 800508e:	f7ff fe1d 	bl	8004ccc <prvInsertTimerInActiveList>
					break;
 8005092:	e76d      	b.n	8004f70 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005094:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005098:	079a      	lsls	r2, r3, #30
 800509a:	d4dc      	bmi.n	8005056 <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 800509c:	4620      	mov	r0, r4
 800509e:	f000 fa59 	bl	8005554 <vPortFree>
 80050a2:	e765      	b.n	8004f70 <prvTimerTask+0x98>
 80050a4:	2001a5c8 	.word	0x2001a5c8
 80050a8:	2001a5c0 	.word	0x2001a5c0
 80050ac:	2001a5c4 	.word	0x2001a5c4

080050b0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050b0:	4808      	ldr	r0, [pc, #32]	@ (80050d4 <prvPortStartFirstTask+0x24>)
 80050b2:	6800      	ldr	r0, [r0, #0]
 80050b4:	6800      	ldr	r0, [r0, #0]
 80050b6:	f380 8808 	msr	MSP, r0
 80050ba:	f04f 0000 	mov.w	r0, #0
 80050be:	f380 8814 	msr	CONTROL, r0
 80050c2:	b662      	cpsie	i
 80050c4:	b661      	cpsie	f
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	df00      	svc	0
 80050d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050d2:	0000      	.short	0x0000
 80050d4:	e000ed08 	.word	0xe000ed08

080050d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80050e8 <vPortEnableVFP+0x10>
 80050dc:	6801      	ldr	r1, [r0, #0]
 80050de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80050e2:	6001      	str	r1, [r0, #0]
 80050e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050e6:	0000      	.short	0x0000
 80050e8:	e000ed88 	.word	0xe000ed88

080050ec <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80050ec:	2300      	movs	r3, #0
{
 80050ee:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80050f0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80050f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005130 <prvTaskExitError+0x44>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3301      	adds	r3, #1
 80050f8:	d00a      	beq.n	8005110 <prvTaskExitError+0x24>
 80050fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fe:	b672      	cpsid	i
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	b662      	cpsie	i
 800510e:	e7fe      	b.n	800510e <prvTaskExitError+0x22>
 8005110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005114:	b672      	cpsid	i
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	b662      	cpsie	i
	while( ulDummy == 0 )
 8005124:	9b01      	ldr	r3, [sp, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0fc      	beq.n	8005124 <prvTaskExitError+0x38>
}
 800512a:	b002      	add	sp, #8
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000034 	.word	0x20000034

08005134 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005134:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005138:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800513c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005140:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005142:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005144:	4b03      	ldr	r3, [pc, #12]	@ (8005154 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005146:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005148:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800514a:	f06f 0302 	mvn.w	r3, #2
 800514e:	6203      	str	r3, [r0, #32]
}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	080050ed 	.word	0x080050ed
	...

08005160 <SVC_Handler>:
	__asm volatile (
 8005160:	4b07      	ldr	r3, [pc, #28]	@ (8005180 <pxCurrentTCBConst2>)
 8005162:	6819      	ldr	r1, [r3, #0]
 8005164:	6808      	ldr	r0, [r1, #0]
 8005166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	f380 8809 	msr	PSP, r0
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f04f 0000 	mov.w	r0, #0
 8005176:	f380 8811 	msr	BASEPRI, r0
 800517a:	4770      	bx	lr
 800517c:	f3af 8000 	nop.w

08005180 <pxCurrentTCBConst2>:
 8005180:	2001a4c4 	.word	0x2001a4c4

08005184 <vPortEnterCritical>:
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	b672      	cpsid	i
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	b662      	cpsie	i
	uxCriticalNesting++;
 8005198:	4a0b      	ldr	r2, [pc, #44]	@ (80051c8 <vPortEnterCritical+0x44>)
 800519a:	6813      	ldr	r3, [r2, #0]
 800519c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800519e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80051a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80051a2:	d110      	bne.n	80051c6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80051a8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	b153      	cbz	r3, 80051c6 <vPortEnterCritical+0x42>
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	b672      	cpsid	i
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	b662      	cpsie	i
 80051c4:	e7fe      	b.n	80051c4 <vPortEnterCritical+0x40>
}
 80051c6:	4770      	bx	lr
 80051c8:	20000034 	.word	0x20000034

080051cc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80051cc:	4a09      	ldr	r2, [pc, #36]	@ (80051f4 <vPortExitCritical+0x28>)
 80051ce:	6813      	ldr	r3, [r2, #0]
 80051d0:	b953      	cbnz	r3, 80051e8 <vPortExitCritical+0x1c>
 80051d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d6:	b672      	cpsid	i
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	b662      	cpsie	i
 80051e6:	e7fe      	b.n	80051e6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80051e8:	3b01      	subs	r3, #1
 80051ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051ec:	b90b      	cbnz	r3, 80051f2 <vPortExitCritical+0x26>
	__asm volatile
 80051ee:	f383 8811 	msr	BASEPRI, r3
}
 80051f2:	4770      	bx	lr
 80051f4:	20000034 	.word	0x20000034
	...

08005200 <PendSV_Handler>:
	__asm volatile
 8005200:	f3ef 8009 	mrs	r0, PSP
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <pxCurrentTCBConst>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f01e 0f10 	tst.w	lr, #16
 8005210:	bf08      	it	eq
 8005212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	6010      	str	r0, [r2, #0]
 800521c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005224:	b672      	cpsid	i
 8005226:	f380 8811 	msr	BASEPRI, r0
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	b662      	cpsie	i
 8005234:	f7ff fb3e 	bl	80048b4 <vTaskSwitchContext>
 8005238:	f04f 0000 	mov.w	r0, #0
 800523c:	f380 8811 	msr	BASEPRI, r0
 8005240:	bc09      	pop	{r0, r3}
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	f01e 0f10 	tst.w	lr, #16
 800524e:	bf08      	it	eq
 8005250:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005254:	f380 8809 	msr	PSP, r0
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop

08005260 <pxCurrentTCBConst>:
 8005260:	2001a4c4 	.word	0x2001a4c4

08005264 <SysTick_Handler>:
{
 8005264:	b508      	push	{r3, lr}
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526a:	b672      	cpsid	i
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800527a:	f7ff f9e7 	bl	800464c <xTaskIncrementTick>
 800527e:	b128      	cbz	r0, 800528c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005280:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005288:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800528c:	2300      	movs	r3, #0
 800528e:	f383 8811 	msr	BASEPRI, r3
}
 8005292:	bd08      	pop	{r3, pc}

08005294 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005294:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8005298:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800529a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800529e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052a0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052a2:	4b04      	ldr	r3, [pc, #16]	@ (80052b4 <vPortSetupTimerInterrupt+0x20>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80052aa:	3b01      	subs	r3, #1
 80052ac:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ae:	2307      	movs	r3, #7
 80052b0:	6113      	str	r3, [r2, #16]
}
 80052b2:	4770      	bx	lr
 80052b4:	20000014 	.word	0x20000014

080052b8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052b8:	4b2c      	ldr	r3, [pc, #176]	@ (800536c <xPortStartScheduler+0xb4>)
{
 80052ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052bc:	781a      	ldrb	r2, [r3, #0]
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052c2:	22ff      	movs	r2, #255	@ 0xff
 80052c4:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052c6:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052c8:	4a29      	ldr	r2, [pc, #164]	@ (8005370 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80052d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052d8:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052da:	2307      	movs	r3, #7
 80052dc:	4a25      	ldr	r2, [pc, #148]	@ (8005374 <xPortStartScheduler+0xbc>)
 80052de:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052e0:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80052e4:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052e6:	0609      	lsls	r1, r1, #24
 80052e8:	d40c      	bmi.n	8005304 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d013      	beq.n	8005316 <xPortStartScheduler+0x5e>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	b672      	cpsid	i
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	b662      	cpsie	i
 8005302:	e7fe      	b.n	8005302 <xPortStartScheduler+0x4a>
			ulMaxPRIGROUPValue--;
 8005304:	3b01      	subs	r3, #1
 8005306:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005308:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f88d 3003 	strb.w	r3, [sp, #3]
 8005314:	e7e4      	b.n	80052e0 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005316:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800531a:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800531e:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005320:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	4a11      	ldr	r2, [pc, #68]	@ (800536c <xPortStartScheduler+0xb4>)
 8005326:	b2db      	uxtb	r3, r3
 8005328:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800532a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800532e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005332:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005336:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800533a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800533e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8005342:	f7ff ffa7 	bl	8005294 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005346:	4b0c      	ldr	r3, [pc, #48]	@ (8005378 <xPortStartScheduler+0xc0>)
 8005348:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800534a:	f7ff fec5 	bl	80050d8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800534e:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8005352:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005356:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800535a:	f7ff fea9 	bl	80050b0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800535e:	f7ff faa9 	bl	80048b4 <vTaskSwitchContext>
}
 8005362:	4628      	mov	r0, r5
	prvTaskExitError();
 8005364:	f7ff fec2 	bl	80050ec <prvTaskExitError>
}
 8005368:	b003      	add	sp, #12
 800536a:	bd30      	pop	{r4, r5, pc}
 800536c:	e000e400 	.word	0xe000e400
 8005370:	2001a5f8 	.word	0x2001a5f8
 8005374:	2001a5f4 	.word	0x2001a5f4
 8005378:	20000034 	.word	0x20000034

0800537c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800537c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005380:	2b0f      	cmp	r3, #15
 8005382:	d910      	bls.n	80053a6 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005384:	4a13      	ldr	r2, [pc, #76]	@ (80053d4 <vPortValidateInterruptPriority+0x58>)
 8005386:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005388:	4a13      	ldr	r2, [pc, #76]	@ (80053d8 <vPortValidateInterruptPriority+0x5c>)
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d90a      	bls.n	80053a6 <vPortValidateInterruptPriority+0x2a>
 8005390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005394:	b672      	cpsid	i
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	b662      	cpsie	i
 80053a4:	e7fe      	b.n	80053a4 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80053aa:	4a0c      	ldr	r2, [pc, #48]	@ (80053dc <vPortValidateInterruptPriority+0x60>)
 80053ac:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d90a      	bls.n	80053d0 <vPortValidateInterruptPriority+0x54>
 80053ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053be:	b672      	cpsid	i
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	b662      	cpsie	i
 80053ce:	e7fe      	b.n	80053ce <vPortValidateInterruptPriority+0x52>
	}
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	e000e3f0 	.word	0xe000e3f0
 80053d8:	2001a5f8 	.word	0x2001a5f8
 80053dc:	2001a5f4 	.word	0x2001a5f4

080053e0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053e0:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <prvInsertBlockIntoFreeList+0x44>)
{
 80053e2:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053e4:	461a      	mov	r2, r3
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4283      	cmp	r3, r0
 80053ea:	d3fb      	bcc.n	80053e4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053ec:	6854      	ldr	r4, [r2, #4]
 80053ee:	1911      	adds	r1, r2, r4
 80053f0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053f2:	bf01      	itttt	eq
 80053f4:	6841      	ldreq	r1, [r0, #4]
 80053f6:	4610      	moveq	r0, r2
 80053f8:	1909      	addeq	r1, r1, r4
 80053fa:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053fc:	6844      	ldr	r4, [r0, #4]
 80053fe:	1901      	adds	r1, r0, r4
 8005400:	428b      	cmp	r3, r1
 8005402:	d10c      	bne.n	800541e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005404:	4908      	ldr	r1, [pc, #32]	@ (8005428 <prvInsertBlockIntoFreeList+0x48>)
 8005406:	6809      	ldr	r1, [r1, #0]
 8005408:	428b      	cmp	r3, r1
 800540a:	d003      	beq.n	8005414 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800540c:	6859      	ldr	r1, [r3, #4]
 800540e:	4421      	add	r1, r4
 8005410:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005412:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005414:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005416:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005418:	bf18      	it	ne
 800541a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800541c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800541e:	4619      	mov	r1, r3
 8005420:	e7f8      	b.n	8005414 <prvInsertBlockIntoFreeList+0x34>
 8005422:	bf00      	nop
 8005424:	2001a60c 	.word	0x2001a60c
 8005428:	2001a608 	.word	0x2001a608

0800542c <pvPortMalloc>:
{
 800542c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005430:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005432:	f7ff f8f5 	bl	8004620 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005436:	4940      	ldr	r1, [pc, #256]	@ (8005538 <pvPortMalloc+0x10c>)
 8005438:	4d40      	ldr	r5, [pc, #256]	@ (800553c <pvPortMalloc+0x110>)
 800543a:	680b      	ldr	r3, [r1, #0]
 800543c:	b9fb      	cbnz	r3, 800547e <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 800543e:	4a40      	ldr	r2, [pc, #256]	@ (8005540 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8005440:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005442:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005444:	4e3f      	ldr	r6, [pc, #252]	@ (8005544 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005446:	bf1a      	itte	ne
 8005448:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800544a:	4b3f      	ldrne	r3, [pc, #252]	@ (8005548 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800544c:	f64f 73ff 	movweq	r3, #65535	@ 0xffff
	xStart.xBlockSize = ( size_t ) 0;
 8005450:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005452:	bf1c      	itt	ne
 8005454:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005458:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800545a:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800545c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800545e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005460:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8005464:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005468:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800546a:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800546c:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005470:	4b36      	ldr	r3, [pc, #216]	@ (800554c <pvPortMalloc+0x120>)
 8005472:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005474:	4b36      	ldr	r3, [pc, #216]	@ (8005550 <pvPortMalloc+0x124>)
 8005476:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005478:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800547c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800547e:	682e      	ldr	r6, [r5, #0]
 8005480:	4226      	tst	r6, r4
 8005482:	d154      	bne.n	800552e <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 8005484:	2c00      	cmp	r4, #0
 8005486:	d043      	beq.n	8005510 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8005488:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800548c:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800548e:	bf1c      	itt	ne
 8005490:	f023 0307 	bicne.w	r3, r3, #7
 8005494:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005496:	2b00      	cmp	r3, #0
 8005498:	d049      	beq.n	800552e <pvPortMalloc+0x102>
 800549a:	4f2d      	ldr	r7, [pc, #180]	@ (8005550 <pvPortMalloc+0x124>)
 800549c:	683c      	ldr	r4, [r7, #0]
 800549e:	429c      	cmp	r4, r3
 80054a0:	d345      	bcc.n	800552e <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 80054a2:	4a28      	ldr	r2, [pc, #160]	@ (8005544 <pvPortMalloc+0x118>)
 80054a4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054a6:	6868      	ldr	r0, [r5, #4]
 80054a8:	4298      	cmp	r0, r3
 80054aa:	d204      	bcs.n	80054b6 <pvPortMalloc+0x8a>
 80054ac:	f8d5 c000 	ldr.w	ip, [r5]
 80054b0:	f1bc 0f00 	cmp.w	ip, #0
 80054b4:	d117      	bne.n	80054e6 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80054b6:	6809      	ldr	r1, [r1, #0]
 80054b8:	42a9      	cmp	r1, r5
 80054ba:	d038      	beq.n	800552e <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054bc:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054be:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054c2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054c4:	1ac2      	subs	r2, r0, r3
 80054c6:	2a10      	cmp	r2, #16
 80054c8:	d914      	bls.n	80054f4 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054ca:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054cc:	0741      	lsls	r1, r0, #29
 80054ce:	d00d      	beq.n	80054ec <pvPortMalloc+0xc0>
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	b672      	cpsid	i
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	b662      	cpsie	i
 80054e4:	e7fe      	b.n	80054e4 <pvPortMalloc+0xb8>
 80054e6:	462a      	mov	r2, r5
 80054e8:	4665      	mov	r5, ip
 80054ea:	e7dc      	b.n	80054a6 <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054ec:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054ee:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054f0:	f7ff ff76 	bl	80053e0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054f4:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054f6:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054f8:	4914      	ldr	r1, [pc, #80]	@ (800554c <pvPortMalloc+0x120>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054fa:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054fc:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054fe:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005500:	603c      	str	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005502:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005504:	606e      	str	r6, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005506:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005508:	bf38      	it	cc
 800550a:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800550c:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8005510:	f7ff f934 	bl	800477c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005514:	0763      	lsls	r3, r4, #29
 8005516:	d00c      	beq.n	8005532 <pvPortMalloc+0x106>
 8005518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551c:	b672      	cpsid	i
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	b662      	cpsie	i
 800552c:	e7fe      	b.n	800552c <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800552e:	2400      	movs	r4, #0
 8005530:	e7ee      	b.n	8005510 <pvPortMalloc+0xe4>
}
 8005532:	4620      	mov	r0, r4
 8005534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005538:	2001a608 	.word	0x2001a608
 800553c:	2001a5fc 	.word	0x2001a5fc
 8005540:	2001a614 	.word	0x2001a614
 8005544:	2001a60c 	.word	0x2001a60c
 8005548:	2002a613 	.word	0x2002a613
 800554c:	2001a600 	.word	0x2001a600
 8005550:	2001a604 	.word	0x2001a604

08005554 <vPortFree>:
{
 8005554:	b510      	push	{r4, lr}
	if( pv != NULL )
 8005556:	4604      	mov	r4, r0
 8005558:	2800      	cmp	r0, #0
 800555a:	d032      	beq.n	80055c2 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800555c:	4a19      	ldr	r2, [pc, #100]	@ (80055c4 <vPortFree+0x70>)
 800555e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	4213      	tst	r3, r2
 8005566:	d10a      	bne.n	800557e <vPortFree+0x2a>
 8005568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556c:	b672      	cpsid	i
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	b662      	cpsie	i
 800557c:	e7fe      	b.n	800557c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800557e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005582:	b151      	cbz	r1, 800559a <vPortFree+0x46>
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	b672      	cpsid	i
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	b662      	cpsie	i
 8005598:	e7fe      	b.n	8005598 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800559a:	ea23 0302 	bic.w	r3, r3, r2
 800559e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80055a2:	f7ff f83d 	bl	8004620 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055a6:	4a08      	ldr	r2, [pc, #32]	@ (80055c8 <vPortFree+0x74>)
 80055a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055ac:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055b0:	6811      	ldr	r1, [r2, #0]
 80055b2:	440b      	add	r3, r1
 80055b4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055b6:	f7ff ff13 	bl	80053e0 <prvInsertBlockIntoFreeList>
}
 80055ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80055be:	f7ff b8dd 	b.w	800477c <xTaskResumeAll>
}
 80055c2:	bd10      	pop	{r4, pc}
 80055c4:	2001a5fc 	.word	0x2001a5fc
 80055c8:	2001a604 	.word	0x2001a604

080055cc <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80055cc:	680a      	ldr	r2, [r1, #0]
{
 80055ce:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80055d0:	320c      	adds	r2, #12
{
 80055d2:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80055d4:	f001 fba4 	bl	8006d20 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80055d8:	b908      	cbnz	r0, 80055de <netconn_apimsg+0x12>
    return apimsg->err;
 80055da:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 80055de:	bd10      	pop	{r4, pc}

080055e0 <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80055e0:	b508      	push	{r3, lr}
 80055e2:	460b      	mov	r3, r1
 80055e4:	4611      	mov	r1, r2
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80055e6:	b158      	cbz	r0, 8005600 <netconn_tcp_recvd_msg+0x20>
 80055e8:	7802      	ldrb	r2, [r0, #0]
 80055ea:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80055ee:	2a10      	cmp	r2, #16
 80055f0:	d106      	bne.n	8005600 <netconn_tcp_recvd_msg+0x20>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80055f2:	6008      	str	r0, [r1, #0]
  msg->msg.r.len = len;
 80055f4:	608b      	str	r3, [r1, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80055f6:	4807      	ldr	r0, [pc, #28]	@ (8005614 <netconn_tcp_recvd_msg+0x34>)
}
 80055f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80055fc:	f7ff bfe6 	b.w	80055cc <netconn_apimsg>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005600:	4b05      	ldr	r3, [pc, #20]	@ (8005618 <netconn_tcp_recvd_msg+0x38>)
 8005602:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8005606:	4905      	ldr	r1, [pc, #20]	@ (800561c <netconn_tcp_recvd_msg+0x3c>)
 8005608:	4805      	ldr	r0, [pc, #20]	@ (8005620 <netconn_tcp_recvd_msg+0x40>)
 800560a:	f008 fed5 	bl	800e3b8 <iprintf>
}
 800560e:	f06f 000f 	mvn.w	r0, #15
 8005612:	bd08      	pop	{r3, pc}
 8005614:	08006911 	.word	0x08006911
 8005618:	0800f272 	.word	0x0800f272
 800561c:	0800f2a4 	.word	0x0800f2a4
 8005620:	0800f15a 	.word	0x0800f15a

08005624 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8005624:	b500      	push	{lr}
 8005626:	b089      	sub	sp, #36	@ 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005628:	b958      	cbnz	r0, 8005642 <netconn_close_shutdown+0x1e>
 800562a:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <netconn_close_shutdown+0x34>)
 800562c:	f240 4247 	movw	r2, #1095	@ 0x447
 8005630:	490a      	ldr	r1, [pc, #40]	@ (800565c <netconn_close_shutdown+0x38>)
 8005632:	480b      	ldr	r0, [pc, #44]	@ (8005660 <netconn_close_shutdown+0x3c>)
 8005634:	f008 fec0 	bl	800e3b8 <iprintf>
 8005638:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 800563c:	b009      	add	sp, #36	@ 0x24
 800563e:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005642:	2329      	movs	r3, #41	@ 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8005644:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8005646:	f88d 1008 	strb.w	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800564a:	4669      	mov	r1, sp
 800564c:	4805      	ldr	r0, [pc, #20]	@ (8005664 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800564e:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005652:	f7ff ffbb 	bl	80055cc <netconn_apimsg>
  return err;
 8005656:	e7f1      	b.n	800563c <netconn_close_shutdown+0x18>
 8005658:	0800f272 	.word	0x0800f272
 800565c:	0800f2c8 	.word	0x0800f2c8
 8005660:	0800f15a 	.word	0x0800f15a
 8005664:	08006a15 	.word	0x08006a15

08005668 <netconn_new_with_proto_and_callback>:
{
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	460d      	mov	r5, r1
 800566c:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 800566e:	4611      	mov	r1, r2
 8005670:	f000 ff0c 	bl	800648c <netconn_alloc>
  if (conn != NULL) {
 8005674:	4604      	mov	r4, r0
 8005676:	2800      	cmp	r0, #0
 8005678:	d03d      	beq.n	80056f6 <netconn_new_with_proto_and_callback+0x8e>
    API_MSG_VAR_REF(msg).conn = conn;
 800567a:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800567c:	4669      	mov	r1, sp
 800567e:	4820      	ldr	r0, [pc, #128]	@ (8005700 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8005680:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005684:	f7ff ffa2 	bl	80055cc <netconn_apimsg>
    if (err != ERR_OK) {
 8005688:	2800      	cmp	r0, #0
 800568a:	d035      	beq.n	80056f8 <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	b12b      	cbz	r3, 800569c <netconn_new_with_proto_and_callback+0x34>
 8005690:	4b1c      	ldr	r3, [pc, #112]	@ (8005704 <netconn_new_with_proto_and_callback+0x9c>)
 8005692:	22a3      	movs	r2, #163	@ 0xa3
 8005694:	491c      	ldr	r1, [pc, #112]	@ (8005708 <netconn_new_with_proto_and_callback+0xa0>)
 8005696:	481d      	ldr	r0, [pc, #116]	@ (800570c <netconn_new_with_proto_and_callback+0xa4>)
 8005698:	f008 fe8e 	bl	800e3b8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800569c:	f104 0510 	add.w	r5, r4, #16
 80056a0:	4628      	mov	r0, r5
 80056a2:	f008 f91c 	bl	800d8de <sys_mbox_valid>
 80056a6:	b928      	cbnz	r0, 80056b4 <netconn_new_with_proto_and_callback+0x4c>
 80056a8:	4b16      	ldr	r3, [pc, #88]	@ (8005704 <netconn_new_with_proto_and_callback+0x9c>)
 80056aa:	22a4      	movs	r2, #164	@ 0xa4
 80056ac:	4918      	ldr	r1, [pc, #96]	@ (8005710 <netconn_new_with_proto_and_callback+0xa8>)
 80056ae:	4817      	ldr	r0, [pc, #92]	@ (800570c <netconn_new_with_proto_and_callback+0xa4>)
 80056b0:	f008 fe82 	bl	800e3b8 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80056b4:	f104 0014 	add.w	r0, r4, #20
 80056b8:	f008 f911 	bl	800d8de <sys_mbox_valid>
 80056bc:	b128      	cbz	r0, 80056ca <netconn_new_with_proto_and_callback+0x62>
 80056be:	4b11      	ldr	r3, [pc, #68]	@ (8005704 <netconn_new_with_proto_and_callback+0x9c>)
 80056c0:	22a6      	movs	r2, #166	@ 0xa6
 80056c2:	4914      	ldr	r1, [pc, #80]	@ (8005714 <netconn_new_with_proto_and_callback+0xac>)
 80056c4:	4811      	ldr	r0, [pc, #68]	@ (800570c <netconn_new_with_proto_and_callback+0xa4>)
 80056c6:	f008 fe77 	bl	800e3b8 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80056ca:	f104 060c 	add.w	r6, r4, #12
 80056ce:	4630      	mov	r0, r6
 80056d0:	f008 f942 	bl	800d958 <sys_sem_valid>
 80056d4:	b928      	cbnz	r0, 80056e2 <netconn_new_with_proto_and_callback+0x7a>
 80056d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005704 <netconn_new_with_proto_and_callback+0x9c>)
 80056d8:	22a9      	movs	r2, #169	@ 0xa9
 80056da:	490f      	ldr	r1, [pc, #60]	@ (8005718 <netconn_new_with_proto_and_callback+0xb0>)
 80056dc:	480b      	ldr	r0, [pc, #44]	@ (800570c <netconn_new_with_proto_and_callback+0xa4>)
 80056de:	f008 fe6b 	bl	800e3b8 <iprintf>
      sys_sem_free(&conn->op_completed);
 80056e2:	4630      	mov	r0, r6
 80056e4:	f008 f935 	bl	800d952 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 80056e8:	4628      	mov	r0, r5
 80056ea:	f008 f8b6 	bl	800d85a <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80056ee:	4621      	mov	r1, r4
 80056f0:	2007      	movs	r0, #7
 80056f2:	f002 f80b 	bl	800770c <memp_free>
      return NULL;
 80056f6:	2400      	movs	r4, #0
}
 80056f8:	4620      	mov	r0, r4
 80056fa:	b008      	add	sp, #32
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
 80056fe:	bf00      	nop
 8005700:	0800642d 	.word	0x0800642d
 8005704:	0800f272 	.word	0x0800f272
 8005708:	0800f2e4 	.word	0x0800f2e4
 800570c:	0800f15a 	.word	0x0800f15a
 8005710:	0800f305 	.word	0x0800f305
 8005714:	0800f31a 	.word	0x0800f31a
 8005718:	0800f33b 	.word	0x0800f33b

0800571c <netconn_prepare_delete>:
{
 800571c:	b500      	push	{lr}
 800571e:	b089      	sub	sp, #36	@ 0x24
  if (conn == NULL) {
 8005720:	b138      	cbz	r0, 8005732 <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005722:	2329      	movs	r3, #41	@ 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8005724:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005726:	4669      	mov	r1, sp
 8005728:	4803      	ldr	r0, [pc, #12]	@ (8005738 <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800572a:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800572e:	f7ff ff4d 	bl	80055cc <netconn_apimsg>
}
 8005732:	b009      	add	sp, #36	@ 0x24
 8005734:	f85d fb04 	ldr.w	pc, [sp], #4
 8005738:	08006719 	.word	0x08006719

0800573c <netconn_delete>:
{
 800573c:	b510      	push	{r4, lr}
  if (conn == NULL) {
 800573e:	4604      	mov	r4, r0
 8005740:	b908      	cbnz	r0, 8005746 <netconn_delete+0xa>
    return ERR_OK;
 8005742:	2000      	movs	r0, #0
}
 8005744:	bd10      	pop	{r4, pc}
    err = netconn_prepare_delete(conn);
 8005746:	f7ff ffe9 	bl	800571c <netconn_prepare_delete>
  if (err == ERR_OK) {
 800574a:	2800      	cmp	r0, #0
 800574c:	d1fa      	bne.n	8005744 <netconn_delete+0x8>
    netconn_free(conn);
 800574e:	4620      	mov	r0, r4
 8005750:	f000 fee2 	bl	8006518 <netconn_free>
 8005754:	e7f5      	b.n	8005742 <netconn_delete+0x6>
	...

08005758 <netconn_bind>:
{
 8005758:	b500      	push	{lr}
 800575a:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800575c:	b958      	cbnz	r0, 8005776 <netconn_bind+0x1e>
 800575e:	4b0c      	ldr	r3, [pc, #48]	@ (8005790 <netconn_bind+0x38>)
 8005760:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005764:	490b      	ldr	r1, [pc, #44]	@ (8005794 <netconn_bind+0x3c>)
 8005766:	480c      	ldr	r0, [pc, #48]	@ (8005798 <netconn_bind+0x40>)
 8005768:	f008 fe26 	bl	800e3b8 <iprintf>
 800576c:	f06f 000f 	mvn.w	r0, #15
}
 8005770:	b009      	add	sp, #36	@ 0x24
 8005772:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8005776:	4b09      	ldr	r3, [pc, #36]	@ (800579c <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8005778:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 800577a:	2900      	cmp	r1, #0
 800577c:	bf08      	it	eq
 800577e:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005780:	4807      	ldr	r0, [pc, #28]	@ (80057a0 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8005782:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8005786:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005788:	4669      	mov	r1, sp
 800578a:	f7ff ff1f 	bl	80055cc <netconn_apimsg>
  return err;
 800578e:	e7ef      	b.n	8005770 <netconn_bind+0x18>
 8005790:	0800f272 	.word	0x0800f272
 8005794:	0800f354 	.word	0x0800f354
 8005798:	0800f15a 	.word	0x0800f15a
 800579c:	08011968 	.word	0x08011968
 80057a0:	08006825 	.word	0x08006825

080057a4 <netconn_listen_with_backlog>:
{
 80057a4:	b500      	push	{lr}
 80057a6:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80057a8:	b958      	cbnz	r0, 80057c2 <netconn_listen_with_backlog+0x1e>
 80057aa:	4b09      	ldr	r3, [pc, #36]	@ (80057d0 <netconn_listen_with_backlog+0x2c>)
 80057ac:	f240 12bb 	movw	r2, #443	@ 0x1bb
 80057b0:	4908      	ldr	r1, [pc, #32]	@ (80057d4 <netconn_listen_with_backlog+0x30>)
 80057b2:	4809      	ldr	r0, [pc, #36]	@ (80057d8 <netconn_listen_with_backlog+0x34>)
 80057b4:	f008 fe00 	bl	800e3b8 <iprintf>
 80057b8:	f06f 000f 	mvn.w	r0, #15
}
 80057bc:	b009      	add	sp, #36	@ 0x24
 80057be:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 80057c2:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80057c4:	4669      	mov	r1, sp
 80057c6:	4805      	ldr	r0, [pc, #20]	@ (80057dc <netconn_listen_with_backlog+0x38>)
 80057c8:	f7ff ff00 	bl	80055cc <netconn_apimsg>
  return err;
 80057cc:	e7f6      	b.n	80057bc <netconn_listen_with_backlog+0x18>
 80057ce:	bf00      	nop
 80057d0:	0800f272 	.word	0x0800f272
 80057d4:	0800f36f 	.word	0x0800f36f
 80057d8:	0800f15a 	.word	0x0800f15a
 80057dc:	08006859 	.word	0x08006859

080057e0 <netconn_write_vectors_partly>:
{
 80057e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e4:	b088      	sub	sp, #32
 80057e6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80057ea:	b958      	cbnz	r0, 8005804 <netconn_write_vectors_partly+0x24>
 80057ec:	4b2f      	ldr	r3, [pc, #188]	@ (80058ac <netconn_write_vectors_partly+0xcc>)
 80057ee:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80057f2:	492f      	ldr	r1, [pc, #188]	@ (80058b0 <netconn_write_vectors_partly+0xd0>)
 80057f4:	482f      	ldr	r0, [pc, #188]	@ (80058b4 <netconn_write_vectors_partly+0xd4>)
 80057f6:	f008 fddf 	bl	800e3b8 <iprintf>
 80057fa:	f06f 000f 	mvn.w	r0, #15
}
 80057fe:	b008      	add	sp, #32
 8005800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8005804:	7804      	ldrb	r4, [r0, #0]
 8005806:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
 800580a:	2c10      	cmp	r4, #16
 800580c:	d009      	beq.n	8005822 <netconn_write_vectors_partly+0x42>
 800580e:	4b27      	ldr	r3, [pc, #156]	@ (80058ac <netconn_write_vectors_partly+0xcc>)
 8005810:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8005814:	4928      	ldr	r1, [pc, #160]	@ (80058b8 <netconn_write_vectors_partly+0xd8>)
 8005816:	4827      	ldr	r0, [pc, #156]	@ (80058b4 <netconn_write_vectors_partly+0xd4>)
 8005818:	f008 fdce 	bl	800e3b8 <iprintf>
 800581c:	f06f 0005 	mvn.w	r0, #5
 8005820:	e7ed      	b.n	80057fe <netconn_write_vectors_partly+0x1e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005822:	7f05      	ldrb	r5, [r0, #28]
 8005824:	f003 0404 	and.w	r4, r3, #4
 8005828:	f005 0502 	and.w	r5, r5, #2
 800582c:	4325      	orrs	r5, r4
 800582e:	d003      	beq.n	8005838 <netconn_write_vectors_partly+0x58>
  if (dontblock && !bytes_written) {
 8005830:	f1b8 0f00 	cmp.w	r8, #0
 8005834:	d0f2      	beq.n	800581c <netconn_write_vectors_partly+0x3c>
 8005836:	2501      	movs	r5, #1
 8005838:	2600      	movs	r6, #0
    size += vectors[i].len;
 800583a:	f101 0c04 	add.w	ip, r1, #4
 800583e:	4637      	mov	r7, r6
 8005840:	e004      	b.n	800584c <netconn_write_vectors_partly+0x6c>
 8005842:	f85c 4036 	ldr.w	r4, [ip, r6, lsl #3]
    if (size < vectors[i].len) {
 8005846:	19e7      	adds	r7, r4, r7
 8005848:	d2e8      	bcs.n	800581c <netconn_write_vectors_partly+0x3c>
  for (i = 0; i < vectorcnt; i++) {
 800584a:	3601      	adds	r6, #1
 800584c:	42b2      	cmp	r2, r6
 800584e:	dcf8      	bgt.n	8005842 <netconn_write_vectors_partly+0x62>
  if (size == 0) {
 8005850:	2f00      	cmp	r7, #0
 8005852:	d101      	bne.n	8005858 <netconn_write_vectors_partly+0x78>
    return ERR_OK;
 8005854:	2000      	movs	r0, #0
 8005856:	e7d2      	b.n	80057fe <netconn_write_vectors_partly+0x1e>
  } else if (size > SSIZE_MAX) {
 8005858:	da04      	bge.n	8005864 <netconn_write_vectors_partly+0x84>
    if (!bytes_written) {
 800585a:	f1b8 0f00 	cmp.w	r8, #0
 800585e:	d0dd      	beq.n	800581c <netconn_write_vectors_partly+0x3c>
    size = (size_t)limited;
 8005860:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8005864:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8005868:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 800586a:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800586c:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800586e:	4669      	mov	r1, sp
 8005870:	4812      	ldr	r0, [pc, #72]	@ (80058bc <netconn_write_vectors_partly+0xdc>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8005872:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8005874:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8005878:	e9cd 7205 	strd	r7, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800587c:	f7ff fea6 	bl	80055cc <netconn_apimsg>
  if (err == ERR_OK) {
 8005880:	2800      	cmp	r0, #0
 8005882:	d1bc      	bne.n	80057fe <netconn_write_vectors_partly+0x1e>
    if (bytes_written != NULL) {
 8005884:	f1b8 0f00 	cmp.w	r8, #0
 8005888:	d002      	beq.n	8005890 <netconn_write_vectors_partly+0xb0>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800588a:	9b06      	ldr	r3, [sp, #24]
 800588c:	f8c8 3000 	str.w	r3, [r8]
    if (!dontblock) {
 8005890:	2d00      	cmp	r5, #0
 8005892:	d1df      	bne.n	8005854 <netconn_write_vectors_partly+0x74>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8005894:	9b06      	ldr	r3, [sp, #24]
 8005896:	42bb      	cmp	r3, r7
 8005898:	d0dc      	beq.n	8005854 <netconn_write_vectors_partly+0x74>
 800589a:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <netconn_write_vectors_partly+0xcc>)
 800589c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80058a0:	4907      	ldr	r1, [pc, #28]	@ (80058c0 <netconn_write_vectors_partly+0xe0>)
 80058a2:	4804      	ldr	r0, [pc, #16]	@ (80058b4 <netconn_write_vectors_partly+0xd4>)
 80058a4:	f008 fd88 	bl	800e3b8 <iprintf>
 80058a8:	e7d4      	b.n	8005854 <netconn_write_vectors_partly+0x74>
 80058aa:	bf00      	nop
 80058ac:	0800f272 	.word	0x0800f272
 80058b0:	0800f38c 	.word	0x0800f38c
 80058b4:	0800f15a 	.word	0x0800f15a
 80058b8:	0800f3a8 	.word	0x0800f3a8
 80058bc:	08006949 	.word	0x08006949
 80058c0:	0800f3ca 	.word	0x0800f3ca

080058c4 <netconn_write_partly>:
{
 80058c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 80058c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80058ca:	9a06      	ldr	r2, [sp, #24]
 80058cc:	a902      	add	r1, sp, #8
 80058ce:	9200      	str	r2, [sp, #0]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f7ff ff85 	bl	80057e0 <netconn_write_vectors_partly>
}
 80058d6:	b005      	add	sp, #20
 80058d8:	f85d fb04 	ldr.w	pc, [sp], #4

080058dc <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80058dc:	2103      	movs	r1, #3
 80058de:	f7ff bea1 	b.w	8005624 <netconn_close_shutdown>

080058e2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80058e2:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80058e4:	4604      	mov	r4, r0
 80058e6:	b148      	cbz	r0, 80058fc <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 80058e8:	f008 f872 	bl	800d9d0 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 80058ec:	2300      	movs	r3, #0
  err = conn->pending_err;
 80058ee:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 80058f2:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 80058f4:	f008 f878 	bl	800d9e8 <sys_arch_unprotect>
  return err;
}
 80058f8:	4628      	mov	r0, r5
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 80058fc:	4605      	mov	r5, r0
 80058fe:	e7fb      	b.n	80058f8 <netconn_err+0x16>

08005900 <netconn_accept>:
{
 8005900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005902:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8005904:	460e      	mov	r6, r1
 8005906:	b959      	cbnz	r1, 8005920 <netconn_accept+0x20>
 8005908:	4b25      	ldr	r3, [pc, #148]	@ (80059a0 <netconn_accept+0xa0>)
 800590a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800590e:	4925      	ldr	r1, [pc, #148]	@ (80059a4 <netconn_accept+0xa4>)
 8005910:	f06f 040f 	mvn.w	r4, #15
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005914:	4824      	ldr	r0, [pc, #144]	@ (80059a8 <netconn_accept+0xa8>)
 8005916:	f008 fd4f 	bl	800e3b8 <iprintf>
}
 800591a:	4620      	mov	r0, r4
 800591c:	b003      	add	sp, #12
 800591e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005924:	b920      	cbnz	r0, 8005930 <netconn_accept+0x30>
 8005926:	4b1e      	ldr	r3, [pc, #120]	@ (80059a0 <netconn_accept+0xa0>)
 8005928:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800592c:	491f      	ldr	r1, [pc, #124]	@ (80059ac <netconn_accept+0xac>)
 800592e:	e7ef      	b.n	8005910 <netconn_accept+0x10>
  err = netconn_err(conn);
 8005930:	f7ff ffd7 	bl	80058e2 <netconn_err>
 8005934:	4604      	mov	r4, r0
 8005936:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 800593a:	2800      	cmp	r0, #0
 800593c:	d1ed      	bne.n	800591a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800593e:	f105 0714 	add.w	r7, r5, #20
 8005942:	4638      	mov	r0, r7
 8005944:	f007 ffcb 	bl	800d8de <sys_mbox_valid>
 8005948:	b910      	cbnz	r0, 8005950 <netconn_accept+0x50>
    return ERR_CLSD;
 800594a:	f06f 040e 	mvn.w	r4, #14
 800594e:	e7e4      	b.n	800591a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8005950:	7f2b      	ldrb	r3, [r5, #28]
 8005952:	07da      	lsls	r2, r3, #31
 8005954:	d4f9      	bmi.n	800594a <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 8005956:	079b      	lsls	r3, r3, #30
 8005958:	d508      	bpl.n	800596c <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800595a:	a901      	add	r1, sp, #4
 800595c:	4638      	mov	r0, r7
 800595e:	f007 ffb3 	bl	800d8c8 <sys_arch_mbox_tryfetch>
 8005962:	3001      	adds	r0, #1
 8005964:	d107      	bne.n	8005976 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 8005966:	f06f 0406 	mvn.w	r4, #6
 800596a:	e7d6      	b.n	800591a <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800596c:	4622      	mov	r2, r4
 800596e:	a901      	add	r1, sp, #4
 8005970:	4638      	mov	r0, r7
 8005972:	f007 ff8b 	bl	800d88c <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005976:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005978:	b11b      	cbz	r3, 8005982 <netconn_accept+0x82>
 800597a:	2200      	movs	r2, #0
 800597c:	2101      	movs	r1, #1
 800597e:	4628      	mov	r0, r5
 8005980:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8005982:	f10d 0103 	add.w	r1, sp, #3
 8005986:	9801      	ldr	r0, [sp, #4]
 8005988:	f000 fd24 	bl	80063d4 <lwip_netconn_is_err_msg>
 800598c:	b110      	cbz	r0, 8005994 <netconn_accept+0x94>
    return err;
 800598e:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 8005992:	e7c2      	b.n	800591a <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 8005994:	9b01      	ldr	r3, [sp, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0d7      	beq.n	800594a <netconn_accept+0x4a>
  *new_conn = newconn;
 800599a:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 800599c:	e7bd      	b.n	800591a <netconn_accept+0x1a>
 800599e:	bf00      	nop
 80059a0:	0800f272 	.word	0x0800f272
 80059a4:	0800f3ed 	.word	0x0800f3ed
 80059a8:	0800f15a 	.word	0x0800f15a
 80059ac:	0800f40d 	.word	0x0800f40d

080059b0 <netconn_recv_data>:
  void *buf = NULL;
 80059b0:	2300      	movs	r3, #0
{
 80059b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059b4:	4604      	mov	r4, r0
 80059b6:	4616      	mov	r6, r2
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80059b8:	460d      	mov	r5, r1
  void *buf = NULL;
 80059ba:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80059bc:	b951      	cbnz	r1, 80059d4 <netconn_recv_data+0x24>
 80059be:	4b32      	ldr	r3, [pc, #200]	@ (8005a88 <netconn_recv_data+0xd8>)
 80059c0:	f44f 7212 	mov.w	r2, #584	@ 0x248
 80059c4:	4931      	ldr	r1, [pc, #196]	@ (8005a8c <netconn_recv_data+0xdc>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80059c6:	4832      	ldr	r0, [pc, #200]	@ (8005a90 <netconn_recv_data+0xe0>)
 80059c8:	f008 fcf6 	bl	800e3b8 <iprintf>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80059cc:	f06f 000f 	mvn.w	r0, #15
}
 80059d0:	b003      	add	sp, #12
 80059d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 80059d4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80059d6:	b920      	cbnz	r0, 80059e2 <netconn_recv_data+0x32>
 80059d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a88 <netconn_recv_data+0xd8>)
 80059da:	f240 224a 	movw	r2, #586	@ 0x24a
 80059de:	492d      	ldr	r1, [pc, #180]	@ (8005a94 <netconn_recv_data+0xe4>)
 80059e0:	e7f1      	b.n	80059c6 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80059e2:	f100 0710 	add.w	r7, r0, #16
 80059e6:	4638      	mov	r0, r7
 80059e8:	f007 ff79 	bl	800d8de <sys_mbox_valid>
 80059ec:	b938      	cbnz	r0, 80059fe <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 80059ee:	4620      	mov	r0, r4
 80059f0:	f7ff ff77 	bl	80058e2 <netconn_err>
    if (err != ERR_OK) {
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d1eb      	bne.n	80059d0 <netconn_recv_data+0x20>
    return ERR_CONN;
 80059f8:	f06f 000a 	mvn.w	r0, #10
 80059fc:	e7e8      	b.n	80059d0 <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80059fe:	7f23      	ldrb	r3, [r4, #28]
 8005a00:	f006 0604 	and.w	r6, r6, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005a04:	a901      	add	r1, sp, #4
 8005a06:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	4333      	orrs	r3, r6
 8005a0e:	d102      	bne.n	8005a16 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8005a10:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8005a14:	b172      	cbz	r2, 8005a34 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005a16:	f007 ff57 	bl	800d8c8 <sys_arch_mbox_tryfetch>
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d10c      	bne.n	8005a38 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7ff ff5f 	bl	80058e2 <netconn_err>
      if (err != ERR_OK) {
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d1d3      	bne.n	80059d0 <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8005a28:	7f23      	ldrb	r3, [r4, #28]
 8005a2a:	07db      	lsls	r3, r3, #31
 8005a2c:	d4e4      	bmi.n	80059f8 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 8005a2e:	f06f 0006 	mvn.w	r0, #6
 8005a32:	e7cd      	b.n	80059d0 <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8005a34:	f007 ff2a 	bl	800d88c <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005a38:	7823      	ldrb	r3, [r4, #0]
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8005a3a:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d116      	bne.n	8005a72 <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8005a44:	f10d 0103 	add.w	r1, sp, #3
 8005a48:	f000 fcc4 	bl	80063d4 <lwip_netconn_is_err_msg>
 8005a4c:	b130      	cbz	r0, 8005a5c <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 8005a4e:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 8005a52:	f110 0f0f 	cmn.w	r0, #15
 8005a56:	bf08      	it	eq
 8005a58:	2000      	moveq	r0, #0
 8005a5a:	e7b9      	b.n	80059d0 <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 8005a5c:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 8005a5e:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8005a60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005a62:	b113      	cbz	r3, 8005a6a <netconn_recv_data+0xba>
 8005a64:	2101      	movs	r1, #1
 8005a66:	4620      	mov	r0, r4
 8005a68:	4798      	blx	r3
  *new_buf = buf;
 8005a6a:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 8005a6c:	2000      	movs	r0, #0
  *new_buf = buf;
 8005a6e:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8005a70:	e7ae      	b.n	80059d0 <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8005a72:	b930      	cbnz	r0, 8005a82 <netconn_recv_data+0xd2>
 8005a74:	4b04      	ldr	r3, [pc, #16]	@ (8005a88 <netconn_recv_data+0xd8>)
 8005a76:	f240 2291 	movw	r2, #657	@ 0x291
 8005a7a:	4907      	ldr	r1, [pc, #28]	@ (8005a98 <netconn_recv_data+0xe8>)
 8005a7c:	4804      	ldr	r0, [pc, #16]	@ (8005a90 <netconn_recv_data+0xe0>)
 8005a7e:	f008 fc9b 	bl	800e3b8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8005a82:	9b01      	ldr	r3, [sp, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	e7ea      	b.n	8005a5e <netconn_recv_data+0xae>
 8005a88:	0800f272 	.word	0x0800f272
 8005a8c:	0800f42a 	.word	0x0800f42a
 8005a90:	0800f15a 	.word	0x0800f15a
 8005a94:	0800f448 	.word	0x0800f448
 8005a98:	0800f463 	.word	0x0800f463

08005a9c <netconn_recv_data_tcp>:
{
 8005a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	b089      	sub	sp, #36	@ 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005aa2:	3010      	adds	r0, #16
{
 8005aa4:	460f      	mov	r7, r1
 8005aa6:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005aa8:	f007 ff19 	bl	800d8de <sys_mbox_valid>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d03c      	beq.n	8005b2a <netconn_recv_data_tcp+0x8e>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8005ab0:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8005ab4:	7f23      	ldrb	r3, [r4, #28]
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	da12      	bge.n	8005ae0 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8005aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005abe:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005ac0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005ac2:	b11b      	cbz	r3, 8005acc <netconn_recv_data_tcp+0x30>
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	4620      	mov	r0, r4
 8005aca:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8005acc:	6863      	ldr	r3, [r4, #4]
 8005ace:	bb2b      	cbnz	r3, 8005b1c <netconn_recv_data_tcp+0x80>
        err = netconn_err(conn);
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f7ff ff06 	bl	80058e2 <netconn_err>
        return ERR_RST;
 8005ad6:	1e05      	subs	r5, r0, #0
 8005ad8:	bf08      	it	eq
 8005ada:	f06f 050d 	mvneq.w	r5, #13
 8005ade:	e018      	b.n	8005b12 <netconn_recv_data_tcp+0x76>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f7ff ff63 	bl	80059b0 <netconn_recv_data>
  if (err != ERR_OK) {
 8005aea:	4605      	mov	r5, r0
 8005aec:	b988      	cbnz	r0, 8005b12 <netconn_recv_data_tcp+0x76>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8005aee:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 8005af0:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8005af2:	d405      	bmi.n	8005b00 <netconn_recv_data_tcp+0x64>
    u16_t len = buf ? buf->tot_len : 1;
 8005af4:	b187      	cbz	r7, 8005b18 <netconn_recv_data_tcp+0x7c>
 8005af6:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8005af8:	466a      	mov	r2, sp
 8005afa:	4620      	mov	r0, r4
 8005afc:	f7ff fd70 	bl	80055e0 <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 8005b00:	b93f      	cbnz	r7, 8005b12 <netconn_recv_data_tcp+0x76>
    if (apiflags & NETCONN_NOFIN) {
 8005b02:	06f3      	lsls	r3, r6, #27
 8005b04:	d5dc      	bpl.n	8005ac0 <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8005b06:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8005b08:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8005b0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b10:	7723      	strb	r3, [r4, #28]
}
 8005b12:	4628      	mov	r0, r5
 8005b14:	b009      	add	sp, #36	@ 0x24
 8005b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8005b18:	2101      	movs	r1, #1
 8005b1a:	e7ed      	b.n	8005af8 <netconn_recv_data_tcp+0x5c>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	4620      	mov	r0, r4
      return ERR_CLSD;
 8005b20:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8005b24:	f7ff fd7e 	bl	8005624 <netconn_close_shutdown>
      return ERR_CLSD;
 8005b28:	e7f3      	b.n	8005b12 <netconn_recv_data_tcp+0x76>
    return ERR_CONN;
 8005b2a:	f06f 050a 	mvn.w	r5, #10
 8005b2e:	e7f0      	b.n	8005b12 <netconn_recv_data_tcp+0x76>

08005b30 <netconn_recv>:
{
 8005b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b32:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005b34:	460e      	mov	r6, r1
 8005b36:	b959      	cbnz	r1, 8005b50 <netconn_recv+0x20>
 8005b38:	4b21      	ldr	r3, [pc, #132]	@ (8005bc0 <netconn_recv+0x90>)
 8005b3a:	f240 3263 	movw	r2, #867	@ 0x363
 8005b3e:	4921      	ldr	r1, [pc, #132]	@ (8005bc4 <netconn_recv+0x94>)
 8005b40:	f06f 050f 	mvn.w	r5, #15
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005b44:	4820      	ldr	r0, [pc, #128]	@ (8005bc8 <netconn_recv+0x98>)
 8005b46:	f008 fc37 	bl	800e3b8 <iprintf>
}
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	b003      	add	sp, #12
 8005b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8005b50:	2700      	movs	r7, #0
 8005b52:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005b54:	b920      	cbnz	r0, 8005b60 <netconn_recv+0x30>
 8005b56:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc0 <netconn_recv+0x90>)
 8005b58:	f240 3265 	movw	r2, #869	@ 0x365
 8005b5c:	491b      	ldr	r1, [pc, #108]	@ (8005bcc <netconn_recv+0x9c>)
 8005b5e:	e7ef      	b.n	8005b40 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005b60:	7803      	ldrb	r3, [r0, #0]
 8005b62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d124      	bne.n	8005bb4 <netconn_recv+0x84>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005b6a:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 8005b6c:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005b6e:	f001 fd9f 	bl	80076b0 <memp_malloc>
    if (buf == NULL) {
 8005b72:	4604      	mov	r4, r0
 8005b74:	b1d8      	cbz	r0, 8005bae <netconn_recv+0x7e>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8005b76:	4628      	mov	r0, r5
 8005b78:	463a      	mov	r2, r7
 8005b7a:	a901      	add	r1, sp, #4
 8005b7c:	f7ff ff8e 	bl	8005a9c <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 8005b80:	4605      	mov	r5, r0
 8005b82:	b120      	cbz	r0, 8005b8e <netconn_recv+0x5e>
      memp_free(MEMP_NETBUF, buf);
 8005b84:	4621      	mov	r1, r4
 8005b86:	2006      	movs	r0, #6
 8005b88:	f001 fdc0 	bl	800770c <memp_free>
      return err;
 8005b8c:	e7dd      	b.n	8005b4a <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005b8e:	9f01      	ldr	r7, [sp, #4]
 8005b90:	b937      	cbnz	r7, 8005ba0 <netconn_recv+0x70>
 8005b92:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <netconn_recv+0x90>)
 8005b94:	f240 3279 	movw	r2, #889	@ 0x379
 8005b98:	490d      	ldr	r1, [pc, #52]	@ (8005bd0 <netconn_recv+0xa0>)
 8005b9a:	480b      	ldr	r0, [pc, #44]	@ (8005bc8 <netconn_recv+0x98>)
 8005b9c:	f008 fc0c 	bl	800e3b8 <iprintf>
    buf->port = 0;
 8005ba0:	2300      	movs	r3, #0
    buf->ptr = p;
 8005ba2:	e9c4 7700 	strd	r7, r7, [r4]
    buf->port = 0;
 8005ba6:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 8005ba8:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 8005baa:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 8005bac:	e7cd      	b.n	8005b4a <netconn_recv+0x1a>
      return ERR_MEM;
 8005bae:	f04f 35ff 	mov.w	r5, #4294967295
 8005bb2:	e7ca      	b.n	8005b4a <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8005bb4:	463a      	mov	r2, r7
}
 8005bb6:	b003      	add	sp, #12
 8005bb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8005bbc:	f7ff bef8 	b.w	80059b0 <netconn_recv_data>
 8005bc0:	0800f272 	.word	0x0800f272
 8005bc4:	0800f42a 	.word	0x0800f42a
 8005bc8:	0800f15a 	.word	0x0800f15a
 8005bcc:	0800f448 	.word	0x0800f448
 8005bd0:	0801006d 	.word	0x0801006d

08005bd4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8005bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd8:	4606      	mov	r6, r0
 8005bda:	4617      	mov	r7, r2
 8005bdc:	461d      	mov	r5, r3
 8005bde:	f8bd 8020 	ldrh.w	r8, [sp, #32]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8005be2:	460c      	mov	r4, r1
 8005be4:	b929      	cbnz	r1, 8005bf2 <recv_udp+0x1e>
 8005be6:	4b21      	ldr	r3, [pc, #132]	@ (8005c6c <recv_udp+0x98>)
 8005be8:	22e5      	movs	r2, #229	@ 0xe5
 8005bea:	4921      	ldr	r1, [pc, #132]	@ (8005c70 <recv_udp+0x9c>)
 8005bec:	4821      	ldr	r0, [pc, #132]	@ (8005c74 <recv_udp+0xa0>)
 8005bee:	f008 fbe3 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8005bf2:	b306      	cbz	r6, 8005c36 <recv_udp+0x62>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8005bf4:	6873      	ldr	r3, [r6, #4]
 8005bf6:	42a3      	cmp	r3, r4
 8005bf8:	d128      	bne.n	8005c4c <recv_udp+0x78>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005bfa:	f106 0910 	add.w	r9, r6, #16
 8005bfe:	4648      	mov	r0, r9
 8005c00:	f007 fe6d 	bl	800d8de <sys_mbox_valid>
 8005c04:	b1e8      	cbz	r0, 8005c42 <recv_udp+0x6e>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005c06:	2006      	movs	r0, #6
 8005c08:	f001 fd52 	bl	80076b0 <memp_malloc>
  if (buf == NULL) {
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	b1c0      	cbz	r0, 8005c42 <recv_udp+0x6e>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
    buf->ptr = p;
 8005c10:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 8005c14:	b105      	cbz	r5, 8005c18 <recv_udp+0x44>
 8005c16:	682d      	ldr	r5, [r5, #0]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005c18:	4621      	mov	r1, r4
    ip_addr_set(&buf->addr, addr);
 8005c1a:	60a5      	str	r5, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005c1c:	4648      	mov	r0, r9
    buf->port = port;
 8005c1e:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 8005c22:	893d      	ldrh	r5, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005c24:	f007 fe23 	bl	800d86e <sys_mbox_trypost>
 8005c28:	4601      	mov	r1, r0
 8005c2a:	b1b0      	cbz	r0, 8005c5a <recv_udp+0x86>
    netbuf_delete(buf);
 8005c2c:	4620      	mov	r0, r4
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8005c2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 8005c32:	f000 bf4d 	b.w	8006ad0 <netbuf_delete>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8005c36:	4b0d      	ldr	r3, [pc, #52]	@ (8005c6c <recv_udp+0x98>)
 8005c38:	22e6      	movs	r2, #230	@ 0xe6
 8005c3a:	490f      	ldr	r1, [pc, #60]	@ (8005c78 <recv_udp+0xa4>)
 8005c3c:	480d      	ldr	r0, [pc, #52]	@ (8005c74 <recv_udp+0xa0>)
 8005c3e:	f008 fbbb 	bl	800e3b8 <iprintf>
    pbuf_free(p);
 8005c42:	4638      	mov	r0, r7
}
 8005c44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8005c48:	f001 bfd0 	b.w	8007bec <pbuf_free>
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8005c4c:	4b07      	ldr	r3, [pc, #28]	@ (8005c6c <recv_udp+0x98>)
 8005c4e:	22ee      	movs	r2, #238	@ 0xee
 8005c50:	490a      	ldr	r1, [pc, #40]	@ (8005c7c <recv_udp+0xa8>)
 8005c52:	4808      	ldr	r0, [pc, #32]	@ (8005c74 <recv_udp+0xa0>)
 8005c54:	f008 fbb0 	bl	800e3b8 <iprintf>
 8005c58:	e7cf      	b.n	8005bfa <recv_udp+0x26>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005c5a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8005c5c:	b123      	cbz	r3, 8005c68 <recv_udp+0x94>
 8005c5e:	462a      	mov	r2, r5
 8005c60:	4630      	mov	r0, r6
}
 8005c62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005c66:	4718      	bx	r3
}
 8005c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6c:	0800f46f 	.word	0x0800f46f
 8005c70:	0800f4a1 	.word	0x0800f4a1
 8005c74:	0800f15a 	.word	0x0800f15a
 8005c78:	0800f4c3 	.word	0x0800f4c3
 8005c7c:	0800f4e2 	.word	0x0800f4e2

08005c80 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8005c80:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8005c82:	6844      	ldr	r4, [r0, #4]
{
 8005c84:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 8005c86:	4620      	mov	r0, r4
 8005c88:	f002 fce2 	bl	8008650 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4909      	ldr	r1, [pc, #36]	@ (8005cb4 <setup_tcp+0x34>)
 8005c90:	f002 fce2 	bl	8008658 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8005c94:	4620      	mov	r0, r4
 8005c96:	4908      	ldr	r1, [pc, #32]	@ (8005cb8 <setup_tcp+0x38>)
 8005c98:	f002 fcf6 	bl	8008688 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	4907      	ldr	r1, [pc, #28]	@ (8005cbc <setup_tcp+0x3c>)
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f002 fd27 	bl	80086f4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4905      	ldr	r1, [pc, #20]	@ (8005cc0 <setup_tcp+0x40>)
}
 8005caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 8005cae:	f002 bd03 	b.w	80086b8 <tcp_err>
 8005cb2:	bf00      	nop
 8005cb4:	080061e1 	.word	0x080061e1
 8005cb8:	08006175 	.word	0x08006175
 8005cbc:	080060f9 	.word	0x080060f9
 8005cc0:	080062a1 	.word	0x080062a1

08005cc4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8005cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc8:	4689      	mov	r9, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8005cca:	4604      	mov	r4, r0
 8005ccc:	b930      	cbnz	r0, 8005cdc <lwip_netconn_do_writemore+0x18>
 8005cce:	4b88      	ldr	r3, [pc, #544]	@ (8005ef0 <lwip_netconn_do_writemore+0x22c>)
 8005cd0:	f240 6273 	movw	r2, #1651	@ 0x673
 8005cd4:	4987      	ldr	r1, [pc, #540]	@ (8005ef4 <lwip_netconn_do_writemore+0x230>)
 8005cd6:	4888      	ldr	r0, [pc, #544]	@ (8005ef8 <lwip_netconn_do_writemore+0x234>)
 8005cd8:	f008 fb6e 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8005cdc:	7863      	ldrb	r3, [r4, #1]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d006      	beq.n	8005cf0 <lwip_netconn_do_writemore+0x2c>
 8005ce2:	4b83      	ldr	r3, [pc, #524]	@ (8005ef0 <lwip_netconn_do_writemore+0x22c>)
 8005ce4:	f240 6274 	movw	r2, #1652	@ 0x674
 8005ce8:	4984      	ldr	r1, [pc, #528]	@ (8005efc <lwip_netconn_do_writemore+0x238>)
 8005cea:	4883      	ldr	r0, [pc, #524]	@ (8005ef8 <lwip_netconn_do_writemore+0x234>)
 8005cec:	f008 fb64 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005cf0:	6a23      	ldr	r3, [r4, #32]
 8005cf2:	b933      	cbnz	r3, 8005d02 <lwip_netconn_do_writemore+0x3e>
 8005cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ef0 <lwip_netconn_do_writemore+0x22c>)
 8005cf6:	f240 6275 	movw	r2, #1653	@ 0x675
 8005cfa:	4981      	ldr	r1, [pc, #516]	@ (8005f00 <lwip_netconn_do_writemore+0x23c>)
 8005cfc:	487e      	ldr	r0, [pc, #504]	@ (8005ef8 <lwip_netconn_do_writemore+0x234>)
 8005cfe:	f008 fb5b 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8005d02:	6863      	ldr	r3, [r4, #4]
 8005d04:	b933      	cbnz	r3, 8005d14 <lwip_netconn_do_writemore+0x50>
 8005d06:	4b7a      	ldr	r3, [pc, #488]	@ (8005ef0 <lwip_netconn_do_writemore+0x22c>)
 8005d08:	f240 6276 	movw	r2, #1654	@ 0x676
 8005d0c:	497d      	ldr	r1, [pc, #500]	@ (8005f04 <lwip_netconn_do_writemore+0x240>)
 8005d0e:	487a      	ldr	r0, [pc, #488]	@ (8005ef8 <lwip_netconn_do_writemore+0x234>)
 8005d10:	f008 fb52 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8005d14:	6a23      	ldr	r3, [r4, #32]
 8005d16:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d306      	bcc.n	8005d2c <lwip_netconn_do_writemore+0x68>
 8005d1e:	4b74      	ldr	r3, [pc, #464]	@ (8005ef0 <lwip_netconn_do_writemore+0x22c>)
 8005d20:	f240 6277 	movw	r2, #1655	@ 0x677
 8005d24:	4978      	ldr	r1, [pc, #480]	@ (8005f08 <lwip_netconn_do_writemore+0x244>)
 8005d26:	4874      	ldr	r0, [pc, #464]	@ (8005ef8 <lwip_netconn_do_writemore+0x234>)
 8005d28:	f008 fb46 	bl	800e3b8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8005d2c:	6a23      	ldr	r3, [r4, #32]
 8005d2e:	899b      	ldrh	r3, [r3, #12]
 8005d30:	b933      	cbnz	r3, 8005d40 <lwip_netconn_do_writemore+0x7c>
 8005d32:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef0 <lwip_netconn_do_writemore+0x22c>)
 8005d34:	f240 6279 	movw	r2, #1657	@ 0x679
 8005d38:	4974      	ldr	r1, [pc, #464]	@ (8005f0c <lwip_netconn_do_writemore+0x248>)
 8005d3a:	486f      	ldr	r0, [pc, #444]	@ (8005ef8 <lwip_netconn_do_writemore+0x234>)
 8005d3c:	f008 fb3c 	bl	800e3b8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8005d40:	6a23      	ldr	r3, [r4, #32]
 8005d42:	7f26      	ldrb	r6, [r4, #28]
 8005d44:	7f1f      	ldrb	r7, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005d46:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8005d4a:	f8df b1ac 	ldr.w	fp, [pc, #428]	@ 8005ef8 <lwip_netconn_do_writemore+0x234>
 8005d4e:	f007 0304 	and.w	r3, r7, #4
 8005d52:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005d54:	6a21      	ldr	r1, [r4, #32]
      available = tcp_sndbuf(conn->pcb.tcp);
 8005d56:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005d58:	688a      	ldr	r2, [r1, #8]
 8005d5a:	690b      	ldr	r3, [r1, #16]
 8005d5c:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 8005d5e:	f8b5 5064 	ldrh.w	r5, [r5, #100]	@ 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005d62:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8005d66:	6850      	ldr	r0, [r2, #4]
 8005d68:	eba0 0803 	sub.w	r8, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8005d6c:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
        len = 0xffff;
 8005d70:	bf2a      	itet	cs
 8005d72:	f64f 72ff 	movwcs	r2, #65535	@ 0xffff
        len = (u16_t)diff;
 8005d76:	fa1f f288 	uxthcc.w	r2, r8
        apiflags |= TCP_WRITE_FLAG_MORE;
 8005d7a:	f047 0702 	orrcs.w	r7, r7, #2
      if (available < len) {
 8005d7e:	42aa      	cmp	r2, r5
 8005d80:	d969      	bls.n	8005e56 <lwip_netconn_do_writemore+0x192>
        if (dontblock) {
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	d039      	beq.n	8005dfa <lwip_netconn_do_writemore+0x136>
          if (!len) {
 8005d86:	2d00      	cmp	r5, #0
 8005d88:	d139      	bne.n	8005dfe <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005d8a:	698b      	ldr	r3, [r1, #24]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	bf14      	ite	ne
 8005d90:	f04f 0a00 	movne.w	sl, #0
 8005d94:	f06f 0a06 	mvneq.w	sl, #6
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8005d98:	6a23      	ldr	r3, [r4, #32]
 8005d9a:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d277      	bcs.n	8005e92 <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8005da2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005da4:	b11b      	cbz	r3, 8005dae <lwip_netconn_do_writemore+0xea>
 8005da6:	2200      	movs	r2, #0
 8005da8:	2103      	movs	r1, #3
 8005daa:	4620      	mov	r0, r4
 8005dac:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8005dae:	7f23      	ldrb	r3, [r4, #28]
 8005db0:	f043 0310 	orr.w	r3, r3, #16
 8005db4:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 8005db6:	f1ba 0f00 	cmp.w	sl, #0
 8005dba:	d17f      	bne.n	8005ebc <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8005dbc:	6a23      	ldr	r3, [r4, #32]
 8005dbe:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d078      	beq.n	8005eb8 <lwip_netconn_do_writemore+0x1f4>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005dc6:	3e00      	subs	r6, #0
 8005dc8:	bf18      	it	ne
 8005dca:	2601      	movne	r6, #1
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
      }
      out_err = tcp_output(conn->pcb.tcp);
 8005dcc:	6860      	ldr	r0, [r4, #4]
 8005dce:	f005 fcaf 	bl	800b730 <tcp_output>
      if (out_err == ERR_RTE) {
 8005dd2:	3004      	adds	r0, #4
 8005dd4:	f040 8085 	bne.w	8005ee2 <lwip_netconn_do_writemore+0x21e>
      err_t out_err = tcp_output(conn->pcb.tcp);
      if (out_err == ERR_RTE) {
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8005dd8:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005ddc:	6a23      	ldr	r3, [r4, #32]
 8005dde:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8005de0:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 8005de4:	2300      	movs	r3, #0
 8005de6:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8005de8:	7063      	strb	r3, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8005dea:	f1b9 0f00 	cmp.w	r9, #0
 8005dee:	d002      	beq.n	8005df6 <lwip_netconn_do_writemore+0x132>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8005df0:	300c      	adds	r0, #12
 8005df2:	f007 fdab 	bl	800d94c <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8005df6:	2000      	movs	r0, #0
 8005df8:	e06b      	b.n	8005ed2 <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8005dfa:	f047 0702 	orr.w	r7, r7, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8005dfe:	442b      	add	r3, r5
 8005e00:	4298      	cmp	r0, r3
 8005e02:	d206      	bcs.n	8005e12 <lwip_netconn_do_writemore+0x14e>
 8005e04:	4b3a      	ldr	r3, [pc, #232]	@ (8005ef0 <lwip_netconn_do_writemore+0x22c>)
 8005e06:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8005e0a:	4941      	ldr	r1, [pc, #260]	@ (8005f10 <lwip_netconn_do_writemore+0x24c>)
 8005e0c:	4658      	mov	r0, fp
 8005e0e:	f008 fad3 	bl	800e3b8 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8005e12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e16:	429d      	cmp	r5, r3
 8005e18:	d102      	bne.n	8005e20 <lwip_netconn_do_writemore+0x15c>
 8005e1a:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 8005e1e:	d207      	bcs.n	8005e30 <lwip_netconn_do_writemore+0x16c>
 8005e20:	fa1f f888 	uxth.w	r8, r8
 8005e24:	45a8      	cmp	r8, r5
 8005e26:	d118      	bne.n	8005e5a <lwip_netconn_do_writemore+0x196>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8005e28:	6a23      	ldr	r3, [r4, #32]
 8005e2a:	899b      	ldrh	r3, [r3, #12]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d914      	bls.n	8005e5a <lwip_netconn_do_writemore+0x196>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8005e30:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 8005e34:	f04f 0801 	mov.w	r8, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8005e38:	4651      	mov	r1, sl
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	462a      	mov	r2, r5
 8005e3e:	6860      	ldr	r0, [r4, #4]
 8005e40:	f004 ff30 	bl	800aca4 <tcp_write>
      if (err == ERR_OK) {
 8005e44:	4682      	mov	sl, r0
 8005e46:	b158      	cbz	r0, 8005e60 <lwip_netconn_do_writemore+0x19c>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d8c5      	bhi.n	8005ddc <lwip_netconn_do_writemore+0x118>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8005e50:	f04f 3aff 	mov.w	sl, #4294967295
 8005e54:	e01b      	b.n	8005e8e <lwip_netconn_do_writemore+0x1ca>
 8005e56:	4615      	mov	r5, r2
 8005e58:	e7d1      	b.n	8005dfe <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 8005e5a:	f04f 0800 	mov.w	r8, #0
 8005e5e:	e7eb      	b.n	8005e38 <lwip_netconn_do_writemore+0x174>
        conn->current_msg->msg.w.offset += len;
 8005e60:	6a23      	ldr	r3, [r4, #32]
 8005e62:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005e64:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 8005e66:	442a      	add	r2, r5
 8005e68:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005e6e:	684a      	ldr	r2, [r1, #4]
 8005e70:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 8005e72:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005e74:	d107      	bne.n	8005e86 <lwip_netconn_do_writemore+0x1c2>
          conn->current_msg->msg.w.vector_cnt--;
 8005e76:	899a      	ldrh	r2, [r3, #12]
 8005e78:	3a01      	subs	r2, #1
 8005e7a:	b292      	uxth	r2, r2
 8005e7c:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8005e7e:	b112      	cbz	r2, 8005e86 <lwip_netconn_do_writemore+0x1c2>
            conn->current_msg->msg.w.vector++;
 8005e80:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 8005e82:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 8005e84:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 8005e86:	f1b8 0f00 	cmp.w	r8, #0
 8005e8a:	f47f af63 	bne.w	8005d54 <lwip_netconn_do_writemore+0x90>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8005e8e:	2e00      	cmp	r6, #0
 8005e90:	d182      	bne.n	8005d98 <lwip_netconn_do_writemore+0xd4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8005e92:	6863      	ldr	r3, [r4, #4]
 8005e94:	f640 3225 	movw	r2, #2853	@ 0xb25
 8005e98:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 8005e9c:	4291      	cmp	r1, r2
 8005e9e:	d903      	bls.n	8005ea8 <lwip_netconn_do_writemore+0x1e4>
 8005ea0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8005ea4:	2b06      	cmp	r3, #6
 8005ea6:	d986      	bls.n	8005db6 <lwip_netconn_do_writemore+0xf2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8005ea8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d083      	beq.n	8005db6 <lwip_netconn_do_writemore+0xf2>
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2103      	movs	r1, #3
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	4798      	blx	r3
 8005eb6:	e77e      	b.n	8005db6 <lwip_netconn_do_writemore+0xf2>
 8005eb8:	2601      	movs	r6, #1
 8005eba:	e787      	b.n	8005dcc <lwip_netconn_do_writemore+0x108>
    } else if (err == ERR_MEM) {
 8005ebc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005ec0:	d112      	bne.n	8005ee8 <lwip_netconn_do_writemore+0x224>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8005ec2:	6860      	ldr	r0, [r4, #4]
 8005ec4:	f005 fc34 	bl	800b730 <tcp_output>
      if (out_err == ERR_RTE) {
 8005ec8:	3004      	adds	r0, #4
 8005eca:	d085      	beq.n	8005dd8 <lwip_netconn_do_writemore+0x114>
      } else if (dontblock) {
 8005ecc:	b91e      	cbnz	r6, 8005ed6 <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 8005ece:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005ed2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005ed6:	6a23      	ldr	r3, [r4, #32]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	b12b      	cbz	r3, 8005ee8 <lwip_netconn_do_writemore+0x224>
 8005edc:	f04f 0a00 	mov.w	sl, #0
 8005ee0:	e77c      	b.n	8005ddc <lwip_netconn_do_writemore+0x118>
  if (write_finished) {
 8005ee2:	2e00      	cmp	r6, #0
 8005ee4:	d1fa      	bne.n	8005edc <lwip_netconn_do_writemore+0x218>
 8005ee6:	e7f2      	b.n	8005ece <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005ee8:	f06f 0a06 	mvn.w	sl, #6
 8005eec:	e776      	b.n	8005ddc <lwip_netconn_do_writemore+0x118>
 8005eee:	bf00      	nop
 8005ef0:	0800f46f 	.word	0x0800f46f
 8005ef4:	0800f500 	.word	0x0800f500
 8005ef8:	0800f15a 	.word	0x0800f15a
 8005efc:	0800f50d 	.word	0x0800f50d
 8005f00:	0800f52a 	.word	0x0800f52a
 8005f04:	0800f544 	.word	0x0800f544
 8005f08:	0800f55a 	.word	0x0800f55a
 8005f0c:	0800f599 	.word	0x0800f599
 8005f10:	0800f5c1 	.word	0x0800f5c1

08005f14 <lwip_netconn_do_close_internal>:
{
 8005f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f18:	468a      	mov	sl, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	b930      	cbnz	r0, 8005f2c <lwip_netconn_do_close_internal+0x18>
 8005f1e:	4b6b      	ldr	r3, [pc, #428]	@ (80060cc <lwip_netconn_do_close_internal+0x1b8>)
 8005f20:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8005f24:	496a      	ldr	r1, [pc, #424]	@ (80060d0 <lwip_netconn_do_close_internal+0x1bc>)
 8005f26:	486b      	ldr	r0, [pc, #428]	@ (80060d4 <lwip_netconn_do_close_internal+0x1c0>)
 8005f28:	f008 fa46 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8005f2c:	7823      	ldrb	r3, [r4, #0]
 8005f2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d006      	beq.n	8005f44 <lwip_netconn_do_close_internal+0x30>
 8005f36:	4b65      	ldr	r3, [pc, #404]	@ (80060cc <lwip_netconn_do_close_internal+0x1b8>)
 8005f38:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8005f3c:	4966      	ldr	r1, [pc, #408]	@ (80060d8 <lwip_netconn_do_close_internal+0x1c4>)
 8005f3e:	4865      	ldr	r0, [pc, #404]	@ (80060d4 <lwip_netconn_do_close_internal+0x1c0>)
 8005f40:	f008 fa3a 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8005f44:	7863      	ldrb	r3, [r4, #1]
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d006      	beq.n	8005f58 <lwip_netconn_do_close_internal+0x44>
 8005f4a:	4b60      	ldr	r3, [pc, #384]	@ (80060cc <lwip_netconn_do_close_internal+0x1b8>)
 8005f4c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8005f50:	4962      	ldr	r1, [pc, #392]	@ (80060dc <lwip_netconn_do_close_internal+0x1c8>)
 8005f52:	4860      	ldr	r0, [pc, #384]	@ (80060d4 <lwip_netconn_do_close_internal+0x1c0>)
 8005f54:	f008 fa30 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8005f58:	6863      	ldr	r3, [r4, #4]
 8005f5a:	b933      	cbnz	r3, 8005f6a <lwip_netconn_do_close_internal+0x56>
 8005f5c:	4b5b      	ldr	r3, [pc, #364]	@ (80060cc <lwip_netconn_do_close_internal+0x1b8>)
 8005f5e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8005f62:	495f      	ldr	r1, [pc, #380]	@ (80060e0 <lwip_netconn_do_close_internal+0x1cc>)
 8005f64:	485b      	ldr	r0, [pc, #364]	@ (80060d4 <lwip_netconn_do_close_internal+0x1c0>)
 8005f66:	f008 fa27 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005f6a:	6a23      	ldr	r3, [r4, #32]
 8005f6c:	b933      	cbnz	r3, 8005f7c <lwip_netconn_do_close_internal+0x68>
 8005f6e:	4b57      	ldr	r3, [pc, #348]	@ (80060cc <lwip_netconn_do_close_internal+0x1b8>)
 8005f70:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8005f74:	495b      	ldr	r1, [pc, #364]	@ (80060e4 <lwip_netconn_do_close_internal+0x1d0>)
 8005f76:	4857      	ldr	r0, [pc, #348]	@ (80060d4 <lwip_netconn_do_close_internal+0x1c0>)
 8005f78:	f008 fa1e 	bl	800e3b8 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 8005f7c:	6a23      	ldr	r3, [r4, #32]
  tpcb = conn->pcb.tcp;
 8005f7e:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8005f80:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 8005f82:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8005f84:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8005f88:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8005f8c:	d00f      	beq.n	8005fae <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 8005f8e:	f1b9 0f00 	cmp.w	r9, #0
 8005f92:	d005      	beq.n	8005fa0 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 8005f94:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 8005f96:	1f5a      	subs	r2, r3, #5
 8005f98:	2a01      	cmp	r2, #1
 8005f9a:	d908      	bls.n	8005fae <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d006      	beq.n	8005fae <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8005fa0:	f1b8 0f00 	cmp.w	r8, #0
 8005fa4:	d04d      	beq.n	8006042 <lwip_netconn_do_close_internal+0x12e>
 8005fa6:	8b6f      	ldrh	r7, [r5, #26]
 8005fa8:	f017 0710 	ands.w	r7, r7, #16
 8005fac:	d004      	beq.n	8005fb8 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 8005fae:	2701      	movs	r7, #1
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f002 fb4c 	bl	8008650 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8005fb8:	7d2b      	ldrb	r3, [r5, #20]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d143      	bne.n	8006046 <lwip_netconn_do_close_internal+0x132>
    tcp_accept(tpcb, NULL);
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f002 fb91 	bl	80086e8 <tcp_accept>
  if (shut_close) {
 8005fc6:	2f00      	cmp	r7, #0
 8005fc8:	d05a      	beq.n	8006080 <lwip_netconn_do_close_internal+0x16c>
      err = tcp_close(tpcb);
 8005fca:	4628      	mov	r0, r5
 8005fcc:	f002 fee0 	bl	8008d90 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8005fd0:	4606      	mov	r6, r0
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8005fd2:	6a23      	ldr	r3, [r4, #32]
  if (err == ERR_OK) {
 8005fd4:	b140      	cbz	r0, 8005fe8 <lwip_netconn_do_close_internal+0xd4>
    if (err == ERR_MEM) {
 8005fd6:	1c42      	adds	r2, r0, #1
 8005fd8:	d107      	bne.n	8005fea <lwip_netconn_do_close_internal+0xd6>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8005fda:	7a5b      	ldrb	r3, [r3, #9]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d155      	bne.n	800608c <lwip_netconn_do_close_internal+0x178>
        if (shut_close) {
 8005fe0:	b11f      	cbz	r7, 8005fea <lwip_netconn_do_close_internal+0xd6>
          tcp_abort(tpcb);
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f002 fd0a 	bl	80089fc <tcp_abort>
    shut_close = 0;
 8005fe8:	2600      	movs	r6, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005fea:	6a23      	ldr	r3, [r4, #32]
 8005fec:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8005fee:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8005ff4:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8005ff6:	b9ce      	cbnz	r6, 800602c <lwip_netconn_do_close_internal+0x118>
      if (shut_close) {
 8005ff8:	b137      	cbz	r7, 8006008 <lwip_netconn_do_close_internal+0xf4>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005ffa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        conn->pcb.tcp = NULL;
 8005ffc:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005ffe:	b11b      	cbz	r3, 8006008 <lwip_netconn_do_close_internal+0xf4>
 8006000:	4632      	mov	r2, r6
 8006002:	2104      	movs	r1, #4
 8006004:	4620      	mov	r0, r4
 8006006:	4798      	blx	r3
      if (shut_rx) {
 8006008:	f1b9 0f00 	cmp.w	r9, #0
 800600c:	d005      	beq.n	800601a <lwip_netconn_do_close_internal+0x106>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800600e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006010:	b11b      	cbz	r3, 800601a <lwip_netconn_do_close_internal+0x106>
 8006012:	2200      	movs	r2, #0
 8006014:	4620      	mov	r0, r4
 8006016:	4611      	mov	r1, r2
 8006018:	4798      	blx	r3
      if (shut_tx) {
 800601a:	f1b8 0f00 	cmp.w	r8, #0
 800601e:	d005      	beq.n	800602c <lwip_netconn_do_close_internal+0x118>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006020:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006022:	b11b      	cbz	r3, 800602c <lwip_netconn_do_close_internal+0x118>
 8006024:	2200      	movs	r2, #0
 8006026:	2102      	movs	r1, #2
 8006028:	4620      	mov	r0, r4
 800602a:	4798      	blx	r3
    if (delayed)
 800602c:	f1ba 0f00 	cmp.w	sl, #0
 8006030:	d003      	beq.n	800603a <lwip_netconn_do_close_internal+0x126>
      sys_sem_signal(op_completed_sem);
 8006032:	f105 000c 	add.w	r0, r5, #12
 8006036:	f007 fc89 	bl	800d94c <sys_sem_signal>
    return ERR_OK;
 800603a:	2600      	movs	r6, #0
}
 800603c:	4630      	mov	r0, r6
 800603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    shut_close = 0;
 8006042:	4647      	mov	r7, r8
 8006044:	e7b8      	b.n	8005fb8 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 8006046:	f1b9 0f00 	cmp.w	r9, #0
 800604a:	d007      	beq.n	800605c <lwip_netconn_do_close_internal+0x148>
      tcp_recv(tpcb, NULL);
 800604c:	2100      	movs	r1, #0
 800604e:	4628      	mov	r0, r5
 8006050:	f002 fb02 	bl	8008658 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8006054:	2100      	movs	r1, #0
 8006056:	4628      	mov	r0, r5
 8006058:	f002 fb46 	bl	80086e8 <tcp_accept>
    if (shut_tx) {
 800605c:	f1b8 0f00 	cmp.w	r8, #0
 8006060:	d003      	beq.n	800606a <lwip_netconn_do_close_internal+0x156>
      tcp_sent(tpcb, NULL);
 8006062:	2100      	movs	r1, #0
 8006064:	4628      	mov	r0, r5
 8006066:	f002 fb0f 	bl	8008688 <tcp_sent>
    if (shut_close) {
 800606a:	b14f      	cbz	r7, 8006080 <lwip_netconn_do_close_internal+0x16c>
      tcp_poll(tpcb, NULL, 0);
 800606c:	2200      	movs	r2, #0
 800606e:	4628      	mov	r0, r5
 8006070:	4611      	mov	r1, r2
 8006072:	f002 fb3f 	bl	80086f4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8006076:	2100      	movs	r1, #0
 8006078:	4628      	mov	r0, r5
 800607a:	f002 fb1d 	bl	80086b8 <tcp_err>
  if (shut_close) {
 800607e:	e7a4      	b.n	8005fca <lwip_netconn_do_close_internal+0xb6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006080:	4642      	mov	r2, r8
 8006082:	4649      	mov	r1, r9
 8006084:	4628      	mov	r0, r5
 8006086:	f002 ff4b 	bl	8008f20 <tcp_shutdown>
 800608a:	e7a1      	b.n	8005fd0 <lwip_netconn_do_close_internal+0xbc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800608c:	7d2b      	ldrb	r3, [r5, #20]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d106      	bne.n	80060a0 <lwip_netconn_do_close_internal+0x18c>
 8006092:	4b0e      	ldr	r3, [pc, #56]	@ (80060cc <lwip_netconn_do_close_internal+0x1b8>)
 8006094:	f240 4241 	movw	r2, #1089	@ 0x441
 8006098:	4913      	ldr	r1, [pc, #76]	@ (80060e8 <lwip_netconn_do_close_internal+0x1d4>)
 800609a:	480e      	ldr	r0, [pc, #56]	@ (80060d4 <lwip_netconn_do_close_internal+0x1c0>)
 800609c:	f008 f98c 	bl	800e3b8 <iprintf>
    if (shut_tx) {
 80060a0:	f1b8 0f00 	cmp.w	r8, #0
 80060a4:	d003      	beq.n	80060ae <lwip_netconn_do_close_internal+0x19a>
      tcp_sent(tpcb, sent_tcp);
 80060a6:	4911      	ldr	r1, [pc, #68]	@ (80060ec <lwip_netconn_do_close_internal+0x1d8>)
 80060a8:	4628      	mov	r0, r5
 80060aa:	f002 faed 	bl	8008688 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 80060ae:	2201      	movs	r2, #1
 80060b0:	4628      	mov	r0, r5
 80060b2:	490f      	ldr	r1, [pc, #60]	@ (80060f0 <lwip_netconn_do_close_internal+0x1dc>)
 80060b4:	f002 fb1e 	bl	80086f4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80060b8:	4628      	mov	r0, r5
 80060ba:	490e      	ldr	r1, [pc, #56]	@ (80060f4 <lwip_netconn_do_close_internal+0x1e0>)
 80060bc:	f002 fafc 	bl	80086b8 <tcp_err>
    tcp_arg(tpcb, conn);
 80060c0:	4621      	mov	r1, r4
 80060c2:	4628      	mov	r0, r5
 80060c4:	f002 fac4 	bl	8008650 <tcp_arg>
  return err;
 80060c8:	e7b8      	b.n	800603c <lwip_netconn_do_close_internal+0x128>
 80060ca:	bf00      	nop
 80060cc:	0800f46f 	.word	0x0800f46f
 80060d0:	0800f362 	.word	0x0800f362
 80060d4:	0800f15a 	.word	0x0800f15a
 80060d8:	0800f5ec 	.word	0x0800f5ec
 80060dc:	0800f60a 	.word	0x0800f60a
 80060e0:	0800f62e 	.word	0x0800f62e
 80060e4:	0800f52a 	.word	0x0800f52a
 80060e8:	0800f641 	.word	0x0800f641
 80060ec:	08006175 	.word	0x08006175
 80060f0:	080060f9 	.word	0x080060f9
 80060f4:	080062a1 	.word	0x080062a1

080060f8 <poll_tcp>:
{
 80060f8:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80060fa:	4604      	mov	r4, r0
 80060fc:	b930      	cbnz	r0, 800610c <poll_tcp+0x14>
 80060fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006168 <poll_tcp+0x70>)
 8006100:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8006104:	4919      	ldr	r1, [pc, #100]	@ (800616c <poll_tcp+0x74>)
 8006106:	481a      	ldr	r0, [pc, #104]	@ (8006170 <poll_tcp+0x78>)
 8006108:	f008 f956 	bl	800e3b8 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 800610c:	7861      	ldrb	r1, [r4, #1]
 800610e:	2901      	cmp	r1, #1
 8006110:	d11c      	bne.n	800614c <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006112:	4620      	mov	r0, r4
 8006114:	f7ff fdd6 	bl	8005cc4 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006118:	7f23      	ldrb	r3, [r4, #28]
 800611a:	06da      	lsls	r2, r3, #27
 800611c:	d514      	bpl.n	8006148 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800611e:	6862      	ldr	r2, [r4, #4]
 8006120:	b192      	cbz	r2, 8006148 <poll_tcp+0x50>
 8006122:	f8b2 0064 	ldrh.w	r0, [r2, #100]	@ 0x64
 8006126:	f640 3125 	movw	r1, #2853	@ 0xb25
 800612a:	4288      	cmp	r0, r1
 800612c:	d90c      	bls.n	8006148 <poll_tcp+0x50>
 800612e:	f8b2 2066 	ldrh.w	r2, [r2, #102]	@ 0x66
 8006132:	2a06      	cmp	r2, #6
 8006134:	d808      	bhi.n	8006148 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8006136:	f023 0310 	bic.w	r3, r3, #16
 800613a:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800613c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800613e:	b11b      	cbz	r3, 8006148 <poll_tcp+0x50>
 8006140:	2200      	movs	r2, #0
 8006142:	2102      	movs	r1, #2
 8006144:	4620      	mov	r0, r4
 8006146:	4798      	blx	r3
}
 8006148:	2000      	movs	r0, #0
 800614a:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 800614c:	2904      	cmp	r1, #4
 800614e:	d1e3      	bne.n	8006118 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8006150:	6a22      	ldr	r2, [r4, #32]
 8006152:	b11a      	cbz	r2, 800615c <poll_tcp+0x64>
 8006154:	7a53      	ldrb	r3, [r2, #9]
 8006156:	b10b      	cbz	r3, 800615c <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 8006158:	3b01      	subs	r3, #1
 800615a:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800615c:	2101      	movs	r1, #1
 800615e:	4620      	mov	r0, r4
 8006160:	f7ff fed8 	bl	8005f14 <lwip_netconn_do_close_internal>
 8006164:	e7d8      	b.n	8006118 <poll_tcp+0x20>
 8006166:	bf00      	nop
 8006168:	0800f46f 	.word	0x0800f46f
 800616c:	0800f500 	.word	0x0800f500
 8006170:	0800f15a 	.word	0x0800f15a

08006174 <sent_tcp>:
{
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006178:	4604      	mov	r4, r0
 800617a:	b1d8      	cbz	r0, 80061b4 <sent_tcp+0x40>
    if (conn->state == NETCONN_WRITE) {
 800617c:	7841      	ldrb	r1, [r0, #1]
 800617e:	2901      	cmp	r1, #1
 8006180:	d121      	bne.n	80061c6 <sent_tcp+0x52>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006182:	f7ff fd9f 	bl	8005cc4 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006186:	6863      	ldr	r3, [r4, #4]
 8006188:	b1db      	cbz	r3, 80061c2 <sent_tcp+0x4e>
 800618a:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 800618e:	f640 3225 	movw	r2, #2853	@ 0xb25
 8006192:	4291      	cmp	r1, r2
 8006194:	d915      	bls.n	80061c2 <sent_tcp+0x4e>
 8006196:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800619a:	2b06      	cmp	r3, #6
 800619c:	d811      	bhi.n	80061c2 <sent_tcp+0x4e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800619e:	7f23      	ldrb	r3, [r4, #28]
 80061a0:	f023 0310 	bic.w	r3, r3, #16
 80061a4:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80061a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80061a8:	b15b      	cbz	r3, 80061c2 <sent_tcp+0x4e>
 80061aa:	462a      	mov	r2, r5
 80061ac:	2102      	movs	r1, #2
 80061ae:	4620      	mov	r0, r4
 80061b0:	4798      	blx	r3
 80061b2:	e006      	b.n	80061c2 <sent_tcp+0x4e>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80061b4:	4b07      	ldr	r3, [pc, #28]	@ (80061d4 <sent_tcp+0x60>)
 80061b6:	f240 1293 	movw	r2, #403	@ 0x193
 80061ba:	4907      	ldr	r1, [pc, #28]	@ (80061d8 <sent_tcp+0x64>)
 80061bc:	4807      	ldr	r0, [pc, #28]	@ (80061dc <sent_tcp+0x68>)
 80061be:	f008 f8fb 	bl	800e3b8 <iprintf>
}
 80061c2:	2000      	movs	r0, #0
 80061c4:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 80061c6:	2904      	cmp	r1, #4
 80061c8:	d1dd      	bne.n	8006186 <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80061ca:	2101      	movs	r1, #1
 80061cc:	f7ff fea2 	bl	8005f14 <lwip_netconn_do_close_internal>
 80061d0:	e7d9      	b.n	8006186 <sent_tcp+0x12>
 80061d2:	bf00      	nop
 80061d4:	0800f46f 	.word	0x0800f46f
 80061d8:	0800f500 	.word	0x0800f500
 80061dc:	0800f15a 	.word	0x0800f15a

080061e0 <recv_tcp>:
{
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	4605      	mov	r5, r0
 80061e4:	4614      	mov	r4, r2
 80061e6:	461f      	mov	r7, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80061e8:	460e      	mov	r6, r1
 80061ea:	b931      	cbnz	r1, 80061fa <recv_tcp+0x1a>
 80061ec:	4b25      	ldr	r3, [pc, #148]	@ (8006284 <recv_tcp+0xa4>)
 80061ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80061f2:	4925      	ldr	r1, [pc, #148]	@ (8006288 <recv_tcp+0xa8>)
 80061f4:	4825      	ldr	r0, [pc, #148]	@ (800628c <recv_tcp+0xac>)
 80061f6:	f008 f8df 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80061fa:	b9f5      	cbnz	r5, 800623a <recv_tcp+0x5a>
 80061fc:	4b21      	ldr	r3, [pc, #132]	@ (8006284 <recv_tcp+0xa4>)
 80061fe:	f240 122d 	movw	r2, #301	@ 0x12d
 8006202:	4923      	ldr	r1, [pc, #140]	@ (8006290 <recv_tcp+0xb0>)
 8006204:	4821      	ldr	r0, [pc, #132]	@ (800628c <recv_tcp+0xac>)
 8006206:	f008 f8d7 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800620a:	b9bf      	cbnz	r7, 800623c <recv_tcp+0x5c>
    return ERR_VAL;
 800620c:	f06f 0005 	mvn.w	r0, #5
}
 8006210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (p != NULL) {
 8006212:	b164      	cbz	r4, 800622e <recv_tcp+0x4e>
    len = p->tot_len;
 8006214:	8926      	ldrh	r6, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8006216:	4621      	mov	r1, r4
 8006218:	4638      	mov	r0, r7
 800621a:	f007 fb28 	bl	800d86e <sys_mbox_trypost>
 800621e:	4601      	mov	r1, r0
 8006220:	b940      	cbnz	r0, 8006234 <recv_tcp+0x54>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006222:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006224:	b363      	cbz	r3, 8006280 <recv_tcp+0xa0>
 8006226:	4632      	mov	r2, r6
 8006228:	4628      	mov	r0, r5
 800622a:	4798      	blx	r3
 800622c:	e028      	b.n	8006280 <recv_tcp+0xa0>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800622e:	4c19      	ldr	r4, [pc, #100]	@ (8006294 <recv_tcp+0xb4>)
    len = 0;
 8006230:	2600      	movs	r6, #0
 8006232:	e7f0      	b.n	8006216 <recv_tcp+0x36>
    return ERR_MEM;
 8006234:	f04f 30ff 	mov.w	r0, #4294967295
 8006238:	e7ea      	b.n	8006210 <recv_tcp+0x30>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800623a:	b147      	cbz	r7, 800624e <recv_tcp+0x6e>
 800623c:	4b11      	ldr	r3, [pc, #68]	@ (8006284 <recv_tcp+0xa4>)
 800623e:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8006242:	4915      	ldr	r1, [pc, #84]	@ (8006298 <recv_tcp+0xb8>)
 8006244:	4811      	ldr	r0, [pc, #68]	@ (800628c <recv_tcp+0xac>)
 8006246:	f008 f8b7 	bl	800e3b8 <iprintf>
  if (conn == NULL) {
 800624a:	2d00      	cmp	r5, #0
 800624c:	d0de      	beq.n	800620c <recv_tcp+0x2c>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800624e:	686b      	ldr	r3, [r5, #4]
 8006250:	42b3      	cmp	r3, r6
 8006252:	d006      	beq.n	8006262 <recv_tcp+0x82>
 8006254:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <recv_tcp+0xa4>)
 8006256:	f240 1235 	movw	r2, #309	@ 0x135
 800625a:	4910      	ldr	r1, [pc, #64]	@ (800629c <recv_tcp+0xbc>)
 800625c:	480b      	ldr	r0, [pc, #44]	@ (800628c <recv_tcp+0xac>)
 800625e:	f008 f8ab 	bl	800e3b8 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006262:	f105 0710 	add.w	r7, r5, #16
 8006266:	4638      	mov	r0, r7
 8006268:	f007 fb39 	bl	800d8de <sys_mbox_valid>
 800626c:	2800      	cmp	r0, #0
 800626e:	d1d0      	bne.n	8006212 <recv_tcp+0x32>
    if (p != NULL) {
 8006270:	b134      	cbz	r4, 8006280 <recv_tcp+0xa0>
      tcp_recved(pcb, p->tot_len);
 8006272:	4630      	mov	r0, r6
 8006274:	8921      	ldrh	r1, [r4, #8]
 8006276:	f002 f973 	bl	8008560 <tcp_recved>
      pbuf_free(p);
 800627a:	4620      	mov	r0, r4
 800627c:	f001 fcb6 	bl	8007bec <pbuf_free>
    return ERR_OK;
 8006280:	2000      	movs	r0, #0
 8006282:	e7c5      	b.n	8006210 <recv_tcp+0x30>
 8006284:	0800f46f 	.word	0x0800f46f
 8006288:	0800f664 	.word	0x0800f664
 800628c:	0800f15a 	.word	0x0800f15a
 8006290:	0800f686 	.word	0x0800f686
 8006294:	0800f874 	.word	0x0800f874
 8006298:	0800f6a5 	.word	0x0800f6a5
 800629c:	0800f6bd 	.word	0x0800f6bd

080062a0 <err_tcp>:
{
 80062a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a4:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80062a6:	4604      	mov	r4, r0
 80062a8:	b930      	cbnz	r0, 80062b8 <err_tcp+0x18>
 80062aa:	4b42      	ldr	r3, [pc, #264]	@ (80063b4 <err_tcp+0x114>)
 80062ac:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80062b0:	4941      	ldr	r1, [pc, #260]	@ (80063b8 <err_tcp+0x118>)
 80062b2:	4842      	ldr	r0, [pc, #264]	@ (80063bc <err_tcp+0x11c>)
 80062b4:	f008 f880 	bl	800e3b8 <iprintf>
  SYS_ARCH_PROTECT(lev);
 80062b8:	f007 fb8a 	bl	800d9d0 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80062bc:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 80062be:	2700      	movs	r7, #0
  old_state = conn->state;
 80062c0:	7866      	ldrb	r6, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80062c2:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 80062c6:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 80062c8:	6067      	str	r7, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80062ca:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 80062cc:	7067      	strb	r7, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 80062ce:	f007 fb8b 	bl	800d9e8 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80062d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062d4:	b11b      	cbz	r3, 80062de <err_tcp+0x3e>
 80062d6:	463a      	mov	r2, r7
 80062d8:	2104      	movs	r1, #4
 80062da:	4620      	mov	r0, r4
 80062dc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80062de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062e0:	b11b      	cbz	r3, 80062ea <err_tcp+0x4a>
 80062e2:	2200      	movs	r2, #0
 80062e4:	4620      	mov	r0, r4
 80062e6:	4611      	mov	r1, r2
 80062e8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80062ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062ec:	b11b      	cbz	r3, 80062f6 <err_tcp+0x56>
 80062ee:	2200      	movs	r2, #0
 80062f0:	2102      	movs	r1, #2
 80062f2:	4620      	mov	r0, r4
 80062f4:	4798      	blx	r3
  switch (err) {
 80062f6:	f105 030f 	add.w	r3, r5, #15
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d843      	bhi.n	8006388 <err_tcp+0xe8>
 8006300:	4a2f      	ldr	r2, [pc, #188]	@ (80063c0 <err_tcp+0x120>)
 8006302:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006306:	f104 0810 	add.w	r8, r4, #16
 800630a:	4640      	mov	r0, r8
 800630c:	f007 fae7 	bl	800d8de <sys_mbox_valid>
 8006310:	b118      	cbz	r0, 800631a <err_tcp+0x7a>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8006312:	4639      	mov	r1, r7
 8006314:	4640      	mov	r0, r8
 8006316:	f007 faaa 	bl	800d86e <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800631a:	f104 0814 	add.w	r8, r4, #20
 800631e:	4640      	mov	r0, r8
 8006320:	f007 fadd 	bl	800d8de <sys_mbox_valid>
 8006324:	b118      	cbz	r0, 800632e <err_tcp+0x8e>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8006326:	4639      	mov	r1, r7
 8006328:	4640      	mov	r0, r8
 800632a:	f007 faa0 	bl	800d86e <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800632e:	2e01      	cmp	r6, #1
 8006330:	d002      	beq.n	8006338 <err_tcp+0x98>
 8006332:	1ef3      	subs	r3, r6, #3
 8006334:	2b01      	cmp	r3, #1
 8006336:	d830      	bhi.n	800639a <err_tcp+0xfa>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8006338:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800633a:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 800633e:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8006340:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8006342:	d435      	bmi.n	80063b0 <err_tcp+0x110>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006344:	6a23      	ldr	r3, [r4, #32]
 8006346:	b933      	cbnz	r3, 8006356 <err_tcp+0xb6>
 8006348:	4b1a      	ldr	r3, [pc, #104]	@ (80063b4 <err_tcp+0x114>)
 800634a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800634e:	491d      	ldr	r1, [pc, #116]	@ (80063c4 <err_tcp+0x124>)
 8006350:	481a      	ldr	r0, [pc, #104]	@ (80063bc <err_tcp+0x11c>)
 8006352:	f008 f831 	bl	800e3b8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8006356:	2e04      	cmp	r6, #4
        conn->current_msg->err = ERR_OK;
 8006358:	6a23      	ldr	r3, [r4, #32]
 800635a:	bf08      	it	eq
 800635c:	2500      	moveq	r5, #0
 800635e:	711d      	strb	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006360:	681d      	ldr	r5, [r3, #0]
 8006362:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8006364:	4628      	mov	r0, r5
 8006366:	f007 faf7 	bl	800d958 <sys_sem_valid>
 800636a:	b930      	cbnz	r0, 800637a <err_tcp+0xda>
 800636c:	4b11      	ldr	r3, [pc, #68]	@ (80063b4 <err_tcp+0x114>)
 800636e:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8006372:	4915      	ldr	r1, [pc, #84]	@ (80063c8 <err_tcp+0x128>)
 8006374:	4811      	ldr	r0, [pc, #68]	@ (80063bc <err_tcp+0x11c>)
 8006376:	f008 f81f 	bl	800e3b8 <iprintf>
      conn->current_msg = NULL;
 800637a:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 800637c:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 800637e:	6223      	str	r3, [r4, #32]
}
 8006380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8006384:	f007 bae2 	b.w	800d94c <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8006388:	b12d      	cbz	r5, 8006396 <err_tcp+0xf6>
 800638a:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <err_tcp+0x114>)
 800638c:	227d      	movs	r2, #125	@ 0x7d
 800638e:	490f      	ldr	r1, [pc, #60]	@ (80063cc <err_tcp+0x12c>)
 8006390:	480a      	ldr	r0, [pc, #40]	@ (80063bc <err_tcp+0x11c>)
 8006392:	f008 f811 	bl	800e3b8 <iprintf>
{
 8006396:	2700      	movs	r7, #0
 8006398:	e7b5      	b.n	8006306 <err_tcp+0x66>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800639a:	6a23      	ldr	r3, [r4, #32]
 800639c:	b143      	cbz	r3, 80063b0 <err_tcp+0x110>
 800639e:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <err_tcp+0x114>)
 80063a0:	f240 12f7 	movw	r2, #503	@ 0x1f7
 80063a4:	490a      	ldr	r1, [pc, #40]	@ (80063d0 <err_tcp+0x130>)
 80063a6:	4805      	ldr	r0, [pc, #20]	@ (80063bc <err_tcp+0x11c>)
}
 80063a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80063ac:	f008 b804 	b.w	800e3b8 <iprintf>
}
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b4:	0800f46f 	.word	0x0800f46f
 80063b8:	0800f500 	.word	0x0800f500
 80063bc:	0800f15a 	.word	0x0800f15a
 80063c0:	0800f868 	.word	0x0800f868
 80063c4:	0800f52a 	.word	0x0800f52a
 80063c8:	0800f6eb 	.word	0x0800f6eb
 80063cc:	0800f6db 	.word	0x0800f6db
 80063d0:	0800f704 	.word	0x0800f704

080063d4 <lwip_netconn_is_err_msg>:
{
 80063d4:	b538      	push	{r3, r4, r5, lr}
 80063d6:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 80063d8:	460d      	mov	r5, r1
 80063da:	b929      	cbnz	r1, 80063e8 <lwip_netconn_is_err_msg+0x14>
 80063dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006414 <lwip_netconn_is_err_msg+0x40>)
 80063de:	2285      	movs	r2, #133	@ 0x85
 80063e0:	490d      	ldr	r1, [pc, #52]	@ (8006418 <lwip_netconn_is_err_msg+0x44>)
 80063e2:	480e      	ldr	r0, [pc, #56]	@ (800641c <lwip_netconn_is_err_msg+0x48>)
 80063e4:	f007 ffe8 	bl	800e3b8 <iprintf>
  if (msg == &netconn_aborted) {
 80063e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <lwip_netconn_is_err_msg+0x4c>)
 80063ea:	429c      	cmp	r4, r3
 80063ec:	d007      	beq.n	80063fe <lwip_netconn_is_err_msg+0x2a>
  } else if (msg == &netconn_reset) {
 80063ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <lwip_netconn_is_err_msg+0x50>)
 80063f0:	429c      	cmp	r4, r3
 80063f2:	d10a      	bne.n	800640a <lwip_netconn_is_err_msg+0x36>
 80063f4:	f06f 030d 	mvn.w	r3, #13
    return 1;
 80063f8:	2001      	movs	r0, #1
    *err = ERR_RST;
 80063fa:	702b      	strb	r3, [r5, #0]
}
 80063fc:	bd38      	pop	{r3, r4, r5, pc}
 80063fe:	f06f 030c 	mvn.w	r3, #12
 8006402:	e7f9      	b.n	80063f8 <lwip_netconn_is_err_msg+0x24>
 8006404:	f06f 030e 	mvn.w	r3, #14
 8006408:	e7f6      	b.n	80063f8 <lwip_netconn_is_err_msg+0x24>
  } else if (msg == &netconn_closed) {
 800640a:	4b07      	ldr	r3, [pc, #28]	@ (8006428 <lwip_netconn_is_err_msg+0x54>)
 800640c:	429c      	cmp	r4, r3
 800640e:	d0f9      	beq.n	8006404 <lwip_netconn_is_err_msg+0x30>
  return 0;
 8006410:	2000      	movs	r0, #0
 8006412:	e7f3      	b.n	80063fc <lwip_netconn_is_err_msg+0x28>
 8006414:	0800f46f 	.word	0x0800f46f
 8006418:	0800f71e 	.word	0x0800f71e
 800641c:	0800f15a 	.word	0x0800f15a
 8006420:	0800f876 	.word	0x0800f876
 8006424:	0800f875 	.word	0x0800f875
 8006428:	0800f874 	.word	0x0800f874

0800642c <lwip_netconn_do_newconn>:
{
 800642c:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800642e:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8006430:	6805      	ldr	r5, [r0, #0]
{
 8006432:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8006434:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8006436:	6868      	ldr	r0, [r5, #4]
 8006438:	bb28      	cbnz	r0, 8006486 <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800643a:	782b      	ldrb	r3, [r5, #0]
 800643c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006440:	2b10      	cmp	r3, #16
 8006442:	d014      	beq.n	800646e <lwip_netconn_do_newconn+0x42>
 8006444:	2b20      	cmp	r3, #32
 8006446:	d11c      	bne.n	8006482 <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006448:	f005 ff78 	bl	800c33c <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 800644c:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800644e:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8006450:	6850      	ldr	r0, [r2, #4]
 8006452:	b150      	cbz	r0, 800646a <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006454:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006456:	490c      	ldr	r1, [pc, #48]	@ (8006488 <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006458:	2b22      	cmp	r3, #34	@ 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800645a:	bf04      	itt	eq
 800645c:	2301      	moveq	r3, #1
 800645e:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006460:	f005 ff26 	bl	800c2b0 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	b96b      	cbnz	r3, 8006486 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 800646a:	23ff      	movs	r3, #255	@ 0xff
 800646c:	e00a      	b.n	8006484 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800646e:	f002 fbd9 	bl	8008c24 <tcp_new_ip_type>
 8006472:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8006474:	6820      	ldr	r0, [r4, #0]
 8006476:	6843      	ldr	r3, [r0, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f6      	beq.n	800646a <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 800647c:	f7ff fc00 	bl	8005c80 <setup_tcp>
 8006480:	e7f0      	b.n	8006464 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 8006482:	23fa      	movs	r3, #250	@ 0xfa
    msg->err = ERR_MEM;
 8006484:	7123      	strb	r3, [r4, #4]
}
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	08005bd5 	.word	0x08005bd5

0800648c <netconn_alloc>:
{
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006490:	2007      	movs	r0, #7
{
 8006492:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006494:	f001 f90c 	bl	80076b0 <memp_malloc>
  if (conn == NULL) {
 8006498:	4604      	mov	r4, r0
 800649a:	b1a0      	cbz	r0, 80064c6 <netconn_alloc+0x3a>
  conn->type = t;
 800649c:	7005      	strb	r5, [r0, #0]
 800649e:	f005 05f0 	and.w	r5, r5, #240	@ 0xf0
  conn->pending_err = ERR_OK;
 80064a2:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 80064a4:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 80064a6:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 80064a8:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 80064aa:	d00e      	beq.n	80064ca <netconn_alloc+0x3e>
 80064ac:	2d20      	cmp	r5, #32
 80064ae:	d00c      	beq.n	80064ca <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80064b0:	4b16      	ldr	r3, [pc, #88]	@ (800650c <netconn_alloc+0x80>)
 80064b2:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80064b6:	4916      	ldr	r1, [pc, #88]	@ (8006510 <netconn_alloc+0x84>)
 80064b8:	4816      	ldr	r0, [pc, #88]	@ (8006514 <netconn_alloc+0x88>)
 80064ba:	f007 ff7d 	bl	800e3b8 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 80064be:	4621      	mov	r1, r4
 80064c0:	2007      	movs	r0, #7
 80064c2:	f001 f923 	bl	800770c <memp_free>
    return NULL;
 80064c6:	2400      	movs	r4, #0
 80064c8:	e01d      	b.n	8006506 <netconn_alloc+0x7a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80064ca:	f104 0710 	add.w	r7, r4, #16
 80064ce:	2106      	movs	r1, #6
 80064d0:	4638      	mov	r0, r7
 80064d2:	f007 f9b5 	bl	800d840 <sys_mbox_new>
 80064d6:	4601      	mov	r1, r0
 80064d8:	2800      	cmp	r0, #0
 80064da:	d1f0      	bne.n	80064be <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80064dc:	f104 000c 	add.w	r0, r4, #12
 80064e0:	f007 fa05 	bl	800d8ee <sys_sem_new>
 80064e4:	4605      	mov	r5, r0
 80064e6:	b118      	cbz	r0, 80064f0 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 80064e8:	4638      	mov	r0, r7
 80064ea:	f007 f9b6 	bl	800d85a <sys_mbox_free>
    goto free_and_return;
 80064ee:	e7e6      	b.n	80064be <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 80064f0:	f104 0014 	add.w	r0, r4, #20
 80064f4:	f007 f9f8 	bl	800d8e8 <sys_mbox_set_invalid>
  conn->socket       = -1;
 80064f8:	f04f 33ff 	mov.w	r3, #4294967295
  conn->state        = NETCONN_NONE;
 80064fc:	7065      	strb	r5, [r4, #1]
  conn->socket       = -1;
 80064fe:	61a3      	str	r3, [r4, #24]
  conn->flags = init_flags;
 8006500:	7725      	strb	r5, [r4, #28]
  conn->current_msg  = NULL;
 8006502:	e9c4 5608 	strd	r5, r6, [r4, #32]
}
 8006506:	4620      	mov	r0, r4
 8006508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800650a:	bf00      	nop
 800650c:	0800f46f 	.word	0x0800f46f
 8006510:	0800f72a 	.word	0x0800f72a
 8006514:	0800f15a 	.word	0x0800f15a

08006518 <netconn_free>:
{
 8006518:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800651a:	6843      	ldr	r3, [r0, #4]
{
 800651c:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800651e:	b133      	cbz	r3, 800652e <netconn_free+0x16>
 8006520:	4b16      	ldr	r3, [pc, #88]	@ (800657c <netconn_free+0x64>)
 8006522:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8006526:	4916      	ldr	r1, [pc, #88]	@ (8006580 <netconn_free+0x68>)
 8006528:	4816      	ldr	r0, [pc, #88]	@ (8006584 <netconn_free+0x6c>)
 800652a:	f007 ff45 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800652e:	f104 0010 	add.w	r0, r4, #16
 8006532:	f007 f9d4 	bl	800d8de <sys_mbox_valid>
 8006536:	b130      	cbz	r0, 8006546 <netconn_free+0x2e>
 8006538:	4b10      	ldr	r3, [pc, #64]	@ (800657c <netconn_free+0x64>)
 800653a:	f240 3223 	movw	r2, #803	@ 0x323
 800653e:	4912      	ldr	r1, [pc, #72]	@ (8006588 <netconn_free+0x70>)
 8006540:	4810      	ldr	r0, [pc, #64]	@ (8006584 <netconn_free+0x6c>)
 8006542:	f007 ff39 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8006546:	f104 0014 	add.w	r0, r4, #20
 800654a:	f007 f9c8 	bl	800d8de <sys_mbox_valid>
 800654e:	b130      	cbz	r0, 800655e <netconn_free+0x46>
 8006550:	4b0a      	ldr	r3, [pc, #40]	@ (800657c <netconn_free+0x64>)
 8006552:	f240 3226 	movw	r2, #806	@ 0x326
 8006556:	490d      	ldr	r1, [pc, #52]	@ (800658c <netconn_free+0x74>)
 8006558:	480a      	ldr	r0, [pc, #40]	@ (8006584 <netconn_free+0x6c>)
 800655a:	f007 ff2d 	bl	800e3b8 <iprintf>
  sys_sem_free(&conn->op_completed);
 800655e:	f104 050c 	add.w	r5, r4, #12
 8006562:	4628      	mov	r0, r5
 8006564:	f007 f9f5 	bl	800d952 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8006568:	4628      	mov	r0, r5
 800656a:	f007 f9fa 	bl	800d962 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 800656e:	4621      	mov	r1, r4
 8006570:	2007      	movs	r0, #7
}
 8006572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 8006576:	f001 b8c9 	b.w	800770c <memp_free>
 800657a:	bf00      	nop
 800657c:	0800f46f 	.word	0x0800f46f
 8006580:	0800f750 	.word	0x0800f750
 8006584:	0800f15a 	.word	0x0800f15a
 8006588:	0800f77e 	.word	0x0800f77e
 800658c:	0800f7b8 	.word	0x0800f7b8

08006590 <netconn_drain>:
{
 8006590:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006592:	f100 0510 	add.w	r5, r0, #16
{
 8006596:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006598:	4628      	mov	r0, r5
 800659a:	f007 f9a0 	bl	800d8de <sys_mbox_valid>
 800659e:	b158      	cbz	r0, 80065b8 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80065a0:	a901      	add	r1, sp, #4
 80065a2:	4628      	mov	r0, r5
 80065a4:	f007 f990 	bl	800d8c8 <sys_arch_mbox_tryfetch>
 80065a8:	3001      	adds	r0, #1
 80065aa:	d118      	bne.n	80065de <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 80065ac:	4628      	mov	r0, r5
 80065ae:	f007 f954 	bl	800d85a <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80065b2:	4628      	mov	r0, r5
 80065b4:	f007 f998 	bl	800d8e8 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80065b8:	3414      	adds	r4, #20
 80065ba:	4620      	mov	r0, r4
 80065bc:	f007 f98f 	bl	800d8de <sys_mbox_valid>
 80065c0:	b158      	cbz	r0, 80065da <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80065c2:	a901      	add	r1, sp, #4
 80065c4:	4620      	mov	r0, r4
 80065c6:	f007 f97f 	bl	800d8c8 <sys_arch_mbox_tryfetch>
 80065ca:	3001      	adds	r0, #1
 80065cc:	d11a      	bne.n	8006604 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 80065ce:	4620      	mov	r0, r4
 80065d0:	f007 f943 	bl	800d85a <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80065d4:	4620      	mov	r0, r4
 80065d6:	f007 f987 	bl	800d8e8 <sys_mbox_set_invalid>
}
 80065da:	b002      	add	sp, #8
 80065dc:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80065de:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80065e0:	9801      	ldr	r0, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80065e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d109      	bne.n	80065fe <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80065ea:	f10d 0103 	add.w	r1, sp, #3
 80065ee:	f7ff fef1 	bl	80063d4 <lwip_netconn_is_err_msg>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d1d4      	bne.n	80065a0 <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 80065f6:	9801      	ldr	r0, [sp, #4]
 80065f8:	f001 faf8 	bl	8007bec <pbuf_free>
 80065fc:	e7d0      	b.n	80065a0 <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 80065fe:	f000 fa67 	bl	8006ad0 <netbuf_delete>
 8006602:	e7cd      	b.n	80065a0 <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006604:	f10d 0103 	add.w	r1, sp, #3
 8006608:	9801      	ldr	r0, [sp, #4]
 800660a:	f7ff fee3 	bl	80063d4 <lwip_netconn_is_err_msg>
 800660e:	4606      	mov	r6, r0
 8006610:	2800      	cmp	r0, #0
 8006612:	d1d6      	bne.n	80065c2 <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 8006614:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8006616:	4628      	mov	r0, r5
 8006618:	f7ff ffba 	bl	8006590 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800661c:	6868      	ldr	r0, [r5, #4]
 800661e:	b110      	cbz	r0, 8006626 <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 8006620:	f002 f9ec 	bl	80089fc <tcp_abort>
            newconn->pcb.tcp = NULL;
 8006624:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 8006626:	4628      	mov	r0, r5
 8006628:	f7ff ff76 	bl	8006518 <netconn_free>
 800662c:	e7c9      	b.n	80065c2 <netconn_drain+0x32>
	...

08006630 <accept_function>:
{
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	460f      	mov	r7, r1
 8006634:	4615      	mov	r5, r2
  if (conn == NULL) {
 8006636:	4604      	mov	r4, r0
 8006638:	b188      	cbz	r0, 800665e <accept_function+0x2e>
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800663a:	f100 0614 	add.w	r6, r0, #20
 800663e:	4630      	mov	r0, r6
 8006640:	f007 f94d 	bl	800d8de <sys_mbox_valid>
 8006644:	b158      	cbz	r0, 800665e <accept_function+0x2e>
  if (newpcb == NULL) {
 8006646:	b977      	cbnz	r7, 8006666 <accept_function+0x36>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8006648:	492f      	ldr	r1, [pc, #188]	@ (8006708 <accept_function+0xd8>)
 800664a:	4630      	mov	r0, r6
 800664c:	f007 f90f 	bl	800d86e <sys_mbox_trypost>
 8006650:	4602      	mov	r2, r0
 8006652:	b920      	cbnz	r0, 800665e <accept_function+0x2e>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006654:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006656:	b113      	cbz	r3, 800665e <accept_function+0x2e>
 8006658:	4601      	mov	r1, r0
 800665a:	4620      	mov	r0, r4
 800665c:	4798      	blx	r3
    return ERR_VAL;
 800665e:	f06f 0605 	mvn.w	r6, #5
}
 8006662:	4630      	mov	r0, r6
 8006664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8006666:	b135      	cbz	r5, 8006676 <accept_function+0x46>
 8006668:	4b28      	ldr	r3, [pc, #160]	@ (800670c <accept_function+0xdc>)
 800666a:	f240 222a 	movw	r2, #554	@ 0x22a
 800666e:	4928      	ldr	r1, [pc, #160]	@ (8006710 <accept_function+0xe0>)
 8006670:	4828      	ldr	r0, [pc, #160]	@ (8006714 <accept_function+0xe4>)
 8006672:	f007 fea1 	bl	800e3b8 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 8006676:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006678:	7820      	ldrb	r0, [r4, #0]
 800667a:	f7ff ff07 	bl	800648c <netconn_alloc>
  if (newconn == NULL) {
 800667e:	4605      	mov	r5, r0
 8006680:	b968      	cbnz	r0, 800669e <accept_function+0x6e>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8006682:	4921      	ldr	r1, [pc, #132]	@ (8006708 <accept_function+0xd8>)
 8006684:	4630      	mov	r0, r6
 8006686:	f007 f8f2 	bl	800d86e <sys_mbox_trypost>
 800668a:	4602      	mov	r2, r0
 800668c:	b920      	cbnz	r0, 8006698 <accept_function+0x68>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800668e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006690:	b113      	cbz	r3, 8006698 <accept_function+0x68>
 8006692:	4601      	mov	r1, r0
 8006694:	4620      	mov	r0, r4
 8006696:	4798      	blx	r3
    return ERR_MEM;
 8006698:	f04f 36ff 	mov.w	r6, #4294967295
 800669c:	e7e1      	b.n	8006662 <accept_function+0x32>
  newconn->pcb.tcp = newpcb;
 800669e:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 80066a0:	f7ff faee 	bl	8005c80 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80066a4:	4630      	mov	r0, r6
 80066a6:	4629      	mov	r1, r5
 80066a8:	f007 f8e1 	bl	800d86e <sys_mbox_trypost>
 80066ac:	4606      	mov	r6, r0
 80066ae:	b318      	cbz	r0, 80066f8 <accept_function+0xc8>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80066b0:	686c      	ldr	r4, [r5, #4]
    tcp_arg(pcb, NULL);
 80066b2:	2100      	movs	r1, #0
 80066b4:	4620      	mov	r0, r4
 80066b6:	f001 ffcb 	bl	8008650 <tcp_arg>
    tcp_recv(pcb, NULL);
 80066ba:	4620      	mov	r0, r4
 80066bc:	2100      	movs	r1, #0
 80066be:	f001 ffcb 	bl	8008658 <tcp_recv>
    tcp_sent(pcb, NULL);
 80066c2:	4620      	mov	r0, r4
 80066c4:	2100      	movs	r1, #0
 80066c6:	f001 ffdf 	bl	8008688 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80066ca:	2200      	movs	r2, #0
 80066cc:	4620      	mov	r0, r4
 80066ce:	4611      	mov	r1, r2
 80066d0:	f002 f810 	bl	80086f4 <tcp_poll>
    tcp_err(pcb, NULL);
 80066d4:	2100      	movs	r1, #0
 80066d6:	4620      	mov	r0, r4
    sys_mbox_free(&newconn->recvmbox);
 80066d8:	f105 0410 	add.w	r4, r5, #16
    tcp_err(pcb, NULL);
 80066dc:	f001 ffec 	bl	80086b8 <tcp_err>
    newconn->pcb.tcp = NULL;
 80066e0:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 80066e2:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 80066e4:	606b      	str	r3, [r5, #4]
    sys_mbox_free(&newconn->recvmbox);
 80066e6:	f007 f8b8 	bl	800d85a <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80066ea:	4620      	mov	r0, r4
 80066ec:	f007 f8fc 	bl	800d8e8 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80066f0:	4628      	mov	r0, r5
 80066f2:	f7ff ff11 	bl	8006518 <netconn_free>
    return ERR_MEM;
 80066f6:	e7cf      	b.n	8006698 <accept_function+0x68>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80066f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0b1      	beq.n	8006662 <accept_function+0x32>
 80066fe:	4602      	mov	r2, r0
 8006700:	4601      	mov	r1, r0
 8006702:	4620      	mov	r0, r4
 8006704:	4798      	blx	r3
 8006706:	e7ac      	b.n	8006662 <accept_function+0x32>
 8006708:	0800f876 	.word	0x0800f876
 800670c:	0800f46f 	.word	0x0800f46f
 8006710:	0800f7f4 	.word	0x0800f7f4
 8006714:	0800f15a 	.word	0x0800f15a

08006718 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 8006718:	6803      	ldr	r3, [r0, #0]
{
 800671a:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 800671c:	785d      	ldrb	r5, [r3, #1]
{
 800671e:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8006720:	b1dd      	cbz	r5, 800675a <lwip_netconn_do_delconn+0x42>
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006728:	2b10      	cmp	r3, #16
 800672a:	d006      	beq.n	800673a <lwip_netconn_do_delconn+0x22>
 800672c:	4b37      	ldr	r3, [pc, #220]	@ (800680c <lwip_netconn_do_delconn+0xf4>)
 800672e:	f240 425e 	movw	r2, #1118	@ 0x45e
 8006732:	4937      	ldr	r1, [pc, #220]	@ (8006810 <lwip_netconn_do_delconn+0xf8>)
 8006734:	4837      	ldr	r0, [pc, #220]	@ (8006814 <lwip_netconn_do_delconn+0xfc>)
 8006736:	f007 fe3f 	bl	800e3b8 <iprintf>
  if (((state != NETCONN_NONE) &&
 800673a:	2d02      	cmp	r5, #2
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800673c:	6823      	ldr	r3, [r4, #0]
  if (((state != NETCONN_NONE) &&
 800673e:	d00c      	beq.n	800675a <lwip_netconn_do_delconn+0x42>
       (state != NETCONN_LISTEN) &&
 8006740:	2d03      	cmp	r5, #3
 8006742:	d102      	bne.n	800674a <lwip_netconn_do_delconn+0x32>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8006744:	7f1b      	ldrb	r3, [r3, #28]
 8006746:	075b      	lsls	r3, r3, #29
 8006748:	d407      	bmi.n	800675a <lwip_netconn_do_delconn+0x42>
    msg->err = ERR_INPROGRESS;
 800674a:	23fb      	movs	r3, #251	@ 0xfb
 800674c:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800674e:	6820      	ldr	r0, [r4, #0]
}
 8006750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006754:	300c      	adds	r0, #12
 8006756:	f007 b8ff 	b.w	800d958 <sys_sem_valid>
    msg->err = ERR_OK;
 800675a:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 800675c:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 800675e:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8006760:	f7ff ff16 	bl	8006590 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	6850      	ldr	r0, [r2, #4]
 8006768:	b160      	cbz	r0, 8006784 <lwip_netconn_do_delconn+0x6c>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800676a:	7813      	ldrb	r3, [r2, #0]
 800676c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006770:	2b10      	cmp	r3, #16
 8006772:	d015      	beq.n	80067a0 <lwip_netconn_do_delconn+0x88>
 8006774:	2b20      	cmp	r3, #32
 8006776:	d102      	bne.n	800677e <lwip_netconn_do_delconn+0x66>
          msg->conn->pcb.udp->recv_arg = NULL;
 8006778:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 800677a:	f005 fdab 	bl	800c2d4 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	2200      	movs	r2, #0
 8006782:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8006784:	6820      	ldr	r0, [r4, #0]
 8006786:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006788:	b113      	cbz	r3, 8006790 <lwip_netconn_do_delconn+0x78>
 800678a:	2200      	movs	r2, #0
 800678c:	4611      	mov	r1, r2
 800678e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0da      	beq.n	800674e <lwip_netconn_do_delconn+0x36>
 8006798:	2200      	movs	r2, #0
 800679a:	2102      	movs	r1, #2
 800679c:	4798      	blx	r3
 800679e:	e7d6      	b.n	800674e <lwip_netconn_do_delconn+0x36>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80067a0:	6a13      	ldr	r3, [r2, #32]
 80067a2:	b133      	cbz	r3, 80067b2 <lwip_netconn_do_delconn+0x9a>
 80067a4:	4b19      	ldr	r3, [pc, #100]	@ (800680c <lwip_netconn_do_delconn+0xf4>)
 80067a6:	f240 4294 	movw	r2, #1172	@ 0x494
 80067aa:	491b      	ldr	r1, [pc, #108]	@ (8006818 <lwip_netconn_do_delconn+0x100>)
 80067ac:	4819      	ldr	r0, [pc, #100]	@ (8006814 <lwip_netconn_do_delconn+0xfc>)
 80067ae:	f007 fe03 	bl	800e3b8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80067b2:	6820      	ldr	r0, [r4, #0]
 80067b4:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80067b6:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 80067b8:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80067ba:	2303      	movs	r3, #3
 80067bc:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 80067be:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80067c0:	f7ff fba8 	bl	8005f14 <lwip_netconn_do_close_internal>
 80067c4:	b308      	cbz	r0, 800680a <lwip_netconn_do_delconn+0xf2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	785b      	ldrb	r3, [r3, #1]
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d006      	beq.n	80067dc <lwip_netconn_do_delconn+0xc4>
 80067ce:	4b0f      	ldr	r3, [pc, #60]	@ (800680c <lwip_netconn_do_delconn+0xf4>)
 80067d0:	f240 429a 	movw	r2, #1178	@ 0x49a
 80067d4:	4911      	ldr	r1, [pc, #68]	@ (800681c <lwip_netconn_do_delconn+0x104>)
 80067d6:	480f      	ldr	r0, [pc, #60]	@ (8006814 <lwip_netconn_do_delconn+0xfc>)
 80067d8:	f007 fdee 	bl	800e3b8 <iprintf>
            UNLOCK_TCPIP_CORE();
 80067dc:	4810      	ldr	r0, [pc, #64]	@ (8006820 <lwip_netconn_do_delconn+0x108>)
 80067de:	f007 f8dd 	bl	800d99c <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80067e2:	6820      	ldr	r0, [r4, #0]
 80067e4:	2100      	movs	r1, #0
 80067e6:	300c      	adds	r0, #12
 80067e8:	f007 f895 	bl	800d916 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80067ec:	480c      	ldr	r0, [pc, #48]	@ (8006820 <lwip_netconn_do_delconn+0x108>)
 80067ee:	f007 f8d0 	bl	800d992 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	b143      	cbz	r3, 800680a <lwip_netconn_do_delconn+0xf2>
 80067f8:	4b04      	ldr	r3, [pc, #16]	@ (800680c <lwip_netconn_do_delconn+0xf4>)
 80067fa:	f240 429e 	movw	r2, #1182	@ 0x49e
 80067fe:	4907      	ldr	r1, [pc, #28]	@ (800681c <lwip_netconn_do_delconn+0x104>)
 8006800:	4804      	ldr	r0, [pc, #16]	@ (8006814 <lwip_netconn_do_delconn+0xfc>)
}
 8006802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006806:	f007 bdd7 	b.w	800e3b8 <iprintf>
}
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	0800f46f 	.word	0x0800f46f
 8006810:	0800f81b 	.word	0x0800f81b
 8006814:	0800f15a 	.word	0x0800f15a
 8006818:	0800f82f 	.word	0x0800f82f
 800681c:	0800f84a 	.word	0x0800f84a
 8006820:	2002a614 	.word	0x2002a614

08006824 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8006824:	6803      	ldr	r3, [r0, #0]
{
 8006826:	b510      	push	{r4, lr}
 8006828:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800682a:	6858      	ldr	r0, [r3, #4]
 800682c:	b188      	cbz	r0, 8006852 <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006834:	2b10      	cmp	r3, #16
 8006836:	d007      	beq.n	8006848 <lwip_netconn_do_bind+0x24>
 8006838:	2b20      	cmp	r3, #32
 800683a:	d10a      	bne.n	8006852 <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800683c:	89a2      	ldrh	r2, [r4, #12]
 800683e:	68a1      	ldr	r1, [r4, #8]
 8006840:	f005 fbb6 	bl	800bfb0 <udp_bind>
  msg->err = err;
 8006844:	7120      	strb	r0, [r4, #4]
}
 8006846:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006848:	89a2      	ldrh	r2, [r4, #12]
 800684a:	68a1      	ldr	r1, [r4, #8]
 800684c:	f001 fd96 	bl	800837c <tcp_bind>
        break;
 8006850:	e7f8      	b.n	8006844 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006852:	f06f 0005 	mvn.w	r0, #5
 8006856:	e7f5      	b.n	8006844 <lwip_netconn_do_bind+0x20>

08006858 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8006858:	6803      	ldr	r3, [r0, #0]
{
 800685a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800685c:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800685e:	6858      	ldr	r0, [r3, #4]
 8006860:	2800      	cmp	r0, #0
 8006862:	d04f      	beq.n	8006904 <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006864:	781a      	ldrb	r2, [r3, #0]
 8006866:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800686a:	2a10      	cmp	r2, #16
 800686c:	d14c      	bne.n	8006908 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 800686e:	785b      	ldrb	r3, [r3, #1]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d143      	bne.n	80068fc <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8006874:	7d03      	ldrb	r3, [r0, #20]
 8006876:	b11b      	cbz	r3, 8006880 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 8006878:	23fa      	movs	r3, #250	@ 0xfa
      err = ERR_ARG;
 800687a:	f88d 3007 	strb.w	r3, [sp, #7]
 800687e:	e031      	b.n	80068e4 <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8006880:	f10d 0207 	add.w	r2, sp, #7
 8006884:	21ff      	movs	r1, #255	@ 0xff
 8006886:	f001 fdcf 	bl	8008428 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 800688a:	4605      	mov	r5, r0
 800688c:	b350      	cbz	r0, 80068e4 <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800688e:	6820      	ldr	r0, [r4, #0]
 8006890:	3010      	adds	r0, #16
 8006892:	f007 f824 	bl	800d8de <sys_mbox_valid>
 8006896:	b138      	cbz	r0, 80068a8 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	3010      	adds	r0, #16
 800689c:	f006 ffdd 	bl	800d85a <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	3010      	adds	r0, #16
 80068a4:	f007 f820 	bl	800d8e8 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80068a8:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 80068aa:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80068ac:	3014      	adds	r0, #20
            err = ERR_OK;
 80068ae:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80068b2:	f007 f814 	bl	800d8de <sys_mbox_valid>
 80068b6:	b930      	cbnz	r0, 80068c6 <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	2106      	movs	r1, #6
 80068bc:	3014      	adds	r0, #20
 80068be:	f006 ffbf 	bl	800d840 <sys_mbox_new>
 80068c2:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 80068c6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80068ca:	b983      	cbnz	r3, 80068ee <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 80068cc:	6821      	ldr	r1, [r4, #0]
 80068ce:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80068d0:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 80068d2:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 80068d4:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80068d6:	f001 febb 	bl	8008650 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	490b      	ldr	r1, [pc, #44]	@ (800690c <lwip_netconn_do_listen+0xb4>)
 80068de:	6858      	ldr	r0, [r3, #4]
 80068e0:	f001 ff02 	bl	80086e8 <tcp_accept>
  msg->err = err;
 80068e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80068e8:	7123      	strb	r3, [r4, #4]
}
 80068ea:	b003      	add	sp, #12
 80068ec:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 80068ee:	4628      	mov	r0, r5
 80068f0:	f002 fa4e 	bl	8008d90 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	2200      	movs	r2, #0
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	e7f3      	b.n	80068e4 <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d101      	bne.n	8006904 <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	e7ba      	b.n	800687a <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 8006904:	23f5      	movs	r3, #245	@ 0xf5
 8006906:	e7b8      	b.n	800687a <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 8006908:	23f0      	movs	r3, #240	@ 0xf0
 800690a:	e7b6      	b.n	800687a <lwip_netconn_do_listen+0x22>
 800690c:	08006631 	.word	0x08006631

08006910 <lwip_netconn_do_recv>:
{
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8006912:	2300      	movs	r3, #0
{
 8006914:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8006916:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8006918:	6803      	ldr	r3, [r0, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	b192      	cbz	r2, 8006944 <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006924:	2b10      	cmp	r3, #16
 8006926:	d10d      	bne.n	8006944 <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 8006928:	6885      	ldr	r5, [r0, #8]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800692a:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800692e:	42bd      	cmp	r5, r7
 8006930:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006932:	6823      	ldr	r3, [r4, #0]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8006934:	bf28      	it	cs
 8006936:	463e      	movcs	r6, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006938:	6858      	ldr	r0, [r3, #4]
 800693a:	b2b1      	uxth	r1, r6
 800693c:	f001 fe10 	bl	8008560 <tcp_recved>
      } while (remaining != 0);
 8006940:	1bad      	subs	r5, r5, r6
 8006942:	d1f4      	bne.n	800692e <lwip_netconn_do_recv+0x1e>
}
 8006944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006948 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8006948:	b510      	push	{r4, lr}
 800694a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800694c:	6800      	ldr	r0, [r0, #0]
 800694e:	f7fe ffc8 	bl	80058e2 <netconn_err>
  if (err == ERR_OK) {
 8006952:	2800      	cmp	r0, #0
 8006954:	d14a      	bne.n	80069ec <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	781a      	ldrb	r2, [r3, #0]
 800695a:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800695e:	2a10      	cmp	r2, #16
 8006960:	d142      	bne.n	80069e8 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8006962:	785a      	ldrb	r2, [r3, #1]
 8006964:	2a00      	cmp	r2, #0
 8006966:	d143      	bne.n	80069f0 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	2a00      	cmp	r2, #0
 800696c:	d043      	beq.n	80069f6 <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 800696e:	2201      	movs	r2, #1
 8006970:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	b133      	cbz	r3, 8006984 <lwip_netconn_do_write+0x3c>
 8006976:	4b21      	ldr	r3, [pc, #132]	@ (80069fc <lwip_netconn_do_write+0xb4>)
 8006978:	f240 7223 	movw	r2, #1827	@ 0x723
 800697c:	4920      	ldr	r1, [pc, #128]	@ (8006a00 <lwip_netconn_do_write+0xb8>)
 800697e:	4821      	ldr	r0, [pc, #132]	@ (8006a04 <lwip_netconn_do_write+0xbc>)
 8006980:	f007 fd1a 	bl	800e3b8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8006984:	6963      	ldr	r3, [r4, #20]
 8006986:	b933      	cbnz	r3, 8006996 <lwip_netconn_do_write+0x4e>
 8006988:	4b1c      	ldr	r3, [pc, #112]	@ (80069fc <lwip_netconn_do_write+0xb4>)
 800698a:	f240 7224 	movw	r2, #1828	@ 0x724
 800698e:	491e      	ldr	r1, [pc, #120]	@ (8006a08 <lwip_netconn_do_write+0xc0>)
 8006990:	481c      	ldr	r0, [pc, #112]	@ (8006a04 <lwip_netconn_do_write+0xbc>)
 8006992:	f007 fd11 	bl	800e3b8 <iprintf>
        msg->conn->current_msg = msg;
 8006996:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8006998:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800699a:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800699c:	f7ff f992 	bl	8005cc4 <lwip_netconn_do_writemore>
 80069a0:	b328      	cbz	r0, 80069ee <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d006      	beq.n	80069b8 <lwip_netconn_do_write+0x70>
 80069aa:	4b14      	ldr	r3, [pc, #80]	@ (80069fc <lwip_netconn_do_write+0xb4>)
 80069ac:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 80069b0:	4916      	ldr	r1, [pc, #88]	@ (8006a0c <lwip_netconn_do_write+0xc4>)
 80069b2:	4814      	ldr	r0, [pc, #80]	@ (8006a04 <lwip_netconn_do_write+0xbc>)
 80069b4:	f007 fd00 	bl	800e3b8 <iprintf>
          UNLOCK_TCPIP_CORE();
 80069b8:	4815      	ldr	r0, [pc, #84]	@ (8006a10 <lwip_netconn_do_write+0xc8>)
 80069ba:	f006 ffef 	bl	800d99c <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80069be:	6820      	ldr	r0, [r4, #0]
 80069c0:	2100      	movs	r1, #0
 80069c2:	300c      	adds	r0, #12
 80069c4:	f006 ffa7 	bl	800d916 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80069c8:	4811      	ldr	r0, [pc, #68]	@ (8006a10 <lwip_netconn_do_write+0xc8>)
 80069ca:	f006 ffe2 	bl	800d992 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	785b      	ldrb	r3, [r3, #1]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d10b      	bne.n	80069ee <lwip_netconn_do_write+0xa6>
 80069d6:	4b09      	ldr	r3, [pc, #36]	@ (80069fc <lwip_netconn_do_write+0xb4>)
 80069d8:	f240 722c 	movw	r2, #1836	@ 0x72c
 80069dc:	490b      	ldr	r1, [pc, #44]	@ (8006a0c <lwip_netconn_do_write+0xc4>)
 80069de:	4809      	ldr	r0, [pc, #36]	@ (8006a04 <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 80069e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80069e4:	f007 bce8 	b.w	800e3b8 <iprintf>
      err = ERR_VAL;
 80069e8:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 80069ec:	7120      	strb	r0, [r4, #4]
}
 80069ee:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 80069f0:	f06f 0004 	mvn.w	r0, #4
 80069f4:	e7fa      	b.n	80069ec <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 80069f6:	f06f 000a 	mvn.w	r0, #10
 80069fa:	e7f7      	b.n	80069ec <lwip_netconn_do_write+0xa4>
 80069fc:	0800f46f 	.word	0x0800f46f
 8006a00:	0800f82f 	.word	0x0800f82f
 8006a04:	0800f15a 	.word	0x0800f15a
 8006a08:	0800f851 	.word	0x0800f851
 8006a0c:	0800f84a 	.word	0x0800f84a
 8006a10:	2002a614 	.word	0x2002a614

08006a14 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8006a14:	b510      	push	{r4, lr}
 8006a16:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8006a18:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8006a1a:	6842      	ldr	r2, [r0, #4]
  enum netconn_state state = msg->conn->state;
 8006a1c:	7843      	ldrb	r3, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 8006a1e:	b15a      	cbz	r2, 8006a38 <lwip_netconn_do_close+0x24>
 8006a20:	7802      	ldrb	r2, [r0, #0]
 8006a22:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8006a26:	2a10      	cmp	r2, #16
 8006a28:	d106      	bne.n	8006a38 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006a2a:	7a22      	ldrb	r2, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8006a2c:	2a03      	cmp	r2, #3
 8006a2e:	d001      	beq.n	8006a34 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d001      	beq.n	8006a38 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d102      	bne.n	8006a3e <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8006a38:	23f5      	movs	r3, #245	@ 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8006a3a:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8006a3c:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 8006a42:	23fb      	movs	r3, #251	@ 0xfb
 8006a44:	e7f9      	b.n	8006a3a <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8006a46:	07d3      	lsls	r3, r2, #31
 8006a48:	d501      	bpl.n	8006a4e <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 8006a4a:	f7ff fda1 	bl	8006590 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	b133      	cbz	r3, 8006a62 <lwip_netconn_do_close+0x4e>
 8006a54:	4b19      	ldr	r3, [pc, #100]	@ (8006abc <lwip_netconn_do_close+0xa8>)
 8006a56:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8006a5a:	4919      	ldr	r1, [pc, #100]	@ (8006ac0 <lwip_netconn_do_close+0xac>)
 8006a5c:	4819      	ldr	r0, [pc, #100]	@ (8006ac4 <lwip_netconn_do_close+0xb0>)
 8006a5e:	f007 fcab 	bl	800e3b8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8006a62:	6820      	ldr	r0, [r4, #0]
 8006a64:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006a66:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 8006a68:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 8006a6a:	6204      	str	r4, [r0, #32]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006a6c:	f7ff fa52 	bl	8005f14 <lwip_netconn_do_close_internal>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d0e3      	beq.n	8006a3c <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d006      	beq.n	8006a8a <lwip_netconn_do_close+0x76>
 8006a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8006abc <lwip_netconn_do_close+0xa8>)
 8006a7e:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8006a82:	4911      	ldr	r1, [pc, #68]	@ (8006ac8 <lwip_netconn_do_close+0xb4>)
 8006a84:	480f      	ldr	r0, [pc, #60]	@ (8006ac4 <lwip_netconn_do_close+0xb0>)
 8006a86:	f007 fc97 	bl	800e3b8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8006a8a:	4810      	ldr	r0, [pc, #64]	@ (8006acc <lwip_netconn_do_close+0xb8>)
 8006a8c:	f006 ff86 	bl	800d99c <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006a90:	6820      	ldr	r0, [r4, #0]
 8006a92:	2100      	movs	r1, #0
 8006a94:	300c      	adds	r0, #12
 8006a96:	f006 ff3e 	bl	800d916 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8006a9a:	480c      	ldr	r0, [pc, #48]	@ (8006acc <lwip_netconn_do_close+0xb8>)
 8006a9c:	f006 ff79 	bl	800d992 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0c9      	beq.n	8006a3c <lwip_netconn_do_close+0x28>
 8006aa8:	4b04      	ldr	r3, [pc, #16]	@ (8006abc <lwip_netconn_do_close+0xa8>)
 8006aaa:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8006aae:	4906      	ldr	r1, [pc, #24]	@ (8006ac8 <lwip_netconn_do_close+0xb4>)
 8006ab0:	4804      	ldr	r0, [pc, #16]	@ (8006ac4 <lwip_netconn_do_close+0xb0>)
}
 8006ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006ab6:	f007 bc7f 	b.w	800e3b8 <iprintf>
 8006aba:	bf00      	nop
 8006abc:	0800f46f 	.word	0x0800f46f
 8006ac0:	0800f82f 	.word	0x0800f82f
 8006ac4:	0800f15a 	.word	0x0800f15a
 8006ac8:	0800f84a 	.word	0x0800f84a
 8006acc:	2002a614 	.word	0x2002a614

08006ad0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8006ad0:	b510      	push	{r4, lr}
  if (buf != NULL) {
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	b160      	cbz	r0, 8006af0 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 8006ad6:	6800      	ldr	r0, [r0, #0]
 8006ad8:	b120      	cbz	r0, 8006ae4 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8006ada:	f001 f887 	bl	8007bec <pbuf_free>
      buf->p = buf->ptr = NULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	2006      	movs	r0, #6
  }
}
 8006ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8006aec:	f000 be0e 	b.w	800770c <memp_free>
}
 8006af0:	bd10      	pop	{r4, pc}
	...

08006af4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8006af4:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8006af6:	b940      	cbnz	r0, 8006b0a <netbuf_data+0x16>
 8006af8:	4b0f      	ldr	r3, [pc, #60]	@ (8006b38 <netbuf_data+0x44>)
 8006afa:	22c6      	movs	r2, #198	@ 0xc6
 8006afc:	490f      	ldr	r1, [pc, #60]	@ (8006b3c <netbuf_data+0x48>)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006afe:	4810      	ldr	r0, [pc, #64]	@ (8006b40 <netbuf_data+0x4c>)
 8006b00:	f007 fc5a 	bl	800e3b8 <iprintf>
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8006b04:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 8006b08:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006b0a:	b919      	cbnz	r1, 8006b14 <netbuf_data+0x20>
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <netbuf_data+0x44>)
 8006b0e:	22c7      	movs	r2, #199	@ 0xc7
 8006b10:	490c      	ldr	r1, [pc, #48]	@ (8006b44 <netbuf_data+0x50>)
 8006b12:	e7f4      	b.n	8006afe <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8006b14:	b91a      	cbnz	r2, 8006b1e <netbuf_data+0x2a>
 8006b16:	4b08      	ldr	r3, [pc, #32]	@ (8006b38 <netbuf_data+0x44>)
 8006b18:	22c8      	movs	r2, #200	@ 0xc8
 8006b1a:	490b      	ldr	r1, [pc, #44]	@ (8006b48 <netbuf_data+0x54>)
 8006b1c:	e7ef      	b.n	8006afe <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 8006b1e:	6843      	ldr	r3, [r0, #4]
 8006b20:	b133      	cbz	r3, 8006b30 <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 8006b26:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 8006b28:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 8006b2a:	895b      	ldrh	r3, [r3, #10]
 8006b2c:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8006b2e:	e7eb      	b.n	8006b08 <netbuf_data+0x14>
    return ERR_BUF;
 8006b30:	f06f 0001 	mvn.w	r0, #1
 8006b34:	e7e8      	b.n	8006b08 <netbuf_data+0x14>
 8006b36:	bf00      	nop
 8006b38:	0800f877 	.word	0x0800f877
 8006b3c:	0800f8e6 	.word	0x0800f8e6
 8006b40:	0800f15a 	.word	0x0800f15a
 8006b44:	0800f8ff 	.word	0x0800f8ff
 8006b48:	0800f91c 	.word	0x0800f91c

08006b4c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8006b4c:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8006b4e:	b940      	cbnz	r0, 8006b62 <netbuf_next+0x16>
 8006b50:	4b09      	ldr	r3, [pc, #36]	@ (8006b78 <netbuf_next+0x2c>)
 8006b52:	22e0      	movs	r2, #224	@ 0xe0
 8006b54:	4909      	ldr	r1, [pc, #36]	@ (8006b7c <netbuf_next+0x30>)
 8006b56:	480a      	ldr	r0, [pc, #40]	@ (8006b80 <netbuf_next+0x34>)
 8006b58:	f007 fc2e 	bl	800e3b8 <iprintf>
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
  buf->ptr = buf->ptr->next;
  if (buf->ptr->next == NULL) {
    return 1;
  }
  return 0;
}
 8006b60:	bd08      	pop	{r3, pc}
  if (buf->ptr->next == NULL) {
 8006b62:	6843      	ldr	r3, [r0, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0f8      	beq.n	8006b5c <netbuf_next+0x10>
  buf->ptr = buf->ptr->next;
 8006b6a:	6043      	str	r3, [r0, #4]
  if (buf->ptr->next == NULL) {
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	fab0 f080 	clz	r0, r0
 8006b72:	0940      	lsrs	r0, r0, #5
 8006b74:	e7f4      	b.n	8006b60 <netbuf_next+0x14>
 8006b76:	bf00      	nop
 8006b78:	0800f877 	.word	0x0800f877
 8006b7c:	0800f935 	.word	0x0800f935
 8006b80:	0800f15a 	.word	0x0800f15a

08006b84 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006b84:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8006b86:	482c      	ldr	r0, [pc, #176]	@ (8006c38 <tcpip_thread+0xb4>)
 8006b88:	f006 ff03 	bl	800d992 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8006b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c3c <tcpip_thread+0xb8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	b113      	cbz	r3, 8006b98 <tcpip_thread+0x14>
    tcpip_init_done(tcpip_init_done_arg);
 8006b92:	4a2b      	ldr	r2, [pc, #172]	@ (8006c40 <tcpip_thread+0xbc>)
 8006b94:	6810      	ldr	r0, [r2, #0]
 8006b96:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8006b98:	4d27      	ldr	r5, [pc, #156]	@ (8006c38 <tcpip_thread+0xb4>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006b9a:	4f2a      	ldr	r7, [pc, #168]	@ (8006c44 <tcpip_thread+0xc0>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006b9c:	4e2a      	ldr	r6, [pc, #168]	@ (8006c48 <tcpip_thread+0xc4>)
  sleeptime = sys_timeouts_sleeptime();
 8006b9e:	f005 f913 	bl	800bdc8 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006ba2:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8006ba4:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006ba6:	d113      	bne.n	8006bd0 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f006 fef7 	bl	800d99c <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8006bae:	2200      	movs	r2, #0
 8006bb0:	a901      	add	r1, sp, #4
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	f006 fe6a 	bl	800d88c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f006 feea 	bl	800d992 <sys_mutex_lock>
    if (msg == NULL) {
 8006bbe:	9c01      	ldr	r4, [sp, #4]
 8006bc0:	b9cc      	cbnz	r4, 8006bf6 <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006bc2:	4633      	mov	r3, r6
 8006bc4:	2291      	movs	r2, #145	@ 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006bc6:	4921      	ldr	r1, [pc, #132]	@ (8006c4c <tcpip_thread+0xc8>)
 8006bc8:	4821      	ldr	r0, [pc, #132]	@ (8006c50 <tcpip_thread+0xcc>)
 8006bca:	f007 fbf5 	bl	800e3b8 <iprintf>
      break;
 8006bce:	e7e6      	b.n	8006b9e <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 8006bd0:	b910      	cbnz	r0, 8006bd8 <tcpip_thread+0x54>
    sys_check_timeouts();
 8006bd2:	f005 f8d7 	bl	800bd84 <sys_check_timeouts>
    goto again;
 8006bd6:	e7e2      	b.n	8006b9e <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f006 fedf 	bl	800d99c <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006bde:	4622      	mov	r2, r4
 8006be0:	a901      	add	r1, sp, #4
 8006be2:	4638      	mov	r0, r7
 8006be4:	f006 fe52 	bl	800d88c <sys_arch_mbox_fetch>
 8006be8:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8006bea:	4628      	mov	r0, r5
 8006bec:	f006 fed1 	bl	800d992 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8006bf0:	3401      	adds	r4, #1
 8006bf2:	d0ee      	beq.n	8006bd2 <tcpip_thread+0x4e>
 8006bf4:	e7e3      	b.n	8006bbe <tcpip_thread+0x3a>
  switch (msg->type) {
 8006bf6:	7823      	ldrb	r3, [r4, #0]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d00f      	beq.n	8006c1c <tcpip_thread+0x98>
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d013      	beq.n	8006c28 <tcpip_thread+0xa4>
 8006c00:	b9b3      	cbnz	r3, 8006c30 <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006c02:	6860      	ldr	r0, [r4, #4]
 8006c04:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8006c08:	4798      	blx	r3
 8006c0a:	b110      	cbz	r0, 8006c12 <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
 8006c0c:	6860      	ldr	r0, [r4, #4]
 8006c0e:	f000 ffed 	bl	8007bec <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006c12:	4621      	mov	r1, r4
 8006c14:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006c16:	f000 fd79 	bl	800770c <memp_free>
      break;
 8006c1a:	e7c0      	b.n	8006b9e <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006c1c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006c20:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006c22:	4621      	mov	r1, r4
 8006c24:	2008      	movs	r0, #8
 8006c26:	e7f6      	b.n	8006c16 <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006c28:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006c2c:	4798      	blx	r3
      break;
 8006c2e:	e7b6      	b.n	8006b9e <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006c30:	4633      	mov	r3, r6
 8006c32:	22cf      	movs	r2, #207	@ 0xcf
 8006c34:	e7c7      	b.n	8006bc6 <tcpip_thread+0x42>
 8006c36:	bf00      	nop
 8006c38:	2002a614 	.word	0x2002a614
 8006c3c:	2002a620 	.word	0x2002a620
 8006c40:	2002a61c 	.word	0x2002a61c
 8006c44:	2002a618 	.word	0x2002a618
 8006c48:	0800f94e 	.word	0x0800f94e
 8006c4c:	0800f97e 	.word	0x0800f97e
 8006c50:	0800f15a 	.word	0x0800f15a

08006c54 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006c58:	4810      	ldr	r0, [pc, #64]	@ (8006c9c <tcpip_inpkt+0x48>)
{
 8006c5a:	460e      	mov	r6, r1
 8006c5c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006c5e:	f006 fe3e 	bl	800d8de <sys_mbox_valid>
 8006c62:	b928      	cbnz	r0, 8006c70 <tcpip_inpkt+0x1c>
 8006c64:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca0 <tcpip_inpkt+0x4c>)
 8006c66:	22fc      	movs	r2, #252	@ 0xfc
 8006c68:	490e      	ldr	r1, [pc, #56]	@ (8006ca4 <tcpip_inpkt+0x50>)
 8006c6a:	480f      	ldr	r0, [pc, #60]	@ (8006ca8 <tcpip_inpkt+0x54>)
 8006c6c:	f007 fba4 	bl	800e3b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006c70:	2009      	movs	r0, #9
 8006c72:	f000 fd1d 	bl	80076b0 <memp_malloc>
  if (msg == NULL) {
 8006c76:	4604      	mov	r4, r0
 8006c78:	b168      	cbz	r0, 8006c96 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8006c7a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006c7c:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 8006c7e:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8006c80:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8006c82:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006c86:	4805      	ldr	r0, [pc, #20]	@ (8006c9c <tcpip_inpkt+0x48>)
 8006c88:	f006 fdf1 	bl	800d86e <sys_mbox_trypost>
 8006c8c:	b128      	cbz	r0, 8006c9a <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006c8e:	4621      	mov	r1, r4
 8006c90:	2009      	movs	r0, #9
 8006c92:	f000 fd3b 	bl	800770c <memp_free>
    return ERR_MEM;
 8006c96:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c9c:	2002a618 	.word	0x2002a618
 8006ca0:	0800f94e 	.word	0x0800f94e
 8006ca4:	0800f99c 	.word	0x0800f99c
 8006ca8:	0800f15a 	.word	0x0800f15a

08006cac <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006cac:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 8006cb0:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8006cb4:	bf14      	ite	ne
 8006cb6:	4a02      	ldrne	r2, [pc, #8]	@ (8006cc0 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8006cb8:	4a02      	ldreq	r2, [pc, #8]	@ (8006cc4 <tcpip_input+0x18>)
 8006cba:	f7ff bfcb 	b.w	8006c54 <tcpip_inpkt>
 8006cbe:	bf00      	nop
 8006cc0:	0800d731 	.word	0x0800d731
 8006cc4:	0800ccfd 	.word	0x0800ccfd

08006cc8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006ccc:	4810      	ldr	r0, [pc, #64]	@ (8006d10 <tcpip_try_callback+0x48>)
{
 8006cce:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006cd0:	f006 fe05 	bl	800d8de <sys_mbox_valid>
 8006cd4:	b930      	cbnz	r0, 8006ce4 <tcpip_try_callback+0x1c>
 8006cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d14 <tcpip_try_callback+0x4c>)
 8006cd8:	f240 125d 	movw	r2, #349	@ 0x15d
 8006cdc:	490e      	ldr	r1, [pc, #56]	@ (8006d18 <tcpip_try_callback+0x50>)
 8006cde:	480f      	ldr	r0, [pc, #60]	@ (8006d1c <tcpip_try_callback+0x54>)
 8006ce0:	f007 fb6a 	bl	800e3b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8006ce4:	2008      	movs	r0, #8
 8006ce6:	f000 fce3 	bl	80076b0 <memp_malloc>
  if (msg == NULL) {
 8006cea:	4604      	mov	r4, r0
 8006cec:	b160      	cbz	r0, 8006d08 <tcpip_try_callback+0x40>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8006cee:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006cf0:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_CALLBACK;
 8006cf2:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.ctx = ctx;
 8006cf4:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006cf8:	4805      	ldr	r0, [pc, #20]	@ (8006d10 <tcpip_try_callback+0x48>)
 8006cfa:	f006 fdb8 	bl	800d86e <sys_mbox_trypost>
 8006cfe:	b128      	cbz	r0, 8006d0c <tcpip_try_callback+0x44>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8006d00:	4621      	mov	r1, r4
 8006d02:	2008      	movs	r0, #8
 8006d04:	f000 fd02 	bl	800770c <memp_free>
    return ERR_MEM;
 8006d08:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
}
 8006d0c:	bd70      	pop	{r4, r5, r6, pc}
 8006d0e:	bf00      	nop
 8006d10:	2002a618 	.word	0x2002a618
 8006d14:	0800f94e 	.word	0x0800f94e
 8006d18:	0800f99c 	.word	0x0800f99c
 8006d1c:	0800f15a 	.word	0x0800f15a

08006d20 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8006d20:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8006d22:	4e06      	ldr	r6, [pc, #24]	@ (8006d3c <tcpip_send_msg_wait_sem+0x1c>)
{
 8006d24:	460d      	mov	r5, r1
 8006d26:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f006 fe32 	bl	800d992 <sys_mutex_lock>
  fn(apimsg);
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 8006d32:	4630      	mov	r0, r6
 8006d34:	f006 fe32 	bl	800d99c <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8006d38:	2000      	movs	r0, #0
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}
 8006d3c:	2002a614 	.word	0x2002a614

08006d40 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d42:	4605      	mov	r5, r0
 8006d44:	460c      	mov	r4, r1
  lwip_init();
 8006d46:	f000 f9b7 	bl	80070b8 <lwip_init>

  tcpip_init_done = initfunc;
 8006d4a:	4b13      	ldr	r3, [pc, #76]	@ (8006d98 <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006d4c:	2106      	movs	r1, #6
 8006d4e:	4813      	ldr	r0, [pc, #76]	@ (8006d9c <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 8006d50:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8006d52:	4b13      	ldr	r3, [pc, #76]	@ (8006da0 <tcpip_init+0x60>)
 8006d54:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006d56:	f006 fd73 	bl	800d840 <sys_mbox_new>
 8006d5a:	b130      	cbz	r0, 8006d6a <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006d5c:	4b11      	ldr	r3, [pc, #68]	@ (8006da4 <tcpip_init+0x64>)
 8006d5e:	f240 2261 	movw	r2, #609	@ 0x261
 8006d62:	4911      	ldr	r1, [pc, #68]	@ (8006da8 <tcpip_init+0x68>)
 8006d64:	4811      	ldr	r0, [pc, #68]	@ (8006dac <tcpip_init+0x6c>)
 8006d66:	f007 fb27 	bl	800e3b8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006d6a:	4811      	ldr	r0, [pc, #68]	@ (8006db0 <tcpip_init+0x70>)
 8006d6c:	f006 fe06 	bl	800d97c <sys_mutex_new>
 8006d70:	b130      	cbz	r0, 8006d80 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8006d72:	4b0c      	ldr	r3, [pc, #48]	@ (8006da4 <tcpip_init+0x64>)
 8006d74:	f240 2265 	movw	r2, #613	@ 0x265
 8006d78:	490e      	ldr	r1, [pc, #56]	@ (8006db4 <tcpip_init+0x74>)
 8006d7a:	480c      	ldr	r0, [pc, #48]	@ (8006dac <tcpip_init+0x6c>)
 8006d7c:	f007 fb1c 	bl	800e3b8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006d80:	2303      	movs	r3, #3
 8006d82:	2200      	movs	r2, #0
 8006d84:	490c      	ldr	r1, [pc, #48]	@ (8006db8 <tcpip_init+0x78>)
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d8c:	480b      	ldr	r0, [pc, #44]	@ (8006dbc <tcpip_init+0x7c>)
 8006d8e:	f006 fe08 	bl	800d9a2 <sys_thread_new>
}
 8006d92:	b003      	add	sp, #12
 8006d94:	bd30      	pop	{r4, r5, pc}
 8006d96:	bf00      	nop
 8006d98:	2002a620 	.word	0x2002a620
 8006d9c:	2002a618 	.word	0x2002a618
 8006da0:	2002a61c 	.word	0x2002a61c
 8006da4:	0800f94e 	.word	0x0800f94e
 8006da8:	0800f9a9 	.word	0x0800f9a9
 8006dac:	0800f15a 	.word	0x0800f15a
 8006db0:	2002a614 	.word	0x2002a614
 8006db4:	0800f9cc 	.word	0x0800f9cc
 8006db8:	08006b85 	.word	0x08006b85
 8006dbc:	0800f9ed 	.word	0x0800f9ed

08006dc0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8006dc0:	ba40      	rev16	r0, r0
}
 8006dc2:	b280      	uxth	r0, r0
 8006dc4:	4770      	bx	lr

08006dc6 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8006dc6:	ba00      	rev	r0, r0
 8006dc8:	4770      	bx	lr
	...

08006dcc <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	4604      	mov	r4, r0
 8006dd0:	460f      	mov	r7, r1
 8006dd2:	4d20      	ldr	r5, [pc, #128]	@ (8006e54 <dns_call_found+0x88>)
 8006dd4:	2600      	movs	r6, #0
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8006dd6:	682b      	ldr	r3, [r5, #0]
 8006dd8:	b163      	cbz	r3, 8006df4 <dns_call_found+0x28>
 8006dda:	7a2a      	ldrb	r2, [r5, #8]
 8006ddc:	42a2      	cmp	r2, r4
 8006dde:	d109      	bne.n	8006df4 <dns_call_found+0x28>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8006de0:	f44f 7c88 	mov.w	ip, #272	@ 0x110
 8006de4:	481c      	ldr	r0, [pc, #112]	@ (8006e58 <dns_call_found+0x8c>)
 8006de6:	686a      	ldr	r2, [r5, #4]
 8006de8:	4639      	mov	r1, r7
 8006dea:	fb0c 0004 	mla	r0, ip, r4, r0
 8006dee:	4798      	blx	r3
      /* flush this entry */
      dns_requests[i].found = NULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	602b      	str	r3, [r5, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006df4:	3603      	adds	r6, #3
 8006df6:	350c      	adds	r5, #12
 8006df8:	2e0c      	cmp	r6, #12
 8006dfa:	d1ec      	bne.n	8006dd6 <dns_call_found+0xa>
 8006dfc:	4b17      	ldr	r3, [pc, #92]	@ (8006e5c <dns_call_found+0x90>)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8006dfe:	f44f 7088 	mov.w	r0, #272	@ 0x110
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8006e02:	2100      	movs	r1, #0
 8006e04:	461a      	mov	r2, r3
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8006e06:	fb00 3004 	mla	r0, r0, r4, r3
    if (i == idx) {
 8006e0a:	b2cd      	uxtb	r5, r1
 8006e0c:	42a5      	cmp	r5, r4
 8006e0e:	d01b      	beq.n	8006e48 <dns_call_found+0x7c>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8006e10:	7a9d      	ldrb	r5, [r3, #10]
 8006e12:	2d02      	cmp	r5, #2
 8006e14:	d118      	bne.n	8006e48 <dns_call_found+0x7c>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8006e16:	7bde      	ldrb	r6, [r3, #15]
 8006e18:	7bc5      	ldrb	r5, [r0, #15]
 8006e1a:	42ae      	cmp	r6, r5
 8006e1c:	d114      	bne.n	8006e48 <dns_call_found+0x7c>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8006e1e:	2304      	movs	r3, #4
 8006e20:	73c3      	strb	r3, [r0, #15]
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8006e22:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006e26:	fb03 2404 	mla	r4, r3, r4, r2
 8006e2a:	7be3      	ldrb	r3, [r4, #15]
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d80a      	bhi.n	8006e46 <dns_call_found+0x7a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8006e30:	4d0b      	ldr	r5, [pc, #44]	@ (8006e60 <dns_call_found+0x94>)
 8006e32:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8006e36:	f005 fa4d 	bl	800c2d4 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8006e3a:	7be3      	ldrb	r3, [r4, #15]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8006e42:	2304      	movs	r3, #4
 8006e44:	73e3      	strb	r3, [r4, #15]
  }
#endif
}
 8006e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006e48:	3101      	adds	r1, #1
 8006e4a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006e4e:	2904      	cmp	r1, #4
 8006e50:	d1db      	bne.n	8006e0a <dns_call_found+0x3e>
 8006e52:	e7e6      	b.n	8006e22 <dns_call_found+0x56>
 8006e54:	2002a62c 	.word	0x2002a62c
 8006e58:	2002a66c 	.word	0x2002a66c
 8006e5c:	2002a65c 	.word	0x2002a65c
 8006e60:	2002aa9c 	.word	0x2002aa9c

08006e64 <dns_send.isra.0>:
dns_send(u8_t idx)
 8006e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8006e68:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006e6c:	4f49      	ldr	r7, [pc, #292]	@ (8006f94 <dns_send.isra.0+0x130>)
dns_send(u8_t idx)
 8006e6e:	b087      	sub	sp, #28
 8006e70:	4680      	mov	r8, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8006e72:	fb03 7300 	mla	r3, r3, r0, r7
 8006e76:	7adb      	ldrb	r3, [r3, #11]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d906      	bls.n	8006e8a <dns_send.isra.0+0x26>
 8006e7c:	4b46      	ldr	r3, [pc, #280]	@ (8006f98 <dns_send.isra.0+0x134>)
 8006e7e:	f240 22fa 	movw	r2, #762	@ 0x2fa
 8006e82:	4946      	ldr	r1, [pc, #280]	@ (8006f9c <dns_send.isra.0+0x138>)
 8006e84:	4846      	ldr	r0, [pc, #280]	@ (8006fa0 <dns_send.isra.0+0x13c>)
 8006e86:	f007 fa97 	bl	800e3b8 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8006e8a:	f44f 7488 	mov.w	r4, #272	@ 0x110
 8006e8e:	f8df a118 	ldr.w	sl, [pc, #280]	@ 8006fa8 <dns_send.isra.0+0x144>
 8006e92:	fb04 f408 	mul.w	r4, r4, r8
 8006e96:	193d      	adds	r5, r7, r4
 8006e98:	7aeb      	ldrb	r3, [r5, #11]
 8006e9a:	f85a 6023 	ldr.w	r6, [sl, r3, lsl #2]
 8006e9e:	b93e      	cbnz	r6, 8006eb0 <dns_send.isra.0+0x4c>
    dns_call_found(idx, NULL);
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	f7ff ff92 	bl	8006dcc <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8006ea8:	72ae      	strb	r6, [r5, #10]
}
 8006eaa:	b007      	add	sp, #28
 8006eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8006eb0:	3410      	adds	r4, #16
 8006eb2:	443c      	add	r4, r7
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f7f9 f9ab 	bl	8000210 <strlen>
 8006eba:	f100 0112 	add.w	r1, r0, #18
 8006ebe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8006ec2:	2036      	movs	r0, #54	@ 0x36
 8006ec4:	b289      	uxth	r1, r1
 8006ec6:	f000 fefb 	bl	8007cc0 <pbuf_alloc>
  if (p != NULL) {
 8006eca:	4606      	mov	r6, r0
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d0ec      	beq.n	8006eaa <dns_send.isra.0+0x46>
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8006ed0:	2300      	movs	r3, #0
    hdr.id = lwip_htons(entry->txid);
 8006ed2:	8928      	ldrh	r0, [r5, #8]
    --hostname;
 8006ed4:	3c01      	subs	r4, #1
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8006ed6:	9305      	str	r3, [sp, #20]
 8006ed8:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 8006edc:	f7ff ff70 	bl	8006dc0 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 8006ee0:	2301      	movs	r3, #1
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8006ee2:	220c      	movs	r2, #12
    hdr.id = lwip_htons(entry->txid);
 8006ee4:	f8ad 000c 	strh.w	r0, [sp, #12]
    hdr.flags1 = DNS_FLAG1_RD;
 8006ee8:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 8006eec:	f44f 7380 	mov.w	r3, #256	@ 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8006ef0:	eb0d 0102 	add.w	r1, sp, r2
 8006ef4:	4630      	mov	r0, r6
    hdr.numquestions = PP_HTONS(1);
 8006ef6:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8006efa:	f001 f8f7 	bl	80080ec <pbuf_take>
    query_idx = SIZEOF_DNS_HDR;
 8006efe:	210c      	movs	r1, #12
      ++hostname;
 8006f00:	3401      	adds	r4, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006f02:	2500      	movs	r5, #0
      ++hostname;
 8006f04:	46a3      	mov	fp, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006f06:	7823      	ldrb	r3, [r4, #0]
 8006f08:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f0a:	d10e      	bne.n	8006f2a <dns_send.isra.0+0xc6>
      if (query_idx + n + 1 > 0xFFFF) {
 8006f0c:	b2ea      	uxtb	r2, r5
 8006f0e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006f12:	fa51 f585 	uxtab	r5, r1, r5
      copy_len = (u16_t)(hostname - hostname_part);
 8006f16:	eba4 090b 	sub.w	r9, r4, fp
      if (query_idx + n + 1 > 0xFFFF) {
 8006f1a:	429d      	cmp	r5, r3
      copy_len = (u16_t)(hostname - hostname_part);
 8006f1c:	fa1f f989 	uxth.w	r9, r9
      if (query_idx + n + 1 > 0xFFFF) {
 8006f20:	dd09      	ble.n	8006f36 <dns_send.isra.0+0xd2>
    pbuf_free(p);
 8006f22:	4630      	mov	r0, r6
 8006f24:	f000 fe62 	bl	8007bec <pbuf_free>
 8006f28:	e7bf      	b.n	8006eaa <dns_send.isra.0+0x46>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006f2a:	1c6a      	adds	r2, r5, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0ed      	beq.n	8006f0c <dns_send.isra.0+0xa8>
 8006f30:	3401      	adds	r4, #1
 8006f32:	4615      	mov	r5, r2
 8006f34:	e7e7      	b.n	8006f06 <dns_send.isra.0+0xa2>
      pbuf_put_at(p, query_idx, n);
 8006f36:	4630      	mov	r0, r6
 8006f38:	9101      	str	r1, [sp, #4]
 8006f3a:	f001 f993 	bl	8008264 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8006f3e:	9901      	ldr	r1, [sp, #4]
      query_idx = (u16_t)(query_idx + n + 1);
 8006f40:	b2ad      	uxth	r5, r5
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8006f42:	464a      	mov	r2, r9
 8006f44:	1c4b      	adds	r3, r1, #1
 8006f46:	4630      	mov	r0, r6
 8006f48:	4659      	mov	r1, fp
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	f001 f92e 	bl	80081ac <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8006f50:	1c69      	adds	r1, r5, #1
    } while (*hostname != 0);
 8006f52:	7822      	ldrb	r2, [r4, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 8006f54:	b289      	uxth	r1, r1
    } while (*hostname != 0);
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	d1d2      	bne.n	8006f00 <dns_send.isra.0+0x9c>
    pbuf_put_at(p, query_idx, 0);
 8006f5a:	4630      	mov	r0, r6
    query_idx++;
 8006f5c:	3502      	adds	r5, #2
    pbuf_put_at(p, query_idx, 0);
 8006f5e:	f001 f981 	bl	8008264 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8006f62:	f04f 2301 	mov.w	r3, #16777472	@ 0x1000100
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8006f66:	a902      	add	r1, sp, #8
 8006f68:	2204      	movs	r2, #4
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8006f6a:	9302      	str	r3, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	b2ab      	uxth	r3, r5
 8006f70:	f001 f91c 	bl	80081ac <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8006f74:	f44f 7388 	mov.w	r3, #272	@ 0x110
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8006f78:	480a      	ldr	r0, [pc, #40]	@ (8006fa4 <dns_send.isra.0+0x140>)
 8006f7a:	4631      	mov	r1, r6
      dst = &dns_servers[entry->server_idx];
 8006f7c:	fb03 7708 	mla	r7, r3, r8, r7
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8006f80:	2335      	movs	r3, #53	@ 0x35
      dst = &dns_servers[entry->server_idx];
 8006f82:	7afa      	ldrb	r2, [r7, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8006f84:	7bfc      	ldrb	r4, [r7, #15]
 8006f86:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8006f8a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006f8e:	f005 f953 	bl	800c238 <udp_sendto>
 8006f92:	e7c6      	b.n	8006f22 <dns_send.isra.0+0xbe>
 8006f94:	2002a65c 	.word	0x2002a65c
 8006f98:	0800f9fa 	.word	0x0800f9fa
 8006f9c:	0800fa29 	.word	0x0800fa29
 8006fa0:	0800f15a 	.word	0x0800f15a
 8006fa4:	2002aa9c 	.word	0x2002aa9c
 8006fa8:	2002a624 	.word	0x2002a624

08006fac <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8006fac:	2804      	cmp	r0, #4
{
 8006fae:	b570      	push	{r4, r5, r6, lr}
 8006fb0:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8006fb2:	d106      	bne.n	8006fc2 <dns_check_entry+0x16>
 8006fb4:	4b32      	ldr	r3, [pc, #200]	@ (8007080 <dns_check_entry+0xd4>)
 8006fb6:	f240 421c 	movw	r2, #1052	@ 0x41c
 8006fba:	4932      	ldr	r1, [pc, #200]	@ (8007084 <dns_check_entry+0xd8>)
 8006fbc:	4832      	ldr	r0, [pc, #200]	@ (8007088 <dns_check_entry+0xdc>)
 8006fbe:	f007 f9fb 	bl	800e3b8 <iprintf>

  switch (entry->state) {
 8006fc2:	4d32      	ldr	r5, [pc, #200]	@ (800708c <dns_check_entry+0xe0>)
 8006fc4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006fc8:	fb03 5204 	mla	r2, r3, r4, r5
 8006fcc:	7a92      	ldrb	r2, [r2, #10]
 8006fce:	2a03      	cmp	r2, #3
 8006fd0:	d84d      	bhi.n	800706e <dns_check_entry+0xc2>
 8006fd2:	e8df f002 	tbb	[pc, r2]
 8006fd6:	0240      	.short	0x0240
 8006fd8:	4321      	.short	0x4321
  txid = (u16_t)DNS_RAND_TXID();
 8006fda:	f007 f8ed 	bl	800e1b8 <rand>
 8006fde:	4b2b      	ldr	r3, [pc, #172]	@ (800708c <dns_check_entry+0xe0>)
 8006fe0:	b280      	uxth	r0, r0
 8006fe2:	2200      	movs	r2, #0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006fe4:	7a99      	ldrb	r1, [r3, #10]
 8006fe6:	2902      	cmp	r1, #2
 8006fe8:	d102      	bne.n	8006ff0 <dns_check_entry+0x44>
 8006fea:	8919      	ldrh	r1, [r3, #8]
 8006fec:	4281      	cmp	r1, r0
 8006fee:	d0f4      	beq.n	8006fda <dns_check_entry+0x2e>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006ff0:	3288      	adds	r2, #136	@ 0x88
 8006ff2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006ff6:	f5b2 7f08 	cmp.w	r2, #544	@ 0x220
 8006ffa:	d1f3      	bne.n	8006fe4 <dns_check_entry+0x38>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8006ffc:	f44f 7388 	mov.w	r3, #272	@ 0x110
      entry->state = DNS_STATE_ASKING;
 8007000:	2202      	movs	r2, #2
      entry->txid = dns_create_txid();
 8007002:	fb03 5304 	mla	r3, r3, r4, r5
      entry->state = DNS_STATE_ASKING;
 8007006:	815a      	strh	r2, [r3, #10]
      entry->server_idx = 0;
      entry->tmr = 1;
 8007008:	2201      	movs	r2, #1
      entry->txid = dns_create_txid();
 800700a:	8118      	strh	r0, [r3, #8]
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
            entry->tmr = 1;
 800700c:	819a      	strh	r2, [r3, #12]
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800700e:	4620      	mov	r0, r4
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8007010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        err = dns_send(i);
 8007014:	f7ff bf26 	b.w	8006e64 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 8007018:	fb03 5304 	mla	r3, r3, r4, r5
 800701c:	7b1a      	ldrb	r2, [r3, #12]
 800701e:	3a01      	subs	r2, #1
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	731a      	strb	r2, [r3, #12]
 8007024:	b9ba      	cbnz	r2, 8007056 <dns_check_entry+0xaa>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8007026:	7b5a      	ldrb	r2, [r3, #13]
 8007028:	3201      	adds	r2, #1
 800702a:	b2d2      	uxtb	r2, r2
 800702c:	2a04      	cmp	r2, #4
 800702e:	735a      	strb	r2, [r3, #13]
 8007030:	d112      	bne.n	8007058 <dns_check_entry+0xac>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8007032:	7ada      	ldrb	r2, [r3, #11]
 8007034:	b92a      	cbnz	r2, 8007042 <dns_check_entry+0x96>
 8007036:	4a16      	ldr	r2, [pc, #88]	@ (8007090 <dns_check_entry+0xe4>)
 8007038:	6852      	ldr	r2, [r2, #4]
 800703a:	b112      	cbz	r2, 8007042 <dns_check_entry+0x96>
            entry->server_idx++;
 800703c:	2201      	movs	r2, #1
 800703e:	72da      	strb	r2, [r3, #11]
 8007040:	e7e4      	b.n	800700c <dns_check_entry+0x60>
            dns_call_found(i, NULL);
 8007042:	2100      	movs	r1, #0
 8007044:	4620      	mov	r0, r4
 8007046:	f7ff fec1 	bl	8006dcc <dns_call_found>
        entry->state = DNS_STATE_UNUSED;
 800704a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800704e:	2200      	movs	r2, #0
 8007050:	fb03 5304 	mla	r3, r3, r4, r5
 8007054:	729a      	strb	r2, [r3, #10]
}
 8007056:	bd70      	pop	{r4, r5, r6, pc}
          entry->tmr = entry->retries;
 8007058:	731a      	strb	r2, [r3, #12]
 800705a:	e7d8      	b.n	800700e <dns_check_entry+0x62>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800705c:	4363      	muls	r3, r4
 800705e:	58ea      	ldr	r2, [r5, r3]
 8007060:	2a00      	cmp	r2, #0
 8007062:	d0f2      	beq.n	800704a <dns_check_entry+0x9e>
 8007064:	3a01      	subs	r2, #1
 8007066:	50ea      	str	r2, [r5, r3]
 8007068:	2a00      	cmp	r2, #0
 800706a:	d0ee      	beq.n	800704a <dns_check_entry+0x9e>
 800706c:	e7f3      	b.n	8007056 <dns_check_entry+0xaa>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800706e:	4b04      	ldr	r3, [pc, #16]	@ (8007080 <dns_check_entry+0xd4>)
 8007070:	f240 425b 	movw	r2, #1115	@ 0x45b
 8007074:	4907      	ldr	r1, [pc, #28]	@ (8007094 <dns_check_entry+0xe8>)
 8007076:	4804      	ldr	r0, [pc, #16]	@ (8007088 <dns_check_entry+0xdc>)
}
 8007078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800707c:	f007 b99c 	b.w	800e3b8 <iprintf>
 8007080:	0800f9fa 	.word	0x0800f9fa
 8007084:	0800fa41 	.word	0x0800fa41
 8007088:	0800f15a 	.word	0x0800f15a
 800708c:	2002a65c 	.word	0x2002a65c
 8007090:	2002a624 	.word	0x2002a624
 8007094:	0800fa5b 	.word	0x0800fa5b

08007098 <dns_init>:
}
 8007098:	4770      	bx	lr

0800709a <dns_tmr>:
{
 800709a:	b508      	push	{r3, lr}
dns_check_entries(void)
{
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
    dns_check_entry(i);
 800709c:	2000      	movs	r0, #0
 800709e:	f7ff ff85 	bl	8006fac <dns_check_entry>
 80070a2:	2001      	movs	r0, #1
 80070a4:	f7ff ff82 	bl	8006fac <dns_check_entry>
 80070a8:	2002      	movs	r0, #2
 80070aa:	f7ff ff7f 	bl	8006fac <dns_check_entry>
 80070ae:	2003      	movs	r0, #3
}
 80070b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 80070b4:	f7ff bf7a 	b.w	8006fac <dns_check_entry>

080070b8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80070b8:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80070ba:	f006 fc55 	bl	800d968 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80070be:	f000 f80f 	bl	80070e0 <mem_init>
  memp_init();
 80070c2:	f000 fad1 	bl	8007668 <memp_init>
  pbuf_init();
  netif_init();
 80070c6:	f000 fb79 	bl	80077bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80070ca:	f004 fe8f 	bl	800bdec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80070ce:	f001 f931 	bl	8008334 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80070d2:	f7ff ffe1 	bl	8007098 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80070d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80070da:	f004 be35 	b.w	800bd48 <sys_timeouts_init>
	...

080070e0 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80070e0:	4b13      	ldr	r3, [pc, #76]	@ (8007130 <mem_init+0x50>)
 80070e2:	4a14      	ldr	r2, [pc, #80]	@ (8007134 <mem_init+0x54>)
 80070e4:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80070e8:	4813      	ldr	r0, [pc, #76]	@ (8007138 <mem_init+0x58>)
{
 80070ea:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80070ec:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 80070ee:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
  return (struct mem *)(void *)&ram[ptr];
 80070f2:	f503 51fa 	add.w	r1, r3, #8000	@ 0x1f40
  mem->next = MEM_SIZE_ALIGNED;
 80070f6:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 80070f8:	2200      	movs	r2, #0
 80070fa:	711a      	strb	r2, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80070fc:	4a0f      	ldr	r2, [pc, #60]	@ (800713c <mem_init+0x5c>)
 80070fe:	6011      	str	r1, [r2, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007100:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8007104:	490e      	ldr	r1, [pc, #56]	@ (8007140 <mem_init+0x60>)
 8007106:	f8c2 1f40 	str.w	r1, [r2, #3904]	@ 0xf40
  ram_end->used = 1;
 800710a:	2101      	movs	r1, #1
 800710c:	f882 1f44 	strb.w	r1, [r2, #3908]	@ 0xf44
  lfree = (struct mem *)(void *)ram;
 8007110:	4a0c      	ldr	r2, [pc, #48]	@ (8007144 <mem_init+0x64>)
 8007112:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007114:	f006 fc32 	bl	800d97c <sys_mutex_new>
 8007118:	b140      	cbz	r0, 800712c <mem_init+0x4c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800711a:	4b0b      	ldr	r3, [pc, #44]	@ (8007148 <mem_init+0x68>)
 800711c:	f240 221f 	movw	r2, #543	@ 0x21f
 8007120:	490a      	ldr	r1, [pc, #40]	@ (800714c <mem_init+0x6c>)
 8007122:	480b      	ldr	r0, [pc, #44]	@ (8007150 <mem_init+0x70>)
  }
}
 8007124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007128:	f007 b946 	b.w	800e3b8 <iprintf>
}
 800712c:	bd10      	pop	{r4, pc}
 800712e:	bf00      	nop
 8007130:	2002aad7 	.word	0x2002aad7
 8007134:	2002aad0 	.word	0x2002aad0
 8007138:	2002aac8 	.word	0x2002aac8
 800713c:	2002aacc 	.word	0x2002aacc
 8007140:	1f401f40 	.word	0x1f401f40
 8007144:	2002aac4 	.word	0x2002aac4
 8007148:	0800fa7a 	.word	0x0800fa7a
 800714c:	0800faa9 	.word	0x0800faa9
 8007150:	0800f15a 	.word	0x0800f15a

08007154 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007158:	4604      	mov	r4, r0
 800715a:	2800      	cmp	r0, #0
 800715c:	f000 80b4 	beq.w	80072c8 <mem_free+0x174>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007160:	0783      	lsls	r3, r0, #30
 8007162:	d00c      	beq.n	800717e <mem_free+0x2a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007164:	4b59      	ldr	r3, [pc, #356]	@ (80072cc <mem_free+0x178>)
 8007166:	f240 2273 	movw	r2, #627	@ 0x273
 800716a:	4959      	ldr	r1, [pc, #356]	@ (80072d0 <mem_free+0x17c>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800716c:	4859      	ldr	r0, [pc, #356]	@ (80072d4 <mem_free+0x180>)
 800716e:	f007 f923 	bl	800e3b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007172:	f006 fc2d 	bl	800d9d0 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800717a:	f006 bc35 	b.w	800d9e8 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800717e:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8007300 <mem_free+0x1ac>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007182:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007186:	f8d8 3000 	ldr.w	r3, [r8]
 800718a:	42ab      	cmp	r3, r5
 800718c:	d805      	bhi.n	800719a <mem_free+0x46>
 800718e:	4f52      	ldr	r7, [pc, #328]	@ (80072d8 <mem_free+0x184>)
 8007190:	f100 030c 	add.w	r3, r0, #12
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d204      	bcs.n	80071a4 <mem_free+0x50>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800719a:	4b4c      	ldr	r3, [pc, #304]	@ (80072cc <mem_free+0x178>)
 800719c:	f240 227f 	movw	r2, #639	@ 0x27f
 80071a0:	494e      	ldr	r1, [pc, #312]	@ (80072dc <mem_free+0x188>)
 80071a2:	e7e3      	b.n	800716c <mem_free+0x18>
  LWIP_MEM_FREE_PROTECT();
 80071a4:	484e      	ldr	r0, [pc, #312]	@ (80072e0 <mem_free+0x18c>)
 80071a6:	f006 fbf4 	bl	800d992 <sys_mutex_lock>
  if (!mem->used) {
 80071aa:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80071ae:	b953      	cbnz	r3, 80071c6 <mem_free+0x72>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80071b0:	4b46      	ldr	r3, [pc, #280]	@ (80072cc <mem_free+0x178>)
 80071b2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80071b6:	494b      	ldr	r1, [pc, #300]	@ (80072e4 <mem_free+0x190>)
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80071b8:	4846      	ldr	r0, [pc, #280]	@ (80072d4 <mem_free+0x180>)
 80071ba:	f007 f8fd 	bl	800e3b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80071be:	4848      	ldr	r0, [pc, #288]	@ (80072e0 <mem_free+0x18c>)
 80071c0:	f006 fbec 	bl	800d99c <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 80071c4:	e7d5      	b.n	8007172 <mem_free+0x1e>
  nmem = ptr_to_mem(mem->next);
 80071c6:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 80071ca:	f8d8 1000 	ldr.w	r1, [r8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071ce:	f5b2 5ffa 	cmp.w	r2, #8000	@ 0x1f40
  pmem = ptr_to_mem(mem->prev);
 80071d2:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071d6:	d810      	bhi.n	80071fa <mem_free+0xa6>
 80071d8:	f5b0 5ffa 	cmp.w	r0, #8000	@ 0x1f40
 80071dc:	d80d      	bhi.n	80071fa <mem_free+0xa6>
  return (mem_size_t)((u8_t *)mem - ram);
 80071de:	1a6b      	subs	r3, r5, r1
 80071e0:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071e2:	4283      	cmp	r3, r0
 80071e4:	d002      	beq.n	80071ec <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071e6:	5a08      	ldrh	r0, [r1, r0]
 80071e8:	4298      	cmp	r0, r3
 80071ea:	d106      	bne.n	80071fa <mem_free+0xa6>
  return (struct mem *)(void *)&ram[ptr];
 80071ec:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071ee:	6838      	ldr	r0, [r7, #0]
 80071f0:	4282      	cmp	r2, r0
 80071f2:	d007      	beq.n	8007204 <mem_free+0xb0>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80071f4:	8852      	ldrh	r2, [r2, #2]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d004      	beq.n	8007204 <mem_free+0xb0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80071fa:	4b34      	ldr	r3, [pc, #208]	@ (80072cc <mem_free+0x178>)
 80071fc:	f240 2295 	movw	r2, #661	@ 0x295
 8007200:	4939      	ldr	r1, [pc, #228]	@ (80072e8 <mem_free+0x194>)
 8007202:	e7d9      	b.n	80071b8 <mem_free+0x64>
  mem->used = 0;
 8007204:	2300      	movs	r3, #0
  if (mem < lfree) {
 8007206:	4e39      	ldr	r6, [pc, #228]	@ (80072ec <mem_free+0x198>)
  mem->used = 0;
 8007208:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800720c:	6833      	ldr	r3, [r6, #0]
 800720e:	42ab      	cmp	r3, r5
    lfree = mem;
 8007210:	bf88      	it	hi
 8007212:	6035      	strhi	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007214:	428d      	cmp	r5, r1
 8007216:	d206      	bcs.n	8007226 <mem_free+0xd2>
 8007218:	4b2c      	ldr	r3, [pc, #176]	@ (80072cc <mem_free+0x178>)
 800721a:	f240 12df 	movw	r2, #479	@ 0x1df
 800721e:	4934      	ldr	r1, [pc, #208]	@ (80072f0 <mem_free+0x19c>)
 8007220:	482c      	ldr	r0, [pc, #176]	@ (80072d4 <mem_free+0x180>)
 8007222:	f007 f8c9 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	429d      	cmp	r5, r3
 800722a:	d306      	bcc.n	800723a <mem_free+0xe6>
 800722c:	4b27      	ldr	r3, [pc, #156]	@ (80072cc <mem_free+0x178>)
 800722e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007232:	4930      	ldr	r1, [pc, #192]	@ (80072f4 <mem_free+0x1a0>)
 8007234:	4827      	ldr	r0, [pc, #156]	@ (80072d4 <mem_free+0x180>)
 8007236:	f007 f8bf 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800723a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800723e:	b133      	cbz	r3, 800724e <mem_free+0xfa>
 8007240:	4b22      	ldr	r3, [pc, #136]	@ (80072cc <mem_free+0x178>)
 8007242:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8007246:	492c      	ldr	r1, [pc, #176]	@ (80072f8 <mem_free+0x1a4>)
 8007248:	4822      	ldr	r0, [pc, #136]	@ (80072d4 <mem_free+0x180>)
 800724a:	f007 f8b5 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800724e:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8007252:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8007256:	d906      	bls.n	8007266 <mem_free+0x112>
 8007258:	4b1c      	ldr	r3, [pc, #112]	@ (80072cc <mem_free+0x178>)
 800725a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800725e:	4927      	ldr	r1, [pc, #156]	@ (80072fc <mem_free+0x1a8>)
 8007260:	481c      	ldr	r0, [pc, #112]	@ (80072d4 <mem_free+0x180>)
 8007262:	f007 f8a9 	bl	800e3b8 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8007266:	f8d8 3000 	ldr.w	r3, [r8]
 800726a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800726e:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007270:	4295      	cmp	r5, r2
 8007272:	d011      	beq.n	8007298 <mem_free+0x144>
 8007274:	7910      	ldrb	r0, [r2, #4]
 8007276:	b978      	cbnz	r0, 8007298 <mem_free+0x144>
 8007278:	6838      	ldr	r0, [r7, #0]
 800727a:	4282      	cmp	r2, r0
 800727c:	d00c      	beq.n	8007298 <mem_free+0x144>
    if (lfree == nmem) {
 800727e:	6830      	ldr	r0, [r6, #0]
 8007280:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8007282:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8007284:	bf08      	it	eq
 8007286:	6035      	streq	r5, [r6, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007288:	f5b2 5ffa 	cmp.w	r2, #8000	@ 0x1f40
    mem->next = nmem->next;
 800728c:	f824 2c08 	strh.w	r2, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8007290:	bf1e      	ittt	ne
 8007292:	1ae9      	subne	r1, r5, r3
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007294:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8007296:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8007298:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800729c:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 800729e:	428d      	cmp	r5, r1
 80072a0:	d00d      	beq.n	80072be <mem_free+0x16a>
 80072a2:	7908      	ldrb	r0, [r1, #4]
 80072a4:	b958      	cbnz	r0, 80072be <mem_free+0x16a>
    if (lfree == mem) {
 80072a6:	6830      	ldr	r0, [r6, #0]
 80072a8:	4285      	cmp	r5, r0
      lfree = pmem;
 80072aa:	bf08      	it	eq
 80072ac:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 80072ae:	f834 1c08 	ldrh.w	r1, [r4, #-8]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80072b2:	f5b1 5ffa 	cmp.w	r1, #8000	@ 0x1f40
    pmem->next = mem->next;
 80072b6:	5299      	strh	r1, [r3, r2]
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80072b8:	bf1c      	itt	ne
 80072ba:	185b      	addne	r3, r3, r1
 80072bc:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 80072be:	4808      	ldr	r0, [pc, #32]	@ (80072e0 <mem_free+0x18c>)
}
 80072c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 80072c4:	f006 bb6a 	b.w	800d99c <sys_mutex_unlock>
}
 80072c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072cc:	0800fa7a 	.word	0x0800fa7a
 80072d0:	0800fac4 	.word	0x0800fac4
 80072d4:	0800f15a 	.word	0x0800f15a
 80072d8:	2002aacc 	.word	0x2002aacc
 80072dc:	0800fae5 	.word	0x0800fae5
 80072e0:	2002aac8 	.word	0x2002aac8
 80072e4:	0800fafe 	.word	0x0800fafe
 80072e8:	0800fb24 	.word	0x0800fb24
 80072ec:	2002aac4 	.word	0x2002aac4
 80072f0:	0800fb56 	.word	0x0800fb56
 80072f4:	0800fb6d 	.word	0x0800fb6d
 80072f8:	0800fb87 	.word	0x0800fb87
 80072fc:	0800fba2 	.word	0x0800fba2
 8007300:	2002aad0 	.word	0x2002aad0

08007304 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007308:	1ccc      	adds	r4, r1, #3
{
 800730a:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800730c:	f024 0403 	bic.w	r4, r4, #3
 8007310:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8007312:	2c0b      	cmp	r4, #11
 8007314:	d904      	bls.n	8007320 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007316:	f5b4 5ffa 	cmp.w	r4, #8000	@ 0x1f40
 800731a:	d902      	bls.n	8007322 <mem_trim+0x1e>
    return NULL;
 800731c:	2500      	movs	r5, #0
 800731e:	e01f      	b.n	8007360 <mem_trim+0x5c>
    newsize = MIN_SIZE_ALIGNED;
 8007320:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007322:	42a1      	cmp	r1, r4
 8007324:	d8fa      	bhi.n	800731c <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007326:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 800746c <mem_trim+0x168>
 800732a:	f8d8 3000 	ldr.w	r3, [r8]
 800732e:	42ab      	cmp	r3, r5
 8007330:	d803      	bhi.n	800733a <mem_trim+0x36>
 8007332:	4b46      	ldr	r3, [pc, #280]	@ (800744c <mem_trim+0x148>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	42ab      	cmp	r3, r5
 8007338:	d806      	bhi.n	8007348 <mem_trim+0x44>
 800733a:	4b45      	ldr	r3, [pc, #276]	@ (8007450 <mem_trim+0x14c>)
 800733c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8007340:	4944      	ldr	r1, [pc, #272]	@ (8007454 <mem_trim+0x150>)
 8007342:	4845      	ldr	r0, [pc, #276]	@ (8007458 <mem_trim+0x154>)
 8007344:	f007 f838 	bl	800e3b8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007348:	f8d8 3000 	ldr.w	r3, [r8]
 800734c:	42ab      	cmp	r3, r5
 800734e:	d803      	bhi.n	8007358 <mem_trim+0x54>
 8007350:	4a3e      	ldr	r2, [pc, #248]	@ (800744c <mem_trim+0x148>)
 8007352:	6812      	ldr	r2, [r2, #0]
 8007354:	42aa      	cmp	r2, r5
 8007356:	d806      	bhi.n	8007366 <mem_trim+0x62>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007358:	f006 fb3a 	bl	800d9d0 <sys_arch_protect>
 800735c:	f006 fb44 	bl	800d9e8 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007360:	4628      	mov	r0, r5
 8007362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007366:	f1a5 0608 	sub.w	r6, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800736a:	f835 7c08 	ldrh.w	r7, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800736e:	1af6      	subs	r6, r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007370:	3f08      	subs	r7, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8007372:	b2b6      	uxth	r6, r6
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007374:	1bbf      	subs	r7, r7, r6
 8007376:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007378:	42a7      	cmp	r7, r4
 800737a:	d207      	bcs.n	800738c <mem_trim+0x88>
 800737c:	4b34      	ldr	r3, [pc, #208]	@ (8007450 <mem_trim+0x14c>)
 800737e:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007382:	4936      	ldr	r1, [pc, #216]	@ (800745c <mem_trim+0x158>)
 8007384:	4834      	ldr	r0, [pc, #208]	@ (8007458 <mem_trim+0x154>)
 8007386:	f007 f817 	bl	800e3b8 <iprintf>
  if (newsize > size) {
 800738a:	e7c7      	b.n	800731c <mem_trim+0x18>
  if (newsize == size) {
 800738c:	d0e8      	beq.n	8007360 <mem_trim+0x5c>
  LWIP_MEM_FREE_PROTECT();
 800738e:	4834      	ldr	r0, [pc, #208]	@ (8007460 <mem_trim+0x15c>)
 8007390:	f006 faff 	bl	800d992 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8007394:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8007398:	f8d8 b000 	ldr.w	fp, [r8]
 800739c:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 80073a0:	f89a 3004 	ldrb.w	r3, [sl, #4]
 80073a4:	bb43      	cbnz	r3, 80073f8 <mem_trim+0xf4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80073a6:	f5b9 5ffa 	cmp.w	r9, #8000	@ 0x1f40
 80073aa:	d106      	bne.n	80073ba <mem_trim+0xb6>
 80073ac:	4b28      	ldr	r3, [pc, #160]	@ (8007450 <mem_trim+0x14c>)
 80073ae:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80073b2:	492c      	ldr	r1, [pc, #176]	@ (8007464 <mem_trim+0x160>)
 80073b4:	4828      	ldr	r0, [pc, #160]	@ (8007458 <mem_trim+0x154>)
 80073b6:	f006 ffff 	bl	800e3b8 <iprintf>
    if (lfree == mem2) {
 80073ba:	482b      	ldr	r0, [pc, #172]	@ (8007468 <mem_trim+0x164>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80073bc:	f106 0308 	add.w	r3, r6, #8
  return (struct mem *)(void *)&ram[ptr];
 80073c0:	f8d8 2000 	ldr.w	r2, [r8]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80073c4:	4423      	add	r3, r4
    if (lfree == mem2) {
 80073c6:	6804      	ldr	r4, [r0, #0]
    next = mem2->next;
 80073c8:	f83b 7009 	ldrh.w	r7, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80073cc:	b299      	uxth	r1, r3
    if (lfree == mem2) {
 80073ce:	4554      	cmp	r4, sl
  return (struct mem *)(void *)&ram[ptr];
 80073d0:	fa12 f383 	uxtah	r3, r2, r3
      lfree = ptr_to_mem(ptr2);
 80073d4:	bf08      	it	eq
 80073d6:	6003      	streq	r3, [r0, #0]
    mem2->used = 0;
 80073d8:	2000      	movs	r0, #0
 80073da:	7118      	strb	r0, [r3, #4]
    mem2->next = next;
 80073dc:	5257      	strh	r7, [r2, r1]
    mem2->prev = ptr;
 80073de:	805e      	strh	r6, [r3, #2]
    mem->next = ptr2;
 80073e0:	f825 1c08 	strh.w	r1, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80073e4:	5a53      	ldrh	r3, [r2, r1]
 80073e6:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80073ea:	d001      	beq.n	80073f0 <mem_trim+0xec>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80073ec:	441a      	add	r2, r3
 80073ee:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 80073f0:	481b      	ldr	r0, [pc, #108]	@ (8007460 <mem_trim+0x15c>)
 80073f2:	f006 fad3 	bl	800d99c <sys_mutex_unlock>
  return rmem;
 80073f6:	e7b3      	b.n	8007360 <mem_trim+0x5c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80073f8:	f104 0314 	add.w	r3, r4, #20
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	429f      	cmp	r7, r3
 8007400:	d3f6      	bcc.n	80073f0 <mem_trim+0xec>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007402:	f106 0308 	add.w	r3, r6, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007406:	f5b9 5ffa 	cmp.w	r9, #8000	@ 0x1f40
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800740a:	441c      	add	r4, r3
 800740c:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800740e:	d106      	bne.n	800741e <mem_trim+0x11a>
 8007410:	4b0f      	ldr	r3, [pc, #60]	@ (8007450 <mem_trim+0x14c>)
 8007412:	f240 3216 	movw	r2, #790	@ 0x316
 8007416:	4913      	ldr	r1, [pc, #76]	@ (8007464 <mem_trim+0x160>)
 8007418:	480f      	ldr	r0, [pc, #60]	@ (8007458 <mem_trim+0x154>)
 800741a:	f006 ffcd 	bl	800e3b8 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800741e:	f8d8 3000 	ldr.w	r3, [r8]
    if (mem2 < lfree) {
 8007422:	4911      	ldr	r1, [pc, #68]	@ (8007468 <mem_trim+0x164>)
  return (struct mem *)(void *)&ram[ptr];
 8007424:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8007426:	6808      	ldr	r0, [r1, #0]
 8007428:	4290      	cmp	r0, r2
      lfree = mem2;
 800742a:	bf88      	it	hi
 800742c:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 800742e:	2100      	movs	r1, #0
 8007430:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8007432:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 8007436:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8007438:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 800743a:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800743e:	5b1a      	ldrh	r2, [r3, r4]
 8007440:	f5b2 5ffa 	cmp.w	r2, #8000	@ 0x1f40
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007444:	bf1c      	itt	ne
 8007446:	189b      	addne	r3, r3, r2
 8007448:	805c      	strhne	r4, [r3, #2]
 800744a:	e7d1      	b.n	80073f0 <mem_trim+0xec>
 800744c:	2002aacc 	.word	0x2002aacc
 8007450:	0800fa7a 	.word	0x0800fa7a
 8007454:	0800fbcc 	.word	0x0800fbcc
 8007458:	0800f15a 	.word	0x0800f15a
 800745c:	0800fbe3 	.word	0x0800fbe3
 8007460:	2002aac8 	.word	0x2002aac8
 8007464:	0800fc03 	.word	0x0800fc03
 8007468:	2002aac4 	.word	0x2002aac4
 800746c:	2002aad0 	.word	0x2002aad0

08007470 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007474:	b140      	cbz	r0, 8007488 <mem_malloc+0x18>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007476:	1cc4      	adds	r4, r0, #3
 8007478:	f024 0403 	bic.w	r4, r4, #3
 800747c:	b2a4      	uxth	r4, r4
  if (size < MIN_SIZE_ALIGNED) {
 800747e:	2c0b      	cmp	r4, #11
 8007480:	d904      	bls.n	800748c <mem_malloc+0x1c>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007482:	f5b4 5ffa 	cmp.w	r4, #8000	@ 0x1f40
 8007486:	d902      	bls.n	800748e <mem_malloc+0x1e>
    return NULL;
 8007488:	2000      	movs	r0, #0
 800748a:	e07e      	b.n	800758a <mem_malloc+0x11a>
    size = MIN_SIZE_ALIGNED;
 800748c:	240c      	movs	r4, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800748e:	42a0      	cmp	r0, r4
 8007490:	d8fa      	bhi.n	8007488 <mem_malloc+0x18>
  return (mem_size_t)((u8_t *)mem - ram);
 8007492:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 80075c4 <mem_malloc+0x154>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007496:	f06f 0707 	mvn.w	r7, #7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800749a:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 80075c8 <mem_malloc+0x158>
  sys_mutex_lock(&mem_mutex);
 800749e:	4840      	ldr	r0, [pc, #256]	@ (80075a0 <mem_malloc+0x130>)
 80074a0:	f006 fa77 	bl	800d992 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 80074a4:	f8d9 2000 	ldr.w	r2, [r9]
 80074a8:	f8d8 6000 	ldr.w	r6, [r8]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80074ac:	f5c4 50fa 	rsb	r0, r4, #8000	@ 0x1f40
  return (mem_size_t)((u8_t *)mem - ram);
 80074b0:	1ab6      	subs	r6, r6, r2
 80074b2:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80074b4:	4286      	cmp	r6, r0
 80074b6:	d303      	bcc.n	80074c0 <mem_malloc+0x50>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80074b8:	4839      	ldr	r0, [pc, #228]	@ (80075a0 <mem_malloc+0x130>)
 80074ba:	f006 fa6f 	bl	800d99c <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80074be:	e7e3      	b.n	8007488 <mem_malloc+0x18>
  return (struct mem *)(void *)&ram[ptr];
 80074c0:	1995      	adds	r5, r2, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80074c2:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 80074c4:	792b      	ldrb	r3, [r5, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d167      	bne.n	800759a <mem_malloc+0x12a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80074ca:	1bbb      	subs	r3, r7, r6
 80074cc:	440b      	add	r3, r1
      if ((!mem->used) &&
 80074ce:	42a3      	cmp	r3, r4
 80074d0:	d363      	bcc.n	800759a <mem_malloc+0x12a>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80074d2:	f104 0214 	add.w	r2, r4, #20
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d359      	bcc.n	800758e <mem_malloc+0x11e>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80074da:	f104 0708 	add.w	r7, r4, #8
 80074de:	4437      	add	r7, r6
 80074e0:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80074e2:	f5b7 5ffa 	cmp.w	r7, #8000	@ 0x1f40
 80074e6:	d106      	bne.n	80074f6 <mem_malloc+0x86>
 80074e8:	4b2e      	ldr	r3, [pc, #184]	@ (80075a4 <mem_malloc+0x134>)
 80074ea:	f240 3287 	movw	r2, #903	@ 0x387
 80074ee:	492e      	ldr	r1, [pc, #184]	@ (80075a8 <mem_malloc+0x138>)
 80074f0:	482e      	ldr	r0, [pc, #184]	@ (80075ac <mem_malloc+0x13c>)
 80074f2:	f006 ff61 	bl	800e3b8 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 80074f6:	f8d9 3000 	ldr.w	r3, [r9]
          mem2->used = 0;
 80074fa:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 80074fc:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 80074fe:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8007500:	8829      	ldrh	r1, [r5, #0]
 8007502:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 8007504:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8007506:	2201      	movs	r2, #1
          mem->next = ptr2;
 8007508:	802f      	strh	r7, [r5, #0]
          mem->used = 1;
 800750a:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800750c:	5bda      	ldrh	r2, [r3, r7]
 800750e:	f5b2 5ffa 	cmp.w	r2, #8000	@ 0x1f40
 8007512:	d001      	beq.n	8007518 <mem_malloc+0xa8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007514:	4413      	add	r3, r2
 8007516:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 8007518:	f8d8 3000 	ldr.w	r3, [r8]
 800751c:	4e24      	ldr	r6, [pc, #144]	@ (80075b0 <mem_malloc+0x140>)
 800751e:	42ab      	cmp	r3, r5
 8007520:	d112      	bne.n	8007548 <mem_malloc+0xd8>
          while (cur->used && cur != ram_end) {
 8007522:	6831      	ldr	r1, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
 8007524:	f8d9 0000 	ldr.w	r0, [r9]
          while (cur->used && cur != ram_end) {
 8007528:	791a      	ldrb	r2, [r3, #4]
 800752a:	b10a      	cbz	r2, 8007530 <mem_malloc+0xc0>
 800752c:	4299      	cmp	r1, r3
 800752e:	d131      	bne.n	8007594 <mem_malloc+0x124>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007530:	4299      	cmp	r1, r3
          lfree = cur;
 8007532:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007536:	d007      	beq.n	8007548 <mem_malloc+0xd8>
 8007538:	b132      	cbz	r2, 8007548 <mem_malloc+0xd8>
 800753a:	4b1a      	ldr	r3, [pc, #104]	@ (80075a4 <mem_malloc+0x134>)
 800753c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8007540:	491c      	ldr	r1, [pc, #112]	@ (80075b4 <mem_malloc+0x144>)
 8007542:	481a      	ldr	r0, [pc, #104]	@ (80075ac <mem_malloc+0x13c>)
 8007544:	f006 ff38 	bl	800e3b8 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007548:	3408      	adds	r4, #8
        sys_mutex_unlock(&mem_mutex);
 800754a:	4815      	ldr	r0, [pc, #84]	@ (80075a0 <mem_malloc+0x130>)
 800754c:	f006 fa26 	bl	800d99c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007550:	6833      	ldr	r3, [r6, #0]
 8007552:	442c      	add	r4, r5
 8007554:	42a3      	cmp	r3, r4
 8007556:	d206      	bcs.n	8007566 <mem_malloc+0xf6>
 8007558:	4b12      	ldr	r3, [pc, #72]	@ (80075a4 <mem_malloc+0x134>)
 800755a:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800755e:	4916      	ldr	r1, [pc, #88]	@ (80075b8 <mem_malloc+0x148>)
 8007560:	4812      	ldr	r0, [pc, #72]	@ (80075ac <mem_malloc+0x13c>)
 8007562:	f006 ff29 	bl	800e3b8 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007566:	07ab      	lsls	r3, r5, #30
 8007568:	d00d      	beq.n	8007586 <mem_malloc+0x116>
 800756a:	4b0e      	ldr	r3, [pc, #56]	@ (80075a4 <mem_malloc+0x134>)
 800756c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8007570:	4912      	ldr	r1, [pc, #72]	@ (80075bc <mem_malloc+0x14c>)
 8007572:	480e      	ldr	r0, [pc, #56]	@ (80075ac <mem_malloc+0x13c>)
 8007574:	f006 ff20 	bl	800e3b8 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007578:	4b0a      	ldr	r3, [pc, #40]	@ (80075a4 <mem_malloc+0x134>)
 800757a:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800757e:	4910      	ldr	r1, [pc, #64]	@ (80075c0 <mem_malloc+0x150>)
 8007580:	480a      	ldr	r0, [pc, #40]	@ (80075ac <mem_malloc+0x13c>)
 8007582:	f006 ff19 	bl	800e3b8 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007586:	f105 0008 	add.w	r0, r5, #8
}
 800758a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 800758e:	2301      	movs	r3, #1
 8007590:	712b      	strb	r3, [r5, #4]
 8007592:	e7c1      	b.n	8007518 <mem_malloc+0xa8>
  return (struct mem *)(void *)&ram[ptr];
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	4403      	add	r3, r0
 8007598:	e7c6      	b.n	8007528 <mem_malloc+0xb8>
 800759a:	460e      	mov	r6, r1
 800759c:	e78a      	b.n	80074b4 <mem_malloc+0x44>
 800759e:	bf00      	nop
 80075a0:	2002aac8 	.word	0x2002aac8
 80075a4:	0800fa7a 	.word	0x0800fa7a
 80075a8:	0800fc03 	.word	0x0800fc03
 80075ac:	0800f15a 	.word	0x0800f15a
 80075b0:	2002aacc 	.word	0x2002aacc
 80075b4:	0800fc14 	.word	0x0800fc14
 80075b8:	0800fc2d 	.word	0x0800fc2d
 80075bc:	0800fc5d 	.word	0x0800fc5d
 80075c0:	0800fc8c 	.word	0x0800fc8c
 80075c4:	2002aad0 	.word	0x2002aad0
 80075c8:	2002aac4 	.word	0x2002aac4

080075cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80075d0:	f006 f9fe 	bl	800d9d0 <sys_arch_protect>
 80075d4:	4605      	mov	r5, r0

  memp = *desc->tab;
 80075d6:	68a3      	ldr	r3, [r4, #8]
 80075d8:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80075da:	b15c      	cbz	r4, 80075f4 <do_memp_malloc_pool+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80075dc:	6822      	ldr	r2, [r4, #0]
 80075de:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80075e0:	07a3      	lsls	r3, r4, #30
 80075e2:	d006      	beq.n	80075f2 <do_memp_malloc_pool+0x26>
 80075e4:	4b05      	ldr	r3, [pc, #20]	@ (80075fc <do_memp_malloc_pool+0x30>)
 80075e6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80075ea:	4905      	ldr	r1, [pc, #20]	@ (8007600 <do_memp_malloc_pool+0x34>)
 80075ec:	4805      	ldr	r0, [pc, #20]	@ (8007604 <do_memp_malloc_pool+0x38>)
 80075ee:	f006 fee3 	bl	800e3b8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80075f2:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80075f4:	f006 f9f8 	bl	800d9e8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 80075f8:	4620      	mov	r0, r4
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	0800fcaf 	.word	0x0800fcaf
 8007600:	0800fcdf 	.word	0x0800fcdf
 8007604:	0800f15a 	.word	0x0800f15a

08007608 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007608:	b538      	push	{r3, r4, r5, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800760a:	078b      	lsls	r3, r1, #30
{
 800760c:	4605      	mov	r5, r0
 800760e:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007610:	d006      	beq.n	8007620 <do_memp_free_pool+0x18>
 8007612:	4b08      	ldr	r3, [pc, #32]	@ (8007634 <do_memp_free_pool+0x2c>)
 8007614:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8007618:	4907      	ldr	r1, [pc, #28]	@ (8007638 <do_memp_free_pool+0x30>)
 800761a:	4808      	ldr	r0, [pc, #32]	@ (800763c <do_memp_free_pool+0x34>)
 800761c:	f006 fecc 	bl	800e3b8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8007620:	f006 f9d6 	bl	800d9d0 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007624:	68ab      	ldr	r3, [r5, #8]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800762a:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800762c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8007630:	f006 b9da 	b.w	800d9e8 <sys_arch_unprotect>
 8007634:	0800fcaf 	.word	0x0800fcaf
 8007638:	0800fd02 	.word	0x0800fd02
 800763c:	0800f15a 	.word	0x0800f15a

08007640 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007640:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8007642:	2200      	movs	r2, #0
 8007644:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007646:	3303      	adds	r3, #3
{
 8007648:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800764a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800764e:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8007650:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8007652:	4294      	cmp	r4, r2
 8007654:	dc00      	bgt.n	8007658 <memp_init_pool+0x18>
}
 8007656:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8007658:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800765a:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800765c:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800765e:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8007660:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007662:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 8007664:	e7f5      	b.n	8007652 <memp_init_pool+0x12>
	...

08007668 <memp_init>:
{
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4d05      	ldr	r5, [pc, #20]	@ (8007680 <memp_init+0x18>)
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800766c:	2400      	movs	r4, #0
 800766e:	3401      	adds	r4, #1
    memp_init_pool(memp_pools[i]);
 8007670:	f855 0b04 	ldr.w	r0, [r5], #4
 8007674:	f7ff ffe4 	bl	8007640 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007678:	b2a4      	uxth	r4, r4
 800767a:	2c0e      	cmp	r4, #14
 800767c:	d1f7      	bne.n	800766e <memp_init+0x6>
}
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	0800fd6c 	.word	0x0800fd6c

08007684 <memp_malloc_pool>:
{
 8007684:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007686:	4604      	mov	r4, r0
 8007688:	b118      	cbz	r0, 8007692 <memp_malloc_pool+0xe>
}
 800768a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 800768e:	f7ff bf9d 	b.w	80075cc <do_memp_malloc_pool>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007692:	4b04      	ldr	r3, [pc, #16]	@ (80076a4 <memp_malloc_pool+0x20>)
 8007694:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8007698:	4903      	ldr	r1, [pc, #12]	@ (80076a8 <memp_malloc_pool+0x24>)
 800769a:	4804      	ldr	r0, [pc, #16]	@ (80076ac <memp_malloc_pool+0x28>)
 800769c:	f006 fe8c 	bl	800e3b8 <iprintf>
}
 80076a0:	4620      	mov	r0, r4
 80076a2:	bd10      	pop	{r4, pc}
 80076a4:	0800fcaf 	.word	0x0800fcaf
 80076a8:	0800fd22 	.word	0x0800fd22
 80076ac:	0800f15a 	.word	0x0800f15a

080076b0 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80076b0:	280d      	cmp	r0, #13
{
 80076b2:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80076b4:	d806      	bhi.n	80076c4 <memp_malloc+0x14>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80076b6:	4b08      	ldr	r3, [pc, #32]	@ (80076d8 <memp_malloc+0x28>)
 80076b8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 80076bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80076c0:	f7ff bf84 	b.w	80075cc <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80076c4:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <memp_malloc+0x2c>)
 80076c6:	f240 1257 	movw	r2, #343	@ 0x157
 80076ca:	4905      	ldr	r1, [pc, #20]	@ (80076e0 <memp_malloc+0x30>)
 80076cc:	4805      	ldr	r0, [pc, #20]	@ (80076e4 <memp_malloc+0x34>)
 80076ce:	f006 fe73 	bl	800e3b8 <iprintf>
}
 80076d2:	2000      	movs	r0, #0
 80076d4:	bd08      	pop	{r3, pc}
 80076d6:	bf00      	nop
 80076d8:	0800fd6c 	.word	0x0800fd6c
 80076dc:	0800fcaf 	.word	0x0800fcaf
 80076e0:	0800fd34 	.word	0x0800fd34
 80076e4:	0800f15a 	.word	0x0800f15a

080076e8 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80076e8:	b108      	cbz	r0, 80076ee <memp_free_pool+0x6>
  if ((desc == NULL) || (mem == NULL)) {
 80076ea:	b939      	cbnz	r1, 80076fc <memp_free_pool+0x14>
 80076ec:	4770      	bx	lr
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80076ee:	4b04      	ldr	r3, [pc, #16]	@ (8007700 <memp_free_pool+0x18>)
 80076f0:	f240 1295 	movw	r2, #405	@ 0x195
 80076f4:	4903      	ldr	r1, [pc, #12]	@ (8007704 <memp_free_pool+0x1c>)
 80076f6:	4804      	ldr	r0, [pc, #16]	@ (8007708 <memp_free_pool+0x20>)
 80076f8:	f006 be5e 	b.w	800e3b8 <iprintf>
    return;
  }

  do_memp_free_pool(desc, mem);
 80076fc:	f7ff bf84 	b.w	8007608 <do_memp_free_pool>
 8007700:	0800fcaf 	.word	0x0800fcaf
 8007704:	0800fd22 	.word	0x0800fd22
 8007708:	0800f15a 	.word	0x0800f15a

0800770c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800770c:	280d      	cmp	r0, #13
 800770e:	d906      	bls.n	800771e <memp_free+0x12>
 8007710:	4b06      	ldr	r3, [pc, #24]	@ (800772c <memp_free+0x20>)
 8007712:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007716:	4906      	ldr	r1, [pc, #24]	@ (8007730 <memp_free+0x24>)
 8007718:	4806      	ldr	r0, [pc, #24]	@ (8007734 <memp_free+0x28>)
 800771a:	f006 be4d 	b.w	800e3b8 <iprintf>

  if (mem == NULL) {
 800771e:	b121      	cbz	r1, 800772a <memp_free+0x1e>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007720:	4b05      	ldr	r3, [pc, #20]	@ (8007738 <memp_free+0x2c>)
 8007722:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007726:	f7ff bf6f 	b.w	8007608 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800772a:	4770      	bx	lr
 800772c:	0800fcaf 	.word	0x0800fcaf
 8007730:	0800fd51 	.word	0x0800fd51
 8007734:	0800f15a 	.word	0x0800f15a
 8007738:	0800fd6c 	.word	0x0800fd6c

0800773c <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800773c:	f06f 000b 	mvn.w	r0, #11
 8007740:	4770      	bx	lr
	...

08007744 <netif_issue_reports>:
{
 8007744:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007746:	4604      	mov	r4, r0
 8007748:	b930      	cbnz	r0, 8007758 <netif_issue_reports+0x14>
 800774a:	4b0c      	ldr	r3, [pc, #48]	@ (800777c <netif_issue_reports+0x38>)
 800774c:	f240 326d 	movw	r2, #877	@ 0x36d
 8007750:	490b      	ldr	r1, [pc, #44]	@ (8007780 <netif_issue_reports+0x3c>)
 8007752:	480c      	ldr	r0, [pc, #48]	@ (8007784 <netif_issue_reports+0x40>)
 8007754:	f006 fe30 	bl	800e3b8 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007758:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800775c:	f003 0205 	and.w	r2, r3, #5
 8007760:	2a05      	cmp	r2, #5
 8007762:	d109      	bne.n	8007778 <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007764:	6862      	ldr	r2, [r4, #4]
 8007766:	b13a      	cbz	r2, 8007778 <netif_issue_reports+0x34>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007768:	071b      	lsls	r3, r3, #28
 800776a:	d505      	bpl.n	8007778 <netif_issue_reports+0x34>
      etharp_gratuitous(netif);
 800776c:	1d21      	adds	r1, r4, #4
 800776e:	4620      	mov	r0, r4
}
 8007770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8007774:	f004 bfc8 	b.w	800c708 <etharp_request>
}
 8007778:	bd10      	pop	{r4, pc}
 800777a:	bf00      	nop
 800777c:	0800fe4c 	.word	0x0800fe4c
 8007780:	0800fe7d 	.word	0x0800fe7d
 8007784:	0800f15a 	.word	0x0800f15a

08007788 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8007788:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800778a:	6843      	ldr	r3, [r0, #4]
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800778c:	4615      	mov	r5, r2
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800778e:	680a      	ldr	r2, [r1, #0]
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8007790:	4604      	mov	r4, r0
 8007792:	460e      	mov	r6, r1
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007794:	429a      	cmp	r2, r3
 8007796:	d00f      	beq.n	80077b8 <netif_do_set_ipaddr.isra.0+0x30>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007798:	602b      	str	r3, [r5, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800779a:	a901      	add	r1, sp, #4
 800779c:	4628      	mov	r0, r5
    *ip_2_ip4(&new_addr) = *ipaddr;
 800779e:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80077a0:	f001 f964 	bl	8008a6c <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80077a4:	a901      	add	r1, sp, #4
 80077a6:	4628      	mov	r0, r5
 80077a8:	f004 fdca 	bl	800c340 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80077ac:	6833      	ldr	r3, [r6, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80077ae:	2101      	movs	r1, #1
 80077b0:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80077b2:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80077b4:	f7ff ffc6 	bl	8007744 <netif_issue_reports>
}
 80077b8:	b002      	add	sp, #8
 80077ba:	bd70      	pop	{r4, r5, r6, pc}

080077bc <netif_init>:
}
 80077bc:	4770      	bx	lr
	...

080077c0 <netif_set_addr>:
{
 80077c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 80077c2:	4e14      	ldr	r6, [pc, #80]	@ (8007814 <netif_set_addr+0x54>)
{
 80077c4:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 80077c6:	2900      	cmp	r1, #0
 80077c8:	bf14      	ite	ne
 80077ca:	460d      	movne	r5, r1
 80077cc:	4635      	moveq	r5, r6
    netmask = IP4_ADDR_ANY4;
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	bf14      	ite	ne
 80077d2:	4617      	movne	r7, r2
 80077d4:	4637      	moveq	r7, r6
    gw = IP4_ADDR_ANY4;
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	bf18      	it	ne
 80077da:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	b9b3      	cbnz	r3, 800780e <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80077e0:	aa01      	add	r2, sp, #4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7ff ffd0 	bl	8007788 <netif_do_set_ipaddr.isra.0>
 80077e8:	2301      	movs	r3, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	68a1      	ldr	r1, [r4, #8]
 80077ee:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80077f0:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80077f2:	bf18      	it	ne
 80077f4:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80077f6:	6832      	ldr	r2, [r6, #0]
 80077f8:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80077fa:	bf18      	it	ne
 80077fc:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 80077fe:	b923      	cbnz	r3, 800780a <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007800:	aa01      	add	r2, sp, #4
 8007802:	4629      	mov	r1, r5
 8007804:	4620      	mov	r0, r4
 8007806:	f7ff ffbf 	bl	8007788 <netif_do_set_ipaddr.isra.0>
}
 800780a:	b003      	add	sp, #12
 800780c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800780e:	2300      	movs	r3, #0
 8007810:	e7eb      	b.n	80077ea <netif_set_addr+0x2a>
 8007812:	bf00      	nop
 8007814:	08011968 	.word	0x08011968

08007818 <netif_add>:
{
 8007818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800781e:	4604      	mov	r4, r0
 8007820:	b950      	cbnz	r0, 8007838 <netif_add+0x20>
 8007822:	4b39      	ldr	r3, [pc, #228]	@ (8007908 <netif_add+0xf0>)
 8007824:	f240 1227 	movw	r2, #295	@ 0x127
 8007828:	4938      	ldr	r1, [pc, #224]	@ (800790c <netif_add+0xf4>)
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800782a:	4839      	ldr	r0, [pc, #228]	@ (8007910 <netif_add+0xf8>)
 800782c:	f006 fdc4 	bl	800e3b8 <iprintf>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007830:	2400      	movs	r4, #0
}
 8007832:	4620      	mov	r0, r4
 8007834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007838:	b926      	cbnz	r6, 8007844 <netif_add+0x2c>
 800783a:	4b33      	ldr	r3, [pc, #204]	@ (8007908 <netif_add+0xf0>)
 800783c:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007840:	4934      	ldr	r1, [pc, #208]	@ (8007914 <netif_add+0xfc>)
 8007842:	e7f2      	b.n	800782a <netif_add+0x12>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007844:	2500      	movs	r5, #0
  netif->num = netif_num;
 8007846:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8007924 <netif_add+0x10c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800784a:	4f33      	ldr	r7, [pc, #204]	@ (8007918 <netif_add+0x100>)
  ip_addr_set_zero_ip4(&netif->gw);
 800784c:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 800784e:	8485      	strh	r5, [r0, #36]	@ 0x24
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007850:	2b00      	cmp	r3, #0
 8007852:	bf08      	it	eq
 8007854:	463b      	moveq	r3, r7
  netif->flags = 0;
 8007856:	f880 502d 	strb.w	r5, [r0, #45]	@ 0x2d
  netif_set_addr(netif, ipaddr, netmask, gw);
 800785a:	2a00      	cmp	r2, #0
 800785c:	bf08      	it	eq
 800785e:	463a      	moveq	r2, r7
  netif->link_callback = NULL;
 8007860:	61c5      	str	r5, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007862:	2900      	cmp	r1, #0
 8007864:	bf08      	it	eq
 8007866:	4639      	moveq	r1, r7
  netif->output = netif_null_output_ip4;
 8007868:	f8df c0bc 	ldr.w	ip, [pc, #188]	@ 8007928 <netif_add+0x110>
  ip_addr_set_zero_ip4(&netif->netmask);
 800786c:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif->state = state;
 8007870:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  netif->output = netif_null_output_ip4;
 8007872:	f8c0 c014 	str.w	ip, [r0, #20]
  netif->state = state;
 8007876:	6205      	str	r5, [r0, #32]
  netif->num = netif_num;
 8007878:	f898 5000 	ldrb.w	r5, [r8]
 800787c:	f880 5030 	strb.w	r5, [r0, #48]	@ 0x30
  netif->input = input;
 8007880:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007882:	6105      	str	r5, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007884:	f7ff ff9c 	bl	80077c0 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8007888:	4620      	mov	r0, r4
 800788a:	47b0      	blx	r6
 800788c:	2800      	cmp	r0, #0
 800788e:	d1cf      	bne.n	8007830 <netif_add+0x18>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007890:	4e22      	ldr	r6, [pc, #136]	@ (800791c <netif_add+0x104>)
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007892:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 8007908 <netif_add+0xf0>
      if (netif->num == 255) {
 8007896:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
      num_netifs = 0;
 800789a:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800789c:	6835      	ldr	r5, [r6, #0]
      if (netif->num == 255) {
 800789e:	2bff      	cmp	r3, #255	@ 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 80078a0:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800792c <netif_add+0x114>
 80078a4:	f8df a068 	ldr.w	sl, [pc, #104]	@ 8007910 <netif_add+0xf8>
        netif->num = 0;
 80078a8:	bf04      	itt	eq
 80078aa:	2300      	moveq	r3, #0
 80078ac:	f884 3030 	strbeq.w	r3, [r4, #48]	@ 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80078b0:	b95d      	cbnz	r5, 80078ca <netif_add+0xb2>
  if (netif->num == 254) {
 80078b2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80078b6:	2bfe      	cmp	r3, #254	@ 0xfe
    netif_num = (u8_t)(netif->num + 1);
 80078b8:	bf1c      	itt	ne
 80078ba:	3301      	addne	r3, #1
 80078bc:	b2dd      	uxtbne	r5, r3
  netif->next = netif_list;
 80078be:	6833      	ldr	r3, [r6, #0]
 80078c0:	f888 5000 	strb.w	r5, [r8]
 80078c4:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 80078c6:	6034      	str	r4, [r6, #0]
  return netif;
 80078c8:	e7b3      	b.n	8007832 <netif_add+0x1a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80078ca:	42a5      	cmp	r5, r4
 80078cc:	d106      	bne.n	80078dc <netif_add+0xc4>
 80078ce:	464b      	mov	r3, r9
 80078d0:	f240 128b 	movw	r2, #395	@ 0x18b
 80078d4:	4659      	mov	r1, fp
 80078d6:	4650      	mov	r0, sl
 80078d8:	f006 fd6e 	bl	800e3b8 <iprintf>
        num_netifs++;
 80078dc:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80078de:	2fff      	cmp	r7, #255	@ 0xff
 80078e0:	dd06      	ble.n	80078f0 <netif_add+0xd8>
 80078e2:	464b      	mov	r3, r9
 80078e4:	f240 128d 	movw	r2, #397	@ 0x18d
 80078e8:	490d      	ldr	r1, [pc, #52]	@ (8007920 <netif_add+0x108>)
 80078ea:	4650      	mov	r0, sl
 80078ec:	f006 fd64 	bl	800e3b8 <iprintf>
        if (netif2->num == netif->num) {
 80078f0:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 80078f4:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d103      	bne.n	8007904 <netif_add+0xec>
          netif->num++;
 80078fc:	3301      	adds	r3, #1
 80078fe:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    } while (netif2 != NULL);
 8007902:	e7c8      	b.n	8007896 <netif_add+0x7e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007904:	682d      	ldr	r5, [r5, #0]
 8007906:	e7d3      	b.n	80078b0 <netif_add+0x98>
 8007908:	0800fe4c 	.word	0x0800fe4c
 800790c:	0800fea0 	.word	0x0800fea0
 8007910:	0800f15a 	.word	0x0800f15a
 8007914:	0800feb9 	.word	0x0800feb9
 8007918:	08011968 	.word	0x08011968
 800791c:	200333f4 	.word	0x200333f4
 8007920:	0800feef 	.word	0x0800feef
 8007924:	200333ef 	.word	0x200333ef
 8007928:	0800773d 	.word	0x0800773d
 800792c:	0800fedb 	.word	0x0800fedb

08007930 <netif_set_default>:
  netif_default = netif;
 8007930:	4b01      	ldr	r3, [pc, #4]	@ (8007938 <netif_set_default+0x8>)
 8007932:	6018      	str	r0, [r3, #0]
}
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	200333f0 	.word	0x200333f0

0800793c <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800793c:	b930      	cbnz	r0, 800794c <netif_set_up+0x10>
 800793e:	4b09      	ldr	r3, [pc, #36]	@ (8007964 <netif_set_up+0x28>)
 8007940:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007944:	4908      	ldr	r1, [pc, #32]	@ (8007968 <netif_set_up+0x2c>)
 8007946:	4809      	ldr	r0, [pc, #36]	@ (800796c <netif_set_up+0x30>)
 8007948:	f006 bd36 	b.w	800e3b8 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800794c:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 8007950:	07d1      	lsls	r1, r2, #31
 8007952:	d406      	bmi.n	8007962 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007954:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007958:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800795a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800795e:	f7ff bef1 	b.w	8007744 <netif_issue_reports>
}
 8007962:	4770      	bx	lr
 8007964:	0800fe4c 	.word	0x0800fe4c
 8007968:	0800ff1d 	.word	0x0800ff1d
 800796c:	0800f15a 	.word	0x0800f15a

08007970 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007970:	b930      	cbnz	r0, 8007980 <netif_set_down+0x10>
 8007972:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <netif_set_down+0x2c>)
 8007974:	f240 329b 	movw	r2, #923	@ 0x39b
 8007978:	4909      	ldr	r1, [pc, #36]	@ (80079a0 <netif_set_down+0x30>)
 800797a:	480a      	ldr	r0, [pc, #40]	@ (80079a4 <netif_set_down+0x34>)
 800797c:	f006 bd1c 	b.w	800e3b8 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 8007980:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 8007984:	07d1      	lsls	r1, r2, #31
 8007986:	d507      	bpl.n	8007998 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007988:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800798c:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800798e:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007992:	d501      	bpl.n	8007998 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 8007994:	f004 be00 	b.w	800c598 <etharp_cleanup_netif>
}
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	0800fe4c 	.word	0x0800fe4c
 80079a0:	0800ff39 	.word	0x0800ff39
 80079a4:	0800f15a 	.word	0x0800f15a

080079a8 <netif_set_link_up>:
{
 80079a8:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80079aa:	4604      	mov	r4, r0
 80079ac:	b940      	cbnz	r0, 80079c0 <netif_set_link_up+0x18>
 80079ae:	4b0d      	ldr	r3, [pc, #52]	@ (80079e4 <netif_set_link_up+0x3c>)
 80079b0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80079b4:	490c      	ldr	r1, [pc, #48]	@ (80079e8 <netif_set_link_up+0x40>)
 80079b6:	480d      	ldr	r0, [pc, #52]	@ (80079ec <netif_set_link_up+0x44>)
}
 80079b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80079bc:	f006 bcfc 	b.w	800e3b8 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80079c0:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80079c4:	075a      	lsls	r2, r3, #29
 80079c6:	d40c      	bmi.n	80079e2 <netif_set_link_up+0x3a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80079c8:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80079cc:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80079ce:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80079d2:	f7ff feb7 	bl	8007744 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80079d6:	69e3      	ldr	r3, [r4, #28]
 80079d8:	b11b      	cbz	r3, 80079e2 <netif_set_link_up+0x3a>
 80079da:	4620      	mov	r0, r4
}
 80079dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 80079e0:	4718      	bx	r3
}
 80079e2:	bd10      	pop	{r4, pc}
 80079e4:	0800fe4c 	.word	0x0800fe4c
 80079e8:	0800ff57 	.word	0x0800ff57
 80079ec:	0800f15a 	.word	0x0800f15a

080079f0 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80079f0:	b930      	cbnz	r0, 8007a00 <netif_set_link_down+0x10>
 80079f2:	4b09      	ldr	r3, [pc, #36]	@ (8007a18 <netif_set_link_down+0x28>)
 80079f4:	f240 4206 	movw	r2, #1030	@ 0x406
 80079f8:	4908      	ldr	r1, [pc, #32]	@ (8007a1c <netif_set_link_down+0x2c>)
 80079fa:	4809      	ldr	r0, [pc, #36]	@ (8007a20 <netif_set_link_down+0x30>)
 80079fc:	f006 bcdc 	b.w	800e3b8 <iprintf>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007a00:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 8007a04:	0751      	lsls	r1, r2, #29
 8007a06:	d506      	bpl.n	8007a16 <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007a08:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 8007a0c:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007a0e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007a12:	b103      	cbz	r3, 8007a16 <netif_set_link_down+0x26>
 8007a14:	4718      	bx	r3
}
 8007a16:	4770      	bx	lr
 8007a18:	0800fe4c 	.word	0x0800fe4c
 8007a1c:	0800ff78 	.word	0x0800ff78
 8007a20:	0800f15a 	.word	0x0800f15a

08007a24 <netif_set_link_callback>:
  if (netif) {
 8007a24:	b100      	cbz	r0, 8007a28 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8007a26:	61c1      	str	r1, [r0, #28]
}
 8007a28:	4770      	bx	lr
	...

08007a2c <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	b158      	cbz	r0, 8007a48 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8007a30:	4a06      	ldr	r2, [pc, #24]	@ (8007a4c <netif_get_by_index+0x20>)
 8007a32:	6810      	ldr	r0, [r2, #0]
 8007a34:	b900      	cbnz	r0, 8007a38 <netif_get_by_index+0xc>
 8007a36:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 8007a38:	f890 2030 	ldrb.w	r2, [r0, #48]	@ 0x30
 8007a3c:	3201      	adds	r2, #1
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d001      	beq.n	8007a48 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8007a44:	6800      	ldr	r0, [r0, #0]
 8007a46:	e7f5      	b.n	8007a34 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	200333f4 	.word	0x200333f4

08007a50 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8007a50:	b110      	cbz	r0, 8007a58 <pbuf_skip_const+0x8>
 8007a52:	8943      	ldrh	r3, [r0, #10]
 8007a54:	428b      	cmp	r3, r1
 8007a56:	d902      	bls.n	8007a5e <pbuf_skip_const+0xe>
    offset_left = (u16_t)(offset_left - q->len);
    q = q->next;
  }
  if (out_offset != NULL) {
 8007a58:	b102      	cbz	r2, 8007a5c <pbuf_skip_const+0xc>
    *out_offset = offset_left;
 8007a5a:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 8007a5c:	4770      	bx	lr
    offset_left = (u16_t)(offset_left - q->len);
 8007a5e:	1ac9      	subs	r1, r1, r3
    q = q->next;
 8007a60:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8007a62:	b289      	uxth	r1, r1
    q = q->next;
 8007a64:	e7f4      	b.n	8007a50 <pbuf_skip_const>
	...

08007a68 <pbuf_add_header_impl>:
{
 8007a68:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007a6a:	b120      	cbz	r0, 8007a76 <pbuf_add_header_impl+0xe>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007a6c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8007a70:	d309      	bcc.n	8007a86 <pbuf_add_header_impl+0x1e>
    return 1;
 8007a72:	2001      	movs	r0, #1
}
 8007a74:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007a76:	4b13      	ldr	r3, [pc, #76]	@ (8007ac4 <pbuf_add_header_impl+0x5c>)
 8007a78:	f240 12df 	movw	r2, #479	@ 0x1df
 8007a7c:	4912      	ldr	r1, [pc, #72]	@ (8007ac8 <pbuf_add_header_impl+0x60>)
 8007a7e:	4813      	ldr	r0, [pc, #76]	@ (8007acc <pbuf_add_header_impl+0x64>)
 8007a80:	f006 fc9a 	bl	800e3b8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007a84:	e7f5      	b.n	8007a72 <pbuf_add_header_impl+0xa>
  if (header_size_increment == 0) {
 8007a86:	b1a9      	cbz	r1, 8007ab4 <pbuf_add_header_impl+0x4c>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007a88:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 8007a8a:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007a8c:	fa13 f381 	uxtah	r3, r3, r1
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	42a3      	cmp	r3, r4
 8007a94:	d3ed      	bcc.n	8007a72 <pbuf_add_header_impl+0xa>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007a96:	f990 500c 	ldrsb.w	r5, [r0, #12]
 8007a9a:	2d00      	cmp	r5, #0
 8007a9c:	da0c      	bge.n	8007ab8 <pbuf_add_header_impl+0x50>
    payload = (u8_t *)p->payload - header_size_increment;
 8007a9e:	6842      	ldr	r2, [r0, #4]
 8007aa0:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007aa2:	f100 0210 	add.w	r2, r0, #16
 8007aa6:	4291      	cmp	r1, r2
 8007aa8:	d3e3      	bcc.n	8007a72 <pbuf_add_header_impl+0xa>
  p->len = (u16_t)(p->len + increment_magnitude);
 8007aaa:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 8007aac:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007aae:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007ab0:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007ab2:	8144      	strh	r4, [r0, #10]
    return 0;
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	e7dd      	b.n	8007a74 <pbuf_add_header_impl+0xc>
    if (force) {
 8007ab8:	2a00      	cmp	r2, #0
 8007aba:	d0da      	beq.n	8007a72 <pbuf_add_header_impl+0xa>
      payload = (u8_t *)p->payload - header_size_increment;
 8007abc:	6842      	ldr	r2, [r0, #4]
 8007abe:	1a51      	subs	r1, r2, r1
 8007ac0:	e7f3      	b.n	8007aaa <pbuf_add_header_impl+0x42>
 8007ac2:	bf00      	nop
 8007ac4:	0800ff9b 	.word	0x0800ff9b
 8007ac8:	0801006d 	.word	0x0801006d
 8007acc:	0800f15a 	.word	0x0800f15a

08007ad0 <pbuf_free_ooseq_callback>:
{
 8007ad0:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007ad2:	f005 ff7d 	bl	800d9d0 <sys_arch_protect>
 8007ad6:	4b08      	ldr	r3, [pc, #32]	@ (8007af8 <pbuf_free_ooseq_callback+0x28>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	f005 ff84 	bl	800d9e8 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007ae0:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <pbuf_free_ooseq_callback+0x2c>)
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	b900      	cbnz	r0, 8007ae8 <pbuf_free_ooseq_callback+0x18>
}
 8007ae6:	bd08      	pop	{r3, pc}
    if (pcb->ooseq != NULL) {
 8007ae8:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8007aea:	b11b      	cbz	r3, 8007af4 <pbuf_free_ooseq_callback+0x24>
}
 8007aec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 8007af0:	f000 be5c 	b.w	80087ac <tcp_free_ooseq>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007af4:	68c0      	ldr	r0, [r0, #12]
 8007af6:	e7f5      	b.n	8007ae4 <pbuf_free_ooseq_callback+0x14>
 8007af8:	200333f8 	.word	0x200333f8
 8007afc:	20033400 	.word	0x20033400

08007b00 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007b00:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 8007b04:	2b01      	cmp	r3, #1
{
 8007b06:	b570      	push	{r4, r5, r6, lr}
 8007b08:	4606      	mov	r6, r0
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007b0e:	d006      	beq.n	8007b1e <pbuf_alloc_reference+0x1e>
 8007b10:	4b0a      	ldr	r3, [pc, #40]	@ (8007b3c <pbuf_alloc_reference+0x3c>)
 8007b12:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007b16:	490a      	ldr	r1, [pc, #40]	@ (8007b40 <pbuf_alloc_reference+0x40>)
 8007b18:	480a      	ldr	r0, [pc, #40]	@ (8007b44 <pbuf_alloc_reference+0x44>)
 8007b1a:	f006 fc4d 	bl	800e3b8 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007b1e:	200c      	movs	r0, #12
 8007b20:	f7ff fdc6 	bl	80076b0 <memp_malloc>
  if (p == NULL) {
 8007b24:	b140      	cbz	r0, 8007b38 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 8007b26:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 8007b28:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8007b2a:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 8007b2c:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 8007b2e:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 8007b30:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 8007b34:	2301      	movs	r3, #1
 8007b36:	81c3      	strh	r3, [r0, #14]
}
 8007b38:	bd70      	pop	{r4, r5, r6, pc}
 8007b3a:	bf00      	nop
 8007b3c:	0800ff9b 	.word	0x0800ff9b
 8007b40:	0800ffcb 	.word	0x0800ffcb
 8007b44:	0800f15a 	.word	0x0800f15a

08007b48 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007b48:	3003      	adds	r0, #3
 8007b4a:	f020 0003 	bic.w	r0, r0, #3
{
 8007b4e:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007b50:	180e      	adds	r6, r1, r0
 8007b52:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 8007b56:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007b58:	42ae      	cmp	r6, r5
 8007b5a:	d80d      	bhi.n	8007b78 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 8007b5c:	b104      	cbz	r4, 8007b60 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007b5e:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007b60:	4618      	mov	r0, r3
  p->next = NULL;
 8007b62:	2300      	movs	r3, #0
  p->payload = payload;
 8007b64:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 8007b68:	2302      	movs	r3, #2
  p->tot_len = tot_len;
 8007b6a:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8007b6c:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
 8007b6e:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8007b70:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
 8007b72:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 8007b74:	81c3      	strh	r3, [r0, #14]
}
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8007b78:	2000      	movs	r0, #0
 8007b7a:	e7fc      	b.n	8007b76 <pbuf_alloced_custom+0x2e>

08007b7c <pbuf_add_header>:
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f7ff bf73 	b.w	8007a68 <pbuf_add_header_impl>
	...

08007b84 <pbuf_remove_header>:
{
 8007b84:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007b86:	b120      	cbz	r0, 8007b92 <pbuf_remove_header+0xe>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007b88:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8007b8c:	d309      	bcc.n	8007ba2 <pbuf_remove_header+0x1e>
    return 1;
 8007b8e:	2001      	movs	r0, #1
}
 8007b90:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007b92:	4b0e      	ldr	r3, [pc, #56]	@ (8007bcc <pbuf_remove_header+0x48>)
 8007b94:	f240 224b 	movw	r2, #587	@ 0x24b
 8007b98:	490d      	ldr	r1, [pc, #52]	@ (8007bd0 <pbuf_remove_header+0x4c>)
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007b9a:	480e      	ldr	r0, [pc, #56]	@ (8007bd4 <pbuf_remove_header+0x50>)
 8007b9c:	f006 fc0c 	bl	800e3b8 <iprintf>
 8007ba0:	e7f5      	b.n	8007b8e <pbuf_remove_header+0xa>
  if (header_size_decrement == 0) {
 8007ba2:	b181      	cbz	r1, 8007bc6 <pbuf_remove_header+0x42>
  increment_magnitude = (u16_t)header_size_decrement;
 8007ba4:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007ba6:	8943      	ldrh	r3, [r0, #10]
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d204      	bcs.n	8007bb6 <pbuf_remove_header+0x32>
 8007bac:	4b07      	ldr	r3, [pc, #28]	@ (8007bcc <pbuf_remove_header+0x48>)
 8007bae:	f240 2255 	movw	r2, #597	@ 0x255
 8007bb2:	4909      	ldr	r1, [pc, #36]	@ (8007bd8 <pbuf_remove_header+0x54>)
 8007bb4:	e7f1      	b.n	8007b9a <pbuf_remove_header+0x16>
  p->len = (u16_t)(p->len - increment_magnitude);
 8007bb6:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007bb8:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8007bba:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007bbc:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007bbe:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007bc0:	6044      	str	r4, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	8103      	strh	r3, [r0, #8]
    return 0;
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	e7e2      	b.n	8007b90 <pbuf_remove_header+0xc>
 8007bca:	bf00      	nop
 8007bcc:	0800ff9b 	.word	0x0800ff9b
 8007bd0:	0801006d 	.word	0x0801006d
 8007bd4:	0800f15a 	.word	0x0800f15a
 8007bd8:	0800ffdd 	.word	0x0800ffdd

08007bdc <pbuf_header_force>:
  if (header_size_increment < 0) {
 8007bdc:	1e0b      	subs	r3, r1, #0
 8007bde:	da02      	bge.n	8007be6 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007be0:	4259      	negs	r1, r3
 8007be2:	f7ff bfcf 	b.w	8007b84 <pbuf_remove_header>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007be6:	2201      	movs	r2, #1
 8007be8:	f7ff bf3e 	b.w	8007a68 <pbuf_add_header_impl>

08007bec <pbuf_free>:
{
 8007bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p == NULL) {
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	b950      	cbnz	r0, 8007c0a <pbuf_free+0x1e>
    return 0;
 8007bf4:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 8007bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8007ca8 <pbuf_free+0xbc>)
 8007bf8:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007bfc:	492b      	ldr	r1, [pc, #172]	@ (8007cac <pbuf_free+0xc0>)
 8007bfe:	482c      	ldr	r0, [pc, #176]	@ (8007cb0 <pbuf_free+0xc4>)
 8007c00:	f006 fbda 	bl	800e3b8 <iprintf>
}
 8007c04:	4628      	mov	r0, r5
 8007c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 8007c0a:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007c0c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007ca8 <pbuf_free+0xbc>
 8007c10:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8007cbc <pbuf_free+0xd0>
 8007c14:	f8df 9098 	ldr.w	r9, [pc, #152]	@ 8007cb0 <pbuf_free+0xc4>
    SYS_ARCH_PROTECT(old_level);
 8007c18:	f005 feda 	bl	800d9d0 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007c1c:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8007c1e:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007c20:	b933      	cbnz	r3, 8007c30 <pbuf_free+0x44>
 8007c22:	4643      	mov	r3, r8
 8007c24:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007c28:	4651      	mov	r1, sl
 8007c2a:	4648      	mov	r0, r9
 8007c2c:	f006 fbc4 	bl	800e3b8 <iprintf>
    ref = --(p->ref);
 8007c30:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007c32:	4638      	mov	r0, r7
    ref = --(p->ref);
 8007c34:	3e01      	subs	r6, #1
 8007c36:	b2f6      	uxtb	r6, r6
 8007c38:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007c3a:	f005 fed5 	bl	800d9e8 <sys_arch_unprotect>
    if (ref == 0) {
 8007c3e:	2e00      	cmp	r6, #0
 8007c40:	d1e0      	bne.n	8007c04 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007c42:	7b62      	ldrb	r2, [r4, #13]
      q = p->next;
 8007c44:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007c46:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 8007c48:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007c4a:	d511      	bpl.n	8007c70 <pbuf_free+0x84>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007c4c:	6923      	ldr	r3, [r4, #16]
 8007c4e:	b933      	cbnz	r3, 8007c5e <pbuf_free+0x72>
 8007c50:	4b15      	ldr	r3, [pc, #84]	@ (8007ca8 <pbuf_free+0xbc>)
 8007c52:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007c56:	4917      	ldr	r1, [pc, #92]	@ (8007cb4 <pbuf_free+0xc8>)
 8007c58:	4815      	ldr	r0, [pc, #84]	@ (8007cb0 <pbuf_free+0xc4>)
 8007c5a:	f006 fbad 	bl	800e3b8 <iprintf>
        pc->custom_free_function(p);
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	4620      	mov	r0, r4
 8007c62:	4798      	blx	r3
      count++;
 8007c64:	3501      	adds	r5, #1
 8007c66:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8007c68:	2e00      	cmp	r6, #0
 8007c6a:	d0cb      	beq.n	8007c04 <pbuf_free+0x18>
      p = q;
 8007c6c:	4634      	mov	r4, r6
 8007c6e:	e7d3      	b.n	8007c18 <pbuf_free+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
 8007c70:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d104      	bne.n	8007c82 <pbuf_free+0x96>
          memp_free(MEMP_PBUF_POOL, p);
 8007c78:	4621      	mov	r1, r4
 8007c7a:	200d      	movs	r0, #13
          memp_free(MEMP_PBUF, p);
 8007c7c:	f7ff fd46 	bl	800770c <memp_free>
 8007c80:	e7f0      	b.n	8007c64 <pbuf_free+0x78>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d102      	bne.n	8007c8c <pbuf_free+0xa0>
          memp_free(MEMP_PBUF, p);
 8007c86:	4621      	mov	r1, r4
 8007c88:	200c      	movs	r0, #12
 8007c8a:	e7f7      	b.n	8007c7c <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007c8c:	b91b      	cbnz	r3, 8007c96 <pbuf_free+0xaa>
          mem_free(p);
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f7ff fa60 	bl	8007154 <mem_free>
 8007c94:	e7e6      	b.n	8007c64 <pbuf_free+0x78>
          LWIP_ASSERT("invalid pbuf type", 0);
 8007c96:	4643      	mov	r3, r8
 8007c98:	f240 320f 	movw	r2, #783	@ 0x30f
 8007c9c:	4906      	ldr	r1, [pc, #24]	@ (8007cb8 <pbuf_free+0xcc>)
 8007c9e:	4648      	mov	r0, r9
 8007ca0:	f006 fb8a 	bl	800e3b8 <iprintf>
 8007ca4:	e7de      	b.n	8007c64 <pbuf_free+0x78>
 8007ca6:	bf00      	nop
 8007ca8:	0800ff9b 	.word	0x0800ff9b
 8007cac:	0801006d 	.word	0x0801006d
 8007cb0:	0800f15a 	.word	0x0800f15a
 8007cb4:	08010011 	.word	0x08010011
 8007cb8:	08010032 	.word	0x08010032
 8007cbc:	0800fffb 	.word	0x0800fffb

08007cc0 <pbuf_alloc>:
  switch (type) {
 8007cc0:	f5b2 7fc1 	cmp.w	r2, #386	@ 0x182
{
 8007cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc8:	4605      	mov	r5, r0
 8007cca:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 8007ccc:	4607      	mov	r7, r0
  switch (type) {
 8007cce:	d014      	beq.n	8007cfa <pbuf_alloc+0x3a>
 8007cd0:	d808      	bhi.n	8007ce4 <pbuf_alloc+0x24>
 8007cd2:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d107      	bne.n	8007cea <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 8007cda:	2000      	movs	r0, #0
}
 8007cdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8007ce0:	f7ff bf0e 	b.w	8007b00 <pbuf_alloc_reference>
  switch (type) {
 8007ce4:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 8007ce8:	d04e      	beq.n	8007d88 <pbuf_alloc+0xc8>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007cea:	4b37      	ldr	r3, [pc, #220]	@ (8007dc8 <pbuf_alloc+0x108>)
 8007cec:	f240 1227 	movw	r2, #295	@ 0x127
 8007cf0:	4936      	ldr	r1, [pc, #216]	@ (8007dcc <pbuf_alloc+0x10c>)
 8007cf2:	4837      	ldr	r0, [pc, #220]	@ (8007dd0 <pbuf_alloc+0x110>)
 8007cf4:	f006 fb60 	bl	800e3b8 <iprintf>
      return NULL;
 8007cf8:	e023      	b.n	8007d42 <pbuf_alloc+0x82>
  switch (type) {
 8007cfa:	2500      	movs	r5, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007cfc:	f240 58cc 	movw	r8, #1484	@ 0x5cc
  p->type_internal = (u8_t)type;
 8007d00:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8007de0 <pbuf_alloc+0x120>
  switch (type) {
 8007d04:	462c      	mov	r4, r5
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007d06:	200d      	movs	r0, #13
 8007d08:	46aa      	mov	sl, r5
 8007d0a:	f7ff fcd1 	bl	80076b0 <memp_malloc>
        if (q == NULL) {
 8007d0e:	4605      	mov	r5, r0
 8007d10:	b9d8      	cbnz	r0, 8007d4a <pbuf_alloc+0x8a>
  queued = pbuf_free_ooseq_pending;
 8007d12:	4e30      	ldr	r6, [pc, #192]	@ (8007dd4 <pbuf_alloc+0x114>)
  SYS_ARCH_PROTECT(old_level);
 8007d14:	f005 fe5c 	bl	800d9d0 <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
 8007d18:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8007d1a:	7837      	ldrb	r7, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 8007d1c:	7033      	strb	r3, [r6, #0]
  queued = pbuf_free_ooseq_pending;
 8007d1e:	b2ff      	uxtb	r7, r7
  SYS_ARCH_UNPROTECT(old_level);
 8007d20:	f005 fe62 	bl	800d9e8 <sys_arch_unprotect>
  if (!queued) {
 8007d24:	b94f      	cbnz	r7, 8007d3a <pbuf_alloc+0x7a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8007d26:	4629      	mov	r1, r5
 8007d28:	482b      	ldr	r0, [pc, #172]	@ (8007dd8 <pbuf_alloc+0x118>)
 8007d2a:	f7fe ffcd 	bl	8006cc8 <tcpip_try_callback>
 8007d2e:	b120      	cbz	r0, 8007d3a <pbuf_alloc+0x7a>
 8007d30:	f005 fe4e 	bl	800d9d0 <sys_arch_protect>
 8007d34:	7035      	strb	r5, [r6, #0]
 8007d36:	f005 fe57 	bl	800d9e8 <sys_arch_unprotect>
          if (p) {
 8007d3a:	b114      	cbz	r4, 8007d42 <pbuf_alloc+0x82>
            pbuf_free(p);
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f7ff ff55 	bl	8007bec <pbuf_free>
          return NULL;
 8007d42:	2400      	movs	r4, #0
}
 8007d44:	4620      	mov	r0, r4
 8007d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007d4a:	1cfb      	adds	r3, r7, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007d4c:	4407      	add	r7, r0
  p->next = NULL;
 8007d4e:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 8007d50:	8106      	strh	r6, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007d52:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007d56:	3713      	adds	r7, #19
  p->next = NULL;
 8007d58:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007d5a:	eba8 0303 	sub.w	r3, r8, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007d5e:	f027 0703 	bic.w	r7, r7, #3
  p->type_internal = (u8_t)type;
 8007d62:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007d66:	b29b      	uxth	r3, r3
  p->payload = payload;
 8007d68:	6047      	str	r7, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007d6a:	42b3      	cmp	r3, r6
 8007d6c:	bf28      	it	cs
 8007d6e:	4633      	movcs	r3, r6
  p->len = len;
 8007d70:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8007d72:	b13c      	cbz	r4, 8007d84 <pbuf_alloc+0xc4>
          last->next = q;
 8007d74:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 8007d78:	1af3      	subs	r3, r6, r3
        offset = 0;
 8007d7a:	2700      	movs	r7, #0
        rem_len = (u16_t)(rem_len - qlen);
 8007d7c:	b29e      	uxth	r6, r3
      } while (rem_len > 0);
 8007d7e:	2e00      	cmp	r6, #0
 8007d80:	d1c1      	bne.n	8007d06 <pbuf_alloc+0x46>
 8007d82:	e7df      	b.n	8007d44 <pbuf_alloc+0x84>
 8007d84:	4604      	mov	r4, r0
 8007d86:	e7f7      	b.n	8007d78 <pbuf_alloc+0xb8>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007d88:	1cc3      	adds	r3, r0, #3
 8007d8a:	1cca      	adds	r2, r1, #3
 8007d8c:	f023 0303 	bic.w	r3, r3, #3
 8007d90:	f022 0203 	bic.w	r2, r2, #3
 8007d94:	4413      	add	r3, r2
 8007d96:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007d98:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007d9c:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007d9e:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007da0:	d3cf      	bcc.n	8007d42 <pbuf_alloc+0x82>
 8007da2:	4282      	cmp	r2, r0
 8007da4:	d8cd      	bhi.n	8007d42 <pbuf_alloc+0x82>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007da6:	f7ff fb63 	bl	8007470 <mem_malloc>
      if (p == NULL) {
 8007daa:	4604      	mov	r4, r0
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d0c9      	beq.n	8007d44 <pbuf_alloc+0x84>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007db0:	4405      	add	r5, r0
  p->next = NULL;
 8007db2:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 8007db4:	8106      	strh	r6, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007db6:	3513      	adds	r5, #19
  p->next = NULL;
 8007db8:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 8007dba:	4b08      	ldr	r3, [pc, #32]	@ (8007ddc <pbuf_alloc+0x11c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007dbc:	f025 0503 	bic.w	r5, r5, #3
  p->len = len;
 8007dc0:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 8007dc2:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 8007dc4:	6045      	str	r5, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007dc6:	e7bd      	b.n	8007d44 <pbuf_alloc+0x84>
 8007dc8:	0800ff9b 	.word	0x0800ff9b
 8007dcc:	08010044 	.word	0x08010044
 8007dd0:	0800f15a 	.word	0x0800f15a
 8007dd4:	200333f8 	.word	0x200333f8
 8007dd8:	08007ad1 	.word	0x08007ad1
 8007ddc:	00010080 	.word	0x00010080
 8007de0:	00010082 	.word	0x00010082

08007de4 <pbuf_realloc>:
{
 8007de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de8:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007dea:	4604      	mov	r4, r0
 8007dec:	b930      	cbnz	r0, 8007dfc <pbuf_realloc+0x18>
 8007dee:	4b24      	ldr	r3, [pc, #144]	@ (8007e80 <pbuf_realloc+0x9c>)
 8007df0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007df4:	4923      	ldr	r1, [pc, #140]	@ (8007e84 <pbuf_realloc+0xa0>)
 8007df6:	4824      	ldr	r0, [pc, #144]	@ (8007e88 <pbuf_realloc+0xa4>)
 8007df8:	f006 fade 	bl	800e3b8 <iprintf>
  if (new_len >= p->tot_len) {
 8007dfc:	8927      	ldrh	r7, [r4, #8]
 8007dfe:	42b7      	cmp	r7, r6
 8007e00:	d93c      	bls.n	8007e7c <pbuf_realloc+0x98>
 8007e02:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007e04:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8007e80 <pbuf_realloc+0x9c>
 8007e08:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007e90 <pbuf_realloc+0xac>
 8007e0c:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8007e88 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 8007e10:	8962      	ldrh	r2, [r4, #10]
 8007e12:	42aa      	cmp	r2, r5
 8007e14:	d319      	bcc.n	8007e4a <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007e16:	7b23      	ldrb	r3, [r4, #12]
 8007e18:	0719      	lsls	r1, r3, #28
 8007e1a:	d127      	bne.n	8007e6c <pbuf_realloc+0x88>
 8007e1c:	42aa      	cmp	r2, r5
 8007e1e:	d025      	beq.n	8007e6c <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007e20:	7b63      	ldrb	r3, [r4, #13]
 8007e22:	079b      	lsls	r3, r3, #30
 8007e24:	d422      	bmi.n	8007e6c <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007e26:	6861      	ldr	r1, [r4, #4]
 8007e28:	4620      	mov	r0, r4
 8007e2a:	1b09      	subs	r1, r1, r4
 8007e2c:	4429      	add	r1, r5
 8007e2e:	b289      	uxth	r1, r1
 8007e30:	f7ff fa68 	bl	8007304 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007e34:	4604      	mov	r4, r0
 8007e36:	b9c8      	cbnz	r0, 8007e6c <pbuf_realloc+0x88>
 8007e38:	4b11      	ldr	r3, [pc, #68]	@ (8007e80 <pbuf_realloc+0x9c>)
 8007e3a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8007e3e:	4913      	ldr	r1, [pc, #76]	@ (8007e8c <pbuf_realloc+0xa8>)
 8007e40:	4811      	ldr	r0, [pc, #68]	@ (8007e88 <pbuf_realloc+0xa4>)
 8007e42:	f006 fab9 	bl	800e3b8 <iprintf>
  q->len = rem_len;
 8007e46:	8164      	strh	r4, [r4, #10]
 8007e48:	deff      	udf	#255	@ 0xff
    rem_len = (u16_t)(rem_len - q->len);
 8007e4a:	1aaa      	subs	r2, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007e4c:	1bf3      	subs	r3, r6, r7
    rem_len = (u16_t)(rem_len - q->len);
 8007e4e:	b295      	uxth	r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007e50:	8922      	ldrh	r2, [r4, #8]
 8007e52:	4413      	add	r3, r2
 8007e54:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8007e56:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007e58:	2c00      	cmp	r4, #0
 8007e5a:	d1d9      	bne.n	8007e10 <pbuf_realloc+0x2c>
 8007e5c:	4643      	mov	r3, r8
 8007e5e:	f240 12af 	movw	r2, #431	@ 0x1af
 8007e62:	4651      	mov	r1, sl
 8007e64:	4648      	mov	r0, r9
 8007e66:	f006 faa7 	bl	800e3b8 <iprintf>
 8007e6a:	e7d1      	b.n	8007e10 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 8007e6c:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8007e6e:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8007e70:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8007e72:	b108      	cbz	r0, 8007e78 <pbuf_realloc+0x94>
    pbuf_free(q->next);
 8007e74:	f7ff feba 	bl	8007bec <pbuf_free>
  q->next = NULL;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	6023      	str	r3, [r4, #0]
}
 8007e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e80:	0800ff9b 	.word	0x0800ff9b
 8007e84:	0801005f 	.word	0x0801005f
 8007e88:	0800f15a 	.word	0x0800f15a
 8007e8c:	0801008f 	.word	0x0801008f
 8007e90:	08010077 	.word	0x08010077

08007e94 <pbuf_clen>:
  while (p != NULL) {
 8007e94:	2300      	movs	r3, #0
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	b908      	cbnz	r0, 8007e9e <pbuf_clen+0xa>
}
 8007e9a:	b298      	uxth	r0, r3
 8007e9c:	4770      	bx	lr
    p = p->next;
 8007e9e:	6800      	ldr	r0, [r0, #0]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	e7f8      	b.n	8007e96 <pbuf_clen+0x2>

08007ea4 <pbuf_ref>:
{
 8007ea4:	b510      	push	{r4, lr}
  if (p != NULL) {
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	b188      	cbz	r0, 8007ece <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007eaa:	f005 fd91 	bl	800d9d0 <sys_arch_protect>
 8007eae:	7ba3      	ldrb	r3, [r4, #14]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	73a3      	strb	r3, [r4, #14]
 8007eb4:	f005 fd98 	bl	800d9e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007eb8:	7ba3      	ldrb	r3, [r4, #14]
 8007eba:	b943      	cbnz	r3, 8007ece <pbuf_ref+0x2a>
 8007ebc:	4b04      	ldr	r3, [pc, #16]	@ (8007ed0 <pbuf_ref+0x2c>)
 8007ebe:	f240 3242 	movw	r2, #834	@ 0x342
 8007ec2:	4904      	ldr	r1, [pc, #16]	@ (8007ed4 <pbuf_ref+0x30>)
 8007ec4:	4804      	ldr	r0, [pc, #16]	@ (8007ed8 <pbuf_ref+0x34>)
}
 8007ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007eca:	f006 ba75 	b.w	800e3b8 <iprintf>
}
 8007ece:	bd10      	pop	{r4, pc}
 8007ed0:	0800ff9b 	.word	0x0800ff9b
 8007ed4:	080100ab 	.word	0x080100ab
 8007ed8:	0800f15a 	.word	0x0800f15a

08007edc <pbuf_cat>:
{
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	460d      	mov	r5, r1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	b100      	cbz	r0, 8007ee6 <pbuf_cat+0xa>
 8007ee4:	b961      	cbnz	r1, 8007f00 <pbuf_cat+0x24>
 8007ee6:	4b15      	ldr	r3, [pc, #84]	@ (8007f3c <pbuf_cat+0x60>)
 8007ee8:	f240 3259 	movw	r2, #857	@ 0x359
 8007eec:	4914      	ldr	r1, [pc, #80]	@ (8007f40 <pbuf_cat+0x64>)
 8007eee:	4815      	ldr	r0, [pc, #84]	@ (8007f44 <pbuf_cat+0x68>)
}
 8007ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007ef4:	f006 ba60 	b.w	800e3b8 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007ef8:	8929      	ldrh	r1, [r5, #8]
 8007efa:	440b      	add	r3, r1
 8007efc:	8123      	strh	r3, [r4, #8]
 8007efe:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8007f00:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007f02:	8923      	ldrh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	d1f7      	bne.n	8007ef8 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007f08:	8962      	ldrh	r2, [r4, #10]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d00f      	beq.n	8007f2e <pbuf_cat+0x52>
 8007f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f3c <pbuf_cat+0x60>)
 8007f10:	f240 3262 	movw	r2, #866	@ 0x362
 8007f14:	490c      	ldr	r1, [pc, #48]	@ (8007f48 <pbuf_cat+0x6c>)
 8007f16:	480b      	ldr	r0, [pc, #44]	@ (8007f44 <pbuf_cat+0x68>)
 8007f18:	f006 fa4e 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	b133      	cbz	r3, 8007f2e <pbuf_cat+0x52>
 8007f20:	4b06      	ldr	r3, [pc, #24]	@ (8007f3c <pbuf_cat+0x60>)
 8007f22:	f240 3263 	movw	r2, #867	@ 0x363
 8007f26:	4909      	ldr	r1, [pc, #36]	@ (8007f4c <pbuf_cat+0x70>)
 8007f28:	4806      	ldr	r0, [pc, #24]	@ (8007f44 <pbuf_cat+0x68>)
 8007f2a:	f006 fa45 	bl	800e3b8 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007f2e:	892a      	ldrh	r2, [r5, #8]
 8007f30:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8007f32:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007f34:	4413      	add	r3, r2
 8007f36:	8123      	strh	r3, [r4, #8]
}
 8007f38:	bd70      	pop	{r4, r5, r6, pc}
 8007f3a:	bf00      	nop
 8007f3c:	0800ff9b 	.word	0x0800ff9b
 8007f40:	080100bd 	.word	0x080100bd
 8007f44:	0800f15a 	.word	0x0800f15a
 8007f48:	080100f2 	.word	0x080100f2
 8007f4c:	0801011f 	.word	0x0801011f

08007f50 <pbuf_chain>:
{
 8007f50:	b510      	push	{r4, lr}
 8007f52:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8007f54:	f7ff ffc2 	bl	8007edc <pbuf_cat>
  pbuf_ref(t);
 8007f58:	4620      	mov	r0, r4
}
 8007f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 8007f5e:	f7ff bfa1 	b.w	8007ea4 <pbuf_ref>
	...

08007f64 <pbuf_copy>:
{
 8007f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f68:	460c      	mov	r4, r1
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	b120      	cbz	r0, 8007f78 <pbuf_copy+0x14>
 8007f6e:	b119      	cbz	r1, 8007f78 <pbuf_copy+0x14>
 8007f70:	8902      	ldrh	r2, [r0, #8]
 8007f72:	890b      	ldrh	r3, [r1, #8]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d20a      	bcs.n	8007f8e <pbuf_copy+0x2a>
 8007f78:	4b34      	ldr	r3, [pc, #208]	@ (800804c <pbuf_copy+0xe8>)
 8007f7a:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007f7e:	4934      	ldr	r1, [pc, #208]	@ (8008050 <pbuf_copy+0xec>)
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007f80:	4834      	ldr	r0, [pc, #208]	@ (8008054 <pbuf_copy+0xf0>)
 8007f82:	f006 fa19 	bl	800e3b8 <iprintf>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007f86:	f06f 000f 	mvn.w	r0, #15
}
 8007f8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 8007f8e:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007f90:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 800804c <pbuf_copy+0xe8>
 8007f94:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 8008064 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 8007f98:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007f9a:	f8df a0b8 	ldr.w	sl, [pc, #184]	@ 8008054 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007f9e:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 8007fa2:	8963      	ldrh	r3, [r4, #10]
 8007fa4:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007fa8:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007faa:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007fac:	6861      	ldr	r1, [r4, #4]
 8007fae:	4438      	add	r0, r7
 8007fb0:	4598      	cmp	r8, r3
 8007fb2:	4431      	add	r1, r6
 8007fb4:	bf28      	it	cs
 8007fb6:	4698      	movcs	r8, r3
 8007fb8:	4642      	mov	r2, r8
    offset_to += len;
 8007fba:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007fbc:	f006 fbd1 	bl	800e762 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007fc0:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8007fc2:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007fc4:	42bb      	cmp	r3, r7
 8007fc6:	d206      	bcs.n	8007fd6 <pbuf_copy+0x72>
 8007fc8:	464b      	mov	r3, r9
 8007fca:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007fce:	4659      	mov	r1, fp
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	f006 f9f1 	bl	800e3b8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007fd6:	8963      	ldrh	r3, [r4, #10]
 8007fd8:	42b3      	cmp	r3, r6
 8007fda:	d206      	bcs.n	8007fea <pbuf_copy+0x86>
 8007fdc:	464b      	mov	r3, r9
 8007fde:	f240 32da 	movw	r2, #986	@ 0x3da
 8007fe2:	491d      	ldr	r1, [pc, #116]	@ (8008058 <pbuf_copy+0xf4>)
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	f006 f9e7 	bl	800e3b8 <iprintf>
    if (offset_from >= p_from->len) {
 8007fea:	8963      	ldrh	r3, [r4, #10]
 8007fec:	42b3      	cmp	r3, r6
    if (offset_to == p_to->len) {
 8007fee:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8007ff0:	bf9c      	itt	ls
 8007ff2:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8007ff4:	2600      	movls	r6, #0
    if (offset_to == p_to->len) {
 8007ff6:	42bb      	cmp	r3, r7
 8007ff8:	d108      	bne.n	800800c <pbuf_copy+0xa8>
      p_to = p_to->next;
 8007ffa:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007ffc:	b92d      	cbnz	r5, 800800a <pbuf_copy+0xa6>
 8007ffe:	b314      	cbz	r4, 8008046 <pbuf_copy+0xe2>
 8008000:	4b12      	ldr	r3, [pc, #72]	@ (800804c <pbuf_copy+0xe8>)
 8008002:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8008006:	4915      	ldr	r1, [pc, #84]	@ (800805c <pbuf_copy+0xf8>)
 8008008:	e7ba      	b.n	8007f80 <pbuf_copy+0x1c>
      offset_to = 0;
 800800a:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800800c:	b17c      	cbz	r4, 800802e <pbuf_copy+0xca>
 800800e:	8962      	ldrh	r2, [r4, #10]
 8008010:	8923      	ldrh	r3, [r4, #8]
 8008012:	429a      	cmp	r2, r3
 8008014:	d10b      	bne.n	800802e <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	b14b      	cbz	r3, 800802e <pbuf_copy+0xca>
 800801a:	4b0c      	ldr	r3, [pc, #48]	@ (800804c <pbuf_copy+0xe8>)
 800801c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008020:	490f      	ldr	r1, [pc, #60]	@ (8008060 <pbuf_copy+0xfc>)
 8008022:	480c      	ldr	r0, [pc, #48]	@ (8008054 <pbuf_copy+0xf0>)
 8008024:	f006 f9c8 	bl	800e3b8 <iprintf>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008028:	f06f 0005 	mvn.w	r0, #5
 800802c:	e7ad      	b.n	8007f8a <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800802e:	896a      	ldrh	r2, [r5, #10]
 8008030:	892b      	ldrh	r3, [r5, #8]
 8008032:	429a      	cmp	r2, r3
 8008034:	d105      	bne.n	8008042 <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008036:	682b      	ldr	r3, [r5, #0]
 8008038:	b11b      	cbz	r3, 8008042 <pbuf_copy+0xde>
 800803a:	4b04      	ldr	r3, [pc, #16]	@ (800804c <pbuf_copy+0xe8>)
 800803c:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008040:	e7ee      	b.n	8008020 <pbuf_copy+0xbc>
  } while (p_from);
 8008042:	2c00      	cmp	r4, #0
 8008044:	d1ab      	bne.n	8007f9e <pbuf_copy+0x3a>
  return ERR_OK;
 8008046:	4620      	mov	r0, r4
 8008048:	e79f      	b.n	8007f8a <pbuf_copy+0x26>
 800804a:	bf00      	nop
 800804c:	0800ff9b 	.word	0x0800ff9b
 8008050:	0801012f 	.word	0x0801012f
 8008054:	0800f15a 	.word	0x0800f15a
 8008058:	08010176 	.word	0x08010176
 800805c:	08010191 	.word	0x08010191
 8008060:	0801019e 	.word	0x0801019e
 8008064:	0801015f 	.word	0x0801015f

08008068 <pbuf_copy_partial>:
{
 8008068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806c:	460f      	mov	r7, r1
 800806e:	4690      	mov	r8, r2
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008070:	4605      	mov	r5, r0
 8008072:	b950      	cbnz	r0, 800808a <pbuf_copy_partial+0x22>
 8008074:	4b19      	ldr	r3, [pc, #100]	@ (80080dc <pbuf_copy_partial+0x74>)
 8008076:	f240 420a 	movw	r2, #1034	@ 0x40a
 800807a:	4919      	ldr	r1, [pc, #100]	@ (80080e0 <pbuf_copy_partial+0x78>)
 800807c:	2600      	movs	r6, #0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800807e:	4819      	ldr	r0, [pc, #100]	@ (80080e4 <pbuf_copy_partial+0x7c>)
 8008080:	f006 f99a 	bl	800e3b8 <iprintf>
}
 8008084:	4630      	mov	r0, r6
 8008086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800808a:	bb21      	cbnz	r1, 80080d6 <pbuf_copy_partial+0x6e>
 800808c:	4b13      	ldr	r3, [pc, #76]	@ (80080dc <pbuf_copy_partial+0x74>)
 800808e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8008092:	4915      	ldr	r1, [pc, #84]	@ (80080e8 <pbuf_copy_partial+0x80>)
 8008094:	e7f2      	b.n	800807c <pbuf_copy_partial+0x14>
    if ((offset != 0) && (offset >= p->len)) {
 8008096:	896c      	ldrh	r4, [r5, #10]
 8008098:	b153      	cbz	r3, 80080b0 <pbuf_copy_partial+0x48>
 800809a:	429c      	cmp	r4, r3
 800809c:	d808      	bhi.n	80080b0 <pbuf_copy_partial+0x48>
      offset = (u16_t)(offset - p->len);
 800809e:	1b1b      	subs	r3, r3, r4
 80080a0:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80080a2:	682d      	ldr	r5, [r5, #0]
 80080a4:	f1b8 0f00 	cmp.w	r8, #0
 80080a8:	d0ec      	beq.n	8008084 <pbuf_copy_partial+0x1c>
 80080aa:	2d00      	cmp	r5, #0
 80080ac:	d1f3      	bne.n	8008096 <pbuf_copy_partial+0x2e>
 80080ae:	e7e9      	b.n	8008084 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 80080b0:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80080b2:	6869      	ldr	r1, [r5, #4]
 80080b4:	19b8      	adds	r0, r7, r6
 80080b6:	b2a4      	uxth	r4, r4
 80080b8:	4419      	add	r1, r3
 80080ba:	4544      	cmp	r4, r8
 80080bc:	bf28      	it	cs
 80080be:	4644      	movcs	r4, r8
 80080c0:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80080c2:	4426      	add	r6, r4
      len = (u16_t)(len - buf_copy_len);
 80080c4:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80080c8:	f006 fb4b 	bl	800e762 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80080cc:	b2b6      	uxth	r6, r6
      offset = 0;
 80080ce:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 80080d0:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 80080d4:	e7e5      	b.n	80080a2 <pbuf_copy_partial+0x3a>
  u16_t left = 0;
 80080d6:	2600      	movs	r6, #0
 80080d8:	e7e4      	b.n	80080a4 <pbuf_copy_partial+0x3c>
 80080da:	bf00      	nop
 80080dc:	0800ff9b 	.word	0x0800ff9b
 80080e0:	080101c8 	.word	0x080101c8
 80080e4:	0800f15a 	.word	0x0800f15a
 80080e8:	080101e7 	.word	0x080101e7

080080ec <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80080ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	4688      	mov	r8, r1
 80080f2:	4615      	mov	r5, r2
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80080f4:	4604      	mov	r4, r0
 80080f6:	b958      	cbnz	r0, 8008110 <pbuf_take+0x24>
 80080f8:	4b25      	ldr	r3, [pc, #148]	@ (8008190 <pbuf_take+0xa4>)
 80080fa:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 80080fe:	4925      	ldr	r1, [pc, #148]	@ (8008194 <pbuf_take+0xa8>)
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008100:	4825      	ldr	r0, [pc, #148]	@ (8008198 <pbuf_take+0xac>)
 8008102:	f006 f959 	bl	800e3b8 <iprintf>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008106:	f06f 000f 	mvn.w	r0, #15
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
}
 800810a:	b003      	add	sp, #12
 800810c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008110:	b921      	cbnz	r1, 800811c <pbuf_take+0x30>
 8008112:	4b1f      	ldr	r3, [pc, #124]	@ (8008190 <pbuf_take+0xa4>)
 8008114:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8008118:	4920      	ldr	r1, [pc, #128]	@ (800819c <pbuf_take+0xb0>)
 800811a:	e7f1      	b.n	8008100 <pbuf_take+0x14>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800811c:	8903      	ldrh	r3, [r0, #8]
 800811e:	4293      	cmp	r3, r2
 8008120:	d225      	bcs.n	800816e <pbuf_take+0x82>
 8008122:	4b1b      	ldr	r3, [pc, #108]	@ (8008190 <pbuf_take+0xa4>)
 8008124:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8008128:	491d      	ldr	r1, [pc, #116]	@ (80081a0 <pbuf_take+0xb4>)
 800812a:	481b      	ldr	r0, [pc, #108]	@ (8008198 <pbuf_take+0xac>)
 800812c:	f006 f944 	bl	800e3b8 <iprintf>
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	e7e9      	b.n	800810a <pbuf_take+0x1e>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8008136:	b934      	cbnz	r4, 8008146 <pbuf_take+0x5a>
 8008138:	464b      	mov	r3, r9
 800813a:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800813e:	4651      	mov	r1, sl
 8008140:	4658      	mov	r0, fp
 8008142:	f006 f939 	bl	800e3b8 <iprintf>
    if (buf_copy_len > p->len) {
 8008146:	8962      	ldrh	r2, [r4, #10]
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008148:	eb08 0106 	add.w	r1, r8, r6
 800814c:	6860      	ldr	r0, [r4, #4]
 800814e:	42ba      	cmp	r2, r7
 8008150:	bf28      	it	cs
 8008152:	463a      	movcs	r2, r7
 8008154:	9201      	str	r2, [sp, #4]
 8008156:	f006 fb04 	bl	800e762 <memcpy>
    total_copy_len -= buf_copy_len;
 800815a:	9a01      	ldr	r2, [sp, #4]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800815c:	6824      	ldr	r4, [r4, #0]
    total_copy_len -= buf_copy_len;
 800815e:	1abf      	subs	r7, r7, r2
    copied_total += buf_copy_len;
 8008160:	4416      	add	r6, r2
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008162:	2f00      	cmp	r7, #0
 8008164:	d1e7      	bne.n	8008136 <pbuf_take+0x4a>
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008166:	42ae      	cmp	r6, r5
 8008168:	d10a      	bne.n	8008180 <pbuf_take+0x94>
  return ERR_OK;
 800816a:	2000      	movs	r0, #0
 800816c:	e7cd      	b.n	800810a <pbuf_take+0x1e>
  size_t total_copy_len = len;
 800816e:	4617      	mov	r7, r2
  size_t copied_total = 0;
 8008170:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8008172:	f8df 901c 	ldr.w	r9, [pc, #28]	@ 8008190 <pbuf_take+0xa4>
 8008176:	f8df a030 	ldr.w	sl, [pc, #48]	@ 80081a8 <pbuf_take+0xbc>
 800817a:	f8df b01c 	ldr.w	fp, [pc, #28]	@ 8008198 <pbuf_take+0xac>
 800817e:	e7f0      	b.n	8008162 <pbuf_take+0x76>
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008180:	4b03      	ldr	r3, [pc, #12]	@ (8008190 <pbuf_take+0xa4>)
 8008182:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8008186:	4907      	ldr	r1, [pc, #28]	@ (80081a4 <pbuf_take+0xb8>)
 8008188:	4803      	ldr	r0, [pc, #12]	@ (8008198 <pbuf_take+0xac>)
 800818a:	f006 f915 	bl	800e3b8 <iprintf>
 800818e:	e7ec      	b.n	800816a <pbuf_take+0x7e>
 8008190:	0800ff9b 	.word	0x0800ff9b
 8008194:	0801020a 	.word	0x0801020a
 8008198:	0800f15a 	.word	0x0800f15a
 800819c:	08010221 	.word	0x08010221
 80081a0:	0801023c 	.word	0x0801023c
 80081a4:	08010274 	.word	0x08010274
 80081a8:	0801025c 	.word	0x0801025c

080081ac <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 80081ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80081b0:	460f      	mov	r7, r1
 80081b2:	4614      	mov	r4, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80081b4:	4619      	mov	r1, r3
 80081b6:	f10d 0206 	add.w	r2, sp, #6
 80081ba:	f7ff fc49 	bl	8007a50 <pbuf_skip_const>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 80081be:	4606      	mov	r6, r0
 80081c0:	b338      	cbz	r0, 8008212 <pbuf_take_at+0x66>
 80081c2:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 80081c6:	8902      	ldrh	r2, [r0, #8]
 80081c8:	eb08 0304 	add.w	r3, r8, r4
 80081cc:	429a      	cmp	r2, r3
 80081ce:	db20      	blt.n	8008212 <pbuf_take_at+0x66>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 80081d0:	8943      	ldrh	r3, [r0, #10]
 80081d2:	4543      	cmp	r3, r8
 80081d4:	d806      	bhi.n	80081e4 <pbuf_take_at+0x38>
 80081d6:	4b12      	ldr	r3, [pc, #72]	@ (8008220 <pbuf_take_at+0x74>)
 80081d8:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80081dc:	4911      	ldr	r1, [pc, #68]	@ (8008224 <pbuf_take_at+0x78>)
 80081de:	4812      	ldr	r0, [pc, #72]	@ (8008228 <pbuf_take_at+0x7c>)
 80081e0:	f006 f8ea 	bl	800e3b8 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80081e4:	8975      	ldrh	r5, [r6, #10]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80081e6:	4639      	mov	r1, r7
 80081e8:	6870      	ldr	r0, [r6, #4]
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80081ea:	eba5 0508 	sub.w	r5, r5, r8
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80081ee:	4440      	add	r0, r8
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80081f0:	42ac      	cmp	r4, r5
 80081f2:	bfcc      	ite	gt
 80081f4:	b2ad      	uxthgt	r5, r5
 80081f6:	4625      	movle	r5, r4
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80081f8:	462a      	mov	r2, r5
 80081fa:	f006 fab2 	bl	800e762 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 80081fe:	1b62      	subs	r2, r4, r5
 8008200:	b292      	uxth	r2, r2
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
 8008202:	b15a      	cbz	r2, 800821c <pbuf_take_at+0x70>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8008204:	1979      	adds	r1, r7, r5
 8008206:	6830      	ldr	r0, [r6, #0]
    }
    return ERR_OK;
  }
  return ERR_MEM;
}
 8008208:	b002      	add	sp, #8
 800820a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 800820e:	f7ff bf6d 	b.w	80080ec <pbuf_take>
  return ERR_MEM;
 8008212:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008216:	b002      	add	sp, #8
 8008218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 800821c:	4610      	mov	r0, r2
 800821e:	e7fa      	b.n	8008216 <pbuf_take_at+0x6a>
 8008220:	0800ff9b 	.word	0x0800ff9b
 8008224:	0801028a 	.word	0x0801028a
 8008228:	0800f15a 	.word	0x0800f15a

0800822c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008230:	460a      	mov	r2, r1
 8008232:	8929      	ldrh	r1, [r5, #8]
 8008234:	f7ff fd44 	bl	8007cc0 <pbuf_alloc>
  if (q == NULL) {
 8008238:	4604      	mov	r4, r0
 800823a:	b150      	cbz	r0, 8008252 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800823c:	4629      	mov	r1, r5
 800823e:	f7ff fe91 	bl	8007f64 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008242:	b130      	cbz	r0, 8008252 <pbuf_clone+0x26>
 8008244:	4b04      	ldr	r3, [pc, #16]	@ (8008258 <pbuf_clone+0x2c>)
 8008246:	f240 5224 	movw	r2, #1316	@ 0x524
 800824a:	4904      	ldr	r1, [pc, #16]	@ (800825c <pbuf_clone+0x30>)
 800824c:	4804      	ldr	r0, [pc, #16]	@ (8008260 <pbuf_clone+0x34>)
 800824e:	f006 f8b3 	bl	800e3b8 <iprintf>
  return q;
}
 8008252:	4620      	mov	r0, r4
 8008254:	bd38      	pop	{r3, r4, r5, pc}
 8008256:	bf00      	nop
 8008258:	0800ff9b 	.word	0x0800ff9b
 800825c:	080102a1 	.word	0x080102a1
 8008260:	0800f15a 	.word	0x0800f15a

08008264 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8008264:	b513      	push	{r0, r1, r4, lr}
 8008266:	4614      	mov	r4, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8008268:	f10d 0206 	add.w	r2, sp, #6
 800826c:	f7ff fbf0 	bl	8007a50 <pbuf_skip_const>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008270:	b130      	cbz	r0, 8008280 <pbuf_put_at+0x1c>
 8008272:	8942      	ldrh	r2, [r0, #10]
 8008274:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008278:	429a      	cmp	r2, r3
    ((u8_t *)q->payload)[q_idx] = data;
 800827a:	bf84      	itt	hi
 800827c:	6842      	ldrhi	r2, [r0, #4]
 800827e:	54d4      	strbhi	r4, [r2, r3]
  }
}
 8008280:	b002      	add	sp, #8
 8008282:	bd10      	pop	{r4, pc}

08008284 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008286:	4c11      	ldr	r4, [pc, #68]	@ (80082cc <tcp_new_port+0x48>)
 8008288:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800828c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8008290:	8823      	ldrh	r3, [r4, #0]
  tcp_port++;
 8008292:	3301      	adds	r3, #1
 8008294:	4d0e      	ldr	r5, [pc, #56]	@ (80082d0 <tcp_new_port+0x4c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008296:	2200      	movs	r2, #0
  tcp_port++;
 8008298:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800829a:	42b3      	cmp	r3, r6
 800829c:	bf08      	it	eq
 800829e:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80082a2:	f855 1b04 	ldr.w	r1, [r5], #4
 80082a6:	6809      	ldr	r1, [r1, #0]
 80082a8:	b929      	cbnz	r1, 80082b6 <tcp_new_port+0x32>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80082aa:	3201      	adds	r2, #1
 80082ac:	b2d2      	uxtb	r2, r2
 80082ae:	2a04      	cmp	r2, #4
 80082b0:	d1f7      	bne.n	80082a2 <tcp_new_port+0x1e>
 80082b2:	4618      	mov	r0, r3
 80082b4:	e006      	b.n	80082c4 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 80082b6:	8acf      	ldrh	r7, [r1, #22]
 80082b8:	429f      	cmp	r7, r3
 80082ba:	d105      	bne.n	80082c8 <tcp_new_port+0x44>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80082bc:	3801      	subs	r0, #1
 80082be:	b280      	uxth	r0, r0
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d1e6      	bne.n	8008292 <tcp_new_port+0xe>
 80082c4:	8023      	strh	r3, [r4, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 80082c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80082c8:	68c9      	ldr	r1, [r1, #12]
 80082ca:	e7ed      	b.n	80082a8 <tcp_new_port+0x24>
 80082cc:	2000003c 	.word	0x2000003c
 80082d0:	080108d8 	.word	0x080108d8

080082d4 <tcp_close_shutdown_fin>:
{
 80082d4:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80082d6:	4604      	mov	r4, r0
 80082d8:	b930      	cbnz	r0, 80082e8 <tcp_close_shutdown_fin+0x14>
 80082da:	4b13      	ldr	r3, [pc, #76]	@ (8008328 <tcp_close_shutdown_fin+0x54>)
 80082dc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80082e0:	4912      	ldr	r1, [pc, #72]	@ (800832c <tcp_close_shutdown_fin+0x58>)
 80082e2:	4813      	ldr	r0, [pc, #76]	@ (8008330 <tcp_close_shutdown_fin+0x5c>)
 80082e4:	f006 f868 	bl	800e3b8 <iprintf>
  switch (pcb->state) {
 80082e8:	7d23      	ldrb	r3, [r4, #20]
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d003      	beq.n	80082f6 <tcp_close_shutdown_fin+0x22>
 80082ee:	2b07      	cmp	r3, #7
 80082f0:	d00c      	beq.n	800830c <tcp_close_shutdown_fin+0x38>
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d108      	bne.n	8008308 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 80082f6:	4620      	mov	r0, r4
 80082f8:	f003 f8ba 	bl	800b470 <tcp_send_fin>
      if (err == ERR_OK) {
 80082fc:	b960      	cbnz	r0, 8008318 <tcp_close_shutdown_fin+0x44>
  if (err == ERR_OK) {
 80082fe:	2305      	movs	r3, #5
    tcp_output(pcb);
 8008300:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 8008302:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8008304:	f003 fa14 	bl	800b730 <tcp_output>
      return ERR_OK;
 8008308:	2000      	movs	r0, #0
}
 800830a:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800830c:	4620      	mov	r0, r4
 800830e:	f003 f8af 	bl	800b470 <tcp_send_fin>
      if (err == ERR_OK) {
 8008312:	b908      	cbnz	r0, 8008318 <tcp_close_shutdown_fin+0x44>
 8008314:	2309      	movs	r3, #9
 8008316:	e7f3      	b.n	8008300 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d1f6      	bne.n	800830a <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800831c:	8b63      	ldrh	r3, [r4, #26]
 800831e:	f043 0308 	orr.w	r3, r3, #8
 8008322:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8008324:	e7f0      	b.n	8008308 <tcp_close_shutdown_fin+0x34>
 8008326:	bf00      	nop
 8008328:	080102b2 	.word	0x080102b2
 800832c:	080102e1 	.word	0x080102e1
 8008330:	0800f15a 	.word	0x0800f15a

08008334 <tcp_init>:
{
 8008334:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008336:	f005 ff3f 	bl	800e1b8 <rand>
 800833a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800833e:	4b02      	ldr	r3, [pc, #8]	@ (8008348 <tcp_init+0x14>)
 8008340:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008344:	8018      	strh	r0, [r3, #0]
}
 8008346:	bd08      	pop	{r3, pc}
 8008348:	2000003c 	.word	0x2000003c

0800834c <tcp_free>:
{
 800834c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800834e:	7d03      	ldrb	r3, [r0, #20]
{
 8008350:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008352:	2b01      	cmp	r3, #1
 8008354:	d105      	bne.n	8008362 <tcp_free+0x16>
 8008356:	4b06      	ldr	r3, [pc, #24]	@ (8008370 <tcp_free+0x24>)
 8008358:	22d4      	movs	r2, #212	@ 0xd4
 800835a:	4906      	ldr	r1, [pc, #24]	@ (8008374 <tcp_free+0x28>)
 800835c:	4806      	ldr	r0, [pc, #24]	@ (8008378 <tcp_free+0x2c>)
 800835e:	f006 f82b 	bl	800e3b8 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8008362:	4621      	mov	r1, r4
 8008364:	2001      	movs	r0, #1
}
 8008366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800836a:	f7ff b9cf 	b.w	800770c <memp_free>
 800836e:	bf00      	nop
 8008370:	080102b2 	.word	0x080102b2
 8008374:	080102ed 	.word	0x080102ed
 8008378:	0800f15a 	.word	0x0800f15a

0800837c <tcp_bind>:
{
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800837e:	4b23      	ldr	r3, [pc, #140]	@ (800840c <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008380:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8008382:	2900      	cmp	r1, #0
 8008384:	bf14      	ite	ne
 8008386:	460d      	movne	r5, r1
 8008388:	461d      	moveq	r5, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800838a:	b948      	cbnz	r0, 80083a0 <tcp_bind+0x24>
 800838c:	4b20      	ldr	r3, [pc, #128]	@ (8008410 <tcp_bind+0x94>)
 800838e:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8008392:	4920      	ldr	r1, [pc, #128]	@ (8008414 <tcp_bind+0x98>)
 8008394:	4820      	ldr	r0, [pc, #128]	@ (8008418 <tcp_bind+0x9c>)
 8008396:	f006 f80f 	bl	800e3b8 <iprintf>
 800839a:	f06f 000f 	mvn.w	r0, #15
}
 800839e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80083a0:	7d03      	ldrb	r3, [r0, #20]
 80083a2:	b14b      	cbz	r3, 80083b8 <tcp_bind+0x3c>
 80083a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008410 <tcp_bind+0x94>)
 80083a6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80083aa:	491c      	ldr	r1, [pc, #112]	@ (800841c <tcp_bind+0xa0>)
 80083ac:	481a      	ldr	r0, [pc, #104]	@ (8008418 <tcp_bind+0x9c>)
 80083ae:	f006 f803 	bl	800e3b8 <iprintf>
 80083b2:	f06f 0005 	mvn.w	r0, #5
 80083b6:	e7f2      	b.n	800839e <tcp_bind+0x22>
  if (port == 0) {
 80083b8:	b932      	cbnz	r2, 80083c8 <tcp_bind+0x4c>
    port = tcp_new_port();
 80083ba:	f7ff ff63 	bl	8008284 <tcp_new_port>
    if (port == 0) {
 80083be:	4602      	mov	r2, r0
 80083c0:	b950      	cbnz	r0, 80083d8 <tcp_bind+0x5c>
      return ERR_BUF;
 80083c2:	f06f 0001 	mvn.w	r0, #1
 80083c6:	e7ea      	b.n	800839e <tcp_bind+0x22>
 80083c8:	4815      	ldr	r0, [pc, #84]	@ (8008420 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80083ca:	f850 1b04 	ldr.w	r1, [r0], #4
 80083ce:	6809      	ldr	r1, [r1, #0]
 80083d0:	b971      	cbnz	r1, 80083f0 <tcp_bind+0x74>
    for (i = 0; i < max_pcb_list; i++) {
 80083d2:	3301      	adds	r3, #1
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	d1f8      	bne.n	80083ca <tcp_bind+0x4e>
  if (!ip_addr_isany(ipaddr)
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	b103      	cbz	r3, 80083de <tcp_bind+0x62>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80083dc:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80083de:	4b11      	ldr	r3, [pc, #68]	@ (8008424 <tcp_bind+0xa8>)
  pcb->local_port = port;
 80083e0:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	601c      	str	r4, [r3, #0]
 80083e6:	60e2      	str	r2, [r4, #12]
 80083e8:	f003 fc78 	bl	800bcdc <tcp_timer_needed>
  return ERR_OK;
 80083ec:	2000      	movs	r0, #0
 80083ee:	e7d6      	b.n	800839e <tcp_bind+0x22>
        if (cpcb->local_port == port) {
 80083f0:	8ace      	ldrh	r6, [r1, #22]
 80083f2:	4296      	cmp	r6, r2
 80083f4:	d105      	bne.n	8008402 <tcp_bind+0x86>
                (ip_addr_isany(&cpcb->local_ip) ||
 80083f6:	680f      	ldr	r7, [r1, #0]
 80083f8:	b12f      	cbz	r7, 8008406 <tcp_bind+0x8a>
                 ip_addr_isany(ipaddr) ||
 80083fa:	682e      	ldr	r6, [r5, #0]
 80083fc:	b11e      	cbz	r6, 8008406 <tcp_bind+0x8a>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80083fe:	42b7      	cmp	r7, r6
 8008400:	d001      	beq.n	8008406 <tcp_bind+0x8a>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008402:	68c9      	ldr	r1, [r1, #12]
 8008404:	e7e4      	b.n	80083d0 <tcp_bind+0x54>
              return ERR_USE;
 8008406:	f06f 0007 	mvn.w	r0, #7
 800840a:	e7c8      	b.n	800839e <tcp_bind+0x22>
 800840c:	08011968 	.word	0x08011968
 8008410:	080102b2 	.word	0x080102b2
 8008414:	080102fe 	.word	0x080102fe
 8008418:	0800f15a 	.word	0x0800f15a
 800841c:	08010314 	.word	0x08010314
 8008420:	080108d8 	.word	0x080108d8
 8008424:	20033408 	.word	0x20033408

08008428 <tcp_listen_with_backlog_and_err>:
{
 8008428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800842c:	4605      	mov	r5, r0
 800842e:	b968      	cbnz	r0, 800844c <tcp_listen_with_backlog_and_err+0x24>
 8008430:	4b29      	ldr	r3, [pc, #164]	@ (80084d8 <tcp_listen_with_backlog_and_err+0xb0>)
 8008432:	f240 3259 	movw	r2, #857	@ 0x359
 8008436:	4929      	ldr	r1, [pc, #164]	@ (80084dc <tcp_listen_with_backlog_and_err+0xb4>)
  struct tcp_pcb_listen *lpcb = NULL;
 8008438:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800843a:	4829      	ldr	r0, [pc, #164]	@ (80084e0 <tcp_listen_with_backlog_and_err+0xb8>)
 800843c:	f005 ffbc 	bl	800e3b8 <iprintf>
 8008440:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 8008444:	b106      	cbz	r6, 8008448 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 8008446:	7033      	strb	r3, [r6, #0]
}
 8008448:	4620      	mov	r0, r4
 800844a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800844c:	7d07      	ldrb	r7, [r0, #20]
 800844e:	b157      	cbz	r7, 8008466 <tcp_listen_with_backlog_and_err+0x3e>
 8008450:	4b21      	ldr	r3, [pc, #132]	@ (80084d8 <tcp_listen_with_backlog_and_err+0xb0>)
 8008452:	f240 325a 	movw	r2, #858	@ 0x35a
 8008456:	4923      	ldr	r1, [pc, #140]	@ (80084e4 <tcp_listen_with_backlog_and_err+0xbc>)
  struct tcp_pcb_listen *lpcb = NULL;
 8008458:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800845a:	4821      	ldr	r0, [pc, #132]	@ (80084e0 <tcp_listen_with_backlog_and_err+0xb8>)
 800845c:	f005 ffac 	bl	800e3b8 <iprintf>
 8008460:	f06f 030e 	mvn.w	r3, #14
 8008464:	e7ee      	b.n	8008444 <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008466:	2002      	movs	r0, #2
 8008468:	f7ff f922 	bl	80076b0 <memp_malloc>
  if (lpcb == NULL) {
 800846c:	4604      	mov	r4, r0
 800846e:	2800      	cmp	r0, #0
 8008470:	d02f      	beq.n	80084d2 <tcp_listen_with_backlog_and_err+0xaa>
  lpcb->callback_arg = pcb->callback_arg;
 8008472:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 8008474:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8008476:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008478:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800847a:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800847c:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800847e:	7d6a      	ldrb	r2, [r5, #21]
 8008480:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008482:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008484:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8008486:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8008488:	7aea      	ldrb	r2, [r5, #11]
 800848a:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800848c:	7aaa      	ldrb	r2, [r5, #10]
 800848e:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008490:	682a      	ldr	r2, [r5, #0]
 8008492:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8008494:	b13b      	cbz	r3, 80084a6 <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008496:	4a14      	ldr	r2, [pc, #80]	@ (80084e8 <tcp_listen_with_backlog_and_err+0xc0>)
 8008498:	6813      	ldr	r3, [r2, #0]
 800849a:	42ab      	cmp	r3, r5
 800849c:	d111      	bne.n	80084c2 <tcp_listen_with_backlog_and_err+0x9a>
 800849e:	68eb      	ldr	r3, [r5, #12]
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	2300      	movs	r3, #0
 80084a4:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 80084a6:	4628      	mov	r0, r5
 80084a8:	f7ff ff50 	bl	800834c <tcp_free>
  lpcb->accept = tcp_accept_null;
 80084ac:	4b0f      	ldr	r3, [pc, #60]	@ (80084ec <tcp_listen_with_backlog_and_err+0xc4>)
 80084ae:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80084b0:	4b0f      	ldr	r3, [pc, #60]	@ (80084f0 <tcp_listen_with_backlog_and_err+0xc8>)
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	601c      	str	r4, [r3, #0]
 80084b6:	60e2      	str	r2, [r4, #12]
 80084b8:	f003 fc10 	bl	800bcdc <tcp_timer_needed>
  res = ERR_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	e7c1      	b.n	8008444 <tcp_listen_with_backlog_and_err+0x1c>
 80084c0:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0ed      	beq.n	80084a2 <tcp_listen_with_backlog_and_err+0x7a>
 80084c6:	68da      	ldr	r2, [r3, #12]
 80084c8:	42aa      	cmp	r2, r5
 80084ca:	d1f9      	bne.n	80084c0 <tcp_listen_with_backlog_and_err+0x98>
 80084cc:	68ea      	ldr	r2, [r5, #12]
 80084ce:	60da      	str	r2, [r3, #12]
 80084d0:	e7e7      	b.n	80084a2 <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 80084d2:	f04f 33ff 	mov.w	r3, #4294967295
 80084d6:	e7b5      	b.n	8008444 <tcp_listen_with_backlog_and_err+0x1c>
 80084d8:	080102b2 	.word	0x080102b2
 80084dc:	0801033c 	.word	0x0801033c
 80084e0:	0800f15a 	.word	0x0800f15a
 80084e4:	08010369 	.word	0x08010369
 80084e8:	20033408 	.word	0x20033408
 80084ec:	08008a05 	.word	0x08008a05
 80084f0:	20033404 	.word	0x20033404

080084f4 <tcp_update_rcv_ann_wnd>:
{
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80084f6:	4604      	mov	r4, r0
 80084f8:	b930      	cbnz	r0, 8008508 <tcp_update_rcv_ann_wnd+0x14>
 80084fa:	4b15      	ldr	r3, [pc, #84]	@ (8008550 <tcp_update_rcv_ann_wnd+0x5c>)
 80084fc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008500:	4914      	ldr	r1, [pc, #80]	@ (8008554 <tcp_update_rcv_ann_wnd+0x60>)
 8008502:	4815      	ldr	r0, [pc, #84]	@ (8008558 <tcp_update_rcv_ann_wnd+0x64>)
 8008504:	f005 ff58 	bl	800e3b8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008508:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800850a:	f640 3624 	movw	r6, #2852	@ 0xb24
 800850e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008510:	8e67      	ldrh	r7, [r4, #50]	@ 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008512:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008514:	1a58      	subs	r0, r3, r1
 8008516:	42b7      	cmp	r7, r6
 8008518:	4410      	add	r0, r2
 800851a:	bf94      	ite	ls
 800851c:	1bc5      	subls	r5, r0, r7
 800851e:	1b85      	subhi	r5, r0, r6
 8008520:	2d00      	cmp	r5, #0
 8008522:	da0f      	bge.n	8008544 <tcp_update_rcv_ann_wnd+0x50>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008524:	1a53      	subs	r3, r2, r1
 8008526:	2b00      	cmp	r3, #0
 8008528:	dc0e      	bgt.n	8008548 <tcp_update_rcv_ann_wnd+0x54>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800852a:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800852c:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8008530:	d306      	bcc.n	8008540 <tcp_update_rcv_ann_wnd+0x4c>
 8008532:	4b07      	ldr	r3, [pc, #28]	@ (8008550 <tcp_update_rcv_ann_wnd+0x5c>)
 8008534:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8008538:	4908      	ldr	r1, [pc, #32]	@ (800855c <tcp_update_rcv_ann_wnd+0x68>)
 800853a:	4807      	ldr	r0, [pc, #28]	@ (8008558 <tcp_update_rcv_ann_wnd+0x64>)
 800853c:	f005 ff3c 	bl	800e3b8 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008540:	b2ab      	uxth	r3, r5
    return 0;
 8008542:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008544:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 8008546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008548:	2300      	movs	r3, #0
    return 0;
 800854a:	4618      	mov	r0, r3
 800854c:	e7fa      	b.n	8008544 <tcp_update_rcv_ann_wnd+0x50>
 800854e:	bf00      	nop
 8008550:	080102b2 	.word	0x080102b2
 8008554:	080103a0 	.word	0x080103a0
 8008558:	0800f15a 	.word	0x0800f15a
 800855c:	080103c4 	.word	0x080103c4

08008560 <tcp_recved>:
{
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008564:	4605      	mov	r5, r0
 8008566:	b940      	cbnz	r0, 800857a <tcp_recved+0x1a>
 8008568:	4b18      	ldr	r3, [pc, #96]	@ (80085cc <tcp_recved+0x6c>)
 800856a:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800856e:	4918      	ldr	r1, [pc, #96]	@ (80085d0 <tcp_recved+0x70>)
 8008570:	4818      	ldr	r0, [pc, #96]	@ (80085d4 <tcp_recved+0x74>)
}
 8008572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008576:	f005 bf1f 	b.w	800e3b8 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800857a:	7d03      	ldrb	r3, [r0, #20]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d106      	bne.n	800858e <tcp_recved+0x2e>
 8008580:	4b12      	ldr	r3, [pc, #72]	@ (80085cc <tcp_recved+0x6c>)
 8008582:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008586:	4914      	ldr	r1, [pc, #80]	@ (80085d8 <tcp_recved+0x78>)
 8008588:	4812      	ldr	r0, [pc, #72]	@ (80085d4 <tcp_recved+0x74>)
 800858a:	f005 ff15 	bl	800e3b8 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800858e:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008590:	f241 6348 	movw	r3, #5704	@ 0x1648
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008594:	1911      	adds	r1, r2, r4
 8008596:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008598:	4299      	cmp	r1, r3
 800859a:	d813      	bhi.n	80085c4 <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800859c:	428a      	cmp	r2, r1
 800859e:	bf88      	it	hi
 80085a0:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80085a2:	4628      	mov	r0, r5
 80085a4:	8529      	strh	r1, [r5, #40]	@ 0x28
 80085a6:	f7ff ffa5 	bl	80084f4 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80085aa:	f240 5391 	movw	r3, #1425	@ 0x591
 80085ae:	4298      	cmp	r0, r3
 80085b0:	d90a      	bls.n	80085c8 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 80085b2:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 80085b4:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 80085b6:	f043 0302 	orr.w	r3, r3, #2
 80085ba:	836b      	strh	r3, [r5, #26]
}
 80085bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 80085c0:	f003 b8b6 	b.w	800b730 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80085c4:	4619      	mov	r1, r3
 80085c6:	e7ec      	b.n	80085a2 <tcp_recved+0x42>
}
 80085c8:	bd70      	pop	{r4, r5, r6, pc}
 80085ca:	bf00      	nop
 80085cc:	080102b2 	.word	0x080102b2
 80085d0:	080103de 	.word	0x080103de
 80085d4:	0800f15a 	.word	0x0800f15a
 80085d8:	080103f6 	.word	0x080103f6

080085dc <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80085dc:	b510      	push	{r4, lr}
  if (seg != NULL) {
 80085de:	4604      	mov	r4, r0
 80085e0:	b148      	cbz	r0, 80085f6 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 80085e2:	6840      	ldr	r0, [r0, #4]
 80085e4:	b108      	cbz	r0, 80085ea <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80085e6:	f7ff fb01 	bl	8007bec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80085ea:	4621      	mov	r1, r4
 80085ec:	2003      	movs	r0, #3
  }
}
 80085ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80085f2:	f7ff b88b 	b.w	800770c <memp_free>
}
 80085f6:	bd10      	pop	{r4, pc}

080085f8 <tcp_segs_free>:
{
 80085f8:	b510      	push	{r4, lr}
  while (seg != NULL) {
 80085fa:	b900      	cbnz	r0, 80085fe <tcp_segs_free+0x6>
}
 80085fc:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 80085fe:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8008600:	f7ff ffec 	bl	80085dc <tcp_seg_free>
    seg = next;
 8008604:	4620      	mov	r0, r4
 8008606:	e7f8      	b.n	80085fa <tcp_segs_free+0x2>

08008608 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008608:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800860a:	4604      	mov	r4, r0
 800860c:	b930      	cbnz	r0, 800861c <tcp_seg_copy+0x14>
 800860e:	4b0d      	ldr	r3, [pc, #52]	@ (8008644 <tcp_seg_copy+0x3c>)
 8008610:	f240 6282 	movw	r2, #1666	@ 0x682
 8008614:	490c      	ldr	r1, [pc, #48]	@ (8008648 <tcp_seg_copy+0x40>)
 8008616:	480d      	ldr	r0, [pc, #52]	@ (800864c <tcp_seg_copy+0x44>)
 8008618:	f005 fece 	bl	800e3b8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800861c:	2003      	movs	r0, #3
 800861e:	f7ff f847 	bl	80076b0 <memp_malloc>
  if (cseg == NULL) {
 8008622:	4605      	mov	r5, r0
 8008624:	b160      	cbz	r0, 8008640 <tcp_seg_copy+0x38>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008626:	4623      	mov	r3, r4
 8008628:	4602      	mov	r2, r0
 800862a:	f104 0110 	add.w	r1, r4, #16
 800862e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008632:	428b      	cmp	r3, r1
 8008634:	f842 0b04 	str.w	r0, [r2], #4
 8008638:	d1f9      	bne.n	800862e <tcp_seg_copy+0x26>
  pbuf_ref(cseg->p);
 800863a:	6868      	ldr	r0, [r5, #4]
 800863c:	f7ff fc32 	bl	8007ea4 <pbuf_ref>
  return cseg;
}
 8008640:	4628      	mov	r0, r5
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	080102b2 	.word	0x080102b2
 8008648:	0801041c 	.word	0x0801041c
 800864c:	0800f15a 	.word	0x0800f15a

08008650 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008650:	b100      	cbz	r0, 8008654 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8008652:	6101      	str	r1, [r0, #16]
  }
}
 8008654:	4770      	bx	lr
	...

08008658 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800865c:	4604      	mov	r4, r0
 800865e:	b158      	cbz	r0, 8008678 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008660:	7d03      	ldrb	r3, [r0, #20]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d106      	bne.n	8008674 <tcp_recv+0x1c>
 8008666:	4b05      	ldr	r3, [pc, #20]	@ (800867c <tcp_recv+0x24>)
 8008668:	f240 72df 	movw	r2, #2015	@ 0x7df
 800866c:	4904      	ldr	r1, [pc, #16]	@ (8008680 <tcp_recv+0x28>)
 800866e:	4805      	ldr	r0, [pc, #20]	@ (8008684 <tcp_recv+0x2c>)
 8008670:	f005 fea2 	bl	800e3b8 <iprintf>
    pcb->recv = recv;
 8008674:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
  }
}
 8008678:	bd38      	pop	{r3, r4, r5, pc}
 800867a:	bf00      	nop
 800867c:	080102b2 	.word	0x080102b2
 8008680:	08010436 	.word	0x08010436
 8008684:	0800f15a 	.word	0x0800f15a

08008688 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800868c:	4604      	mov	r4, r0
 800868e:	b158      	cbz	r0, 80086a8 <tcp_sent+0x20>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008690:	7d03      	ldrb	r3, [r0, #20]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d106      	bne.n	80086a4 <tcp_sent+0x1c>
 8008696:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <tcp_sent+0x24>)
 8008698:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800869c:	4904      	ldr	r1, [pc, #16]	@ (80086b0 <tcp_sent+0x28>)
 800869e:	4805      	ldr	r0, [pc, #20]	@ (80086b4 <tcp_sent+0x2c>)
 80086a0:	f005 fe8a 	bl	800e3b8 <iprintf>
    pcb->sent = sent;
 80086a4:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
  }
}
 80086a8:	bd38      	pop	{r3, r4, r5, pc}
 80086aa:	bf00      	nop
 80086ac:	080102b2 	.word	0x080102b2
 80086b0:	0801045d 	.word	0x0801045d
 80086b4:	0800f15a 	.word	0x0800f15a

080086b8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80086bc:	4604      	mov	r4, r0
 80086be:	b158      	cbz	r0, 80086d8 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80086c0:	7d03      	ldrb	r3, [r0, #20]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d106      	bne.n	80086d4 <tcp_err+0x1c>
 80086c6:	4b05      	ldr	r3, [pc, #20]	@ (80086dc <tcp_err+0x24>)
 80086c8:	f640 020d 	movw	r2, #2061	@ 0x80d
 80086cc:	4904      	ldr	r1, [pc, #16]	@ (80086e0 <tcp_err+0x28>)
 80086ce:	4805      	ldr	r0, [pc, #20]	@ (80086e4 <tcp_err+0x2c>)
 80086d0:	f005 fe72 	bl	800e3b8 <iprintf>
    pcb->errf = err;
 80086d4:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
  }
}
 80086d8:	bd38      	pop	{r3, r4, r5, pc}
 80086da:	bf00      	nop
 80086dc:	080102b2 	.word	0x080102b2
 80086e0:	08010484 	.word	0x08010484
 80086e4:	0800f15a 	.word	0x0800f15a

080086e8 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80086e8:	b118      	cbz	r0, 80086f2 <tcp_accept+0xa>
 80086ea:	7d03      	ldrb	r3, [r0, #20]
 80086ec:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 80086ee:	bf08      	it	eq
 80086f0:	6181      	streq	r1, [r0, #24]
  }
}
 80086f2:	4770      	bx	lr

080086f4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	460e      	mov	r6, r1
 80086f8:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80086fa:	4604      	mov	r4, r0
 80086fc:	b940      	cbnz	r0, 8008710 <tcp_poll+0x1c>
 80086fe:	4b0b      	ldr	r3, [pc, #44]	@ (800872c <tcp_poll+0x38>)
 8008700:	f640 023d 	movw	r2, #2109	@ 0x83d
 8008704:	490a      	ldr	r1, [pc, #40]	@ (8008730 <tcp_poll+0x3c>)
 8008706:	480b      	ldr	r0, [pc, #44]	@ (8008734 <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 8008708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800870c:	f005 be54 	b.w	800e3b8 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008710:	7d03      	ldrb	r3, [r0, #20]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d106      	bne.n	8008724 <tcp_poll+0x30>
 8008716:	4b05      	ldr	r3, [pc, #20]	@ (800872c <tcp_poll+0x38>)
 8008718:	f640 023e 	movw	r2, #2110	@ 0x83e
 800871c:	4906      	ldr	r1, [pc, #24]	@ (8008738 <tcp_poll+0x44>)
 800871e:	4805      	ldr	r0, [pc, #20]	@ (8008734 <tcp_poll+0x40>)
 8008720:	f005 fe4a 	bl	800e3b8 <iprintf>
  pcb->poll = poll;
 8008724:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 8008728:	7765      	strb	r5, [r4, #29]
}
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	080102b2 	.word	0x080102b2
 8008730:	080104aa 	.word	0x080104aa
 8008734:	0800f15a 	.word	0x0800f15a
 8008738:	080104c0 	.word	0x080104c0

0800873c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800873c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800873e:	b930      	cbnz	r0, 800874e <tcp_next_iss+0x12>
 8008740:	4b06      	ldr	r3, [pc, #24]	@ (800875c <tcp_next_iss+0x20>)
 8008742:	f640 02af 	movw	r2, #2223	@ 0x8af
 8008746:	4906      	ldr	r1, [pc, #24]	@ (8008760 <tcp_next_iss+0x24>)
 8008748:	4806      	ldr	r0, [pc, #24]	@ (8008764 <tcp_next_iss+0x28>)
 800874a:	f005 fe35 	bl	800e3b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800874e:	4b06      	ldr	r3, [pc, #24]	@ (8008768 <tcp_next_iss+0x2c>)
 8008750:	4a06      	ldr	r2, [pc, #24]	@ (800876c <tcp_next_iss+0x30>)
 8008752:	6818      	ldr	r0, [r3, #0]
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	4410      	add	r0, r2
 8008758:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 800875a:	bd08      	pop	{r3, pc}
 800875c:	080102b2 	.word	0x080102b2
 8008760:	080104de 	.word	0x080104de
 8008764:	0800f15a 	.word	0x0800f15a
 8008768:	20000038 	.word	0x20000038
 800876c:	2003340c 	.word	0x2003340c

08008770 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4604      	mov	r4, r0
 8008774:	460d      	mov	r5, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008776:	b932      	cbnz	r2, 8008786 <tcp_eff_send_mss_netif+0x16>
 8008778:	4b09      	ldr	r3, [pc, #36]	@ (80087a0 <tcp_eff_send_mss_netif+0x30>)
 800877a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800877e:	4909      	ldr	r1, [pc, #36]	@ (80087a4 <tcp_eff_send_mss_netif+0x34>)
 8008780:	4809      	ldr	r0, [pc, #36]	@ (80087a8 <tcp_eff_send_mss_netif+0x38>)
 8008782:	f005 fe19 	bl	800e3b8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008786:	b14d      	cbz	r5, 800879c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
    }
    mtu = outif->mtu;
 8008788:	8cab      	ldrh	r3, [r5, #36]	@ 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800878a:	b13b      	cbz	r3, 800879c <tcp_eff_send_mss_netif+0x2c>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800878c:	2b28      	cmp	r3, #40	@ 0x28
 800878e:	bf38      	it	cc
 8008790:	2328      	movcc	r3, #40	@ 0x28
 8008792:	3b28      	subs	r3, #40	@ 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008794:	b29b      	uxth	r3, r3
 8008796:	429c      	cmp	r4, r3
 8008798:	bf28      	it	cs
 800879a:	461c      	movcs	r4, r3
  }
  return sendmss;
}
 800879c:	4620      	mov	r0, r4
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	080102b2 	.word	0x080102b2
 80087a4:	080104f8 	.word	0x080104f8
 80087a8:	0800f15a 	.word	0x0800f15a

080087ac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80087ac:	b510      	push	{r4, lr}
 80087ae:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 80087b0:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80087b2:	b118      	cbz	r0, 80087bc <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 80087b4:	f7ff ff20 	bl	80085f8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	6763      	str	r3, [r4, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80087bc:	bd10      	pop	{r4, pc}
	...

080087c0 <tcp_pcb_purge>:
{
 80087c0:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80087c2:	4604      	mov	r4, r0
 80087c4:	b940      	cbnz	r0, 80087d8 <tcp_pcb_purge+0x18>
 80087c6:	4b14      	ldr	r3, [pc, #80]	@ (8008818 <tcp_pcb_purge+0x58>)
 80087c8:	f640 0251 	movw	r2, #2129	@ 0x851
 80087cc:	4913      	ldr	r1, [pc, #76]	@ (800881c <tcp_pcb_purge+0x5c>)
 80087ce:	4814      	ldr	r0, [pc, #80]	@ (8008820 <tcp_pcb_purge+0x60>)
}
 80087d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80087d4:	f005 bdf0 	b.w	800e3b8 <iprintf>
  if (pcb->state != CLOSED &&
 80087d8:	7d03      	ldrb	r3, [r0, #20]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d91a      	bls.n	8008814 <tcp_pcb_purge+0x54>
 80087de:	2b0a      	cmp	r3, #10
 80087e0:	d018      	beq.n	8008814 <tcp_pcb_purge+0x54>
    if (pcb->refused_data != NULL) {
 80087e2:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 80087e4:	b118      	cbz	r0, 80087ee <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 80087e6:	f7ff fa01 	bl	8007bec <pbuf_free>
      pcb->refused_data = NULL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (pcb->ooseq != NULL) {
 80087ee:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80087f0:	b113      	cbz	r3, 80087f8 <tcp_pcb_purge+0x38>
      tcp_free_ooseq(pcb);
 80087f2:	4620      	mov	r0, r4
 80087f4:	f7ff ffda 	bl	80087ac <tcp_free_ooseq>
    pcb->rtime = -1;
 80087f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tcp_segs_free(pcb->unsent);
 80087fc:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    pcb->rtime = -1;
 80087fe:	8623      	strh	r3, [r4, #48]	@ 0x30
    tcp_segs_free(pcb->unsent);
 8008800:	f7ff fefa 	bl	80085f8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008804:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8008806:	f7ff fef7 	bl	80085f8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	e9c4 331b 	strd	r3, r3, [r4, #108]	@ 0x6c
    pcb->unsent_oversize = 0;
 8008810:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
}
 8008814:	bd10      	pop	{r4, pc}
 8008816:	bf00      	nop
 8008818:	080102b2 	.word	0x080102b2
 800881c:	0801051f 	.word	0x0801051f
 8008820:	0800f15a 	.word	0x0800f15a

08008824 <tcp_pcb_remove>:
{
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008828:	460c      	mov	r4, r1
 800882a:	b931      	cbnz	r1, 800883a <tcp_pcb_remove+0x16>
 800882c:	4b29      	ldr	r3, [pc, #164]	@ (80088d4 <tcp_pcb_remove+0xb0>)
 800882e:	f640 0283 	movw	r2, #2179	@ 0x883
 8008832:	4929      	ldr	r1, [pc, #164]	@ (80088d8 <tcp_pcb_remove+0xb4>)
 8008834:	4829      	ldr	r0, [pc, #164]	@ (80088dc <tcp_pcb_remove+0xb8>)
 8008836:	f005 fdbf 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800883a:	b935      	cbnz	r5, 800884a <tcp_pcb_remove+0x26>
 800883c:	4b25      	ldr	r3, [pc, #148]	@ (80088d4 <tcp_pcb_remove+0xb0>)
 800883e:	f640 0284 	movw	r2, #2180	@ 0x884
 8008842:	4927      	ldr	r1, [pc, #156]	@ (80088e0 <tcp_pcb_remove+0xbc>)
 8008844:	4825      	ldr	r0, [pc, #148]	@ (80088dc <tcp_pcb_remove+0xb8>)
 8008846:	f005 fdb7 	bl	800e3b8 <iprintf>
  TCP_RMV(pcblist, pcb);
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	42a3      	cmp	r3, r4
 800884e:	d11f      	bne.n	8008890 <tcp_pcb_remove+0x6c>
 8008850:	68e3      	ldr	r3, [r4, #12]
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8008856:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8008858:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800885a:	f7ff ffb1 	bl	80087c0 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800885e:	7d23      	ldrb	r3, [r4, #20]
 8008860:	2b0a      	cmp	r3, #10
 8008862:	d11d      	bne.n	80088a0 <tcp_pcb_remove+0x7c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008864:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008866:	bb6b      	cbnz	r3, 80088c4 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008868:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800886a:	b133      	cbz	r3, 800887a <tcp_pcb_remove+0x56>
 800886c:	4b19      	ldr	r3, [pc, #100]	@ (80088d4 <tcp_pcb_remove+0xb0>)
 800886e:	f640 0294 	movw	r2, #2196	@ 0x894
 8008872:	491c      	ldr	r1, [pc, #112]	@ (80088e4 <tcp_pcb_remove+0xc0>)
 8008874:	4819      	ldr	r0, [pc, #100]	@ (80088dc <tcp_pcb_remove+0xb8>)
 8008876:	f005 fd9f 	bl	800e3b8 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800887a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800887c:	b1f3      	cbz	r3, 80088bc <tcp_pcb_remove+0x98>
 800887e:	4b15      	ldr	r3, [pc, #84]	@ (80088d4 <tcp_pcb_remove+0xb0>)
 8008880:	f640 0296 	movw	r2, #2198	@ 0x896
 8008884:	4918      	ldr	r1, [pc, #96]	@ (80088e8 <tcp_pcb_remove+0xc4>)
 8008886:	4815      	ldr	r0, [pc, #84]	@ (80088dc <tcp_pcb_remove+0xb8>)
 8008888:	f005 fd96 	bl	800e3b8 <iprintf>
 800888c:	e016      	b.n	80088bc <tcp_pcb_remove+0x98>
 800888e:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0df      	beq.n	8008854 <tcp_pcb_remove+0x30>
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	42a2      	cmp	r2, r4
 8008898:	d1f9      	bne.n	800888e <tcp_pcb_remove+0x6a>
 800889a:	68e2      	ldr	r2, [r4, #12]
 800889c:	60da      	str	r2, [r3, #12]
 800889e:	e7d9      	b.n	8008854 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d00b      	beq.n	80088bc <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
 80088a4:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 80088a6:	07da      	lsls	r2, r3, #31
 80088a8:	d5dc      	bpl.n	8008864 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 80088aa:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 80088ae:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 80088b0:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 80088b2:	f002 ff3d 	bl	800b730 <tcp_output>
  if (pcb->state != LISTEN) {
 80088b6:	7d23      	ldrb	r3, [r4, #20]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d1d3      	bne.n	8008864 <tcp_pcb_remove+0x40>
  pcb->state = CLOSED;
 80088bc:	2300      	movs	r3, #0
 80088be:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 80088c0:	82e3      	strh	r3, [r4, #22]
}
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80088c4:	4b03      	ldr	r3, [pc, #12]	@ (80088d4 <tcp_pcb_remove+0xb0>)
 80088c6:	f640 0293 	movw	r2, #2195	@ 0x893
 80088ca:	4908      	ldr	r1, [pc, #32]	@ (80088ec <tcp_pcb_remove+0xc8>)
 80088cc:	4803      	ldr	r0, [pc, #12]	@ (80088dc <tcp_pcb_remove+0xb8>)
 80088ce:	f005 fd73 	bl	800e3b8 <iprintf>
 80088d2:	e7c9      	b.n	8008868 <tcp_pcb_remove+0x44>
 80088d4:	080102b2 	.word	0x080102b2
 80088d8:	0801053a 	.word	0x0801053a
 80088dc:	0800f15a 	.word	0x0800f15a
 80088e0:	08010556 	.word	0x08010556
 80088e4:	0801058e 	.word	0x0801058e
 80088e8:	080105a7 	.word	0x080105a7
 80088ec:	08010576 	.word	0x08010576

080088f0 <tcp_abandon>:
{
 80088f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80088f6:	4604      	mov	r4, r0
 80088f8:	b948      	cbnz	r0, 800890e <tcp_abandon+0x1e>
 80088fa:	4b38      	ldr	r3, [pc, #224]	@ (80089dc <tcp_abandon+0xec>)
 80088fc:	f240 223d 	movw	r2, #573	@ 0x23d
 8008900:	4937      	ldr	r1, [pc, #220]	@ (80089e0 <tcp_abandon+0xf0>)
 8008902:	4838      	ldr	r0, [pc, #224]	@ (80089e4 <tcp_abandon+0xf4>)
}
 8008904:	b004      	add	sp, #16
 8008906:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800890a:	f005 bd55 	b.w	800e3b8 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800890e:	7d03      	ldrb	r3, [r0, #20]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d106      	bne.n	8008922 <tcp_abandon+0x32>
 8008914:	4b31      	ldr	r3, [pc, #196]	@ (80089dc <tcp_abandon+0xec>)
 8008916:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800891a:	4933      	ldr	r1, [pc, #204]	@ (80089e8 <tcp_abandon+0xf8>)
 800891c:	4831      	ldr	r0, [pc, #196]	@ (80089e4 <tcp_abandon+0xf4>)
 800891e:	f005 fd4b 	bl	800e3b8 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8008922:	7d23      	ldrb	r3, [r4, #20]
 8008924:	2b0a      	cmp	r3, #10
 8008926:	d109      	bne.n	800893c <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008928:	4621      	mov	r1, r4
 800892a:	4830      	ldr	r0, [pc, #192]	@ (80089ec <tcp_abandon+0xfc>)
 800892c:	f7ff ff7a 	bl	8008824 <tcp_pcb_remove>
    tcp_free(pcb);
 8008930:	4620      	mov	r0, r4
}
 8008932:	b004      	add	sp, #16
 8008934:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 8008938:	f7ff bd08 	b.w	800834c <tcp_free>
    seqno = pcb->snd_nxt;
 800893c:	f8d4 9050 	ldr.w	r9, [r4, #80]	@ 0x50
    ackno = pcb->rcv_nxt;
 8008940:	f8d4 a024 	ldr.w	sl, [r4, #36]	@ 0x24
    errf = pcb->errf;
 8008944:	f8d4 7090 	ldr.w	r7, [r4, #144]	@ 0x90
    errf_arg = pcb->callback_arg;
 8008948:	f8d4 8010 	ldr.w	r8, [r4, #16]
      if (pcb->local_port != 0) {
 800894c:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800894e:	2b00      	cmp	r3, #0
 8008950:	d138      	bne.n	80089c4 <tcp_abandon+0xd4>
      if (pcb->local_port != 0) {
 8008952:	bb2d      	cbnz	r5, 80089a0 <tcp_abandon+0xb0>
    u16_t local_port = 0;
 8008954:	2500      	movs	r5, #0
    int send_rst = 0;
 8008956:	462e      	mov	r6, r5
    if (pcb->unacked != NULL) {
 8008958:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800895a:	b108      	cbz	r0, 8008960 <tcp_abandon+0x70>
      tcp_segs_free(pcb->unacked);
 800895c:	f7ff fe4c 	bl	80085f8 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8008960:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8008962:	b108      	cbz	r0, 8008968 <tcp_abandon+0x78>
      tcp_segs_free(pcb->unsent);
 8008964:	f7ff fe48 	bl	80085f8 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8008968:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800896a:	b108      	cbz	r0, 8008970 <tcp_abandon+0x80>
      tcp_segs_free(pcb->ooseq);
 800896c:	f7ff fe44 	bl	80085f8 <tcp_segs_free>
    if (send_rst) {
 8008970:	b156      	cbz	r6, 8008988 <tcp_abandon+0x98>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008972:	8b23      	ldrh	r3, [r4, #24]
 8008974:	4652      	mov	r2, sl
 8008976:	4649      	mov	r1, r9
 8008978:	4620      	mov	r0, r4
 800897a:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800897e:	1d23      	adds	r3, r4, #4
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	4623      	mov	r3, r4
 8008984:	f002 fe5c 	bl	800b640 <tcp_rst>
    tcp_free(pcb);
 8008988:	4620      	mov	r0, r4
 800898a:	f7ff fcdf 	bl	800834c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800898e:	b30f      	cbz	r7, 80089d4 <tcp_abandon+0xe4>
 8008990:	f06f 010c 	mvn.w	r1, #12
 8008994:	4640      	mov	r0, r8
 8008996:	463b      	mov	r3, r7
}
 8008998:	b004      	add	sp, #16
 800899a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800899e:	4718      	bx	r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80089a0:	4a13      	ldr	r2, [pc, #76]	@ (80089f0 <tcp_abandon+0x100>)
 80089a2:	6813      	ldr	r3, [r2, #0]
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	d105      	bne.n	80089b4 <tcp_abandon+0xc4>
 80089a8:	68e3      	ldr	r3, [r4, #12]
 80089aa:	6013      	str	r3, [r2, #0]
 80089ac:	2300      	movs	r3, #0
 80089ae:	60e3      	str	r3, [r4, #12]
 80089b0:	e7d0      	b.n	8008954 <tcp_abandon+0x64>
 80089b2:	4613      	mov	r3, r2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0f9      	beq.n	80089ac <tcp_abandon+0xbc>
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	42a2      	cmp	r2, r4
 80089bc:	d1f9      	bne.n	80089b2 <tcp_abandon+0xc2>
 80089be:	68e2      	ldr	r2, [r4, #12]
 80089c0:	60da      	str	r2, [r3, #12]
 80089c2:	e7f3      	b.n	80089ac <tcp_abandon+0xbc>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80089c4:	4621      	mov	r1, r4
 80089c6:	480b      	ldr	r0, [pc, #44]	@ (80089f4 <tcp_abandon+0x104>)
 80089c8:	f7ff ff2c 	bl	8008824 <tcp_pcb_remove>
 80089cc:	4b0a      	ldr	r3, [pc, #40]	@ (80089f8 <tcp_abandon+0x108>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	e7c1      	b.n	8008958 <tcp_abandon+0x68>
}
 80089d4:	b004      	add	sp, #16
 80089d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089da:	bf00      	nop
 80089dc:	080102b2 	.word	0x080102b2
 80089e0:	080105be 	.word	0x080105be
 80089e4:	0800f15a 	.word	0x0800f15a
 80089e8:	080105d7 	.word	0x080105d7
 80089ec:	200333fc 	.word	0x200333fc
 80089f0:	20033408 	.word	0x20033408
 80089f4:	20033400 	.word	0x20033400
 80089f8:	200333fb 	.word	0x200333fb

080089fc <tcp_abort>:
  tcp_abandon(pcb, 1);
 80089fc:	2101      	movs	r1, #1
 80089fe:	f7ff bf77 	b.w	80088f0 <tcp_abandon>
	...

08008a04 <tcp_accept_null>:
{
 8008a04:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008a06:	460c      	mov	r4, r1
 8008a08:	b931      	cbnz	r1, 8008a18 <tcp_accept_null+0x14>
 8008a0a:	4b06      	ldr	r3, [pc, #24]	@ (8008a24 <tcp_accept_null+0x20>)
 8008a0c:	f240 320f 	movw	r2, #783	@ 0x30f
 8008a10:	4905      	ldr	r1, [pc, #20]	@ (8008a28 <tcp_accept_null+0x24>)
 8008a12:	4806      	ldr	r0, [pc, #24]	@ (8008a2c <tcp_accept_null+0x28>)
 8008a14:	f005 fcd0 	bl	800e3b8 <iprintf>
  tcp_abort(pcb);
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f7ff ffef 	bl	80089fc <tcp_abort>
}
 8008a1e:	f06f 000c 	mvn.w	r0, #12
 8008a22:	bd10      	pop	{r4, pc}
 8008a24:	080102b2 	.word	0x080102b2
 8008a28:	08010608 	.word	0x08010608
 8008a2c:	0800f15a 	.word	0x0800f15a

08008a30 <tcp_netif_ip_addr_changed_pcblist>:
{
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008a34:	4605      	mov	r5, r0
 8008a36:	b930      	cbnz	r0, 8008a46 <tcp_netif_ip_addr_changed_pcblist+0x16>
 8008a38:	4b09      	ldr	r3, [pc, #36]	@ (8008a60 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 8008a3a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8008a3e:	4909      	ldr	r1, [pc, #36]	@ (8008a64 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 8008a40:	4809      	ldr	r0, [pc, #36]	@ (8008a68 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8008a42:	f005 fcb9 	bl	800e3b8 <iprintf>
  while (pcb != NULL) {
 8008a46:	b904      	cbnz	r4, 8008a4a <tcp_netif_ip_addr_changed_pcblist+0x1a>
}
 8008a48:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008a4a:	6822      	ldr	r2, [r4, #0]
 8008a4c:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 8008a4e:	68e6      	ldr	r6, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d102      	bne.n	8008a5a <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 8008a54:	4620      	mov	r0, r4
 8008a56:	f7ff ffd1 	bl	80089fc <tcp_abort>
{
 8008a5a:	4634      	mov	r4, r6
 8008a5c:	e7f3      	b.n	8008a46 <tcp_netif_ip_addr_changed_pcblist+0x16>
 8008a5e:	bf00      	nop
 8008a60:	080102b2 	.word	0x080102b2
 8008a64:	08010625 	.word	0x08010625
 8008a68:	0800f15a 	.word	0x0800f15a

08008a6c <tcp_netif_ip_addr_changed>:
{
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	460d      	mov	r5, r1
  if (!ip_addr_isany(old_addr)) {
 8008a70:	4604      	mov	r4, r0
 8008a72:	b180      	cbz	r0, 8008a96 <tcp_netif_ip_addr_changed+0x2a>
 8008a74:	6803      	ldr	r3, [r0, #0]
 8008a76:	b173      	cbz	r3, 8008a96 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008a78:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa8 <tcp_netif_ip_addr_changed+0x3c>)
 8008a7a:	6819      	ldr	r1, [r3, #0]
 8008a7c:	f7ff ffd8 	bl	8008a30 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008a80:	4b0a      	ldr	r3, [pc, #40]	@ (8008aac <tcp_netif_ip_addr_changed+0x40>)
 8008a82:	4620      	mov	r0, r4
 8008a84:	6819      	ldr	r1, [r3, #0]
 8008a86:	f7ff ffd3 	bl	8008a30 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8008a8a:	b125      	cbz	r5, 8008a96 <tcp_netif_ip_addr_changed+0x2a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b113      	cbz	r3, 8008a96 <tcp_netif_ip_addr_changed+0x2a>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008a90:	4b07      	ldr	r3, [pc, #28]	@ (8008ab0 <tcp_netif_ip_addr_changed+0x44>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	b903      	cbnz	r3, 8008a98 <tcp_netif_ip_addr_changed+0x2c>
}
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008a98:	6819      	ldr	r1, [r3, #0]
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008a9e:	bf04      	itt	eq
 8008aa0:	682a      	ldreq	r2, [r5, #0]
 8008aa2:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	e7f5      	b.n	8008a94 <tcp_netif_ip_addr_changed+0x28>
 8008aa8:	20033400 	.word	0x20033400
 8008aac:	20033408 	.word	0x20033408
 8008ab0:	20033404 	.word	0x20033404

08008ab4 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae8 <tcp_kill_state+0x34>)
  inactivity = 0;
 8008ab6:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ab8:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008aba:	4b0c      	ldr	r3, [pc, #48]	@ (8008aec <tcp_kill_state+0x38>)
{
 8008abc:	b430      	push	{r4, r5}
 8008abe:	4604      	mov	r4, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008ac0:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8008ac2:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ac4:	b919      	cbnz	r1, 8008ace <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8008ac6:	b168      	cbz	r0, 8008ae4 <tcp_kill_state+0x30>
}
 8008ac8:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8008aca:	f7ff bf11 	b.w	80088f0 <tcp_abandon>
    if (pcb->state == state) {
 8008ace:	7d0b      	ldrb	r3, [r1, #20]
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	d105      	bne.n	8008ae0 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008ad4:	6a0b      	ldr	r3, [r1, #32]
 8008ad6:	1aeb      	subs	r3, r5, r3
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	bf24      	itt	cs
 8008adc:	461a      	movcs	r2, r3
 8008ade:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ae0:	68c9      	ldr	r1, [r1, #12]
 8008ae2:	e7ef      	b.n	8008ac4 <tcp_kill_state+0x10>
}
 8008ae4:	bc30      	pop	{r4, r5}
 8008ae6:	4770      	bx	lr
 8008ae8:	20033400 	.word	0x20033400
 8008aec:	2003340c 	.word	0x2003340c

08008af0 <tcp_alloc>:
{
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008af4:	2001      	movs	r0, #1
 8008af6:	f7fe fddb 	bl	80076b0 <memp_malloc>
  if (pcb == NULL) {
 8008afa:	4603      	mov	r3, r0
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d136      	bne.n	8008b6e <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008b00:	4e3f      	ldr	r6, [pc, #252]	@ (8008c00 <tcp_alloc+0x110>)
 8008b02:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d157      	bne.n	8008bb8 <tcp_alloc+0xc8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b08:	4b3e      	ldr	r3, [pc, #248]	@ (8008c04 <tcp_alloc+0x114>)
  inactivity = 0;
 8008b0a:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008b0c:	4d3e      	ldr	r5, [pc, #248]	@ (8008c08 <tcp_alloc+0x118>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b0e:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008b10:	682f      	ldr	r7, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d15b      	bne.n	8008bce <tcp_alloc+0xde>
  if (inactive != NULL) {
 8008b16:	b108      	cbz	r0, 8008b1c <tcp_alloc+0x2c>
    tcp_abort(inactive);
 8008b18:	f7ff ff70 	bl	80089fc <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	f7fe fdc7 	bl	80076b0 <memp_malloc>
    if (pcb == NULL) {
 8008b22:	4603      	mov	r3, r0
 8008b24:	bb18      	cbnz	r0, 8008b6e <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 8008b26:	2009      	movs	r0, #9
 8008b28:	f7ff ffc4 	bl	8008ab4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	f7fe fdbf 	bl	80076b0 <memp_malloc>
      if (pcb == NULL) {
 8008b32:	4603      	mov	r3, r0
 8008b34:	b9d8      	cbnz	r0, 8008b6e <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 8008b36:	2008      	movs	r0, #8
 8008b38:	f7ff ffbc 	bl	8008ab4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008b3c:	2001      	movs	r0, #1
 8008b3e:	f7fe fdb7 	bl	80076b0 <memp_malloc>
        if (pcb == NULL) {
 8008b42:	4603      	mov	r3, r0
 8008b44:	b998      	cbnz	r0, 8008b6e <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008b46:	0622      	lsls	r2, r4, #24
 8008b48:	d449      	bmi.n	8008bde <tcp_alloc+0xee>
  if (mprio == 0) {
 8008b4a:	b15c      	cbz	r4, 8008b64 <tcp_alloc+0x74>
 8008b4c:	4621      	mov	r1, r4
  mprio--;
 8008b4e:	3901      	subs	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b50:	6832      	ldr	r2, [r6, #0]
  inactivity = 0;
 8008b52:	2000      	movs	r0, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008b54:	682e      	ldr	r6, [r5, #0]
  mprio--;
 8008b56:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b58:	2a00      	cmp	r2, #0
 8008b5a:	d142      	bne.n	8008be2 <tcp_alloc+0xf2>
  if (inactive != NULL) {
 8008b5c:	b113      	cbz	r3, 8008b64 <tcp_alloc+0x74>
    tcp_abort(inactive);
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7ff ff4c 	bl	80089fc <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008b64:	2001      	movs	r0, #1
 8008b66:	f7fe fda3 	bl	80076b0 <memp_malloc>
  if (pcb != NULL) {
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	b310      	cbz	r0, 8008bb4 <tcp_alloc+0xc4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008b6e:	229c      	movs	r2, #156	@ 0x9c
 8008b70:	4618      	mov	r0, r3
 8008b72:	2100      	movs	r1, #0
 8008b74:	f005 fd1a 	bl	800e5ac <memset>
    pcb->snd_buf = TCP_SND_BUF;
 8008b78:	f241 3288 	movw	r2, #5000	@ 0x1388
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008b7c:	4603      	mov	r3, r0
    pcb->prio = prio;
 8008b7e:	7544      	strb	r4, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008b80:	f8a0 2064 	strh.w	r2, [r0, #100]	@ 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008b84:	4a21      	ldr	r2, [pc, #132]	@ (8008c0c <tcp_alloc+0x11c>)
 8008b86:	6282      	str	r2, [r0, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8008b88:	22ff      	movs	r2, #255	@ 0xff
 8008b8a:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008b8c:	2206      	movs	r2, #6
 8008b8e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008b92:	87c2      	strh	r2, [r0, #62]	@ 0x3e
    pcb->rtime = -1;
 8008b94:	4a1e      	ldr	r2, [pc, #120]	@ (8008c10 <tcp_alloc+0x120>)
 8008b96:	6302      	str	r2, [r0, #48]	@ 0x30
    pcb->tmr = tcp_ticks;
 8008b98:	4a1b      	ldr	r2, [pc, #108]	@ (8008c08 <tcp_alloc+0x118>)
 8008b9a:	6812      	ldr	r2, [r2, #0]
 8008b9c:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008c14 <tcp_alloc+0x124>)
 8008ba0:	7812      	ldrb	r2, [r2, #0]
 8008ba2:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 8008ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8008c18 <tcp_alloc+0x128>)
 8008ba6:	6482      	str	r2, [r0, #72]	@ 0x48
    pcb->recv = tcp_recv_null;
 8008ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8008c1c <tcp_alloc+0x12c>)
 8008baa:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008bae:	4a1c      	ldr	r2, [pc, #112]	@ (8008c20 <tcp_alloc+0x130>)
 8008bb0:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 8008bb8:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 8008bba:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8008bbc:	0719      	lsls	r1, r3, #28
 8008bbe:	d504      	bpl.n	8008bca <tcp_alloc+0xda>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008bc0:	f023 0308 	bic.w	r3, r3, #8
 8008bc4:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8008bc6:	f7ff fb85 	bl	80082d4 <tcp_close_shutdown_fin>
{
 8008bca:	4628      	mov	r0, r5
 8008bcc:	e79a      	b.n	8008b04 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008bce:	6a1a      	ldr	r2, [r3, #32]
 8008bd0:	1aba      	subs	r2, r7, r2
 8008bd2:	428a      	cmp	r2, r1
 8008bd4:	bf24      	itt	cs
 8008bd6:	4618      	movcs	r0, r3
 8008bd8:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	e799      	b.n	8008b12 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008bde:	217f      	movs	r1, #127	@ 0x7f
 8008be0:	e7b5      	b.n	8008b4e <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 8008be2:	7d57      	ldrb	r7, [r2, #21]
 8008be4:	428f      	cmp	r7, r1
 8008be6:	d304      	bcc.n	8008bf2 <tcp_alloc+0x102>
 8008be8:	d107      	bne.n	8008bfa <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008bea:	6a15      	ldr	r5, [r2, #32]
 8008bec:	1b75      	subs	r5, r6, r5
 8008bee:	4285      	cmp	r5, r0
 8008bf0:	d303      	bcc.n	8008bfa <tcp_alloc+0x10a>
      inactivity = tcp_ticks - pcb->tmr;
 8008bf2:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 8008bf4:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	1a30      	subs	r0, r6, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bfa:	68d2      	ldr	r2, [r2, #12]
 8008bfc:	e7ac      	b.n	8008b58 <tcp_alloc+0x68>
 8008bfe:	bf00      	nop
 8008c00:	20033400 	.word	0x20033400
 8008c04:	200333fc 	.word	0x200333fc
 8008c08:	2003340c 	.word	0x2003340c
 8008c0c:	16481648 	.word	0x16481648
 8008c10:	0218ffff 	.word	0x0218ffff
 8008c14:	200333f9 	.word	0x200333f9
 8008c18:	13880001 	.word	0x13880001
 8008c1c:	08008dcd 	.word	0x08008dcd
 8008c20:	006ddd00 	.word	0x006ddd00

08008c24 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008c24:	2040      	movs	r0, #64	@ 0x40
 8008c26:	f7ff bf63 	b.w	8008af0 <tcp_alloc>
	...

08008c2c <tcp_close_shutdown>:
{
 8008c2c:	b530      	push	{r4, r5, lr}
 8008c2e:	460d      	mov	r5, r1
 8008c30:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008c32:	4604      	mov	r4, r0
 8008c34:	b930      	cbnz	r0, 8008c44 <tcp_close_shutdown+0x18>
 8008c36:	4b4b      	ldr	r3, [pc, #300]	@ (8008d64 <tcp_close_shutdown+0x138>)
 8008c38:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008c3c:	494a      	ldr	r1, [pc, #296]	@ (8008d68 <tcp_close_shutdown+0x13c>)
 8008c3e:	484b      	ldr	r0, [pc, #300]	@ (8008d6c <tcp_close_shutdown+0x140>)
 8008c40:	f005 fbba 	bl	800e3b8 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008c44:	7d23      	ldrb	r3, [r4, #20]
 8008c46:	2d00      	cmp	r5, #0
 8008c48:	d040      	beq.n	8008ccc <tcp_close_shutdown+0xa0>
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d001      	beq.n	8008c52 <tcp_close_shutdown+0x26>
 8008c4e:	2b07      	cmp	r3, #7
 8008c50:	d13c      	bne.n	8008ccc <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008c52:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8008c54:	b922      	cbnz	r2, 8008c60 <tcp_close_shutdown+0x34>
 8008c56:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8008c58:	f241 6248 	movw	r2, #5704	@ 0x1648
 8008c5c:	4291      	cmp	r1, r2
 8008c5e:	d035      	beq.n	8008ccc <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008c60:	8b63      	ldrh	r3, [r4, #26]
 8008c62:	06db      	lsls	r3, r3, #27
 8008c64:	d406      	bmi.n	8008c74 <tcp_close_shutdown+0x48>
 8008c66:	4b3f      	ldr	r3, [pc, #252]	@ (8008d64 <tcp_close_shutdown+0x138>)
 8008c68:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008c6c:	4940      	ldr	r1, [pc, #256]	@ (8008d70 <tcp_close_shutdown+0x144>)
 8008c6e:	483f      	ldr	r0, [pc, #252]	@ (8008d6c <tcp_close_shutdown+0x140>)
 8008c70:	f005 fba2 	bl	800e3b8 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008c74:	8b23      	ldrh	r3, [r4, #24]
 8008c76:	4620      	mov	r0, r4
 8008c78:	9302      	str	r3, [sp, #8]
 8008c7a:	8ae3      	ldrh	r3, [r4, #22]
 8008c7c:	9301      	str	r3, [sp, #4]
 8008c7e:	1d23      	adds	r3, r4, #4
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	4623      	mov	r3, r4
 8008c84:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008c86:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8008c88:	f002 fcda 	bl	800b640 <tcp_rst>
      tcp_pcb_purge(pcb);
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f7ff fd97 	bl	80087c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008c92:	4a38      	ldr	r2, [pc, #224]	@ (8008d74 <tcp_close_shutdown+0x148>)
 8008c94:	6813      	ldr	r3, [r2, #0]
 8008c96:	42a3      	cmp	r3, r4
 8008c98:	d110      	bne.n	8008cbc <tcp_close_shutdown+0x90>
 8008c9a:	68e3      	ldr	r3, [r4, #12]
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	60e3      	str	r3, [r4, #12]
 8008ca4:	4b34      	ldr	r3, [pc, #208]	@ (8008d78 <tcp_close_shutdown+0x14c>)
 8008ca6:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8008ca8:	4b34      	ldr	r3, [pc, #208]	@ (8008d7c <tcp_close_shutdown+0x150>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	d11d      	bne.n	8008cec <tcp_close_shutdown+0xc0>
        tcp_trigger_input_pcb_close();
 8008cb0:	f001 fe6c 	bl	800a98c <tcp_trigger_input_pcb_close>
}
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	b005      	add	sp, #20
 8008cb8:	bd30      	pop	{r4, r5, pc}
 8008cba:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0ee      	beq.n	8008c9e <tcp_close_shutdown+0x72>
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	42a2      	cmp	r2, r4
 8008cc4:	d1f9      	bne.n	8008cba <tcp_close_shutdown+0x8e>
 8008cc6:	68e2      	ldr	r2, [r4, #12]
 8008cc8:	60da      	str	r2, [r3, #12]
 8008cca:	e7e8      	b.n	8008c9e <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d01a      	beq.n	8008d06 <tcp_close_shutdown+0xda>
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d039      	beq.n	8008d48 <tcp_close_shutdown+0x11c>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d13f      	bne.n	8008d58 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 8008cd8:	8ae3      	ldrh	r3, [r4, #22]
 8008cda:	b13b      	cbz	r3, 8008cec <tcp_close_shutdown+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008cdc:	4a28      	ldr	r2, [pc, #160]	@ (8008d80 <tcp_close_shutdown+0x154>)
 8008cde:	6813      	ldr	r3, [r2, #0]
 8008ce0:	42a3      	cmp	r3, r4
 8008ce2:	d108      	bne.n	8008cf6 <tcp_close_shutdown+0xca>
 8008ce4:	68e3      	ldr	r3, [r4, #12]
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8008cec:	4620      	mov	r0, r4
 8008cee:	f7ff fb2d 	bl	800834c <tcp_free>
      break;
 8008cf2:	e7df      	b.n	8008cb4 <tcp_close_shutdown+0x88>
 8008cf4:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0f6      	beq.n	8008ce8 <tcp_close_shutdown+0xbc>
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	42a2      	cmp	r2, r4
 8008cfe:	d1f9      	bne.n	8008cf4 <tcp_close_shutdown+0xc8>
 8008d00:	68e2      	ldr	r2, [r4, #12]
 8008d02:	60da      	str	r2, [r3, #12]
 8008d04:	e7f0      	b.n	8008ce8 <tcp_close_shutdown+0xbc>
 8008d06:	491f      	ldr	r1, [pc, #124]	@ (8008d84 <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 8008d08:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008d0a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8008d0e:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d10:	b9a2      	cbnz	r2, 8008d3c <tcp_close_shutdown+0x110>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008d12:	3301      	adds	r3, #1
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d1f8      	bne.n	8008d0a <tcp_close_shutdown+0xde>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008d18:	4621      	mov	r1, r4
 8008d1a:	481b      	ldr	r0, [pc, #108]	@ (8008d88 <tcp_close_shutdown+0x15c>)
 8008d1c:	f7ff fd82 	bl	8008824 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008d20:	7d23      	ldrb	r3, [r4, #20]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d105      	bne.n	8008d32 <tcp_close_shutdown+0x106>
 8008d26:	4b0f      	ldr	r3, [pc, #60]	@ (8008d64 <tcp_close_shutdown+0x138>)
 8008d28:	22df      	movs	r2, #223	@ 0xdf
 8008d2a:	4918      	ldr	r1, [pc, #96]	@ (8008d8c <tcp_close_shutdown+0x160>)
 8008d2c:	480f      	ldr	r0, [pc, #60]	@ (8008d6c <tcp_close_shutdown+0x140>)
 8008d2e:	f005 fb43 	bl	800e3b8 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008d32:	4621      	mov	r1, r4
 8008d34:	2002      	movs	r0, #2
 8008d36:	f7fe fce9 	bl	800770c <memp_free>
}
 8008d3a:	e7bb      	b.n	8008cb4 <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 8008d3c:	6fd5      	ldr	r5, [r2, #124]	@ 0x7c
 8008d3e:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 8008d40:	bf08      	it	eq
 8008d42:	67d0      	streq	r0, [r2, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d44:	68d2      	ldr	r2, [r2, #12]
 8008d46:	e7e3      	b.n	8008d10 <tcp_close_shutdown+0xe4>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008d48:	4621      	mov	r1, r4
 8008d4a:	480a      	ldr	r0, [pc, #40]	@ (8008d74 <tcp_close_shutdown+0x148>)
 8008d4c:	f7ff fd6a 	bl	8008824 <tcp_pcb_remove>
 8008d50:	4b09      	ldr	r3, [pc, #36]	@ (8008d78 <tcp_close_shutdown+0x14c>)
 8008d52:	2201      	movs	r2, #1
 8008d54:	701a      	strb	r2, [r3, #0]
 8008d56:	e7c9      	b.n	8008cec <tcp_close_shutdown+0xc0>
      return tcp_close_shutdown_fin(pcb);
 8008d58:	4620      	mov	r0, r4
}
 8008d5a:	b005      	add	sp, #20
 8008d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8008d60:	f7ff bab8 	b.w	80082d4 <tcp_close_shutdown_fin>
 8008d64:	080102b2 	.word	0x080102b2
 8008d68:	08010659 	.word	0x08010659
 8008d6c:	0800f15a 	.word	0x0800f15a
 8008d70:	08010679 	.word	0x08010679
 8008d74:	20033400 	.word	0x20033400
 8008d78:	200333fb 	.word	0x200333fb
 8008d7c:	20033410 	.word	0x20033410
 8008d80:	20033408 	.word	0x20033408
 8008d84:	080108d8 	.word	0x080108d8
 8008d88:	20033404 	.word	0x20033404
 8008d8c:	08010692 	.word	0x08010692

08008d90 <tcp_close>:
{
 8008d90:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008d92:	b158      	cbz	r0, 8008dac <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8008d94:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8008d96:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8008d98:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008d9a:	bf1e      	ittt	ne
 8008d9c:	8b43      	ldrhne	r3, [r0, #26]
 8008d9e:	f043 0310 	orrne.w	r3, r3, #16
 8008da2:	8343      	strhne	r3, [r0, #26]
}
 8008da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8008da8:	f7ff bf40 	b.w	8008c2c <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008dac:	4b04      	ldr	r3, [pc, #16]	@ (8008dc0 <tcp_close+0x30>)
 8008dae:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008db2:	4904      	ldr	r1, [pc, #16]	@ (8008dc4 <tcp_close+0x34>)
 8008db4:	4804      	ldr	r0, [pc, #16]	@ (8008dc8 <tcp_close+0x38>)
 8008db6:	f005 faff 	bl	800e3b8 <iprintf>
}
 8008dba:	f06f 000f 	mvn.w	r0, #15
 8008dbe:	bd08      	pop	{r3, pc}
 8008dc0:	080102b2 	.word	0x080102b2
 8008dc4:	080106ab 	.word	0x080106ab
 8008dc8:	0800f15a 	.word	0x0800f15a

08008dcc <tcp_recv_null>:
{
 8008dcc:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008dce:	4608      	mov	r0, r1
{
 8008dd0:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008dd2:	b949      	cbnz	r1, 8008de8 <tcp_recv_null+0x1c>
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e08 <tcp_recv_null+0x3c>)
 8008dd6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8008dda:	490c      	ldr	r1, [pc, #48]	@ (8008e0c <tcp_recv_null+0x40>)
 8008ddc:	480c      	ldr	r0, [pc, #48]	@ (8008e10 <tcp_recv_null+0x44>)
 8008dde:	f005 faeb 	bl	800e3b8 <iprintf>
 8008de2:	f06f 000f 	mvn.w	r0, #15
}
 8008de6:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 8008de8:	b13a      	cbz	r2, 8008dfa <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8008dea:	8911      	ldrh	r1, [r2, #8]
 8008dec:	f7ff fbb8 	bl	8008560 <tcp_recved>
    pbuf_free(p);
 8008df0:	4620      	mov	r0, r4
 8008df2:	f7fe fefb 	bl	8007bec <pbuf_free>
  return ERR_OK;
 8008df6:	2000      	movs	r0, #0
 8008df8:	e7f5      	b.n	8008de6 <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1fb      	bne.n	8008df6 <tcp_recv_null+0x2a>
}
 8008dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8008e02:	f7ff bfc5 	b.w	8008d90 <tcp_close>
 8008e06:	bf00      	nop
 8008e08:	080102b2 	.word	0x080102b2
 8008e0c:	080106c2 	.word	0x080106c2
 8008e10:	0800f15a 	.word	0x0800f15a

08008e14 <tcp_process_refused_data>:
{
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008e16:	4604      	mov	r4, r0
 8008e18:	b950      	cbnz	r0, 8008e30 <tcp_process_refused_data+0x1c>
 8008e1a:	f06f 050f 	mvn.w	r5, #15
 8008e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8008e94 <tcp_process_refused_data+0x80>)
 8008e20:	f240 6209 	movw	r2, #1545	@ 0x609
 8008e24:	491c      	ldr	r1, [pc, #112]	@ (8008e98 <tcp_process_refused_data+0x84>)
 8008e26:	481d      	ldr	r0, [pc, #116]	@ (8008e9c <tcp_process_refused_data+0x88>)
 8008e28:	f005 fac6 	bl	800e3b8 <iprintf>
}
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 8008e30:	6f86      	ldr	r6, [r0, #120]	@ 0x78
    pcb->refused_data = NULL;
 8008e32:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008e34:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
    u8_t refused_flags = pcb->refused_data->flags;
 8008e38:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8008e3a:	6783      	str	r3, [r0, #120]	@ 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008e3c:	b1e5      	cbz	r5, 8008e78 <tcp_process_refused_data+0x64>
 8008e3e:	4601      	mov	r1, r0
 8008e40:	4632      	mov	r2, r6
 8008e42:	6900      	ldr	r0, [r0, #16]
 8008e44:	47a8      	blx	r5
 8008e46:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8008e48:	b9e8      	cbnz	r0, 8008e86 <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008e4a:	06bb      	lsls	r3, r7, #26
 8008e4c:	d5ee      	bpl.n	8008e2c <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008e4e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008e50:	f241 6248 	movw	r2, #5704	@ 0x1648
        TCP_EVENT_CLOSED(pcb, err);
 8008e54:	f8d4 6084 	ldr.w	r6, [r4, #132]	@ 0x84
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008e58:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 8008e5a:	bf1c      	itt	ne
 8008e5c:	3301      	addne	r3, #1
 8008e5e:	8523      	strhne	r3, [r4, #40]	@ 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8008e60:	2e00      	cmp	r6, #0
 8008e62:	d0e3      	beq.n	8008e2c <tcp_process_refused_data+0x18>
 8008e64:	2300      	movs	r3, #0
 8008e66:	4621      	mov	r1, r4
 8008e68:	6920      	ldr	r0, [r4, #16]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8008e6e:	300d      	adds	r0, #13
 8008e70:	d1dc      	bne.n	8008e2c <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 8008e72:	f06f 050c 	mvn.w	r5, #12
 8008e76:	e7d9      	b.n	8008e2c <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008e78:	4601      	mov	r1, r0
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	4632      	mov	r2, r6
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f7ff ffa4 	bl	8008dcc <tcp_recv_null>
 8008e84:	e7df      	b.n	8008e46 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 8008e86:	350d      	adds	r5, #13
 8008e88:	d0f3      	beq.n	8008e72 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 8008e8a:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 8008e8e:	67a6      	str	r6, [r4, #120]	@ 0x78
      return ERR_INPROGRESS;
 8008e90:	e7cc      	b.n	8008e2c <tcp_process_refused_data+0x18>
 8008e92:	bf00      	nop
 8008e94:	080102b2 	.word	0x080102b2
 8008e98:	080106dd 	.word	0x080106dd
 8008e9c:	0800f15a 	.word	0x0800f15a

08008ea0 <tcp_fasttmr>:
{
 8008ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8008ea4:	4d1b      	ldr	r5, [pc, #108]	@ (8008f14 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8008ea6:	4f1c      	ldr	r7, [pc, #112]	@ (8008f18 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8008ea8:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8008eaa:	4e1c      	ldr	r6, [pc, #112]	@ (8008f1c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8008eac:	3301      	adds	r3, #1
 8008eae:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8008eb0:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8008eb2:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8008eb6:	b90c      	cbnz	r4, 8008ebc <tcp_fasttmr+0x1c>
}
 8008eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8008ebc:	782b      	ldrb	r3, [r5, #0]
 8008ebe:	7fa2      	ldrb	r2, [r4, #30]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d024      	beq.n	8008f0e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8008ec4:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8008ec6:	8b63      	ldrh	r3, [r4, #26]
 8008ec8:	07d9      	lsls	r1, r3, #31
 8008eca:	d509      	bpl.n	8008ee0 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8008ecc:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8008ed0:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8008ed2:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8008ed4:	f002 fc2c 	bl	800b730 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008ed8:	8b63      	ldrh	r3, [r4, #26]
 8008eda:	f023 0303 	bic.w	r3, r3, #3
 8008ede:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8008ee0:	8b63      	ldrh	r3, [r4, #26]
 8008ee2:	071a      	lsls	r2, r3, #28
 8008ee4:	d505      	bpl.n	8008ef2 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008ee6:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8008eea:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008eec:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8008eee:	f7ff f9f1 	bl	80082d4 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8008ef2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
      next = pcb->next;
 8008ef4:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8008ef8:	b13b      	cbz	r3, 8008f0a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8008efa:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8008efc:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8008f00:	f7ff ff88 	bl	8008e14 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008f04:	7833      	ldrb	r3, [r6, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1d2      	bne.n	8008eb0 <tcp_fasttmr+0x10>
      pcb = next;
 8008f0a:	464c      	mov	r4, r9
 8008f0c:	e7d3      	b.n	8008eb6 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8008f0e:	68e4      	ldr	r4, [r4, #12]
 8008f10:	e7d1      	b.n	8008eb6 <tcp_fasttmr+0x16>
 8008f12:	bf00      	nop
 8008f14:	200333f9 	.word	0x200333f9
 8008f18:	20033400 	.word	0x20033400
 8008f1c:	200333fb 	.word	0x200333fb

08008f20 <tcp_shutdown>:
{
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4615      	mov	r5, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f24:	4604      	mov	r4, r0
 8008f26:	b948      	cbnz	r0, 8008f3c <tcp_shutdown+0x1c>
 8008f28:	4b16      	ldr	r3, [pc, #88]	@ (8008f84 <tcp_shutdown+0x64>)
 8008f2a:	f240 2207 	movw	r2, #519	@ 0x207
 8008f2e:	4916      	ldr	r1, [pc, #88]	@ (8008f88 <tcp_shutdown+0x68>)
 8008f30:	4816      	ldr	r0, [pc, #88]	@ (8008f8c <tcp_shutdown+0x6c>)
 8008f32:	f005 fa41 	bl	800e3b8 <iprintf>
 8008f36:	f06f 000f 	mvn.w	r0, #15
}
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 8008f3c:	7d03      	ldrb	r3, [r0, #20]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d017      	beq.n	8008f72 <tcp_shutdown+0x52>
  if (shut_rx) {
 8008f42:	b181      	cbz	r1, 8008f66 <tcp_shutdown+0x46>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008f44:	8b43      	ldrh	r3, [r0, #26]
 8008f46:	f043 0310 	orr.w	r3, r3, #16
 8008f4a:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 8008f4c:	b122      	cbz	r2, 8008f58 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 8008f4e:	2101      	movs	r1, #1
}
 8008f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8008f54:	f7ff be6a 	b.w	8008c2c <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 8008f58:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8008f5a:	b110      	cbz	r0, 8008f62 <tcp_shutdown+0x42>
      pbuf_free(pcb->refused_data);
 8008f5c:	f7fe fe46 	bl	8007bec <pbuf_free>
      pcb->refused_data = NULL;
 8008f60:	67a5      	str	r5, [r4, #120]	@ 0x78
  return ERR_OK;
 8008f62:	2000      	movs	r0, #0
 8008f64:	e7e9      	b.n	8008f3a <tcp_shutdown+0x1a>
  if (shut_tx) {
 8008f66:	2a00      	cmp	r2, #0
 8008f68:	d0fb      	beq.n	8008f62 <tcp_shutdown+0x42>
    switch (pcb->state) {
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d804      	bhi.n	8008f78 <tcp_shutdown+0x58>
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d804      	bhi.n	8008f7c <tcp_shutdown+0x5c>
 8008f72:	f06f 000a 	mvn.w	r0, #10
 8008f76:	e7e0      	b.n	8008f3a <tcp_shutdown+0x1a>
 8008f78:	2b07      	cmp	r3, #7
 8008f7a:	d1fa      	bne.n	8008f72 <tcp_shutdown+0x52>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	4620      	mov	r0, r4
 8008f80:	e7e6      	b.n	8008f50 <tcp_shutdown+0x30>
 8008f82:	bf00      	nop
 8008f84:	080102b2 	.word	0x080102b2
 8008f88:	08010703 	.word	0x08010703
 8008f8c:	0800f15a 	.word	0x0800f15a

08008f90 <tcp_slowtmr>:
{
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8008f94:	4dab      	ldr	r5, [pc, #684]	@ (8009244 <tcp_slowtmr+0x2b4>)
{
 8008f96:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 8008f98:	4aab      	ldr	r2, [pc, #684]	@ (8009248 <tcp_slowtmr+0x2b8>)
  ++tcp_ticks;
 8008f9a:	682b      	ldr	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8008f9c:	f8df 82dc 	ldr.w	r8, [pc, #732]	@ 800927c <tcp_slowtmr+0x2ec>
  ++tcp_ticks;
 8008fa0:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008fa2:	4eaa      	ldr	r6, [pc, #680]	@ (800924c <tcp_slowtmr+0x2bc>)
  ++tcp_ticks;
 8008fa4:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 8008fa6:	7813      	ldrb	r3, [r2, #0]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8008fac:	f8d8 4000 	ldr.w	r4, [r8]
  prev = NULL;
 8008fb0:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008fb2:	f8df 92b0 	ldr.w	r9, [pc, #688]	@ 8009264 <tcp_slowtmr+0x2d4>
  while (pcb != NULL) {
 8008fb6:	b96c      	cbnz	r4, 8008fd4 <tcp_slowtmr+0x44>
  pcb = tcp_tw_pcbs;
 8008fb8:	4fa5      	ldr	r7, [pc, #660]	@ (8009250 <tcp_slowtmr+0x2c0>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fba:	f8df 8290 	ldr.w	r8, [pc, #656]	@ 800924c <tcp_slowtmr+0x2bc>
  pcb = tcp_tw_pcbs;
 8008fbe:	683e      	ldr	r6, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fc0:	f8df 92bc 	ldr.w	r9, [pc, #700]	@ 8009280 <tcp_slowtmr+0x2f0>
 8008fc4:	f8df a29c 	ldr.w	sl, [pc, #668]	@ 8009264 <tcp_slowtmr+0x2d4>
  while (pcb != NULL) {
 8008fc8:	2e00      	cmp	r6, #0
 8008fca:	f040 81be 	bne.w	800934a <tcp_slowtmr+0x3ba>
}
 8008fce:	b007      	add	sp, #28
 8008fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008fd4:	7d23      	ldrb	r3, [r4, #20]
 8008fd6:	b933      	cbnz	r3, 8008fe6 <tcp_slowtmr+0x56>
 8008fd8:	4633      	mov	r3, r6
 8008fda:	f240 42be 	movw	r2, #1214	@ 0x4be
 8008fde:	499d      	ldr	r1, [pc, #628]	@ (8009254 <tcp_slowtmr+0x2c4>)
 8008fe0:	4648      	mov	r0, r9
 8008fe2:	f005 f9e9 	bl	800e3b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008fe6:	7d23      	ldrb	r3, [r4, #20]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d106      	bne.n	8008ffa <tcp_slowtmr+0x6a>
 8008fec:	4633      	mov	r3, r6
 8008fee:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8008ff2:	4999      	ldr	r1, [pc, #612]	@ (8009258 <tcp_slowtmr+0x2c8>)
 8008ff4:	4648      	mov	r0, r9
 8008ff6:	f005 f9df 	bl	800e3b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008ffa:	7d23      	ldrb	r3, [r4, #20]
 8008ffc:	2b0a      	cmp	r3, #10
 8008ffe:	d106      	bne.n	800900e <tcp_slowtmr+0x7e>
 8009000:	4633      	mov	r3, r6
 8009002:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8009006:	4995      	ldr	r1, [pc, #596]	@ (800925c <tcp_slowtmr+0x2cc>)
 8009008:	4648      	mov	r0, r9
 800900a:	f005 f9d5 	bl	800e3b8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800900e:	4b8e      	ldr	r3, [pc, #568]	@ (8009248 <tcp_slowtmr+0x2b8>)
 8009010:	7fa2      	ldrb	r2, [r4, #30]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	429a      	cmp	r2, r3
 8009016:	d104      	bne.n	8009022 <tcp_slowtmr+0x92>
      pcb = pcb->next;
 8009018:	f8d4 a00c 	ldr.w	sl, [r4, #12]
        ++pcb_reset;
 800901c:	4627      	mov	r7, r4
 800901e:	4654      	mov	r4, sl
 8009020:	e7c9      	b.n	8008fb6 <tcp_slowtmr+0x26>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009022:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8009024:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009026:	2a02      	cmp	r2, #2
 8009028:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800902c:	d174      	bne.n	8009118 <tcp_slowtmr+0x188>
 800902e:	2b05      	cmp	r3, #5
 8009030:	d974      	bls.n	800911c <tcp_slowtmr+0x18c>
      ++pcb_remove;
 8009032:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 8009036:	7d23      	ldrb	r3, [r4, #20]
 8009038:	2b06      	cmp	r3, #6
 800903a:	d10b      	bne.n	8009054 <tcp_slowtmr+0xc4>
      if (pcb->flags & TF_RXCLOSED) {
 800903c:	8b62      	ldrh	r2, [r4, #26]
 800903e:	06d1      	lsls	r1, r2, #27
 8009040:	d508      	bpl.n	8009054 <tcp_slowtmr+0xc4>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009042:	682a      	ldr	r2, [r5, #0]
 8009044:	6a21      	ldr	r1, [r4, #32]
 8009046:	1a52      	subs	r2, r2, r1
 8009048:	2a28      	cmp	r2, #40	@ 0x28
          ++pcb_remove;
 800904a:	bf84      	itt	hi
 800904c:	f10b 0b01 	addhi.w	fp, fp, #1
 8009050:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009054:	7a62      	ldrb	r2, [r4, #9]
 8009056:	0712      	lsls	r2, r2, #28
 8009058:	d505      	bpl.n	8009066 <tcp_slowtmr+0xd6>
 800905a:	2b04      	cmp	r3, #4
 800905c:	f000 8112 	beq.w	8009284 <tcp_slowtmr+0x2f4>
        ((pcb->state == ESTABLISHED) ||
 8009060:	2b07      	cmp	r3, #7
 8009062:	f000 810f 	beq.w	8009284 <tcp_slowtmr+0x2f4>
    pcb_reset = 0;
 8009066:	f04f 0a00 	mov.w	sl, #0
    if (pcb->ooseq != NULL &&
 800906a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800906c:	b163      	cbz	r3, 8009088 <tcp_slowtmr+0xf8>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800906e:	682b      	ldr	r3, [r5, #0]
 8009070:	6a22      	ldr	r2, [r4, #32]
 8009072:	1a9a      	subs	r2, r3, r2
 8009074:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8009078:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800907c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8009080:	d302      	bcc.n	8009088 <tcp_slowtmr+0xf8>
      tcp_free_ooseq(pcb);
 8009082:	4620      	mov	r0, r4
 8009084:	f7ff fb92 	bl	80087ac <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8009088:	7d23      	ldrb	r3, [r4, #20]
 800908a:	2b03      	cmp	r3, #3
 800908c:	f040 8127 	bne.w	80092de <tcp_slowtmr+0x34e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	6a22      	ldr	r2, [r4, #32]
 8009094:	1a9b      	subs	r3, r3, r2
 8009096:	2b28      	cmp	r3, #40	@ 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009098:	d803      	bhi.n	80090a2 <tcp_slowtmr+0x112>
    if (pcb_remove) {
 800909a:	f1bb 0f00 	cmp.w	fp, #0
 800909e:	f000 8133 	beq.w	8009308 <tcp_slowtmr+0x378>
      tcp_pcb_purge(pcb);
 80090a2:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80090a4:	f8d4 b090 	ldr.w	fp, [r4, #144]	@ 0x90
      tcp_pcb_purge(pcb);
 80090a8:	f7ff fb8a 	bl	80087c0 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80090ac:	f8d8 3000 	ldr.w	r3, [r8]
      if (prev != NULL) {
 80090b0:	2f00      	cmp	r7, #0
 80090b2:	f000 811c 	beq.w	80092ee <tcp_slowtmr+0x35e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80090b6:	42a3      	cmp	r3, r4
 80090b8:	d106      	bne.n	80090c8 <tcp_slowtmr+0x138>
 80090ba:	4b64      	ldr	r3, [pc, #400]	@ (800924c <tcp_slowtmr+0x2bc>)
 80090bc:	f240 526d 	movw	r2, #1389	@ 0x56d
 80090c0:	4967      	ldr	r1, [pc, #412]	@ (8009260 <tcp_slowtmr+0x2d0>)
 80090c2:	4868      	ldr	r0, [pc, #416]	@ (8009264 <tcp_slowtmr+0x2d4>)
 80090c4:	f005 f978 	bl	800e3b8 <iprintf>
        prev->next = pcb->next;
 80090c8:	68e3      	ldr	r3, [r4, #12]
 80090ca:	60fb      	str	r3, [r7, #12]
      if (pcb_reset) {
 80090cc:	f1ba 0f00 	cmp.w	sl, #0
 80090d0:	d00b      	beq.n	80090ea <tcp_slowtmr+0x15a>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80090d2:	8b23      	ldrh	r3, [r4, #24]
 80090d4:	4620      	mov	r0, r4
 80090d6:	9302      	str	r3, [sp, #8]
 80090d8:	8ae3      	ldrh	r3, [r4, #22]
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	1d23      	adds	r3, r4, #4
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	4623      	mov	r3, r4
 80090e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80090e4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80090e6:	f002 faab 	bl	800b640 <tcp_rst>
      err_arg = pcb->callback_arg;
 80090ea:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 80090ec:	4620      	mov	r0, r4
      pcb = pcb->next;
 80090ee:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      err_arg = pcb->callback_arg;
 80090f2:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 80090f4:	f7ff f92a 	bl	800834c <tcp_free>
      tcp_active_pcbs_changed = 0;
 80090f8:	4c5b      	ldr	r4, [pc, #364]	@ (8009268 <tcp_slowtmr+0x2d8>)
 80090fa:	2300      	movs	r3, #0
 80090fc:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80090fe:	f1bb 0f00 	cmp.w	fp, #0
 8009102:	d007      	beq.n	8009114 <tcp_slowtmr+0x184>
 8009104:	f06f 010c 	mvn.w	r1, #12
 8009108:	9805      	ldr	r0, [sp, #20]
 800910a:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800910c:	7823      	ldrb	r3, [r4, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	f47f af4c 	bne.w	8008fac <tcp_slowtmr+0x1c>
        ++pcb_reset;
 8009114:	463c      	mov	r4, r7
 8009116:	e781      	b.n	800901c <tcp_slowtmr+0x8c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009118:	2b0b      	cmp	r3, #11
 800911a:	e789      	b.n	8009030 <tcp_slowtmr+0xa0>
      if (pcb->persist_backoff > 0) {
 800911c:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 8009120:	2b00      	cmp	r3, #0
 8009122:	d045      	beq.n	80091b0 <tcp_slowtmr+0x220>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009124:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009126:	b133      	cbz	r3, 8009136 <tcp_slowtmr+0x1a6>
 8009128:	4633      	mov	r3, r6
 800912a:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800912e:	494f      	ldr	r1, [pc, #316]	@ (800926c <tcp_slowtmr+0x2dc>)
 8009130:	4648      	mov	r0, r9
 8009132:	f005 f941 	bl	800e3b8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009136:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8009138:	b933      	cbnz	r3, 8009148 <tcp_slowtmr+0x1b8>
 800913a:	4b44      	ldr	r3, [pc, #272]	@ (800924c <tcp_slowtmr+0x2bc>)
 800913c:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009140:	494b      	ldr	r1, [pc, #300]	@ (8009270 <tcp_slowtmr+0x2e0>)
 8009142:	4848      	ldr	r0, [pc, #288]	@ (8009264 <tcp_slowtmr+0x2d4>)
 8009144:	f005 f938 	bl	800e3b8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009148:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800914c:	2b0b      	cmp	r3, #11
 800914e:	f63f af70 	bhi.w	8009032 <tcp_slowtmr+0xa2>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009152:	f894 2099 	ldrb.w	r2, [r4, #153]	@ 0x99
 8009156:	4b47      	ldr	r3, [pc, #284]	@ (8009274 <tcp_slowtmr+0x2e4>)
 8009158:	4413      	add	r3, r2
 800915a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800915e:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8009162:	4293      	cmp	r3, r2
 8009164:	d30b      	bcc.n	800917e <tcp_slowtmr+0x1ee>
            if (pcb->snd_wnd == 0) {
 8009166:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800916a:	b189      	cbz	r1, 8009190 <tcp_slowtmr+0x200>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800916c:	4620      	mov	r0, r4
 800916e:	f002 f81f 	bl	800b1b0 <tcp_split_unsent_seg>
 8009172:	b990      	cbnz	r0, 800919a <tcp_slowtmr+0x20a>
                if (tcp_output(pcb) == ERR_OK) {
 8009174:	4620      	mov	r0, r4
 8009176:	f002 fadb 	bl	800b730 <tcp_output>
 800917a:	b130      	cbz	r0, 800918a <tcp_slowtmr+0x1fa>
 800917c:	e00d      	b.n	800919a <tcp_slowtmr+0x20a>
            pcb->persist_cnt++;
 800917e:	3301      	adds	r3, #1
 8009180:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 8009182:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 8009184:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009188:	d2ed      	bcs.n	8009166 <tcp_slowtmr+0x1d6>
    pcb_remove = 0;
 800918a:	f04f 0b00 	mov.w	fp, #0
 800918e:	e752      	b.n	8009036 <tcp_slowtmr+0xa6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009190:	4620      	mov	r0, r4
 8009192:	f002 fcd5 	bl	800bb40 <tcp_zero_window_probe>
 8009196:	2800      	cmp	r0, #0
 8009198:	d1f7      	bne.n	800918a <tcp_slowtmr+0x1fa>
              pcb->persist_cnt = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80091a0:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 80091a4:	2b06      	cmp	r3, #6
 80091a6:	d8f0      	bhi.n	800918a <tcp_slowtmr+0x1fa>
                pcb->persist_backoff++;
 80091a8:	3301      	adds	r3, #1
 80091aa:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
 80091ae:	e7ec      	b.n	800918a <tcp_slowtmr+0x1fa>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80091b0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80091b2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80091b6:	4293      	cmp	r3, r2
          ++pcb->rtime;
 80091b8:	bf9c      	itt	ls
 80091ba:	3301      	addls	r3, #1
 80091bc:	8623      	strhls	r3, [r4, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80091be:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80091c2:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	@ 0x30
 80091c6:	429a      	cmp	r2, r3
 80091c8:	dbdf      	blt.n	800918a <tcp_slowtmr+0x1fa>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80091ca:	4620      	mov	r0, r4
 80091cc:	f002 f980 	bl	800b4d0 <tcp_rexmit_rto_prepare>
 80091d0:	b128      	cbz	r0, 80091de <tcp_slowtmr+0x24e>
 80091d2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1d8      	bne.n	800918a <tcp_slowtmr+0x1fa>
 80091d8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0d5      	beq.n	800918a <tcp_slowtmr+0x1fa>
            if (pcb->state != SYN_SENT) {
 80091de:	7d23      	ldrb	r3, [r4, #20]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d014      	beq.n	800920e <tcp_slowtmr+0x27e>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80091e4:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	@ 0x3c
 80091e8:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 80091ec:	4922      	ldr	r1, [pc, #136]	@ (8009278 <tcp_slowtmr+0x2e8>)
 80091ee:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80091f2:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80091f6:	2a0c      	cmp	r2, #12
 80091f8:	bf28      	it	cs
 80091fa:	220c      	movcs	r2, #12
 80091fc:	5c8a      	ldrb	r2, [r1, r2]
 80091fe:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009200:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009204:	4293      	cmp	r3, r2
 8009206:	bfa8      	it	ge
 8009208:	4613      	movge	r3, r2
 800920a:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800920e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	@ 0x48
            pcb->rtime = 0;
 8009212:	2200      	movs	r2, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009214:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009218:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800921a:	4283      	cmp	r3, r0
            pcb->rtime = 0;
 800921c:	8622      	strh	r2, [r4, #48]	@ 0x30
            pcb->cwnd = pcb->mss;
 800921e:	f8a4 1048 	strh.w	r1, [r4, #72]	@ 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8009222:	bf28      	it	cs
 8009224:	4603      	movcs	r3, r0
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009226:	0048      	lsls	r0, r1, #1
            pcb->bytes_acked = 0;
 8009228:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
 800922c:	085b      	lsrs	r3, r3, #1
 800922e:	b280      	uxth	r0, r0
 8009230:	4283      	cmp	r3, r0
 8009232:	bf38      	it	cc
 8009234:	4603      	movcc	r3, r0
            tcp_rexmit_rto_commit(pcb);
 8009236:	4620      	mov	r0, r4
 8009238:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 800923c:	f002 fc22 	bl	800ba84 <tcp_rexmit_rto_commit>
 8009240:	e7a3      	b.n	800918a <tcp_slowtmr+0x1fa>
 8009242:	bf00      	nop
 8009244:	2003340c 	.word	0x2003340c
 8009248:	200333f9 	.word	0x200333f9
 800924c:	080102b2 	.word	0x080102b2
 8009250:	200333fc 	.word	0x200333fc
 8009254:	0801071d 	.word	0x0801071d
 8009258:	08010747 	.word	0x08010747
 800925c:	08010771 	.word	0x08010771
 8009260:	08010805 	.word	0x08010805
 8009264:	0800f15a 	.word	0x0800f15a
 8009268:	200333fb 	.word	0x200333fb
 800926c:	0801079e 	.word	0x0801079e
 8009270:	080107d0 	.word	0x080107d0
 8009274:	080108e8 	.word	0x080108e8
 8009278:	080108ef 	.word	0x080108ef
 800927c:	20033400 	.word	0x20033400
 8009280:	0801085a 	.word	0x0801085a
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009284:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009286:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800928a:	6829      	ldr	r1, [r5, #0]
 800928c:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800928e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8009292:	f503 2224 	add.w	r2, r3, #671744	@ 0xa4000
 8009296:	f602 42b8 	addw	r2, r2, #3256	@ 0xcb8
 800929a:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800929e:	4291      	cmp	r1, r2
 80092a0:	d906      	bls.n	80092b0 <tcp_slowtmr+0x320>
        ++pcb_remove;
 80092a2:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 80092a6:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 80092aa:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 80092ae:	e6dc      	b.n	800906a <tcp_slowtmr+0xda>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80092b0:	f894 209b 	ldrb.w	r2, [r4, #155]	@ 0x9b
 80092b4:	f8df c118 	ldr.w	ip, [pc, #280]	@ 80093d0 <tcp_slowtmr+0x440>
 80092b8:	fb0c 3302 	mla	r3, ip, r2, r3
                 / TCP_SLOW_INTERVAL) {
 80092bc:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80092c0:	4299      	cmp	r1, r3
 80092c2:	f67f aed0 	bls.w	8009066 <tcp_slowtmr+0xd6>
        err = tcp_keepalive(pcb);
 80092c6:	4620      	mov	r0, r4
 80092c8:	f002 fc12 	bl	800baf0 <tcp_keepalive>
        if (err == ERR_OK) {
 80092cc:	2800      	cmp	r0, #0
 80092ce:	f47f aeca 	bne.w	8009066 <tcp_slowtmr+0xd6>
          pcb->keep_cnt_sent++;
 80092d2:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 80092d6:	3301      	adds	r3, #1
 80092d8:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
 80092dc:	e6c3      	b.n	8009066 <tcp_slowtmr+0xd6>
    if (pcb->state == LAST_ACK) {
 80092de:	2b09      	cmp	r3, #9
 80092e0:	f47f aedb 	bne.w	800909a <tcp_slowtmr+0x10a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	6a22      	ldr	r2, [r4, #32]
 80092e8:	1a9b      	subs	r3, r3, r2
 80092ea:	2bf0      	cmp	r3, #240	@ 0xf0
 80092ec:	e6d4      	b.n	8009098 <tcp_slowtmr+0x108>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80092ee:	42a3      	cmp	r3, r4
 80092f0:	d006      	beq.n	8009300 <tcp_slowtmr+0x370>
 80092f2:	4633      	mov	r3, r6
 80092f4:	f240 5271 	movw	r2, #1393	@ 0x571
 80092f8:	492f      	ldr	r1, [pc, #188]	@ (80093b8 <tcp_slowtmr+0x428>)
 80092fa:	4830      	ldr	r0, [pc, #192]	@ (80093bc <tcp_slowtmr+0x42c>)
 80092fc:	f005 f85c 	bl	800e3b8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009300:	68e3      	ldr	r3, [r4, #12]
 8009302:	f8c8 3000 	str.w	r3, [r8]
 8009306:	e6e1      	b.n	80090cc <tcp_slowtmr+0x13c>
      ++prev->polltmr;
 8009308:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800930a:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800930c:	3301      	adds	r3, #1
      pcb = pcb->next;
 800930e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      ++prev->polltmr;
 8009312:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8009314:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8009316:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009318:	f63f ae80 	bhi.w	800901c <tcp_slowtmr+0x8c>
        tcp_active_pcbs_changed = 0;
 800931c:	4f28      	ldr	r7, [pc, #160]	@ (80093c0 <tcp_slowtmr+0x430>)
        TCP_EVENT_POLL(prev, err);
 800931e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
        prev->polltmr = 0;
 8009322:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8009326:	f887 b000 	strb.w	fp, [r7]
        TCP_EVENT_POLL(prev, err);
 800932a:	b91b      	cbnz	r3, 8009334 <tcp_slowtmr+0x3a4>
          tcp_output(prev);
 800932c:	4620      	mov	r0, r4
 800932e:	f002 f9ff 	bl	800b730 <tcp_output>
 8009332:	e673      	b.n	800901c <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 8009334:	4621      	mov	r1, r4
 8009336:	6920      	ldr	r0, [r4, #16]
 8009338:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800933a:	783b      	ldrb	r3, [r7, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	f47f ae35 	bne.w	8008fac <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8009342:	2800      	cmp	r0, #0
 8009344:	f47f ae6a 	bne.w	800901c <tcp_slowtmr+0x8c>
 8009348:	e7f0      	b.n	800932c <tcp_slowtmr+0x39c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800934a:	7d33      	ldrb	r3, [r6, #20]
 800934c:	2b0a      	cmp	r3, #10
 800934e:	d006      	beq.n	800935e <tcp_slowtmr+0x3ce>
 8009350:	4643      	mov	r3, r8
 8009352:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8009356:	4649      	mov	r1, r9
 8009358:	4650      	mov	r0, sl
 800935a:	f005 f82d 	bl	800e3b8 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800935e:	682b      	ldr	r3, [r5, #0]
 8009360:	6a32      	ldr	r2, [r6, #32]
 8009362:	1a9b      	subs	r3, r3, r2
 8009364:	2bf0      	cmp	r3, #240	@ 0xf0
 8009366:	d910      	bls.n	800938a <tcp_slowtmr+0x3fa>
      tcp_pcb_purge(pcb);
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff fa29 	bl	80087c0 <tcp_pcb_purge>
      if (prev != NULL) {
 800936e:	b97c      	cbnz	r4, 8009390 <tcp_slowtmr+0x400>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	42b3      	cmp	r3, r6
 8009374:	d006      	beq.n	8009384 <tcp_slowtmr+0x3f4>
 8009376:	4b13      	ldr	r3, [pc, #76]	@ (80093c4 <tcp_slowtmr+0x434>)
 8009378:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800937c:	4912      	ldr	r1, [pc, #72]	@ (80093c8 <tcp_slowtmr+0x438>)
 800937e:	480f      	ldr	r0, [pc, #60]	@ (80093bc <tcp_slowtmr+0x42c>)
 8009380:	f005 f81a 	bl	800e3b8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009384:	68f3      	ldr	r3, [r6, #12]
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	e00e      	b.n	80093a8 <tcp_slowtmr+0x418>
      pcb = pcb->next;
 800938a:	4634      	mov	r4, r6
 800938c:	68f6      	ldr	r6, [r6, #12]
 800938e:	e61b      	b.n	8008fc8 <tcp_slowtmr+0x38>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	42b3      	cmp	r3, r6
 8009394:	d106      	bne.n	80093a4 <tcp_slowtmr+0x414>
 8009396:	4b0b      	ldr	r3, [pc, #44]	@ (80093c4 <tcp_slowtmr+0x434>)
 8009398:	f240 52af 	movw	r2, #1455	@ 0x5af
 800939c:	490b      	ldr	r1, [pc, #44]	@ (80093cc <tcp_slowtmr+0x43c>)
 800939e:	4807      	ldr	r0, [pc, #28]	@ (80093bc <tcp_slowtmr+0x42c>)
 80093a0:	f005 f80a 	bl	800e3b8 <iprintf>
        prev->next = pcb->next;
 80093a4:	68f3      	ldr	r3, [r6, #12]
 80093a6:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 80093a8:	f8d6 b00c 	ldr.w	fp, [r6, #12]
      tcp_free(pcb2);
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7fe ffcd 	bl	800834c <tcp_free>
      pcb = pcb->next;
 80093b2:	465e      	mov	r6, fp
 80093b4:	e608      	b.n	8008fc8 <tcp_slowtmr+0x38>
 80093b6:	bf00      	nop
 80093b8:	08010830 	.word	0x08010830
 80093bc:	0800f15a 	.word	0x0800f15a
 80093c0:	200333fb 	.word	0x200333fb
 80093c4:	080102b2 	.word	0x080102b2
 80093c8:	080108b0 	.word	0x080108b0
 80093cc:	08010889 	.word	0x08010889
 80093d0:	000124f8 	.word	0x000124f8

080093d4 <tcp_tmr>:
{
 80093d4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80093d6:	f7ff fd63 	bl	8008ea0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80093da:	4a06      	ldr	r2, [pc, #24]	@ (80093f4 <tcp_tmr+0x20>)
 80093dc:	7813      	ldrb	r3, [r2, #0]
 80093de:	3301      	adds	r3, #1
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	7013      	strb	r3, [r2, #0]
 80093e4:	07db      	lsls	r3, r3, #31
 80093e6:	d503      	bpl.n	80093f0 <tcp_tmr+0x1c>
}
 80093e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 80093ec:	f7ff bdd0 	b.w	8008f90 <tcp_slowtmr>
}
 80093f0:	bd08      	pop	{r3, pc}
 80093f2:	bf00      	nop
 80093f4:	200333fa 	.word	0x200333fa

080093f8 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 80093f8:	4a09      	ldr	r2, [pc, #36]	@ (8009420 <tcp_get_next_optbyte+0x28>)
 80093fa:	8813      	ldrh	r3, [r2, #0]
 80093fc:	1c59      	adds	r1, r3, #1
 80093fe:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009400:	4a08      	ldr	r2, [pc, #32]	@ (8009424 <tcp_get_next_optbyte+0x2c>)
 8009402:	6812      	ldr	r2, [r2, #0]
 8009404:	b11a      	cbz	r2, 800940e <tcp_get_next_optbyte+0x16>
 8009406:	4908      	ldr	r1, [pc, #32]	@ (8009428 <tcp_get_next_optbyte+0x30>)
 8009408:	8809      	ldrh	r1, [r1, #0]
 800940a:	428b      	cmp	r3, r1
 800940c:	d204      	bcs.n	8009418 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800940e:	4a07      	ldr	r2, [pc, #28]	@ (800942c <tcp_get_next_optbyte+0x34>)
 8009410:	6812      	ldr	r2, [r2, #0]
 8009412:	4413      	add	r3, r2
 8009414:	7d18      	ldrb	r0, [r3, #20]
 8009416:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009418:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 800941a:	b2db      	uxtb	r3, r3
 800941c:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 800941e:	4770      	bx	lr
 8009420:	20033428 	.word	0x20033428
 8009424:	2003342c 	.word	0x2003342c
 8009428:	20033430 	.word	0x20033430
 800942c:	20033434 	.word	0x20033434

08009430 <tcp_oos_insert_segment>:
{
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009434:	4604      	mov	r4, r0
 8009436:	b930      	cbnz	r0, 8009446 <tcp_oos_insert_segment+0x16>
 8009438:	4b1d      	ldr	r3, [pc, #116]	@ (80094b0 <tcp_oos_insert_segment+0x80>)
 800943a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800943e:	491d      	ldr	r1, [pc, #116]	@ (80094b4 <tcp_oos_insert_segment+0x84>)
 8009440:	481d      	ldr	r0, [pc, #116]	@ (80094b8 <tcp_oos_insert_segment+0x88>)
 8009442:	f004 ffb9 	bl	800e3b8 <iprintf>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009446:	68e3      	ldr	r3, [r4, #12]
 8009448:	8998      	ldrh	r0, [r3, #12]
 800944a:	f7fd fcb9 	bl	8006dc0 <lwip_htons>
 800944e:	07c2      	lsls	r2, r0, #31
 8009450:	d413      	bmi.n	800947a <tcp_oos_insert_segment+0x4a>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009452:	4e1a      	ldr	r6, [pc, #104]	@ (80094bc <tcp_oos_insert_segment+0x8c>)
 8009454:	68ef      	ldr	r7, [r5, #12]
 8009456:	8923      	ldrh	r3, [r4, #8]
 8009458:	6830      	ldr	r0, [r6, #0]
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	4403      	add	r3, r0
 800945e:	892a      	ldrh	r2, [r5, #8]
 8009460:	1a5b      	subs	r3, r3, r1
 8009462:	1a9a      	subs	r2, r3, r2
    while (next &&
 8009464:	2a00      	cmp	r2, #0
 8009466:	da0e      	bge.n	8009486 <tcp_oos_insert_segment+0x56>
    if (next &&
 8009468:	2b00      	cmp	r3, #0
 800946a:	dd0a      	ble.n	8009482 <tcp_oos_insert_segment+0x52>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800946c:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 800946e:	6860      	ldr	r0, [r4, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009470:	b289      	uxth	r1, r1
 8009472:	8121      	strh	r1, [r4, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009474:	f7fe fcb6 	bl	8007de4 <pbuf_realloc>
 8009478:	e003      	b.n	8009482 <tcp_oos_insert_segment+0x52>
    tcp_segs_free(next);
 800947a:	4628      	mov	r0, r5
 800947c:	f7ff f8bc 	bl	80085f8 <tcp_segs_free>
    next = NULL;
 8009480:	2500      	movs	r5, #0
  cseg->next = next;
 8009482:	6025      	str	r5, [r4, #0]
}
 8009484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009486:	89b8      	ldrh	r0, [r7, #12]
 8009488:	f7fd fc9a 	bl	8006dc0 <lwip_htons>
 800948c:	07c3      	lsls	r3, r0, #31
 800948e:	d507      	bpl.n	80094a0 <tcp_oos_insert_segment+0x70>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009490:	68e3      	ldr	r3, [r4, #12]
 8009492:	2001      	movs	r0, #1
 8009494:	899f      	ldrh	r7, [r3, #12]
 8009496:	f7fd fc93 	bl	8006dc0 <lwip_htons>
 800949a:	68e3      	ldr	r3, [r4, #12]
 800949c:	4307      	orrs	r7, r0
 800949e:	819f      	strh	r7, [r3, #12]
      next = next->next;
 80094a0:	682f      	ldr	r7, [r5, #0]
      tcp_seg_free(old_seg);
 80094a2:	4628      	mov	r0, r5
 80094a4:	f7ff f89a 	bl	80085dc <tcp_seg_free>
    while (next &&
 80094a8:	2f00      	cmp	r7, #0
 80094aa:	d0e9      	beq.n	8009480 <tcp_oos_insert_segment+0x50>
      next = next->next;
 80094ac:	463d      	mov	r5, r7
 80094ae:	e7d1      	b.n	8009454 <tcp_oos_insert_segment+0x24>
 80094b0:	080108fc 	.word	0x080108fc
 80094b4:	0801092e 	.word	0x0801092e
 80094b8:	0800f15a 	.word	0x0800f15a
 80094bc:	20033424 	.word	0x20033424

080094c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80094c2:	4605      	mov	r5, r0
 80094c4:	b930      	cbnz	r0, 80094d4 <tcp_parseopt+0x14>
 80094c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009540 <tcp_parseopt+0x80>)
 80094c8:	f240 727d 	movw	r2, #1917	@ 0x77d
 80094cc:	491d      	ldr	r1, [pc, #116]	@ (8009544 <tcp_parseopt+0x84>)
 80094ce:	481e      	ldr	r0, [pc, #120]	@ (8009548 <tcp_parseopt+0x88>)
 80094d0:	f004 ff72 	bl	800e3b8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80094d4:	4b1d      	ldr	r3, [pc, #116]	@ (800954c <tcp_parseopt+0x8c>)
 80094d6:	881e      	ldrh	r6, [r3, #0]
 80094d8:	b346      	cbz	r6, 800952c <tcp_parseopt+0x6c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80094da:	4c1d      	ldr	r4, [pc, #116]	@ (8009550 <tcp_parseopt+0x90>)
 80094dc:	2300      	movs	r3, #0
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80094de:	8023      	strh	r3, [r4, #0]
 80094e0:	e01a      	b.n	8009518 <tcp_parseopt+0x58>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80094e2:	f7ff ff89 	bl	80093f8 <tcp_get_next_optbyte>
 80094e6:	2804      	cmp	r0, #4
 80094e8:	d120      	bne.n	800952c <tcp_parseopt+0x6c>
 80094ea:	8823      	ldrh	r3, [r4, #0]
 80094ec:	3301      	adds	r3, #1
 80094ee:	42b3      	cmp	r3, r6
 80094f0:	da1c      	bge.n	800952c <tcp_parseopt+0x6c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80094f2:	f7ff ff81 	bl	80093f8 <tcp_get_next_optbyte>
 80094f6:	0207      	lsls	r7, r0, #8
          mss |= tcp_get_next_optbyte();
 80094f8:	f7ff ff7e 	bl	80093f8 <tcp_get_next_optbyte>
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80094fc:	f240 5192 	movw	r1, #1426	@ 0x592
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009500:	b2bf      	uxth	r7, r7
          mss |= tcp_get_next_optbyte();
 8009502:	ea40 0307 	orr.w	r3, r0, r7
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009506:	f240 5091 	movw	r0, #1425	@ 0x591
          mss |= tcp_get_next_optbyte();
 800950a:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800950c:	1e5a      	subs	r2, r3, #1
 800950e:	b292      	uxth	r2, r2
 8009510:	4282      	cmp	r2, r0
 8009512:	bf88      	it	hi
 8009514:	460b      	movhi	r3, r1
 8009516:	866b      	strh	r3, [r5, #50]	@ 0x32
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009518:	8823      	ldrh	r3, [r4, #0]
 800951a:	42b3      	cmp	r3, r6
 800951c:	d206      	bcs.n	800952c <tcp_parseopt+0x6c>
      u8_t opt = tcp_get_next_optbyte();
 800951e:	f7ff ff6b 	bl	80093f8 <tcp_get_next_optbyte>
      switch (opt) {
 8009522:	2801      	cmp	r0, #1
 8009524:	d0f8      	beq.n	8009518 <tcp_parseopt+0x58>
 8009526:	2802      	cmp	r0, #2
 8009528:	d0db      	beq.n	80094e2 <tcp_parseopt+0x22>
 800952a:	b900      	cbnz	r0, 800952e <tcp_parseopt+0x6e>
      }
    }
  }
}
 800952c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          data = tcp_get_next_optbyte();
 800952e:	f7ff ff63 	bl	80093f8 <tcp_get_next_optbyte>
          if (data < 2) {
 8009532:	2801      	cmp	r0, #1
 8009534:	d9fa      	bls.n	800952c <tcp_parseopt+0x6c>
          tcp_optidx += data - 2;
 8009536:	8823      	ldrh	r3, [r4, #0]
 8009538:	3b02      	subs	r3, #2
 800953a:	4403      	add	r3, r0
 800953c:	e7cf      	b.n	80094de <tcp_parseopt+0x1e>
 800953e:	bf00      	nop
 8009540:	080108fc 	.word	0x080108fc
 8009544:	08010953 	.word	0x08010953
 8009548:	0800f15a 	.word	0x0800f15a
 800954c:	20033432 	.word	0x20033432
 8009550:	20033428 	.word	0x20033428

08009554 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8009554:	4b0c      	ldr	r3, [pc, #48]	@ (8009588 <tcp_input_delayed_close+0x34>)
{
 8009556:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 8009558:	781b      	ldrb	r3, [r3, #0]
{
 800955a:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800955c:	f013 0010 	ands.w	r0, r3, #16
 8009560:	d011      	beq.n	8009586 <tcp_input_delayed_close+0x32>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009562:	8b63      	ldrh	r3, [r4, #26]
 8009564:	06db      	lsls	r3, r3, #27
 8009566:	d406      	bmi.n	8009576 <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009568:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800956c:	b11b      	cbz	r3, 8009576 <tcp_input_delayed_close+0x22>
 800956e:	f06f 010e 	mvn.w	r1, #14
 8009572:	6920      	ldr	r0, [r4, #16]
 8009574:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009576:	4621      	mov	r1, r4
 8009578:	4804      	ldr	r0, [pc, #16]	@ (800958c <tcp_input_delayed_close+0x38>)
 800957a:	f7ff f953 	bl	8008824 <tcp_pcb_remove>
    tcp_free(pcb);
 800957e:	4620      	mov	r0, r4
 8009580:	f7fe fee4 	bl	800834c <tcp_free>
 8009584:	2001      	movs	r0, #1
}
 8009586:	bd10      	pop	{r4, pc}
 8009588:	20033418 	.word	0x20033418
 800958c:	20033400 	.word	0x20033400

08009590 <tcp_free_acked_segments.constprop.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8009590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	4607      	mov	r7, r0
 8009596:	460c      	mov	r4, r1
 8009598:	4690      	mov	r8, r2
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800959a:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 8009648 <tcp_free_acked_segments.constprop.0+0xb8>
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800959e:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800964c <tcp_free_acked_segments.constprop.0+0xbc>
  while (seg_list != NULL &&
 80095a2:	2c00      	cmp	r4, #0
 80095a4:	d044      	beq.n	8009630 <tcp_free_acked_segments.constprop.0+0xa0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80095a6:	68e3      	ldr	r3, [r4, #12]
 80095a8:	4626      	mov	r6, r4
 80095aa:	6858      	ldr	r0, [r3, #4]
 80095ac:	f7fd fc0b 	bl	8006dc6 <lwip_htonl>
 80095b0:	68e3      	ldr	r3, [r4, #12]
 80095b2:	4683      	mov	fp, r0
 80095b4:	8925      	ldrh	r5, [r4, #8]
 80095b6:	8998      	ldrh	r0, [r3, #12]
 80095b8:	f7fd fc02 	bl	8006dc0 <lwip_htons>
 80095bc:	f8da 3000 	ldr.w	r3, [sl]
 80095c0:	f010 0003 	ands.w	r0, r0, #3
 80095c4:	eba5 0503 	sub.w	r5, r5, r3
 80095c8:	bf18      	it	ne
 80095ca:	2001      	movne	r0, #1
 80095cc:	445d      	add	r5, fp
 80095ce:	4405      	add	r5, r0
  while (seg_list != NULL &&
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	dc2e      	bgt.n	8009632 <tcp_free_acked_segments.constprop.0+0xa2>
    clen = pbuf_clen(next->p);
 80095d4:	6870      	ldr	r0, [r6, #4]
    seg_list = seg_list->next;
 80095d6:	6824      	ldr	r4, [r4, #0]
    clen = pbuf_clen(next->p);
 80095d8:	f7fe fc5c 	bl	8007e94 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80095dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
    clen = pbuf_clen(next->p);
 80095e0:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80095e2:	4283      	cmp	r3, r0
 80095e4:	d206      	bcs.n	80095f4 <tcp_free_acked_segments.constprop.0+0x64>
 80095e6:	4b14      	ldr	r3, [pc, #80]	@ (8009638 <tcp_free_acked_segments.constprop.0+0xa8>)
 80095e8:	f240 4257 	movw	r2, #1111	@ 0x457
 80095ec:	4913      	ldr	r1, [pc, #76]	@ (800963c <tcp_free_acked_segments.constprop.0+0xac>)
 80095ee:	4814      	ldr	r0, [pc, #80]	@ (8009640 <tcp_free_acked_segments.constprop.0+0xb0>)
 80095f0:	f004 fee2 	bl	800e3b8 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80095f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
    tcp_seg_free(next);
 80095f8:	4630      	mov	r0, r6
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095fa:	f8b9 2000 	ldrh.w	r2, [r9]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80095fe:	1b5b      	subs	r3, r3, r5
 8009600:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009604:	8933      	ldrh	r3, [r6, #8]
 8009606:	4413      	add	r3, r2
 8009608:	f8a9 3000 	strh.w	r3, [r9]
    tcp_seg_free(next);
 800960c:	f7fe ffe6 	bl	80085dc <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8009610:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0c4      	beq.n	80095a2 <tcp_free_acked_segments.constprop.0+0x12>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009618:	2c00      	cmp	r4, #0
 800961a:	d1c4      	bne.n	80095a6 <tcp_free_acked_segments.constprop.0+0x16>
 800961c:	f1b8 0f00 	cmp.w	r8, #0
 8009620:	d106      	bne.n	8009630 <tcp_free_acked_segments.constprop.0+0xa0>
 8009622:	4b05      	ldr	r3, [pc, #20]	@ (8009638 <tcp_free_acked_segments.constprop.0+0xa8>)
 8009624:	f240 4261 	movw	r2, #1121	@ 0x461
 8009628:	4906      	ldr	r1, [pc, #24]	@ (8009644 <tcp_free_acked_segments.constprop.0+0xb4>)
 800962a:	4805      	ldr	r0, [pc, #20]	@ (8009640 <tcp_free_acked_segments.constprop.0+0xb0>)
 800962c:	f004 fec4 	bl	800e3b8 <iprintf>
    seg_list = seg_list->next;
 8009630:	2600      	movs	r6, #0
}
 8009632:	4630      	mov	r0, r6
 8009634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009638:	080108fc 	.word	0x080108fc
 800963c:	0801096d 	.word	0x0801096d
 8009640:	0800f15a 	.word	0x0800f15a
 8009644:	08010995 	.word	0x08010995
 8009648:	20033420 	.word	0x20033420
 800964c:	2003341c 	.word	0x2003341c

08009650 <tcp_receive>:
{
 8009650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009654:	7d03      	ldrb	r3, [r0, #20]
{
 8009656:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009658:	2b03      	cmp	r3, #3
 800965a:	d806      	bhi.n	800966a <tcp_receive+0x1a>
 800965c:	4b35      	ldr	r3, [pc, #212]	@ (8009734 <tcp_receive+0xe4>)
 800965e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8009662:	4935      	ldr	r1, [pc, #212]	@ (8009738 <tcp_receive+0xe8>)
 8009664:	4835      	ldr	r0, [pc, #212]	@ (800973c <tcp_receive+0xec>)
 8009666:	f004 fea7 	bl	800e3b8 <iprintf>
  if (flags & TCP_ACK) {
 800966a:	4a35      	ldr	r2, [pc, #212]	@ (8009740 <tcp_receive+0xf0>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800966c:	4e35      	ldr	r6, [pc, #212]	@ (8009744 <tcp_receive+0xf4>)
  if (flags & TCP_ACK) {
 800966e:	7812      	ldrb	r2, [r2, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009670:	6833      	ldr	r3, [r6, #0]
  if (flags & TCP_ACK) {
 8009672:	f012 0f10 	tst.w	r2, #16
 8009676:	4f34      	ldr	r7, [pc, #208]	@ (8009748 <tcp_receive+0xf8>)
 8009678:	f000 8097 	beq.w	80097aa <tcp_receive+0x15a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800967c:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 8009750 <tcp_receive+0x100>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009680:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009684:	f8d9 2000 	ldr.w	r2, [r9]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009688:	e9d4 0c15 	ldrd	r0, ip, [r4, #84]	@ 0x54
 800968c:	eba0 0e03 	sub.w	lr, r0, r3
 8009690:	f1be 0f00 	cmp.w	lr, #0
 8009694:	db0c      	blt.n	80096b0 <tcp_receive+0x60>
 8009696:	4298      	cmp	r0, r3
 8009698:	d103      	bne.n	80096a2 <tcp_receive+0x52>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800969a:	ebac 0002 	sub.w	r0, ip, r2
 800969e:	2800      	cmp	r0, #0
 80096a0:	db06      	blt.n	80096b0 <tcp_receive+0x60>
 80096a2:	4594      	cmp	ip, r2
 80096a4:	d113      	bne.n	80096ce <tcp_receive+0x7e>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80096a6:	4829      	ldr	r0, [pc, #164]	@ (800974c <tcp_receive+0xfc>)
 80096a8:	6800      	ldr	r0, [r0, #0]
 80096aa:	89c0      	ldrh	r0, [r0, #14]
 80096ac:	4288      	cmp	r0, r1
 80096ae:	d90e      	bls.n	80096ce <tcp_receive+0x7e>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80096b0:	4826      	ldr	r0, [pc, #152]	@ (800974c <tcp_receive+0xfc>)
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80096b2:	f8b4 8062 	ldrh.w	r8, [r4, #98]	@ 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80096b6:	6800      	ldr	r0, [r0, #0]
 80096b8:	89c0      	ldrh	r0, [r0, #14]
 80096ba:	fa1f fe80 	uxth.w	lr, r0
 80096be:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80096c2:	45f0      	cmp	r8, lr
      pcb->snd_wl2 = ackno;
 80096c4:	e9c4 3215 	strd	r3, r2, [r4, #84]	@ 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 80096c8:	bf38      	it	cc
 80096ca:	f8a4 0062 	strhcc.w	r0, [r4, #98]	@ 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80096ce:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80096d0:	1a13      	subs	r3, r2, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f300 8175 	bgt.w	80099c2 <tcp_receive+0x372>
      if (tcplen == 0) {
 80096d8:	883b      	ldrh	r3, [r7, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f040 816d 	bne.w	80099ba <tcp_receive+0x36a>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80096e0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80096e4:	4461      	add	r1, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80096e6:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 80096e8:	442b      	add	r3, r5
 80096ea:	428b      	cmp	r3, r1
 80096ec:	f040 8165 	bne.w	80099ba <tcp_receive+0x36a>
          if (pcb->rtime >= 0) {
 80096f0:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f2c0 8160 	blt.w	80099ba <tcp_receive+0x36a>
            if (pcb->lastack == ackno) {
 80096fa:	4290      	cmp	r0, r2
 80096fc:	f040 815d 	bne.w	80099ba <tcp_receive+0x36a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009704:	2bff      	cmp	r3, #255	@ 0xff
                ++pcb->dupacks;
 8009706:	bf1c      	itt	ne
 8009708:	3301      	addne	r3, #1
 800970a:	f884 3043 	strbne.w	r3, [r4, #67]	@ 0x43
              if (pcb->dupacks > 3) {
 800970e:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009712:	2b03      	cmp	r3, #3
 8009714:	d91e      	bls.n	8009754 <tcp_receive+0x104>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009716:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800971a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800971c:	4413      	add	r3, r2
 800971e:	b29b      	uxth	r3, r3
 8009720:	429a      	cmp	r2, r3
 8009722:	bf88      	it	hi
 8009724:	f64f 73ff 	movwhi	r3, #65535	@ 0xffff
 8009728:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                tcp_rexmit_fast(pcb);
 800972c:	4620      	mov	r0, r4
 800972e:	f001 ff53 	bl	800b5d8 <tcp_rexmit_fast>
      if (!found_dupack) {
 8009732:	e010      	b.n	8009756 <tcp_receive+0x106>
 8009734:	080108fc 	.word	0x080108fc
 8009738:	080109b5 	.word	0x080109b5
 800973c:	0800f15a 	.word	0x0800f15a
 8009740:	20033419 	.word	0x20033419
 8009744:	20033424 	.word	0x20033424
 8009748:	2003341a 	.word	0x2003341a
 800974c:	20033434 	.word	0x20033434
 8009750:	20033420 	.word	0x20033420
              if (pcb->dupacks >= 3) {
 8009754:	d0ea      	beq.n	800972c <tcp_receive+0xdc>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009756:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009758:	b33b      	cbz	r3, 80097aa <tcp_receive+0x15a>
 800975a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800975c:	f8d9 1000 	ldr.w	r1, [r9]
 8009760:	1a52      	subs	r2, r2, r1
 8009762:	2a00      	cmp	r2, #0
 8009764:	da21      	bge.n	80097aa <tcp_receive+0x15a>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009766:	4ab6      	ldr	r2, [pc, #728]	@ (8009a40 <tcp_receive+0x3f0>)
 8009768:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 800976a:	f9b4 c03c 	ldrsh.w	ip, [r4, #60]	@ 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800976e:	8815      	ldrh	r5, [r2, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 8009770:	f3cc 01cf 	ubfx	r1, ip, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009774:	1aea      	subs	r2, r5, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 8009776:	1a52      	subs	r2, r2, r1
 8009778:	b210      	sxth	r0, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800977a:	fa1c f282 	uxtah	r2, ip, r2
      if (m < 0) {
 800977e:	2800      	cmp	r0, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 8009780:	b212      	sxth	r2, r2
        m = (s16_t) - m;
 8009782:	bfb8      	it	lt
 8009784:	1b5b      	sublt	r3, r3, r5
      pcb->sa = (s16_t)(pcb->sa + m);
 8009786:	87a2      	strh	r2, [r4, #60]	@ 0x3c
        m = (s16_t) - m;
 8009788:	bfb8      	it	lt
 800978a:	18c9      	addlt	r1, r1, r3
      m = (s16_t)(m - (pcb->sv >> 2));
 800978c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
        m = (s16_t) - m;
 8009790:	bfb8      	it	lt
 8009792:	b208      	sxthlt	r0, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 8009794:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
 8009798:	4403      	add	r3, r0
 800979a:	b29b      	uxth	r3, r3
 800979c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800979e:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 80097a2:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
      pcb->rttest = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	6363      	str	r3, [r4, #52]	@ 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80097aa:	8838      	ldrh	r0, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80097ac:	6833      	ldr	r3, [r6, #0]
 80097ae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80097b0:	2800      	cmp	r0, #0
 80097b2:	f000 835c 	beq.w	8009e6e <tcp_receive+0x81e>
 80097b6:	7d21      	ldrb	r1, [r4, #20]
 80097b8:	2906      	cmp	r1, #6
 80097ba:	f200 8358 	bhi.w	8009e6e <tcp_receive+0x81e>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80097be:	1ad5      	subs	r5, r2, r3
 80097c0:	2d01      	cmp	r5, #1
 80097c2:	f100 81a9 	bmi.w	8009b18 <tcp_receive+0x4c8>
 80097c6:	f1c3 0101 	rsb	r1, r3, #1
 80097ca:	1a09      	subs	r1, r1, r0
 80097cc:	4411      	add	r1, r2
 80097ce:	2900      	cmp	r1, #0
 80097d0:	f300 81a2 	bgt.w	8009b18 <tcp_receive+0x4c8>
      struct pbuf *p = inseg.p;
 80097d4:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8009a58 <tcp_receive+0x408>
 80097d8:	f8d9 8004 	ldr.w	r8, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80097dc:	f1b8 0f00 	cmp.w	r8, #0
 80097e0:	d106      	bne.n	80097f0 <tcp_receive+0x1a0>
 80097e2:	4b98      	ldr	r3, [pc, #608]	@ (8009a44 <tcp_receive+0x3f4>)
 80097e4:	f240 5294 	movw	r2, #1428	@ 0x594
 80097e8:	4997      	ldr	r1, [pc, #604]	@ (8009a48 <tcp_receive+0x3f8>)
 80097ea:	4898      	ldr	r0, [pc, #608]	@ (8009a4c <tcp_receive+0x3fc>)
 80097ec:	f004 fde4 	bl	800e3b8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80097f0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80097f4:	429d      	cmp	r5, r3
 80097f6:	d906      	bls.n	8009806 <tcp_receive+0x1b6>
 80097f8:	4b92      	ldr	r3, [pc, #584]	@ (8009a44 <tcp_receive+0x3f4>)
 80097fa:	f240 5295 	movw	r2, #1429	@ 0x595
 80097fe:	4994      	ldr	r1, [pc, #592]	@ (8009a50 <tcp_receive+0x400>)
 8009800:	4892      	ldr	r0, [pc, #584]	@ (8009a4c <tcp_receive+0x3fc>)
 8009802:	f004 fdd9 	bl	800e3b8 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009806:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800980a:	b2ad      	uxth	r5, r5
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800980c:	891b      	ldrh	r3, [r3, #8]
 800980e:	42ab      	cmp	r3, r5
 8009810:	d206      	bcs.n	8009820 <tcp_receive+0x1d0>
 8009812:	4b8c      	ldr	r3, [pc, #560]	@ (8009a44 <tcp_receive+0x3f4>)
 8009814:	f240 5297 	movw	r2, #1431	@ 0x597
 8009818:	498e      	ldr	r1, [pc, #568]	@ (8009a54 <tcp_receive+0x404>)
 800981a:	488c      	ldr	r0, [pc, #560]	@ (8009a4c <tcp_receive+0x3fc>)
 800981c:	f004 fdcc 	bl	800e3b8 <iprintf>
      inseg.len -= off;
 8009820:	f8b9 3008 	ldrh.w	r3, [r9, #8]
        p->len = 0;
 8009824:	2100      	movs	r1, #0
      inseg.len -= off;
 8009826:	1b5b      	subs	r3, r3, r5
 8009828:	f8a9 3008 	strh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800982c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009830:	891b      	ldrh	r3, [r3, #8]
 8009832:	1b5b      	subs	r3, r3, r5
 8009834:	b29b      	uxth	r3, r3
      while (p->len < off) {
 8009836:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800983a:	42aa      	cmp	r2, r5
 800983c:	f0c0 8163 	bcc.w	8009b06 <tcp_receive+0x4b6>
      pbuf_remove_header(p, off);
 8009840:	4629      	mov	r1, r5
 8009842:	4640      	mov	r0, r8
 8009844:	f7fe f99e 	bl	8007b84 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009848:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800984a:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800984e:	6033      	str	r3, [r6, #0]
 8009850:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009852:	6833      	ldr	r3, [r6, #0]
 8009854:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009856:	1a99      	subs	r1, r3, r2
 8009858:	2900      	cmp	r1, #0
 800985a:	f2c0 8232 	blt.w	8009cc2 <tcp_receive+0x672>
 800985e:	1c58      	adds	r0, r3, #1
 8009860:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
 8009862:	1a81      	subs	r1, r0, r2
 8009864:	1b49      	subs	r1, r1, r5
 8009866:	2900      	cmp	r1, #0
 8009868:	f300 822b 	bgt.w	8009cc2 <tcp_receive+0x672>
      if (pcb->rcv_nxt == seqno) {
 800986c:	4293      	cmp	r3, r2
 800986e:	f040 8222 	bne.w	8009cb6 <tcp_receive+0x666>
        tcplen = TCP_TCPLEN(&inseg);
 8009872:	4d79      	ldr	r5, [pc, #484]	@ (8009a58 <tcp_receive+0x408>)
 8009874:	68eb      	ldr	r3, [r5, #12]
 8009876:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800987a:	8998      	ldrh	r0, [r3, #12]
 800987c:	f7fd faa0 	bl	8006dc0 <lwip_htons>
 8009880:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8009884:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8009886:	bf18      	it	ne
 8009888:	2001      	movne	r0, #1
 800988a:	eb08 0300 	add.w	r3, r8, r0
 800988e:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 8009890:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8009892:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8009894:	d241      	bcs.n	800991a <tcp_receive+0x2ca>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009896:	68eb      	ldr	r3, [r5, #12]
 8009898:	8998      	ldrh	r0, [r3, #12]
 800989a:	f7fd fa91 	bl	8006dc0 <lwip_htons>
 800989e:	07c2      	lsls	r2, r0, #31
 80098a0:	d50f      	bpl.n	80098c2 <tcp_receive+0x272>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80098a2:	68eb      	ldr	r3, [r5, #12]
 80098a4:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 80098a8:	4640      	mov	r0, r8
 80098aa:	f428 587c 	bic.w	r8, r8, #16128	@ 0x3f00
 80098ae:	f7fd fa87 	bl	8006dc0 <lwip_htons>
 80098b2:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 80098b6:	f7fd fa83 	bl	8006dc0 <lwip_htons>
 80098ba:	68eb      	ldr	r3, [r5, #12]
 80098bc:	ea40 0008 	orr.w	r0, r0, r8
 80098c0:	8198      	strh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 80098c2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80098c4:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80098c6:	68eb      	ldr	r3, [r5, #12]
 80098c8:	8998      	ldrh	r0, [r3, #12]
 80098ca:	f7fd fa79 	bl	8006dc0 <lwip_htons>
 80098ce:	0783      	lsls	r3, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 80098d0:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 80098d2:	bf42      	ittt	mi
 80098d4:	892b      	ldrhmi	r3, [r5, #8]
 80098d6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80098da:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80098dc:	8929      	ldrh	r1, [r5, #8]
 80098de:	f7fe fa81 	bl	8007de4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80098e2:	68eb      	ldr	r3, [r5, #12]
 80098e4:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80098e8:	8998      	ldrh	r0, [r3, #12]
 80098ea:	f7fd fa69 	bl	8006dc0 <lwip_htons>
 80098ee:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80098f2:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 80098f4:	bf18      	it	ne
 80098f6:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80098f8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          tcplen = TCP_TCPLEN(&inseg);
 80098fa:	eb08 0300 	add.w	r3, r8, r0
 80098fe:	b29b      	uxth	r3, r3
 8009900:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009902:	4413      	add	r3, r2
 8009904:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8009906:	440a      	add	r2, r1
 8009908:	4293      	cmp	r3, r2
 800990a:	d006      	beq.n	800991a <tcp_receive+0x2ca>
 800990c:	4b4d      	ldr	r3, [pc, #308]	@ (8009a44 <tcp_receive+0x3f4>)
 800990e:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8009912:	4952      	ldr	r1, [pc, #328]	@ (8009a5c <tcp_receive+0x40c>)
 8009914:	484d      	ldr	r0, [pc, #308]	@ (8009a4c <tcp_receive+0x3fc>)
 8009916:	f004 fd4f 	bl	800e3b8 <iprintf>
        if (pcb->ooseq != NULL) {
 800991a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 810a 	beq.w	8009b36 <tcp_receive+0x4e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009922:	68eb      	ldr	r3, [r5, #12]
 8009924:	8998      	ldrh	r0, [r3, #12]
 8009926:	f7fd fa4b 	bl	8006dc0 <lwip_htons>
 800992a:	07c0      	lsls	r0, r0, #31
 800992c:	f100 8100 	bmi.w	8009b30 <tcp_receive+0x4e0>
            struct tcp_seg *next = pcb->ooseq;
 8009930:	f8d4 8074 	ldr.w	r8, [r4, #116]	@ 0x74
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009934:	6830      	ldr	r0, [r6, #0]
 8009936:	883b      	ldrh	r3, [r7, #0]
 8009938:	4403      	add	r3, r0
            while (next &&
 800993a:	f1b8 0f00 	cmp.w	r8, #0
 800993e:	d039      	beq.n	80099b4 <tcp_receive+0x364>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009940:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8009944:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8009948:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800994c:	4411      	add	r1, r2
 800994e:	1a59      	subs	r1, r3, r1
            while (next &&
 8009950:	2900      	cmp	r1, #0
 8009952:	f280 811d 	bge.w	8009b90 <tcp_receive+0x540>
                TCP_SEQ_GT(seqno + tcplen,
 8009956:	1a9b      	subs	r3, r3, r2
            if (next &&
 8009958:	2b00      	cmp	r3, #0
 800995a:	dd2b      	ble.n	80099b4 <tcp_receive+0x364>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800995c:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800995e:	1a12      	subs	r2, r2, r0
 8009960:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009962:	8998      	ldrh	r0, [r3, #12]
 8009964:	f7fd fa2c 	bl	8006dc0 <lwip_htons>
 8009968:	0783      	lsls	r3, r0, #30
              pbuf_realloc(inseg.p, inseg.len);
 800996a:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 800996c:	bf42      	ittt	mi
 800996e:	892b      	ldrhmi	r3, [r5, #8]
 8009970:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8009974:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8009976:	8929      	ldrh	r1, [r5, #8]
 8009978:	f7fe fa34 	bl	8007de4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800997c:	68eb      	ldr	r3, [r5, #12]
 800997e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8009982:	8998      	ldrh	r0, [r3, #12]
 8009984:	f7fd fa1c 	bl	8006dc0 <lwip_htons>
 8009988:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800998c:	6832      	ldr	r2, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 800998e:	bf18      	it	ne
 8009990:	2001      	movne	r0, #1
 8009992:	eb09 0300 	add.w	r3, r9, r0
 8009996:	b29b      	uxth	r3, r3
 8009998:	803b      	strh	r3, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800999a:	4413      	add	r3, r2
 800999c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80099a0:	6852      	ldr	r2, [r2, #4]
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d006      	beq.n	80099b4 <tcp_receive+0x364>
 80099a6:	4b27      	ldr	r3, [pc, #156]	@ (8009a44 <tcp_receive+0x3f4>)
 80099a8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80099ac:	492c      	ldr	r1, [pc, #176]	@ (8009a60 <tcp_receive+0x410>)
 80099ae:	4827      	ldr	r0, [pc, #156]	@ (8009a4c <tcp_receive+0x3fc>)
 80099b0:	f004 fd02 	bl	800e3b8 <iprintf>
            pcb->ooseq = next;
 80099b4:	f8c4 8074 	str.w	r8, [r4, #116]	@ 0x74
 80099b8:	e0bd      	b.n	8009b36 <tcp_receive+0x4e6>
        pcb->dupacks = 0;
 80099ba:	2300      	movs	r3, #0
 80099bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099c0:	e6c9      	b.n	8009756 <tcp_receive+0x106>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80099c2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80099c4:	1a51      	subs	r1, r2, r1
 80099c6:	2900      	cmp	r1, #0
 80099c8:	f300 8099 	bgt.w	8009afe <tcp_receive+0x4ae>
      if (pcb->flags & TF_INFR) {
 80099cc:	8b61      	ldrh	r1, [r4, #26]
 80099ce:	0748      	lsls	r0, r1, #29
 80099d0:	d509      	bpl.n	80099e6 <tcp_receive+0x396>
        tcp_clear_flags(pcb, TF_INFR);
 80099d2:	f021 0104 	bic.w	r1, r1, #4
 80099d6:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 80099d8:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 80099dc:	f8a4 1048 	strh.w	r1, [r4, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80099e0:	2100      	movs	r1, #0
 80099e2:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80099e6:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	@ 0x3c
 80099ea:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
      pcb->lastack = ackno;
 80099ec:	6462      	str	r2, [r4, #68]	@ 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80099ee:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 80099f2:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80099f4:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
      if (pcb->state >= ESTABLISHED) {
 80099f8:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 80099fa:	f04f 0100 	mov.w	r1, #0
 80099fe:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
      if (pcb->state >= ESTABLISHED) {
 8009a02:	d939      	bls.n	8009a78 <tcp_receive+0x428>
        if (pcb->cwnd < pcb->ssthresh) {
 8009a04:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009a08:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 8009a0a:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 8009a0e:	4291      	cmp	r1, r2
 8009a10:	d928      	bls.n	8009a64 <tcp_receive+0x414>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009a12:	8b61      	ldrh	r1, [r4, #26]
 8009a14:	f411 6f00 	tst.w	r1, #2048	@ 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009a18:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009a1a:	bf0c      	ite	eq
 8009a1c:	2002      	moveq	r0, #2
 8009a1e:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009a20:	fb11 f100 	smulbb	r1, r1, r0
 8009a24:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 8009a26:	4299      	cmp	r1, r3
 8009a28:	bf94      	ite	ls
 8009a2a:	1850      	addls	r0, r2, r1
 8009a2c:	18d0      	addhi	r0, r2, r3
 8009a2e:	b283      	uxth	r3, r0
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d901      	bls.n	8009a38 <tcp_receive+0x3e8>
          TCP_WND_INC(pcb->cwnd, increase);
 8009a34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009a38:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8009a3c:	e01c      	b.n	8009a78 <tcp_receive+0x428>
 8009a3e:	bf00      	nop
 8009a40:	2003340c 	.word	0x2003340c
 8009a44:	080108fc 	.word	0x080108fc
 8009a48:	080109ce 	.word	0x080109ce
 8009a4c:	0800f15a 	.word	0x0800f15a
 8009a50:	080109de 	.word	0x080109de
 8009a54:	080109ed 	.word	0x080109ed
 8009a58:	20033438 	.word	0x20033438
 8009a5c:	080109fd 	.word	0x080109fd
 8009a60:	08010a34 	.word	0x08010a34
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009a64:	f8b4 106a 	ldrh.w	r1, [r4, #106]	@ 0x6a
 8009a68:	440b      	add	r3, r1
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	4299      	cmp	r1, r3
 8009a6e:	d82c      	bhi.n	8009aca <tcp_receive+0x47a>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d92c      	bls.n	8009ace <tcp_receive+0x47e>
 8009a74:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009a78:	4620      	mov	r0, r4
 8009a7a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	@ 0x6c
 8009a7e:	f7ff fd87 	bl	8009590 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009a82:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009a84:	4602      	mov	r2, r0
 8009a86:	6720      	str	r0, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f7ff fd81 	bl	8009590 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 8009a8e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009a90:	66e0      	str	r0, [r4, #108]	@ 0x6c
      if (pcb->unacked == NULL) {
 8009a92:	fab2 f382 	clz	r3, r2
 8009a96:	095b      	lsrs	r3, r3, #5
 8009a98:	425b      	negs	r3, r3
 8009a9a:	8623      	strh	r3, [r4, #48]	@ 0x30
      pcb->polltmr = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8009aa0:	b908      	cbnz	r0, 8009aa6 <tcp_receive+0x456>
        pcb->unsent_oversize = 0;
 8009aa2:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009aa6:	49a0      	ldr	r1, [pc, #640]	@ (8009d28 <tcp_receive+0x6d8>)
 8009aa8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 8009aac:	8809      	ldrh	r1, [r1, #0]
 8009aae:	440b      	add	r3, r1
 8009ab0:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
      if (pcb->flags & TF_RTO) {
 8009ab4:	8b63      	ldrh	r3, [r4, #26]
 8009ab6:	0519      	lsls	r1, r3, #20
 8009ab8:	f57f ae4d 	bpl.w	8009756 <tcp_receive+0x106>
        if (pcb->unacked == NULL) {
 8009abc:	b9da      	cbnz	r2, 8009af6 <tcp_receive+0x4a6>
          if ((pcb->unsent == NULL) ||
 8009abe:	b968      	cbnz	r0, 8009adc <tcp_receive+0x48c>
          tcp_clear_flags(pcb, TF_RTO);
 8009ac0:	8b63      	ldrh	r3, [r4, #26]
 8009ac2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ac6:	8363      	strh	r3, [r4, #26]
 8009ac8:	e645      	b.n	8009756 <tcp_receive+0x106>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009aca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009ace:	1a9b      	subs	r3, r3, r2
 8009ad0:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009ad4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8009ad6:	4413      	add	r3, r2
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	e7a9      	b.n	8009a30 <tcp_receive+0x3e0>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009adc:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8009ae0:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009ae2:	6858      	ldr	r0, [r3, #4]
 8009ae4:	f7fd f96f 	bl	8006dc6 <lwip_htonl>
 8009ae8:	eba8 0800 	sub.w	r8, r8, r0
 8009aec:	f1b8 0f00 	cmp.w	r8, #0
 8009af0:	f73f ae31 	bgt.w	8009756 <tcp_receive+0x106>
 8009af4:	e7e4      	b.n	8009ac0 <tcp_receive+0x470>
 8009af6:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8009afa:	68d3      	ldr	r3, [r2, #12]
 8009afc:	e7f1      	b.n	8009ae2 <tcp_receive+0x492>
      tcp_send_empty_ack(pcb);
 8009afe:	4620      	mov	r0, r4
 8009b00:	f001 fde4 	bl	800b6cc <tcp_send_empty_ack>
 8009b04:	e627      	b.n	8009756 <tcp_receive+0x106>
        off -= p->len;
 8009b06:	1aaa      	subs	r2, r5, r2
        p->tot_len = new_tot_len;
 8009b08:	f8a8 3008 	strh.w	r3, [r8, #8]
        p->len = 0;
 8009b0c:	f8a8 100a 	strh.w	r1, [r8, #10]
        off -= p->len;
 8009b10:	b295      	uxth	r5, r2
        p = p->next;
 8009b12:	f8d8 8000 	ldr.w	r8, [r8]
 8009b16:	e68e      	b.n	8009836 <tcp_receive+0x1e6>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8009b1c:	bfbe      	ittt	lt
 8009b1e:	8b63      	ldrhlt	r3, [r4, #26]
 8009b20:	f043 0302 	orrlt.w	r3, r3, #2
 8009b24:	8363      	strhlt	r3, [r4, #26]
 8009b26:	e694      	b.n	8009852 <tcp_receive+0x202>
              pcb->ooseq = pcb->ooseq->next;
 8009b28:	6803      	ldr	r3, [r0, #0]
 8009b2a:	6763      	str	r3, [r4, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8009b2c:	f7fe fd56 	bl	80085dc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009b30:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d1f8      	bne.n	8009b28 <tcp_receive+0x4d8>
        pcb->rcv_nxt = seqno + tcplen;
 8009b36:	883a      	ldrh	r2, [r7, #0]
 8009b38:	6833      	ldr	r3, [r6, #0]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	6263      	str	r3, [r4, #36]	@ 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009b3e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d206      	bcs.n	8009b52 <tcp_receive+0x502>
 8009b44:	4b79      	ldr	r3, [pc, #484]	@ (8009d2c <tcp_receive+0x6dc>)
 8009b46:	f240 6207 	movw	r2, #1543	@ 0x607
 8009b4a:	4979      	ldr	r1, [pc, #484]	@ (8009d30 <tcp_receive+0x6e0>)
 8009b4c:	4879      	ldr	r0, [pc, #484]	@ (8009d34 <tcp_receive+0x6e4>)
 8009b4e:	f004 fc33 	bl	800e3b8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009b52:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009b54:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8009b56:	883a      	ldrh	r2, [r7, #0]
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	8523      	strh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009b5c:	f7fe fcca 	bl	80084f4 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8009b60:	686b      	ldr	r3, [r5, #4]
 8009b62:	891a      	ldrh	r2, [r3, #8]
 8009b64:	b11a      	cbz	r2, 8009b6e <tcp_receive+0x51e>
          recv_data = inseg.p;
 8009b66:	4a74      	ldr	r2, [pc, #464]	@ (8009d38 <tcp_receive+0x6e8>)
 8009b68:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	606b      	str	r3, [r5, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009b6e:	68eb      	ldr	r3, [r5, #12]
 8009b70:	8998      	ldrh	r0, [r3, #12]
 8009b72:	f7fd f925 	bl	8006dc0 <lwip_htons>
 8009b76:	07c5      	lsls	r5, r0, #31
 8009b78:	d504      	bpl.n	8009b84 <tcp_receive+0x534>
          recv_flags |= TF_GOT_FIN;
 8009b7a:	4a70      	ldr	r2, [pc, #448]	@ (8009d3c <tcp_receive+0x6ec>)
 8009b7c:	7813      	ldrb	r3, [r2, #0]
 8009b7e:	f043 0320 	orr.w	r3, r3, #32
 8009b82:	7013      	strb	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009b84:	4f69      	ldr	r7, [pc, #420]	@ (8009d2c <tcp_receive+0x6dc>)
 8009b86:	f8df 81bc 	ldr.w	r8, [pc, #444]	@ 8009d44 <tcp_receive+0x6f4>
 8009b8a:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 8009d34 <tcp_receive+0x6e4>
 8009b8e:	e07c      	b.n	8009c8a <tcp_receive+0x63a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009b90:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8009b94:	f7fd f914 	bl	8006dc0 <lwip_htons>
 8009b98:	07c1      	lsls	r1, r0, #31
 8009b9a:	d51b      	bpl.n	8009bd4 <tcp_receive+0x584>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009b9c:	68eb      	ldr	r3, [r5, #12]
 8009b9e:	8998      	ldrh	r0, [r3, #12]
 8009ba0:	f7fd f90e 	bl	8006dc0 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009ba4:	0782      	lsls	r2, r0, #30
 8009ba6:	d415      	bmi.n	8009bd4 <tcp_receive+0x584>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009ba8:	68eb      	ldr	r3, [r5, #12]
 8009baa:	2001      	movs	r0, #1
 8009bac:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8009bb0:	f7fd f906 	bl	8006dc0 <lwip_htons>
 8009bb4:	68eb      	ldr	r3, [r5, #12]
 8009bb6:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 8009bba:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009bbe:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009bc0:	b280      	uxth	r0, r0
 8009bc2:	f7fd f8fd 	bl	8006dc0 <lwip_htons>
 8009bc6:	f010 0003 	ands.w	r0, r0, #3
 8009bca:	bf18      	it	ne
 8009bcc:	2001      	movne	r0, #1
 8009bce:	4481      	add	r9, r0
 8009bd0:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8009bd4:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(tmp);
 8009bd8:	4640      	mov	r0, r8
 8009bda:	f7fe fcff 	bl	80085dc <tcp_seg_free>
              next = next->next;
 8009bde:	46c8      	mov	r8, r9
 8009be0:	e6a8      	b.n	8009934 <tcp_receive+0x2e4>
          seqno = pcb->ooseq->tcphdr->seqno;
 8009be2:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009be4:	8990      	ldrh	r0, [r2, #12]
 8009be6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009bea:	f7fd f8e9 	bl	8006dc0 <lwip_htons>
 8009bee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009bf0:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009bf4:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009bf8:	bf18      	it	ne
 8009bfa:	2001      	movne	r0, #1
 8009bfc:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009bfe:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009c00:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009c02:	f8b4 a028 	ldrh.w	sl, [r4, #40]	@ 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009c06:	6260      	str	r0, [r4, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009c08:	8998      	ldrh	r0, [r3, #12]
 8009c0a:	f7fd f8d9 	bl	8006dc0 <lwip_htons>
 8009c0e:	f010 0003 	ands.w	r0, r0, #3
 8009c12:	bf18      	it	ne
 8009c14:	2001      	movne	r0, #1
 8009c16:	4458      	add	r0, fp
 8009c18:	4582      	cmp	sl, r0
 8009c1a:	d206      	bcs.n	8009c2a <tcp_receive+0x5da>
 8009c1c:	463b      	mov	r3, r7
 8009c1e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8009c22:	4641      	mov	r1, r8
 8009c24:	4648      	mov	r0, r9
 8009c26:	f004 fbc7 	bl	800e3b8 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009c2a:	68eb      	ldr	r3, [r5, #12]
 8009c2c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009c30:	8998      	ldrh	r0, [r3, #12]
 8009c32:	f7fd f8c5 	bl	8006dc0 <lwip_htons>
 8009c36:	f010 0003 	ands.w	r0, r0, #3
 8009c3a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8009c3c:	bf18      	it	ne
 8009c3e:	2001      	movne	r0, #1
 8009c40:	4450      	add	r0, sl
 8009c42:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 8009c44:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009c46:	8523      	strh	r3, [r4, #40]	@ 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8009c48:	f7fe fc54 	bl	80084f4 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8009c4c:	6869      	ldr	r1, [r5, #4]
 8009c4e:	890b      	ldrh	r3, [r1, #8]
 8009c50:	b133      	cbz	r3, 8009c60 <tcp_receive+0x610>
            if (recv_data) {
 8009c52:	4b39      	ldr	r3, [pc, #228]	@ (8009d38 <tcp_receive+0x6e8>)
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	b338      	cbz	r0, 8009ca8 <tcp_receive+0x658>
              pbuf_cat(recv_data, cseg->p);
 8009c58:	f7fe f940 	bl	8007edc <pbuf_cat>
            cseg->p = NULL;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009c60:	68eb      	ldr	r3, [r5, #12]
 8009c62:	8998      	ldrh	r0, [r3, #12]
 8009c64:	f7fd f8ac 	bl	8006dc0 <lwip_htons>
 8009c68:	07c0      	lsls	r0, r0, #31
 8009c6a:	d509      	bpl.n	8009c80 <tcp_receive+0x630>
            recv_flags |= TF_GOT_FIN;
 8009c6c:	4a33      	ldr	r2, [pc, #204]	@ (8009d3c <tcp_receive+0x6ec>)
 8009c6e:	7813      	ldrb	r3, [r2, #0]
 8009c70:	f043 0320 	orr.w	r3, r3, #32
 8009c74:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009c76:	7d23      	ldrb	r3, [r4, #20]
 8009c78:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8009c7a:	bf04      	itt	eq
 8009c7c:	2307      	moveq	r3, #7
 8009c7e:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8009c80:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8009c82:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8009c84:	6763      	str	r3, [r4, #116]	@ 0x74
          tcp_seg_free(cseg);
 8009c86:	f7fe fca9 	bl	80085dc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009c8a:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 8009c8c:	b125      	cbz	r5, 8009c98 <tcp_receive+0x648>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009c8e:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8009c90:	6a61      	ldr	r1, [r4, #36]	@ 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009c92:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8009c94:	428b      	cmp	r3, r1
 8009c96:	d0a4      	beq.n	8009be2 <tcp_receive+0x592>
        tcp_ack(pcb);
 8009c98:	8b63      	ldrh	r3, [r4, #26]
 8009c9a:	07d9      	lsls	r1, r3, #31
 8009c9c:	d506      	bpl.n	8009cac <tcp_receive+0x65c>
 8009c9e:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 8009ca2:	f043 0302 	orr.w	r3, r3, #2
 8009ca6:	e003      	b.n	8009cb0 <tcp_receive+0x660>
              recv_data = cseg->p;
 8009ca8:	6019      	str	r1, [r3, #0]
 8009caa:	e7d7      	b.n	8009c5c <tcp_receive+0x60c>
        tcp_ack(pcb);
 8009cac:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 8009cb0:	8363      	strh	r3, [r4, #26]
}
 8009cb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pcb->ooseq == NULL) {
 8009cb6:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 8009cb8:	b945      	cbnz	r5, 8009ccc <tcp_receive+0x67c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009cba:	4821      	ldr	r0, [pc, #132]	@ (8009d40 <tcp_receive+0x6f0>)
 8009cbc:	f7fe fca4 	bl	8008608 <tcp_seg_copy>
 8009cc0:	6760      	str	r0, [r4, #116]	@ 0x74
        tcp_send_empty_ack(pcb);
 8009cc2:	4620      	mov	r0, r4
}
 8009cc4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 8009cc8:	f001 bd00 	b.w	800b6cc <tcp_send_empty_ack>
          struct tcp_seg *next, *prev = NULL;
 8009ccc:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009cd0:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 8009cd4:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8009cd8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d115      	bne.n	8009d0c <tcp_receive+0x6bc>
              if (inseg.len > next->len) {
 8009ce0:	4817      	ldr	r0, [pc, #92]	@ (8009d40 <tcp_receive+0x6f0>)
 8009ce2:	892b      	ldrh	r3, [r5, #8]
 8009ce4:	8902      	ldrh	r2, [r0, #8]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d9eb      	bls.n	8009cc2 <tcp_receive+0x672>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009cea:	f7fe fc8d 	bl	8008608 <tcp_seg_copy>
                if (cseg != NULL) {
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d0e7      	beq.n	8009cc2 <tcp_receive+0x672>
                  if (prev != NULL) {
 8009cf2:	f1b8 0f00 	cmp.w	r8, #0
 8009cf6:	d007      	beq.n	8009d08 <tcp_receive+0x6b8>
                    prev->next = cseg;
 8009cf8:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7ff fb97 	bl	8009430 <tcp_oos_insert_segment>
 8009d02:	e7de      	b.n	8009cc2 <tcp_receive+0x672>
 8009d04:	460d      	mov	r5, r1
 8009d06:	e7e5      	b.n	8009cd4 <tcp_receive+0x684>
                    pcb->ooseq = cseg;
 8009d08:	6760      	str	r0, [r4, #116]	@ 0x74
                  tcp_oos_insert_segment(cseg, next);
 8009d0a:	e7f7      	b.n	8009cfc <tcp_receive+0x6ac>
              if (prev == NULL) {
 8009d0c:	f1b8 0f00 	cmp.w	r8, #0
 8009d10:	d11a      	bne.n	8009d48 <tcp_receive+0x6f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009d12:	1a99      	subs	r1, r3, r2
 8009d14:	2900      	cmp	r1, #0
 8009d16:	da3e      	bge.n	8009d96 <tcp_receive+0x746>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009d18:	4809      	ldr	r0, [pc, #36]	@ (8009d40 <tcp_receive+0x6f0>)
 8009d1a:	f7fe fc75 	bl	8008608 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	d0cf      	beq.n	8009cc2 <tcp_receive+0x672>
                    pcb->ooseq = cseg;
 8009d22:	6760      	str	r0, [r4, #116]	@ 0x74
 8009d24:	e7ea      	b.n	8009cfc <tcp_receive+0x6ac>
 8009d26:	bf00      	nop
 8009d28:	2003341c 	.word	0x2003341c
 8009d2c:	080108fc 	.word	0x080108fc
 8009d30:	08010a6f 	.word	0x08010a6f
 8009d34:	0800f15a 	.word	0x0800f15a
 8009d38:	20033414 	.word	0x20033414
 8009d3c:	20033418 	.word	0x20033418
 8009d40:	20033438 	.word	0x20033438
 8009d44:	08010a8e 	.word	0x08010a8e
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009d48:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8009d4c:	6849      	ldr	r1, [r1, #4]
 8009d4e:	ebae 0101 	sub.w	r1, lr, r1
 8009d52:	2900      	cmp	r1, #0
 8009d54:	db1f      	blt.n	8009d96 <tcp_receive+0x746>
 8009d56:	1a81      	subs	r1, r0, r2
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	dc1c      	bgt.n	8009d96 <tcp_receive+0x746>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009d5c:	484a      	ldr	r0, [pc, #296]	@ (8009e88 <tcp_receive+0x838>)
 8009d5e:	f7fe fc53 	bl	8008608 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009d62:	4607      	mov	r7, r0
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d0ac      	beq.n	8009cc2 <tcp_receive+0x672>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009d68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d6c:	6831      	ldr	r1, [r6, #0]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8009d74:	4413      	add	r3, r2
 8009d76:	1a5b      	subs	r3, r3, r1
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	dd07      	ble.n	8009d8c <tcp_receive+0x73c>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009d7c:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 8009d7e:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009d82:	b289      	uxth	r1, r1
 8009d84:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009d88:	f7fe f82c 	bl	8007de4 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	4638      	mov	r0, r7
                    prev->next = cseg;
 8009d90:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8009d94:	e7b3      	b.n	8009cfe <tcp_receive+0x6ae>
              if (next->next == NULL &&
 8009d96:	6829      	ldr	r1, [r5, #0]
 8009d98:	46a8      	mov	r8, r5
 8009d9a:	2900      	cmp	r1, #0
 8009d9c:	d1b2      	bne.n	8009d04 <tcp_receive+0x6b4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009d9e:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	dd8e      	ble.n	8009cc2 <tcp_receive+0x672>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009da4:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8009da8:	f7fd f80a 	bl	8006dc0 <lwip_htons>
 8009dac:	07c2      	lsls	r2, r0, #31
 8009dae:	d488      	bmi.n	8009cc2 <tcp_receive+0x672>
                next->next = tcp_seg_copy(&inseg);
 8009db0:	4835      	ldr	r0, [pc, #212]	@ (8009e88 <tcp_receive+0x838>)
 8009db2:	f7fe fc29 	bl	8008608 <tcp_seg_copy>
 8009db6:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d082      	beq.n	8009cc2 <tcp_receive+0x672>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009dbc:	68eb      	ldr	r3, [r5, #12]
 8009dbe:	6831      	ldr	r1, [r6, #0]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	892b      	ldrh	r3, [r5, #8]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	1a5b      	subs	r3, r3, r1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	dd05      	ble.n	8009dd8 <tcp_receive+0x788>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009dcc:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 8009dce:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009dd0:	b289      	uxth	r1, r1
 8009dd2:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8009dd4:	f7fe f806 	bl	8007de4 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009dd8:	6832      	ldr	r2, [r6, #0]
 8009dda:	883b      	ldrh	r3, [r7, #0]
 8009ddc:	4413      	add	r3, r2
 8009dde:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009de0:	1a9b      	subs	r3, r3, r2
 8009de2:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f77f af6b 	ble.w	8009cc2 <tcp_receive+0x672>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	8998      	ldrh	r0, [r3, #12]
 8009df2:	f7fc ffe5 	bl	8006dc0 <lwip_htons>
 8009df6:	07c3      	lsls	r3, r0, #31
 8009df8:	d511      	bpl.n	8009e1e <tcp_receive+0x7ce>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8009e02:	4640      	mov	r0, r8
 8009e04:	f428 587c 	bic.w	r8, r8, #16128	@ 0x3f00
 8009e08:	f7fc ffda 	bl	8006dc0 <lwip_htons>
 8009e0c:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 8009e10:	f7fc ffd6 	bl	8006dc0 <lwip_htons>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	ea40 0008 	orr.w	r0, r0, r8
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	8198      	strh	r0, [r3, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009e1e:	6832      	ldr	r2, [r6, #0]
 8009e20:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8009e22:	682b      	ldr	r3, [r5, #0]
 8009e24:	1a89      	subs	r1, r1, r2
 8009e26:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8009e28:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009e2a:	4411      	add	r1, r2
 8009e2c:	b289      	uxth	r1, r1
 8009e2e:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009e30:	f7fd ffd8 	bl	8007de4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	891d      	ldrh	r5, [r3, #8]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	8998      	ldrh	r0, [r3, #12]
 8009e3c:	f7fc ffc0 	bl	8006dc0 <lwip_htons>
 8009e40:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e44:	6832      	ldr	r2, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8009e46:	bf18      	it	ne
 8009e48:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e4a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8009e4c:	182b      	adds	r3, r5, r0
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e52:	4413      	add	r3, r2
 8009e54:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8009e56:	440a      	add	r2, r1
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	f43f af32 	beq.w	8009cc2 <tcp_receive+0x672>
 8009e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e8c <tcp_receive+0x83c>)
 8009e60:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8009e64:	490a      	ldr	r1, [pc, #40]	@ (8009e90 <tcp_receive+0x840>)
 8009e66:	480b      	ldr	r0, [pc, #44]	@ (8009e94 <tcp_receive+0x844>)
 8009e68:	f004 faa6 	bl	800e3b8 <iprintf>
 8009e6c:	e729      	b.n	8009cc2 <tcp_receive+0x672>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009e6e:	1a99      	subs	r1, r3, r2
 8009e70:	2900      	cmp	r1, #0
 8009e72:	db06      	blt.n	8009e82 <tcp_receive+0x832>
 8009e74:	3301      	adds	r3, #1
 8009e76:	1a9b      	subs	r3, r3, r2
 8009e78:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8009e7a:	1a9b      	subs	r3, r3, r2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f77f af18 	ble.w	8009cb2 <tcp_receive+0x662>
      tcp_ack_now(pcb);
 8009e82:	8b63      	ldrh	r3, [r4, #26]
 8009e84:	e70d      	b.n	8009ca2 <tcp_receive+0x652>
 8009e86:	bf00      	nop
 8009e88:	20033438 	.word	0x20033438
 8009e8c:	080108fc 	.word	0x080108fc
 8009e90:	080109fd 	.word	0x080109fd
 8009e94:	0800f15a 	.word	0x0800f15a

08009e98 <tcp_input>:
{
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009e9c:	4605      	mov	r5, r0
{
 8009e9e:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009ea0:	b928      	cbnz	r0, 8009eae <tcp_input+0x16>
 8009ea2:	4b72      	ldr	r3, [pc, #456]	@ (800a06c <tcp_input+0x1d4>)
 8009ea4:	2283      	movs	r2, #131	@ 0x83
 8009ea6:	4972      	ldr	r1, [pc, #456]	@ (800a070 <tcp_input+0x1d8>)
 8009ea8:	4872      	ldr	r0, [pc, #456]	@ (800a074 <tcp_input+0x1dc>)
 8009eaa:	f004 fa85 	bl	800e3b8 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 8009eae:	686b      	ldr	r3, [r5, #4]
 8009eb0:	4e71      	ldr	r6, [pc, #452]	@ (800a078 <tcp_input+0x1e0>)
 8009eb2:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8009eb4:	896b      	ldrh	r3, [r5, #10]
 8009eb6:	2b13      	cmp	r3, #19
 8009eb8:	f240 80d2 	bls.w	800a060 <tcp_input+0x1c8>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009ebc:	f8df 81e4 	ldr.w	r8, [pc, #484]	@ 800a0a4 <tcp_input+0x20c>
 8009ec0:	f8d8 1000 	ldr.w	r1, [r8]
 8009ec4:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8009ec8:	f003 f85b 	bl	800cf82 <ip4_addr_isbroadcast_u32>
 8009ecc:	4604      	mov	r4, r0
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f040 80c6 	bne.w	800a060 <tcp_input+0x1c8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009ed4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009ed8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009edc:	2be0      	cmp	r3, #224	@ 0xe0
 8009ede:	f000 80bf 	beq.w	800a060 <tcp_input+0x1c8>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009ee2:	6833      	ldr	r3, [r6, #0]
 8009ee4:	8998      	ldrh	r0, [r3, #12]
 8009ee6:	f7fc ff6b 	bl	8006dc0 <lwip_htons>
 8009eea:	0a81      	lsrs	r1, r0, #10
 8009eec:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009ef0:	2913      	cmp	r1, #19
 8009ef2:	f240 80b5 	bls.w	800a060 <tcp_input+0x1c8>
 8009ef6:	892b      	ldrh	r3, [r5, #8]
 8009ef8:	428b      	cmp	r3, r1
 8009efa:	f0c0 80b1 	bcc.w	800a060 <tcp_input+0x1c8>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009efe:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 8009f02:	896a      	ldrh	r2, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009f04:	4f5d      	ldr	r7, [pc, #372]	@ (800a07c <tcp_input+0x1e4>)
 8009f06:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 8009f08:	f8df a19c 	ldr.w	sl, [pc, #412]	@ 800a0a8 <tcp_input+0x210>
  if (p->len >= hdrlen_bytes) {
 8009f0c:	428a      	cmp	r2, r1
 8009f0e:	f8df 919c 	ldr.w	r9, [pc, #412]	@ 800a0ac <tcp_input+0x214>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009f12:	803b      	strh	r3, [r7, #0]
  tcphdr_opt2 = NULL;
 8009f14:	f8ca 4000 	str.w	r4, [sl]
  if (p->len >= hdrlen_bytes) {
 8009f18:	d360      	bcc.n	8009fdc <tcp_input+0x144>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009f1a:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8009f1c:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009f20:	f7fd fe30 	bl	8007b84 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009f24:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009f26:	f8df b188 	ldr.w	fp, [pc, #392]	@ 800a0b0 <tcp_input+0x218>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009f2a:	8820      	ldrh	r0, [r4, #0]
 8009f2c:	f7fc ff48 	bl	8006dc0 <lwip_htons>
 8009f30:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009f32:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009f34:	f8df a17c 	ldr.w	sl, [pc, #380]	@ 800a0b4 <tcp_input+0x21c>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009f38:	8860      	ldrh	r0, [r4, #2]
 8009f3a:	f7fc ff41 	bl	8006dc0 <lwip_htons>
 8009f3e:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009f40:	6834      	ldr	r4, [r6, #0]
 8009f42:	6860      	ldr	r0, [r4, #4]
 8009f44:	f7fc ff3f 	bl	8006dc6 <lwip_htonl>
 8009f48:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009f4a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009f4c:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009f50:	68a0      	ldr	r0, [r4, #8]
 8009f52:	f7fc ff38 	bl	8006dc6 <lwip_htonl>
 8009f56:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009f58:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009f5a:	f8ca 0000 	str.w	r0, [sl]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009f5e:	89e0      	ldrh	r0, [r4, #14]
 8009f60:	f7fc ff2e 	bl	8006dc0 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8009f64:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009f66:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8009f68:	8998      	ldrh	r0, [r3, #12]
 8009f6a:	f7fc ff29 	bl	8006dc0 <lwip_htons>
 8009f6e:	4a44      	ldr	r2, [pc, #272]	@ (800a080 <tcp_input+0x1e8>)
 8009f70:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
 8009f74:	7013      	strb	r3, [r2, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009f76:	0783      	lsls	r3, r0, #30
  tcplen = p->tot_len;
 8009f78:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009f7a:	d16b      	bne.n	800a054 <tcp_input+0x1bc>
  tcplen = p->tot_len;
 8009f7c:	4b41      	ldr	r3, [pc, #260]	@ (800a084 <tcp_input+0x1ec>)
 8009f7e:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f80:	4f41      	ldr	r7, [pc, #260]	@ (800a088 <tcp_input+0x1f0>)
  prev = NULL;
 8009f82:	f04f 0900 	mov.w	r9, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f86:	683c      	ldr	r4, [r7, #0]
 8009f88:	2c00      	cmp	r4, #0
 8009f8a:	f040 8095 	bne.w	800a0b8 <tcp_input+0x220>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800a08c <tcp_input+0x1f4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009f90:	4c38      	ldr	r4, [pc, #224]	@ (800a074 <tcp_input+0x1dc>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f92:	f8d3 9000 	ldr.w	r9, [r3]
 8009f96:	f1b9 0f00 	cmp.w	r9, #0
 8009f9a:	f040 8124 	bne.w	800a1e6 <tcp_input+0x34e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009f9e:	4b3c      	ldr	r3, [pc, #240]	@ (800a090 <tcp_input+0x1f8>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009fa0:	f8d8 c004 	ldr.w	ip, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009fa4:	681a      	ldr	r2, [r3, #0]
      if (lpcb->local_port == tcphdr->dest) {
 8009fa6:	6831      	ldr	r1, [r6, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009fa8:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009fac:	4614      	mov	r4, r2
 8009fae:	2c00      	cmp	r4, #0
 8009fb0:	f040 817c 	bne.w	800a2ac <tcp_input+0x414>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009fb4:	8988      	ldrh	r0, [r1, #12]
 8009fb6:	f7fc ff03 	bl	8006dc0 <lwip_htons>
 8009fba:	0743      	lsls	r3, r0, #29
 8009fbc:	d450      	bmi.n	800a060 <tcp_input+0x1c8>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fbe:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fc0:	4a30      	ldr	r2, [pc, #192]	@ (800a084 <tcp_input+0x1ec>)
 8009fc2:	8818      	ldrh	r0, [r3, #0]
 8009fc4:	8811      	ldrh	r1, [r2, #0]
 8009fc6:	f8db 2000 	ldr.w	r2, [fp]
 8009fca:	9002      	str	r0, [sp, #8]
 8009fcc:	885b      	ldrh	r3, [r3, #2]
 8009fce:	440a      	add	r2, r1
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	4b30      	ldr	r3, [pc, #192]	@ (800a094 <tcp_input+0x1fc>)
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	f000 bccc 	b.w	800a974 <tcp_input+0xadc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	b92b      	cbnz	r3, 8009fec <tcp_input+0x154>
 8009fe0:	4b22      	ldr	r3, [pc, #136]	@ (800a06c <tcp_input+0x1d4>)
 8009fe2:	22c2      	movs	r2, #194	@ 0xc2
 8009fe4:	492c      	ldr	r1, [pc, #176]	@ (800a098 <tcp_input+0x200>)
 8009fe6:	4823      	ldr	r0, [pc, #140]	@ (800a074 <tcp_input+0x1dc>)
 8009fe8:	f004 f9e6 	bl	800e3b8 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 8009fec:	2114      	movs	r1, #20
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f7fd fdc8 	bl	8007b84 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 8009ff4:	896c      	ldrh	r4, [r5, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 8009ff6:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8009ff8:	f8a9 4000 	strh.w	r4, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 8009ffc:	4621      	mov	r1, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009ffe:	f8b7 9000 	ldrh.w	r9, [r7]
    pbuf_remove_header(p, tcphdr_opt1len);
 800a002:	f7fd fdbf 	bl	8007b84 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800a006:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a008:	eba9 0704 	sub.w	r7, r9, r4
    if (opt2len > p->next->len) {
 800a00c:	8943      	ldrh	r3, [r0, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a00e:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800a010:	42bb      	cmp	r3, r7
 800a012:	d325      	bcc.n	800a060 <tcp_input+0x1c8>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a014:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800a016:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a018:	f8ca 3000 	str.w	r3, [sl]
    pbuf_remove_header(p->next, opt2len);
 800a01c:	f7fd fdb2 	bl	8007b84 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a020:	892b      	ldrh	r3, [r5, #8]
 800a022:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a024:	896b      	ldrh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a026:	eba4 0409 	sub.w	r4, r4, r9
 800a02a:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a02c:	b12b      	cbz	r3, 800a03a <tcp_input+0x1a2>
 800a02e:	4b0f      	ldr	r3, [pc, #60]	@ (800a06c <tcp_input+0x1d4>)
 800a030:	22df      	movs	r2, #223	@ 0xdf
 800a032:	491a      	ldr	r1, [pc, #104]	@ (800a09c <tcp_input+0x204>)
 800a034:	480f      	ldr	r0, [pc, #60]	@ (800a074 <tcp_input+0x1dc>)
 800a036:	f004 f9bf 	bl	800e3b8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a03a:	682b      	ldr	r3, [r5, #0]
 800a03c:	892a      	ldrh	r2, [r5, #8]
 800a03e:	891b      	ldrh	r3, [r3, #8]
 800a040:	429a      	cmp	r2, r3
 800a042:	f43f af6f 	beq.w	8009f24 <tcp_input+0x8c>
 800a046:	4b09      	ldr	r3, [pc, #36]	@ (800a06c <tcp_input+0x1d4>)
 800a048:	22e0      	movs	r2, #224	@ 0xe0
 800a04a:	4915      	ldr	r1, [pc, #84]	@ (800a0a0 <tcp_input+0x208>)
 800a04c:	4809      	ldr	r0, [pc, #36]	@ (800a074 <tcp_input+0x1dc>)
 800a04e:	f004 f9b3 	bl	800e3b8 <iprintf>
 800a052:	e767      	b.n	8009f24 <tcp_input+0x8c>
    tcplen++;
 800a054:	1c53      	adds	r3, r2, #1
 800a056:	490b      	ldr	r1, [pc, #44]	@ (800a084 <tcp_input+0x1ec>)
 800a058:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800a05a:	429a      	cmp	r2, r3
    tcplen++;
 800a05c:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800a05e:	d98f      	bls.n	8009f80 <tcp_input+0xe8>
  pbuf_free(p);
 800a060:	4628      	mov	r0, r5
}
 800a062:	b005      	add	sp, #20
 800a064:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800a068:	f7fd bdc0 	b.w	8007bec <pbuf_free>
 800a06c:	080108fc 	.word	0x080108fc
 800a070:	08010ab3 	.word	0x08010ab3
 800a074:	0800f15a 	.word	0x0800f15a
 800a078:	20033434 	.word	0x20033434
 800a07c:	20033432 	.word	0x20033432
 800a080:	20033419 	.word	0x20033419
 800a084:	2003341a 	.word	0x2003341a
 800a088:	20033400 	.word	0x20033400
 800a08c:	200333fc 	.word	0x200333fc
 800a090:	20033404 	.word	0x20033404
 800a094:	2002aabc 	.word	0x2002aabc
 800a098:	08010acb 	.word	0x08010acb
 800a09c:	08010adb 	.word	0x08010adb
 800a0a0:	08010ae7 	.word	0x08010ae7
 800a0a4:	2002aaac 	.word	0x2002aaac
 800a0a8:	2003342c 	.word	0x2003342c
 800a0ac:	20033430 	.word	0x20033430
 800a0b0:	20033424 	.word	0x20033424
 800a0b4:	20033420 	.word	0x20033420
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a0b8:	7d23      	ldrb	r3, [r4, #20]
 800a0ba:	b92b      	cbnz	r3, 800a0c8 <tcp_input+0x230>
 800a0bc:	4b8f      	ldr	r3, [pc, #572]	@ (800a2fc <tcp_input+0x464>)
 800a0be:	22fb      	movs	r2, #251	@ 0xfb
 800a0c0:	498f      	ldr	r1, [pc, #572]	@ (800a300 <tcp_input+0x468>)
 800a0c2:	4890      	ldr	r0, [pc, #576]	@ (800a304 <tcp_input+0x46c>)
 800a0c4:	f004 f978 	bl	800e3b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a0c8:	7d23      	ldrb	r3, [r4, #20]
 800a0ca:	2b0a      	cmp	r3, #10
 800a0cc:	d105      	bne.n	800a0da <tcp_input+0x242>
 800a0ce:	4b8b      	ldr	r3, [pc, #556]	@ (800a2fc <tcp_input+0x464>)
 800a0d0:	22fc      	movs	r2, #252	@ 0xfc
 800a0d2:	498d      	ldr	r1, [pc, #564]	@ (800a308 <tcp_input+0x470>)
 800a0d4:	488b      	ldr	r0, [pc, #556]	@ (800a304 <tcp_input+0x46c>)
 800a0d6:	f004 f96f 	bl	800e3b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a0da:	7d23      	ldrb	r3, [r4, #20]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d105      	bne.n	800a0ec <tcp_input+0x254>
 800a0e0:	4b86      	ldr	r3, [pc, #536]	@ (800a2fc <tcp_input+0x464>)
 800a0e2:	22fd      	movs	r2, #253	@ 0xfd
 800a0e4:	4989      	ldr	r1, [pc, #548]	@ (800a30c <tcp_input+0x474>)
 800a0e6:	4887      	ldr	r0, [pc, #540]	@ (800a304 <tcp_input+0x46c>)
 800a0e8:	f004 f966 	bl	800e3b8 <iprintf>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a0ec:	7a21      	ldrb	r1, [r4, #8]
 800a0ee:	68e2      	ldr	r2, [r4, #12]
 800a0f0:	b139      	cbz	r1, 800a102 <tcp_input+0x26a>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a0f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a0f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a0fa:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	4299      	cmp	r1, r3
 800a100:	d16e      	bne.n	800a1e0 <tcp_input+0x348>
    if (pcb->remote_port == tcphdr->src &&
 800a102:	6833      	ldr	r3, [r6, #0]
 800a104:	8b20      	ldrh	r0, [r4, #24]
 800a106:	8819      	ldrh	r1, [r3, #0]
 800a108:	4288      	cmp	r0, r1
 800a10a:	d169      	bne.n	800a1e0 <tcp_input+0x348>
 800a10c:	8ae1      	ldrh	r1, [r4, #22]
 800a10e:	885b      	ldrh	r3, [r3, #2]
 800a110:	4299      	cmp	r1, r3
 800a112:	d165      	bne.n	800a1e0 <tcp_input+0x348>
        pcb->local_port == tcphdr->dest &&
 800a114:	6861      	ldr	r1, [r4, #4]
 800a116:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a11a:	4299      	cmp	r1, r3
 800a11c:	d160      	bne.n	800a1e0 <tcp_input+0x348>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a11e:	6821      	ldr	r1, [r4, #0]
 800a120:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a124:	4299      	cmp	r1, r3
 800a126:	d15b      	bne.n	800a1e0 <tcp_input+0x348>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a128:	42a2      	cmp	r2, r4
 800a12a:	f040 8400 	bne.w	800a92e <tcp_input+0xa96>
 800a12e:	4b73      	ldr	r3, [pc, #460]	@ (800a2fc <tcp_input+0x464>)
 800a130:	f240 120d 	movw	r2, #269	@ 0x10d
 800a134:	4976      	ldr	r1, [pc, #472]	@ (800a310 <tcp_input+0x478>)
 800a136:	4873      	ldr	r0, [pc, #460]	@ (800a304 <tcp_input+0x46c>)
 800a138:	f004 f93e 	bl	800e3b8 <iprintf>
      if (prev != NULL) {
 800a13c:	f1b9 0f00 	cmp.w	r9, #0
 800a140:	d005      	beq.n	800a14e <tcp_input+0x2b6>
        prev->next = pcb->next;
 800a142:	68e3      	ldr	r3, [r4, #12]
 800a144:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 800a148:	683b      	ldr	r3, [r7, #0]
        tcp_active_pcbs = pcb;
 800a14a:	603c      	str	r4, [r7, #0]
        pcb->next = tcp_active_pcbs;
 800a14c:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a14e:	68e3      	ldr	r3, [r4, #12]
 800a150:	42a3      	cmp	r3, r4
 800a152:	d106      	bne.n	800a162 <tcp_input+0x2ca>
 800a154:	4b69      	ldr	r3, [pc, #420]	@ (800a2fc <tcp_input+0x464>)
 800a156:	f240 1215 	movw	r2, #277	@ 0x115
 800a15a:	496e      	ldr	r1, [pc, #440]	@ (800a314 <tcp_input+0x47c>)
 800a15c:	4869      	ldr	r0, [pc, #420]	@ (800a304 <tcp_input+0x46c>)
 800a15e:	f004 f92b 	bl	800e3b8 <iprintf>
    inseg.next = NULL;
 800a162:	496d      	ldr	r1, [pc, #436]	@ (800a318 <tcp_input+0x480>)
 800a164:	2300      	movs	r3, #0
    inseg.len = p->tot_len;
 800a166:	892a      	ldrh	r2, [r5, #8]
    recv_data = NULL;
 800a168:	f8df 91cc 	ldr.w	r9, [pc, #460]	@ 800a338 <tcp_input+0x4a0>
    inseg.len = p->tot_len;
 800a16c:	810a      	strh	r2, [r1, #8]
    inseg.tcphdr = tcphdr;
 800a16e:	6832      	ldr	r2, [r6, #0]
    recv_flags = 0;
 800a170:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 800a33c <tcp_input+0x4a4>
    inseg.tcphdr = tcphdr;
 800a174:	60ca      	str	r2, [r1, #12]
    recv_acked = 0;
 800a176:	4a69      	ldr	r2, [pc, #420]	@ (800a31c <tcp_input+0x484>)
    inseg.next = NULL;
 800a178:	600b      	str	r3, [r1, #0]
    recv_data = NULL;
 800a17a:	f8c9 3000 	str.w	r3, [r9]
    recv_flags = 0;
 800a17e:	f888 3000 	strb.w	r3, [r8]
    recv_acked = 0;
 800a182:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800a184:	4b66      	ldr	r3, [pc, #408]	@ (800a320 <tcp_input+0x488>)
    inseg.p = p;
 800a186:	604d      	str	r5, [r1, #4]
    if (flags & TCP_PSH) {
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	0718      	lsls	r0, r3, #28
      p->flags |= PBUF_FLAG_PUSH;
 800a18c:	bf42      	ittt	mi
 800a18e:	7b6b      	ldrbmi	r3, [r5, #13]
 800a190:	f043 0301 	orrmi.w	r3, r3, #1
 800a194:	736b      	strbmi	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800a196:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800a198:	4d62      	ldr	r5, [pc, #392]	@ (800a324 <tcp_input+0x48c>)
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 812e 	beq.w	800a3fc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f7fe fe37 	bl	8008e14 <tcp_process_refused_data>
 800a1a6:	300d      	adds	r0, #13
 800a1a8:	d008      	beq.n	800a1bc <tcp_input+0x324>
 800a1aa:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 8125 	beq.w	800a3fc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a1b2:	4b5d      	ldr	r3, [pc, #372]	@ (800a328 <tcp_input+0x490>)
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 8120 	beq.w	800a3fc <tcp_input+0x564>
        if (pcb->rcv_ann_wnd == 0) {
 800a1bc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a1be:	b913      	cbnz	r3, 800a1c6 <tcp_input+0x32e>
          tcp_send_empty_ack(pcb);
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f001 fa83 	bl	800b6cc <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800a1c6:	2400      	movs	r4, #0
 800a1c8:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL) {
 800a1ca:	4d53      	ldr	r5, [pc, #332]	@ (800a318 <tcp_input+0x480>)
    recv_data = NULL;
 800a1cc:	f8c9 4000 	str.w	r4, [r9]
    if (inseg.p != NULL) {
 800a1d0:	6868      	ldr	r0, [r5, #4]
 800a1d2:	b110      	cbz	r0, 800a1da <tcp_input+0x342>
      pbuf_free(inseg.p);
 800a1d4:	f7fd fd0a 	bl	8007bec <pbuf_free>
      inseg.p = NULL;
 800a1d8:	606c      	str	r4, [r5, #4]
}
 800a1da:	b005      	add	sp, #20
 800a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1e0:	46a1      	mov	r9, r4
 800a1e2:	4614      	mov	r4, r2
 800a1e4:	e6d0      	b.n	8009f88 <tcp_input+0xf0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a1e6:	f899 3014 	ldrb.w	r3, [r9, #20]
 800a1ea:	2b0a      	cmp	r3, #10
 800a1ec:	d006      	beq.n	800a1fc <tcp_input+0x364>
 800a1ee:	4b43      	ldr	r3, [pc, #268]	@ (800a2fc <tcp_input+0x464>)
 800a1f0:	f240 121f 	movw	r2, #287	@ 0x11f
 800a1f4:	494d      	ldr	r1, [pc, #308]	@ (800a32c <tcp_input+0x494>)
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f004 f8de 	bl	800e3b8 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a1fc:	f899 2008 	ldrb.w	r2, [r9, #8]
 800a200:	b13a      	cbz	r2, 800a212 <tcp_input+0x37a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a202:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a206:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a20a:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	429a      	cmp	r2, r3
 800a210:	d149      	bne.n	800a2a6 <tcp_input+0x40e>
      if (pcb->remote_port == tcphdr->src &&
 800a212:	6833      	ldr	r3, [r6, #0]
 800a214:	f8b9 1018 	ldrh.w	r1, [r9, #24]
 800a218:	881a      	ldrh	r2, [r3, #0]
 800a21a:	4291      	cmp	r1, r2
 800a21c:	d143      	bne.n	800a2a6 <tcp_input+0x40e>
          pcb->local_port == tcphdr->dest &&
 800a21e:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800a220:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800a224:	4293      	cmp	r3, r2
 800a226:	d13e      	bne.n	800a2a6 <tcp_input+0x40e>
          pcb->local_port == tcphdr->dest &&
 800a228:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800a22c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a230:	4290      	cmp	r0, r2
 800a232:	d138      	bne.n	800a2a6 <tcp_input+0x40e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a234:	f8d9 0000 	ldr.w	r0, [r9]
 800a238:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800a23c:	4290      	cmp	r0, r2
 800a23e:	d132      	bne.n	800a2a6 <tcp_input+0x40e>
  if (flags & TCP_RST) {
 800a240:	4a37      	ldr	r2, [pc, #220]	@ (800a320 <tcp_input+0x488>)
 800a242:	7810      	ldrb	r0, [r2, #0]
 800a244:	0747      	lsls	r7, r0, #29
 800a246:	f53f af0b 	bmi.w	800a060 <tcp_input+0x1c8>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a24a:	4a37      	ldr	r2, [pc, #220]	@ (800a328 <tcp_input+0x490>)
  if (flags & TCP_SYN) {
 800a24c:	0786      	lsls	r6, r0, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a24e:	8814      	ldrh	r4, [r2, #0]
  if (flags & TCP_SYN) {
 800a250:	d516      	bpl.n	800a280 <tcp_input+0x3e8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a252:	f8db 2000 	ldr.w	r2, [fp]
 800a256:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800a25a:	1a10      	subs	r0, r2, r0
 800a25c:	d416      	bmi.n	800a28c <tcp_input+0x3f4>
 800a25e:	f8b9 6028 	ldrh.w	r6, [r9, #40]	@ 0x28
 800a262:	1b80      	subs	r0, r0, r6
 800a264:	2800      	cmp	r0, #0
 800a266:	dc11      	bgt.n	800a28c <tcp_input+0x3f4>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a268:	4422      	add	r2, r4
 800a26a:	4648      	mov	r0, r9
 800a26c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a270:	4b2f      	ldr	r3, [pc, #188]	@ (800a330 <tcp_input+0x498>)
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	3304      	adds	r3, #4
 800a276:	f8da 1000 	ldr.w	r1, [sl]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a27a:	f001 f9e1 	bl	800b640 <tcp_rst>
 800a27e:	e6ef      	b.n	800a060 <tcp_input+0x1c8>
  } else if (flags & TCP_FIN) {
 800a280:	07c1      	lsls	r1, r0, #31
    pcb->tmr = tcp_ticks;
 800a282:	bf42      	ittt	mi
 800a284:	4b2b      	ldrmi	r3, [pc, #172]	@ (800a334 <tcp_input+0x49c>)
 800a286:	681b      	ldrmi	r3, [r3, #0]
 800a288:	f8c9 3020 	strmi.w	r3, [r9, #32]
  if ((tcplen > 0)) {
 800a28c:	2c00      	cmp	r4, #0
 800a28e:	f43f aee7 	beq.w	800a060 <tcp_input+0x1c8>
    tcp_ack_now(pcb);
 800a292:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    tcp_output(pcb);
 800a296:	4648      	mov	r0, r9
    tcp_ack_now(pcb);
 800a298:	f043 0302 	orr.w	r3, r3, #2
 800a29c:	f8a9 301a 	strh.w	r3, [r9, #26]
    tcp_output(pcb);
 800a2a0:	f001 fa46 	bl	800b730 <tcp_output>
        pbuf_free(p);
 800a2a4:	e6dc      	b.n	800a060 <tcp_input+0x1c8>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2a6:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800a2aa:	e674      	b.n	8009f96 <tcp_input+0xfe>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a2ac:	7a20      	ldrb	r0, [r4, #8]
 800a2ae:	b128      	cbz	r0, 800a2bc <tcp_input+0x424>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a2b0:	f89c 3030 	ldrb.w	r3, [ip, #48]	@ 0x30
 800a2b4:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	4298      	cmp	r0, r3
 800a2ba:	d10a      	bne.n	800a2d2 <tcp_input+0x43a>
      if (lpcb->local_port == tcphdr->dest) {
 800a2bc:	8ae0      	ldrh	r0, [r4, #22]
 800a2be:	884b      	ldrh	r3, [r1, #2]
 800a2c0:	4298      	cmp	r0, r3
 800a2c2:	d106      	bne.n	800a2d2 <tcp_input+0x43a>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	4573      	cmp	r3, lr
 800a2c8:	f000 8336 	beq.w	800a938 <tcp_input+0xaa0>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 8333 	beq.w	800a938 <tcp_input+0xaa0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a2d2:	46a1      	mov	r9, r4
 800a2d4:	68e4      	ldr	r4, [r4, #12]
 800a2d6:	e66a      	b.n	8009fae <tcp_input+0x116>
  } else if (flags & TCP_SYN) {
 800a2d8:	079b      	lsls	r3, r3, #30
 800a2da:	f57f aec1 	bpl.w	800a060 <tcp_input+0x1c8>
    npcb = tcp_alloc(pcb->prio);
 800a2de:	7d60      	ldrb	r0, [r4, #21]
 800a2e0:	f7fe fc06 	bl	8008af0 <tcp_alloc>
    if (npcb == NULL) {
 800a2e4:	4682      	mov	sl, r0
 800a2e6:	bb58      	cbnz	r0, 800a340 <tcp_input+0x4a8>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a2e8:	69a3      	ldr	r3, [r4, #24]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f43f aeb8 	beq.w	800a060 <tcp_input+0x1c8>
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f6:	6920      	ldr	r0, [r4, #16]
 800a2f8:	4798      	blx	r3
 800a2fa:	e6b1      	b.n	800a060 <tcp_input+0x1c8>
 800a2fc:	080108fc 	.word	0x080108fc
 800a300:	08010b06 	.word	0x08010b06
 800a304:	0800f15a 	.word	0x0800f15a
 800a308:	08010b2d 	.word	0x08010b2d
 800a30c:	08010b57 	.word	0x08010b57
 800a310:	08010b7e 	.word	0x08010b7e
 800a314:	08010ba9 	.word	0x08010ba9
 800a318:	20033438 	.word	0x20033438
 800a31c:	2003341c 	.word	0x2003341c
 800a320:	20033419 	.word	0x20033419
 800a324:	20033410 	.word	0x20033410
 800a328:	2003341a 	.word	0x2003341a
 800a32c:	08010bd3 	.word	0x08010bd3
 800a330:	2002aabc 	.word	0x2002aabc
 800a334:	2003340c 	.word	0x2003340c
 800a338:	20033414 	.word	0x20033414
 800a33c:	20033418 	.word	0x20033418
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a340:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800a344:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a346:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a348:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a34c:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800a34e:	8ae3      	ldrh	r3, [r4, #22]
 800a350:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800a352:	7813      	ldrb	r3, [r2, #0]
 800a354:	7852      	ldrb	r2, [r2, #1]
 800a356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a35a:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800a35c:	2303      	movs	r3, #3
 800a35e:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800a360:	f8db 3000 	ldr.w	r3, [fp]
 800a364:	3301      	adds	r3, #1
 800a366:	6243      	str	r3, [r0, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a368:	62c3      	str	r3, [r0, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800a36a:	f7fe f9e7 	bl	800873c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a36e:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 800a372:	f8ca 0058 	str.w	r0, [sl, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a376:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800a378:	f8ca 0050 	str.w	r0, [sl, #80]	@ 0x50
    npcb->lastack = iss;
 800a37c:	f8ca 0044 	str.w	r0, [sl, #68]	@ 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a380:	f8ca 3054 	str.w	r3, [sl, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a384:	6923      	ldr	r3, [r4, #16]
    npcb->snd_lbb = iss;
 800a386:	f8ca 005c 	str.w	r0, [sl, #92]	@ 0x5c
    npcb->listener = pcb;
 800a38a:	f8ca 407c 	str.w	r4, [sl, #124]	@ 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800a38e:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a392:	7a63      	ldrb	r3, [r4, #9]
 800a394:	f003 030c 	and.w	r3, r3, #12
 800a398:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a39c:	7a23      	ldrb	r3, [r4, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a39e:	f10a 0404 	add.w	r4, sl, #4
    npcb->netif_idx = pcb->netif_idx;
 800a3a2:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	f8c7 a000 	str.w	sl, [r7]
 800a3ac:	f8ca 300c 	str.w	r3, [sl, #12]
 800a3b0:	f001 fc94 	bl	800bcdc <tcp_timer_needed>
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	4ba3      	ldr	r3, [pc, #652]	@ (800a644 <tcp_input+0x7ac>)
    tcp_parseopt(npcb);
 800a3b8:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 800a3ba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a3bc:	f7ff f880 	bl	80094c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a3c0:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f8ba 6032 	ldrh.w	r6, [sl, #50]	@ 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800a3c8:	89db      	ldrh	r3, [r3, #14]
 800a3ca:	f8aa 3060 	strh.w	r3, [sl, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a3ce:	f8aa 3062 	strh.w	r3, [sl, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a3d2:	f002 fc65 	bl	800cca0 <ip4_route>
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	4601      	mov	r1, r0
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7fe f9c8 	bl	8008770 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a3e0:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a3e2:	f8aa 0032 	strh.w	r0, [sl, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a3e6:	4650      	mov	r0, sl
 800a3e8:	f000 ffae 	bl	800b348 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800a3ec:	b120      	cbz	r0, 800a3f8 <tcp_input+0x560>
      tcp_abandon(npcb, 0);
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	4650      	mov	r0, sl
 800a3f2:	f7fe fa7d 	bl	80088f0 <tcp_abandon>
      return;
 800a3f6:	e633      	b.n	800a060 <tcp_input+0x1c8>
    tcp_output(npcb);
 800a3f8:	4650      	mov	r0, sl
 800a3fa:	e751      	b.n	800a2a0 <tcp_input+0x408>
  if (flags & TCP_RST) {
 800a3fc:	4b92      	ldr	r3, [pc, #584]	@ (800a648 <tcp_input+0x7b0>)
    tcp_input_pcb = pcb;
 800a3fe:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 800a400:	781a      	ldrb	r2, [r3, #0]
 800a402:	0751      	lsls	r1, r2, #29
 800a404:	d53c      	bpl.n	800a480 <tcp_input+0x5e8>
    if (pcb->state == SYN_SENT) {
 800a406:	7d21      	ldrb	r1, [r4, #20]
 800a408:	2902      	cmp	r1, #2
 800a40a:	d122      	bne.n	800a452 <tcp_input+0x5ba>
      if (ackno == pcb->snd_nxt) {
 800a40c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800a40e:	f8da 3000 	ldr.w	r3, [sl]
 800a412:	429a      	cmp	r2, r3
 800a414:	d109      	bne.n	800a42a <tcp_input+0x592>
      recv_flags |= TF_RESET;
 800a416:	f898 3000 	ldrb.w	r3, [r8]
 800a41a:	f043 0308 	orr.w	r3, r3, #8
 800a41e:	f888 3000 	strb.w	r3, [r8]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a422:	8b63      	ldrh	r3, [r4, #26]
 800a424:	f023 0301 	bic.w	r3, r3, #1
 800a428:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800a42a:	f898 3000 	ldrb.w	r3, [r8]
 800a42e:	0719      	lsls	r1, r3, #28
 800a430:	f140 8203 	bpl.w	800a83a <tcp_input+0x9a2>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a434:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800a438:	b11b      	cbz	r3, 800a442 <tcp_input+0x5aa>
 800a43a:	f06f 010d 	mvn.w	r1, #13
 800a43e:	6920      	ldr	r0, [r4, #16]
 800a440:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a442:	4621      	mov	r1, r4
 800a444:	4881      	ldr	r0, [pc, #516]	@ (800a64c <tcp_input+0x7b4>)
 800a446:	f7fe f9ed 	bl	8008824 <tcp_pcb_remove>
        tcp_free(pcb);
 800a44a:	4620      	mov	r0, r4
 800a44c:	f7fd ff7e 	bl	800834c <tcp_free>
 800a450:	e6b9      	b.n	800a1c6 <tcp_input+0x32e>
      if (seqno == pcb->rcv_nxt) {
 800a452:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a454:	f8db 3000 	ldr.w	r3, [fp]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d007      	beq.n	800a46c <tcp_input+0x5d4>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a45c:	1a9b      	subs	r3, r3, r2
 800a45e:	d4e4      	bmi.n	800a42a <tcp_input+0x592>
 800a460:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800a462:	1a9b      	subs	r3, r3, r2
 800a464:	2b00      	cmp	r3, #0
 800a466:	dce0      	bgt.n	800a42a <tcp_input+0x592>
        tcp_ack_now(pcb);
 800a468:	8b63      	ldrh	r3, [r4, #26]
 800a46a:	e010      	b.n	800a48e <tcp_input+0x5f6>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a46c:	2900      	cmp	r1, #0
 800a46e:	d1d2      	bne.n	800a416 <tcp_input+0x57e>
 800a470:	4b77      	ldr	r3, [pc, #476]	@ (800a650 <tcp_input+0x7b8>)
 800a472:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a476:	4977      	ldr	r1, [pc, #476]	@ (800a654 <tcp_input+0x7bc>)
 800a478:	4877      	ldr	r0, [pc, #476]	@ (800a658 <tcp_input+0x7c0>)
 800a47a:	f003 ff9d 	bl	800e3b8 <iprintf>
 800a47e:	e7ca      	b.n	800a416 <tcp_input+0x57e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a480:	0792      	lsls	r2, r2, #30
        tcp_ack_now(pcb);
 800a482:	8b63      	ldrh	r3, [r4, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a484:	d506      	bpl.n	800a494 <tcp_input+0x5fc>
 800a486:	7d22      	ldrb	r2, [r4, #20]
 800a488:	3a02      	subs	r2, #2
 800a48a:	2a01      	cmp	r2, #1
 800a48c:	d902      	bls.n	800a494 <tcp_input+0x5fc>
        tcp_ack_now(pcb);
 800a48e:	f043 0302 	orr.w	r3, r3, #2
 800a492:	e7c9      	b.n	800a428 <tcp_input+0x590>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a494:	06d8      	lsls	r0, r3, #27
  tcp_parseopt(pcb);
 800a496:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800a498:	bf5e      	ittt	pl
 800a49a:	4b70      	ldrpl	r3, [pc, #448]	@ (800a65c <tcp_input+0x7c4>)
 800a49c:	681b      	ldrpl	r3, [r3, #0]
 800a49e:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
  tcp_parseopt(pcb);
 800a4a6:	f7ff f80b 	bl	80094c0 <tcp_parseopt>
  switch (pcb->state) {
 800a4aa:	7d23      	ldrb	r3, [r4, #20]
 800a4ac:	3b02      	subs	r3, #2
 800a4ae:	2b07      	cmp	r3, #7
 800a4b0:	d8bb      	bhi.n	800a42a <tcp_input+0x592>
 800a4b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a4b6:	0008      	.short	0x0008
 800a4b8:	0125009a 	.word	0x0125009a
 800a4bc:	01710129 	.word	0x01710129
 800a4c0:	018a0125 	.word	0x018a0125
 800a4c4:	01a9      	.short	0x01a9
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a4c6:	4b60      	ldr	r3, [pc, #384]	@ (800a648 <tcp_input+0x7b0>)
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	f003 0212 	and.w	r2, r3, #18
 800a4ce:	2a12      	cmp	r2, #18
 800a4d0:	d16b      	bne.n	800a5aa <tcp_input+0x712>
          && (ackno == pcb->lastack + 1)) {
 800a4d2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a4d4:	f8da 1000 	ldr.w	r1, [sl]
 800a4d8:	3201      	adds	r2, #1
 800a4da:	428a      	cmp	r2, r1
 800a4dc:	d165      	bne.n	800a5aa <tcp_input+0x712>
        pcb->rcv_nxt = seqno + 1;
 800a4de:	f8db 3000 	ldr.w	r3, [fp]
        pcb->lastack = ackno;
 800a4e2:	6462      	str	r2, [r4, #68]	@ 0x44
        pcb->rcv_nxt = seqno + 1;
 800a4e4:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800a4e6:	6832      	ldr	r2, [r6, #0]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a4e8:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a4ea:	8e67      	ldrh	r7, [r4, #50]	@ 0x32
        pcb->rcv_nxt = seqno + 1;
 800a4ec:	6261      	str	r1, [r4, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a4ee:	62e1      	str	r1, [r4, #44]	@ 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800a4f0:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a4f2:	6563      	str	r3, [r4, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a4f4:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800a4f6:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a4fa:	18e6      	adds	r6, r4, r3
        pcb->state = ESTABLISHED;
 800a4fc:	7523      	strb	r3, [r4, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a4fe:	f8a4 2062 	strh.w	r2, [r4, #98]	@ 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a502:	4630      	mov	r0, r6
 800a504:	f002 fbcc 	bl	800cca0 <ip4_route>
 800a508:	4632      	mov	r2, r6
 800a50a:	4601      	mov	r1, r0
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7fe f92f 	bl	8008770 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a512:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a516:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a518:	8660      	strh	r0, [r4, #50]	@ 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a51a:	0081      	lsls	r1, r0, #2
 800a51c:	429a      	cmp	r2, r3
 800a51e:	4616      	mov	r6, r2
 800a520:	bf38      	it	cc
 800a522:	461e      	movcc	r6, r3
 800a524:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800a528:	d933      	bls.n	800a592 <tcp_input+0x6fa>
 800a52a:	b28b      	uxth	r3, r1
 800a52c:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a530:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800a534:	b933      	cbnz	r3, 800a544 <tcp_input+0x6ac>
 800a536:	4b46      	ldr	r3, [pc, #280]	@ (800a650 <tcp_input+0x7b8>)
 800a538:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a53c:	4948      	ldr	r1, [pc, #288]	@ (800a660 <tcp_input+0x7c8>)
 800a53e:	4846      	ldr	r0, [pc, #280]	@ (800a658 <tcp_input+0x7c0>)
 800a540:	f003 ff3a 	bl	800e3b8 <iprintf>
        --pcb->snd_queuelen;
 800a544:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
        rseg = pcb->unacked;
 800a548:	6f26      	ldr	r6, [r4, #112]	@ 0x70
        --pcb->snd_queuelen;
 800a54a:	3b01      	subs	r3, #1
 800a54c:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
        if (rseg == NULL) {
 800a550:	bb1e      	cbnz	r6, 800a59a <tcp_input+0x702>
          rseg = pcb->unsent;
 800a552:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a554:	b936      	cbnz	r6, 800a564 <tcp_input+0x6cc>
 800a556:	4b3e      	ldr	r3, [pc, #248]	@ (800a650 <tcp_input+0x7b8>)
 800a558:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a55c:	4941      	ldr	r1, [pc, #260]	@ (800a664 <tcp_input+0x7cc>)
 800a55e:	483e      	ldr	r0, [pc, #248]	@ (800a658 <tcp_input+0x7c0>)
 800a560:	f003 ff2a 	bl	800e3b8 <iprintf>
          pcb->unsent = rseg->next;
 800a564:	6833      	ldr	r3, [r6, #0]
 800a566:	66e3      	str	r3, [r4, #108]	@ 0x6c
        tcp_seg_free(rseg);
 800a568:	4630      	mov	r0, r6
 800a56a:	f7fe f837 	bl	80085dc <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800a56e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a570:	b9b3      	cbnz	r3, 800a5a0 <tcp_input+0x708>
          pcb->rtime = -1;
 800a572:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a576:	8623      	strh	r3, [r4, #48]	@ 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a578:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f43f af73 	beq.w	800a468 <tcp_input+0x5d0>
 800a582:	2200      	movs	r2, #0
 800a584:	4621      	mov	r1, r4
 800a586:	6920      	ldr	r0, [r4, #16]
 800a588:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800a58a:	300d      	adds	r0, #13
 800a58c:	f47f af6c 	bne.w	800a468 <tcp_input+0x5d0>
 800a590:	e619      	b.n	800a1c6 <tcp_input+0x32e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a592:	429a      	cmp	r2, r3
 800a594:	bf88      	it	hi
 800a596:	b293      	uxthhi	r3, r2
 800a598:	e7c8      	b.n	800a52c <tcp_input+0x694>
          pcb->unacked = rseg->next;
 800a59a:	6833      	ldr	r3, [r6, #0]
 800a59c:	6723      	str	r3, [r4, #112]	@ 0x70
 800a59e:	e7e3      	b.n	800a568 <tcp_input+0x6d0>
          pcb->rtime = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	8623      	strh	r3, [r4, #48]	@ 0x30
          pcb->nrtx = 0;
 800a5a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5a8:	e7e6      	b.n	800a578 <tcp_input+0x6e0>
      else if (flags & TCP_ACK) {
 800a5aa:	06d9      	lsls	r1, r3, #27
 800a5ac:	f57f af3d 	bpl.w	800a42a <tcp_input+0x592>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a5b0:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5b2:	4a2d      	ldr	r2, [pc, #180]	@ (800a668 <tcp_input+0x7d0>)
 800a5b4:	8818      	ldrh	r0, [r3, #0]
 800a5b6:	8811      	ldrh	r1, [r2, #0]
 800a5b8:	f8db 2000 	ldr.w	r2, [fp]
 800a5bc:	9002      	str	r0, [sp, #8]
 800a5be:	4620      	mov	r0, r4
 800a5c0:	885b      	ldrh	r3, [r3, #2]
 800a5c2:	440a      	add	r2, r1
 800a5c4:	9301      	str	r3, [sp, #4]
 800a5c6:	4b29      	ldr	r3, [pc, #164]	@ (800a66c <tcp_input+0x7d4>)
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	f8da 1000 	ldr.w	r1, [sl]
 800a5d0:	f001 f836 	bl	800b640 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a5d4:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800a5d8:	2b05      	cmp	r3, #5
 800a5da:	f63f af26 	bhi.w	800a42a <tcp_input+0x592>
          pcb->rtime = 0;
 800a5de:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800a5e0:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800a5e2:	8623      	strh	r3, [r4, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a5e4:	f001 fa6a 	bl	800babc <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800a5e8:	e71f      	b.n	800a42a <tcp_input+0x592>
      if (flags & TCP_ACK) {
 800a5ea:	4b17      	ldr	r3, [pc, #92]	@ (800a648 <tcp_input+0x7b0>)
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	06da      	lsls	r2, r3, #27
 800a5f0:	d578      	bpl.n	800a6e4 <tcp_input+0x84c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a5f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a5f4:	f8da 1000 	ldr.w	r1, [sl]
 800a5f8:	43db      	mvns	r3, r3
 800a5fa:	42cb      	cmn	r3, r1
 800a5fc:	d461      	bmi.n	800a6c2 <tcp_input+0x82a>
 800a5fe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a600:	1acb      	subs	r3, r1, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	dc5d      	bgt.n	800a6c2 <tcp_input+0x82a>
          pcb->state = ESTABLISHED;
 800a606:	2304      	movs	r3, #4
 800a608:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800a60a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800a60c:	b91b      	cbnz	r3, 800a616 <tcp_input+0x77e>
            tcp_abort(pcb);
 800a60e:	4620      	mov	r0, r4
 800a610:	f7fe f9f4 	bl	80089fc <tcp_abort>
            goto aborted;
 800a614:	e5d7      	b.n	800a1c6 <tcp_input+0x32e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	b933      	cbnz	r3, 800a628 <tcp_input+0x790>
 800a61a:	4b0d      	ldr	r3, [pc, #52]	@ (800a650 <tcp_input+0x7b8>)
 800a61c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a620:	4913      	ldr	r1, [pc, #76]	@ (800a670 <tcp_input+0x7d8>)
 800a622:	480d      	ldr	r0, [pc, #52]	@ (800a658 <tcp_input+0x7c0>)
 800a624:	f003 fec8 	bl	800e3b8 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a628:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d0ee      	beq.n	800a60e <tcp_input+0x776>
 800a630:	2200      	movs	r2, #0
 800a632:	4621      	mov	r1, r4
 800a634:	6920      	ldr	r0, [r4, #16]
 800a636:	4798      	blx	r3
          if (err != ERR_OK) {
 800a638:	b1e0      	cbz	r0, 800a674 <tcp_input+0x7dc>
            if (err != ERR_ABRT) {
 800a63a:	300d      	adds	r0, #13
 800a63c:	f43f adc3 	beq.w	800a1c6 <tcp_input+0x32e>
 800a640:	e7e5      	b.n	800a60e <tcp_input+0x776>
 800a642:	bf00      	nop
 800a644:	200333fb 	.word	0x200333fb
 800a648:	20033419 	.word	0x20033419
 800a64c:	20033400 	.word	0x20033400
 800a650:	080108fc 	.word	0x080108fc
 800a654:	08010c00 	.word	0x08010c00
 800a658:	0800f15a 	.word	0x0800f15a
 800a65c:	2003340c 	.word	0x2003340c
 800a660:	08010c20 	.word	0x08010c20
 800a664:	08010c36 	.word	0x08010c36
 800a668:	2003341a 	.word	0x2003341a
 800a66c:	2002aabc 	.word	0x2002aabc
 800a670:	08010c49 	.word	0x08010c49
          tcp_receive(pcb);
 800a674:	4620      	mov	r0, r4
 800a676:	f7fe ffeb 	bl	8009650 <tcp_receive>
          if (recv_acked != 0) {
 800a67a:	4a9a      	ldr	r2, [pc, #616]	@ (800a8e4 <tcp_input+0xa4c>)
 800a67c:	8813      	ldrh	r3, [r2, #0]
 800a67e:	b10b      	cbz	r3, 800a684 <tcp_input+0x7ec>
            recv_acked--;
 800a680:	3b01      	subs	r3, #1
 800a682:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a684:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 800a686:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a68a:	004a      	lsls	r2, r1, #1
 800a68c:	0088      	lsls	r0, r1, #2
 800a68e:	429a      	cmp	r2, r3
 800a690:	4616      	mov	r6, r2
 800a692:	bf38      	it	cc
 800a694:	461e      	movcc	r6, r3
 800a696:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800a69a:	d90e      	bls.n	800a6ba <tcp_input+0x822>
 800a69c:	b283      	uxth	r3, r0
 800a69e:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a6a2:	f898 3000 	ldrb.w	r3, [r8]
 800a6a6:	069e      	lsls	r6, r3, #26
 800a6a8:	f57f aebf 	bpl.w	800a42a <tcp_input+0x592>
        tcp_ack_now(pcb);
 800a6ac:	8b63      	ldrh	r3, [r4, #26]
 800a6ae:	f043 0302 	orr.w	r3, r3, #2
 800a6b2:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800a6b4:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800a6b6:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800a6b8:	e6b7      	b.n	800a42a <tcp_input+0x592>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	bf88      	it	hi
 800a6be:	b293      	uxthhi	r3, r2
 800a6c0:	e7ed      	b.n	800a69e <tcp_input+0x806>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6c2:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6c4:	4a88      	ldr	r2, [pc, #544]	@ (800a8e8 <tcp_input+0xa50>)
 800a6c6:	881e      	ldrh	r6, [r3, #0]
 800a6c8:	8810      	ldrh	r0, [r2, #0]
 800a6ca:	f8db 2000 	ldr.w	r2, [fp]
 800a6ce:	9602      	str	r6, [sp, #8]
 800a6d0:	885b      	ldrh	r3, [r3, #2]
 800a6d2:	4402      	add	r2, r0
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	9301      	str	r3, [sp, #4]
 800a6d8:	4b84      	ldr	r3, [pc, #528]	@ (800a8ec <tcp_input+0xa54>)
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	f000 ffaf 	bl	800b640 <tcp_rst>
    if (err != ERR_ABRT) {
 800a6e2:	e6a2      	b.n	800a42a <tcp_input+0x592>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a6e4:	079f      	lsls	r7, r3, #30
 800a6e6:	f57f aea0 	bpl.w	800a42a <tcp_input+0x592>
 800a6ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a6ec:	f8db 2000 	ldr.w	r2, [fp]
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	f47f ae99 	bne.w	800a42a <tcp_input+0x592>
        tcp_rexmit(pcb);
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 ff2d 	bl	800b558 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800a6fe:	e694      	b.n	800a42a <tcp_input+0x592>
      tcp_receive(pcb);
 800a700:	4620      	mov	r0, r4
 800a702:	f7fe ffa5 	bl	8009650 <tcp_receive>
 800a706:	e7cc      	b.n	800a6a2 <tcp_input+0x80a>
      tcp_receive(pcb);
 800a708:	4620      	mov	r0, r4
 800a70a:	f7fe ffa1 	bl	8009650 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a70e:	f898 3000 	ldrb.w	r3, [r8]
 800a712:	0698      	lsls	r0, r3, #26
 800a714:	d52f      	bpl.n	800a776 <tcp_input+0x8de>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a716:	4a76      	ldr	r2, [pc, #472]	@ (800a8f0 <tcp_input+0xa58>)
          tcp_ack_now(pcb);
 800a718:	8b63      	ldrh	r3, [r4, #26]
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a71a:	7812      	ldrb	r2, [r2, #0]
          tcp_ack_now(pcb);
 800a71c:	f043 0302 	orr.w	r3, r3, #2
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a720:	06d1      	lsls	r1, r2, #27
 800a722:	d525      	bpl.n	800a770 <tcp_input+0x8d8>
 800a724:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800a726:	f8da 2000 	ldr.w	r2, [sl]
 800a72a:	4291      	cmp	r1, r2
 800a72c:	d120      	bne.n	800a770 <tcp_input+0x8d8>
 800a72e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800a730:	b9f2      	cbnz	r2, 800a770 <tcp_input+0x8d8>
          tcp_ack_now(pcb);
 800a732:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800a734:	4620      	mov	r0, r4
 800a736:	f7fe f843 	bl	80087c0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	429c      	cmp	r4, r3
 800a73e:	d109      	bne.n	800a754 <tcp_input+0x8bc>
        TCP_RMV_ACTIVE(pcb);
 800a740:	68e3      	ldr	r3, [r4, #12]
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	e008      	b.n	800a758 <tcp_input+0x8c0>
          TCP_RMV_ACTIVE(pcb);
 800a746:	68da      	ldr	r2, [r3, #12]
 800a748:	4294      	cmp	r4, r2
 800a74a:	d102      	bne.n	800a752 <tcp_input+0x8ba>
        TCP_RMV_ACTIVE(pcb);
 800a74c:	68e2      	ldr	r2, [r4, #12]
 800a74e:	60da      	str	r2, [r3, #12]
 800a750:	e002      	b.n	800a758 <tcp_input+0x8c0>
 800a752:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1f6      	bne.n	800a746 <tcp_input+0x8ae>
        TCP_RMV_ACTIVE(pcb);
 800a758:	4b66      	ldr	r3, [pc, #408]	@ (800a8f4 <tcp_input+0xa5c>)
 800a75a:	2201      	movs	r2, #1
 800a75c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a75e:	230a      	movs	r3, #10
 800a760:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a762:	4b65      	ldr	r3, [pc, #404]	@ (800a8f8 <tcp_input+0xa60>)
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	601c      	str	r4, [r3, #0]
 800a768:	60e2      	str	r2, [r4, #12]
 800a76a:	f001 fab7 	bl	800bcdc <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800a76e:	e65c      	b.n	800a42a <tcp_input+0x592>
          tcp_ack_now(pcb);
 800a770:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800a772:	2308      	movs	r3, #8
 800a774:	e79f      	b.n	800a6b6 <tcp_input+0x81e>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a776:	4b5e      	ldr	r3, [pc, #376]	@ (800a8f0 <tcp_input+0xa58>)
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	06da      	lsls	r2, r3, #27
 800a77c:	f57f ae55 	bpl.w	800a42a <tcp_input+0x592>
 800a780:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800a782:	f8da 3000 	ldr.w	r3, [sl]
 800a786:	429a      	cmp	r2, r3
 800a788:	f47f ae4f 	bne.w	800a42a <tcp_input+0x592>
 800a78c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f47f ae4b 	bne.w	800a42a <tcp_input+0x592>
        pcb->state = FIN_WAIT_2;
 800a794:	2306      	movs	r3, #6
 800a796:	e78e      	b.n	800a6b6 <tcp_input+0x81e>
      tcp_receive(pcb);
 800a798:	4620      	mov	r0, r4
 800a79a:	f7fe ff59 	bl	8009650 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a79e:	f898 3000 	ldrb.w	r3, [r8]
 800a7a2:	069b      	lsls	r3, r3, #26
 800a7a4:	f57f ae41 	bpl.w	800a42a <tcp_input+0x592>
        tcp_ack_now(pcb);
 800a7a8:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800a7aa:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800a7ac:	f043 0302 	orr.w	r3, r3, #2
 800a7b0:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800a7b2:	f7fe f805 	bl	80087c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	429c      	cmp	r4, r3
 800a7ba:	d0c1      	beq.n	800a740 <tcp_input+0x8a8>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d0cb      	beq.n	800a758 <tcp_input+0x8c0>
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	4294      	cmp	r4, r2
 800a7c4:	d0c2      	beq.n	800a74c <tcp_input+0x8b4>
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	e7f8      	b.n	800a7bc <tcp_input+0x924>
      tcp_receive(pcb);
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f7fe ff40 	bl	8009650 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a7d0:	4b47      	ldr	r3, [pc, #284]	@ (800a8f0 <tcp_input+0xa58>)
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	06de      	lsls	r6, r3, #27
 800a7d6:	f57f ae28 	bpl.w	800a42a <tcp_input+0x592>
 800a7da:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800a7dc:	f8da 3000 	ldr.w	r3, [sl]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	f47f ae22 	bne.w	800a42a <tcp_input+0x592>
 800a7e6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f47f ae1e 	bne.w	800a42a <tcp_input+0x592>
        tcp_pcb_purge(pcb);
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7fd ffe6 	bl	80087c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	429c      	cmp	r4, r3
 800a7f8:	d0a2      	beq.n	800a740 <tcp_input+0x8a8>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0ac      	beq.n	800a758 <tcp_input+0x8c0>
 800a7fe:	68da      	ldr	r2, [r3, #12]
 800a800:	4294      	cmp	r4, r2
 800a802:	d0a3      	beq.n	800a74c <tcp_input+0x8b4>
 800a804:	4613      	mov	r3, r2
 800a806:	e7f8      	b.n	800a7fa <tcp_input+0x962>
      tcp_receive(pcb);
 800a808:	4620      	mov	r0, r4
 800a80a:	f7fe ff21 	bl	8009650 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a80e:	4b38      	ldr	r3, [pc, #224]	@ (800a8f0 <tcp_input+0xa58>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	06d8      	lsls	r0, r3, #27
 800a814:	f57f ae09 	bpl.w	800a42a <tcp_input+0x592>
 800a818:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800a81a:	f8da 2000 	ldr.w	r2, [sl]
        recv_flags |= TF_CLOSED;
 800a81e:	f898 3000 	ldrb.w	r3, [r8]
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a822:	4291      	cmp	r1, r2
 800a824:	f47f ae01 	bne.w	800a42a <tcp_input+0x592>
 800a828:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800a82a:	2a00      	cmp	r2, #0
 800a82c:	f47f adfd 	bne.w	800a42a <tcp_input+0x592>
        recv_flags |= TF_CLOSED;
 800a830:	f043 0310 	orr.w	r3, r3, #16
 800a834:	f888 3000 	strb.w	r3, [r8]
    if (err != ERR_ABRT) {
 800a838:	e5f7      	b.n	800a42a <tcp_input+0x592>
        if (recv_acked > 0) {
 800a83a:	4b2a      	ldr	r3, [pc, #168]	@ (800a8e4 <tcp_input+0xa4c>)
 800a83c:	881a      	ldrh	r2, [r3, #0]
 800a83e:	b12a      	cbz	r2, 800a84c <tcp_input+0x9b4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a840:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a844:	b9f3      	cbnz	r3, 800a884 <tcp_input+0x9ec>
          recv_acked = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	4a26      	ldr	r2, [pc, #152]	@ (800a8e4 <tcp_input+0xa4c>)
 800a84a:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a84c:	4620      	mov	r0, r4
 800a84e:	f7fe fe81 	bl	8009554 <tcp_input_delayed_close>
 800a852:	2800      	cmp	r0, #0
 800a854:	f47f acb7 	bne.w	800a1c6 <tcp_input+0x32e>
        if (recv_data != NULL) {
 800a858:	f8d9 3000 	ldr.w	r3, [r9]
 800a85c:	b333      	cbz	r3, 800a8ac <tcp_input+0xa14>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a85e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800a860:	b133      	cbz	r3, 800a870 <tcp_input+0x9d8>
 800a862:	4b26      	ldr	r3, [pc, #152]	@ (800a8fc <tcp_input+0xa64>)
 800a864:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a868:	4925      	ldr	r1, [pc, #148]	@ (800a900 <tcp_input+0xa68>)
 800a86a:	4826      	ldr	r0, [pc, #152]	@ (800a904 <tcp_input+0xa6c>)
 800a86c:	f003 fda4 	bl	800e3b8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a870:	8b63      	ldrh	r3, [r4, #26]
            pbuf_free(recv_data);
 800a872:	f8d9 2000 	ldr.w	r2, [r9]
          if (pcb->flags & TF_RXCLOSED) {
 800a876:	f013 0310 	ands.w	r3, r3, #16
 800a87a:	d009      	beq.n	800a890 <tcp_input+0x9f8>
            pbuf_free(recv_data);
 800a87c:	4610      	mov	r0, r2
 800a87e:	f7fd f9b5 	bl	8007bec <pbuf_free>
 800a882:	e6c4      	b.n	800a60e <tcp_input+0x776>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a884:	4621      	mov	r1, r4
 800a886:	6920      	ldr	r0, [r4, #16]
 800a888:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800a88a:	300d      	adds	r0, #13
 800a88c:	d1db      	bne.n	800a846 <tcp_input+0x9ae>
 800a88e:	e49a      	b.n	800a1c6 <tcp_input+0x32e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a890:	f8d4 6084 	ldr.w	r6, [r4, #132]	@ 0x84
 800a894:	b306      	cbz	r6, 800a8d8 <tcp_input+0xa40>
 800a896:	4621      	mov	r1, r4
 800a898:	6920      	ldr	r0, [r4, #16]
 800a89a:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800a89c:	f110 0f0d 	cmn.w	r0, #13
 800a8a0:	f43f ac91 	beq.w	800a1c6 <tcp_input+0x32e>
          if (err != ERR_OK) {
 800a8a4:	b110      	cbz	r0, 800a8ac <tcp_input+0xa14>
            pcb->refused_data = recv_data;
 800a8a6:	f8d9 3000 	ldr.w	r3, [r9]
 800a8aa:	67a3      	str	r3, [r4, #120]	@ 0x78
        if (recv_flags & TF_GOT_FIN) {
 800a8ac:	f898 3000 	ldrb.w	r3, [r8]
 800a8b0:	069a      	lsls	r2, r3, #26
 800a8b2:	d505      	bpl.n	800a8c0 <tcp_input+0xa28>
          if (pcb->refused_data != NULL) {
 800a8b4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800a8b6:	b33b      	cbz	r3, 800a908 <tcp_input+0xa70>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a8b8:	7b5a      	ldrb	r2, [r3, #13]
 800a8ba:	f042 0220 	orr.w	r2, r2, #32
 800a8be:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800a8c0:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800a8c2:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800a8c4:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a8c6:	f7fe fe45 	bl	8009554 <tcp_input_delayed_close>
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	f47f ac7b 	bne.w	800a1c6 <tcp_input+0x32e>
        tcp_output(pcb);
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 ff2d 	bl	800b730 <tcp_output>
 800a8d6:	e476      	b.n	800a1c6 <tcp_input+0x32e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a8d8:	4633      	mov	r3, r6
 800a8da:	4621      	mov	r1, r4
 800a8dc:	4630      	mov	r0, r6
 800a8de:	f7fe fa75 	bl	8008dcc <tcp_recv_null>
 800a8e2:	e7db      	b.n	800a89c <tcp_input+0xa04>
 800a8e4:	2003341c 	.word	0x2003341c
 800a8e8:	2003341a 	.word	0x2003341a
 800a8ec:	2002aabc 	.word	0x2002aabc
 800a8f0:	20033419 	.word	0x20033419
 800a8f4:	200333fb 	.word	0x200333fb
 800a8f8:	200333fc 	.word	0x200333fc
 800a8fc:	080108fc 	.word	0x080108fc
 800a900:	08010c67 	.word	0x08010c67
 800a904:	0800f15a 	.word	0x0800f15a
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a908:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800a90a:	f241 6248 	movw	r2, #5704	@ 0x1648
            TCP_EVENT_CLOSED(pcb, err);
 800a90e:	f8d4 6084 	ldr.w	r6, [r4, #132]	@ 0x84
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a912:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800a914:	bf1c      	itt	ne
 800a916:	3301      	addne	r3, #1
 800a918:	8523      	strhne	r3, [r4, #40]	@ 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800a91a:	2e00      	cmp	r6, #0
 800a91c:	d0d0      	beq.n	800a8c0 <tcp_input+0xa28>
 800a91e:	2300      	movs	r3, #0
 800a920:	4621      	mov	r1, r4
 800a922:	6920      	ldr	r0, [r4, #16]
 800a924:	461a      	mov	r2, r3
 800a926:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800a928:	300d      	adds	r0, #13
 800a92a:	d1c9      	bne.n	800a8c0 <tcp_input+0xa28>
 800a92c:	e44b      	b.n	800a1c6 <tcp_input+0x32e>
      if (prev != NULL) {
 800a92e:	f1b9 0f00 	cmp.w	r9, #0
 800a932:	f47f ac06 	bne.w	800a142 <tcp_input+0x2aa>
 800a936:	e414      	b.n	800a162 <tcp_input+0x2ca>
      if (prev != NULL) {
 800a938:	f1b9 0f00 	cmp.w	r9, #0
 800a93c:	d005      	beq.n	800a94a <tcp_input+0xab2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a93e:	68e3      	ldr	r3, [r4, #12]
 800a940:	f8c9 300c 	str.w	r3, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a944:	4b0d      	ldr	r3, [pc, #52]	@ (800a97c <tcp_input+0xae4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a946:	60e2      	str	r2, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a948:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800a94a:	4b0d      	ldr	r3, [pc, #52]	@ (800a980 <tcp_input+0xae8>)
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	075a      	lsls	r2, r3, #29
 800a950:	f53f ab86 	bmi.w	800a060 <tcp_input+0x1c8>
  if (flags & TCP_ACK) {
 800a954:	f013 0910 	ands.w	r9, r3, #16
 800a958:	f43f acbe 	beq.w	800a2d8 <tcp_input+0x440>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a95c:	4b09      	ldr	r3, [pc, #36]	@ (800a984 <tcp_input+0xaec>)
 800a95e:	f8db 2000 	ldr.w	r2, [fp]
 800a962:	8818      	ldrh	r0, [r3, #0]
 800a964:	880b      	ldrh	r3, [r1, #0]
 800a966:	4402      	add	r2, r0
 800a968:	9302      	str	r3, [sp, #8]
 800a96a:	884b      	ldrh	r3, [r1, #2]
 800a96c:	9301      	str	r3, [sp, #4]
 800a96e:	4b06      	ldr	r3, [pc, #24]	@ (800a988 <tcp_input+0xaf0>)
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	3304      	adds	r3, #4
 800a974:	f8da 1000 	ldr.w	r1, [sl]
 800a978:	4620      	mov	r0, r4
 800a97a:	e47e      	b.n	800a27a <tcp_input+0x3e2>
 800a97c:	20033404 	.word	0x20033404
 800a980:	20033419 	.word	0x20033419
 800a984:	2003341a 	.word	0x2003341a
 800a988:	2002aabc 	.word	0x2002aabc

0800a98c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800a98c:	4a02      	ldr	r2, [pc, #8]	@ (800a998 <tcp_trigger_input_pcb_close+0xc>)
 800a98e:	7813      	ldrb	r3, [r2, #0]
 800a990:	f043 0310 	orr.w	r3, r3, #16
 800a994:	7013      	strb	r3, [r2, #0]
}
 800a996:	4770      	bx	lr
 800a998:	20033418 	.word	0x20033418

0800a99c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a99c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a99e:	4604      	mov	r4, r0
 800a9a0:	b930      	cbnz	r0, 800a9b0 <tcp_output_segment_busy+0x14>
 800a9a2:	4b06      	ldr	r3, [pc, #24]	@ (800a9bc <tcp_output_segment_busy+0x20>)
 800a9a4:	f240 529a 	movw	r2, #1434	@ 0x59a
 800a9a8:	4905      	ldr	r1, [pc, #20]	@ (800a9c0 <tcp_output_segment_busy+0x24>)
 800a9aa:	4806      	ldr	r0, [pc, #24]	@ (800a9c4 <tcp_output_segment_busy+0x28>)
 800a9ac:	f003 fd04 	bl	800e3b8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a9b0:	6863      	ldr	r3, [r4, #4]
 800a9b2:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800a9b4:	3801      	subs	r0, #1
 800a9b6:	bf18      	it	ne
 800a9b8:	2001      	movne	r0, #1
 800a9ba:	bd10      	pop	{r4, pc}
 800a9bc:	08010c81 	.word	0x08010c81
 800a9c0:	08010cb4 	.word	0x08010cb4
 800a9c4:	0800f15a 	.word	0x0800f15a

0800a9c8 <tcp_pbuf_prealloc>:
{
 800a9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	4615      	mov	r5, r2
 800a9d6:	461e      	mov	r6, r3
 800a9d8:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a9dc:	f1b8 0f00 	cmp.w	r8, #0
 800a9e0:	d105      	bne.n	800a9ee <tcp_pbuf_prealloc+0x26>
 800a9e2:	4b1d      	ldr	r3, [pc, #116]	@ (800aa58 <tcp_pbuf_prealloc+0x90>)
 800a9e4:	22e9      	movs	r2, #233	@ 0xe9
 800a9e6:	491d      	ldr	r1, [pc, #116]	@ (800aa5c <tcp_pbuf_prealloc+0x94>)
 800a9e8:	481d      	ldr	r0, [pc, #116]	@ (800aa60 <tcp_pbuf_prealloc+0x98>)
 800a9ea:	f003 fce5 	bl	800e3b8 <iprintf>
  if (length < max_length) {
 800a9ee:	42ac      	cmp	r4, r5
 800a9f0:	d230      	bcs.n	800aa54 <tcp_pbuf_prealloc+0x8c>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a9f2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a9f6:	079a      	lsls	r2, r3, #30
 800a9f8:	d40c      	bmi.n	800aa14 <tcp_pbuf_prealloc+0x4c>
 800a9fa:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800a9fe:	065b      	lsls	r3, r3, #25
 800aa00:	d428      	bmi.n	800aa54 <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
 800aa02:	f1b9 0f00 	cmp.w	r9, #0
 800aa06:	d005      	beq.n	800aa14 <tcp_pbuf_prealloc+0x4c>
         (!first_seg ||
 800aa08:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800aa0c:	b913      	cbnz	r3, 800aa14 <tcp_pbuf_prealloc+0x4c>
          pcb->unsent != NULL ||
 800aa0e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800aa12:	b1fb      	cbz	r3, 800aa54 <tcp_pbuf_prealloc+0x8c>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800aa14:	f204 5195 	addw	r1, r4, #1429	@ 0x595
 800aa18:	f021 0103 	bic.w	r1, r1, #3
 800aa1c:	42a9      	cmp	r1, r5
 800aa1e:	bf28      	it	cs
 800aa20:	4629      	movcs	r1, r5
 800aa22:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800aa24:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800aa28:	4638      	mov	r0, r7
 800aa2a:	f7fd f949 	bl	8007cc0 <pbuf_alloc>
  if (p == NULL) {
 800aa2e:	4605      	mov	r5, r0
 800aa30:	b168      	cbz	r0, 800aa4e <tcp_pbuf_prealloc+0x86>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800aa32:	6803      	ldr	r3, [r0, #0]
 800aa34:	b133      	cbz	r3, 800aa44 <tcp_pbuf_prealloc+0x7c>
 800aa36:	4b08      	ldr	r3, [pc, #32]	@ (800aa58 <tcp_pbuf_prealloc+0x90>)
 800aa38:	f240 120b 	movw	r2, #267	@ 0x10b
 800aa3c:	4909      	ldr	r1, [pc, #36]	@ (800aa64 <tcp_pbuf_prealloc+0x9c>)
 800aa3e:	4808      	ldr	r0, [pc, #32]	@ (800aa60 <tcp_pbuf_prealloc+0x98>)
 800aa40:	f003 fcba 	bl	800e3b8 <iprintf>
  *oversize = p->len - length;
 800aa44:	896b      	ldrh	r3, [r5, #10]
 800aa46:	1b1b      	subs	r3, r3, r4
 800aa48:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800aa4a:	812c      	strh	r4, [r5, #8]
 800aa4c:	816c      	strh	r4, [r5, #10]
}
 800aa4e:	4628      	mov	r0, r5
 800aa50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa54:	4621      	mov	r1, r4
 800aa56:	e7e5      	b.n	800aa24 <tcp_pbuf_prealloc+0x5c>
 800aa58:	08010c81 	.word	0x08010c81
 800aa5c:	08010cd9 	.word	0x08010cd9
 800aa60:	0800f15a 	.word	0x0800f15a
 800aa64:	08010cf8 	.word	0x08010cf8

0800aa68 <tcp_create_segment>:
{
 800aa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa6c:	460e      	mov	r6, r1
 800aa6e:	4690      	mov	r8, r2
 800aa70:	4699      	mov	r9, r3
 800aa72:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800aa76:	4607      	mov	r7, r0
 800aa78:	b928      	cbnz	r0, 800aa86 <tcp_create_segment+0x1e>
 800aa7a:	4b2d      	ldr	r3, [pc, #180]	@ (800ab30 <tcp_create_segment+0xc8>)
 800aa7c:	22a3      	movs	r2, #163	@ 0xa3
 800aa7e:	492d      	ldr	r1, [pc, #180]	@ (800ab34 <tcp_create_segment+0xcc>)
 800aa80:	482d      	ldr	r0, [pc, #180]	@ (800ab38 <tcp_create_segment+0xd0>)
 800aa82:	f003 fc99 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800aa86:	b92e      	cbnz	r6, 800aa94 <tcp_create_segment+0x2c>
 800aa88:	4b29      	ldr	r3, [pc, #164]	@ (800ab30 <tcp_create_segment+0xc8>)
 800aa8a:	22a4      	movs	r2, #164	@ 0xa4
 800aa8c:	492b      	ldr	r1, [pc, #172]	@ (800ab3c <tcp_create_segment+0xd4>)
 800aa8e:	482a      	ldr	r0, [pc, #168]	@ (800ab38 <tcp_create_segment+0xd0>)
 800aa90:	f003 fc92 	bl	800e3b8 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aa94:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800aa98:	2003      	movs	r0, #3
 800aa9a:	f7fc fe09 	bl	80076b0 <memp_malloc>
 800aa9e:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aaa0:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800aaa4:	b930      	cbnz	r0, 800aab4 <tcp_create_segment+0x4c>
    pbuf_free(p);
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f7fd f8a0 	bl	8007bec <pbuf_free>
    return NULL;
 800aaac:	2400      	movs	r4, #0
}
 800aaae:	4620      	mov	r0, r4
 800aab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800aab4:	2300      	movs	r3, #0
  seg->flags = optflags;
 800aab6:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->p = p;
 800aaba:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800aabe:	8933      	ldrh	r3, [r6, #8]
 800aac0:	42ab      	cmp	r3, r5
 800aac2:	d205      	bcs.n	800aad0 <tcp_create_segment+0x68>
 800aac4:	4b1a      	ldr	r3, [pc, #104]	@ (800ab30 <tcp_create_segment+0xc8>)
 800aac6:	22b0      	movs	r2, #176	@ 0xb0
 800aac8:	491d      	ldr	r1, [pc, #116]	@ (800ab40 <tcp_create_segment+0xd8>)
 800aaca:	481b      	ldr	r0, [pc, #108]	@ (800ab38 <tcp_create_segment+0xd0>)
 800aacc:	f003 fc74 	bl	800e3b8 <iprintf>
  seg->len = p->tot_len - optlen;
 800aad0:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800aad2:	4630      	mov	r0, r6
 800aad4:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800aad6:	1b5b      	subs	r3, r3, r5
 800aad8:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800aada:	f7fd f84f 	bl	8007b7c <pbuf_add_header>
 800aade:	4606      	mov	r6, r0
 800aae0:	b118      	cbz	r0, 800aaea <tcp_create_segment+0x82>
    tcp_seg_free(seg);
 800aae2:	4620      	mov	r0, r4
 800aae4:	f7fd fd7a 	bl	80085dc <tcp_seg_free>
    return NULL;
 800aae8:	e7e0      	b.n	800aaac <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800aaea:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800aaec:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800aaee:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800aaf0:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800aaf4:	f505 45a0 	add.w	r5, r5, #20480	@ 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800aaf8:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800aafc:	f7fc f960 	bl	8006dc0 <lwip_htons>
 800ab00:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ab04:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800ab08:	8b38      	ldrh	r0, [r7, #24]
 800ab0a:	f7fc f959 	bl	8006dc0 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ab0e:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ab10:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ab14:	4648      	mov	r0, r9
 800ab16:	f7fc f956 	bl	8006dc6 <lwip_htonl>
 800ab1a:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ab1c:	ea48 0005 	orr.w	r0, r8, r5
 800ab20:	68e7      	ldr	r7, [r4, #12]
 800ab22:	f7fc f94d 	bl	8006dc0 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800ab26:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ab28:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800ab2a:	749e      	strb	r6, [r3, #18]
 800ab2c:	74de      	strb	r6, [r3, #19]
  return seg;
 800ab2e:	e7be      	b.n	800aaae <tcp_create_segment+0x46>
 800ab30:	08010c81 	.word	0x08010c81
 800ab34:	08010d0c 	.word	0x08010d0c
 800ab38:	0800f15a 	.word	0x0800f15a
 800ab3c:	08010d2c 	.word	0x08010d2c
 800ab40:	08010d4d 	.word	0x08010d4d

0800ab44 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ab44:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ab46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ab4a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ab50:	2022      	movs	r0, #34	@ 0x22
 800ab52:	f44f 7220 	mov.w	r2, #640	@ 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ab56:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ab58:	f7fd f8b2 	bl	8007cc0 <pbuf_alloc>
  if (p != NULL) {
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	b348      	cbz	r0, 800abb4 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ab60:	8943      	ldrh	r3, [r0, #10]
 800ab62:	2b13      	cmp	r3, #19
 800ab64:	d806      	bhi.n	800ab74 <tcp_output_alloc_header_common.constprop.0+0x30>
 800ab66:	4b15      	ldr	r3, [pc, #84]	@ (800abbc <tcp_output_alloc_header_common.constprop.0+0x78>)
 800ab68:	f240 7223 	movw	r2, #1827	@ 0x723
 800ab6c:	4914      	ldr	r1, [pc, #80]	@ (800abc0 <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800ab6e:	4815      	ldr	r0, [pc, #84]	@ (800abc4 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800ab70:	f003 fc22 	bl	800e3b8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ab74:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800ab76:	4640      	mov	r0, r8
 800ab78:	f7fc f922 	bl	8006dc0 <lwip_htons>
 800ab7c:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ab7e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800ab82:	f7fc f91d 	bl	8006dc0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800ab86:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800ab88:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7fc f91b 	bl	8006dc6 <lwip_htonl>
 800ab90:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ab92:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ab96:	f440 40a0 	orr.w	r0, r0, #20480	@ 0x5000
 800ab9a:	f7fc f911 	bl	8006dc0 <lwip_htons>
 800ab9e:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800aba0:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800aba4:	f7fc f90c 	bl	8006dc0 <lwip_htons>
    tcphdr->chksum = 0;
 800aba8:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800abaa:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800abac:	7423      	strb	r3, [r4, #16]
 800abae:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800abb0:	74a3      	strb	r3, [r4, #18]
 800abb2:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800abb4:	4628      	mov	r0, r5
 800abb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abba:	bf00      	nop
 800abbc:	08010c81 	.word	0x08010c81
 800abc0:	08010d62 	.word	0x08010d62
 800abc4:	0800f15a 	.word	0x0800f15a

0800abc8 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800abc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800abca:	460d      	mov	r5, r1
 800abcc:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800abce:	4604      	mov	r4, r0
 800abd0:	b930      	cbnz	r0, 800abe0 <tcp_output_alloc_header.constprop.0+0x18>
 800abd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac08 <tcp_output_alloc_header.constprop.0+0x40>)
 800abd4:	f240 7242 	movw	r2, #1858	@ 0x742
 800abd8:	490c      	ldr	r1, [pc, #48]	@ (800ac0c <tcp_output_alloc_header.constprop.0+0x44>)
 800abda:	480d      	ldr	r0, [pc, #52]	@ (800ac10 <tcp_output_alloc_header.constprop.0+0x48>)
 800abdc:	f003 fbec 	bl	800e3b8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800abe0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800abe2:	4632      	mov	r2, r6
 800abe4:	4629      	mov	r1, r5
 800abe6:	9302      	str	r3, [sp, #8]
 800abe8:	2310      	movs	r3, #16
 800abea:	9301      	str	r3, [sp, #4]
 800abec:	8b23      	ldrh	r3, [r4, #24]
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	8ae3      	ldrh	r3, [r4, #22]
 800abf2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800abf4:	f7ff ffa6 	bl	800ab44 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800abf8:	b118      	cbz	r0, 800ac02 <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800abfa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800abfc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800abfe:	4413      	add	r3, r2
 800ac00:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  return p;
}
 800ac02:	b004      	add	sp, #16
 800ac04:	bd70      	pop	{r4, r5, r6, pc}
 800ac06:	bf00      	nop
 800ac08:	08010c81 	.word	0x08010c81
 800ac0c:	08010d90 	.word	0x08010d90
 800ac10:	0800f15a 	.word	0x0800f15a

0800ac14 <tcp_output_fill_options.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ac14:	b930      	cbnz	r0, 800ac24 <tcp_output_fill_options.constprop.0+0x10>
 800ac16:	4b04      	ldr	r3, [pc, #16]	@ (800ac28 <tcp_output_fill_options.constprop.0+0x14>)
 800ac18:	f240 7256 	movw	r2, #1878	@ 0x756
 800ac1c:	4903      	ldr	r1, [pc, #12]	@ (800ac2c <tcp_output_fill_options.constprop.0+0x18>)
 800ac1e:	4804      	ldr	r0, [pc, #16]	@ (800ac30 <tcp_output_fill_options.constprop.0+0x1c>)
 800ac20:	f003 bbca 	b.w	800e3b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	08010c81 	.word	0x08010c81
 800ac2c:	08010db5 	.word	0x08010db5
 800ac30:	0800f15a 	.word	0x0800f15a

0800ac34 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ac34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac36:	4604      	mov	r4, r0
 800ac38:	b085      	sub	sp, #20
 800ac3a:	4617      	mov	r7, r2
 800ac3c:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ac3e:	460d      	mov	r5, r1
 800ac40:	b931      	cbnz	r1, 800ac50 <tcp_output_control_segment+0x1c>
 800ac42:	4b15      	ldr	r3, [pc, #84]	@ (800ac98 <tcp_output_control_segment+0x64>)
 800ac44:	f240 7287 	movw	r2, #1927	@ 0x787
 800ac48:	4914      	ldr	r1, [pc, #80]	@ (800ac9c <tcp_output_control_segment+0x68>)
 800ac4a:	4815      	ldr	r0, [pc, #84]	@ (800aca0 <tcp_output_control_segment+0x6c>)
 800ac4c:	f003 fbb4 	bl	800e3b8 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ac50:	b164      	cbz	r4, 800ac6c <tcp_output_control_segment+0x38>
 800ac52:	7a20      	ldrb	r0, [r4, #8]
 800ac54:	b150      	cbz	r0, 800ac6c <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800ac56:	f7fc fee9 	bl	8007a2c <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800ac5a:	b968      	cbnz	r0, 800ac78 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800ac5c:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ac60:	4628      	mov	r0, r5
 800ac62:	f7fc ffc3 	bl	8007bec <pbuf_free>
  return err;
}
 800ac66:	4620      	mov	r0, r4
 800ac68:	b005      	add	sp, #20
 800ac6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f002 f817 	bl	800cca0 <ip4_route>
  if (netif == NULL) {
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d0f2      	beq.n	800ac5c <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800ac76:	b164      	cbz	r4, 800ac92 <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800ac78:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800ac7a:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ac7c:	2206      	movs	r2, #6
 800ac7e:	9002      	str	r0, [sp, #8]
 800ac80:	4639      	mov	r1, r7
 800ac82:	4628      	mov	r0, r5
 800ac84:	e9cd 4200 	strd	r4, r2, [sp]
 800ac88:	4632      	mov	r2, r6
 800ac8a:	f002 f969 	bl	800cf60 <ip4_output_if>
 800ac8e:	4604      	mov	r4, r0
 800ac90:	e7e6      	b.n	800ac60 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800ac92:	23ff      	movs	r3, #255	@ 0xff
 800ac94:	e7f2      	b.n	800ac7c <tcp_output_control_segment+0x48>
 800ac96:	bf00      	nop
 800ac98:	08010c81 	.word	0x08010c81
 800ac9c:	08010ddb 	.word	0x08010ddb
 800aca0:	0800f15a 	.word	0x0800f15a

0800aca4 <tcp_write>:
{
 800aca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca8:	b091      	sub	sp, #68	@ 0x44
 800acaa:	4692      	mov	sl, r2
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800acac:	4604      	mov	r4, r0
{
 800acae:	930a      	str	r3, [sp, #40]	@ 0x28
  u16_t oversize = 0;
 800acb0:	2300      	movs	r3, #0
{
 800acb2:	9108      	str	r1, [sp, #32]
  u16_t oversize = 0;
 800acb4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800acb8:	b958      	cbnz	r0, 800acd2 <tcp_write+0x2e>
 800acba:	4ba8      	ldr	r3, [pc, #672]	@ (800af5c <tcp_write+0x2b8>)
 800acbc:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800acc0:	49a7      	ldr	r1, [pc, #668]	@ (800af60 <tcp_write+0x2bc>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800acc2:	48a8      	ldr	r0, [pc, #672]	@ (800af64 <tcp_write+0x2c0>)
 800acc4:	f003 fb78 	bl	800e3b8 <iprintf>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800acc8:	f06f 000f 	mvn.w	r0, #15
}
 800accc:	b011      	add	sp, #68	@ 0x44
 800acce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800acd2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	@ 0x62
 800acd6:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 800acd8:	085b      	lsrs	r3, r3, #1
 800acda:	4293      	cmp	r3, r2
 800acdc:	bf28      	it	cs
 800acde:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bf08      	it	eq
 800ace4:	4613      	moveq	r3, r2
 800ace6:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ace8:	9b08      	ldr	r3, [sp, #32]
 800acea:	b923      	cbnz	r3, 800acf6 <tcp_write+0x52>
 800acec:	4b9b      	ldr	r3, [pc, #620]	@ (800af5c <tcp_write+0x2b8>)
 800acee:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800acf2:	499d      	ldr	r1, [pc, #628]	@ (800af68 <tcp_write+0x2c4>)
 800acf4:	e7e5      	b.n	800acc2 <tcp_write+0x1e>
  if ((pcb->state != ESTABLISHED) &&
 800acf6:	7d03      	ldrb	r3, [r0, #20]
 800acf8:	1e9a      	subs	r2, r3, #2
 800acfa:	2a02      	cmp	r2, #2
 800acfc:	d902      	bls.n	800ad04 <tcp_write+0x60>
 800acfe:	2b07      	cmp	r3, #7
 800ad00:	f040 8241 	bne.w	800b186 <tcp_write+0x4e2>
  } else if (len == 0) {
 800ad04:	f1ba 0f00 	cmp.w	sl, #0
 800ad08:	d01a      	beq.n	800ad40 <tcp_write+0x9c>
  if (len > pcb->snd_buf) {
 800ad0a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800ad0e:	4553      	cmp	r3, sl
 800ad10:	d206      	bcs.n	800ad20 <tcp_write+0x7c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ad12:	8b63      	ldrh	r3, [r4, #26]
 800ad14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad18:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800ad1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1e:	e7d5      	b.n	800accc <tcp_write+0x28>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ad20:	f8b4 2066 	ldrh.w	r2, [r4, #102]	@ 0x66
 800ad24:	2a0e      	cmp	r2, #14
 800ad26:	d8f4      	bhi.n	800ad12 <tcp_write+0x6e>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ad28:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  if (pcb->snd_queuelen != 0) {
 800ad2a:	b302      	cbz	r2, 800ad6e <tcp_write+0xca>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ad2c:	b943      	cbnz	r3, 800ad40 <tcp_write+0x9c>
 800ad2e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ad30:	b933      	cbnz	r3, 800ad40 <tcp_write+0x9c>
 800ad32:	4b8a      	ldr	r3, [pc, #552]	@ (800af5c <tcp_write+0x2b8>)
 800ad34:	f240 1255 	movw	r2, #341	@ 0x155
 800ad38:	498c      	ldr	r1, [pc, #560]	@ (800af6c <tcp_write+0x2c8>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ad3a:	488a      	ldr	r0, [pc, #552]	@ (800af64 <tcp_write+0x2c0>)
 800ad3c:	f003 fb3c 	bl	800e3b8 <iprintf>
  queuelen = pcb->snd_queuelen;
 800ad40:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800ad44:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800ad46:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800ad48:	b9dd      	cbnz	r5, 800ad82 <tcp_write+0xde>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ad4a:	f8b4 6068 	ldrh.w	r6, [r4, #104]	@ 0x68
 800ad4e:	2e00      	cmp	r6, #0
 800ad50:	f000 81b2 	beq.w	800b0b8 <tcp_write+0x414>
 800ad54:	4b81      	ldr	r3, [pc, #516]	@ (800af5c <tcp_write+0x2b8>)
 800ad56:	f240 224a 	movw	r2, #586	@ 0x24a
 800ad5a:	4985      	ldr	r1, [pc, #532]	@ (800af70 <tcp_write+0x2cc>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ad5c:	46a8      	mov	r8, r5
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ad5e:	4881      	ldr	r0, [pc, #516]	@ (800af64 <tcp_write+0x2c0>)
  u16_t extendlen = 0;
 800ad60:	46a9      	mov	r9, r5
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ad62:	f003 fb29 	bl	800e3b8 <iprintf>
  u16_t oversize_used = 0;
 800ad66:	462f      	mov	r7, r5
  u16_t pos = 0; /* position in 'arg' data */
 800ad68:	462e      	mov	r6, r5
  struct pbuf *concat_p = NULL;
 800ad6a:	9505      	str	r5, [sp, #20]
 800ad6c:	e0a0      	b.n	800aeb0 <tcp_write+0x20c>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ad6e:	b913      	cbnz	r3, 800ad76 <tcp_write+0xd2>
 800ad70:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0e4      	beq.n	800ad40 <tcp_write+0x9c>
 800ad76:	4b79      	ldr	r3, [pc, #484]	@ (800af5c <tcp_write+0x2b8>)
 800ad78:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800ad7c:	497d      	ldr	r1, [pc, #500]	@ (800af74 <tcp_write+0x2d0>)
 800ad7e:	e7dc      	b.n	800ad3a <tcp_write+0x96>
 800ad80:	9d05      	ldr	r5, [sp, #20]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ad82:	682b      	ldr	r3, [r5, #0]
 800ad84:	46a8      	mov	r8, r5
 800ad86:	9305      	str	r3, [sp, #20]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1f9      	bne.n	800ad80 <tcp_write+0xdc>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ad8c:	7aaf      	ldrb	r7, [r5, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ad8e:	892b      	ldrh	r3, [r5, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ad90:	00bf      	lsls	r7, r7, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ad92:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ad94:	f007 0704 	and.w	r7, r7, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ad98:	443b      	add	r3, r7
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	da06      	bge.n	800adac <tcp_write+0x108>
 800ad9e:	4b6f      	ldr	r3, [pc, #444]	@ (800af5c <tcp_write+0x2b8>)
 800ada0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ada4:	4974      	ldr	r1, [pc, #464]	@ (800af78 <tcp_write+0x2d4>)
 800ada6:	486f      	ldr	r0, [pc, #444]	@ (800af64 <tcp_write+0x2c0>)
 800ada8:	f003 fb06 	bl	800e3b8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800adac:	892e      	ldrh	r6, [r5, #8]
 800adae:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 800adb0:	f8b4 9068 	ldrh.w	r9, [r4, #104]	@ 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800adb4:	1b9e      	subs	r6, r3, r6
    oversize = pcb->unsent_oversize;
 800adb6:	f8ad 903e 	strh.w	r9, [sp, #62]	@ 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 800adba:	1bf6      	subs	r6, r6, r7
 800adbc:	b2b6      	uxth	r6, r6
    if (oversize > 0) {
 800adbe:	f1b9 0f00 	cmp.w	r9, #0
 800adc2:	d05a      	beq.n	800ae7a <tcp_write+0x1d6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800adc4:	45b1      	cmp	r9, r6
 800adc6:	d906      	bls.n	800add6 <tcp_write+0x132>
 800adc8:	4b64      	ldr	r3, [pc, #400]	@ (800af5c <tcp_write+0x2b8>)
 800adca:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800adce:	496b      	ldr	r1, [pc, #428]	@ (800af7c <tcp_write+0x2d8>)
 800add0:	4864      	ldr	r0, [pc, #400]	@ (800af64 <tcp_write+0x2c0>)
 800add2:	f003 faf1 	bl	800e3b8 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800add6:	45d1      	cmp	r9, sl
 800add8:	464f      	mov	r7, r9
 800adda:	bf28      	it	cs
 800addc:	4657      	movcs	r7, sl
 800adde:	42b7      	cmp	r7, r6
 800ade0:	bf28      	it	cs
 800ade2:	4637      	movcs	r7, r6
      oversize -= oversize_used;
 800ade4:	eba9 0907 	sub.w	r9, r9, r7
 800ade8:	fa1f f389 	uxth.w	r3, r9
 800adec:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d137      	bne.n	800ae64 <tcp_write+0x1c0>
      space -= oversize_used;
 800adf4:	1bf6      	subs	r6, r6, r7
 800adf6:	b2b6      	uxth	r6, r6
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800adf8:	4557      	cmp	r7, sl
 800adfa:	f080 81c7 	bcs.w	800b18c <tcp_write+0x4e8>
 800adfe:	2e00      	cmp	r6, #0
 800ae00:	f000 8157 	beq.w	800b0b2 <tcp_write+0x40e>
 800ae04:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800ae08:	f1b9 0f00 	cmp.w	r9, #0
 800ae0c:	f000 8152 	beq.w	800b0b4 <tcp_write+0x410>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ae10:	ebaa 0907 	sub.w	r9, sl, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ae14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ae16:	45b1      	cmp	r9, r6
 800ae18:	bfa8      	it	ge
 800ae1a:	46b1      	movge	r9, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ae1c:	07d9      	lsls	r1, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ae1e:	fa1f f589 	uxth.w	r5, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ae22:	d52d      	bpl.n	800ae80 <tcp_write+0x1dc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ae24:	2301      	movs	r3, #1
 800ae26:	4632      	mov	r2, r6
 800ae28:	4629      	mov	r1, r5
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	9302      	str	r3, [sp, #8]
 800ae2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae30:	e9cd 4300 	strd	r4, r3, [sp]
 800ae34:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800ae38:	f7ff fdc6 	bl	800a9c8 <tcp_pbuf_prealloc>
 800ae3c:	4683      	mov	fp, r0
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	f000 819e 	beq.w	800b180 <tcp_write+0x4dc>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ae44:	9b08      	ldr	r3, [sp, #32]
 800ae46:	462a      	mov	r2, r5
 800ae48:	6840      	ldr	r0, [r0, #4]
 800ae4a:	19d9      	adds	r1, r3, r7
 800ae4c:	f003 fc89 	bl	800e762 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800ae50:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800ae52:	f7fd f81f 	bl	8007e94 <pbuf_clen>
 800ae56:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 800ae58:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800ae5c:	4403      	add	r3, r0
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	9306      	str	r3, [sp, #24]
 800ae62:	e020      	b.n	800aea6 <tcp_write+0x202>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ae64:	45ba      	cmp	sl, r7
 800ae66:	f000 8191 	beq.w	800b18c <tcp_write+0x4e8>
 800ae6a:	4b3c      	ldr	r3, [pc, #240]	@ (800af5c <tcp_write+0x2b8>)
 800ae6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae70:	4943      	ldr	r1, [pc, #268]	@ (800af80 <tcp_write+0x2dc>)
 800ae72:	483c      	ldr	r0, [pc, #240]	@ (800af64 <tcp_write+0x2c0>)
 800ae74:	f003 faa0 	bl	800e3b8 <iprintf>
 800ae78:	e7bc      	b.n	800adf4 <tcp_write+0x150>
  u16_t pos = 0; /* position in 'arg' data */
 800ae7a:	464d      	mov	r5, r9
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ae7c:	464f      	mov	r7, r9
 800ae7e:	e7bb      	b.n	800adf8 <tcp_write+0x154>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ae80:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ae84:	465b      	mov	r3, fp
 800ae86:	f8db b000 	ldr.w	fp, [fp]
 800ae8a:	f1bb 0f00 	cmp.w	fp, #0
 800ae8e:	d1f9      	bne.n	800ae84 <tcp_write+0x1e0>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ae90:	7b1a      	ldrb	r2, [r3, #12]
 800ae92:	2a3f      	cmp	r2, #63	@ 0x3f
 800ae94:	d81d      	bhi.n	800aed2 <tcp_write+0x22e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ae96:	895a      	ldrh	r2, [r3, #10]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ae9c:	9a08      	ldr	r2, [sp, #32]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d117      	bne.n	800aed2 <tcp_write+0x22e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800aea2:	b977      	cbnz	r7, 800aec2 <tcp_write+0x21e>
          extendlen = seglen;
 800aea4:	46a9      	mov	r9, r5
      pos += seglen;
 800aea6:	197e      	adds	r6, r7, r5
 800aea8:	4645      	mov	r5, r8
 800aeaa:	f8cd b014 	str.w	fp, [sp, #20]
 800aeae:	b2b6      	uxth	r6, r6
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800aeb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeb2:	f04f 0b00 	mov.w	fp, #0
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 800aebe:	930c      	str	r3, [sp, #48]	@ 0x30
 800aec0:	e0c9      	b.n	800b056 <tcp_write+0x3b2>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800aec2:	4b26      	ldr	r3, [pc, #152]	@ (800af5c <tcp_write+0x2b8>)
 800aec4:	f240 2231 	movw	r2, #561	@ 0x231
 800aec8:	492e      	ldr	r1, [pc, #184]	@ (800af84 <tcp_write+0x2e0>)
 800aeca:	4826      	ldr	r0, [pc, #152]	@ (800af64 <tcp_write+0x2c0>)
 800aecc:	f003 fa74 	bl	800e3b8 <iprintf>
 800aed0:	e7e8      	b.n	800aea4 <tcp_write+0x200>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800aed2:	2201      	movs	r2, #1
 800aed4:	4629      	mov	r1, r5
 800aed6:	2000      	movs	r0, #0
 800aed8:	f7fc fef2 	bl	8007cc0 <pbuf_alloc>
 800aedc:	4683      	mov	fp, r0
 800aede:	2800      	cmp	r0, #0
 800aee0:	f000 814e 	beq.w	800b180 <tcp_write+0x4dc>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800aee4:	9b08      	ldr	r3, [sp, #32]
 800aee6:	443b      	add	r3, r7
 800aee8:	6043      	str	r3, [r0, #4]
 800aeea:	e7b2      	b.n	800ae52 <tcp_write+0x1ae>
    u16_t left = len - pos;
 800aeec:	ebaa 0306 	sub.w	r3, sl, r6
    u16_t seglen = LWIP_MIN(left, max_len);
 800aef0:	9a07      	ldr	r2, [sp, #28]
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	4293      	cmp	r3, r2
 800aef6:	bf28      	it	cs
 800aef8:	4613      	movcs	r3, r2
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	9309      	str	r3, [sp, #36]	@ 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800aefe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af00:	2b00      	cmp	r3, #0
 800af02:	d043      	beq.n	800af8c <tcp_write+0x2e8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800af04:	fabb f38b 	clz	r3, fp
 800af08:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af0a:	2036      	movs	r0, #54	@ 0x36
 800af0c:	095b      	lsrs	r3, r3, #5
 800af0e:	9302      	str	r3, [sp, #8]
 800af10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af12:	e9cd 4300 	strd	r4, r3, [sp]
 800af16:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800af1a:	f7ff fd55 	bl	800a9c8 <tcp_pbuf_prealloc>
 800af1e:	4605      	mov	r5, r0
 800af20:	2800      	cmp	r0, #0
 800af22:	d053      	beq.n	800afcc <tcp_write+0x328>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800af24:	8943      	ldrh	r3, [r0, #10]
 800af26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af28:	4293      	cmp	r3, r2
 800af2a:	d206      	bcs.n	800af3a <tcp_write+0x296>
 800af2c:	4b0b      	ldr	r3, [pc, #44]	@ (800af5c <tcp_write+0x2b8>)
 800af2e:	f240 2266 	movw	r2, #614	@ 0x266
 800af32:	4915      	ldr	r1, [pc, #84]	@ (800af88 <tcp_write+0x2e4>)
 800af34:	480b      	ldr	r0, [pc, #44]	@ (800af64 <tcp_write+0x2c0>)
 800af36:	f003 fa3f 	bl	800e3b8 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800af3a:	6868      	ldr	r0, [r5, #4]
 800af3c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800af40:	1999      	adds	r1, r3, r6
 800af42:	f003 fc0e 	bl	800e762 <memcpy>
    queuelen += pbuf_clen(p);
 800af46:	4628      	mov	r0, r5
 800af48:	f7fc ffa4 	bl	8007e94 <pbuf_clen>
 800af4c:	9b06      	ldr	r3, [sp, #24]
 800af4e:	4403      	add	r3, r0
 800af50:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800af52:	2b0f      	cmp	r3, #15
    queuelen += pbuf_clen(p);
 800af54:	9306      	str	r3, [sp, #24]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800af56:	d961      	bls.n	800b01c <tcp_write+0x378>
      pbuf_free(p);
 800af58:	4628      	mov	r0, r5
 800af5a:	e035      	b.n	800afc8 <tcp_write+0x324>
 800af5c:	08010c81 	.word	0x08010c81
 800af60:	08010e04 	.word	0x08010e04
 800af64:	0800f15a 	.word	0x0800f15a
 800af68:	08010e1b 	.word	0x08010e1b
 800af6c:	08010e4c 	.word	0x08010e4c
 800af70:	08010f36 	.word	0x08010f36
 800af74:	08010e86 	.word	0x08010e86
 800af78:	08010eb8 	.word	0x08010eb8
 800af7c:	08010ecf 	.word	0x08010ecf
 800af80:	08010eef 	.word	0x08010eef
 800af84:	08010f0d 	.word	0x08010f0d
 800af88:	08010f65 	.word	0x08010f65
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800af8c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800af90:	b133      	cbz	r3, 800afa0 <tcp_write+0x2fc>
 800af92:	4b80      	ldr	r3, [pc, #512]	@ (800b194 <tcp_write+0x4f0>)
 800af94:	f240 2271 	movw	r2, #625	@ 0x271
 800af98:	497f      	ldr	r1, [pc, #508]	@ (800b198 <tcp_write+0x4f4>)
 800af9a:	4880      	ldr	r0, [pc, #512]	@ (800b19c <tcp_write+0x4f8>)
 800af9c:	f003 fa0c 	bl	800e3b8 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800afa0:	2201      	movs	r2, #1
 800afa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afa4:	2036      	movs	r0, #54	@ 0x36
 800afa6:	f7fc fe8b 	bl	8007cc0 <pbuf_alloc>
 800afaa:	b178      	cbz	r0, 800afcc <tcp_write+0x328>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800afac:	9a08      	ldr	r2, [sp, #32]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800afae:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800afb0:	900d      	str	r0, [sp, #52]	@ 0x34
 800afb2:	4432      	add	r2, r6
 800afb4:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800afb6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800afba:	2036      	movs	r0, #54	@ 0x36
 800afbc:	f7fc fe80 	bl	8007cc0 <pbuf_alloc>
 800afc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afc2:	4605      	mov	r5, r0
 800afc4:	bb30      	cbnz	r0, 800b014 <tcp_write+0x370>
        pbuf_free(p2);
 800afc6:	4618      	mov	r0, r3
      pbuf_free(p);
 800afc8:	f7fc fe10 	bl	8007bec <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800afcc:	8b63      	ldrh	r3, [r4, #26]
 800afce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afd2:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800afd4:	9b05      	ldr	r3, [sp, #20]
 800afd6:	b113      	cbz	r3, 800afde <tcp_write+0x33a>
    pbuf_free(concat_p);
 800afd8:	4618      	mov	r0, r3
 800afda:	f7fc fe07 	bl	8007bec <pbuf_free>
  if (queue != NULL) {
 800afde:	f1bb 0f00 	cmp.w	fp, #0
 800afe2:	d002      	beq.n	800afea <tcp_write+0x346>
    tcp_segs_free(queue);
 800afe4:	4658      	mov	r0, fp
 800afe6:	f7fd fb07 	bl	80085f8 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800afea:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f43f ae93 	beq.w	800ad1a <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800aff4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f47f ae8f 	bne.w	800ad1a <tcp_write+0x76>
 800affc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800affe:	2b00      	cmp	r3, #0
 800b000:	f47f ae8b 	bne.w	800ad1a <tcp_write+0x76>
 800b004:	4b63      	ldr	r3, [pc, #396]	@ (800b194 <tcp_write+0x4f0>)
 800b006:	f240 3227 	movw	r2, #807	@ 0x327
 800b00a:	4965      	ldr	r1, [pc, #404]	@ (800b1a0 <tcp_write+0x4fc>)
 800b00c:	4863      	ldr	r0, [pc, #396]	@ (800b19c <tcp_write+0x4f8>)
 800b00e:	f003 f9d3 	bl	800e3b8 <iprintf>
 800b012:	e682      	b.n	800ad1a <tcp_write+0x76>
      pbuf_cat(p/*header*/, p2/*data*/);
 800b014:	4619      	mov	r1, r3
 800b016:	f7fc ff61 	bl	8007edc <pbuf_cat>
 800b01a:	e794      	b.n	800af46 <tcp_write+0x2a2>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b01c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800b01e:	2200      	movs	r2, #0
 800b020:	4629      	mov	r1, r5
 800b022:	4620      	mov	r0, r4
 800b024:	4433      	add	r3, r6
 800b026:	9200      	str	r2, [sp, #0]
 800b028:	f7ff fd1e 	bl	800aa68 <tcp_create_segment>
 800b02c:	4605      	mov	r5, r0
 800b02e:	2800      	cmp	r0, #0
 800b030:	d0cc      	beq.n	800afcc <tcp_write+0x328>
    if (queue == NULL) {
 800b032:	f1bb 0f00 	cmp.w	fp, #0
 800b036:	d03a      	beq.n	800b0ae <tcp_write+0x40a>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b038:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b03a:	b933      	cbnz	r3, 800b04a <tcp_write+0x3a6>
 800b03c:	4b55      	ldr	r3, [pc, #340]	@ (800b194 <tcp_write+0x4f0>)
 800b03e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800b042:	4958      	ldr	r1, [pc, #352]	@ (800b1a4 <tcp_write+0x500>)
 800b044:	4855      	ldr	r0, [pc, #340]	@ (800b19c <tcp_write+0x4f8>)
 800b046:	f003 f9b7 	bl	800e3b8 <iprintf>
      prev_seg->next = seg;
 800b04a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b04c:	601d      	str	r5, [r3, #0]
    pos += seglen;
 800b04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b050:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b052:	4433      	add	r3, r6
 800b054:	b29e      	uxth	r6, r3
  while (pos < len) {
 800b056:	4556      	cmp	r6, sl
 800b058:	f4ff af48 	bcc.w	800aeec <tcp_write+0x248>
  if (oversize_used > 0) {
 800b05c:	b13f      	cbz	r7, 800b06e <tcp_write+0x3ca>
    for (p = last_unsent->p; p; p = p->next) {
 800b05e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800b062:	bb76      	cbnz	r6, 800b0c2 <tcp_write+0x41e>
    last_unsent->len += oversize_used;
 800b064:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b068:	443b      	add	r3, r7
 800b06a:	f8a8 3008 	strh.w	r3, [r8, #8]
  pcb->unsent_oversize = oversize;
 800b06e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800b072:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if (concat_p != NULL) {
 800b076:	9b05      	ldr	r3, [sp, #20]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d033      	beq.n	800b0e4 <tcp_write+0x440>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b07c:	f1b8 0f00 	cmp.w	r8, #0
 800b080:	d106      	bne.n	800b090 <tcp_write+0x3ec>
 800b082:	4b44      	ldr	r3, [pc, #272]	@ (800b194 <tcp_write+0x4f0>)
 800b084:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800b088:	4947      	ldr	r1, [pc, #284]	@ (800b1a8 <tcp_write+0x504>)
 800b08a:	4844      	ldr	r0, [pc, #272]	@ (800b19c <tcp_write+0x4f8>)
 800b08c:	f003 f994 	bl	800e3b8 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800b090:	9905      	ldr	r1, [sp, #20]
 800b092:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b096:	f7fc ff21 	bl	8007edc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b09a:	9a05      	ldr	r2, [sp, #20]
 800b09c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b0a0:	8912      	ldrh	r2, [r2, #8]
 800b0a2:	4413      	add	r3, r2
    last_unsent->len += extendlen;
 800b0a4:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800b0a8:	f8c8 b000 	str.w	fp, [r8]
 800b0ac:	e040      	b.n	800b130 <tcp_write+0x48c>
 800b0ae:	4683      	mov	fp, r0
 800b0b0:	e7cd      	b.n	800b04e <tcp_write+0x3aa>
  u16_t extendlen = 0;
 800b0b2:	46b1      	mov	r9, r6
 800b0b4:	463e      	mov	r6, r7
 800b0b6:	e6fb      	b.n	800aeb0 <tcp_write+0x20c>
 800b0b8:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800b0ba:	4637      	mov	r7, r6
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b0bc:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 800b0be:	9605      	str	r6, [sp, #20]
 800b0c0:	e6f6      	b.n	800aeb0 <tcp_write+0x20c>
      p->tot_len += oversize_used;
 800b0c2:	8933      	ldrh	r3, [r6, #8]
 800b0c4:	443b      	add	r3, r7
 800b0c6:	8133      	strh	r3, [r6, #8]
      if (p->next == NULL) {
 800b0c8:	6833      	ldr	r3, [r6, #0]
 800b0ca:	b94b      	cbnz	r3, 800b0e0 <tcp_write+0x43c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b0cc:	6873      	ldr	r3, [r6, #4]
 800b0ce:	463a      	mov	r2, r7
 800b0d0:	8970      	ldrh	r0, [r6, #10]
 800b0d2:	9908      	ldr	r1, [sp, #32]
 800b0d4:	4418      	add	r0, r3
 800b0d6:	f003 fb44 	bl	800e762 <memcpy>
        p->len += oversize_used;
 800b0da:	8973      	ldrh	r3, [r6, #10]
 800b0dc:	443b      	add	r3, r7
 800b0de:	8173      	strh	r3, [r6, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b0e0:	6836      	ldr	r6, [r6, #0]
 800b0e2:	e7be      	b.n	800b062 <tcp_write+0x3be>
  } else if (extendlen > 0) {
 800b0e4:	f1b9 0f00 	cmp.w	r9, #0
 800b0e8:	d01d      	beq.n	800b126 <tcp_write+0x482>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b0ea:	f1b8 0f00 	cmp.w	r8, #0
 800b0ee:	d002      	beq.n	800b0f6 <tcp_write+0x452>
 800b0f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b0f4:	b933      	cbnz	r3, 800b104 <tcp_write+0x460>
 800b0f6:	4b27      	ldr	r3, [pc, #156]	@ (800b194 <tcp_write+0x4f0>)
 800b0f8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800b0fc:	492b      	ldr	r1, [pc, #172]	@ (800b1ac <tcp_write+0x508>)
 800b0fe:	4827      	ldr	r0, [pc, #156]	@ (800b19c <tcp_write+0x4f8>)
 800b100:	f003 f95a 	bl	800e3b8 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b104:	f8d8 3004 	ldr.w	r3, [r8, #4]
      p->tot_len += extendlen;
 800b108:	891a      	ldrh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b10a:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800b10c:	444a      	add	r2, r9
 800b10e:	b292      	uxth	r2, r2
 800b110:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b112:	b931      	cbnz	r1, 800b122 <tcp_write+0x47e>
    p->len += extendlen;
 800b114:	895a      	ldrh	r2, [r3, #10]
 800b116:	444a      	add	r2, r9
 800b118:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b11a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b11e:	444b      	add	r3, r9
 800b120:	e7c0      	b.n	800b0a4 <tcp_write+0x400>
      p->tot_len += extendlen;
 800b122:	460b      	mov	r3, r1
 800b124:	e7f0      	b.n	800b108 <tcp_write+0x464>
  if (last_unsent == NULL) {
 800b126:	f1b8 0f00 	cmp.w	r8, #0
 800b12a:	d1bd      	bne.n	800b0a8 <tcp_write+0x404>
    pcb->unsent = queue;
 800b12c:	f8c4 b06c 	str.w	fp, [r4, #108]	@ 0x6c
  pcb->snd_lbb += len;
 800b130:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800b132:	4453      	add	r3, sl
 800b134:	65e3      	str	r3, [r4, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800b136:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800b13a:	eba3 030a 	sub.w	r3, r3, sl
 800b13e:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800b142:	9b06      	ldr	r3, [sp, #24]
 800b144:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 800b148:	b153      	cbz	r3, 800b160 <tcp_write+0x4bc>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b14a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b14c:	b943      	cbnz	r3, 800b160 <tcp_write+0x4bc>
 800b14e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b150:	b933      	cbnz	r3, 800b160 <tcp_write+0x4bc>
 800b152:	4b10      	ldr	r3, [pc, #64]	@ (800b194 <tcp_write+0x4f0>)
 800b154:	f240 3212 	movw	r2, #786	@ 0x312
 800b158:	4911      	ldr	r1, [pc, #68]	@ (800b1a0 <tcp_write+0x4fc>)
 800b15a:	4810      	ldr	r0, [pc, #64]	@ (800b19c <tcp_write+0x4f8>)
 800b15c:	f003 f92c 	bl	800e3b8 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b160:	b10d      	cbz	r5, 800b166 <tcp_write+0x4c2>
 800b162:	68eb      	ldr	r3, [r5, #12]
 800b164:	b90b      	cbnz	r3, 800b16a <tcp_write+0x4c6>
  return ERR_OK;
 800b166:	2000      	movs	r0, #0
 800b168:	e5b0      	b.n	800accc <tcp_write+0x28>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b16a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b16c:	0792      	lsls	r2, r2, #30
 800b16e:	d4fa      	bmi.n	800b166 <tcp_write+0x4c2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b170:	899c      	ldrh	r4, [r3, #12]
 800b172:	2008      	movs	r0, #8
 800b174:	f7fb fe24 	bl	8006dc0 <lwip_htons>
 800b178:	68eb      	ldr	r3, [r5, #12]
 800b17a:	4304      	orrs	r4, r0
 800b17c:	819c      	strh	r4, [r3, #12]
 800b17e:	e7f2      	b.n	800b166 <tcp_write+0x4c2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b180:	f04f 0b00 	mov.w	fp, #0
 800b184:	e722      	b.n	800afcc <tcp_write+0x328>
    return ERR_CONN;
 800b186:	f06f 000a 	mvn.w	r0, #10
 800b18a:	e59f      	b.n	800accc <tcp_write+0x28>
    pos += seglen;
 800b18c:	f04f 0b00 	mov.w	fp, #0
 800b190:	46d9      	mov	r9, fp
 800b192:	e763      	b.n	800b05c <tcp_write+0x3b8>
 800b194:	08010c81 	.word	0x08010c81
 800b198:	08010fa3 	.word	0x08010fa3
 800b19c:	0800f15a 	.word	0x0800f15a
 800b1a0:	0801102f 	.word	0x0801102f
 800b1a4:	08010fb1 	.word	0x08010fb1
 800b1a8:	08010fc2 	.word	0x08010fc2
 800b1ac:	08010ffa 	.word	0x08010ffa

0800b1b0 <tcp_split_unsent_seg>:
{
 800b1b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	b930      	cbnz	r0, 800b1c8 <tcp_split_unsent_seg+0x18>
 800b1ba:	4b5d      	ldr	r3, [pc, #372]	@ (800b330 <tcp_split_unsent_seg+0x180>)
 800b1bc:	f240 324b 	movw	r2, #843	@ 0x34b
 800b1c0:	495c      	ldr	r1, [pc, #368]	@ (800b334 <tcp_split_unsent_seg+0x184>)
 800b1c2:	485d      	ldr	r0, [pc, #372]	@ (800b338 <tcp_split_unsent_seg+0x188>)
 800b1c4:	f003 f8f8 	bl	800e3b8 <iprintf>
  useg = pcb->unsent;
 800b1c8:	6ef4      	ldr	r4, [r6, #108]	@ 0x6c
  if (useg == NULL) {
 800b1ca:	2c00      	cmp	r4, #0
 800b1cc:	f000 80ac 	beq.w	800b328 <tcp_split_unsent_seg+0x178>
  if (split == 0) {
 800b1d0:	b95d      	cbnz	r5, 800b1ea <tcp_split_unsent_seg+0x3a>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b1d2:	4b57      	ldr	r3, [pc, #348]	@ (800b330 <tcp_split_unsent_seg+0x180>)
 800b1d4:	f240 3253 	movw	r2, #851	@ 0x353
 800b1d8:	4958      	ldr	r1, [pc, #352]	@ (800b33c <tcp_split_unsent_seg+0x18c>)
 800b1da:	4857      	ldr	r0, [pc, #348]	@ (800b338 <tcp_split_unsent_seg+0x188>)
 800b1dc:	f003 f8ec 	bl	800e3b8 <iprintf>
    return ERR_VAL;
 800b1e0:	f06f 0005 	mvn.w	r0, #5
}
 800b1e4:	b003      	add	sp, #12
 800b1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800b1ea:	8923      	ldrh	r3, [r4, #8]
 800b1ec:	42ab      	cmp	r3, r5
 800b1ee:	f240 8096 	bls.w	800b31e <tcp_split_unsent_seg+0x16e>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b1f2:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 800b1f4:	42ab      	cmp	r3, r5
 800b1f6:	d20f      	bcs.n	800b218 <tcp_split_unsent_seg+0x68>
 800b1f8:	4b4d      	ldr	r3, [pc, #308]	@ (800b330 <tcp_split_unsent_seg+0x180>)
 800b1fa:	f240 325b 	movw	r2, #859	@ 0x35b
 800b1fe:	4950      	ldr	r1, [pc, #320]	@ (800b340 <tcp_split_unsent_seg+0x190>)
 800b200:	484d      	ldr	r0, [pc, #308]	@ (800b338 <tcp_split_unsent_seg+0x188>)
 800b202:	f003 f8d9 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b206:	8923      	ldrh	r3, [r4, #8]
 800b208:	b933      	cbnz	r3, 800b218 <tcp_split_unsent_seg+0x68>
 800b20a:	4b49      	ldr	r3, [pc, #292]	@ (800b330 <tcp_split_unsent_seg+0x180>)
 800b20c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800b210:	494c      	ldr	r1, [pc, #304]	@ (800b344 <tcp_split_unsent_seg+0x194>)
 800b212:	4849      	ldr	r0, [pc, #292]	@ (800b338 <tcp_split_unsent_seg+0x188>)
 800b214:	f003 f8d0 	bl	800e3b8 <iprintf>
  optflags = useg->flags;
 800b218:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b21c:	f44f 7220 	mov.w	r2, #640	@ 0x280
  remainder = useg->len - split;
 800b220:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b224:	2036      	movs	r0, #54	@ 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b226:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800b22a:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b22e:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800b232:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b236:	fa17 f181 	uxtah	r1, r7, r1
 800b23a:	b289      	uxth	r1, r1
 800b23c:	f7fc fd40 	bl	8007cc0 <pbuf_alloc>
  if (p == NULL) {
 800b240:	4681      	mov	r9, r0
 800b242:	2800      	cmp	r0, #0
 800b244:	d070      	beq.n	800b328 <tcp_split_unsent_seg+0x178>
  offset = useg->p->tot_len - useg->len + split;
 800b246:	6860      	ldr	r0, [r4, #4]
 800b248:	8922      	ldrh	r2, [r4, #8]
 800b24a:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b24c:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800b250:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b252:	4642      	mov	r2, r8
 800b254:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800b256:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b258:	b29b      	uxth	r3, r3
 800b25a:	f7fc ff05 	bl	8008068 <pbuf_copy_partial>
 800b25e:	4540      	cmp	r0, r8
 800b260:	d15f      	bne.n	800b322 <tcp_split_unsent_seg+0x172>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b262:	68e3      	ldr	r3, [r4, #12]
 800b264:	8998      	ldrh	r0, [r3, #12]
 800b266:	f7fb fdab 	bl	8006dc0 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800b26a:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b26e:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800b270:	bf16      	itet	ne
 800b272:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b276:	f007 073f 	andeq.w	r7, r7, #63	@ 0x3f
    split_flags &= ~TCP_PSH;
 800b27a:	f007 0737 	andne.w	r7, r7, #55	@ 0x37
  if (split_flags & TCP_FIN) {
 800b27e:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b280:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800b282:	bf48      	it	mi
 800b284:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b288:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800b28a:	bf48      	it	mi
 800b28c:	f007 07fe 	andmi.w	r7, r7, #254	@ 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b290:	f7fb fd99 	bl	8006dc6 <lwip_htonl>
 800b294:	4642      	mov	r2, r8
 800b296:	182b      	adds	r3, r5, r0
 800b298:	4649      	mov	r1, r9
 800b29a:	4630      	mov	r0, r6
 800b29c:	f8cd b000 	str.w	fp, [sp]
 800b2a0:	f7ff fbe2 	bl	800aa68 <tcp_create_segment>
  if (seg == NULL) {
 800b2a4:	4680      	mov	r8, r0
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d03b      	beq.n	800b322 <tcp_split_unsent_seg+0x172>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b2aa:	6860      	ldr	r0, [r4, #4]
 800b2ac:	eba5 050a 	sub.w	r5, r5, sl
 800b2b0:	f7fc fdf0 	bl	8007e94 <pbuf_clen>
 800b2b4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800b2b8:	fa1f f985 	uxth.w	r9, r5
 800b2bc:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b2be:	6860      	ldr	r0, [r4, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b2c0:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b2c4:	8903      	ldrh	r3, [r0, #8]
 800b2c6:	fa13 f585 	uxtah	r5, r3, r5
 800b2ca:	b2a9      	uxth	r1, r5
 800b2cc:	f7fc fd8a 	bl	8007de4 <pbuf_realloc>
  useg->len -= remainder;
 800b2d0:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b2d2:	4638      	mov	r0, r7
  useg->len -= remainder;
 800b2d4:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b2d6:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800b2d8:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b2dc:	899d      	ldrh	r5, [r3, #12]
 800b2de:	f7fb fd6f 	bl	8006dc0 <lwip_htons>
 800b2e2:	68e3      	ldr	r3, [r4, #12]
 800b2e4:	4305      	orrs	r5, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b2e6:	6860      	ldr	r0, [r4, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b2e8:	819d      	strh	r5, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b2ea:	f7fc fdd3 	bl	8007e94 <pbuf_clen>
 800b2ee:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800b2f2:	4418      	add	r0, r3
 800b2f4:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b2f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b2fc:	f7fc fdca 	bl	8007e94 <pbuf_clen>
 800b300:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800b304:	4418      	add	r0, r3
  seg->next = useg->next;
 800b306:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b308:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  seg->next = useg->next;
 800b30c:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800b310:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800b314:	f8d8 3000 	ldr.w	r3, [r8]
 800b318:	b90b      	cbnz	r3, 800b31e <tcp_split_unsent_seg+0x16e>
    pcb->unsent_oversize = 0;
 800b31a:	f8a6 3068 	strh.w	r3, [r6, #104]	@ 0x68
    return ERR_OK;
 800b31e:	2000      	movs	r0, #0
 800b320:	e760      	b.n	800b1e4 <tcp_split_unsent_seg+0x34>
    pbuf_free(p);
 800b322:	4648      	mov	r0, r9
 800b324:	f7fc fc62 	bl	8007bec <pbuf_free>
    return ERR_MEM;
 800b328:	f04f 30ff 	mov.w	r0, #4294967295
 800b32c:	e75a      	b.n	800b1e4 <tcp_split_unsent_seg+0x34>
 800b32e:	bf00      	nop
 800b330:	08010c81 	.word	0x08010c81
 800b334:	0801104d 	.word	0x0801104d
 800b338:	0800f15a 	.word	0x0800f15a
 800b33c:	0801106f 	.word	0x0801106f
 800b340:	08011091 	.word	0x08011091
 800b344:	0801109e 	.word	0x0801109e

0800b348 <tcp_enqueue_flags>:
{
 800b348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b34c:	f011 0803 	ands.w	r8, r1, #3
{
 800b350:	4604      	mov	r4, r0
 800b352:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b354:	d106      	bne.n	800b364 <tcp_enqueue_flags+0x1c>
 800b356:	4b3e      	ldr	r3, [pc, #248]	@ (800b450 <tcp_enqueue_flags+0x108>)
 800b358:	f240 4211 	movw	r2, #1041	@ 0x411
 800b35c:	493d      	ldr	r1, [pc, #244]	@ (800b454 <tcp_enqueue_flags+0x10c>)
 800b35e:	483e      	ldr	r0, [pc, #248]	@ (800b458 <tcp_enqueue_flags+0x110>)
 800b360:	f003 f82a 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b364:	b934      	cbnz	r4, 800b374 <tcp_enqueue_flags+0x2c>
 800b366:	4b3a      	ldr	r3, [pc, #232]	@ (800b450 <tcp_enqueue_flags+0x108>)
 800b368:	f240 4213 	movw	r2, #1043	@ 0x413
 800b36c:	493b      	ldr	r1, [pc, #236]	@ (800b45c <tcp_enqueue_flags+0x114>)
 800b36e:	483a      	ldr	r0, [pc, #232]	@ (800b458 <tcp_enqueue_flags+0x110>)
 800b370:	f003 f822 	bl	800e3b8 <iprintf>
  if (flags & TCP_SYN) {
 800b374:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b378:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b37c:	2036      	movs	r0, #54	@ 0x36
 800b37e:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800b382:	4649      	mov	r1, r9
 800b384:	f7fc fc9c 	bl	8007cc0 <pbuf_alloc>
 800b388:	4605      	mov	r5, r0
 800b38a:	b940      	cbnz	r0, 800b39e <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b38c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800b38e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b396:	8363      	strh	r3, [r4, #26]
}
 800b398:	b003      	add	sp, #12
 800b39a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b39e:	8943      	ldrh	r3, [r0, #10]
 800b3a0:	454b      	cmp	r3, r9
 800b3a2:	d206      	bcs.n	800b3b2 <tcp_enqueue_flags+0x6a>
 800b3a4:	4b2a      	ldr	r3, [pc, #168]	@ (800b450 <tcp_enqueue_flags+0x108>)
 800b3a6:	f240 4239 	movw	r2, #1081	@ 0x439
 800b3aa:	492d      	ldr	r1, [pc, #180]	@ (800b460 <tcp_enqueue_flags+0x118>)
 800b3ac:	482a      	ldr	r0, [pc, #168]	@ (800b458 <tcp_enqueue_flags+0x110>)
 800b3ae:	f003 f803 	bl	800e3b8 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b3b2:	4629      	mov	r1, r5
 800b3b4:	9700      	str	r7, [sp, #0]
 800b3b6:	4632      	mov	r2, r6
 800b3b8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f7ff fb54 	bl	800aa68 <tcp_create_segment>
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d0e2      	beq.n	800b38c <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b3c6:	68c3      	ldr	r3, [r0, #12]
 800b3c8:	079a      	lsls	r2, r3, #30
 800b3ca:	d006      	beq.n	800b3da <tcp_enqueue_flags+0x92>
 800b3cc:	4b20      	ldr	r3, [pc, #128]	@ (800b450 <tcp_enqueue_flags+0x108>)
 800b3ce:	f240 4242 	movw	r2, #1090	@ 0x442
 800b3d2:	4924      	ldr	r1, [pc, #144]	@ (800b464 <tcp_enqueue_flags+0x11c>)
 800b3d4:	4820      	ldr	r0, [pc, #128]	@ (800b458 <tcp_enqueue_flags+0x110>)
 800b3d6:	f002 ffef 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b3da:	892b      	ldrh	r3, [r5, #8]
 800b3dc:	b133      	cbz	r3, 800b3ec <tcp_enqueue_flags+0xa4>
 800b3de:	4b1c      	ldr	r3, [pc, #112]	@ (800b450 <tcp_enqueue_flags+0x108>)
 800b3e0:	f240 4243 	movw	r2, #1091	@ 0x443
 800b3e4:	4920      	ldr	r1, [pc, #128]	@ (800b468 <tcp_enqueue_flags+0x120>)
 800b3e6:	481c      	ldr	r0, [pc, #112]	@ (800b458 <tcp_enqueue_flags+0x110>)
 800b3e8:	f002 ffe6 	bl	800e3b8 <iprintf>
  if (pcb->unsent == NULL) {
 800b3ec:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b3ee:	b9db      	cbnz	r3, 800b428 <tcp_enqueue_flags+0xe0>
    pcb->unsent = seg;
 800b3f0:	66e5      	str	r5, [r4, #108]	@ 0x6c
  pcb->unsent_oversize = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b3f8:	f1b8 0f00 	cmp.w	r8, #0
 800b3fc:	d002      	beq.n	800b404 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800b3fe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800b400:	3301      	adds	r3, #1
 800b402:	65e3      	str	r3, [r4, #92]	@ 0x5c
  if (flags & TCP_FIN) {
 800b404:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b406:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800b408:	bf42      	ittt	mi
 800b40a:	8b63      	ldrhmi	r3, [r4, #26]
 800b40c:	f043 0320 	orrmi.w	r3, r3, #32
 800b410:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b412:	f7fc fd3f 	bl	8007e94 <pbuf_clen>
 800b416:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800b41a:	4418      	add	r0, r3
 800b41c:	b280      	uxth	r0, r0
 800b41e:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 800b422:	b938      	cbnz	r0, 800b434 <tcp_enqueue_flags+0xec>
  return ERR_OK;
 800b424:	2000      	movs	r0, #0
 800b426:	e7b7      	b.n	800b398 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b428:	461a      	mov	r2, r3
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d1fb      	bne.n	800b428 <tcp_enqueue_flags+0xe0>
    useg->next = seg;
 800b430:	6015      	str	r5, [r2, #0]
 800b432:	e7de      	b.n	800b3f2 <tcp_enqueue_flags+0xaa>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b434:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1f4      	bne.n	800b424 <tcp_enqueue_flags+0xdc>
 800b43a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1f1      	bne.n	800b424 <tcp_enqueue_flags+0xdc>
 800b440:	4b03      	ldr	r3, [pc, #12]	@ (800b450 <tcp_enqueue_flags+0x108>)
 800b442:	f240 4265 	movw	r2, #1125	@ 0x465
 800b446:	4909      	ldr	r1, [pc, #36]	@ (800b46c <tcp_enqueue_flags+0x124>)
 800b448:	4803      	ldr	r0, [pc, #12]	@ (800b458 <tcp_enqueue_flags+0x110>)
 800b44a:	f002 ffb5 	bl	800e3b8 <iprintf>
 800b44e:	e7e9      	b.n	800b424 <tcp_enqueue_flags+0xdc>
 800b450:	08010c81 	.word	0x08010c81
 800b454:	080110ac 	.word	0x080110ac
 800b458:	0800f15a 	.word	0x0800f15a
 800b45c:	08011101 	.word	0x08011101
 800b460:	08011120 	.word	0x08011120
 800b464:	08011159 	.word	0x08011159
 800b468:	08011171 	.word	0x08011171
 800b46c:	0801119b 	.word	0x0801119b

0800b470 <tcp_send_fin>:
{
 800b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b472:	4604      	mov	r4, r0
 800b474:	b930      	cbnz	r0, 800b484 <tcp_send_fin+0x14>
 800b476:	4b13      	ldr	r3, [pc, #76]	@ (800b4c4 <tcp_send_fin+0x54>)
 800b478:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b47c:	4912      	ldr	r1, [pc, #72]	@ (800b4c8 <tcp_send_fin+0x58>)
 800b47e:	4813      	ldr	r0, [pc, #76]	@ (800b4cc <tcp_send_fin+0x5c>)
 800b480:	f002 ff9a 	bl	800e3b8 <iprintf>
  if (pcb->unsent != NULL) {
 800b484:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800b486:	b14d      	cbz	r5, 800b49c <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b488:	462f      	mov	r7, r5
 800b48a:	682d      	ldr	r5, [r5, #0]
 800b48c:	2d00      	cmp	r5, #0
 800b48e:	d1fb      	bne.n	800b488 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	8998      	ldrh	r0, [r3, #12]
 800b494:	f7fb fc94 	bl	8006dc0 <lwip_htons>
 800b498:	0743      	lsls	r3, r0, #29
 800b49a:	d005      	beq.n	800b4a8 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b49c:	4620      	mov	r0, r4
 800b49e:	2101      	movs	r1, #1
}
 800b4a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b4a4:	f7ff bf50 	b.w	800b348 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	899e      	ldrh	r6, [r3, #12]
 800b4ae:	f7fb fc87 	bl	8006dc0 <lwip_htons>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	4306      	orrs	r6, r0
}
 800b4b6:	4628      	mov	r0, r5
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b4b8:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b4ba:	8b63      	ldrh	r3, [r4, #26]
 800b4bc:	f043 0320 	orr.w	r3, r3, #32
 800b4c0:	8363      	strh	r3, [r4, #26]
}
 800b4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4c4:	08010c81 	.word	0x08010c81
 800b4c8:	080111c3 	.word	0x080111c3
 800b4cc:	0800f15a 	.word	0x0800f15a

0800b4d0 <tcp_rexmit_rto_prepare>:
{
 800b4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	b930      	cbnz	r0, 800b4e6 <tcp_rexmit_rto_prepare+0x16>
 800b4d8:	4b1c      	ldr	r3, [pc, #112]	@ (800b54c <tcp_rexmit_rto_prepare+0x7c>)
 800b4da:	f240 6263 	movw	r2, #1635	@ 0x663
 800b4de:	491c      	ldr	r1, [pc, #112]	@ (800b550 <tcp_rexmit_rto_prepare+0x80>)
 800b4e0:	481c      	ldr	r0, [pc, #112]	@ (800b554 <tcp_rexmit_rto_prepare+0x84>)
 800b4e2:	f002 ff69 	bl	800e3b8 <iprintf>
  if (pcb->unacked == NULL) {
 800b4e6:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 800b4e8:	b945      	cbnz	r5, 800b4fc <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800b4ea:	f06f 0005 	mvn.w	r0, #5
}
 800b4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800b4f2:	f7ff fa53 	bl	800a99c <tcp_output_segment_busy>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d1f7      	bne.n	800b4ea <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b4fa:	682d      	ldr	r5, [r5, #0]
 800b4fc:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800b4fe:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1f6      	bne.n	800b4f2 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800b504:	f7ff fa4a 	bl	800a99c <tcp_output_segment_busy>
 800b508:	4606      	mov	r6, r0
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d1ed      	bne.n	800b4ea <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800b50e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b510:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800b512:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  pcb->unacked = NULL;
 800b514:	e9c4 301b 	strd	r3, r0, [r4, #108]	@ 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800b518:	8b63      	ldrh	r3, [r4, #26]
 800b51a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b51e:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b520:	68eb      	ldr	r3, [r5, #12]
 800b522:	6858      	ldr	r0, [r3, #4]
 800b524:	f7fb fc4f 	bl	8006dc6 <lwip_htonl>
 800b528:	68eb      	ldr	r3, [r5, #12]
 800b52a:	4607      	mov	r7, r0
 800b52c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800b530:	8998      	ldrh	r0, [r3, #12]
 800b532:	f7fb fc45 	bl	8006dc0 <lwip_htons>
 800b536:	f010 0303 	ands.w	r3, r0, #3
 800b53a:	4447      	add	r7, r8
  return ERR_OK;
 800b53c:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b53e:	bf18      	it	ne
 800b540:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800b542:	6366      	str	r6, [r4, #52]	@ 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b544:	443b      	add	r3, r7
 800b546:	64e3      	str	r3, [r4, #76]	@ 0x4c
  return ERR_OK;
 800b548:	e7d1      	b.n	800b4ee <tcp_rexmit_rto_prepare+0x1e>
 800b54a:	bf00      	nop
 800b54c:	08010c81 	.word	0x08010c81
 800b550:	080111dd 	.word	0x080111dd
 800b554:	0800f15a 	.word	0x0800f15a

0800b558 <tcp_rexmit>:
{
 800b558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b55a:	4604      	mov	r4, r0
 800b55c:	b930      	cbnz	r0, 800b56c <tcp_rexmit+0x14>
 800b55e:	4b1b      	ldr	r3, [pc, #108]	@ (800b5cc <tcp_rexmit+0x74>)
 800b560:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800b564:	491a      	ldr	r1, [pc, #104]	@ (800b5d0 <tcp_rexmit+0x78>)
 800b566:	481b      	ldr	r0, [pc, #108]	@ (800b5d4 <tcp_rexmit+0x7c>)
 800b568:	f002 ff26 	bl	800e3b8 <iprintf>
  if (pcb->unacked == NULL) {
 800b56c:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 800b56e:	b915      	cbnz	r5, 800b576 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800b570:	f06f 0005 	mvn.w	r0, #5
}
 800b574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800b576:	4628      	mov	r0, r5
 800b578:	f7ff fa10 	bl	800a99c <tcp_output_segment_busy>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d1f7      	bne.n	800b570 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800b580:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800b582:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
  pcb->unacked = seg->next;
 800b586:	6723      	str	r3, [r4, #112]	@ 0x70
  while (*cur_seg &&
 800b588:	6833      	ldr	r3, [r6, #0]
 800b58a:	b983      	cbnz	r3, 800b5ae <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800b58c:	6833      	ldr	r3, [r6, #0]
 800b58e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800b590:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800b592:	682b      	ldr	r3, [r5, #0]
 800b594:	b90b      	cbnz	r3, 800b59a <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800b596:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if (pcb->nrtx < 0xFF) {
 800b59a:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
  pcb->rttest = 0;
 800b59e:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800b5a0:	2bff      	cmp	r3, #255	@ 0xff
  pcb->rttest = 0;
 800b5a2:	6360      	str	r0, [r4, #52]	@ 0x34
    ++pcb->nrtx;
 800b5a4:	bf1c      	itt	ne
 800b5a6:	3301      	addne	r3, #1
 800b5a8:	f884 3042 	strbne.w	r3, [r4, #66]	@ 0x42
  return ERR_OK;
 800b5ac:	e7e2      	b.n	800b574 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	6858      	ldr	r0, [r3, #4]
 800b5b2:	f7fb fc08 	bl	8006dc6 <lwip_htonl>
 800b5b6:	68eb      	ldr	r3, [r5, #12]
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	6858      	ldr	r0, [r3, #4]
 800b5bc:	f7fb fc03 	bl	8006dc6 <lwip_htonl>
 800b5c0:	1a3f      	subs	r7, r7, r0
  while (*cur_seg &&
 800b5c2:	2f00      	cmp	r7, #0
 800b5c4:	dae2      	bge.n	800b58c <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800b5c6:	6836      	ldr	r6, [r6, #0]
 800b5c8:	e7de      	b.n	800b588 <tcp_rexmit+0x30>
 800b5ca:	bf00      	nop
 800b5cc:	08010c81 	.word	0x08010c81
 800b5d0:	08011201 	.word	0x08011201
 800b5d4:	0800f15a 	.word	0x0800f15a

0800b5d8 <tcp_rexmit_fast>:
{
 800b5d8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b5da:	4604      	mov	r4, r0
 800b5dc:	b930      	cbnz	r0, 800b5ec <tcp_rexmit_fast+0x14>
 800b5de:	4b15      	ldr	r3, [pc, #84]	@ (800b634 <tcp_rexmit_fast+0x5c>)
 800b5e0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800b5e4:	4914      	ldr	r1, [pc, #80]	@ (800b638 <tcp_rexmit_fast+0x60>)
 800b5e6:	4815      	ldr	r0, [pc, #84]	@ (800b63c <tcp_rexmit_fast+0x64>)
 800b5e8:	f002 fee6 	bl	800e3b8 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b5ec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b5ee:	b1fb      	cbz	r3, 800b630 <tcp_rexmit_fast+0x58>
 800b5f0:	8b63      	ldrh	r3, [r4, #26]
 800b5f2:	075b      	lsls	r3, r3, #29
 800b5f4:	d41c      	bmi.n	800b630 <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f7ff ffae 	bl	800b558 <tcp_rexmit>
 800b5fc:	b9c0      	cbnz	r0, 800b630 <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b5fe:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800b602:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      pcb->rtime = 0;
 800b606:	8620      	strh	r0, [r4, #48]	@ 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b608:	4299      	cmp	r1, r3
 800b60a:	bf28      	it	cs
 800b60c:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b60e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800b610:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b612:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800b614:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b618:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800b61a:	bf88      	it	hi
 800b61c:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b61e:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800b620:	f8a4 204a 	strh.w	r2, [r4, #74]	@ 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b624:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b628:	8b63      	ldrh	r3, [r4, #26]
 800b62a:	f043 0304 	orr.w	r3, r3, #4
 800b62e:	8363      	strh	r3, [r4, #26]
}
 800b630:	bd38      	pop	{r3, r4, r5, pc}
 800b632:	bf00      	nop
 800b634:	08010c81 	.word	0x08010c81
 800b638:	08011219 	.word	0x08011219
 800b63c:	0800f15a 	.word	0x0800f15a

0800b640 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b644:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800b648:	4606      	mov	r6, r0
 800b64a:	460f      	mov	r7, r1
 800b64c:	4614      	mov	r4, r2
 800b64e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b652:	461d      	mov	r5, r3
{
 800b654:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b658:	b933      	cbnz	r3, 800b668 <tcp_rst+0x28>
 800b65a:	4b18      	ldr	r3, [pc, #96]	@ (800b6bc <tcp_rst+0x7c>)
 800b65c:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800b660:	4917      	ldr	r1, [pc, #92]	@ (800b6c0 <tcp_rst+0x80>)
 800b662:	4818      	ldr	r0, [pc, #96]	@ (800b6c4 <tcp_rst+0x84>)
 800b664:	f002 fea8 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b668:	f1b8 0f00 	cmp.w	r8, #0
 800b66c:	d106      	bne.n	800b67c <tcp_rst+0x3c>
 800b66e:	4b13      	ldr	r3, [pc, #76]	@ (800b6bc <tcp_rst+0x7c>)
 800b670:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800b674:	4914      	ldr	r1, [pc, #80]	@ (800b6c8 <tcp_rst+0x88>)
 800b676:	4813      	ldr	r0, [pc, #76]	@ (800b6c4 <tcp_rst+0x84>)
 800b678:	f002 fe9e 	bl	800e3b8 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b67c:	4638      	mov	r0, r7
 800b67e:	f7fb fba2 	bl	8006dc6 <lwip_htonl>
 800b682:	2314      	movs	r3, #20
 800b684:	f644 0116 	movw	r1, #18454	@ 0x4816
 800b688:	4602      	mov	r2, r0
 800b68a:	f8cd a000 	str.w	sl, [sp]
 800b68e:	4620      	mov	r0, r4
 800b690:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b694:	464b      	mov	r3, r9
 800b696:	2100      	movs	r1, #0
 800b698:	f7ff fa54 	bl	800ab44 <tcp_output_alloc_header_common.constprop.0>
 800b69c:	4604      	mov	r4, r0
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b69e:	b150      	cbz	r0, 800b6b6 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b6a0:	f7ff fab8 	bl	800ac14 <tcp_output_fill_options.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b6a4:	4643      	mov	r3, r8
 800b6a6:	462a      	mov	r2, r5
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b6ac:	b004      	add	sp, #16
 800b6ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b6b2:	f7ff babf 	b.w	800ac34 <tcp_output_control_segment>
}
 800b6b6:	b004      	add	sp, #16
 800b6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6bc:	08010c81 	.word	0x08010c81
 800b6c0:	08011236 	.word	0x08011236
 800b6c4:	0800f15a 	.word	0x0800f15a
 800b6c8:	08011250 	.word	0x08011250

0800b6cc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b6cc:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	b930      	cbnz	r0, 800b6e0 <tcp_send_empty_ack+0x14>
 800b6d2:	4b14      	ldr	r3, [pc, #80]	@ (800b724 <tcp_send_empty_ack+0x58>)
 800b6d4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800b6d8:	4913      	ldr	r1, [pc, #76]	@ (800b728 <tcp_send_empty_ack+0x5c>)
 800b6da:	4814      	ldr	r0, [pc, #80]	@ (800b72c <tcp_send_empty_ack+0x60>)
 800b6dc:	f002 fe6c 	bl	800e3b8 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b6e0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800b6e2:	f7fb fb70 	bl	8006dc6 <lwip_htonl>
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f7ff fa6c 	bl	800abc8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	b930      	cbnz	r0, 800b702 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b6f4:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b6f6:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b6fa:	f043 0303 	orr.w	r3, r3, #3
 800b6fe:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800b700:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b702:	f7ff fa87 	bl	800ac14 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b706:	1d23      	adds	r3, r4, #4
 800b708:	4622      	mov	r2, r4
 800b70a:	4629      	mov	r1, r5
 800b70c:	4620      	mov	r0, r4
 800b70e:	f7ff fa91 	bl	800ac34 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800b712:	8b63      	ldrh	r3, [r4, #26]
 800b714:	b118      	cbz	r0, 800b71e <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b716:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	e7ef      	b.n	800b6fe <tcp_send_empty_ack+0x32>
 800b71e:	f023 0303 	bic.w	r3, r3, #3
 800b722:	e7fa      	b.n	800b71a <tcp_send_empty_ack+0x4e>
 800b724:	08010c81 	.word	0x08010c81
 800b728:	0801126b 	.word	0x0801126b
 800b72c:	0800f15a 	.word	0x0800f15a

0800b730 <tcp_output>:
{
 800b730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b734:	4604      	mov	r4, r0
{
 800b736:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b738:	b930      	cbnz	r0, 800b748 <tcp_output+0x18>
 800b73a:	4b8f      	ldr	r3, [pc, #572]	@ (800b978 <tcp_output+0x248>)
 800b73c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b740:	498e      	ldr	r1, [pc, #568]	@ (800b97c <tcp_output+0x24c>)
 800b742:	488f      	ldr	r0, [pc, #572]	@ (800b980 <tcp_output+0x250>)
 800b744:	f002 fe38 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b748:	7d23      	ldrb	r3, [r4, #20]
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d106      	bne.n	800b75c <tcp_output+0x2c>
 800b74e:	4b8a      	ldr	r3, [pc, #552]	@ (800b978 <tcp_output+0x248>)
 800b750:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b754:	498b      	ldr	r1, [pc, #556]	@ (800b984 <tcp_output+0x254>)
 800b756:	488a      	ldr	r0, [pc, #552]	@ (800b980 <tcp_output+0x250>)
 800b758:	f002 fe2e 	bl	800e3b8 <iprintf>
  if (tcp_input_pcb == pcb) {
 800b75c:	4b8a      	ldr	r3, [pc, #552]	@ (800b988 <tcp_output+0x258>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	42a3      	cmp	r3, r4
 800b762:	f000 8171 	beq.w	800ba48 <tcp_output+0x318>
  seg = pcb->unsent;
 800b766:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b768:	f8b4 8048 	ldrh.w	r8, [r4, #72]	@ 0x48
 800b76c:	f8b4 6060 	ldrh.w	r6, [r4, #96]	@ 0x60
  if (seg == NULL) {
 800b770:	b94d      	cbnz	r5, 800b786 <tcp_output+0x56>
    if (pcb->flags & TF_ACK_NOW) {
 800b772:	8b63      	ldrh	r3, [r4, #26]
 800b774:	0798      	lsls	r0, r3, #30
 800b776:	f140 8163 	bpl.w	800ba40 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800b77a:	4620      	mov	r0, r4
}
 800b77c:	b007      	add	sp, #28
 800b77e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800b782:	f7ff bfa3 	b.w	800b6cc <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b786:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b788:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b78c:	b340      	cbz	r0, 800b7e0 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800b78e:	f7fc f94d 	bl	8007a2c <netif_get_by_index>
    return ip_route(src, dst);
 800b792:	4607      	mov	r7, r0
  if (netif == NULL) {
 800b794:	2800      	cmp	r0, #0
 800b796:	f000 8170 	beq.w	800ba7a <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	b90b      	cbnz	r3, 800b7a2 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b79e:	6843      	ldr	r3, [r0, #4]
 800b7a0:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b7a2:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b7a4:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b7a6:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b7a8:	bf28      	it	cs
 800b7aa:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b7ac:	f7fb fb0b 	bl	8006dc6 <lwip_htonl>
 800b7b0:	892b      	ldrh	r3, [r5, #8]
 800b7b2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800b7b4:	1a9b      	subs	r3, r3, r2
 800b7b6:	4403      	add	r3, r0
 800b7b8:	4543      	cmp	r3, r8
 800b7ba:	d915      	bls.n	800b7e8 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b7bc:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 800b7c0:	4543      	cmp	r3, r8
 800b7c2:	d1d6      	bne.n	800b772 <tcp_output+0x42>
 800b7c4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1d3      	bne.n	800b772 <tcp_output+0x42>
 800b7ca:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1cf      	bne.n	800b772 <tcp_output+0x42>
      pcb->persist_cnt = 0;
 800b7d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
      pcb->persist_probe = 0;
 800b7d6:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
      pcb->persist_cnt = 0;
 800b7da:	f8a4 2098 	strh.w	r2, [r4, #152]	@ 0x98
 800b7de:	e7c8      	b.n	800b772 <tcp_output+0x42>
    return ip_route(src, dst);
 800b7e0:	4648      	mov	r0, r9
 800b7e2:	f001 fa5d 	bl	800cca0 <ip4_route>
 800b7e6:	e7d4      	b.n	800b792 <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800b7e8:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800b7ea:	6f26      	ldr	r6, [r4, #112]	@ 0x70
  pcb->persist_backoff = 0;
 800b7ec:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
  if (useg != NULL) {
 800b7f0:	b126      	cbz	r6, 800b7fc <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800b7f2:	4633      	mov	r3, r6
 800b7f4:	6836      	ldr	r6, [r6, #0]
 800b7f6:	2e00      	cmp	r6, #0
 800b7f8:	d1fb      	bne.n	800b7f2 <tcp_output+0xc2>
 800b7fa:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800b7fc:	f8df a178 	ldr.w	sl, [pc, #376]	@ 800b978 <tcp_output+0x248>
 800b800:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b980 <tcp_output+0x250>
 800b804:	e0de      	b.n	800b9c4 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800b806:	7d23      	ldrb	r3, [r4, #20]
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d009      	beq.n	800b820 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b80c:	68eb      	ldr	r3, [r5, #12]
 800b80e:	2010      	movs	r0, #16
 800b810:	899b      	ldrh	r3, [r3, #12]
 800b812:	9304      	str	r3, [sp, #16]
 800b814:	f7fb fad4 	bl	8006dc0 <lwip_htons>
 800b818:	9b04      	ldr	r3, [sp, #16]
 800b81a:	68ea      	ldr	r2, [r5, #12]
 800b81c:	4303      	orrs	r3, r0
 800b81e:	8193      	strh	r3, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800b820:	4628      	mov	r0, r5
 800b822:	f7ff f8bb 	bl	800a99c <tcp_output_segment_busy>
 800b826:	2800      	cmp	r0, #0
 800b828:	d170      	bne.n	800b90c <tcp_output+0x1dc>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b82a:	68eb      	ldr	r3, [r5, #12]
 800b82c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b82e:	9304      	str	r3, [sp, #16]
 800b830:	f7fb fac9 	bl	8006dc6 <lwip_htonl>
 800b834:	9b04      	ldr	r3, [sp, #16]
 800b836:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b838:	68eb      	ldr	r3, [r5, #12]
 800b83a:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	f7fb fabf 	bl	8006dc0 <lwip_htons>
 800b842:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b844:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b846:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b848:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b84a:	4413      	add	r3, r2
 800b84c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b84e:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b850:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b852:	07d2      	lsls	r2, r2, #31
 800b854:	d44a      	bmi.n	800b8ec <tcp_output+0x1bc>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b856:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800b85a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800b85e:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800b860:	bfbc      	itt	lt
 800b862:	2300      	movlt	r3, #0
 800b864:	8623      	strhlt	r3, [r4, #48]	@ 0x30
  if (pcb->rttest == 0) {
 800b866:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b868:	b94b      	cbnz	r3, 800b87e <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800b86a:	4948      	ldr	r1, [pc, #288]	@ (800b98c <tcp_output+0x25c>)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b86c:	68eb      	ldr	r3, [r5, #12]
    pcb->rttest = tcp_ticks;
 800b86e:	6809      	ldr	r1, [r1, #0]
 800b870:	9204      	str	r2, [sp, #16]
 800b872:	6361      	str	r1, [r4, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b874:	6858      	ldr	r0, [r3, #4]
 800b876:	f7fb faa6 	bl	8006dc6 <lwip_htonl>
 800b87a:	9a04      	ldr	r2, [sp, #16]
 800b87c:	63a0      	str	r0, [r4, #56]	@ 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b87e:	6869      	ldr	r1, [r5, #4]
 800b880:	68eb      	ldr	r3, [r5, #12]
 800b882:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800b884:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b888:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800b88a:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b88c:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800b88e:	ebac 0c00 	sub.w	ip, ip, r0
 800b892:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800b896:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800b89a:	ebac 0000 	sub.w	r0, ip, r0
 800b89e:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	7419      	strb	r1, [r3, #16]
 800b8a4:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b8a6:	7aa9      	ldrb	r1, [r5, #10]
 800b8a8:	f011 0f01 	tst.w	r1, #1
 800b8ac:	bf0c      	ite	eq
 800b8ae:	2114      	moveq	r1, #20
 800b8b0:	2118      	movne	r1, #24
 800b8b2:	440b      	add	r3, r1
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d006      	beq.n	800b8c6 <tcp_output+0x196>
 800b8b8:	4653      	mov	r3, sl
 800b8ba:	f240 621c 	movw	r2, #1564	@ 0x61c
 800b8be:	4934      	ldr	r1, [pc, #208]	@ (800b990 <tcp_output+0x260>)
 800b8c0:	4658      	mov	r0, fp
 800b8c2:	f002 fd79 	bl	800e3b8 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b8c6:	2306      	movs	r3, #6
 800b8c8:	9702      	str	r7, [sp, #8]
 800b8ca:	464a      	mov	r2, r9
 800b8cc:	4621      	mov	r1, r4
 800b8ce:	9301      	str	r3, [sp, #4]
 800b8d0:	7aa3      	ldrb	r3, [r4, #10]
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	7ae3      	ldrb	r3, [r4, #11]
 800b8d6:	6868      	ldr	r0, [r5, #4]
 800b8d8:	f001 fb42 	bl	800cf60 <ip4_output_if>
    if (err != ERR_OK) {
 800b8dc:	b1b0      	cbz	r0, 800b90c <tcp_output+0x1dc>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b8de:	8b63      	ldrh	r3, [r4, #26]
 800b8e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8e4:	8363      	strh	r3, [r4, #26]
}
 800b8e6:	b007      	add	sp, #28
 800b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b8ec:	464a      	mov	r2, r9
 800b8ee:	4639      	mov	r1, r7
 800b8f0:	f240 5092 	movw	r0, #1426	@ 0x592
 800b8f4:	9304      	str	r3, [sp, #16]
 800b8f6:	f7fc ff3b 	bl	8008770 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b8fa:	f040 7001 	orr.w	r0, r0, #33816576	@ 0x2040000
 800b8fe:	f7fb fa62 	bl	8006dc6 <lwip_htonl>
 800b902:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800b904:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b908:	6158      	str	r0, [r3, #20]
    opts += 1;
 800b90a:	e7a6      	b.n	800b85a <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b910:	7d23      	ldrb	r3, [r4, #20]
 800b912:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b914:	bf1e      	ittt	ne
 800b916:	8b63      	ldrhne	r3, [r4, #26]
 800b918:	f023 0303 	bicne.w	r3, r3, #3
 800b91c:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b91e:	68eb      	ldr	r3, [r5, #12]
 800b920:	6858      	ldr	r0, [r3, #4]
 800b922:	f7fb fa50 	bl	8006dc6 <lwip_htonl>
 800b926:	8929      	ldrh	r1, [r5, #8]
 800b928:	68eb      	ldr	r3, [r5, #12]
 800b92a:	9104      	str	r1, [sp, #16]
 800b92c:	9005      	str	r0, [sp, #20]
 800b92e:	8998      	ldrh	r0, [r3, #12]
 800b930:	f7fb fa46 	bl	8006dc0 <lwip_htons>
 800b934:	f010 0303 	ands.w	r3, r0, #3
 800b938:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800b93c:	bf18      	it	ne
 800b93e:	2301      	movne	r3, #1
 800b940:	440a      	add	r2, r1
 800b942:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b944:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800b946:	1ad2      	subs	r2, r2, r3
 800b948:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800b94a:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800b94c:	bfb8      	it	lt
 800b94e:	6523      	strlt	r3, [r4, #80]	@ 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800b950:	892b      	ldrh	r3, [r5, #8]
 800b952:	9304      	str	r3, [sp, #16]
 800b954:	8990      	ldrh	r0, [r2, #12]
 800b956:	f7fb fa33 	bl	8006dc0 <lwip_htons>
 800b95a:	f010 0003 	ands.w	r0, r0, #3
 800b95e:	9b04      	ldr	r3, [sp, #16]
 800b960:	bf18      	it	ne
 800b962:	2001      	movne	r0, #1
 800b964:	42d8      	cmn	r0, r3
 800b966:	f000 8084 	beq.w	800ba72 <tcp_output+0x342>
      seg->next = NULL;
 800b96a:	2300      	movs	r3, #0
 800b96c:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800b96e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b970:	b983      	cbnz	r3, 800b994 <tcp_output+0x264>
        pcb->unacked = seg;
 800b972:	6725      	str	r5, [r4, #112]	@ 0x70
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b974:	462e      	mov	r6, r5
 800b976:	e022      	b.n	800b9be <tcp_output+0x28e>
 800b978:	08010c81 	.word	0x08010c81
 800b97c:	0801128b 	.word	0x0801128b
 800b980:	0800f15a 	.word	0x0800f15a
 800b984:	080112a3 	.word	0x080112a3
 800b988:	20033410 	.word	0x20033410
 800b98c:	2003340c 	.word	0x2003340c
 800b990:	080112e0 	.word	0x080112e0
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b994:	68eb      	ldr	r3, [r5, #12]
 800b996:	6858      	ldr	r0, [r3, #4]
 800b998:	f7fb fa15 	bl	8006dc6 <lwip_htonl>
 800b99c:	68f2      	ldr	r2, [r6, #12]
 800b99e:	9004      	str	r0, [sp, #16]
 800b9a0:	6850      	ldr	r0, [r2, #4]
 800b9a2:	f7fb fa10 	bl	8006dc6 <lwip_htonl>
 800b9a6:	9b04      	ldr	r3, [sp, #16]
 800b9a8:	1a1b      	subs	r3, r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	da5f      	bge.n	800ba6e <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b9ae:	f104 0370 	add.w	r3, r4, #112	@ 0x70
          while (*cur_seg &&
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	2a00      	cmp	r2, #0
 800b9b6:	d149      	bne.n	800ba4c <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800b9bc:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800b9be:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  while (seg != NULL &&
 800b9c0:	2d00      	cmp	r5, #0
 800b9c2:	d03a      	beq.n	800ba3a <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b9c4:	68eb      	ldr	r3, [r5, #12]
 800b9c6:	6858      	ldr	r0, [r3, #4]
 800b9c8:	f7fb f9fd 	bl	8006dc6 <lwip_htonl>
 800b9cc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b9ce:	1ac0      	subs	r0, r0, r3
 800b9d0:	892b      	ldrh	r3, [r5, #8]
 800b9d2:	4418      	add	r0, r3
  while (seg != NULL &&
 800b9d4:	4540      	cmp	r0, r8
 800b9d6:	d82e      	bhi.n	800ba36 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800b9d8:	68eb      	ldr	r3, [r5, #12]
 800b9da:	8998      	ldrh	r0, [r3, #12]
 800b9dc:	f7fb f9f0 	bl	8006dc0 <lwip_htons>
 800b9e0:	0741      	lsls	r1, r0, #29
 800b9e2:	d506      	bpl.n	800b9f2 <tcp_output+0x2c2>
 800b9e4:	4653      	mov	r3, sl
 800b9e6:	f240 5236 	movw	r2, #1334	@ 0x536
 800b9ea:	4925      	ldr	r1, [pc, #148]	@ (800ba80 <tcp_output+0x350>)
 800b9ec:	4658      	mov	r0, fp
 800b9ee:	f002 fce3 	bl	800e3b8 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b9f2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f43f af06 	beq.w	800b806 <tcp_output+0xd6>
 800b9fa:	8b62      	ldrh	r2, [r4, #26]
 800b9fc:	f012 0f44 	tst.w	r2, #68	@ 0x44
 800ba00:	f47f af01 	bne.w	800b806 <tcp_output+0xd6>
 800ba04:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ba06:	b143      	cbz	r3, 800ba1a <tcp_output+0x2ea>
 800ba08:	6819      	ldr	r1, [r3, #0]
 800ba0a:	2900      	cmp	r1, #0
 800ba0c:	f47f aefb 	bne.w	800b806 <tcp_output+0xd6>
 800ba10:	8919      	ldrh	r1, [r3, #8]
 800ba12:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ba14:	4299      	cmp	r1, r3
 800ba16:	f4bf aef6 	bcs.w	800b806 <tcp_output+0xd6>
 800ba1a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f43f aef1 	beq.w	800b806 <tcp_output+0xd6>
 800ba24:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800ba28:	2b0e      	cmp	r3, #14
 800ba2a:	f63f aeec 	bhi.w	800b806 <tcp_output+0xd6>
 800ba2e:	f012 0fa0 	tst.w	r2, #160	@ 0xa0
 800ba32:	f47f aee8 	bne.w	800b806 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800ba36:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ba38:	b913      	cbnz	r3, 800ba40 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ba40:	8b63      	ldrh	r3, [r4, #26]
 800ba42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba46:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800ba48:	2000      	movs	r0, #0
 800ba4a:	e74c      	b.n	800b8e6 <tcp_output+0x1b6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ba4c:	68d2      	ldr	r2, [r2, #12]
 800ba4e:	9305      	str	r3, [sp, #20]
 800ba50:	6850      	ldr	r0, [r2, #4]
 800ba52:	f7fb f9b8 	bl	8006dc6 <lwip_htonl>
 800ba56:	68e9      	ldr	r1, [r5, #12]
 800ba58:	9004      	str	r0, [sp, #16]
 800ba5a:	6848      	ldr	r0, [r1, #4]
 800ba5c:	f7fb f9b3 	bl	8006dc6 <lwip_htonl>
 800ba60:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800ba62:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ba64:	1a12      	subs	r2, r2, r0
          while (*cur_seg &&
 800ba66:	2a00      	cmp	r2, #0
 800ba68:	daa6      	bge.n	800b9b8 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	e7a1      	b.n	800b9b2 <tcp_output+0x282>
          useg->next = seg;
 800ba6e:	6035      	str	r5, [r6, #0]
          useg = useg->next;
 800ba70:	e780      	b.n	800b974 <tcp_output+0x244>
      tcp_seg_free(seg);
 800ba72:	4628      	mov	r0, r5
 800ba74:	f7fc fdb2 	bl	80085dc <tcp_seg_free>
 800ba78:	e7a1      	b.n	800b9be <tcp_output+0x28e>
    return ERR_RTE;
 800ba7a:	f06f 0003 	mvn.w	r0, #3
 800ba7e:	e732      	b.n	800b8e6 <tcp_output+0x1b6>
 800ba80:	080112c9 	.word	0x080112c9

0800ba84 <tcp_rexmit_rto_commit>:
{
 800ba84:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ba86:	4604      	mov	r4, r0
 800ba88:	b930      	cbnz	r0, 800ba98 <tcp_rexmit_rto_commit+0x14>
 800ba8a:	4b09      	ldr	r3, [pc, #36]	@ (800bab0 <tcp_rexmit_rto_commit+0x2c>)
 800ba8c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ba90:	4908      	ldr	r1, [pc, #32]	@ (800bab4 <tcp_rexmit_rto_commit+0x30>)
 800ba92:	4809      	ldr	r0, [pc, #36]	@ (800bab8 <tcp_rexmit_rto_commit+0x34>)
 800ba94:	f002 fc90 	bl	800e3b8 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800ba98:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 800ba9c:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800ba9e:	2bff      	cmp	r3, #255	@ 0xff
    ++pcb->nrtx;
 800baa0:	bf1c      	itt	ne
 800baa2:	3301      	addne	r3, #1
 800baa4:	f884 3042 	strbne.w	r3, [r4, #66]	@ 0x42
}
 800baa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800baac:	f7ff be40 	b.w	800b730 <tcp_output>
 800bab0:	08010c81 	.word	0x08010c81
 800bab4:	080112f3 	.word	0x080112f3
 800bab8:	0800f15a 	.word	0x0800f15a

0800babc <tcp_rexmit_rto>:
{
 800babc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800babe:	4604      	mov	r4, r0
 800bac0:	b930      	cbnz	r0, 800bad0 <tcp_rexmit_rto+0x14>
 800bac2:	4b08      	ldr	r3, [pc, #32]	@ (800bae4 <tcp_rexmit_rto+0x28>)
 800bac4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800bac8:	4907      	ldr	r1, [pc, #28]	@ (800bae8 <tcp_rexmit_rto+0x2c>)
 800baca:	4808      	ldr	r0, [pc, #32]	@ (800baec <tcp_rexmit_rto+0x30>)
 800bacc:	f002 fc74 	bl	800e3b8 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bad0:	4620      	mov	r0, r4
 800bad2:	f7ff fcfd 	bl	800b4d0 <tcp_rexmit_rto_prepare>
 800bad6:	b920      	cbnz	r0, 800bae2 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800bad8:	4620      	mov	r0, r4
}
 800bada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800bade:	f7ff bfd1 	b.w	800ba84 <tcp_rexmit_rto_commit>
}
 800bae2:	bd10      	pop	{r4, pc}
 800bae4:	08010c81 	.word	0x08010c81
 800bae8:	08011316 	.word	0x08011316
 800baec:	0800f15a 	.word	0x0800f15a

0800baf0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800baf0:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800baf2:	4604      	mov	r4, r0
 800baf4:	b930      	cbnz	r0, 800bb04 <tcp_keepalive+0x14>
 800baf6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb34 <tcp_keepalive+0x44>)
 800baf8:	f640 0224 	movw	r2, #2084	@ 0x824
 800bafc:	490e      	ldr	r1, [pc, #56]	@ (800bb38 <tcp_keepalive+0x48>)
 800bafe:	480f      	ldr	r0, [pc, #60]	@ (800bb3c <tcp_keepalive+0x4c>)
 800bb00:	f002 fc5a 	bl	800e3b8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bb04:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800bb06:	3801      	subs	r0, #1
 800bb08:	f7fb f95d 	bl	8006dc6 <lwip_htonl>
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	4602      	mov	r2, r0
 800bb10:	4620      	mov	r0, r4
 800bb12:	f7ff f859 	bl	800abc8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800bb16:	4605      	mov	r5, r0
 800bb18:	b148      	cbz	r0, 800bb2e <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bb1a:	f7ff f87b 	bl	800ac14 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bb1e:	1d23      	adds	r3, r4, #4
 800bb20:	4622      	mov	r2, r4
 800bb22:	4629      	mov	r1, r5
 800bb24:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800bb26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bb2a:	f7ff b883 	b.w	800ac34 <tcp_output_control_segment>
}
 800bb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	08010c81 	.word	0x08010c81
 800bb38:	08011332 	.word	0x08011332
 800bb3c:	0800f15a 	.word	0x0800f15a

0800bb40 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bb44:	4606      	mov	r6, r0
 800bb46:	b930      	cbnz	r0, 800bb56 <tcp_zero_window_probe+0x16>
 800bb48:	4b2c      	ldr	r3, [pc, #176]	@ (800bbfc <tcp_zero_window_probe+0xbc>)
 800bb4a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800bb4e:	492c      	ldr	r1, [pc, #176]	@ (800bc00 <tcp_zero_window_probe+0xc0>)
 800bb50:	482c      	ldr	r0, [pc, #176]	@ (800bc04 <tcp_zero_window_probe+0xc4>)
 800bb52:	f002 fc31 	bl	800e3b8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bb56:	6ef5      	ldr	r5, [r6, #108]	@ 0x6c
  if (seg == NULL) {
 800bb58:	2d00      	cmp	r5, #0
 800bb5a:	d049      	beq.n	800bbf0 <tcp_zero_window_probe+0xb0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bb5c:	f896 309a 	ldrb.w	r3, [r6, #154]	@ 0x9a
 800bb60:	2bff      	cmp	r3, #255	@ 0xff
    ++pcb->persist_probe;
 800bb62:	bf1c      	itt	ne
 800bb64:	3301      	addne	r3, #1
 800bb66:	f886 309a 	strbne.w	r3, [r6, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bb6a:	68eb      	ldr	r3, [r5, #12]
 800bb6c:	8998      	ldrh	r0, [r3, #12]
 800bb6e:	f7fb f927 	bl	8006dc0 <lwip_htons>
 800bb72:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bb76:	68eb      	ldr	r3, [r5, #12]
 800bb78:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bb7a:	bf18      	it	ne
 800bb7c:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bb7e:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bb80:	bf1c      	itt	ne
 800bb82:	fab4 f484 	clzne	r4, r4
 800bb86:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bb88:	f084 0101 	eor.w	r1, r4, #1
 800bb8c:	f7ff f81c 	bl	800abc8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800bb90:	4607      	mov	r7, r0
 800bb92:	b380      	cbz	r0, 800bbf6 <tcp_zero_window_probe+0xb6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bb94:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800bb98:	b1fc      	cbz	r4, 800bbda <tcp_zero_window_probe+0x9a>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bb9a:	f8b8 400c 	ldrh.w	r4, [r8, #12]
 800bb9e:	2011      	movs	r0, #17
 800bba0:	f7fb f90e 	bl	8006dc0 <lwip_htons>
 800bba4:	f424 547c 	bic.w	r4, r4, #16128	@ 0x3f00
 800bba8:	b2a4      	uxth	r4, r4
 800bbaa:	4320      	orrs	r0, r4
 800bbac:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bbb0:	68eb      	ldr	r3, [r5, #12]
 800bbb2:	6858      	ldr	r0, [r3, #4]
 800bbb4:	f7fb f907 	bl	8006dc6 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bbb8:	6d33      	ldr	r3, [r6, #80]	@ 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bbba:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bbbc:	1a1b      	subs	r3, r3, r0
 800bbbe:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800bbc0:	bfb8      	it	lt
 800bbc2:	6530      	strlt	r0, [r6, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	f7ff f825 	bl	800ac14 <tcp_output_fill_options.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bbca:	1d33      	adds	r3, r6, #4
 800bbcc:	4632      	mov	r2, r6
 800bbce:	4639      	mov	r1, r7
 800bbd0:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800bbd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bbd6:	f7ff b82d 	b.w	800ac34 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bbda:	6868      	ldr	r0, [r5, #4]
 800bbdc:	f108 0114 	add.w	r1, r8, #20
 800bbe0:	892a      	ldrh	r2, [r5, #8]
 800bbe2:	8903      	ldrh	r3, [r0, #8]
 800bbe4:	1a9b      	subs	r3, r3, r2
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	f7fc fa3d 	bl	8008068 <pbuf_copy_partial>
 800bbee:	e7df      	b.n	800bbb0 <tcp_zero_window_probe+0x70>
    return ERR_OK;
 800bbf0:	4628      	mov	r0, r5
}
 800bbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800bbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfa:	e7fa      	b.n	800bbf2 <tcp_zero_window_probe+0xb2>
 800bbfc:	08010c81 	.word	0x08010c81
 800bc00:	0801134d 	.word	0x0801134d
 800bc04:	0800f15a 	.word	0x0800f15a

0800bc08 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bc08:	b570      	push	{r4, r5, r6, lr}
 800bc0a:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bc0c:	200a      	movs	r0, #10
{
 800bc0e:	460e      	mov	r6, r1
 800bc10:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bc12:	f7fb fd4d 	bl	80076b0 <memp_malloc>
  if (timeout == NULL) {
 800bc16:	b938      	cbnz	r0, 800bc28 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bc18:	4b10      	ldr	r3, [pc, #64]	@ (800bc5c <sys_timeout_abs+0x54>)
 800bc1a:	22be      	movs	r2, #190	@ 0xbe
 800bc1c:	4910      	ldr	r1, [pc, #64]	@ (800bc60 <sys_timeout_abs+0x58>)
 800bc1e:	4811      	ldr	r0, [pc, #68]	@ (800bc64 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800bc20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bc24:	f002 bbc8 	b.w	800e3b8 <iprintf>
  timeout->next = NULL;
 800bc28:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800bc2a:	4a0f      	ldr	r2, [pc, #60]	@ (800bc68 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800bc2c:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800bc2e:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800bc30:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800bc32:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800bc36:	b90b      	cbnz	r3, 800bc3c <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800bc38:	6010      	str	r0, [r2, #0]
}
 800bc3a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bc3c:	6859      	ldr	r1, [r3, #4]
 800bc3e:	1a61      	subs	r1, r4, r1
 800bc40:	2900      	cmp	r1, #0
 800bc42:	da01      	bge.n	800bc48 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800bc44:	6003      	str	r3, [r0, #0]
 800bc46:	e7f7      	b.n	800bc38 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bc48:	4619      	mov	r1, r3
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	b11b      	cbz	r3, 800bc56 <sys_timeout_abs+0x4e>
 800bc4e:	685a      	ldr	r2, [r3, #4]
 800bc50:	1aa2      	subs	r2, r4, r2
 800bc52:	2a00      	cmp	r2, #0
 800bc54:	daf8      	bge.n	800bc48 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800bc56:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800bc58:	6008      	str	r0, [r1, #0]
        break;
 800bc5a:	e7ee      	b.n	800bc3a <sys_timeout_abs+0x32>
 800bc5c:	08011370 	.word	0x08011370
 800bc60:	080113a4 	.word	0x080113a4
 800bc64:	0800f15a 	.word	0x0800f15a
 800bc68:	20033450 	.word	0x20033450

0800bc6c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bc6c:	b570      	push	{r4, r5, r6, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bc6e:	6843      	ldr	r3, [r0, #4]
{
 800bc70:	4604      	mov	r4, r0
  cyclic->handler();
 800bc72:	4798      	blx	r3

  now = sys_now();
 800bc74:	f7f7 f81c 	bl	8002cb0 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bc78:	4b07      	ldr	r3, [pc, #28]	@ (800bc98 <lwip_cyclic_timer+0x2c>)
  now = sys_now();
 800bc7a:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bc7c:	6826      	ldr	r6, [r4, #0]
 800bc7e:	6818      	ldr	r0, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bc80:	4622      	mov	r2, r4
 800bc82:	4906      	ldr	r1, [pc, #24]	@ (800bc9c <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bc84:	4430      	add	r0, r6
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bc86:	1b43      	subs	r3, r0, r5
 800bc88:	2b00      	cmp	r3, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bc8a:	bfb8      	it	lt
 800bc8c:	1970      	addlt	r0, r6, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bc8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bc92:	f7ff bfb9 	b.w	800bc08 <sys_timeout_abs>
 800bc96:	bf00      	nop
 800bc98:	2003344c 	.word	0x2003344c
 800bc9c:	0800bc6d 	.word	0x0800bc6d

0800bca0 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bca0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
{
 800bca4:	b570      	push	{r4, r5, r6, lr}
 800bca6:	4604      	mov	r4, r0
 800bca8:	460d      	mov	r5, r1
 800bcaa:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bcac:	d306      	bcc.n	800bcbc <sys_timeout+0x1c>
 800bcae:	4b08      	ldr	r3, [pc, #32]	@ (800bcd0 <sys_timeout+0x30>)
 800bcb0:	f240 1229 	movw	r2, #297	@ 0x129
 800bcb4:	4907      	ldr	r1, [pc, #28]	@ (800bcd4 <sys_timeout+0x34>)
 800bcb6:	4808      	ldr	r0, [pc, #32]	@ (800bcd8 <sys_timeout+0x38>)
 800bcb8:	f002 fb7e 	bl	800e3b8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bcbc:	f7f6 fff8 	bl	8002cb0 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bcc0:	4632      	mov	r2, r6
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	4420      	add	r0, r4
#endif
}
 800bcc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bcca:	f7ff bf9d 	b.w	800bc08 <sys_timeout_abs>
 800bcce:	bf00      	nop
 800bcd0:	08011370 	.word	0x08011370
 800bcd4:	080113e1 	.word	0x080113e1
 800bcd8:	0800f15a 	.word	0x0800f15a

0800bcdc <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bcdc:	4b08      	ldr	r3, [pc, #32]	@ (800bd00 <tcp_timer_needed+0x24>)
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	b962      	cbnz	r2, 800bcfc <tcp_timer_needed+0x20>
 800bce2:	4a08      	ldr	r2, [pc, #32]	@ (800bd04 <tcp_timer_needed+0x28>)
 800bce4:	6812      	ldr	r2, [r2, #0]
 800bce6:	b912      	cbnz	r2, 800bcee <tcp_timer_needed+0x12>
 800bce8:	4a07      	ldr	r2, [pc, #28]	@ (800bd08 <tcp_timer_needed+0x2c>)
 800bcea:	6812      	ldr	r2, [r2, #0]
 800bcec:	b132      	cbz	r2, 800bcfc <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800bcee:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bcf0:	4906      	ldr	r1, [pc, #24]	@ (800bd0c <tcp_timer_needed+0x30>)
 800bcf2:	20fa      	movs	r0, #250	@ 0xfa
    tcpip_tcp_timer_active = 1;
 800bcf4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f7ff bfd2 	b.w	800bca0 <sys_timeout>
}
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	20033448 	.word	0x20033448
 800bd04:	20033400 	.word	0x20033400
 800bd08:	200333fc 	.word	0x200333fc
 800bd0c:	0800bd11 	.word	0x0800bd11

0800bd10 <tcpip_tcp_timer>:
{
 800bd10:	b508      	push	{r3, lr}
  tcp_tmr();
 800bd12:	f7fd fb5f 	bl	80093d4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bd16:	4b08      	ldr	r3, [pc, #32]	@ (800bd38 <tcpip_tcp_timer+0x28>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	b913      	cbnz	r3, 800bd22 <tcpip_tcp_timer+0x12>
 800bd1c:	4b07      	ldr	r3, [pc, #28]	@ (800bd3c <tcpip_tcp_timer+0x2c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	b133      	cbz	r3, 800bd30 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bd22:	2200      	movs	r2, #0
 800bd24:	4906      	ldr	r1, [pc, #24]	@ (800bd40 <tcpip_tcp_timer+0x30>)
 800bd26:	20fa      	movs	r0, #250	@ 0xfa
}
 800bd28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bd2c:	f7ff bfb8 	b.w	800bca0 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800bd30:	4a04      	ldr	r2, [pc, #16]	@ (800bd44 <tcpip_tcp_timer+0x34>)
 800bd32:	6013      	str	r3, [r2, #0]
}
 800bd34:	bd08      	pop	{r3, pc}
 800bd36:	bf00      	nop
 800bd38:	20033400 	.word	0x20033400
 800bd3c:	200333fc 	.word	0x200333fc
 800bd40:	0800bd11 	.word	0x0800bd11
 800bd44:	20033448 	.word	0x20033448

0800bd48 <sys_timeouts_init>:
{
 800bd48:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bd4a:	4d0c      	ldr	r5, [pc, #48]	@ (800bd7c <sys_timeouts_init+0x34>)
 800bd4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bd50:	4c0b      	ldr	r4, [pc, #44]	@ (800bd80 <sys_timeouts_init+0x38>)
 800bd52:	462a      	mov	r2, r5
 800bd54:	4621      	mov	r1, r4
 800bd56:	f7ff ffa3 	bl	800bca0 <sys_timeout>
 800bd5a:	f105 0208 	add.w	r2, r5, #8
 800bd5e:	4621      	mov	r1, r4
 800bd60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bd64:	f7ff ff9c 	bl	800bca0 <sys_timeout>
 800bd68:	f105 0210 	add.w	r2, r5, #16
 800bd6c:	4621      	mov	r1, r4
 800bd6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
}
 800bd72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bd76:	f7ff bf93 	b.w	800bca0 <sys_timeout>
 800bd7a:	bf00      	nop
 800bd7c:	08011420 	.word	0x08011420
 800bd80:	0800bc6d 	.word	0x0800bc6d

0800bd84 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bd88:	f7f6 ff92 	bl	8002cb0 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800bd8c:	4e0c      	ldr	r6, [pc, #48]	@ (800bdc0 <sys_check_timeouts+0x3c>)
  now = sys_now();
 800bd8e:	4604      	mov	r4, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800bd90:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 800bdc4 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 800bd94:	6831      	ldr	r1, [r6, #0]
    if (tmptimeout == NULL) {
 800bd96:	b189      	cbz	r1, 800bdbc <sys_check_timeouts+0x38>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bd98:	684b      	ldr	r3, [r1, #4]
 800bd9a:	1ae2      	subs	r2, r4, r3
 800bd9c:	2a00      	cmp	r2, #0
 800bd9e:	db0d      	blt.n	800bdbc <sys_check_timeouts+0x38>
    next_timeout = tmptimeout->next;
 800bda0:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bda2:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800bda4:	f8c8 3000 	str.w	r3, [r8]
    next_timeout = tmptimeout->next;
 800bda8:	6032      	str	r2, [r6, #0]
    arg = tmptimeout->arg;
 800bdaa:	e9d1 5702 	ldrd	r5, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bdae:	f7fb fcad 	bl	800770c <memp_free>
    if (handler != NULL) {
 800bdb2:	2d00      	cmp	r5, #0
 800bdb4:	d0ee      	beq.n	800bd94 <sys_check_timeouts+0x10>
      handler(arg);
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	47a8      	blx	r5
 800bdba:	e7eb      	b.n	800bd94 <sys_check_timeouts+0x10>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc0:	20033450 	.word	0x20033450
 800bdc4:	2003344c 	.word	0x2003344c

0800bdc8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800bdc8:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800bdca:	4c07      	ldr	r4, [pc, #28]	@ (800bde8 <sys_timeouts_sleeptime+0x20>)
 800bdcc:	6823      	ldr	r3, [r4, #0]
 800bdce:	b13b      	cbz	r3, 800bde0 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800bdd0:	f7f6 ff6e 	bl	8002cb0 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
    return 0;
 800bdd8:	1a18      	subs	r0, r3, r0
 800bdda:	bf48      	it	mi
 800bddc:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800bdde:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800bde0:	f04f 30ff 	mov.w	r0, #4294967295
 800bde4:	e7fb      	b.n	800bdde <sys_timeouts_sleeptime+0x16>
 800bde6:	bf00      	nop
 800bde8:	20033450 	.word	0x20033450

0800bdec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bdec:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bdee:	f002 f9e3 	bl	800e1b8 <rand>
 800bdf2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800bdf6:	4b02      	ldr	r3, [pc, #8]	@ (800be00 <udp_init+0x14>)
 800bdf8:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800bdfc:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800bdfe:	bd08      	pop	{r3, pc}
 800be00:	2000003e 	.word	0x2000003e

0800be04 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	4688      	mov	r8, r1
 800be0a:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800be0c:	4605      	mov	r5, r0
 800be0e:	b928      	cbnz	r0, 800be1c <udp_input+0x18>
 800be10:	4b5e      	ldr	r3, [pc, #376]	@ (800bf8c <udp_input+0x188>)
 800be12:	22cf      	movs	r2, #207	@ 0xcf
 800be14:	495e      	ldr	r1, [pc, #376]	@ (800bf90 <udp_input+0x18c>)
 800be16:	485f      	ldr	r0, [pc, #380]	@ (800bf94 <udp_input+0x190>)
 800be18:	f002 face 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800be1c:	f1b8 0f00 	cmp.w	r8, #0
 800be20:	d105      	bne.n	800be2e <udp_input+0x2a>
 800be22:	4b5a      	ldr	r3, [pc, #360]	@ (800bf8c <udp_input+0x188>)
 800be24:	22d0      	movs	r2, #208	@ 0xd0
 800be26:	495c      	ldr	r1, [pc, #368]	@ (800bf98 <udp_input+0x194>)
 800be28:	485a      	ldr	r0, [pc, #360]	@ (800bf94 <udp_input+0x190>)
 800be2a:	f002 fac5 	bl	800e3b8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800be2e:	896b      	ldrh	r3, [r5, #10]
 800be30:	2b07      	cmp	r3, #7
 800be32:	d805      	bhi.n	800be40 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800be34:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800be36:	b005      	add	sp, #20
 800be38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800be3c:	f7fb bed6 	b.w	8007bec <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800be40:	4f56      	ldr	r7, [pc, #344]	@ (800bf9c <udp_input+0x198>)
  uncon_pcb = NULL;
 800be42:	2600      	movs	r6, #0
  udphdr = (struct udp_hdr *)p->payload;
 800be44:	686c      	ldr	r4, [r5, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800be46:	6839      	ldr	r1, [r7, #0]
  prev = NULL;
 800be48:	46b2      	mov	sl, r6
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800be4a:	6978      	ldr	r0, [r7, #20]
 800be4c:	f001 f899 	bl	800cf82 <ip4_addr_isbroadcast_u32>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be50:	f8df b158 	ldr.w	fp, [pc, #344]	@ 800bfac <udp_input+0x1a8>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800be54:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800be56:	8820      	ldrh	r0, [r4, #0]
 800be58:	f7fa ffb2 	bl	8006dc0 <lwip_htons>
 800be5c:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800be5e:	8860      	ldrh	r0, [r4, #2]
 800be60:	f7fa ffae 	bl	8006dc0 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be64:	f8db 4000 	ldr.w	r4, [fp]
  dest = lwip_ntohs(udphdr->dest);
 800be68:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be6a:	b93c      	cbnz	r4, 800be7c <udp_input+0x78>
  if (pcb != NULL) {
 800be6c:	2e00      	cmp	r6, #0
 800be6e:	d148      	bne.n	800bf02 <udp_input+0xfe>
  if (for_us) {
 800be70:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	429a      	cmp	r2, r3
 800be78:	d043      	beq.n	800bf02 <udp_input+0xfe>
 800be7a:	e7db      	b.n	800be34 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800be7c:	8a63      	ldrh	r3, [r4, #18]
 800be7e:	9a03      	ldr	r2, [sp, #12]
 800be80:	4293      	cmp	r3, r2
 800be82:	d150      	bne.n	800bf26 <udp_input+0x122>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800be84:	f1b8 0f00 	cmp.w	r8, #0
 800be88:	d105      	bne.n	800be96 <udp_input+0x92>
 800be8a:	4b40      	ldr	r3, [pc, #256]	@ (800bf8c <udp_input+0x188>)
 800be8c:	2288      	movs	r2, #136	@ 0x88
 800be8e:	4944      	ldr	r1, [pc, #272]	@ (800bfa0 <udp_input+0x19c>)
 800be90:	4840      	ldr	r0, [pc, #256]	@ (800bf94 <udp_input+0x190>)
 800be92:	f002 fa91 	bl	800e3b8 <iprintf>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be96:	7a22      	ldrb	r2, [r4, #8]
 800be98:	b132      	cbz	r2, 800bea8 <udp_input+0xa4>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bea0:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d13e      	bne.n	800bf26 <udp_input+0x122>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bea8:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 800beaa:	f1b9 0f00 	cmp.w	r9, #0
 800beae:	d035      	beq.n	800bf1c <udp_input+0x118>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800beb0:	b13b      	cbz	r3, 800bec2 <udp_input+0xbe>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800beb2:	697a      	ldr	r2, [r7, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800beb4:	1c51      	adds	r1, r2, #1
 800beb6:	d004      	beq.n	800bec2 <udp_input+0xbe>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800beb8:	405a      	eors	r2, r3
 800beba:	f8d8 1008 	ldr.w	r1, [r8, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bebe:	420a      	tst	r2, r1
 800bec0:	d131      	bne.n	800bf26 <udp_input+0x122>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bec2:	7c22      	ldrb	r2, [r4, #16]
 800bec4:	0752      	lsls	r2, r2, #29
 800bec6:	d40f      	bmi.n	800bee8 <udp_input+0xe4>
        if (uncon_pcb == NULL) {
 800bec8:	2e00      	cmp	r6, #0
 800beca:	d02f      	beq.n	800bf2c <udp_input+0x128>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800becc:	f1b9 0f00 	cmp.w	r9, #0
 800bed0:	d00a      	beq.n	800bee8 <udp_input+0xe4>
 800bed2:	697a      	ldr	r2, [r7, #20]
 800bed4:	3201      	adds	r2, #1
 800bed6:	d107      	bne.n	800bee8 <udp_input+0xe4>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bed8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800bedc:	6831      	ldr	r1, [r6, #0]
 800bede:	4291      	cmp	r1, r2
 800bee0:	d002      	beq.n	800bee8 <udp_input+0xe4>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bee2:	429a      	cmp	r2, r3
 800bee4:	bf08      	it	eq
 800bee6:	4626      	moveq	r6, r4
      if ((pcb->remote_port == src) &&
 800bee8:	8aa3      	ldrh	r3, [r4, #20]
 800beea:	9a02      	ldr	r2, [sp, #8]
 800beec:	4293      	cmp	r3, r2
 800beee:	d11a      	bne.n	800bf26 <udp_input+0x122>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bef0:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800bef2:	b113      	cbz	r3, 800befa <udp_input+0xf6>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d115      	bne.n	800bf26 <udp_input+0x122>
        if (prev != NULL) {
 800befa:	f1ba 0f00 	cmp.w	sl, #0
 800befe:	d117      	bne.n	800bf30 <udp_input+0x12c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf00:	4626      	mov	r6, r4
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bf02:	2108      	movs	r1, #8
 800bf04:	4628      	mov	r0, r5
 800bf06:	f7fb fe3d 	bl	8007b84 <pbuf_remove_header>
 800bf0a:	b1d0      	cbz	r0, 800bf42 <udp_input+0x13e>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bf0c:	4b1f      	ldr	r3, [pc, #124]	@ (800bf8c <udp_input+0x188>)
 800bf0e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800bf12:	4924      	ldr	r1, [pc, #144]	@ (800bfa4 <udp_input+0x1a0>)
 800bf14:	481f      	ldr	r0, [pc, #124]	@ (800bf94 <udp_input+0x190>)
 800bf16:	f002 fa4f 	bl	800e3b8 <iprintf>
 800bf1a:	e78b      	b.n	800be34 <udp_input+0x30>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d0d0      	beq.n	800bec2 <udp_input+0xbe>
 800bf20:	697a      	ldr	r2, [r7, #20]
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d0cd      	beq.n	800bec2 <udp_input+0xbe>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf26:	46a2      	mov	sl, r4
 800bf28:	68e4      	ldr	r4, [r4, #12]
 800bf2a:	e79e      	b.n	800be6a <udp_input+0x66>
 800bf2c:	4626      	mov	r6, r4
 800bf2e:	e7db      	b.n	800bee8 <udp_input+0xe4>
          prev->next = pcb->next;
 800bf30:	68e3      	ldr	r3, [r4, #12]
 800bf32:	f8ca 300c 	str.w	r3, [sl, #12]
          pcb->next = udp_pcbs;
 800bf36:	f8db 3000 	ldr.w	r3, [fp]
          udp_pcbs = pcb;
 800bf3a:	f8cb 4000 	str.w	r4, [fp]
          pcb->next = udp_pcbs;
 800bf3e:	60e3      	str	r3, [r4, #12]
  if (pcb != NULL) {
 800bf40:	e7de      	b.n	800bf00 <udp_input+0xfc>
    if (pcb != NULL) {
 800bf42:	b16e      	cbz	r6, 800bf60 <udp_input+0x15c>
      if (pcb->recv != NULL) {
 800bf44:	69b4      	ldr	r4, [r6, #24]
 800bf46:	2c00      	cmp	r4, #0
 800bf48:	f43f af74 	beq.w	800be34 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bf4c:	9b02      	ldr	r3, [sp, #8]
 800bf4e:	462a      	mov	r2, r5
 800bf50:	4631      	mov	r1, r6
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	4b14      	ldr	r3, [pc, #80]	@ (800bfa8 <udp_input+0x1a4>)
 800bf56:	69f0      	ldr	r0, [r6, #28]
 800bf58:	47a0      	blx	r4
}
 800bf5a:	b005      	add	sp, #20
 800bf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bf60:	f1b9 0f00 	cmp.w	r9, #0
 800bf64:	f47f af66 	bne.w	800be34 <udp_input+0x30>
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf6e:	2be0      	cmp	r3, #224	@ 0xe0
 800bf70:	f43f af60 	beq.w	800be34 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bf74:	89b9      	ldrh	r1, [r7, #12]
 800bf76:	4628      	mov	r0, r5
 800bf78:	3108      	adds	r1, #8
 800bf7a:	b209      	sxth	r1, r1
 800bf7c:	f7fb fe2e 	bl	8007bdc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bf80:	2103      	movs	r1, #3
 800bf82:	4628      	mov	r0, r5
 800bf84:	f000 fe6a 	bl	800cc5c <icmp_dest_unreach>
 800bf88:	e754      	b.n	800be34 <udp_input+0x30>
 800bf8a:	bf00      	nop
 800bf8c:	08011438 	.word	0x08011438
 800bf90:	08011467 	.word	0x08011467
 800bf94:	0800f15a 	.word	0x0800f15a
 800bf98:	0801147f 	.word	0x0801147f
 800bf9c:	2002aaac 	.word	0x2002aaac
 800bfa0:	08011498 	.word	0x08011498
 800bfa4:	080114bd 	.word	0x080114bd
 800bfa8:	2002aabc 	.word	0x2002aabc
 800bfac:	20033454 	.word	0x20033454

0800bfb0 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800bfb0:	4b2f      	ldr	r3, [pc, #188]	@ (800c070 <udp_bind+0xc0>)
{
 800bfb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800bfb6:	2900      	cmp	r1, #0
 800bfb8:	bf14      	ite	ne
 800bfba:	460f      	movne	r7, r1
 800bfbc:	461f      	moveq	r7, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800bfbe:	b950      	cbnz	r0, 800bfd6 <udp_bind+0x26>
 800bfc0:	4b2c      	ldr	r3, [pc, #176]	@ (800c074 <udp_bind+0xc4>)
 800bfc2:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800bfc6:	492c      	ldr	r1, [pc, #176]	@ (800c078 <udp_bind+0xc8>)
 800bfc8:	482c      	ldr	r0, [pc, #176]	@ (800c07c <udp_bind+0xcc>)
 800bfca:	f002 f9f5 	bl	800e3b8 <iprintf>
 800bfce:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800bfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bfd6:	4e2a      	ldr	r6, [pc, #168]	@ (800c080 <udp_bind+0xd0>)
 800bfd8:	6834      	ldr	r4, [r6, #0]
 800bfda:	4621      	mov	r1, r4
 800bfdc:	b951      	cbnz	r1, 800bff4 <udp_bind+0x44>
  if (port == 0) {
 800bfde:	b17a      	cbz	r2, 800c000 <udp_bind+0x50>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bfe0:	683d      	ldr	r5, [r7, #0]
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bfe2:	4623      	mov	r3, r4
 800bfe4:	bb7b      	cbnz	r3, 800c046 <udp_bind+0x96>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bfe6:	683b      	ldr	r3, [r7, #0]
  pcb->local_port = port;
 800bfe8:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bfea:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800bfec:	2900      	cmp	r1, #0
 800bfee:	d03b      	beq.n	800c068 <udp_bind+0xb8>
  return ERR_OK;
 800bff0:	2000      	movs	r0, #0
 800bff2:	e7ee      	b.n	800bfd2 <udp_bind+0x22>
    if (pcb == ipcb) {
 800bff4:	4281      	cmp	r1, r0
 800bff6:	d001      	beq.n	800bffc <udp_bind+0x4c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bff8:	68c9      	ldr	r1, [r1, #12]
 800bffa:	e7ef      	b.n	800bfdc <udp_bind+0x2c>
      rebind = 1;
 800bffc:	2101      	movs	r1, #1
 800bffe:	e7ee      	b.n	800bfde <udp_bind+0x2e>
 800c000:	f8df c080 	ldr.w	ip, [pc, #128]	@ 800c084 <udp_bind+0xd4>
  if (port == 0) {
 800c004:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c008:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 800c00c:	f8bc 3000 	ldrh.w	r3, [ip]
 800c010:	4573      	cmp	r3, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c012:	4625      	mov	r5, r4
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c014:	bf16      	itet	ne
 800c016:	3301      	addne	r3, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c018:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c01c:	b29b      	uxthne	r3, r3
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c01e:	b90d      	cbnz	r5, 800c024 <udp_bind+0x74>
 800c020:	461a      	mov	r2, r3
 800c022:	e007      	b.n	800c034 <udp_bind+0x84>
    if (pcb->local_port == udp_port) {
 800c024:	f8b5 8012 	ldrh.w	r8, [r5, #18]
 800c028:	4598      	cmp	r8, r3
 800c02a:	d10a      	bne.n	800c042 <udp_bind+0x92>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c02c:	3a01      	subs	r2, #1
 800c02e:	b292      	uxth	r2, r2
 800c030:	2a00      	cmp	r2, #0
 800c032:	d1ed      	bne.n	800c010 <udp_bind+0x60>
 800c034:	f8ac 3000 	strh.w	r3, [ip]
    if (port == 0) {
 800c038:	2a00      	cmp	r2, #0
 800c03a:	d1d4      	bne.n	800bfe6 <udp_bind+0x36>
      return ERR_USE;
 800c03c:	f06f 0007 	mvn.w	r0, #7
 800c040:	e7c7      	b.n	800bfd2 <udp_bind+0x22>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c042:	68ed      	ldr	r5, [r5, #12]
 800c044:	e7eb      	b.n	800c01e <udp_bind+0x6e>
      if (pcb != ipcb) {
 800c046:	4283      	cmp	r3, r0
 800c048:	d00c      	beq.n	800c064 <udp_bind+0xb4>
          if ((ipcb->local_port == port) &&
 800c04a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 800c04e:	4594      	cmp	ip, r2
 800c050:	d108      	bne.n	800c064 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c052:	f8d3 c000 	ldr.w	ip, [r3]
          if ((ipcb->local_port == port) &&
 800c056:	45ac      	cmp	ip, r5
 800c058:	d0f0      	beq.n	800c03c <udp_bind+0x8c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c05a:	2d00      	cmp	r5, #0
 800c05c:	d0ee      	beq.n	800c03c <udp_bind+0x8c>
              ip_addr_isany(&ipcb->local_ip))) {
 800c05e:	f1bc 0f00 	cmp.w	ip, #0
 800c062:	d0eb      	beq.n	800c03c <udp_bind+0x8c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	e7bd      	b.n	800bfe4 <udp_bind+0x34>
    pcb->next = udp_pcbs;
 800c068:	60c4      	str	r4, [r0, #12]
    udp_pcbs = pcb;
 800c06a:	6030      	str	r0, [r6, #0]
 800c06c:	e7c0      	b.n	800bff0 <udp_bind+0x40>
 800c06e:	bf00      	nop
 800c070:	08011968 	.word	0x08011968
 800c074:	08011438 	.word	0x08011438
 800c078:	080114d8 	.word	0x080114d8
 800c07c:	0800f15a 	.word	0x0800f15a
 800c080:	20033454 	.word	0x20033454
 800c084:	2000003e 	.word	0x2000003e

0800c088 <udp_sendto_if_src>:
{
 800c088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08c:	b085      	sub	sp, #20
 800c08e:	460e      	mov	r6, r1
 800c090:	4690      	mov	r8, r2
 800c092:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c094:	4607      	mov	r7, r0
{
 800c096:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	@ 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c09a:	b960      	cbnz	r0, 800c0b6 <udp_sendto_if_src+0x2e>
 800c09c:	4b3e      	ldr	r3, [pc, #248]	@ (800c198 <udp_sendto_if_src+0x110>)
 800c09e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c0a2:	493e      	ldr	r1, [pc, #248]	@ (800c19c <udp_sendto_if_src+0x114>)
 800c0a4:	f06f 050f 	mvn.w	r5, #15
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c0a8:	483d      	ldr	r0, [pc, #244]	@ (800c1a0 <udp_sendto_if_src+0x118>)
 800c0aa:	f002 f985 	bl	800e3b8 <iprintf>
}
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	b005      	add	sp, #20
 800c0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c0b6:	b921      	cbnz	r1, 800c0c2 <udp_sendto_if_src+0x3a>
 800c0b8:	4b37      	ldr	r3, [pc, #220]	@ (800c198 <udp_sendto_if_src+0x110>)
 800c0ba:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800c0be:	4939      	ldr	r1, [pc, #228]	@ (800c1a4 <udp_sendto_if_src+0x11c>)
 800c0c0:	e7f0      	b.n	800c0a4 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c0c2:	b922      	cbnz	r2, 800c0ce <udp_sendto_if_src+0x46>
 800c0c4:	4b34      	ldr	r3, [pc, #208]	@ (800c198 <udp_sendto_if_src+0x110>)
 800c0c6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800c0ca:	4937      	ldr	r1, [pc, #220]	@ (800c1a8 <udp_sendto_if_src+0x120>)
 800c0cc:	e7ea      	b.n	800c0a4 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c0ce:	f1ba 0f00 	cmp.w	sl, #0
 800c0d2:	d104      	bne.n	800c0de <udp_sendto_if_src+0x56>
 800c0d4:	4b30      	ldr	r3, [pc, #192]	@ (800c198 <udp_sendto_if_src+0x110>)
 800c0d6:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800c0da:	4934      	ldr	r1, [pc, #208]	@ (800c1ac <udp_sendto_if_src+0x124>)
 800c0dc:	e7e2      	b.n	800c0a4 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c0de:	f1bb 0f00 	cmp.w	fp, #0
 800c0e2:	d104      	bne.n	800c0ee <udp_sendto_if_src+0x66>
 800c0e4:	4b2c      	ldr	r3, [pc, #176]	@ (800c198 <udp_sendto_if_src+0x110>)
 800c0e6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800c0ea:	4931      	ldr	r1, [pc, #196]	@ (800c1b0 <udp_sendto_if_src+0x128>)
 800c0ec:	e7da      	b.n	800c0a4 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800c0ee:	8a42      	ldrh	r2, [r0, #18]
 800c0f0:	b13a      	cbz	r2, 800c102 <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c0f2:	8932      	ldrh	r2, [r6, #8]
 800c0f4:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d909      	bls.n	800c110 <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800c0fc:	f04f 35ff 	mov.w	r5, #4294967295
 800c100:	e7d5      	b.n	800c0ae <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c102:	4601      	mov	r1, r0
 800c104:	f7ff ff54 	bl	800bfb0 <udp_bind>
    if (err != ERR_OK) {
 800c108:	4605      	mov	r5, r0
 800c10a:	2800      	cmp	r0, #0
 800c10c:	d0f1      	beq.n	800c0f2 <udp_sendto_if_src+0x6a>
 800c10e:	e7ce      	b.n	800c0ae <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c110:	2108      	movs	r1, #8
 800c112:	4630      	mov	r0, r6
 800c114:	f7fb fd32 	bl	8007b7c <pbuf_add_header>
 800c118:	2800      	cmp	r0, #0
 800c11a:	d03a      	beq.n	800c192 <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c11c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c120:	2108      	movs	r1, #8
 800c122:	2022      	movs	r0, #34	@ 0x22
 800c124:	f7fb fdcc 	bl	8007cc0 <pbuf_alloc>
    if (q == NULL) {
 800c128:	4604      	mov	r4, r0
 800c12a:	2800      	cmp	r0, #0
 800c12c:	d0e6      	beq.n	800c0fc <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800c12e:	8933      	ldrh	r3, [r6, #8]
 800c130:	b113      	cbz	r3, 800c138 <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800c132:	4631      	mov	r1, r6
 800c134:	f7fb ff0c 	bl	8007f50 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c138:	8963      	ldrh	r3, [r4, #10]
 800c13a:	2b07      	cmp	r3, #7
 800c13c:	d806      	bhi.n	800c14c <udp_sendto_if_src+0xc4>
 800c13e:	4b16      	ldr	r3, [pc, #88]	@ (800c198 <udp_sendto_if_src+0x110>)
 800c140:	f240 320d 	movw	r2, #781	@ 0x30d
 800c144:	491b      	ldr	r1, [pc, #108]	@ (800c1b4 <udp_sendto_if_src+0x12c>)
 800c146:	4816      	ldr	r0, [pc, #88]	@ (800c1a0 <udp_sendto_if_src+0x118>)
 800c148:	f002 f936 	bl	800e3b8 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800c14c:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800c14e:	8a78      	ldrh	r0, [r7, #18]
 800c150:	f7fa fe36 	bl	8006dc0 <lwip_htons>
 800c154:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c156:	4648      	mov	r0, r9
 800c158:	f7fa fe32 	bl	8006dc0 <lwip_htons>
  udphdr->chksum = 0x0000;
 800c15c:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800c15e:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 800c160:	71ab      	strb	r3, [r5, #6]
 800c162:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800c164:	8920      	ldrh	r0, [r4, #8]
 800c166:	f7fa fe2b 	bl	8006dc0 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c16a:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
 800c16c:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c16e:	4642      	mov	r2, r8
 800c170:	f8cd b008 	str.w	fp, [sp, #8]
 800c174:	4651      	mov	r1, sl
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	4620      	mov	r0, r4
 800c17a:	7abb      	ldrb	r3, [r7, #10]
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	7afb      	ldrb	r3, [r7, #11]
 800c180:	f000 fe72 	bl	800ce68 <ip4_output_if_src>
  if (q != p) {
 800c184:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c186:	4605      	mov	r5, r0
  if (q != p) {
 800c188:	d091      	beq.n	800c0ae <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7fb fd2e 	bl	8007bec <pbuf_free>
    q = NULL;
 800c190:	e78d      	b.n	800c0ae <udp_sendto_if_src+0x26>
 800c192:	4634      	mov	r4, r6
 800c194:	e7d0      	b.n	800c138 <udp_sendto_if_src+0xb0>
 800c196:	bf00      	nop
 800c198:	08011438 	.word	0x08011438
 800c19c:	080114ee 	.word	0x080114ee
 800c1a0:	0800f15a 	.word	0x0800f15a
 800c1a4:	0801150d 	.word	0x0801150d
 800c1a8:	0801152d 	.word	0x0801152d
 800c1ac:	0801154f 	.word	0x0801154f
 800c1b0:	08011571 	.word	0x08011571
 800c1b4:	08011592 	.word	0x08011592

0800c1b8 <udp_sendto_if>:
{
 800c1b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1ba:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1bc:	b950      	cbnz	r0, 800c1d4 <udp_sendto_if+0x1c>
 800c1be:	4b18      	ldr	r3, [pc, #96]	@ (800c220 <udp_sendto_if+0x68>)
 800c1c0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c1c4:	4917      	ldr	r1, [pc, #92]	@ (800c224 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c1c6:	4818      	ldr	r0, [pc, #96]	@ (800c228 <udp_sendto_if+0x70>)
 800c1c8:	f002 f8f6 	bl	800e3b8 <iprintf>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1cc:	f06f 000f 	mvn.w	r0, #15
}
 800c1d0:	b002      	add	sp, #8
 800c1d2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c1d4:	b921      	cbnz	r1, 800c1e0 <udp_sendto_if+0x28>
 800c1d6:	4b12      	ldr	r3, [pc, #72]	@ (800c220 <udp_sendto_if+0x68>)
 800c1d8:	f240 2281 	movw	r2, #641	@ 0x281
 800c1dc:	4913      	ldr	r1, [pc, #76]	@ (800c22c <udp_sendto_if+0x74>)
 800c1de:	e7f2      	b.n	800c1c6 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c1e0:	b922      	cbnz	r2, 800c1ec <udp_sendto_if+0x34>
 800c1e2:	4b0f      	ldr	r3, [pc, #60]	@ (800c220 <udp_sendto_if+0x68>)
 800c1e4:	f240 2282 	movw	r2, #642	@ 0x282
 800c1e8:	4911      	ldr	r1, [pc, #68]	@ (800c230 <udp_sendto_if+0x78>)
 800c1ea:	e7ec      	b.n	800c1c6 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c1ec:	b924      	cbnz	r4, 800c1f8 <udp_sendto_if+0x40>
 800c1ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c220 <udp_sendto_if+0x68>)
 800c1f0:	f240 2283 	movw	r2, #643	@ 0x283
 800c1f4:	490f      	ldr	r1, [pc, #60]	@ (800c234 <udp_sendto_if+0x7c>)
 800c1f6:	e7e6      	b.n	800c1c6 <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c1f8:	6805      	ldr	r5, [r0, #0]
 800c1fa:	b11d      	cbz	r5, 800c204 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c1fc:	f005 06f0 	and.w	r6, r5, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c200:	2ee0      	cmp	r6, #224	@ 0xe0
 800c202:	d105      	bne.n	800c210 <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800c204:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c206:	e9cd 4500 	strd	r4, r5, [sp]
 800c20a:	f7ff ff3d 	bl	800c088 <udp_sendto_if_src>
 800c20e:	e7df      	b.n	800c1d0 <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c210:	6866      	ldr	r6, [r4, #4]
 800c212:	42b5      	cmp	r5, r6
 800c214:	d101      	bne.n	800c21a <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c216:	4605      	mov	r5, r0
 800c218:	e7f5      	b.n	800c206 <udp_sendto_if+0x4e>
        return ERR_RTE;
 800c21a:	f06f 0003 	mvn.w	r0, #3
 800c21e:	e7d7      	b.n	800c1d0 <udp_sendto_if+0x18>
 800c220:	08011438 	.word	0x08011438
 800c224:	080115c0 	.word	0x080115c0
 800c228:	0800f15a 	.word	0x0800f15a
 800c22c:	080115db 	.word	0x080115db
 800c230:	080115f7 	.word	0x080115f7
 800c234:	08011615 	.word	0x08011615

0800c238 <udp_sendto>:
{
 800c238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c23a:	460e      	mov	r6, r1
 800c23c:	4615      	mov	r5, r2
 800c23e:	461f      	mov	r7, r3
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c240:	4604      	mov	r4, r0
 800c242:	b950      	cbnz	r0, 800c25a <udp_sendto+0x22>
 800c244:	4b15      	ldr	r3, [pc, #84]	@ (800c29c <udp_sendto+0x64>)
 800c246:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c24a:	4915      	ldr	r1, [pc, #84]	@ (800c2a0 <udp_sendto+0x68>)
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c24c:	4815      	ldr	r0, [pc, #84]	@ (800c2a4 <udp_sendto+0x6c>)
 800c24e:	f002 f8b3 	bl	800e3b8 <iprintf>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c252:	f06f 000f 	mvn.w	r0, #15
}
 800c256:	b003      	add	sp, #12
 800c258:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c25a:	b921      	cbnz	r1, 800c266 <udp_sendto+0x2e>
 800c25c:	4b0f      	ldr	r3, [pc, #60]	@ (800c29c <udp_sendto+0x64>)
 800c25e:	f240 2219 	movw	r2, #537	@ 0x219
 800c262:	4911      	ldr	r1, [pc, #68]	@ (800c2a8 <udp_sendto+0x70>)
 800c264:	e7f2      	b.n	800c24c <udp_sendto+0x14>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c266:	b922      	cbnz	r2, 800c272 <udp_sendto+0x3a>
 800c268:	4b0c      	ldr	r3, [pc, #48]	@ (800c29c <udp_sendto+0x64>)
 800c26a:	f240 221a 	movw	r2, #538	@ 0x21a
 800c26e:	490f      	ldr	r1, [pc, #60]	@ (800c2ac <udp_sendto+0x74>)
 800c270:	e7ec      	b.n	800c24c <udp_sendto+0x14>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c272:	7a00      	ldrb	r0, [r0, #8]
 800c274:	b150      	cbz	r0, 800c28c <udp_sendto+0x54>
    netif = netif_get_by_index(pcb->netif_idx);
 800c276:	f7fb fbd9 	bl	8007a2c <netif_get_by_index>
  if (netif == NULL) {
 800c27a:	b158      	cbz	r0, 800c294 <udp_sendto+0x5c>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c27c:	9000      	str	r0, [sp, #0]
 800c27e:	463b      	mov	r3, r7
 800c280:	462a      	mov	r2, r5
 800c282:	4631      	mov	r1, r6
 800c284:	4620      	mov	r0, r4
 800c286:	f7ff ff97 	bl	800c1b8 <udp_sendto_if>
 800c28a:	e7e4      	b.n	800c256 <udp_sendto+0x1e>
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c28c:	4610      	mov	r0, r2
 800c28e:	f000 fd07 	bl	800cca0 <ip4_route>
 800c292:	e7f2      	b.n	800c27a <udp_sendto+0x42>
    return ERR_RTE;
 800c294:	f06f 0003 	mvn.w	r0, #3
 800c298:	e7dd      	b.n	800c256 <udp_sendto+0x1e>
 800c29a:	bf00      	nop
 800c29c:	08011438 	.word	0x08011438
 800c2a0:	08011632 	.word	0x08011632
 800c2a4:	0800f15a 	.word	0x0800f15a
 800c2a8:	0801164a 	.word	0x0801164a
 800c2ac:	08011663 	.word	0x08011663

0800c2b0 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c2b0:	b930      	cbnz	r0, 800c2c0 <udp_recv+0x10>
 800c2b2:	4b05      	ldr	r3, [pc, #20]	@ (800c2c8 <udp_recv+0x18>)
 800c2b4:	f240 428a 	movw	r2, #1162	@ 0x48a
 800c2b8:	4904      	ldr	r1, [pc, #16]	@ (800c2cc <udp_recv+0x1c>)
 800c2ba:	4805      	ldr	r0, [pc, #20]	@ (800c2d0 <udp_recv+0x20>)
 800c2bc:	f002 b87c 	b.w	800e3b8 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800c2c0:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	08011438 	.word	0x08011438
 800c2cc:	0801167e 	.word	0x0801167e
 800c2d0:	0800f15a 	.word	0x0800f15a

0800c2d4 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c2d4:	4601      	mov	r1, r0
 800c2d6:	b930      	cbnz	r0, 800c2e6 <udp_remove+0x12>
 800c2d8:	4b0d      	ldr	r3, [pc, #52]	@ (800c310 <udp_remove+0x3c>)
 800c2da:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800c2de:	490d      	ldr	r1, [pc, #52]	@ (800c314 <udp_remove+0x40>)
 800c2e0:	480d      	ldr	r0, [pc, #52]	@ (800c318 <udp_remove+0x44>)
 800c2e2:	f002 b869 	b.w	800e3b8 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c2e6:	4a0d      	ldr	r2, [pc, #52]	@ (800c31c <udp_remove+0x48>)
 800c2e8:	6813      	ldr	r3, [r2, #0]
 800c2ea:	4283      	cmp	r3, r0
 800c2ec:	d104      	bne.n	800c2f8 <udp_remove+0x24>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c2ee:	68c3      	ldr	r3, [r0, #12]
 800c2f0:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	f7fb ba0a 	b.w	800770c <memp_free>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d0fa      	beq.n	800c2f2 <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d0f6      	beq.n	800c2f2 <udp_remove+0x1e>
 800c304:	428b      	cmp	r3, r1
 800c306:	d1f9      	bne.n	800c2fc <udp_remove+0x28>
        pcb2->next = pcb->next;
 800c308:	68cb      	ldr	r3, [r1, #12]
 800c30a:	60d3      	str	r3, [r2, #12]
        break;
 800c30c:	e7f1      	b.n	800c2f2 <udp_remove+0x1e>
 800c30e:	bf00      	nop
 800c310:	08011438 	.word	0x08011438
 800c314:	08011694 	.word	0x08011694
 800c318:	0800f15a 	.word	0x0800f15a
 800c31c:	20033454 	.word	0x20033454

0800c320 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c320:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c322:	2000      	movs	r0, #0
 800c324:	f7fb f9c4 	bl	80076b0 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c328:	4604      	mov	r4, r0
 800c32a:	b128      	cbz	r0, 800c338 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c32c:	2220      	movs	r2, #32
 800c32e:	2100      	movs	r1, #0
 800c330:	f002 f93c 	bl	800e5ac <memset>
    pcb->ttl = UDP_TTL;
 800c334:	23ff      	movs	r3, #255	@ 0xff
 800c336:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800c338:	4620      	mov	r0, r4
 800c33a:	bd10      	pop	{r4, pc}

0800c33c <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800c33c:	f7ff bff0 	b.w	800c320 <udp_new>

0800c340 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c340:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c342:	b138      	cbz	r0, 800c354 <udp_netif_ip_addr_changed+0x14>
 800c344:	6803      	ldr	r3, [r0, #0]
 800c346:	b12b      	cbz	r3, 800c354 <udp_netif_ip_addr_changed+0x14>
 800c348:	b121      	cbz	r1, 800c354 <udp_netif_ip_addr_changed+0x14>
 800c34a:	680b      	ldr	r3, [r1, #0]
 800c34c:	b113      	cbz	r3, 800c354 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c34e:	4b06      	ldr	r3, [pc, #24]	@ (800c368 <udp_netif_ip_addr_changed+0x28>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	b903      	cbnz	r3, 800c356 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800c354:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c356:	681c      	ldr	r4, [r3, #0]
 800c358:	6802      	ldr	r2, [r0, #0]
 800c35a:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c35c:	bf04      	itt	eq
 800c35e:	680a      	ldreq	r2, [r1, #0]
 800c360:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	e7f5      	b.n	800c352 <udp_netif_ip_addr_changed+0x12>
 800c366:	bf00      	nop
 800c368:	20033454 	.word	0x20033454

0800c36c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c36c:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c36e:	2618      	movs	r6, #24
 800c370:	4c07      	ldr	r4, [pc, #28]	@ (800c390 <etharp_free_entry+0x24>)
{
 800c372:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 800c374:	4346      	muls	r6, r0
 800c376:	59a0      	ldr	r0, [r4, r6]
 800c378:	b118      	cbz	r0, 800c382 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c37a:	f7fb fc37 	bl	8007bec <pbuf_free>
    arp_table[i].q = NULL;
 800c37e:	2300      	movs	r3, #0
 800c380:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c382:	2318      	movs	r3, #24
 800c384:	fb03 4405 	mla	r4, r3, r5, r4
 800c388:	2300      	movs	r3, #0
 800c38a:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c38c:	bd70      	pop	{r4, r5, r6, pc}
 800c38e:	bf00      	nop
 800c390:	2003345c 	.word	0x2003345c

0800c394 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c398:	f04f 0c00 	mov.w	ip, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c39c:	f04f 0e0a 	mov.w	lr, #10
 800c3a0:	4b41      	ldr	r3, [pc, #260]	@ (800c4a8 <etharp_find_entry+0x114>)
{
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	4606      	mov	r6, r0
 800c3a6:	4617      	mov	r7, r2
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c3a8:	46e3      	mov	fp, ip
  s16_t empty = ARP_TABLE_SIZE;
 800c3aa:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c3ac:	46f0      	mov	r8, lr
 800c3ae:	46f1      	mov	r9, lr
 800c3b0:	461d      	mov	r5, r3
{
 800c3b2:	9103      	str	r1, [sp, #12]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c3b4:	e9cd cc01 	strd	ip, ip, [sp, #4]
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c3b8:	2c0a      	cmp	r4, #10
 800c3ba:	fa0f f08c 	sxth.w	r0, ip
    u8_t state = arp_table[i].state;
 800c3be:	f893 a014 	ldrb.w	sl, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c3c2:	d119      	bne.n	800c3f8 <etharp_find_entry+0x64>
 800c3c4:	f1ba 0f00 	cmp.w	sl, #0
 800c3c8:	d060      	beq.n	800c48c <etharp_find_entry+0xf8>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c3ca:	b146      	cbz	r6, 800c3de <etharp_find_entry+0x4a>
 800c3cc:	6831      	ldr	r1, [r6, #0]
 800c3ce:	685a      	ldr	r2, [r3, #4]
 800c3d0:	4291      	cmp	r1, r2
 800c3d2:	d104      	bne.n	800c3de <etharp_find_entry+0x4a>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c3d4:	2f00      	cmp	r7, #0
 800c3d6:	d04b      	beq.n	800c470 <etharp_find_entry+0xdc>
 800c3d8:	6899      	ldr	r1, [r3, #8]
 800c3da:	42b9      	cmp	r1, r7
 800c3dc:	d048      	beq.n	800c470 <etharp_find_entry+0xdc>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c3de:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 800c3e2:	8a59      	ldrh	r1, [r3, #18]
      if (state == ETHARP_STATE_PENDING) {
 800c3e4:	d14d      	bne.n	800c482 <etharp_find_entry+0xee>
        if (arp_table[i].q != NULL) {
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	2a00      	cmp	r2, #0
 800c3ea:	d044      	beq.n	800c476 <etharp_find_entry+0xe2>
          if (arp_table[i].ctime >= age_queue) {
 800c3ec:	9a01      	ldr	r2, [sp, #4]
 800c3ee:	428a      	cmp	r2, r1
 800c3f0:	d805      	bhi.n	800c3fe <etharp_find_entry+0x6a>
 800c3f2:	4686      	mov	lr, r0
 800c3f4:	9101      	str	r1, [sp, #4]
 800c3f6:	e002      	b.n	800c3fe <etharp_find_entry+0x6a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c3f8:	f1ba 0f00 	cmp.w	sl, #0
 800c3fc:	d1e5      	bne.n	800c3ca <etharp_find_entry+0x36>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3fe:	f10c 0c01 	add.w	ip, ip, #1
 800c402:	3318      	adds	r3, #24
 800c404:	f1bc 0f0a 	cmp.w	ip, #10
 800c408:	d1d6      	bne.n	800c3b8 <etharp_find_entry+0x24>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c40a:	9b03      	ldr	r3, [sp, #12]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d147      	bne.n	800c4a0 <etharp_find_entry+0x10c>
 800c410:	2c0a      	cmp	r4, #10
 800c412:	d113      	bne.n	800c43c <etharp_find_entry+0xa8>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c414:	f1b8 0f0a 	cmp.w	r8, #10
 800c418:	d03a      	beq.n	800c490 <etharp_find_entry+0xfc>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c41a:	2318      	movs	r3, #24
 800c41c:	fb03 f308 	mul.w	r3, r3, r8
 800c420:	58eb      	ldr	r3, [r5, r3]
 800c422:	b133      	cbz	r3, 800c432 <etharp_find_entry+0x9e>
 800c424:	4b21      	ldr	r3, [pc, #132]	@ (800c4ac <etharp_find_entry+0x118>)
 800c426:	f240 126d 	movw	r2, #365	@ 0x16d
 800c42a:	4921      	ldr	r1, [pc, #132]	@ (800c4b0 <etharp_find_entry+0x11c>)
 800c42c:	4821      	ldr	r0, [pc, #132]	@ (800c4b4 <etharp_find_entry+0x120>)
 800c42e:	f001 ffc3 	bl	800e3b8 <iprintf>
          if (arp_table[i].ctime >= age_queue) {
 800c432:	46c1      	mov	r9, r8
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 800c434:	464c      	mov	r4, r9
 800c436:	4648      	mov	r0, r9
 800c438:	f7ff ff98 	bl	800c36c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c43c:	2318      	movs	r3, #24
 800c43e:	fb03 5304 	mla	r3, r3, r4, r5
 800c442:	7d1b      	ldrb	r3, [r3, #20]
 800c444:	b133      	cbz	r3, 800c454 <etharp_find_entry+0xc0>
 800c446:	4b19      	ldr	r3, [pc, #100]	@ (800c4ac <etharp_find_entry+0x118>)
 800c448:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800c44c:	491a      	ldr	r1, [pc, #104]	@ (800c4b8 <etharp_find_entry+0x124>)
 800c44e:	4819      	ldr	r0, [pc, #100]	@ (800c4b4 <etharp_find_entry+0x120>)
 800c450:	f001 ffb2 	bl	800e3b8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c454:	b12e      	cbz	r6, 800c462 <etharp_find_entry+0xce>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c456:	4b14      	ldr	r3, [pc, #80]	@ (800c4a8 <etharp_find_entry+0x114>)
 800c458:	2118      	movs	r1, #24
 800c45a:	6832      	ldr	r2, [r6, #0]
 800c45c:	fb01 3304 	mla	r3, r1, r4, r3
 800c460:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800c462:	2318      	movs	r3, #24
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c464:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 800c466:	fb03 5504 	mla	r5, r3, r4, r5
 800c46a:	2300      	movs	r3, #0
  arp_table[i].netif = netif;
 800c46c:	60af      	str	r7, [r5, #8]
  arp_table[i].ctime = 0;
 800c46e:	826b      	strh	r3, [r5, #18]
}
 800c470:	b005      	add	sp, #20
 800c472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 800c476:	9a02      	ldr	r2, [sp, #8]
 800c478:	428a      	cmp	r2, r1
 800c47a:	d8c0      	bhi.n	800c3fe <etharp_find_entry+0x6a>
 800c47c:	4681      	mov	r9, r0
 800c47e:	9102      	str	r1, [sp, #8]
 800c480:	e7bd      	b.n	800c3fe <etharp_find_entry+0x6a>
          if (arp_table[i].ctime >= age_stable) {
 800c482:	4559      	cmp	r1, fp
 800c484:	d3bb      	bcc.n	800c3fe <etharp_find_entry+0x6a>
 800c486:	468b      	mov	fp, r1
 800c488:	4680      	mov	r8, r0
 800c48a:	e7b8      	b.n	800c3fe <etharp_find_entry+0x6a>
 800c48c:	4604      	mov	r4, r0
 800c48e:	e7b6      	b.n	800c3fe <etharp_find_entry+0x6a>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c490:	f1b9 0f0a 	cmp.w	r9, #10
 800c494:	d1ce      	bne.n	800c434 <etharp_find_entry+0xa0>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c496:	f1be 0f0a 	cmp.w	lr, #10
 800c49a:	d001      	beq.n	800c4a0 <etharp_find_entry+0x10c>
 800c49c:	46f1      	mov	r9, lr
 800c49e:	e7c9      	b.n	800c434 <etharp_find_entry+0xa0>
    return (s16_t)ERR_MEM;
 800c4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a4:	e7e4      	b.n	800c470 <etharp_find_entry+0xdc>
 800c4a6:	bf00      	nop
 800c4a8:	2003345c 	.word	0x2003345c
 800c4ac:	080116ac 	.word	0x080116ac
 800c4b0:	080116e3 	.word	0x080116e3
 800c4b4:	0800f15a 	.word	0x0800f15a
 800c4b8:	080116fa 	.word	0x080116fa

0800c4bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c4bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c0:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800c4c4:	4688      	mov	r8, r1
 800c4c6:	4691      	mov	r9, r2
 800c4c8:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c4ca:	4607      	mov	r7, r0
 800c4cc:	b930      	cbnz	r0, 800c4dc <etharp_raw+0x20>
 800c4ce:	4b2d      	ldr	r3, [pc, #180]	@ (800c584 <etharp_raw+0xc8>)
 800c4d0:	f240 4257 	movw	r2, #1111	@ 0x457
 800c4d4:	492c      	ldr	r1, [pc, #176]	@ (800c588 <etharp_raw+0xcc>)
 800c4d6:	482d      	ldr	r0, [pc, #180]	@ (800c58c <etharp_raw+0xd0>)
 800c4d8:	f001 ff6e 	bl	800e3b8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c4dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c4e0:	211c      	movs	r1, #28
 800c4e2:	200e      	movs	r0, #14
 800c4e4:	f7fb fbec 	bl	8007cc0 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d047      	beq.n	800c57e <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c4ee:	8943      	ldrh	r3, [r0, #10]
 800c4f0:	2b1b      	cmp	r3, #27
 800c4f2:	d806      	bhi.n	800c502 <etharp_raw+0x46>
 800c4f4:	4b23      	ldr	r3, [pc, #140]	@ (800c584 <etharp_raw+0xc8>)
 800c4f6:	f240 4262 	movw	r2, #1122	@ 0x462
 800c4fa:	4925      	ldr	r1, [pc, #148]	@ (800c590 <etharp_raw+0xd4>)
 800c4fc:	4823      	ldr	r0, [pc, #140]	@ (800c58c <etharp_raw+0xd0>)
 800c4fe:	f001 ff5b 	bl	800e3b8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c502:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c504:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800c508:	f7fa fc5a 	bl	8006dc0 <lwip_htons>
 800c50c:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c50e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c512:	2b06      	cmp	r3, #6
 800c514:	d006      	beq.n	800c524 <etharp_raw+0x68>
 800c516:	4b1b      	ldr	r3, [pc, #108]	@ (800c584 <etharp_raw+0xc8>)
 800c518:	f240 4269 	movw	r2, #1129	@ 0x469
 800c51c:	491d      	ldr	r1, [pc, #116]	@ (800c594 <etharp_raw+0xd8>)
 800c51e:	481b      	ldr	r0, [pc, #108]	@ (800c58c <etharp_raw+0xd0>)
 800c520:	f001 ff4a 	bl	800e3b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c524:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c526:	4642      	mov	r2, r8
 800c528:	4629      	mov	r1, r5
 800c52a:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c52c:	60a3      	str	r3, [r4, #8]
 800c52e:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c530:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c532:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c534:	f8da 3000 	ldr.w	r3, [sl]
 800c538:	f8c4 3012 	str.w	r3, [r4, #18]
 800c53c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800c540:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c542:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c54a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c54c:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c54e:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c550:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c552:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c554:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c556:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c558:	2308      	movs	r3, #8
 800c55a:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800c55c:	2306      	movs	r3, #6
 800c55e:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c560:	2304      	movs	r3, #4
 800c562:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c564:	f640 0306 	movw	r3, #2054	@ 0x806
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	464b      	mov	r3, r9
 800c56c:	f001 f930 	bl	800d7d0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c570:	4628      	mov	r0, r5
 800c572:	f7fb fb3b 	bl	8007bec <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800c576:	4630      	mov	r0, r6
}
 800c578:	b002      	add	sp, #8
 800c57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 800c57e:	f04f 30ff 	mov.w	r0, #4294967295
 800c582:	e7f9      	b.n	800c578 <etharp_raw+0xbc>
 800c584:	080116ac 	.word	0x080116ac
 800c588:	0800f224 	.word	0x0800f224
 800c58c:	0800f15a 	.word	0x0800f15a
 800c590:	08011723 	.word	0x08011723
 800c594:	08011754 	.word	0x08011754

0800c598 <etharp_cleanup_netif>:
{
 800c598:	b570      	push	{r4, r5, r6, lr}
 800c59a:	4606      	mov	r6, r0
 800c59c:	4d07      	ldr	r5, [pc, #28]	@ (800c5bc <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c59e:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c5a0:	7d2b      	ldrb	r3, [r5, #20]
 800c5a2:	b12b      	cbz	r3, 800c5b0 <etharp_cleanup_netif+0x18>
 800c5a4:	68ab      	ldr	r3, [r5, #8]
 800c5a6:	42b3      	cmp	r3, r6
 800c5a8:	d102      	bne.n	800c5b0 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f7ff fede 	bl	800c36c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5b0:	3401      	adds	r4, #1
 800c5b2:	3518      	adds	r5, #24
 800c5b4:	2c0a      	cmp	r4, #10
 800c5b6:	d1f3      	bne.n	800c5a0 <etharp_cleanup_netif+0x8>
}
 800c5b8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ba:	bf00      	nop
 800c5bc:	2003345c 	.word	0x2003345c

0800c5c0 <etharp_input>:
{
 800c5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	b949      	cbnz	r1, 800c5e0 <etharp_input+0x20>
 800c5cc:	4b49      	ldr	r3, [pc, #292]	@ (800c6f4 <etharp_input+0x134>)
 800c5ce:	f240 228a 	movw	r2, #650	@ 0x28a
 800c5d2:	4949      	ldr	r1, [pc, #292]	@ (800c6f8 <etharp_input+0x138>)
 800c5d4:	4849      	ldr	r0, [pc, #292]	@ (800c6fc <etharp_input+0x13c>)
}
 800c5d6:	b007      	add	sp, #28
 800c5d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c5dc:	f001 beec 	b.w	800e3b8 <iprintf>
  hdr = (struct etharp_hdr *)p->payload;
 800c5e0:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c5e2:	882b      	ldrh	r3, [r5, #0]
 800c5e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5e8:	d108      	bne.n	800c5fc <etharp_input+0x3c>
 800c5ea:	792b      	ldrb	r3, [r5, #4]
 800c5ec:	2b06      	cmp	r3, #6
 800c5ee:	d105      	bne.n	800c5fc <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c5f0:	796b      	ldrb	r3, [r5, #5]
 800c5f2:	2b04      	cmp	r3, #4
 800c5f4:	d102      	bne.n	800c5fc <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c5f6:	886b      	ldrh	r3, [r5, #2]
 800c5f8:	2b08      	cmp	r3, #8
 800c5fa:	d005      	beq.n	800c608 <etharp_input+0x48>
  pbuf_free(p);
 800c5fc:	4638      	mov	r0, r7
}
 800c5fe:	b007      	add	sp, #28
 800c600:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800c604:	f7fb baf2 	b.w	8007bec <pbuf_free>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c608:	f8d5 a00e 	ldr.w	sl, [r5, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c60c:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c610:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c612:	69ab      	ldr	r3, [r5, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c614:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c618:	2e00      	cmp	r6, #0
 800c61a:	d067      	beq.n	800c6ec <etharp_input+0x12c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c61c:	429e      	cmp	r6, r3
 800c61e:	d164      	bne.n	800c6ea <etharp_input+0x12a>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c620:	2601      	movs	r6, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c622:	46b3      	mov	fp, r6
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c624:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c628:	2b06      	cmp	r3, #6
 800c62a:	d006      	beq.n	800c63a <etharp_input+0x7a>
 800c62c:	4b31      	ldr	r3, [pc, #196]	@ (800c6f4 <etharp_input+0x134>)
 800c62e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800c632:	4933      	ldr	r1, [pc, #204]	@ (800c700 <etharp_input+0x140>)
 800c634:	4831      	ldr	r0, [pc, #196]	@ (800c6fc <etharp_input+0x13c>)
 800c636:	f001 febf 	bl	800e3b8 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800c63a:	f1ba 0f00 	cmp.w	sl, #0
 800c63e:	d03f      	beq.n	800c6c0 <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c640:	4621      	mov	r1, r4
 800c642:	4650      	mov	r0, sl
 800c644:	f000 fc9d 	bl	800cf82 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800c648:	4681      	mov	r9, r0
 800c64a:	bbc8      	cbnz	r0, 800c6c0 <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 800c64c:	f00a 0af0 	and.w	sl, sl, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c650:	f1ba 0fe0 	cmp.w	sl, #224	@ 0xe0
 800c654:	d034      	beq.n	800c6c0 <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 800c656:	4622      	mov	r2, r4
 800c658:	4659      	mov	r1, fp
 800c65a:	a805      	add	r0, sp, #20
 800c65c:	f7ff fe9a 	bl	800c394 <etharp_find_entry>
  if (i < 0) {
 800c660:	1e03      	subs	r3, r0, #0
 800c662:	db2d      	blt.n	800c6c0 <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c664:	2018      	movs	r0, #24
 800c666:	4a27      	ldr	r2, [pc, #156]	@ (800c704 <etharp_input+0x144>)
 800c668:	f04f 0e02 	mov.w	lr, #2
 800c66c:	fb00 f103 	mul.w	r1, r0, r3
 800c670:	eb02 0c01 	add.w	ip, r2, r1
 800c674:	f88c e014 	strb.w	lr, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c678:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 800c67c:	f8cc 4008 	str.w	r4, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c680:	fb13 e300 	smlabb	r3, r3, r0, lr
 800c684:	68a8      	ldr	r0, [r5, #8]
 800c686:	eb03 0e02 	add.w	lr, r3, r2
 800c68a:	50d0      	str	r0, [r2, r3]
 800c68c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800c690:	f8ae 3004 	strh.w	r3, [lr, #4]
  if (arp_table[i].q != NULL) {
 800c694:	f852 a001 	ldr.w	sl, [r2, r1]
  arp_table[i].ctime = 0;
 800c698:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800c69c:	f1ba 0f00 	cmp.w	sl, #0
 800c6a0:	d00e      	beq.n	800c6c0 <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c6a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    arp_table[i].q = NULL;
 800c6a6:	f842 9001 	str.w	r9, [r2, r1]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	4651      	mov	r1, sl
 800c6b4:	4643      	mov	r3, r8
 800c6b6:	f001 f88b 	bl	800d7d0 <ethernet_output>
    pbuf_free(p);
 800c6ba:	4650      	mov	r0, sl
 800c6bc:	f7fb fa96 	bl	8007bec <pbuf_free>
  switch (hdr->opcode) {
 800c6c0:	88eb      	ldrh	r3, [r5, #6]
 800c6c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6c6:	d199      	bne.n	800c5fc <etharp_input+0x3c>
      if (for_us) {
 800c6c8:	2e00      	cmp	r6, #0
 800c6ca:	d097      	beq.n	800c5fc <etharp_input+0x3c>
        etharp_raw(netif,
 800c6cc:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c6ce:	f104 0326 	add.w	r3, r4, #38	@ 0x26
        etharp_raw(netif,
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	9203      	str	r2, [sp, #12]
 800c6d6:	aa05      	add	r2, sp, #20
 800c6d8:	4619      	mov	r1, r3
 800c6da:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c6de:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 800c6e0:	9200      	str	r2, [sp, #0]
 800c6e2:	4642      	mov	r2, r8
 800c6e4:	f7ff feea 	bl	800c4bc <etharp_raw>
 800c6e8:	e788      	b.n	800c5fc <etharp_input+0x3c>
 800c6ea:	2600      	movs	r6, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c6ec:	f04f 0b02 	mov.w	fp, #2
 800c6f0:	e798      	b.n	800c624 <etharp_input+0x64>
 800c6f2:	bf00      	nop
 800c6f4:	080116ac 	.word	0x080116ac
 800c6f8:	0800f224 	.word	0x0800f224
 800c6fc:	0800f15a 	.word	0x0800f15a
 800c700:	080117b4 	.word	0x080117b4
 800c704:	2003345c 	.word	0x2003345c

0800c708 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c70a:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c70c:	2401      	movs	r4, #1
 800c70e:	f100 0326 	add.w	r3, r0, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c712:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c714:	e9cd 1402 	strd	r1, r4, [sp, #8]
 800c718:	4904      	ldr	r1, [pc, #16]	@ (800c72c <etharp_request+0x24>)
 800c71a:	9200      	str	r2, [sp, #0]
 800c71c:	9101      	str	r1, [sp, #4]
 800c71e:	4619      	mov	r1, r3
 800c720:	4a03      	ldr	r2, [pc, #12]	@ (800c730 <etharp_request+0x28>)
 800c722:	f7ff fecb 	bl	800c4bc <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800c726:	b004      	add	sp, #16
 800c728:	bd10      	pop	{r4, pc}
 800c72a:	bf00      	nop
 800c72c:	08011b96 	.word	0x08011b96
 800c730:	08011b9c 	.word	0x08011b9c

0800c734 <etharp_tmr>:
{
 800c734:	b538      	push	{r3, r4, r5, lr}
 800c736:	4c12      	ldr	r4, [pc, #72]	@ (800c780 <etharp_tmr+0x4c>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c738:	2500      	movs	r5, #0
    u8_t state = arp_table[i].state;
 800c73a:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 800c73c:	b16a      	cbz	r2, 800c75a <etharp_tmr+0x26>
      arp_table[i].ctime++;
 800c73e:	8a63      	ldrh	r3, [r4, #18]
 800c740:	3301      	adds	r3, #1
 800c742:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c744:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
      arp_table[i].ctime++;
 800c748:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c74a:	d203      	bcs.n	800c754 <etharp_tmr+0x20>
 800c74c:	2a01      	cmp	r2, #1
 800c74e:	d109      	bne.n	800c764 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c750:	2b04      	cmp	r3, #4
 800c752:	d90c      	bls.n	800c76e <etharp_tmr+0x3a>
        etharp_free_entry(i);
 800c754:	4628      	mov	r0, r5
 800c756:	f7ff fe09 	bl	800c36c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c75a:	3501      	adds	r5, #1
 800c75c:	3418      	adds	r4, #24
 800c75e:	2d0a      	cmp	r5, #10
 800c760:	d1eb      	bne.n	800c73a <etharp_tmr+0x6>
}
 800c762:	bd38      	pop	{r3, r4, r5, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c764:	2a03      	cmp	r2, #3
 800c766:	d107      	bne.n	800c778 <etharp_tmr+0x44>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c768:	2304      	movs	r3, #4
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c76a:	7523      	strb	r3, [r4, #20]
 800c76c:	e7f5      	b.n	800c75a <etharp_tmr+0x26>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c76e:	1d21      	adds	r1, r4, #4
 800c770:	68a0      	ldr	r0, [r4, #8]
 800c772:	f7ff ffc9 	bl	800c708 <etharp_request>
 800c776:	e7f0      	b.n	800c75a <etharp_tmr+0x26>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c778:	2a04      	cmp	r2, #4
 800c77a:	d1ee      	bne.n	800c75a <etharp_tmr+0x26>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c77c:	2302      	movs	r3, #2
 800c77e:	e7f4      	b.n	800c76a <etharp_tmr+0x36>
 800c780:	2003345c 	.word	0x2003345c

0800c784 <etharp_output_to_arp_index>:
{
 800c784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c788:	4f24      	ldr	r7, [pc, #144]	@ (800c81c <etharp_output_to_arp_index+0x98>)
 800c78a:	2318      	movs	r3, #24
{
 800c78c:	4606      	mov	r6, r0
 800c78e:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c790:	fb03 7302 	mla	r3, r3, r2, r7
{
 800c794:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c796:	7d1b      	ldrb	r3, [r3, #20]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d806      	bhi.n	800c7aa <etharp_output_to_arp_index+0x26>
 800c79c:	4b20      	ldr	r3, [pc, #128]	@ (800c820 <etharp_output_to_arp_index+0x9c>)
 800c79e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c7a2:	4920      	ldr	r1, [pc, #128]	@ (800c824 <etharp_output_to_arp_index+0xa0>)
 800c7a4:	4820      	ldr	r0, [pc, #128]	@ (800c828 <etharp_output_to_arp_index+0xa4>)
 800c7a6:	f001 fe07 	bl	800e3b8 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c7aa:	2318      	movs	r3, #24
 800c7ac:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c7b0:	f106 0a26 	add.w	sl, r6, #38	@ 0x26
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c7b4:	fb03 7404 	mla	r4, r3, r4, r7
 800c7b8:	00ed      	lsls	r5, r5, #3
 800c7ba:	7d23      	ldrb	r3, [r4, #20]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c7bc:	f105 080c 	add.w	r8, r5, #12
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c7c0:	2b02      	cmp	r3, #2
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c7c2:	44b8      	add	r8, r7
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c7c4:	d10b      	bne.n	800c7de <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c7c6:	8a63      	ldrh	r3, [r4, #18]
 800c7c8:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800c7cc:	d913      	bls.n	800c7f6 <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c7ce:	1d29      	adds	r1, r5, #4
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	4439      	add	r1, r7
 800c7d4:	f7ff ff98 	bl	800c708 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c7d8:	b908      	cbnz	r0, 800c7de <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c7de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c7e2:	4652      	mov	r2, sl
 800c7e4:	4649      	mov	r1, r9
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	4643      	mov	r3, r8
 800c7ec:	f000 fff0 	bl	800d7d0 <ethernet_output>
}
 800c7f0:	b004      	add	sp, #16
 800c7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c7f6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800c7fa:	d3f0      	bcc.n	800c7de <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c7fc:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c7fe:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c800:	4642      	mov	r2, r8
 800c802:	4651      	mov	r1, sl
 800c804:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c806:	442f      	add	r7, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c808:	4b08      	ldr	r3, [pc, #32]	@ (800c82c <etharp_output_to_arp_index+0xa8>)
 800c80a:	4630      	mov	r0, r6
 800c80c:	9702      	str	r7, [sp, #8]
 800c80e:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c810:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	4653      	mov	r3, sl
 800c816:	f7ff fe51 	bl	800c4bc <etharp_raw>
 800c81a:	e7dd      	b.n	800c7d8 <etharp_output_to_arp_index+0x54>
 800c81c:	2003345c 	.word	0x2003345c
 800c820:	080116ac 	.word	0x080116ac
 800c824:	080117d8 	.word	0x080117d8
 800c828:	0800f15a 	.word	0x0800f15a
 800c82c:	08011b96 	.word	0x08011b96

0800c830 <etharp_query>:
{
 800c830:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c834:	4688      	mov	r8, r1
 800c836:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c838:	4601      	mov	r1, r0
{
 800c83a:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c83c:	f8d8 0000 	ldr.w	r0, [r8]
 800c840:	f000 fb9f 	bl	800cf82 <ip4_addr_isbroadcast_u32>
 800c844:	2800      	cmp	r0, #0
 800c846:	d161      	bne.n	800c90c <etharp_query+0xdc>
      ip4_addr_ismulticast(ipaddr) ||
 800c848:	f8d8 3000 	ldr.w	r3, [r8]
 800c84c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c850:	2ae0      	cmp	r2, #224	@ 0xe0
 800c852:	d05b      	beq.n	800c90c <etharp_query+0xdc>
      ip4_addr_isany(ipaddr)) {
 800c854:	2b00      	cmp	r3, #0
 800c856:	d059      	beq.n	800c90c <etharp_query+0xdc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c858:	4632      	mov	r2, r6
 800c85a:	2101      	movs	r1, #1
 800c85c:	4640      	mov	r0, r8
 800c85e:	f7ff fd99 	bl	800c394 <etharp_find_entry>
  if (i_err < 0) {
 800c862:	1e07      	subs	r7, r0, #0
 800c864:	da03      	bge.n	800c86e <etharp_query+0x3e>
    return (err_t)i_err;
 800c866:	b278      	sxtb	r0, r7
}
 800c868:	b002      	add	sp, #8
 800c86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c86e:	2f7e      	cmp	r7, #126	@ 0x7e
 800c870:	dd06      	ble.n	800c880 <etharp_query+0x50>
 800c872:	4b37      	ldr	r3, [pc, #220]	@ (800c950 <etharp_query+0x120>)
 800c874:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800c878:	4936      	ldr	r1, [pc, #216]	@ (800c954 <etharp_query+0x124>)
 800c87a:	4837      	ldr	r0, [pc, #220]	@ (800c958 <etharp_query+0x128>)
 800c87c:	f001 fd9c 	bl	800e3b8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c880:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c882:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 800c960 <etharp_query+0x130>
 800c886:	2318      	movs	r3, #24
 800c888:	fb03 9307 	mla	r3, r3, r7, r9
 800c88c:	7d1a      	ldrb	r2, [r3, #20]
 800c88e:	2a00      	cmp	r2, #0
 800c890:	d142      	bne.n	800c918 <etharp_query+0xe8>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c892:	2201      	movs	r2, #1
    arp_table[i].netif = netif;
 800c894:	609e      	str	r6, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c896:	751a      	strb	r2, [r3, #20]
    result = etharp_request(netif, ipaddr);
 800c898:	4641      	mov	r1, r8
 800c89a:	4630      	mov	r0, r6
 800c89c:	f7ff ff34 	bl	800c708 <etharp_request>
    if (q == NULL) {
 800c8a0:	2d00      	cmp	r5, #0
 800c8a2:	d0e1      	beq.n	800c868 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c8a4:	2318      	movs	r3, #24
 800c8a6:	fb03 9207 	mla	r2, r3, r7, r9
 800c8aa:	7d12      	ldrb	r2, [r2, #20]
 800c8ac:	2a01      	cmp	r2, #1
 800c8ae:	d90e      	bls.n	800c8ce <etharp_query+0x9e>
    ETHARP_SET_ADDRHINT(netif, i);
 800c8b0:	4a2a      	ldr	r2, [pc, #168]	@ (800c95c <etharp_query+0x12c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c8b2:	fb03 9307 	mla	r3, r3, r7, r9
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	4630      	mov	r0, r6
    ETHARP_SET_ADDRHINT(netif, i);
 800c8ba:	7017      	strb	r7, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c8bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c8c0:	330c      	adds	r3, #12
 800c8c2:	9200      	str	r2, [sp, #0]
 800c8c4:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 800c8c8:	f000 ff82 	bl	800d7d0 <ethernet_output>
 800c8cc:	e7cc      	b.n	800c868 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c8ce:	d1cb      	bne.n	800c868 <etharp_query+0x38>
 800c8d0:	462c      	mov	r4, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c8d2:	4e1f      	ldr	r6, [pc, #124]	@ (800c950 <etharp_query+0x120>)
 800c8d4:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 800c964 <etharp_query+0x134>
 800c8d8:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800c958 <etharp_query+0x128>
 800c8dc:	e010      	b.n	800c900 <etharp_query+0xd0>
 800c8de:	8962      	ldrh	r2, [r4, #10]
 800c8e0:	8923      	ldrh	r3, [r4, #8]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d108      	bne.n	800c8f8 <etharp_query+0xc8>
 800c8e6:	6823      	ldr	r3, [r4, #0]
 800c8e8:	b133      	cbz	r3, 800c8f8 <etharp_query+0xc8>
 800c8ea:	4633      	mov	r3, r6
 800c8ec:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800c8f0:	4641      	mov	r1, r8
 800c8f2:	4650      	mov	r0, sl
 800c8f4:	f001 fd60 	bl	800e3b8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c8f8:	7b23      	ldrb	r3, [r4, #12]
 800c8fa:	065b      	lsls	r3, r3, #25
 800c8fc:	d411      	bmi.n	800c922 <etharp_query+0xf2>
      p = p->next;
 800c8fe:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800c900:	2c00      	cmp	r4, #0
 800c902:	d1ec      	bne.n	800c8de <etharp_query+0xae>
      pbuf_ref(p);
 800c904:	4628      	mov	r0, r5
 800c906:	f7fb facd 	bl	8007ea4 <pbuf_ref>
 800c90a:	e011      	b.n	800c930 <etharp_query+0x100>
    return ERR_ARG;
 800c90c:	f06f 000f 	mvn.w	r0, #15
 800c910:	e7aa      	b.n	800c868 <etharp_query+0x38>
      result = ERR_MEM;
 800c912:	f04f 30ff 	mov.w	r0, #4294967295
 800c916:	e7a7      	b.n	800c868 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 800c918:	2d00      	cmp	r5, #0
 800c91a:	d0bd      	beq.n	800c898 <etharp_query+0x68>
  err_t result = ERR_MEM;
 800c91c:	f04f 30ff 	mov.w	r0, #4294967295
 800c920:	e7c0      	b.n	800c8a4 <etharp_query+0x74>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c922:	462a      	mov	r2, r5
 800c924:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800c928:	200e      	movs	r0, #14
 800c92a:	f7fb fc7f 	bl	800822c <pbuf_clone>
 800c92e:	4605      	mov	r5, r0
    if (p != NULL) {
 800c930:	2d00      	cmp	r5, #0
 800c932:	d0ee      	beq.n	800c912 <etharp_query+0xe2>
      if (arp_table[i].q != NULL) {
 800c934:	2418      	movs	r4, #24
 800c936:	fb04 f307 	mul.w	r3, r4, r7
 800c93a:	f859 0003 	ldr.w	r0, [r9, r3]
 800c93e:	b108      	cbz	r0, 800c944 <etharp_query+0x114>
        pbuf_free(arp_table[i].q);
 800c940:	f7fb f954 	bl	8007bec <pbuf_free>
      arp_table[i].q = p;
 800c944:	437c      	muls	r4, r7
      result = ERR_OK;
 800c946:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800c948:	f849 5004 	str.w	r5, [r9, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 800c94c:	e78c      	b.n	800c868 <etharp_query+0x38>
 800c94e:	bf00      	nop
 800c950:	080116ac 	.word	0x080116ac
 800c954:	08011808 	.word	0x08011808
 800c958:	0800f15a 	.word	0x0800f15a
 800c95c:	20033458 	.word	0x20033458
 800c960:	2003345c 	.word	0x2003345c
 800c964:	08011816 	.word	0x08011816

0800c968 <etharp_output>:
{
 800c968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c96a:	460e      	mov	r6, r1
 800c96c:	b085      	sub	sp, #20
 800c96e:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c970:	4604      	mov	r4, r0
 800c972:	b930      	cbnz	r0, 800c982 <etharp_output+0x1a>
 800c974:	4b42      	ldr	r3, [pc, #264]	@ (800ca80 <etharp_output+0x118>)
 800c976:	f240 321e 	movw	r2, #798	@ 0x31e
 800c97a:	4942      	ldr	r1, [pc, #264]	@ (800ca84 <etharp_output+0x11c>)
 800c97c:	4842      	ldr	r0, [pc, #264]	@ (800ca88 <etharp_output+0x120>)
 800c97e:	f001 fd1b 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c982:	b936      	cbnz	r6, 800c992 <etharp_output+0x2a>
 800c984:	4b3e      	ldr	r3, [pc, #248]	@ (800ca80 <etharp_output+0x118>)
 800c986:	f240 321f 	movw	r2, #799	@ 0x31f
 800c98a:	4940      	ldr	r1, [pc, #256]	@ (800ca8c <etharp_output+0x124>)
 800c98c:	483e      	ldr	r0, [pc, #248]	@ (800ca88 <etharp_output+0x120>)
 800c98e:	f001 fd13 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c992:	b935      	cbnz	r5, 800c9a2 <etharp_output+0x3a>
 800c994:	4b3a      	ldr	r3, [pc, #232]	@ (800ca80 <etharp_output+0x118>)
 800c996:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c99a:	493d      	ldr	r1, [pc, #244]	@ (800ca90 <etharp_output+0x128>)
 800c99c:	483a      	ldr	r0, [pc, #232]	@ (800ca88 <etharp_output+0x120>)
 800c99e:	f001 fd0b 	bl	800e3b8 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	6828      	ldr	r0, [r5, #0]
 800c9a6:	f000 faec 	bl	800cf82 <ip4_addr_isbroadcast_u32>
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d162      	bne.n	800ca74 <etharp_output+0x10c>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800c9b4:	2ae0      	cmp	r2, #224	@ 0xe0
 800c9b6:	d11c      	bne.n	800c9f2 <etharp_output+0x8a>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c9be:	235e      	movs	r3, #94	@ 0x5e
 800c9c0:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c9c4:	786b      	ldrb	r3, [r5, #1]
 800c9c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9ca:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c9ce:	78ab      	ldrb	r3, [r5, #2]
 800c9d0:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c9d4:	78eb      	ldrb	r3, [r5, #3]
 800c9d6:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800c9da:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c9dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c9e0:	4631      	mov	r1, r6
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	9200      	str	r2, [sp, #0]
 800c9e6:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 800c9ea:	f000 fef1 	bl	800d7d0 <ethernet_output>
}
 800c9ee:	b005      	add	sp, #20
 800c9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c9f2:	6862      	ldr	r2, [r4, #4]
 800c9f4:	68a1      	ldr	r1, [r4, #8]
 800c9f6:	405a      	eors	r2, r3
 800c9f8:	420a      	tst	r2, r1
 800c9fa:	d009      	beq.n	800ca10 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 800c9fc:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c9fe:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d004      	beq.n	800ca10 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ca06:	68e3      	ldr	r3, [r4, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d035      	beq.n	800ca78 <etharp_output+0x110>
            dst_addr = netif_ip4_gw(netif);
 800ca0c:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ca10:	4920      	ldr	r1, [pc, #128]	@ (800ca94 <etharp_output+0x12c>)
 800ca12:	2018      	movs	r0, #24
 800ca14:	4b20      	ldr	r3, [pc, #128]	@ (800ca98 <etharp_output+0x130>)
 800ca16:	780a      	ldrb	r2, [r1, #0]
 800ca18:	fb00 3302 	mla	r3, r0, r2, r3
 800ca1c:	7d18      	ldrb	r0, [r3, #20]
 800ca1e:	2801      	cmp	r0, #1
 800ca20:	d90d      	bls.n	800ca3e <etharp_output+0xd6>
 800ca22:	6898      	ldr	r0, [r3, #8]
 800ca24:	42a0      	cmp	r0, r4
 800ca26:	d10a      	bne.n	800ca3e <etharp_output+0xd6>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ca28:	6828      	ldr	r0, [r5, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	4298      	cmp	r0, r3
 800ca2e:	d106      	bne.n	800ca3e <etharp_output+0xd6>
        return etharp_output_to_arp_index(netif, q, i);
 800ca30:	4631      	mov	r1, r6
 800ca32:	4620      	mov	r0, r4
}
 800ca34:	b005      	add	sp, #20
 800ca36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800ca3a:	f7ff bea3 	b.w	800c784 <etharp_output_to_arp_index>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ca3e:	4b16      	ldr	r3, [pc, #88]	@ (800ca98 <etharp_output+0x130>)
{
 800ca40:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ca42:	7d18      	ldrb	r0, [r3, #20]
 800ca44:	2801      	cmp	r0, #1
 800ca46:	d909      	bls.n	800ca5c <etharp_output+0xf4>
 800ca48:	6898      	ldr	r0, [r3, #8]
 800ca4a:	42a0      	cmp	r0, r4
 800ca4c:	d106      	bne.n	800ca5c <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 800ca4e:	682f      	ldr	r7, [r5, #0]
 800ca50:	6858      	ldr	r0, [r3, #4]
 800ca52:	4287      	cmp	r7, r0
 800ca54:	d102      	bne.n	800ca5c <etharp_output+0xf4>
 800ca56:	b2d2      	uxtb	r2, r2
        ETHARP_SET_ADDRHINT(netif, i);
 800ca58:	700a      	strb	r2, [r1, #0]
 800ca5a:	e7e9      	b.n	800ca30 <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ca5c:	3201      	adds	r2, #1
 800ca5e:	3318      	adds	r3, #24
 800ca60:	2a0a      	cmp	r2, #10
 800ca62:	d1ee      	bne.n	800ca42 <etharp_output+0xda>
    return etharp_query(netif, dst_addr, q);
 800ca64:	4632      	mov	r2, r6
 800ca66:	4629      	mov	r1, r5
 800ca68:	4620      	mov	r0, r4
}
 800ca6a:	b005      	add	sp, #20
 800ca6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800ca70:	f7ff bede 	b.w	800c830 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800ca74:	4b09      	ldr	r3, [pc, #36]	@ (800ca9c <etharp_output+0x134>)
 800ca76:	e7b1      	b.n	800c9dc <etharp_output+0x74>
            return ERR_RTE;
 800ca78:	f06f 0003 	mvn.w	r0, #3
 800ca7c:	e7b7      	b.n	800c9ee <etharp_output+0x86>
 800ca7e:	bf00      	nop
 800ca80:	080116ac 	.word	0x080116ac
 800ca84:	0800f224 	.word	0x0800f224
 800ca88:	0800f15a 	.word	0x0800f15a
 800ca8c:	08010085 	.word	0x08010085
 800ca90:	08011795 	.word	0x08011795
 800ca94:	20033458 	.word	0x20033458
 800ca98:	2003345c 	.word	0x2003345c
 800ca9c:	08011b9c 	.word	0x08011b9c

0800caa0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800caa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caa2:	4604      	mov	r4, r0
 800caa4:	b087      	sub	sp, #28
 800caa6:	460f      	mov	r7, r1
 800caa8:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800caaa:	2124      	movs	r1, #36	@ 0x24
 800caac:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cab0:	2022      	movs	r0, #34	@ 0x22
 800cab2:	f7fb f905 	bl	8007cc0 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800cab6:	4605      	mov	r5, r0
 800cab8:	b390      	cbz	r0, 800cb20 <icmp_send_response+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800caba:	8943      	ldrh	r3, [r0, #10]
 800cabc:	2b23      	cmp	r3, #35	@ 0x23
 800cabe:	d806      	bhi.n	800cace <icmp_send_response+0x2e>
 800cac0:	4b18      	ldr	r3, [pc, #96]	@ (800cb24 <icmp_send_response+0x84>)
 800cac2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800cac6:	4918      	ldr	r1, [pc, #96]	@ (800cb28 <icmp_send_response+0x88>)
 800cac8:	4818      	ldr	r0, [pc, #96]	@ (800cb2c <icmp_send_response+0x8c>)
 800caca:	f001 fc75 	bl	800e3b8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cace:	6860      	ldr	r0, [r4, #4]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800cad0:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cad2:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cad4:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 800cad8:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cada:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 800cade:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800cae0:	71a3      	strb	r3, [r4, #6]
 800cae2:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cae4:	4603      	mov	r3, r0
  icmphdr->type = type;
 800cae6:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 800cae8:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800caea:	f853 6b04 	ldr.w	r6, [r3], #4
 800caee:	428b      	cmp	r3, r1
 800caf0:	f842 6b04 	str.w	r6, [r2], #4
 800caf4:	d1f9      	bne.n	800caea <icmp_send_response+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800caf6:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800caf8:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 800cafa:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800cafc:	f000 f8d0 	bl	800cca0 <ip4_route>
#endif
  if (netif != NULL) {
 800cb00:	b158      	cbz	r0, 800cb1a <icmp_send_response+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cb02:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cb04:	2301      	movs	r3, #1
 800cb06:	aa05      	add	r2, sp, #20
    icmphdr->chksum = 0;
 800cb08:	70a1      	strb	r1, [r4, #2]
 800cb0a:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cb0c:	9002      	str	r0, [sp, #8]
 800cb0e:	4628      	mov	r0, r5
 800cb10:	e9cd 1300 	strd	r1, r3, [sp]
 800cb14:	23ff      	movs	r3, #255	@ 0xff
 800cb16:	f000 fa23 	bl	800cf60 <ip4_output_if>
  }
  pbuf_free(q);
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	f7fb f866 	bl	8007bec <pbuf_free>
}
 800cb20:	b007      	add	sp, #28
 800cb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb24:	08011830 	.word	0x08011830
 800cb28:	08011865 	.word	0x08011865
 800cb2c:	0800f15a 	.word	0x0800f15a

0800cb30 <icmp_input>:
{
 800cb30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800cb34:	4f43      	ldr	r7, [pc, #268]	@ (800cc44 <icmp_input+0x114>)
{
 800cb36:	b085      	sub	sp, #20
 800cb38:	4604      	mov	r4, r0
 800cb3a:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 800cb3c:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800cb40:	f899 5000 	ldrb.w	r5, [r9]
 800cb44:	f005 050f 	and.w	r5, r5, #15
 800cb48:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 800cb4a:	2d13      	cmp	r5, #19
 800cb4c:	d92e      	bls.n	800cbac <icmp_input+0x7c>
  if (p->len < sizeof(u16_t) * 2) {
 800cb4e:	8943      	ldrh	r3, [r0, #10]
 800cb50:	2b03      	cmp	r3, #3
 800cb52:	d92b      	bls.n	800cbac <icmp_input+0x7c>
  type = *((u8_t *)p->payload);
 800cb54:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b08      	cmp	r3, #8
 800cb5a:	d127      	bne.n	800cbac <icmp_input+0x7c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cb5c:	6978      	ldr	r0, [r7, #20]
 800cb5e:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 800cb62:	2be0      	cmp	r3, #224	@ 0xe0
 800cb64:	d022      	beq.n	800cbac <icmp_input+0x7c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	f000 fa0b 	bl	800cf82 <ip4_addr_isbroadcast_u32>
 800cb6c:	b9f0      	cbnz	r0, 800cbac <icmp_input+0x7c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cb6e:	8923      	ldrh	r3, [r4, #8]
 800cb70:	2b07      	cmp	r3, #7
 800cb72:	d91b      	bls.n	800cbac <icmp_input+0x7c>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cb74:	f105 060e 	add.w	r6, r5, #14
 800cb78:	4620      	mov	r0, r4
 800cb7a:	4631      	mov	r1, r6
 800cb7c:	f7fa fffe 	bl	8007b7c <pbuf_add_header>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d052      	beq.n	800cc2a <icmp_input+0xfa>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cb84:	8923      	ldrh	r3, [r4, #8]
 800cb86:	18e9      	adds	r1, r5, r3
 800cb88:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800cb8a:	428b      	cmp	r3, r1
 800cb8c:	d80e      	bhi.n	800cbac <icmp_input+0x7c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cb8e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cb92:	200e      	movs	r0, #14
 800cb94:	f7fb f894 	bl	8007cc0 <pbuf_alloc>
        if (r == NULL) {
 800cb98:	4606      	mov	r6, r0
 800cb9a:	b138      	cbz	r0, 800cbac <icmp_input+0x7c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cb9c:	8942      	ldrh	r2, [r0, #10]
 800cb9e:	f105 0308 	add.w	r3, r5, #8
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d208      	bcs.n	800cbb8 <icmp_input+0x88>
          pbuf_free(r);
 800cba6:	4630      	mov	r0, r6
 800cba8:	f7fb f820 	bl	8007bec <pbuf_free>
  pbuf_free(p);
 800cbac:	4620      	mov	r0, r4
}
 800cbae:	b005      	add	sp, #20
 800cbb0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800cbb4:	f7fb b81a 	b.w	8007bec <pbuf_free>
        MEMCPY(r->payload, iphdr_in, hlen);
 800cbb8:	4649      	mov	r1, r9
 800cbba:	462a      	mov	r2, r5
 800cbbc:	6840      	ldr	r0, [r0, #4]
 800cbbe:	f001 fdd0 	bl	800e762 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7fa ffdd 	bl	8007b84 <pbuf_remove_header>
 800cbca:	b130      	cbz	r0, 800cbda <icmp_input+0xaa>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cbcc:	4b1e      	ldr	r3, [pc, #120]	@ (800cc48 <icmp_input+0x118>)
 800cbce:	22b6      	movs	r2, #182	@ 0xb6
 800cbd0:	491e      	ldr	r1, [pc, #120]	@ (800cc4c <icmp_input+0x11c>)
 800cbd2:	481f      	ldr	r0, [pc, #124]	@ (800cc50 <icmp_input+0x120>)
 800cbd4:	f001 fbf0 	bl	800e3b8 <iprintf>
          pbuf_free(r);
 800cbd8:	e7e5      	b.n	800cba6 <icmp_input+0x76>
        if (pbuf_copy(r, p) != ERR_OK) {
 800cbda:	4621      	mov	r1, r4
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f7fb f9c1 	bl	8007f64 <pbuf_copy>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d1df      	bne.n	800cba6 <icmp_input+0x76>
        pbuf_free(p);
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	4634      	mov	r4, r6
 800cbea:	f7fa ffff 	bl	8007bec <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800cbee:	4629      	mov	r1, r5
 800cbf0:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cbf2:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 800cbf4:	f7fa ffc2 	bl	8007b7c <pbuf_add_header>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d1d6      	bne.n	800cbac <icmp_input+0x7c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cbfe:	6860      	ldr	r0, [r4, #4]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cc00:	2101      	movs	r1, #1
        ip4_addr_copy(iphdr->src, *src);
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	6103      	str	r3, [r0, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cc0a:	23ff      	movs	r3, #255	@ 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cc0c:	7032      	strb	r2, [r6, #0]
        iecho->chksum = 0;
 800cc0e:	70b2      	strb	r2, [r6, #2]
 800cc10:	70f2      	strb	r2, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cc12:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cc14:	7282      	strb	r2, [r0, #10]
 800cc16:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f8cd 8008 	str.w	r8, [sp, #8]
 800cc1e:	e9cd 2100 	strd	r2, r1, [sp]
 800cc22:	490c      	ldr	r1, [pc, #48]	@ (800cc54 <icmp_input+0x124>)
 800cc24:	f000 f99c 	bl	800cf60 <ip4_output_if>
  pbuf_free(p);
 800cc28:	e7c0      	b.n	800cbac <icmp_input+0x7c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f7fa ffa9 	bl	8007b84 <pbuf_remove_header>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d0db      	beq.n	800cbee <icmp_input+0xbe>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cc36:	4b04      	ldr	r3, [pc, #16]	@ (800cc48 <icmp_input+0x118>)
 800cc38:	22c7      	movs	r2, #199	@ 0xc7
 800cc3a:	4907      	ldr	r1, [pc, #28]	@ (800cc58 <icmp_input+0x128>)
 800cc3c:	4804      	ldr	r0, [pc, #16]	@ (800cc50 <icmp_input+0x120>)
 800cc3e:	f001 fbbb 	bl	800e3b8 <iprintf>
          goto icmperr;
 800cc42:	e7b3      	b.n	800cbac <icmp_input+0x7c>
 800cc44:	2002aaac 	.word	0x2002aaac
 800cc48:	08011830 	.word	0x08011830
 800cc4c:	08011891 	.word	0x08011891
 800cc50:	0800f15a 	.word	0x0800f15a
 800cc54:	2002aac0 	.word	0x2002aac0
 800cc58:	080118c6 	.word	0x080118c6

0800cc5c <icmp_dest_unreach>:
{
 800cc5c:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800cc5e:	2103      	movs	r1, #3
 800cc60:	f7ff bf1e 	b.w	800caa0 <icmp_send_response>

0800cc64 <icmp_time_exceeded>:
{
 800cc64:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800cc66:	210b      	movs	r1, #11
 800cc68:	f7ff bf1a 	b.w	800caa0 <icmp_send_response>

0800cc6c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800cc6c:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cc6e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
{
 800cc72:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cc74:	f013 0001 	ands.w	r0, r3, #1
 800cc78:	d00a      	beq.n	800cc90 <ip4_input_accept+0x24>
 800cc7a:	684b      	ldr	r3, [r1, #4]
 800cc7c:	b14b      	cbz	r3, 800cc92 <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cc7e:	4a07      	ldr	r2, [pc, #28]	@ (800cc9c <ip4_input_accept+0x30>)
 800cc80:	6950      	ldr	r0, [r2, #20]
 800cc82:	4283      	cmp	r3, r0
 800cc84:	d007      	beq.n	800cc96 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cc86:	f000 f97c 	bl	800cf82 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cc8a:	3800      	subs	r0, #0
 800cc8c:	bf18      	it	ne
 800cc8e:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 800cc90:	bd08      	pop	{r3, pc}
  return 0;
 800cc92:	4618      	mov	r0, r3
 800cc94:	e7fc      	b.n	800cc90 <ip4_input_accept+0x24>
      return 1;
 800cc96:	2001      	movs	r0, #1
 800cc98:	e7fa      	b.n	800cc90 <ip4_input_accept+0x24>
 800cc9a:	bf00      	nop
 800cc9c:	2002aaac 	.word	0x2002aaac

0800cca0 <ip4_route>:
  NETIF_FOREACH(netif) {
 800cca0:	4b14      	ldr	r3, [pc, #80]	@ (800ccf4 <ip4_route+0x54>)
{
 800cca2:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 800cca4:	6818      	ldr	r0, [r3, #0]
{
 800cca6:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 800cca8:	b978      	cbnz	r0, 800ccca <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ccaa:	4b13      	ldr	r3, [pc, #76]	@ (800ccf8 <ip4_route+0x58>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	b15b      	cbz	r3, 800ccc8 <ip4_route+0x28>
 800ccb0:	f893 102d 	ldrb.w	r1, [r3, #45]	@ 0x2d
 800ccb4:	f001 0105 	and.w	r1, r1, #5
 800ccb8:	2905      	cmp	r1, #5
 800ccba:	d105      	bne.n	800ccc8 <ip4_route+0x28>
 800ccbc:	6859      	ldr	r1, [r3, #4]
 800ccbe:	b119      	cbz	r1, 800ccc8 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ccc0:	7812      	ldrb	r2, [r2, #0]
 800ccc2:	2a7f      	cmp	r2, #127	@ 0x7f
 800ccc4:	bf18      	it	ne
 800ccc6:	4618      	movne	r0, r3
}
 800ccc8:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ccca:	f890 102d 	ldrb.w	r1, [r0, #45]	@ 0x2d
 800ccce:	07cd      	lsls	r5, r1, #31
 800ccd0:	d50d      	bpl.n	800ccee <ip4_route+0x4e>
 800ccd2:	074c      	lsls	r4, r1, #29
 800ccd4:	d50b      	bpl.n	800ccee <ip4_route+0x4e>
 800ccd6:	6843      	ldr	r3, [r0, #4]
 800ccd8:	b14b      	cbz	r3, 800ccee <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ccda:	6814      	ldr	r4, [r2, #0]
 800ccdc:	6885      	ldr	r5, [r0, #8]
 800ccde:	4063      	eors	r3, r4
 800cce0:	422b      	tst	r3, r5
 800cce2:	d0f1      	beq.n	800ccc8 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cce4:	078b      	lsls	r3, r1, #30
 800cce6:	d402      	bmi.n	800ccee <ip4_route+0x4e>
 800cce8:	68c3      	ldr	r3, [r0, #12]
 800ccea:	429c      	cmp	r4, r3
 800ccec:	d0ec      	beq.n	800ccc8 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 800ccee:	6800      	ldr	r0, [r0, #0]
 800ccf0:	e7da      	b.n	800cca8 <ip4_route+0x8>
 800ccf2:	bf00      	nop
 800ccf4:	200333f4 	.word	0x200333f4
 800ccf8:	200333f0 	.word	0x200333f0

0800ccfc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ccfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cd00:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 800cd04:	4604      	mov	r4, r0
 800cd06:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 800cd08:	f899 8000 	ldrb.w	r8, [r9]
 800cd0c:	ea4f 1318 	mov.w	r3, r8, lsr #4
 800cd10:	2b04      	cmp	r3, #4
 800cd12:	d005      	beq.n	800cd20 <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cd14:	4620      	mov	r0, r4
 800cd16:	f7fa ff69 	bl	8007bec <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cd20:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800cd24:	f008 080f 	and.w	r8, r8, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cd28:	f7fa f84a 	bl	8006dc0 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800cd2c:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800cd2e:	ea4f 0888 	mov.w	r8, r8, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cd32:	4605      	mov	r5, r0
  if (iphdr_len < p->tot_len) {
 800cd34:	4283      	cmp	r3, r0
 800cd36:	d903      	bls.n	800cd40 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 800cd38:	4601      	mov	r1, r0
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f7fb f852 	bl	8007de4 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cd40:	8963      	ldrh	r3, [r4, #10]
 800cd42:	4543      	cmp	r3, r8
 800cd44:	d3e6      	bcc.n	800cd14 <ip4_input+0x18>
 800cd46:	8923      	ldrh	r3, [r4, #8]
 800cd48:	42ab      	cmp	r3, r5
 800cd4a:	d3e3      	bcc.n	800cd14 <ip4_input+0x18>
 800cd4c:	f1b8 0f13 	cmp.w	r8, #19
 800cd50:	d9e0      	bls.n	800cd14 <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cd52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd56:	4d42      	ldr	r5, [pc, #264]	@ (800ce60 <ip4_input+0x164>)
 800cd58:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cd5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cd5e:	f8d9 200c 	ldr.w	r2, [r9, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cd62:	2be0      	cmp	r3, #224	@ 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cd64:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cd66:	d13c      	bne.n	800cde2 <ip4_input+0xe6>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cd68:	f896 302d 	ldrb.w	r3, [r6, #45]	@ 0x2d
 800cd6c:	07db      	lsls	r3, r3, #31
 800cd6e:	d543      	bpl.n	800cdf8 <ip4_input+0xfc>
 800cd70:	6873      	ldr	r3, [r6, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d040      	beq.n	800cdf8 <ip4_input+0xfc>
      netif = NULL;
 800cd76:	4637      	mov	r7, r6
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cd78:	4631      	mov	r1, r6
 800cd7a:	6928      	ldr	r0, [r5, #16]
 800cd7c:	f000 f901 	bl	800cf82 <ip4_addr_isbroadcast_u32>
 800cd80:	2800      	cmp	r0, #0
 800cd82:	d1c7      	bne.n	800cd14 <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cd84:	692b      	ldr	r3, [r5, #16]
 800cd86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cd8a:	2be0      	cmp	r3, #224	@ 0xe0
 800cd8c:	d0c2      	beq.n	800cd14 <ip4_input+0x18>
  if (netif == NULL) {
 800cd8e:	2f00      	cmp	r7, #0
 800cd90:	d0c0      	beq.n	800cd14 <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cd92:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 800cd96:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cd9a:	b13b      	cbz	r3, 800cdac <ip4_input+0xb0>
    p = ip4_reass(p);
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f000 fa0d 	bl	800d1bc <ip4_reass>
    if (p == NULL) {
 800cda2:	4604      	mov	r4, r0
 800cda4:	2800      	cmp	r0, #0
 800cda6:	d0b8      	beq.n	800cd1a <ip4_input+0x1e>
    iphdr = (const struct ip_hdr *)p->payload;
 800cda8:	f8d0 9004 	ldr.w	r9, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800cdac:	f8c5 9008 	str.w	r9, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800cdb0:	4641      	mov	r1, r8
 800cdb2:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800cdb4:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800cdb8:	f899 3000 	ldrb.w	r3, [r9]
 800cdbc:	f003 030f 	and.w	r3, r3, #15
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800cdc4:	f7fa fede 	bl	8007b84 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800cdc8:	f899 3009 	ldrb.w	r3, [r9, #9]
 800cdcc:	2b06      	cmp	r3, #6
 800cdce:	d02b      	beq.n	800ce28 <ip4_input+0x12c>
 800cdd0:	2b11      	cmp	r3, #17
 800cdd2:	d01d      	beq.n	800ce10 <ip4_input+0x114>
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d12c      	bne.n	800ce32 <ip4_input+0x136>
        icmp_input(p, inp);
 800cdd8:	4631      	mov	r1, r6
 800cdda:	4620      	mov	r0, r4
 800cddc:	f7ff fea8 	bl	800cb30 <icmp_input>
        break;
 800cde0:	e01a      	b.n	800ce18 <ip4_input+0x11c>
    if (ip4_input_accept(inp)) {
 800cde2:	4630      	mov	r0, r6
 800cde4:	f7ff ff42 	bl	800cc6c <ip4_input_accept>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d1c4      	bne.n	800cd76 <ip4_input+0x7a>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800cdec:	7d2b      	ldrb	r3, [r5, #20]
 800cdee:	2b7f      	cmp	r3, #127	@ 0x7f
 800cdf0:	d002      	beq.n	800cdf8 <ip4_input+0xfc>
        NETIF_FOREACH(netif) {
 800cdf2:	4b1c      	ldr	r3, [pc, #112]	@ (800ce64 <ip4_input+0x168>)
 800cdf4:	681f      	ldr	r7, [r3, #0]
 800cdf6:	b90f      	cbnz	r7, 800cdfc <ip4_input+0x100>
      netif = NULL;
 800cdf8:	2700      	movs	r7, #0
 800cdfa:	e7bd      	b.n	800cd78 <ip4_input+0x7c>
          if (netif == inp) {
 800cdfc:	42b7      	cmp	r7, r6
 800cdfe:	d101      	bne.n	800ce04 <ip4_input+0x108>
        NETIF_FOREACH(netif) {
 800ce00:	683f      	ldr	r7, [r7, #0]
 800ce02:	e7f8      	b.n	800cdf6 <ip4_input+0xfa>
          if (ip4_input_accept(netif)) {
 800ce04:	4638      	mov	r0, r7
 800ce06:	f7ff ff31 	bl	800cc6c <ip4_input_accept>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d0f8      	beq.n	800ce00 <ip4_input+0x104>
 800ce0e:	e7b3      	b.n	800cd78 <ip4_input+0x7c>
        udp_input(p, inp);
 800ce10:	4631      	mov	r1, r6
 800ce12:	4620      	mov	r0, r4
 800ce14:	f7fe fff6 	bl	800be04 <udp_input>
  ip_data.current_netif = NULL;
 800ce18:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800ce1a:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 800ce1e:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ce20:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ce22:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 800ce26:	e778      	b.n	800cd1a <ip4_input+0x1e>
        tcp_input(p, inp);
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f7fd f834 	bl	8009e98 <tcp_input>
        break;
 800ce30:	e7f2      	b.n	800ce18 <ip4_input+0x11c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ce32:	4639      	mov	r1, r7
 800ce34:	6968      	ldr	r0, [r5, #20]
 800ce36:	f000 f8a4 	bl	800cf82 <ip4_addr_isbroadcast_u32>
 800ce3a:	b960      	cbnz	r0, 800ce56 <ip4_input+0x15a>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ce3c:	696b      	ldr	r3, [r5, #20]
 800ce3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ce42:	2be0      	cmp	r3, #224	@ 0xe0
 800ce44:	d007      	beq.n	800ce56 <ip4_input+0x15a>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ce46:	4641      	mov	r1, r8
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f7fa fec7 	bl	8007bdc <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ce4e:	2102      	movs	r1, #2
 800ce50:	4620      	mov	r0, r4
 800ce52:	f7ff ff03 	bl	800cc5c <icmp_dest_unreach>
        pbuf_free(p);
 800ce56:	4620      	mov	r0, r4
 800ce58:	f7fa fec8 	bl	8007bec <pbuf_free>
        break;
 800ce5c:	e7dc      	b.n	800ce18 <ip4_input+0x11c>
 800ce5e:	bf00      	nop
 800ce60:	2002aaac 	.word	0x2002aaac
 800ce64:	200333f4 	.word	0x200333f4

0800ce68 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ce68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce6c:	4698      	mov	r8, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ce6e:	7b83      	ldrb	r3, [r0, #14]
{
 800ce70:	4604      	mov	r4, r0
 800ce72:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ce74:	2b01      	cmp	r3, #1
{
 800ce76:	4616      	mov	r6, r2
 800ce78:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ce7a:	d006      	beq.n	800ce8a <ip4_output_if_src+0x22>
 800ce7c:	4b32      	ldr	r3, [pc, #200]	@ (800cf48 <ip4_output_if_src+0xe0>)
 800ce7e:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800ce82:	4932      	ldr	r1, [pc, #200]	@ (800cf4c <ip4_output_if_src+0xe4>)
 800ce84:	4832      	ldr	r0, [pc, #200]	@ (800cf50 <ip4_output_if_src+0xe8>)
 800ce86:	f001 fa97 	bl	800e3b8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ce8a:	2e00      	cmp	r6, #0
 800ce8c:	d04e      	beq.n	800cf2c <ip4_output_if_src+0xc4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ce8e:	2114      	movs	r1, #20
 800ce90:	4620      	mov	r0, r4
 800ce92:	f7fa fe73 	bl	8007b7c <pbuf_add_header>
 800ce96:	b120      	cbz	r0, 800cea2 <ip4_output_if_src+0x3a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ce98:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800ce9c:	b002      	add	sp, #8
 800ce9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cea2:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800cea4:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cea6:	2b13      	cmp	r3, #19
 800cea8:	d806      	bhi.n	800ceb8 <ip4_output_if_src+0x50>
 800ceaa:	4b27      	ldr	r3, [pc, #156]	@ (800cf48 <ip4_output_if_src+0xe0>)
 800ceac:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800ceb0:	4928      	ldr	r1, [pc, #160]	@ (800cf54 <ip4_output_if_src+0xec>)
 800ceb2:	4827      	ldr	r0, [pc, #156]	@ (800cf50 <ip4_output_if_src+0xe8>)
 800ceb4:	f001 fa80 	bl	800e3b8 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 800ceb8:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800cebc:	f885 8008 	strb.w	r8, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 800cec0:	f04f 0800 	mov.w	r8, #0
    IPH_PROTO_SET(iphdr, proto);
 800cec4:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800cec6:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800cec8:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800cf5c <ip4_output_if_src+0xf4>
    ip4_addr_copy(iphdr->dest, *dest);
 800cecc:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cece:	2345      	movs	r3, #69	@ 0x45
 800ced0:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800ced2:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800ced6:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ced8:	8920      	ldrh	r0, [r4, #8]
 800ceda:	f7f9 ff71 	bl	8006dc0 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800cede:	f885 8006 	strb.w	r8, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800cee2:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800cee4:	f885 8007 	strb.w	r8, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800cee8:	f8ba 0000 	ldrh.w	r0, [sl]
 800ceec:	f7f9 ff68 	bl	8006dc0 <lwip_htons>
    ++ip_id;
 800cef0:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800cef4:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800cef6:	3301      	adds	r3, #1
 800cef8:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 800cefc:	f1b9 0f00 	cmp.w	r9, #0
 800cf00:	d111      	bne.n	800cf26 <ip4_output_if_src+0xbe>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800cf02:	4b15      	ldr	r3, [pc, #84]	@ (800cf58 <ip4_output_if_src+0xf0>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800cf08:	f885 800a 	strb.w	r8, [r5, #10]
 800cf0c:	f885 800b 	strb.w	r8, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cf10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf12:	b19b      	cbz	r3, 800cf3c <ip4_output_if_src+0xd4>
 800cf14:	8922      	ldrh	r2, [r4, #8]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d910      	bls.n	800cf3c <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 800cf1a:	4632      	mov	r2, r6
 800cf1c:	4639      	mov	r1, r7
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f000 fb20 	bl	800d564 <ip4_frag>
 800cf24:	e7ba      	b.n	800ce9c <ip4_output_if_src+0x34>
      ip4_addr_copy(iphdr->src, *src);
 800cf26:	f8d9 3000 	ldr.w	r3, [r9]
 800cf2a:	e7ec      	b.n	800cf06 <ip4_output_if_src+0x9e>
    if (p->len < IP_HLEN) {
 800cf2c:	8963      	ldrh	r3, [r4, #10]
 800cf2e:	2b13      	cmp	r3, #19
 800cf30:	d9b2      	bls.n	800ce98 <ip4_output_if_src+0x30>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cf32:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800cf34:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800cf3a:	e7e9      	b.n	800cf10 <ip4_output_if_src+0xa8>
  return netif->output(netif, p, dest);
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	4632      	mov	r2, r6
 800cf40:	4621      	mov	r1, r4
 800cf42:	4638      	mov	r0, r7
 800cf44:	4798      	blx	r3
 800cf46:	e7a9      	b.n	800ce9c <ip4_output_if_src+0x34>
 800cf48:	080118f8 	.word	0x080118f8
 800cf4c:	0801192c 	.word	0x0801192c
 800cf50:	0800f15a 	.word	0x0800f15a
 800cf54:	08011938 	.word	0x08011938
 800cf58:	08011968 	.word	0x08011968
 800cf5c:	2003354c 	.word	0x2003354c

0800cf60 <ip4_output_if>:
{
 800cf60:	b4f0      	push	{r4, r5, r6, r7}
 800cf62:	9c06      	ldr	r4, [sp, #24]
 800cf64:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800cf68:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cf6c:	b11a      	cbz	r2, 800cf76 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800cf6e:	b109      	cbz	r1, 800cf74 <ip4_output_if+0x14>
 800cf70:	680f      	ldr	r7, [r1, #0]
 800cf72:	b907      	cbnz	r7, 800cf76 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800cf74:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cf76:	9504      	str	r5, [sp, #16]
 800cf78:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800cf7c:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cf7e:	f7ff bf73 	b.w	800ce68 <ip4_output_if_src>

0800cf82 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cf82:	1e43      	subs	r3, r0, #1
{
 800cf84:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 800cf86:	3303      	adds	r3, #3
 800cf88:	d812      	bhi.n	800cfb0 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cf8a:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 800cf8e:	f013 0002 	ands.w	r0, r3, #2
 800cf92:	d010      	beq.n	800cfb6 <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cf94:	684b      	ldr	r3, [r1, #4]
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d00c      	beq.n	800cfb4 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cf9a:	6889      	ldr	r1, [r1, #8]
 800cf9c:	4053      	eors	r3, r2
 800cf9e:	420b      	tst	r3, r1
 800cfa0:	d108      	bne.n	800cfb4 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cfa2:	43cb      	mvns	r3, r1
 800cfa4:	ea22 0201 	bic.w	r2, r2, r1
 800cfa8:	1ad3      	subs	r3, r2, r3
 800cfaa:	4258      	negs	r0, r3
 800cfac:	4158      	adcs	r0, r3
 800cfae:	4770      	bx	lr
    return 1;
 800cfb0:	2001      	movs	r0, #1
 800cfb2:	4770      	bx	lr
    return 0;
 800cfb4:	2000      	movs	r0, #0
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 800cfb6:	4770      	bx	lr

0800cfb8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cfb8:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cfba:	4b0c      	ldr	r3, [pc, #48]	@ (800cfec <ip_reass_dequeue_datagram+0x34>)
{
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	4282      	cmp	r2, r0
 800cfc4:	d107      	bne.n	800cfd6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cfc6:	6802      	ldr	r2, [r0, #0]
 800cfc8:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800cfca:	4621      	mov	r1, r4
 800cfcc:	2004      	movs	r0, #4
}
 800cfce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800cfd2:	f7fa bb9b 	b.w	800770c <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cfd6:	b931      	cbnz	r1, 800cfe6 <ip_reass_dequeue_datagram+0x2e>
 800cfd8:	4b05      	ldr	r3, [pc, #20]	@ (800cff0 <ip_reass_dequeue_datagram+0x38>)
 800cfda:	f240 1245 	movw	r2, #325	@ 0x145
 800cfde:	4905      	ldr	r1, [pc, #20]	@ (800cff4 <ip_reass_dequeue_datagram+0x3c>)
 800cfe0:	4805      	ldr	r0, [pc, #20]	@ (800cff8 <ip_reass_dequeue_datagram+0x40>)
 800cfe2:	f001 f9e9 	bl	800e3b8 <iprintf>
    prev->next = ipr->next;
 800cfe6:	6823      	ldr	r3, [r4, #0]
 800cfe8:	602b      	str	r3, [r5, #0]
 800cfea:	e7ee      	b.n	800cfca <ip_reass_dequeue_datagram+0x12>
 800cfec:	20033550 	.word	0x20033550
 800cff0:	0801196c 	.word	0x0801196c
 800cff4:	080119a5 	.word	0x080119a5
 800cff8:	0800f15a 	.word	0x0800f15a

0800cffc <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800cffc:	4281      	cmp	r1, r0
{
 800cffe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d002:	4604      	mov	r4, r0
 800d004:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d006:	d105      	bne.n	800d014 <ip_reass_free_complete_datagram+0x18>
 800d008:	4b2f      	ldr	r3, [pc, #188]	@ (800d0c8 <ip_reass_free_complete_datagram+0xcc>)
 800d00a:	22ab      	movs	r2, #171	@ 0xab
 800d00c:	492f      	ldr	r1, [pc, #188]	@ (800d0cc <ip_reass_free_complete_datagram+0xd0>)
 800d00e:	4830      	ldr	r0, [pc, #192]	@ (800d0d0 <ip_reass_free_complete_datagram+0xd4>)
 800d010:	f001 f9d2 	bl	800e3b8 <iprintf>
  if (prev != NULL) {
 800d014:	b146      	cbz	r6, 800d028 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d016:	6833      	ldr	r3, [r6, #0]
 800d018:	42a3      	cmp	r3, r4
 800d01a:	d005      	beq.n	800d028 <ip_reass_free_complete_datagram+0x2c>
 800d01c:	4b2a      	ldr	r3, [pc, #168]	@ (800d0c8 <ip_reass_free_complete_datagram+0xcc>)
 800d01e:	22ad      	movs	r2, #173	@ 0xad
 800d020:	492c      	ldr	r1, [pc, #176]	@ (800d0d4 <ip_reass_free_complete_datagram+0xd8>)
 800d022:	482b      	ldr	r0, [pc, #172]	@ (800d0d0 <ip_reass_free_complete_datagram+0xd4>)
 800d024:	f001 f9c8 	bl	800e3b8 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d028:	6867      	ldr	r7, [r4, #4]
 800d02a:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 800d02c:	889a      	ldrh	r2, [r3, #4]
 800d02e:	bb92      	cbnz	r2, 800d096 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 800d030:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d032:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 800d036:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d038:	f104 0208 	add.w	r2, r4, #8
 800d03c:	f852 0b04 	ldr.w	r0, [r2], #4
 800d040:	428a      	cmp	r2, r1
 800d042:	f843 0b04 	str.w	r0, [r3], #4
 800d046:	d1f9      	bne.n	800d03c <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d048:	2101      	movs	r1, #1
 800d04a:	4638      	mov	r0, r7
 800d04c:	f7ff fe0a 	bl	800cc64 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d050:	4638      	mov	r0, r7
 800d052:	f7fa ff1f 	bl	8007e94 <pbuf_clen>
 800d056:	4605      	mov	r5, r0
    pbuf_free(p);
 800d058:	4638      	mov	r0, r7
 800d05a:	f7fa fdc7 	bl	8007bec <pbuf_free>
  p = ipr->p;
 800d05e:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d060:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 800d0c8 <ip_reass_free_complete_datagram+0xcc>
 800d064:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800d0e0 <ip_reass_free_complete_datagram+0xe4>
 800d068:	f8df a064 	ldr.w	sl, [pc, #100]	@ 800d0d0 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 800d06c:	b9af      	cbnz	r7, 800d09a <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800d06e:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d070:	4c19      	ldr	r4, [pc, #100]	@ (800d0d8 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800d072:	4631      	mov	r1, r6
 800d074:	f7ff ffa0 	bl	800cfb8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d078:	8823      	ldrh	r3, [r4, #0]
 800d07a:	42ab      	cmp	r3, r5
 800d07c:	d205      	bcs.n	800d08a <ip_reass_free_complete_datagram+0x8e>
 800d07e:	4b12      	ldr	r3, [pc, #72]	@ (800d0c8 <ip_reass_free_complete_datagram+0xcc>)
 800d080:	22d2      	movs	r2, #210	@ 0xd2
 800d082:	4916      	ldr	r1, [pc, #88]	@ (800d0dc <ip_reass_free_complete_datagram+0xe0>)
 800d084:	4812      	ldr	r0, [pc, #72]	@ (800d0d0 <ip_reass_free_complete_datagram+0xd4>)
 800d086:	f001 f997 	bl	800e3b8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d08a:	8823      	ldrh	r3, [r4, #0]
}
 800d08c:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d08e:	1b5b      	subs	r3, r3, r5
 800d090:	8023      	strh	r3, [r4, #0]
}
 800d092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800d096:	2500      	movs	r5, #0
 800d098:	e7e1      	b.n	800d05e <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800d09a:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 800d09c:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 800d09e:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800d0a2:	f7fa fef7 	bl	8007e94 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d0a6:	4405      	add	r5, r0
 800d0a8:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800d0ac:	db05      	blt.n	800d0ba <ip_reass_free_complete_datagram+0xbe>
 800d0ae:	4643      	mov	r3, r8
 800d0b0:	22cc      	movs	r2, #204	@ 0xcc
 800d0b2:	4649      	mov	r1, r9
 800d0b4:	4650      	mov	r0, sl
 800d0b6:	f001 f97f 	bl	800e3b8 <iprintf>
    pbuf_free(pcur);
 800d0ba:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d0bc:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 800d0be:	465f      	mov	r7, fp
    pbuf_free(pcur);
 800d0c0:	f7fa fd94 	bl	8007bec <pbuf_free>
 800d0c4:	e7d2      	b.n	800d06c <ip_reass_free_complete_datagram+0x70>
 800d0c6:	bf00      	nop
 800d0c8:	0801196c 	.word	0x0801196c
 800d0cc:	080119be 	.word	0x080119be
 800d0d0:	0800f15a 	.word	0x0800f15a
 800d0d4:	080119ca 	.word	0x080119ca
 800d0d8:	2003354e 	.word	0x2003354e
 800d0dc:	080119f9 	.word	0x080119f9
 800d0e0:	080119dc 	.word	0x080119dc

0800d0e4 <ip_reass_remove_oldest_datagram>:
{
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	4605      	mov	r5, r0
 800d0ea:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800d0ec:	2600      	movs	r6, #0
    r = reassdatagrams;
 800d0ee:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 800d158 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 800d0f2:	2400      	movs	r4, #0
    r = reassdatagrams;
 800d0f4:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800d0f8:	4621      	mov	r1, r4
    prev = NULL;
 800d0fa:	46a4      	mov	ip, r4
    oldest = NULL;
 800d0fc:	4620      	mov	r0, r4
    while (r != NULL) {
 800d0fe:	b953      	cbnz	r3, 800d116 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800d100:	b110      	cbz	r0, 800d108 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d102:	f7ff ff7b 	bl	800cffc <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800d106:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d108:	42be      	cmp	r6, r7
 800d10a:	da01      	bge.n	800d110 <ip_reass_remove_oldest_datagram+0x2c>
 800d10c:	2c01      	cmp	r4, #1
 800d10e:	dcf0      	bgt.n	800d0f2 <ip_reass_remove_oldest_datagram+0xe>
}
 800d110:	4630      	mov	r0, r6
 800d112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d116:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800d11a:	695a      	ldr	r2, [r3, #20]
 800d11c:	4572      	cmp	r2, lr
 800d11e:	d109      	bne.n	800d134 <ip_reass_remove_oldest_datagram+0x50>
 800d120:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800d124:	699a      	ldr	r2, [r3, #24]
 800d126:	4572      	cmp	r2, lr
 800d128:	d104      	bne.n	800d134 <ip_reass_remove_oldest_datagram+0x50>
 800d12a:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 800d12e:	88aa      	ldrh	r2, [r5, #4]
 800d130:	4596      	cmp	lr, r2
 800d132:	d008      	beq.n	800d146 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 800d134:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800d136:	b160      	cbz	r0, 800d152 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800d138:	7fc2      	ldrb	r2, [r0, #31]
 800d13a:	f893 e01f 	ldrb.w	lr, [r3, #31]
 800d13e:	4596      	cmp	lr, r2
 800d140:	bf9c      	itt	ls
 800d142:	4661      	movls	r1, ip
 800d144:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	2a00      	cmp	r2, #0
 800d14a:	bf18      	it	ne
 800d14c:	469c      	movne	ip, r3
 800d14e:	4613      	mov	r3, r2
 800d150:	e7d5      	b.n	800d0fe <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800d152:	4661      	mov	r1, ip
 800d154:	4618      	mov	r0, r3
 800d156:	e7f6      	b.n	800d146 <ip_reass_remove_oldest_datagram+0x62>
 800d158:	20033550 	.word	0x20033550

0800d15c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d15c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d15e:	4604      	mov	r4, r0
 800d160:	b930      	cbnz	r0, 800d170 <ipfrag_free_pbuf_custom+0x14>
 800d162:	4b08      	ldr	r3, [pc, #32]	@ (800d184 <ipfrag_free_pbuf_custom+0x28>)
 800d164:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800d168:	4907      	ldr	r1, [pc, #28]	@ (800d188 <ipfrag_free_pbuf_custom+0x2c>)
 800d16a:	4808      	ldr	r0, [pc, #32]	@ (800d18c <ipfrag_free_pbuf_custom+0x30>)
 800d16c:	f001 f924 	bl	800e3b8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800d170:	6960      	ldr	r0, [r4, #20]
 800d172:	b108      	cbz	r0, 800d178 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800d174:	f7fa fd3a 	bl	8007bec <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800d178:	4621      	mov	r1, r4
 800d17a:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800d17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800d180:	f7fa bac4 	b.w	800770c <memp_free>
 800d184:	0801196c 	.word	0x0801196c
 800d188:	08011a1b 	.word	0x08011a1b
 800d18c:	0800f15a 	.word	0x0800f15a

0800d190 <ip_reass_tmr>:
{
 800d190:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800d192:	4b09      	ldr	r3, [pc, #36]	@ (800d1b8 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 800d194:	2400      	movs	r4, #0
  r = reassdatagrams;
 800d196:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800d198:	b900      	cbnz	r0, 800d19c <ip_reass_tmr+0xc>
}
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800d19c:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 800d19e:	6805      	ldr	r5, [r0, #0]
    if (r->timer > 0) {
 800d1a0:	b123      	cbz	r3, 800d1ac <ip_reass_tmr+0x1c>
      r->timer--;
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	e7f5      	b.n	800d198 <ip_reass_tmr+0x8>
 800d1ac:	4621      	mov	r1, r4
 800d1ae:	f7ff ff25 	bl	800cffc <ip_reass_free_complete_datagram>
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	e7f7      	b.n	800d1a6 <ip_reass_tmr+0x16>
 800d1b6:	bf00      	nop
 800d1b8:	20033550 	.word	0x20033550

0800d1bc <ip4_reass>:
{
 800d1bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800d1c0:	6845      	ldr	r5, [r0, #4]
{
 800d1c2:	4607      	mov	r7, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d1c4:	782b      	ldrb	r3, [r5, #0]
 800d1c6:	f003 030f 	and.w	r3, r3, #15
 800d1ca:	2b05      	cmp	r3, #5
 800d1cc:	f040 80a9 	bne.w	800d322 <ip4_reass+0x166>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d1d0:	88e8      	ldrh	r0, [r5, #6]
 800d1d2:	f7f9 fdf5 	bl	8006dc0 <lwip_htons>
 800d1d6:	4680      	mov	r8, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d1d8:	8868      	ldrh	r0, [r5, #2]
 800d1da:	f7f9 fdf1 	bl	8006dc0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800d1de:	782b      	ldrb	r3, [r5, #0]
 800d1e0:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800d1e4:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800d1e8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800d1ec:	f0c0 8099 	bcc.w	800d322 <ip4_reass+0x166>
  len = (u16_t)(len - hlen);
 800d1f0:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d1f2:	4caf      	ldr	r4, [pc, #700]	@ (800d4b0 <ip4_reass+0x2f4>)
  clen = pbuf_clen(p);
 800d1f4:	4638      	mov	r0, r7
  len = (u16_t)(len - hlen);
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800d1fa:	f7fa fe4b 	bl	8007e94 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d1fe:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 800d200:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d202:	4403      	add	r3, r0
 800d204:	2b0a      	cmp	r3, #10
 800d206:	f300 8082 	bgt.w	800d30e <ip4_reass+0x152>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d20a:	4eaa      	ldr	r6, [pc, #680]	@ (800d4b4 <ip4_reass+0x2f8>)
 800d20c:	6834      	ldr	r4, [r6, #0]
 800d20e:	2c00      	cmp	r4, #0
 800d210:	f040 808c 	bne.w	800d32c <ip4_reass+0x170>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d214:	2004      	movs	r0, #4
 800d216:	f7fa fa4b 	bl	80076b0 <memp_malloc>
  if (ipr == NULL) {
 800d21a:	4604      	mov	r4, r0
 800d21c:	b958      	cbnz	r0, 800d236 <ip4_reass+0x7a>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d21e:	4651      	mov	r1, sl
 800d220:	4628      	mov	r0, r5
 800d222:	f7ff ff5f 	bl	800d0e4 <ip_reass_remove_oldest_datagram>
 800d226:	4582      	cmp	sl, r0
 800d228:	dc7b      	bgt.n	800d322 <ip4_reass+0x166>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d22a:	2004      	movs	r0, #4
 800d22c:	f7fa fa40 	bl	80076b0 <memp_malloc>
    if (ipr == NULL)
 800d230:	4604      	mov	r4, r0
 800d232:	2800      	cmp	r0, #0
 800d234:	d075      	beq.n	800d322 <ip4_reass+0x166>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d236:	221c      	movs	r2, #28
 800d238:	2100      	movs	r1, #0
 800d23a:	1d20      	adds	r0, r4, #4
 800d23c:	f001 f9b6 	bl	800e5ac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d240:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d242:	f104 0208 	add.w	r2, r4, #8
 800d246:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800d24a:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800d24c:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800d24e:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 800d250:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d252:	462b      	mov	r3, r5
 800d254:	f853 0b04 	ldr.w	r0, [r3], #4
 800d258:	428b      	cmp	r3, r1
 800d25a:	f842 0b04 	str.w	r0, [r2], #4
 800d25e:	d1f9      	bne.n	800d254 <ip4_reass+0x98>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d260:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d264:	f3c8 080c 	ubfx	r8, r8, #0, #13
  if (is_last) {
 800d268:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d26c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  if (is_last) {
 800d270:	d10a      	bne.n	800d288 <ip4_reass+0xcc>
    u16_t datagram_len = (u16_t)(offset + len);
 800d272:	9b01      	ldr	r3, [sp, #4]
 800d274:	4443      	add	r3, r8
 800d276:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d278:	4598      	cmp	r8, r3
 800d27a:	f200 813a 	bhi.w	800d4f2 <ip4_reass+0x336>
 800d27e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d282:	4293      	cmp	r3, r2
 800d284:	f200 8135 	bhi.w	800d4f2 <ip4_reass+0x336>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d288:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d28a:	8868      	ldrh	r0, [r5, #2]
 800d28c:	f7f9 fd98 	bl	8006dc0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800d290:	782b      	ldrb	r3, [r5, #0]
 800d292:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800d296:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800d29a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800d29e:	f0c0 8128 	bcc.w	800d4f2 <ip4_reass+0x336>
  len = (u16_t)(len - hlen);
 800d2a2:	1a80      	subs	r0, r0, r2
 800d2a4:	fa1f f980 	uxth.w	r9, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d2a8:	88e8      	ldrh	r0, [r5, #6]
 800d2aa:	f7f9 fd89 	bl	8006dc0 <lwip_htons>
 800d2ae:	f3c0 030c 	ubfx	r3, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d2b2:	687e      	ldr	r6, [r7, #4]
  iprh->next_pbuf = NULL;
 800d2b4:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d2b6:	00db      	lsls	r3, r3, #3
  iprh->next_pbuf = NULL;
 800d2b8:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 800d2ba:	eb09 0003 	add.w	r0, r9, r3
  iprh->next_pbuf = NULL;
 800d2be:	7075      	strb	r5, [r6, #1]
 800d2c0:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 800d2c2:	fa1f fc80 	uxth.w	ip, r0
  iprh->next_pbuf = NULL;
 800d2c6:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800d2c8:	80b3      	strh	r3, [r6, #4]
  if (iprh->end < offset) {
 800d2ca:	4563      	cmp	r3, ip
  iprh->end = (u16_t)(offset + len);
 800d2cc:	80f0      	strh	r0, [r6, #6]
  if (iprh->end < offset) {
 800d2ce:	f200 8110 	bhi.w	800d4f2 <ip4_reass+0x336>
  for (q = ipr->p; q != NULL;) {
 800d2d2:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 800d2d6:	f04f 0901 	mov.w	r9, #1
  for (q = ipr->p; q != NULL;) {
 800d2da:	4670      	mov	r0, lr
 800d2dc:	bba8      	cbnz	r0, 800d34a <ip4_reass+0x18e>
    if (iprh_prev != NULL) {
 800d2de:	2d00      	cmp	r5, #0
 800d2e0:	f000 80b2 	beq.w	800d448 <ip4_reass+0x28c>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d2e4:	88ea      	ldrh	r2, [r5, #6]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d906      	bls.n	800d2f8 <ip4_reass+0x13c>
 800d2ea:	4b73      	ldr	r3, [pc, #460]	@ (800d4b8 <ip4_reass+0x2fc>)
 800d2ec:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800d2f0:	4972      	ldr	r1, [pc, #456]	@ (800d4bc <ip4_reass+0x300>)
 800d2f2:	4873      	ldr	r0, [pc, #460]	@ (800d4c0 <ip4_reass+0x304>)
 800d2f4:	f001 f860 	bl	800e3b8 <iprintf>
      if (iprh_prev->end != iprh->start) {
 800d2f8:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 800d2fa:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800d2fc:	88b3      	ldrh	r3, [r6, #4]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d036      	beq.n	800d370 <ip4_reass+0x1b4>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d302:	f1bb 0f00 	cmp.w	fp, #0
 800d306:	d03e      	beq.n	800d386 <ip4_reass+0x1ca>
        valid = 0;
 800d308:	f04f 0900 	mov.w	r9, #0
 800d30c:	e033      	b.n	800d376 <ip4_reass+0x1ba>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d30e:	4601      	mov	r1, r0
 800d310:	4628      	mov	r0, r5
 800d312:	f7ff fee7 	bl	800d0e4 <ip_reass_remove_oldest_datagram>
 800d316:	b120      	cbz	r0, 800d322 <ip4_reass+0x166>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d318:	8823      	ldrh	r3, [r4, #0]
 800d31a:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d31c:	2b0a      	cmp	r3, #10
 800d31e:	f77f af74 	ble.w	800d20a <ip4_reass+0x4e>
  pbuf_free(p);
 800d322:	4638      	mov	r0, r7
 800d324:	f7fa fc62 	bl	8007bec <pbuf_free>
  return NULL;
 800d328:	2700      	movs	r7, #0
 800d32a:	e078      	b.n	800d41e <ip4_reass+0x262>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d32c:	68eb      	ldr	r3, [r5, #12]
 800d32e:	6962      	ldr	r2, [r4, #20]
 800d330:	429a      	cmp	r2, r3
 800d332:	d108      	bne.n	800d346 <ip4_reass+0x18a>
 800d334:	692b      	ldr	r3, [r5, #16]
 800d336:	69a2      	ldr	r2, [r4, #24]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d104      	bne.n	800d346 <ip4_reass+0x18a>
 800d33c:	89a2      	ldrh	r2, [r4, #12]
 800d33e:	88ab      	ldrh	r3, [r5, #4]
 800d340:	429a      	cmp	r2, r3
 800d342:	f000 80ea 	beq.w	800d51a <ip4_reass+0x35e>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d346:	6824      	ldr	r4, [r4, #0]
 800d348:	e761      	b.n	800d20e <ip4_reass+0x52>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d34a:	6842      	ldr	r2, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 800d34c:	8891      	ldrh	r1, [r2, #4]
 800d34e:	428b      	cmp	r3, r1
 800d350:	d26d      	bcs.n	800d42e <ip4_reass+0x272>
      iprh->next_pbuf = q;
 800d352:	6030      	str	r0, [r6, #0]
      if (iprh_prev != NULL) {
 800d354:	2d00      	cmp	r5, #0
 800d356:	d066      	beq.n	800d426 <ip4_reass+0x26a>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d358:	88ea      	ldrh	r2, [r5, #6]
 800d35a:	4293      	cmp	r3, r2
 800d35c:	f0c0 80c9 	bcc.w	800d4f2 <ip4_reass+0x336>
 800d360:	458c      	cmp	ip, r1
 800d362:	f200 80c6 	bhi.w	800d4f2 <ip4_reass+0x336>
          valid = 0;
 800d366:	4293      	cmp	r3, r2
 800d368:	bf18      	it	ne
 800d36a:	f04f 0900 	movne.w	r9, #0
        iprh_prev->next_pbuf = new_p;
 800d36e:	602f      	str	r7, [r5, #0]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d370:	f1bb 0f00 	cmp.w	fp, #0
 800d374:	d004      	beq.n	800d380 <ip4_reass+0x1c4>
 800d376:	7fa3      	ldrb	r3, [r4, #30]
 800d378:	f013 0301 	ands.w	r3, r3, #1
 800d37c:	f000 8095 	beq.w	800d4aa <ip4_reass+0x2ee>
    if (valid) {
 800d380:	f1b9 0f00 	cmp.w	r9, #0
 800d384:	d16b      	bne.n	800d45e <ip4_reass+0x2a2>
          iprh = (struct ip_reass_helper *)q->payload;
 800d386:	f04f 0900 	mov.w	r9, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d38a:	4e49      	ldr	r6, [pc, #292]	@ (800d4b0 <ip4_reass+0x2f4>)
 800d38c:	8833      	ldrh	r3, [r6, #0]
 800d38e:	4453      	add	r3, sl
 800d390:	8033      	strh	r3, [r6, #0]
  if (is_last) {
 800d392:	f1bb 0f00 	cmp.w	fp, #0
 800d396:	d107      	bne.n	800d3a8 <ip4_reass+0x1ec>
    u16_t datagram_len = (u16_t)(offset + len);
 800d398:	9b01      	ldr	r3, [sp, #4]
 800d39a:	4498      	add	r8, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d39c:	7fa3      	ldrb	r3, [r4, #30]
 800d39e:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 800d3a2:	f8a4 801c 	strh.w	r8, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d3a6:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d3a8:	f1b9 0f01 	cmp.w	r9, #1
 800d3ac:	d1bc      	bne.n	800d328 <ip4_reass+0x16c>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d3ae:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d3b0:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d3b4:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d3b6:	685f      	ldr	r7, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d3b8:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d3bc:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d3be:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d3c0:	463a      	mov	r2, r7
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d3c2:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d3c4:	f853 cb04 	ldr.w	ip, [r3], #4
 800d3c8:	428b      	cmp	r3, r1
 800d3ca:	f842 cb04 	str.w	ip, [r2], #4
 800d3ce:	d1f9      	bne.n	800d3c4 <ip4_reass+0x208>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d3d0:	f7f9 fcf6 	bl	8006dc0 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800d3d4:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d3d6:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d3d8:	71bb      	strb	r3, [r7, #6]
 800d3da:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d3dc:	72bb      	strb	r3, [r7, #10]
 800d3de:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 800d3e0:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 800d3e2:	2d00      	cmp	r5, #0
 800d3e4:	d176      	bne.n	800d4d4 <ip4_reass+0x318>
    if (ipr == reassdatagrams) {
 800d3e6:	4b33      	ldr	r3, [pc, #204]	@ (800d4b4 <ip4_reass+0x2f8>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
        if (ipr_prev->next == ipr) {
 800d3ea:	42a3      	cmp	r3, r4
 800d3ec:	d002      	beq.n	800d3f4 <ip4_reass+0x238>
 800d3ee:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d17c      	bne.n	800d4ee <ip4_reass+0x332>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	f7ff fdde 	bl	800cfb8 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	f7fa fd49 	bl	8007e94 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d402:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(p);
 800d404:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d406:	4283      	cmp	r3, r0
 800d408:	d206      	bcs.n	800d418 <ip4_reass+0x25c>
 800d40a:	4b2b      	ldr	r3, [pc, #172]	@ (800d4b8 <ip4_reass+0x2fc>)
 800d40c:	f240 229b 	movw	r2, #667	@ 0x29b
 800d410:	492c      	ldr	r1, [pc, #176]	@ (800d4c4 <ip4_reass+0x308>)
 800d412:	482b      	ldr	r0, [pc, #172]	@ (800d4c0 <ip4_reass+0x304>)
 800d414:	f000 ffd0 	bl	800e3b8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d418:	8833      	ldrh	r3, [r6, #0]
 800d41a:	1b1b      	subs	r3, r3, r4
 800d41c:	8033      	strh	r3, [r6, #0]
}
 800d41e:	4638      	mov	r0, r7
 800d420:	b003      	add	sp, #12
 800d422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 800d426:	458c      	cmp	ip, r1
 800d428:	d863      	bhi.n	800d4f2 <ip4_reass+0x336>
      ipr->p = new_p;
 800d42a:	6067      	str	r7, [r4, #4]
 800d42c:	e7a0      	b.n	800d370 <ip4_reass+0x1b4>
    } else if (iprh->start == iprh_tmp->start) {
 800d42e:	d060      	beq.n	800d4f2 <ip4_reass+0x336>
    } else if (iprh->start < iprh_tmp->end) {
 800d430:	88d0      	ldrh	r0, [r2, #6]
 800d432:	4298      	cmp	r0, r3
 800d434:	d85d      	bhi.n	800d4f2 <ip4_reass+0x336>
      if (iprh_prev != NULL) {
 800d436:	b125      	cbz	r5, 800d442 <ip4_reass+0x286>
        if (iprh_prev->end != iprh_tmp->start) {
 800d438:	88e8      	ldrh	r0, [r5, #6]
          valid = 0;
 800d43a:	4288      	cmp	r0, r1
 800d43c:	bf18      	it	ne
 800d43e:	f04f 0900 	movne.w	r9, #0
    q = iprh_tmp->next_pbuf;
 800d442:	6810      	ldr	r0, [r2, #0]
 800d444:	4615      	mov	r5, r2
 800d446:	e749      	b.n	800d2dc <ip4_reass+0x120>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d448:	f1be 0f00 	cmp.w	lr, #0
 800d44c:	d0ed      	beq.n	800d42a <ip4_reass+0x26e>
 800d44e:	4b1a      	ldr	r3, [pc, #104]	@ (800d4b8 <ip4_reass+0x2fc>)
 800d450:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800d454:	491c      	ldr	r1, [pc, #112]	@ (800d4c8 <ip4_reass+0x30c>)
 800d456:	481a      	ldr	r0, [pc, #104]	@ (800d4c0 <ip4_reass+0x304>)
 800d458:	f000 ffae 	bl	800e3b8 <iprintf>
 800d45c:	e7e5      	b.n	800d42a <ip4_reass+0x26e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d45e:	6863      	ldr	r3, [r4, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d090      	beq.n	800d386 <ip4_reass+0x1ca>
 800d464:	6859      	ldr	r1, [r3, #4]
 800d466:	888b      	ldrh	r3, [r1, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d18c      	bne.n	800d386 <ip4_reass+0x1ca>
        q = iprh->next_pbuf;
 800d46c:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800d46e:	b99b      	cbnz	r3, 800d498 <ip4_reass+0x2dc>
          LWIP_ASSERT("sanity check",
 800d470:	42b1      	cmp	r1, r6
 800d472:	d106      	bne.n	800d482 <ip4_reass+0x2c6>
 800d474:	4b10      	ldr	r3, [pc, #64]	@ (800d4b8 <ip4_reass+0x2fc>)
 800d476:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d47a:	4914      	ldr	r1, [pc, #80]	@ (800d4cc <ip4_reass+0x310>)
 800d47c:	4810      	ldr	r0, [pc, #64]	@ (800d4c0 <ip4_reass+0x304>)
 800d47e:	f000 ff9b 	bl	800e3b8 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d482:	6833      	ldr	r3, [r6, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d080      	beq.n	800d38a <ip4_reass+0x1ce>
 800d488:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b8 <ip4_reass+0x2fc>)
 800d48a:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800d48e:	4910      	ldr	r1, [pc, #64]	@ (800d4d0 <ip4_reass+0x314>)
 800d490:	480b      	ldr	r0, [pc, #44]	@ (800d4c0 <ip4_reass+0x304>)
 800d492:	f000 ff91 	bl	800e3b8 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d496:	e778      	b.n	800d38a <ip4_reass+0x1ce>
          iprh = (struct ip_reass_helper *)q->payload;
 800d498:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800d49a:	88f0      	ldrh	r0, [r6, #6]
 800d49c:	8893      	ldrh	r3, [r2, #4]
 800d49e:	4298      	cmp	r0, r3
 800d4a0:	f47f af71 	bne.w	800d386 <ip4_reass+0x1ca>
          q = iprh->next_pbuf;
 800d4a4:	6813      	ldr	r3, [r2, #0]
          iprh = (struct ip_reass_helper *)q->payload;
 800d4a6:	4616      	mov	r6, r2
 800d4a8:	e7e1      	b.n	800d46e <ip4_reass+0x2b2>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d4aa:	4699      	mov	r9, r3
 800d4ac:	e76d      	b.n	800d38a <ip4_reass+0x1ce>
 800d4ae:	bf00      	nop
 800d4b0:	2003354e 	.word	0x2003354e
 800d4b4:	20033550 	.word	0x20033550
 800d4b8:	0801196c 	.word	0x0801196c
 800d4bc:	08011a27 	.word	0x08011a27
 800d4c0:	0800f15a 	.word	0x0800f15a
 800d4c4:	08011aab 	.word	0x08011aab
 800d4c8:	08011a45 	.word	0x08011a45
 800d4cc:	08011a7c 	.word	0x08011a7c
 800d4d0:	08011a89 	.word	0x08011a89
      iprh = (struct ip_reass_helper *)r->payload;
 800d4d4:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800d4d8:	2114      	movs	r1, #20
 800d4da:	4628      	mov	r0, r5
 800d4dc:	f7fa fb52 	bl	8007b84 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	4638      	mov	r0, r7
 800d4e4:	f7fa fcfa 	bl	8007edc <pbuf_cat>
      r = iprh->next_pbuf;
 800d4e8:	f8d8 5000 	ldr.w	r5, [r8]
 800d4ec:	e779      	b.n	800d3e2 <ip4_reass+0x226>
        if (ipr_prev->next == ipr) {
 800d4ee:	682b      	ldr	r3, [r5, #0]
 800d4f0:	e77b      	b.n	800d3ea <ip4_reass+0x22e>
  if (ipr->p == NULL) {
 800d4f2:	6863      	ldr	r3, [r4, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	f47f af14 	bne.w	800d322 <ip4_reass+0x166>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d4fa:	4b16      	ldr	r3, [pc, #88]	@ (800d554 <ip4_reass+0x398>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	42a3      	cmp	r3, r4
 800d500:	d006      	beq.n	800d510 <ip4_reass+0x354>
 800d502:	4b15      	ldr	r3, [pc, #84]	@ (800d558 <ip4_reass+0x39c>)
 800d504:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d508:	4914      	ldr	r1, [pc, #80]	@ (800d55c <ip4_reass+0x3a0>)
 800d50a:	4815      	ldr	r0, [pc, #84]	@ (800d560 <ip4_reass+0x3a4>)
 800d50c:	f000 ff54 	bl	800e3b8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d510:	2100      	movs	r1, #0
 800d512:	4620      	mov	r0, r4
 800d514:	f7ff fd50 	bl	800cfb8 <ip_reass_dequeue_datagram>
 800d518:	e703      	b.n	800d322 <ip4_reass+0x166>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d51a:	88e8      	ldrh	r0, [r5, #6]
 800d51c:	f7f9 fc50 	bl	8006dc0 <lwip_htons>
 800d520:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d524:	2800      	cmp	r0, #0
 800d526:	f47f ae9b 	bne.w	800d260 <ip4_reass+0xa4>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d52a:	89e0      	ldrh	r0, [r4, #14]
 800d52c:	f7f9 fc48 	bl	8006dc0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d530:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d534:	2800      	cmp	r0, #0
 800d536:	f43f ae93 	beq.w	800d260 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d53a:	462b      	mov	r3, r5
 800d53c:	f104 0208 	add.w	r2, r4, #8
 800d540:	f105 0114 	add.w	r1, r5, #20
 800d544:	f853 0b04 	ldr.w	r0, [r3], #4
 800d548:	428b      	cmp	r3, r1
 800d54a:	f842 0b04 	str.w	r0, [r2], #4
 800d54e:	d1f9      	bne.n	800d544 <ip4_reass+0x388>
 800d550:	e686      	b.n	800d260 <ip4_reass+0xa4>
 800d552:	bf00      	nop
 800d554:	20033550 	.word	0x20033550
 800d558:	0801196c 	.word	0x0801196c
 800d55c:	08011ac6 	.word	0x08011ac6
 800d560:	0800f15a 	.word	0x0800f15a

0800d564 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d568:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
{
 800d56a:	b08d      	sub	sp, #52	@ 0x34
 800d56c:	4605      	mov	r5, r0
 800d56e:	468a      	mov	sl, r1
 800d570:	9209      	str	r2, [sp, #36]	@ 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d572:	f1b3 0214 	subs.w	r2, r3, #20
 800d576:	bf48      	it	mi
 800d578:	f1a3 020d 	submi.w	r2, r3, #13
 800d57c:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 800d580:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d582:	6843      	ldr	r3, [r0, #4]
 800d584:	9303      	str	r3, [sp, #12]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	f003 030f 	and.w	r3, r3, #15
 800d58c:	2b05      	cmp	r3, #5
 800d58e:	ea4f 0783 	mov.w	r7, r3, lsl #2
 800d592:	d109      	bne.n	800d5a8 <ip4_frag+0x44>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d594:	8943      	ldrh	r3, [r0, #10]
 800d596:	2b13      	cmp	r3, #19
 800d598:	d80b      	bhi.n	800d5b2 <ip4_frag+0x4e>
 800d59a:	4b5f      	ldr	r3, [pc, #380]	@ (800d718 <ip4_frag+0x1b4>)
 800d59c:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800d5a0:	495e      	ldr	r1, [pc, #376]	@ (800d71c <ip4_frag+0x1b8>)
 800d5a2:	485f      	ldr	r0, [pc, #380]	@ (800d720 <ip4_frag+0x1bc>)
 800d5a4:	f000 ff08 	bl	800e3b8 <iprintf>
    return ERR_VAL;
 800d5a8:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800d5ac:	b00d      	add	sp, #52	@ 0x34
 800d5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d5b2:	9b03      	ldr	r3, [sp, #12]
  u16_t newpbuflen = 0;
 800d5b4:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d5b6:	88d8      	ldrh	r0, [r3, #6]
 800d5b8:	f7f9 fc02 	bl	8006dc0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800d5bc:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 800d5c0:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 800d5c2:	9304      	str	r3, [sp, #16]
  mf_set = tmp & IP_MF;
 800d5c4:	f400 5300 	and.w	r3, r0, #8192	@ 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800d5c8:	3c14      	subs	r4, #20
 800d5ca:	9308      	str	r3, [sp, #32]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d5cc:	9b06      	ldr	r3, [sp, #24]
  left = (u16_t)(p->tot_len - IP_HLEN);
 800d5ce:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d5d0:	00db      	lsls	r3, r3, #3
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	9307      	str	r3, [sp, #28]
  while (left) {
 800d5d6:	b90c      	cbnz	r4, 800d5dc <ip4_frag+0x78>
  return ERR_OK;
 800d5d8:	4620      	mov	r0, r4
 800d5da:	e7e7      	b.n	800d5ac <ip4_frag+0x48>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d5dc:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d5de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d5e2:	2114      	movs	r1, #20
 800d5e4:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d5e6:	42a3      	cmp	r3, r4
 800d5e8:	bf28      	it	cs
 800d5ea:	4623      	movcs	r3, r4
 800d5ec:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d5ee:	f7fa fb67 	bl	8007cc0 <pbuf_alloc>
    if (rambuf == NULL) {
 800d5f2:	4680      	mov	r8, r0
 800d5f4:	b910      	cbnz	r0, 800d5fc <ip4_frag+0x98>
  return ERR_MEM;
 800d5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5fa:	e7d7      	b.n	800d5ac <ip4_frag+0x48>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d5fc:	8943      	ldrh	r3, [r0, #10]
 800d5fe:	2b13      	cmp	r3, #19
 800d600:	d806      	bhi.n	800d610 <ip4_frag+0xac>
 800d602:	4b45      	ldr	r3, [pc, #276]	@ (800d718 <ip4_frag+0x1b4>)
 800d604:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800d608:	4946      	ldr	r1, [pc, #280]	@ (800d724 <ip4_frag+0x1c0>)
 800d60a:	4845      	ldr	r0, [pc, #276]	@ (800d720 <ip4_frag+0x1bc>)
 800d60c:	f000 fed4 	bl	800e3b8 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d610:	9b03      	ldr	r3, [sp, #12]
 800d612:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d616:	4619      	mov	r1, r3
 800d618:	3114      	adds	r1, #20
 800d61a:	f853 0b04 	ldr.w	r0, [r3], #4
 800d61e:	428b      	cmp	r3, r1
 800d620:	f842 0b04 	str.w	r0, [r2], #4
 800d624:	d1f9      	bne.n	800d61a <ip4_frag+0xb6>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d626:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 800d62a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    while (left_to_copy) {
 800d62e:	f1b9 0f00 	cmp.w	r9, #0
 800d632:	d040      	beq.n	800d6b6 <ip4_frag+0x152>
      u16_t plen = (u16_t)(p->len - poff);
 800d634:	896b      	ldrh	r3, [r5, #10]
 800d636:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d638:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 800d63a:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d63c:	d206      	bcs.n	800d64c <ip4_frag+0xe8>
 800d63e:	4b36      	ldr	r3, [pc, #216]	@ (800d718 <ip4_frag+0x1b4>)
 800d640:	f240 322d 	movw	r2, #813	@ 0x32d
 800d644:	4938      	ldr	r1, [pc, #224]	@ (800d728 <ip4_frag+0x1c4>)
 800d646:	4836      	ldr	r0, [pc, #216]	@ (800d720 <ip4_frag+0x1bc>)
 800d648:	f000 feb6 	bl	800e3b8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d64c:	454e      	cmp	r6, r9
 800d64e:	bf28      	it	cs
 800d650:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 800d652:	b916      	cbnz	r6, 800d65a <ip4_frag+0xf6>
        p = p->next;
 800d654:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 800d656:	2700      	movs	r7, #0
 800d658:	e7e9      	b.n	800d62e <ip4_frag+0xca>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d65a:	2005      	movs	r0, #5
 800d65c:	f7fa f828 	bl	80076b0 <memp_malloc>
      if (pcr == NULL) {
 800d660:	4603      	mov	r3, r0
 800d662:	b918      	cbnz	r0, 800d66c <ip4_frag+0x108>
        pbuf_free(rambuf);
 800d664:	4640      	mov	r0, r8
 800d666:	f7fa fac1 	bl	8007bec <pbuf_free>
        goto memerr;
 800d66a:	e7c4      	b.n	800d5f6 <ip4_frag+0x92>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d66c:	9601      	str	r6, [sp, #4]
 800d66e:	4631      	mov	r1, r6
 800d670:	686a      	ldr	r2, [r5, #4]
 800d672:	900a      	str	r0, [sp, #40]	@ 0x28
 800d674:	2000      	movs	r0, #0
 800d676:	443a      	add	r2, r7
 800d678:	9200      	str	r2, [sp, #0]
 800d67a:	2241      	movs	r2, #65	@ 0x41
 800d67c:	f7fa fa64 	bl	8007b48 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800d680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d682:	b920      	cbnz	r0, 800d68e <ip4_frag+0x12a>
  memp_free(MEMP_FRAG_PBUF, p);
 800d684:	4619      	mov	r1, r3
 800d686:	2005      	movs	r0, #5
 800d688:	f7fa f840 	bl	800770c <memp_free>
 800d68c:	e7ea      	b.n	800d664 <ip4_frag+0x100>
 800d68e:	e9cd 030a 	strd	r0, r3, [sp, #40]	@ 0x28
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d692:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 800d696:	4628      	mov	r0, r5
 800d698:	f7fa fc04 	bl	8007ea4 <pbuf_ref>
      pcr->original = p;
 800d69c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d69e:	4a23      	ldr	r2, [pc, #140]	@ (800d72c <ip4_frag+0x1c8>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d6a0:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 800d6a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6a6:	4640      	mov	r0, r8
      pcr->original = p;
 800d6a8:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d6aa:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 800d6ac:	f7fa fc16 	bl	8007edc <pbuf_cat>
      if (left_to_copy) {
 800d6b0:	f1b9 0f00 	cmp.w	r9, #0
 800d6b4:	d1ce      	bne.n	800d654 <ip4_frag+0xf0>
    tmp = (IP_OFFMASK & (ofo));
 800d6b6:	9b04      	ldr	r3, [sp, #16]
    poff = (u16_t)(poff + newpbuflen);
 800d6b8:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 800d6ba:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800d6be:	f8ba 3024 	ldrh.w	r3, [sl, #36]	@ 0x24
    poff = (u16_t)(poff + newpbuflen);
 800d6c2:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 800d6c4:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800d6c6:	42a3      	cmp	r3, r4
 800d6c8:	dd01      	ble.n	800d6ce <ip4_frag+0x16a>
 800d6ca:	9b08      	ldr	r3, [sp, #32]
 800d6cc:	b10b      	cbz	r3, 800d6d2 <ip4_frag+0x16e>
      tmp = tmp | IP_MF;
 800d6ce:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d6d2:	f7f9 fb75 	bl	8006dc0 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d6d6:	9b05      	ldr	r3, [sp, #20]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d6d8:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d6dc:	f103 0014 	add.w	r0, r3, #20
 800d6e0:	b280      	uxth	r0, r0
 800d6e2:	f7f9 fb6d 	bl	8006dc0 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800d6e6:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 800d6e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6ea:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d6ec:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 800d6f0:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 800d6f2:	f88b 300a 	strb.w	r3, [fp, #10]
 800d6f6:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 800d6fa:	f8da 3014 	ldr.w	r3, [sl, #20]
 800d6fe:	4798      	blx	r3
    pbuf_free(rambuf);
 800d700:	4640      	mov	r0, r8
 800d702:	f7fa fa73 	bl	8007bec <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d706:	9b05      	ldr	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 800d708:	9a06      	ldr	r2, [sp, #24]
    left = (u16_t)(left - fragsize);
 800d70a:	1ae3      	subs	r3, r4, r3
 800d70c:	b29c      	uxth	r4, r3
    ofo = (u16_t)(ofo + nfb);
 800d70e:	9b04      	ldr	r3, [sp, #16]
 800d710:	4413      	add	r3, r2
 800d712:	b29b      	uxth	r3, r3
 800d714:	9304      	str	r3, [sp, #16]
 800d716:	e75e      	b.n	800d5d6 <ip4_frag+0x72>
 800d718:	0801196c 	.word	0x0801196c
 800d71c:	08011ae6 	.word	0x08011ae6
 800d720:	0800f15a 	.word	0x0800f15a
 800d724:	08011b01 	.word	0x08011b01
 800d728:	08011b21 	.word	0x08011b21
 800d72c:	0800d15d 	.word	0x0800d15d

0800d730 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d730:	8943      	ldrh	r3, [r0, #10]
 800d732:	2b0e      	cmp	r3, #14
{
 800d734:	b570      	push	{r4, r5, r6, lr}
 800d736:	4604      	mov	r4, r0
 800d738:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800d73a:	d91a      	bls.n	800d772 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d73c:	7bc3      	ldrb	r3, [r0, #15]
 800d73e:	b91b      	cbnz	r3, 800d748 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800d740:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 800d744:	3301      	adds	r3, #1
 800d746:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d748:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d74a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800d74c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800d74e:	07d9      	lsls	r1, r3, #31
 800d750:	d50a      	bpl.n	800d768 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d752:	2b01      	cmp	r3, #1
 800d754:	d111      	bne.n	800d77a <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d756:	7843      	ldrb	r3, [r0, #1]
 800d758:	b933      	cbnz	r3, 800d768 <ethernet_input+0x38>
 800d75a:	7883      	ldrb	r3, [r0, #2]
 800d75c:	2b5e      	cmp	r3, #94	@ 0x5e
 800d75e:	d103      	bne.n	800d768 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d760:	7b63      	ldrb	r3, [r4, #13]
 800d762:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d766:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800d768:	2e08      	cmp	r6, #8
 800d76a:	d010      	beq.n	800d78e <ethernet_input+0x5e>
 800d76c:	f5b6 6fc1 	cmp.w	r6, #1544	@ 0x608
 800d770:	d01d      	beq.n	800d7ae <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800d772:	4620      	mov	r0, r4
 800d774:	f7fa fa3a 	bl	8007bec <pbuf_free>
  return ERR_OK;
 800d778:	e017      	b.n	800d7aa <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d77a:	2206      	movs	r2, #6
 800d77c:	4913      	ldr	r1, [pc, #76]	@ (800d7cc <ethernet_input+0x9c>)
 800d77e:	f000 ff05 	bl	800e58c <memcmp>
 800d782:	2800      	cmp	r0, #0
 800d784:	d1f0      	bne.n	800d768 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800d786:	7b63      	ldrb	r3, [r4, #13]
 800d788:	f043 0308 	orr.w	r3, r3, #8
 800d78c:	e7eb      	b.n	800d766 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d78e:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 800d792:	071a      	lsls	r2, r3, #28
 800d794:	d5ed      	bpl.n	800d772 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d796:	210e      	movs	r1, #14
 800d798:	4620      	mov	r0, r4
 800d79a:	f7fa f9f3 	bl	8007b84 <pbuf_remove_header>
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d1e7      	bne.n	800d772 <ethernet_input+0x42>
        ip4_input(p, netif);
 800d7a2:	4629      	mov	r1, r5
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f7ff faa9 	bl	800ccfc <ip4_input>
}
 800d7aa:	2000      	movs	r0, #0
 800d7ac:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d7ae:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 800d7b2:	071b      	lsls	r3, r3, #28
 800d7b4:	d5dd      	bpl.n	800d772 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d7b6:	210e      	movs	r1, #14
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f7fa f9e3 	bl	8007b84 <pbuf_remove_header>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d1d7      	bne.n	800d772 <ethernet_input+0x42>
        etharp_input(p, netif);
 800d7c2:	4629      	mov	r1, r5
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f7fe fefb 	bl	800c5c0 <etharp_input>
      break;
 800d7ca:	e7ee      	b.n	800d7aa <ethernet_input+0x7a>
 800d7cc:	08011b9c 	.word	0x08011b9c

0800d7d0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d4:	460d      	mov	r5, r1
 800d7d6:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d7d8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800d7dc:	4616      	mov	r6, r2
 800d7de:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800d7e0:	f7f9 faee 	bl	8006dc0 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d7e4:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800d7e6:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	f7fa f9c7 	bl	8007b7c <pbuf_add_header>
 800d7ee:	b9e0      	cbnz	r0, 800d82a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d7f0:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800d7f2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	600b      	str	r3, [r1, #0]
 800d7fa:	88bb      	ldrh	r3, [r7, #4]
 800d7fc:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d7fe:	6833      	ldr	r3, [r6, #0]
 800d800:	f8c1 3006 	str.w	r3, [r1, #6]
 800d804:	88b3      	ldrh	r3, [r6, #4]
 800d806:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d808:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d80c:	2b06      	cmp	r3, #6
 800d80e:	d006      	beq.n	800d81e <ethernet_output+0x4e>
 800d810:	4b08      	ldr	r3, [pc, #32]	@ (800d834 <ethernet_output+0x64>)
 800d812:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800d816:	4908      	ldr	r1, [pc, #32]	@ (800d838 <ethernet_output+0x68>)
 800d818:	4808      	ldr	r0, [pc, #32]	@ (800d83c <ethernet_output+0x6c>)
 800d81a:	f000 fdcd 	bl	800e3b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d81e:	69a3      	ldr	r3, [r4, #24]
 800d820:	4629      	mov	r1, r5
 800d822:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800d824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800d828:	4718      	bx	r3
}
 800d82a:	f06f 0001 	mvn.w	r0, #1
 800d82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d832:	bf00      	nop
 800d834:	08011b30 	.word	0x08011b30
 800d838:	08011b65 	.word	0x08011b65
 800d83c:	0800f15a 	.word	0x0800f15a

0800d840 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800d840:	b510      	push	{r4, lr}
 800d842:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800d844:	2200      	movs	r2, #0
{
 800d846:	4608      	mov	r0, r1
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800d848:	2104      	movs	r1, #4
 800d84a:	f7f5 fdc3 	bl	80033d4 <osMessageQueueNew>
 800d84e:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800d850:	fab0 f080 	clz	r0, r0
 800d854:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800d856:	4240      	negs	r0, r0
 800d858:	bd10      	pop	{r4, pc}

0800d85a <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800d85a:	b510      	push	{r4, lr}
 800d85c:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 800d85e:	6800      	ldr	r0, [r0, #0]
 800d860:	f7f5 fe80 	bl	8003564 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 800d864:	6820      	ldr	r0, [r4, #0]
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800d866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageQueueDelete(*mbox);
 800d86a:	f7f5 be7d 	b.w	8003568 <osMessageQueueDelete>

0800d86e <sys_mbox_trypost>:
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800d86e:	2300      	movs	r3, #0
{
 800d870:	b507      	push	{r0, r1, r2, lr}
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800d872:	461a      	mov	r2, r3
{
 800d874:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800d876:	6800      	ldr	r0, [r0, #0]
 800d878:	a901      	add	r1, sp, #4
 800d87a:	f7f5 fdf1 	bl	8003460 <osMessageQueuePut>
 800d87e:	3800      	subs	r0, #0
 800d880:	bf18      	it	ne
 800d882:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800d884:	4240      	negs	r0, r0
 800d886:	b003      	add	sp, #12
 800d888:	f85d fb04 	ldr.w	pc, [sp], #4

0800d88c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88e:	4615      	mov	r5, r2
 800d890:	4606      	mov	r6, r0
 800d892:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800d894:	f7f5 fb7e 	bl	8002f94 <osKernelGetTickCount>
 800d898:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 800d89a:	b155      	cbz	r5, 800d8b2 <sys_arch_mbox_fetch+0x26>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800d89c:	462b      	mov	r3, r5
 800d89e:	2200      	movs	r2, #0
 800d8a0:	4639      	mov	r1, r7
 800d8a2:	6830      	ldr	r0, [r6, #0]
 800d8a4:	f7f5 fe1e 	bl	80034e4 <osMessageQueueGet>
    if (status == osOK)
 800d8a8:	b958      	cbnz	r0, 800d8c2 <sys_arch_mbox_fetch+0x36>
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
 800d8aa:	f7f5 fb73 	bl	8002f94 <osKernelGetTickCount>
 800d8ae:	1b00      	subs	r0, r0, r4
#endif
  }
}
 800d8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800d8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b6:	462a      	mov	r2, r5
 800d8b8:	4639      	mov	r1, r7
 800d8ba:	6830      	ldr	r0, [r6, #0]
 800d8bc:	f7f5 fe12 	bl	80034e4 <osMessageQueueGet>
 800d8c0:	e7f3      	b.n	800d8aa <sys_arch_mbox_fetch+0x1e>
      return SYS_ARCH_TIMEOUT;
 800d8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c6:	e7f3      	b.n	800d8b0 <sys_arch_mbox_fetch+0x24>

0800d8c8 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800d8c8:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	6800      	ldr	r0, [r0, #0]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	f7f5 fe08 	bl	80034e4 <osMessageQueueGet>
 800d8d4:	3800      	subs	r0, #0
 800d8d6:	bf18      	it	ne
 800d8d8:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 800d8da:	4240      	negs	r0, r0
 800d8dc:	bd08      	pop	{r3, pc}

0800d8de <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
 800d8de:	6800      	ldr	r0, [r0, #0]
 800d8e0:	3800      	subs	r0, #0
 800d8e2:	bf18      	it	ne
 800d8e4:	2001      	movne	r0, #1
 800d8e6:	4770      	bx	lr

0800d8e8 <sys_mbox_set_invalid>:
    return 0;
  else
    return 1;
}
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	6003      	str	r3, [r0, #0]
 800d8ec:	4770      	bx	lr

0800d8ee <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800d8ee:	b538      	push	{r3, r4, r5, lr}
 800d8f0:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
{
 800d8f8:	460c      	mov	r4, r1
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 800d8fa:	f7f5 fc69 	bl	80031d0 <osSemaphoreNew>
 800d8fe:	6028      	str	r0, [r5, #0]
#endif

  if(*sem == NULL)
 800d900:	b130      	cbz	r0, 800d910 <sys_sem_new+0x22>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800d902:	b10c      	cbz	r4, 800d908 <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800d904:	2000      	movs	r0, #0
}
 800d906:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 800d908:	4621      	mov	r1, r4
 800d90a:	f7f5 fcb9 	bl	8003280 <osSemaphoreAcquire>
 800d90e:	e7f9      	b.n	800d904 <sys_sem_new+0x16>
    return ERR_MEM;
 800d910:	f04f 30ff 	mov.w	r0, #4294967295
 800d914:	e7f7      	b.n	800d906 <sys_sem_new+0x18>

0800d916 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800d916:	b570      	push	{r4, r5, r6, lr}
 800d918:	460e      	mov	r6, r1
 800d91a:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 800d91c:	f7f5 fb3a 	bl	8002f94 <osKernelGetTickCount>
 800d920:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 800d922:	b146      	cbz	r6, 800d936 <sys_arch_sem_wait+0x20>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 800d924:	4631      	mov	r1, r6
 800d926:	6828      	ldr	r0, [r5, #0]
 800d928:	f7f5 fcaa 	bl	8003280 <osSemaphoreAcquire>
 800d92c:	b958      	cbnz	r0, 800d946 <sys_arch_sem_wait+0x30>
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
 800d92e:	f7f5 fb31 	bl	8002f94 <osKernelGetTickCount>
 800d932:	1b00      	subs	r0, r0, r4
#endif
  }
}
 800d934:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 800d936:	f04f 31ff 	mov.w	r1, #4294967295
 800d93a:	6828      	ldr	r0, [r5, #0]
 800d93c:	f7f5 fca0 	bl	8003280 <osSemaphoreAcquire>
 800d940:	2800      	cmp	r0, #0
 800d942:	d1f8      	bne.n	800d936 <sys_arch_sem_wait+0x20>
 800d944:	e7f3      	b.n	800d92e <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800d946:	f04f 30ff 	mov.w	r0, #4294967295
 800d94a:	e7f3      	b.n	800d934 <sys_arch_sem_wait+0x1e>

0800d94c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800d94c:	6800      	ldr	r0, [r0, #0]
 800d94e:	f7f5 bcd3 	b.w	80032f8 <osSemaphoreRelease>

0800d952 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800d952:	6800      	ldr	r0, [r0, #0]
 800d954:	f7f5 bd1e 	b.w	8003394 <osSemaphoreDelete>

0800d958 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800d958:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800d95a:	3800      	subs	r0, #0
 800d95c:	bf18      	it	ne
 800d95e:	2001      	movne	r0, #1
 800d960:	4770      	bx	lr

0800d962 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800d962:	2300      	movs	r3, #0
 800d964:	6003      	str	r3, [r0, #0]
}
 800d966:	4770      	bx	lr

0800d968 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800d968:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800d96a:	2000      	movs	r0, #0
 800d96c:	f7f5 fb92 	bl	8003094 <osMutexNew>
 800d970:	4b01      	ldr	r3, [pc, #4]	@ (800d978 <sys_init+0x10>)
 800d972:	6018      	str	r0, [r3, #0]
#endif
}
 800d974:	bd08      	pop	{r3, pc}
 800d976:	bf00      	nop
 800d978:	20033554 	.word	0x20033554

0800d97c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800d97c:	b510      	push	{r4, lr}
 800d97e:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800d980:	2000      	movs	r0, #0
 800d982:	f7f5 fb87 	bl	8003094 <osMutexNew>
 800d986:	6020      	str	r0, [r4, #0]
#endif

  if(*mutex == NULL)
 800d988:	fab0 f080 	clz	r0, r0
 800d98c:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800d98e:	4240      	negs	r0, r0
 800d990:	bd10      	pop	{r4, pc}

0800d992 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800d992:	f04f 31ff 	mov.w	r1, #4294967295
 800d996:	6800      	ldr	r0, [r0, #0]
 800d998:	f7f5 bbbe 	b.w	8003118 <osMutexAcquire>

0800d99c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800d99c:	6800      	ldr	r0, [r0, #0]
 800d99e:	f7f5 bbeb 	b.w	8003178 <osMutexRelease>

0800d9a2 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800d9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9a4:	b08b      	sub	sp, #44	@ 0x2c
 800d9a6:	4615      	mov	r5, r2
 800d9a8:	4607      	mov	r7, r0
 800d9aa:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800d9ac:	2220      	movs	r2, #32
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	a802      	add	r0, sp, #8
{
 800d9b2:	461e      	mov	r6, r3
  const osThreadAttr_t attributes = {
 800d9b4:	f000 fdfa 	bl	800e5ac <memset>
 800d9b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800d9ba:	aa01      	add	r2, sp, #4
 800d9bc:	4629      	mov	r1, r5
 800d9be:	4620      	mov	r0, r4
  const osThreadAttr_t attributes = {
 800d9c0:	9701      	str	r7, [sp, #4]
 800d9c2:	9606      	str	r6, [sp, #24]
 800d9c4:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 800d9c6:	f7f5 faf9 	bl	8002fbc <osThreadNew>
#endif
}
 800d9ca:	b00b      	add	sp, #44	@ 0x2c
 800d9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d9d0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800d9d0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800d9d2:	4b04      	ldr	r3, [pc, #16]	@ (800d9e4 <sys_arch_protect+0x14>)
 800d9d4:	f04f 31ff 	mov.w	r1, #4294967295
 800d9d8:	6818      	ldr	r0, [r3, #0]
 800d9da:	f7f5 fb9d 	bl	8003118 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800d9de:	2001      	movs	r0, #1
 800d9e0:	bd08      	pop	{r3, pc}
 800d9e2:	bf00      	nop
 800d9e4:	20033554 	.word	0x20033554

0800d9e8 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800d9e8:	4b01      	ldr	r3, [pc, #4]	@ (800d9f0 <sys_arch_unprotect+0x8>)
 800d9ea:	6818      	ldr	r0, [r3, #0]
 800d9ec:	f7f5 bbc4 	b.w	8003178 <osMutexRelease>
 800d9f0:	20033554 	.word	0x20033554

0800d9f4 <mbedtls_ctr_drbg_init>:
/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 800d9f4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	f000 bdd7 	b.w	800e5ac <memset>

0800d9fe <mbedtls_des_init>:
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while( 0 )

void mbedtls_des_init( mbedtls_des_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_des_context ) );
 800d9fe:	2280      	movs	r2, #128	@ 0x80
 800da00:	2100      	movs	r1, #0
 800da02:	f000 bdd3 	b.w	800e5ac <memset>

0800da06 <mbedtls_des_free>:
}

void mbedtls_des_free( mbedtls_des_context *ctx )
{
    if( ctx == NULL )
 800da06:	b110      	cbz	r0, 800da0e <mbedtls_des_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_des_context ) );
 800da08:	2180      	movs	r1, #128	@ 0x80
 800da0a:	f000 bb05 	b.w	800e018 <mbedtls_platform_zeroize>
}
 800da0e:	4770      	bx	lr

0800da10 <mbedtls_des_setkey>:
    return( 0 );
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey( uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 800da10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da14:	680a      	ldr	r2, [r1, #0]
    /*
     * calculate subkeys
     */
    for( i = 0; i < 16; i++ )
    {
        if( i < 2 || i == 8 || i == 15 )
 800da16:	f44f 4701 	mov.w	r7, #33024	@ 0x8100
 800da1a:	684b      	ldr	r3, [r1, #4]
 800da1c:	ba12      	rev	r2, r2
        | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
 800da1e:	4cc5      	ldr	r4, [pc, #788]	@ (800dd34 <mbedtls_des_setkey+0x324>)
 800da20:	ba1b      	rev	r3, r3
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 800da22:	ea82 1113 	eor.w	r1, r2, r3, lsr #4
 800da26:	f001 310f 	and.w	r1, r1, #252645135	@ 0xf0f0f0f
 800da2a:	404a      	eors	r2, r1
 800da2c:	ea83 1301 	eor.w	r3, r3, r1, lsl #4
    T =  ((Y      ) ^ X) & 0x10101010;  X ^= T; Y ^= (T      );
 800da30:	ea82 0103 	eor.w	r1, r2, r3
 800da34:	f001 3110 	and.w	r1, r1, #269488144	@ 0x10101010
 800da38:	404a      	eors	r2, r1
 800da3a:	404b      	eors	r3, r1
        | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
 800da3c:	f3c2 5143 	ubfx	r1, r2, #21, #4
 800da40:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 800da44:	f002 010f 	and.w	r1, r2, #15
 800da48:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
        | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
 800da4c:	f3c2 6103 	ubfx	r1, r2, #24, #4
 800da50:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800da54:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
        | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
 800da58:	0f56      	lsrs	r6, r2, #29
 800da5a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800da5e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 800da62:	f3c2 2603 	ubfx	r6, r2, #8, #4
 800da66:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800da6a:	ea41 0186 	orr.w	r1, r1, r6, lsl #2
        | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
 800da6e:	f3c2 4603 	ubfx	r6, r2, #16, #4
 800da72:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800da76:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
        | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
 800da7a:	f3c2 1643 	ubfx	r6, r2, #5, #4
 800da7e:	f3c2 3243 	ubfx	r2, r2, #13, #4
 800da82:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800da86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da8a:	ea41 11c6 	orr.w	r1, r1, r6, lsl #7
        | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
 800da8e:	4caa      	ldr	r4, [pc, #680]	@ (800dd38 <mbedtls_des_setkey+0x328>)
 800da90:	0f1e      	lsrs	r6, r3, #28
 800da92:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
 800da96:	f3c3 5203 	ubfx	r2, r3, #20, #4
 800da9a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 800da9e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
        | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
 800daa2:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
        | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
 800daa6:	f3c3 6243 	ubfx	r2, r3, #25, #4
    X &= 0x0FFFFFFF;
 800daaa:	f021 4170 	bic.w	r1, r1, #4026531840	@ 0xf0000000
 800daae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dab2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 800dab6:	f3c3 0643 	ubfx	r6, r3, #1, #4
 800daba:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800dabe:	ea42 02c6 	orr.w	r2, r2, r6, lsl #3
 800dac2:	f3c3 2643 	ubfx	r6, r3, #9, #4
 800dac6:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800daca:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
        | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
 800dace:	f3c3 4643 	ubfx	r6, r3, #17, #4
 800dad2:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800dad6:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
        | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
 800dada:	f3c3 1603 	ubfx	r6, r3, #4, #4
 800dade:	f3c3 3303 	ubfx	r3, r3, #12, #4
 800dae2:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800dae6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    for( i = 0; i < 16; i++ )
 800daea:	2400      	movs	r4, #0
 800daec:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 800daf0:	f640 0608 	movw	r6, #2056	@ 0x808
 800daf4:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 800daf8:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800dafc:	1d05      	adds	r5, r0, #4
    Y &= 0x0FFFFFFF;
 800dafe:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
        if( i < 2 || i == 8 || i == 15 )
 800db02:	2c01      	cmp	r4, #1
 800db04:	dd04      	ble.n	800db10 <mbedtls_des_setkey+0x100>
 800db06:	fa27 f304 	lsr.w	r3, r7, r4
 800db0a:	07db      	lsls	r3, r3, #31
 800db0c:	f140 8108 	bpl.w	800dd20 <mbedtls_des_setkey+0x310>
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 800db10:	0ecb      	lsrs	r3, r1, #27
 800db12:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800db16:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 800db1a:	0ed3      	lsrs	r3, r2, #27
 800db1c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 800db20:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800db24:	ea4f 7801 	mov.w	r8, r1, lsl #28
 800db28:	010b      	lsls	r3, r1, #4
 800db2a:	f008 5880 	and.w	r8, r8, #268435456	@ 0x10000000
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 800db2e:	ea4f 2981 	mov.w	r9, r1, lsl #10
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800db32:	f003 5310 	and.w	r3, r3, #603979776	@ 0x24000000
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800db36:	ea4f 3e92 	mov.w	lr, r2, lsr #14
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 800db3a:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800db3e:	ea43 0308 	orr.w	r3, r3, r8
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800db42:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800db46:	ea43 0308 	orr.w	r3, r3, r8
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 800db4a:	ea4f 3881 	mov.w	r8, r1, lsl #14
 800db4e:	f008 6800 	and.w	r8, r8, #134217728	@ 0x8000000
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800db52:	ea43 0308 	orr.w	r3, r3, r8
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 800db56:	ea4f 4881 	mov.w	r8, r1, lsl #18
 800db5a:	f008 7802 	and.w	r8, r8, #34078720	@ 0x2080000
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800db5e:	ea43 0308 	orr.w	r3, r3, r8
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 800db62:	ea4f 1881 	mov.w	r8, r1, lsl #6
 800db66:	f008 7880 	and.w	r8, r8, #16777216	@ 0x1000000
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800db6a:	ea43 0308 	orr.w	r3, r3, r8
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 800db6e:	ea4f 2841 	mov.w	r8, r1, lsl #9
 800db72:	f408 1800 	and.w	r8, r8, #2097152	@ 0x200000
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800db76:	ea43 0308 	orr.w	r3, r3, r8
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 800db7a:	ea4f 0851 	mov.w	r8, r1, lsr #1
 800db7e:	f408 1880 	and.w	r8, r8, #1048576	@ 0x100000
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800db82:	ea43 0308 	orr.w	r3, r3, r8
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 800db86:	f409 2880 	and.w	r8, r9, #262144	@ 0x40000
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 800db8a:	f009 6900 	and.w	r9, r9, #134217728	@ 0x8000000
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800db8e:	ea43 0308 	orr.w	r3, r3, r8
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 800db92:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800db96:	f408 3800 	and.w	r8, r8, #131072	@ 0x20000
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800db9a:	ea43 0308 	orr.w	r3, r3, r8
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 800db9e:	ea4f 2891 	mov.w	r8, r1, lsr #10
 800dba2:	f408 3880 	and.w	r8, r8, #65536	@ 0x10000
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800dba6:	ea43 0308 	orr.w	r3, r3, r8
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 800dbaa:	ea4f 3852 	mov.w	r8, r2, lsr #13
 800dbae:	f408 5800 	and.w	r8, r8, #8192	@ 0x2000
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800dbb2:	ea43 0308 	orr.w	r3, r3, r8
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 800dbb6:	ea4f 1812 	mov.w	r8, r2, lsr #4
 800dbba:	f408 5880 	and.w	r8, r8, #4096	@ 0x1000
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800dbbe:	ea43 0308 	orr.w	r3, r3, r8
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 800dbc2:	ea4f 1882 	mov.w	r8, r2, lsl #6
 800dbc6:	f408 6800 	and.w	r8, r8, #2048	@ 0x800
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800dbca:	ea43 0308 	orr.w	r3, r3, r8
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 800dbce:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800dbd2:	f408 6880 	and.w	r8, r8, #1024	@ 0x400
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800dbd6:	ea43 0308 	orr.w	r3, r3, r8
 800dbda:	f40e 7800 	and.w	r8, lr, #512	@ 0x200
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 800dbde:	ea0e 0e06 	and.w	lr, lr, r6
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800dbe2:	ea43 0308 	orr.w	r3, r3, r8
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 800dbe6:	ea4f 1852 	mov.w	r8, r2, lsr #5
 800dbea:	f008 0820 	and.w	r8, r8, #32
 800dbee:	ea43 0308 	orr.w	r3, r3, r8
 800dbf2:	ea4f 2892 	mov.w	r8, r2, lsr #10
 800dbf6:	f008 0810 	and.w	r8, r8, #16
 800dbfa:	ea43 0308 	orr.w	r3, r3, r8
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 800dbfe:	f00c 0808 	and.w	r8, ip, #8
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 800dc02:	f00c 0c11 	and.w	ip, ip, #17
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 800dc06:	ea43 0308 	orr.w	r3, r3, r8
 800dc0a:	ea4f 4892 	mov.w	r8, r2, lsr #18
 800dc0e:	f008 0804 	and.w	r8, r8, #4
 800dc12:	ea43 0308 	orr.w	r3, r3, r8
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 800dc16:	ea4f 6892 	mov.w	r8, r2, lsr #26
 800dc1a:	f008 0802 	and.w	r8, r8, #2
 800dc1e:	ea43 0308 	orr.w	r3, r3, r8
 800dc22:	f3c2 6800 	ubfx	r8, r2, #24, #1
 800dc26:	ea43 0308 	orr.w	r3, r3, r8
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800dc2a:	ea4f 38c1 	mov.w	r8, r1, lsl #15
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800dc2e:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800dc32:	044b      	lsls	r3, r1, #17
 800dc34:	f008 5a00 	and.w	sl, r8, #536870912	@ 0x20000000
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 800dc38:	f408 3800 	and.w	r8, r8, #131072	@ 0x20000
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800dc3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dc40:	ea43 030a 	orr.w	r3, r3, sl
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dc44:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800dc48:	ea43 030a 	orr.w	r3, r3, sl
 800dc4c:	ea43 0309 	orr.w	r3, r3, r9
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 800dc50:	ea4f 5981 	mov.w	r9, r1, lsl #22
 800dc54:	f009 6980 	and.w	r9, r9, #67108864	@ 0x4000000
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dc58:	ea43 0309 	orr.w	r3, r3, r9
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 800dc5c:	ea4f 0991 	mov.w	r9, r1, lsr #2
 800dc60:	f009 7900 	and.w	r9, r9, #33554432	@ 0x2000000
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dc64:	ea43 0309 	orr.w	r3, r3, r9
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 800dc68:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800dc6c:	f009 7980 	and.w	r9, r9, #16777216	@ 0x1000000
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dc70:	ea43 0309 	orr.w	r3, r3, r9
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 800dc74:	ea4f 4901 	mov.w	r9, r1, lsl #16
 800dc78:	f409 1900 	and.w	r9, r9, #2097152	@ 0x200000
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dc7c:	ea43 0309 	orr.w	r3, r3, r9
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 800dc80:	ea4f 29c1 	mov.w	r9, r1, lsl #11
 800dc84:	f409 1980 	and.w	r9, r9, #1048576	@ 0x100000
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dc88:	ea43 0309 	orr.w	r3, r3, r9
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 800dc8c:	ea4f 09c1 	mov.w	r9, r1, lsl #3
 800dc90:	f409 2900 	and.w	r9, r9, #524288	@ 0x80000
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dc94:	ea43 0309 	orr.w	r3, r3, r9
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 800dc98:	ea4f 1991 	mov.w	r9, r1, lsr #6
 800dc9c:	f409 2980 	and.w	r9, r9, #262144	@ 0x40000
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dca0:	ea43 0309 	orr.w	r3, r3, r9
 800dca4:	ea43 0308 	orr.w	r3, r3, r8
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 800dca8:	ea4f 1811 	mov.w	r8, r1, lsr #4
 800dcac:	f408 3880 	and.w	r8, r8, #65536	@ 0x10000
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dcb0:	ea43 0308 	orr.w	r3, r3, r8
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 800dcb4:	ea4f 0892 	mov.w	r8, r2, lsr #2
 800dcb8:	f408 5800 	and.w	r8, r8, #8192	@ 0x2000
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dcbc:	ea43 0308 	orr.w	r3, r3, r8
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 800dcc0:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800dcc4:	f408 5880 	and.w	r8, r8, #4096	@ 0x1000
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dcc8:	ea43 0308 	orr.w	r3, r3, r8
 800dccc:	ea43 030e 	orr.w	r3, r3, lr
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 800dcd0:	ea4f 2e52 	mov.w	lr, r2, lsr #9
 800dcd4:	f40e 6e80 	and.w	lr, lr, #1024	@ 0x400
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800dcd8:	ea43 030e 	orr.w	r3, r3, lr
 800dcdc:	ea4f 1ec2 	mov.w	lr, r2, lsl #7
 800dce0:	f40e 7e80 	and.w	lr, lr, #256	@ 0x100
 800dce4:	ea43 030e 	orr.w	r3, r3, lr
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 800dce8:	ea4f 1ed2 	mov.w	lr, r2, lsr #7
 800dcec:	f00e 0e20 	and.w	lr, lr, #32
 800dcf0:	ea43 030e 	orr.w	r3, r3, lr
 800dcf4:	ea43 030c 	orr.w	r3, r3, ip
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800dcf8:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 800dcfc:	f00c 0c04 	and.w	ip, ip, #4
 800dd00:	ea43 030c 	orr.w	r3, r3, ip
 800dd04:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 800dd08:	f00c 0c02 	and.w	ip, ip, #2
 800dd0c:	ea43 030c 	orr.w	r3, r3, ip
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800dd10:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
    for( i = 0; i < 16; i++ )
 800dd14:	3401      	adds	r4, #1
 800dd16:	2c10      	cmp	r4, #16
 800dd18:	f47f aef3 	bne.w	800db02 <mbedtls_des_setkey+0xf2>
    }
}
 800dd1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 800dd20:	0e8b      	lsrs	r3, r1, #26
 800dd22:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800dd26:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 800dd2a:	0e93      	lsrs	r3, r2, #26
 800dd2c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800dd30:	e6f6      	b.n	800db20 <mbedtls_des_setkey+0x110>
 800dd32:	bf00      	nop
 800dd34:	08011be4 	.word	0x08011be4
 800dd38:	08011ba4 	.word	0x08011ba4

0800dd3c <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 800dd3c:	b508      	push	{r3, lr}
    mbedtls_des_setkey( ctx->sk, key );
 800dd3e:	f7ff fe67 	bl	800da10 <mbedtls_des_setkey>

    return( 0 );
}
 800dd42:	2000      	movs	r0, #0
 800dd44:	bd08      	pop	{r3, pc}

0800dd46 <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 800dd46:	b510      	push	{r4, lr}
    int i;

    mbedtls_des_setkey( ctx->sk, key );
 800dd48:	f7ff fe62 	bl	800da10 <mbedtls_des_setkey>

    for( i = 0; i < 16; i += 2 )
 800dd4c:	f100 0240 	add.w	r2, r0, #64	@ 0x40
    mbedtls_des_setkey( ctx->sk, key );
 800dd50:	4603      	mov	r3, r0
    {
        SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
 800dd52:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
    for( i = 0; i < 16; i += 2 )
 800dd54:	3008      	adds	r0, #8
        SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
 800dd56:	f850 1c08 	ldr.w	r1, [r0, #-8]
    for( i = 0; i < 16; i += 2 )
 800dd5a:	3b08      	subs	r3, #8
        SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
 800dd5c:	f840 4c08 	str.w	r4, [r0, #-8]
        SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
 800dd60:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
        SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
 800dd64:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
        SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
 800dd68:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800dd6c:	f840 4c04 	str.w	r4, [r0, #-4]
    for( i = 0; i < 16; i += 2 )
 800dd70:	4290      	cmp	r0, r2
        SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
 800dd72:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
    for( i = 0; i < 16; i += 2 )
 800dd76:	d1ec      	bne.n	800dd52 <mbedtls_des_setkey_dec+0xc>
    }

    return( 0 );
}
 800dd78:	2000      	movs	r0, #0
 800dd7a:	bd10      	pop	{r4, pc}

0800dd7c <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb( mbedtls_des_context *ctx,
                    const unsigned char input[8],
                    unsigned char output[8] )
{
 800dd7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd80:	680c      	ldr	r4, [r1, #0]
 800dd82:	684b      	ldr	r3, [r1, #4]
 800dd84:	ba24      	rev	r4, r4

    DES_IP( X, Y );

    for( i = 0; i < 8; i++ )
    {
        DES_ROUND( Y, X );
 800dd86:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800df4c <mbedtls_des_crypt_ecb+0x1d0>
 800dd8a:	ba1b      	rev	r3, r3
 800dd8c:	4e6a      	ldr	r6, [pc, #424]	@ (800df38 <mbedtls_des_crypt_ecb+0x1bc>)
 800dd8e:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 800df50 <mbedtls_des_crypt_ecb+0x1d4>
    DES_IP( X, Y );
 800dd92:	ea83 1114 	eor.w	r1, r3, r4, lsr #4
        DES_ROUND( Y, X );
 800dd96:	f8df c1bc 	ldr.w	ip, [pc, #444]	@ 800df54 <mbedtls_des_crypt_ecb+0x1d8>
 800dd9a:	4f68      	ldr	r7, [pc, #416]	@ (800df3c <mbedtls_des_crypt_ecb+0x1c0>)
    DES_IP( X, Y );
 800dd9c:	f001 310f 	and.w	r1, r1, #252645135	@ 0xf0f0f0f
 800dda0:	404b      	eors	r3, r1
 800dda2:	ea84 1101 	eor.w	r1, r4, r1, lsl #4
 800dda6:	ea83 4411 	eor.w	r4, r3, r1, lsr #16
 800ddaa:	b2a4      	uxth	r4, r4
 800ddac:	4063      	eors	r3, r4
 800ddae:	ea81 4104 	eor.w	r1, r1, r4, lsl #16
 800ddb2:	ea81 0493 	eor.w	r4, r1, r3, lsr #2
 800ddb6:	f004 3433 	and.w	r4, r4, #858993459	@ 0x33333333
 800ddba:	4061      	eors	r1, r4
 800ddbc:	ea83 0384 	eor.w	r3, r3, r4, lsl #2
 800ddc0:	ea81 2413 	eor.w	r4, r1, r3, lsr #8
 800ddc4:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 800ddc8:	4061      	eors	r1, r4
 800ddca:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
 800ddce:	ea81 74f3 	eor.w	r4, r1, r3, ror #31
 800ddd2:	f004 34aa 	and.w	r4, r4, #2863311530	@ 0xaaaaaaaa
 800ddd6:	4061      	eors	r1, r4
 800ddd8:	ea84 73f3 	eor.w	r3, r4, r3, ror #31
 800dddc:	f100 0410 	add.w	r4, r0, #16
 800dde0:	3090      	adds	r0, #144	@ 0x90
 800dde2:	ea4f 71f1 	mov.w	r1, r1, ror #31
    for( i = 0; i < 8; i++ )
 800dde6:	9001      	str	r0, [sp, #4]
        DES_ROUND( Y, X );
 800dde8:	f854 0c10 	ldr.w	r0, [r4, #-16]
    for( i = 0; i < 8; i++ )
 800ddec:	3410      	adds	r4, #16
        DES_ROUND( Y, X );
 800ddee:	4d54      	ldr	r5, [pc, #336]	@ (800df40 <mbedtls_des_crypt_ecb+0x1c4>)
 800ddf0:	ea83 0a00 	eor.w	sl, r3, r0
 800ddf4:	f854 0c1c 	ldr.w	r0, [r4, #-28]
 800ddf8:	ea80 1933 	eor.w	r9, r0, r3, ror #4
 800ddfc:	f00a 0b3f 	and.w	fp, sl, #63	@ 0x3f
 800de00:	f009 003f 	and.w	r0, r9, #63	@ 0x3f
 800de04:	f858 b02b 	ldr.w	fp, [r8, fp, lsl #2]
 800de08:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800de0c:	ea8b 0000 	eor.w	r0, fp, r0
 800de10:	f3ca 2b05 	ubfx	fp, sl, #8, #6
 800de14:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 800de18:	ea80 000b 	eor.w	r0, r0, fp
 800de1c:	f3ca 4b05 	ubfx	fp, sl, #16, #6
 800de20:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
 800de24:	ea80 0b0b 	eor.w	fp, r0, fp
 800de28:	f3ca 6005 	ubfx	r0, sl, #24, #6
 800de2c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800de30:	ea8b 0a00 	eor.w	sl, fp, r0
 800de34:	f3c9 2005 	ubfx	r0, r9, #8, #6
 800de38:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800de3c:	4d41      	ldr	r5, [pc, #260]	@ (800df44 <mbedtls_des_crypt_ecb+0x1c8>)
 800de3e:	ea8a 0a00 	eor.w	sl, sl, r0
 800de42:	f3c9 4005 	ubfx	r0, r9, #16, #6
 800de46:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800de4a:	4d3f      	ldr	r5, [pc, #252]	@ (800df48 <mbedtls_des_crypt_ecb+0x1cc>)
 800de4c:	ea8a 0a00 	eor.w	sl, sl, r0
 800de50:	f3c9 6005 	ubfx	r0, r9, #24, #6
 800de54:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800de58:	4d39      	ldr	r5, [pc, #228]	@ (800df40 <mbedtls_des_crypt_ecb+0x1c4>)
 800de5a:	ea8a 0000 	eor.w	r0, sl, r0
 800de5e:	4041      	eors	r1, r0
        DES_ROUND( X, Y );
 800de60:	f854 0c18 	ldr.w	r0, [r4, #-24]
 800de64:	ea81 0a00 	eor.w	sl, r1, r0
 800de68:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800de6c:	ea80 1931 	eor.w	r9, r0, r1, ror #4
 800de70:	f00a 003f 	and.w	r0, sl, #63	@ 0x3f
 800de74:	f3ca 2b05 	ubfx	fp, sl, #8, #6
 800de78:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800de7c:	4058      	eors	r0, r3
 800de7e:	f85e 302b 	ldr.w	r3, [lr, fp, lsl #2]
 800de82:	4058      	eors	r0, r3
 800de84:	f3ca 4305 	ubfx	r3, sl, #16, #6
 800de88:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 800de8c:	4043      	eors	r3, r0
 800de8e:	f3ca 6005 	ubfx	r0, sl, #24, #6
 800de92:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800de96:	4058      	eors	r0, r3
 800de98:	f009 033f 	and.w	r3, r9, #63	@ 0x3f
 800de9c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800dea0:	4058      	eors	r0, r3
 800dea2:	f3c9 2305 	ubfx	r3, r9, #8, #6
 800dea6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800deaa:	4d26      	ldr	r5, [pc, #152]	@ (800df44 <mbedtls_des_crypt_ecb+0x1c8>)
 800deac:	4058      	eors	r0, r3
 800deae:	f3c9 4305 	ubfx	r3, r9, #16, #6
 800deb2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800deb6:	4d24      	ldr	r5, [pc, #144]	@ (800df48 <mbedtls_des_crypt_ecb+0x1cc>)
 800deb8:	4043      	eors	r3, r0
 800deba:	f3c9 6005 	ubfx	r0, r9, #24, #6
 800debe:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800dec2:	4043      	eors	r3, r0
    for( i = 0; i < 8; i++ )
 800dec4:	9801      	ldr	r0, [sp, #4]
 800dec6:	4284      	cmp	r4, r0
 800dec8:	d18e      	bne.n	800dde8 <mbedtls_des_crypt_ecb+0x6c>
    }

    DES_FP( Y, X );
 800deca:	ea81 0073 	eor.w	r0, r1, r3, ror #1
 800dece:	f000 30aa 	and.w	r0, r0, #2863311530	@ 0xaaaaaaaa
 800ded2:	4041      	eors	r1, r0
 800ded4:	ea80 0373 	eor.w	r3, r0, r3, ror #1
 800ded8:	ea4f 0171 	mov.w	r1, r1, ror #1
 800dedc:	ea83 2011 	eor.w	r0, r3, r1, lsr #8
 800dee0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 800dee4:	4043      	eors	r3, r0
 800dee6:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 800deea:	ea83 0091 	eor.w	r0, r3, r1, lsr #2
 800deee:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 800def2:	4043      	eors	r3, r0
 800def4:	ea81 0180 	eor.w	r1, r1, r0, lsl #2
 800def8:	ea81 4013 	eor.w	r0, r1, r3, lsr #16
 800defc:	b280      	uxth	r0, r0
 800defe:	4041      	eors	r1, r0
 800df00:	ea83 4300 	eor.w	r3, r3, r0, lsl #16
 800df04:	ea81 1013 	eor.w	r0, r1, r3, lsr #4
 800df08:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 800df0c:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
 800df10:	4041      	eors	r1, r0

    PUT_UINT32_BE( Y, output, 0 );
 800df12:	0e18      	lsrs	r0, r3, #24
 800df14:	70d3      	strb	r3, [r2, #3]
    PUT_UINT32_BE( X, output, 4 );
 800df16:	71d1      	strb	r1, [r2, #7]
    PUT_UINT32_BE( Y, output, 0 );
 800df18:	7010      	strb	r0, [r2, #0]
 800df1a:	0c18      	lsrs	r0, r3, #16
 800df1c:	7050      	strb	r0, [r2, #1]
 800df1e:	0a18      	lsrs	r0, r3, #8
    PUT_UINT32_BE( X, output, 4 );
 800df20:	0e0b      	lsrs	r3, r1, #24
    PUT_UINT32_BE( Y, output, 0 );
 800df22:	7090      	strb	r0, [r2, #2]

    return( 0 );
}
 800df24:	2000      	movs	r0, #0
    PUT_UINT32_BE( X, output, 4 );
 800df26:	7113      	strb	r3, [r2, #4]
 800df28:	0c0b      	lsrs	r3, r1, #16
 800df2a:	7153      	strb	r3, [r2, #5]
 800df2c:	0a0b      	lsrs	r3, r1, #8
 800df2e:	7193      	strb	r3, [r2, #6]
}
 800df30:	b003      	add	sp, #12
 800df32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df36:	bf00      	nop
 800df38:	08011d24 	.word	0x08011d24
 800df3c:	08012224 	.word	0x08012224
 800df40:	08011f24 	.word	0x08011f24
 800df44:	08012124 	.word	0x08012124
 800df48:	08012324 	.word	0x08012324
 800df4c:	08011c24 	.word	0x08011c24
 800df50:	08011e24 	.word	0x08011e24
 800df54:	08012024 	.word	0x08012024

0800df58 <mbedtls_des_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[8],
                    const unsigned char *input,
                    unsigned char *output )
{
 800df58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800df5c:	4614      	mov	r4, r2
 800df5e:	4606      	mov	r6, r0
 800df60:	461d      	mov	r5, r3
    int i;
    unsigned char temp[8];

    if( length % 8 )
 800df62:	0760      	lsls	r0, r4, #29
{
 800df64:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    if( length % 8 )
 800df68:	d141      	bne.n	800dfee <mbedtls_des_crypt_cbc+0x96>
        return( MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH );

    if( mode == MBEDTLS_DES_ENCRYPT )
 800df6a:	2901      	cmp	r1, #1
 800df6c:	eb03 0704 	add.w	r7, r3, r4
 800df70:	d03a      	beq.n	800dfe8 <mbedtls_des_crypt_cbc+0x90>
 800df72:	461c      	mov	r4, r3
            length -= 8;
        }
    }
    else /* MBEDTLS_DES_DECRYPT */
    {
        while( length > 0 )
 800df74:	42bc      	cmp	r4, r7
 800df76:	d033      	beq.n	800dfe0 <mbedtls_des_crypt_cbc+0x88>
        {
            memcpy( temp, input, 8 );
 800df78:	6820      	ldr	r0, [r4, #0]
 800df7a:	466b      	mov	r3, sp
 800df7c:	6861      	ldr	r1, [r4, #4]
 800df7e:	c303      	stmia	r3!, {r0, r1}
            mbedtls_des_crypt_ecb( ctx, input, output );
 800df80:	4621      	mov	r1, r4
 800df82:	4630      	mov	r0, r6
 800df84:	f7ff fefa 	bl	800dd7c <mbedtls_des_crypt_ecb>

            for( i = 0; i < 8; i++ )
 800df88:	1e53      	subs	r3, r2, #1
 800df8a:	1e68      	subs	r0, r5, #1
 800df8c:	f102 0c07 	add.w	ip, r2, #7
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800df90:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800df94:	f810 ef01 	ldrb.w	lr, [r0, #1]!
            for( i = 0; i < 8; i++ )
 800df98:	4563      	cmp	r3, ip
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800df9a:	ea81 010e 	eor.w	r1, r1, lr
 800df9e:	7019      	strb	r1, [r3, #0]
            for( i = 0; i < 8; i++ )
 800dfa0:	d1f6      	bne.n	800df90 <mbedtls_des_crypt_cbc+0x38>

            memcpy( iv, temp, 8 );
 800dfa2:	466b      	mov	r3, sp

            input  += 8;
 800dfa4:	3408      	adds	r4, #8
            output += 8;
 800dfa6:	3208      	adds	r2, #8
            memcpy( iv, temp, 8 );
 800dfa8:	cb03      	ldmia	r3!, {r0, r1}
 800dfaa:	6028      	str	r0, [r5, #0]
 800dfac:	6069      	str	r1, [r5, #4]
            length -= 8;
 800dfae:	e7e1      	b.n	800df74 <mbedtls_des_crypt_cbc+0x1c>
            for( i = 0; i < 8; i++ )
 800dfb0:	2100      	movs	r1, #0
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800dfb2:	5c43      	ldrb	r3, [r0, r1]
 800dfb4:	f815 c001 	ldrb.w	ip, [r5, r1]
 800dfb8:	ea83 030c 	eor.w	r3, r3, ip
 800dfbc:	5453      	strb	r3, [r2, r1]
            for( i = 0; i < 8; i++ )
 800dfbe:	3101      	adds	r1, #1
 800dfc0:	2908      	cmp	r1, #8
 800dfc2:	d1f6      	bne.n	800dfb2 <mbedtls_des_crypt_cbc+0x5a>
            mbedtls_des_crypt_ecb( ctx, output, output );
 800dfc4:	4611      	mov	r1, r2
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f7ff fed8 	bl	800dd7c <mbedtls_des_crypt_ecb>
            memcpy( iv, output, 8 );
 800dfcc:	6813      	ldr	r3, [r2, #0]
            length -= 8;
 800dfce:	3c08      	subs	r4, #8
            memcpy( iv, output, 8 );
 800dfd0:	602b      	str	r3, [r5, #0]
 800dfd2:	6853      	ldr	r3, [r2, #4]
 800dfd4:	606b      	str	r3, [r5, #4]
            length -= 8;
 800dfd6:	1b38      	subs	r0, r7, r4
 800dfd8:	eba8 0204 	sub.w	r2, r8, r4
        while( length > 0 )
 800dfdc:	2c00      	cmp	r4, #0
 800dfde:	d1e7      	bne.n	800dfb0 <mbedtls_des_crypt_cbc+0x58>
        }
    }

    return( 0 );
 800dfe0:	2000      	movs	r0, #0
}
 800dfe2:	b002      	add	sp, #8
 800dfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfe8:	eb02 0804 	add.w	r8, r2, r4
 800dfec:	e7f3      	b.n	800dfd6 <mbedtls_des_crypt_cbc+0x7e>
        return( MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH );
 800dfee:	f06f 0031 	mvn.w	r0, #49	@ 0x31
 800dff2:	e7f6      	b.n	800dfe2 <mbedtls_des_crypt_cbc+0x8a>

0800dff4 <mbedtls_entropy_init>:
#endif

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 800dff4:	b538      	push	{r3, r4, r5, lr}
    ctx->source_count = 0;
 800dff6:	2500      	movs	r5, #0
{
 800dff8:	4604      	mov	r4, r0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 800dffa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800dffe:	30e4      	adds	r0, #228	@ 0xe4
    ctx->source_count = 0;
 800e000:	f840 5c04 	str.w	r5, [r0, #-4]
    memset( ctx->source, 0, sizeof( ctx->source ) );
 800e004:	4629      	mov	r1, r5
 800e006:	f000 fad1 	bl	800e5ac <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 800e00a:	4620      	mov	r0, r4
 800e00c:	f840 5b08 	str.w	r5, [r0], #8
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
    ctx->initial_entropy_run = 0;
#endif
#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */
}
 800e010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_sha512_init( &ctx->accumulator );
 800e014:	f000 b808 	b.w	800e028 <mbedtls_sha512_init>

0800e018 <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
 800e018:	4b02      	ldr	r3, [pc, #8]	@ (800e024 <mbedtls_platform_zeroize+0xc>)
{
 800e01a:	460a      	mov	r2, r1
    memset_func( buf, 0, len );
 800e01c:	2100      	movs	r1, #0
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4718      	bx	r3
 800e022:	bf00      	nop
 800e024:	20000040 	.word	0x20000040

0800e028 <mbedtls_sha512_init>:

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 800e028:	22d8      	movs	r2, #216	@ 0xd8
 800e02a:	2100      	movs	r1, #0
 800e02c:	f000 babe 	b.w	800e5ac <memset>

0800e030 <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 800e030:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e034:	2100      	movs	r1, #0
 800e036:	f000 bab9 	b.w	800e5ac <memset>

0800e03a <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 800e03a:	22d0      	movs	r2, #208	@ 0xd0
 800e03c:	2100      	movs	r1, #0
 800e03e:	f000 bab5 	b.w	800e5ac <memset>

0800e042 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 800e042:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800e046:	2100      	movs	r1, #0
 800e048:	f000 bab0 	b.w	800e5ac <memset>

0800e04c <malloc>:
 800e04c:	4b02      	ldr	r3, [pc, #8]	@ (800e058 <malloc+0xc>)
 800e04e:	4601      	mov	r1, r0
 800e050:	6818      	ldr	r0, [r3, #0]
 800e052:	f000 b825 	b.w	800e0a0 <_malloc_r>
 800e056:	bf00      	nop
 800e058:	20000050 	.word	0x20000050

0800e05c <sbrk_aligned>:
 800e05c:	b570      	push	{r4, r5, r6, lr}
 800e05e:	4e0f      	ldr	r6, [pc, #60]	@ (800e09c <sbrk_aligned+0x40>)
 800e060:	460c      	mov	r4, r1
 800e062:	6831      	ldr	r1, [r6, #0]
 800e064:	4605      	mov	r5, r0
 800e066:	b911      	cbnz	r1, 800e06e <sbrk_aligned+0x12>
 800e068:	f000 fb32 	bl	800e6d0 <_sbrk_r>
 800e06c:	6030      	str	r0, [r6, #0]
 800e06e:	4621      	mov	r1, r4
 800e070:	4628      	mov	r0, r5
 800e072:	f000 fb2d 	bl	800e6d0 <_sbrk_r>
 800e076:	1c43      	adds	r3, r0, #1
 800e078:	d103      	bne.n	800e082 <sbrk_aligned+0x26>
 800e07a:	f04f 34ff 	mov.w	r4, #4294967295
 800e07e:	4620      	mov	r0, r4
 800e080:	bd70      	pop	{r4, r5, r6, pc}
 800e082:	1cc4      	adds	r4, r0, #3
 800e084:	f024 0403 	bic.w	r4, r4, #3
 800e088:	42a0      	cmp	r0, r4
 800e08a:	d0f8      	beq.n	800e07e <sbrk_aligned+0x22>
 800e08c:	1a21      	subs	r1, r4, r0
 800e08e:	4628      	mov	r0, r5
 800e090:	f000 fb1e 	bl	800e6d0 <_sbrk_r>
 800e094:	3001      	adds	r0, #1
 800e096:	d1f2      	bne.n	800e07e <sbrk_aligned+0x22>
 800e098:	e7ef      	b.n	800e07a <sbrk_aligned+0x1e>
 800e09a:	bf00      	nop
 800e09c:	20033558 	.word	0x20033558

0800e0a0 <_malloc_r>:
 800e0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0a4:	1ccd      	adds	r5, r1, #3
 800e0a6:	f025 0503 	bic.w	r5, r5, #3
 800e0aa:	3508      	adds	r5, #8
 800e0ac:	2d0c      	cmp	r5, #12
 800e0ae:	bf38      	it	cc
 800e0b0:	250c      	movcc	r5, #12
 800e0b2:	2d00      	cmp	r5, #0
 800e0b4:	4606      	mov	r6, r0
 800e0b6:	db01      	blt.n	800e0bc <_malloc_r+0x1c>
 800e0b8:	42a9      	cmp	r1, r5
 800e0ba:	d904      	bls.n	800e0c6 <_malloc_r+0x26>
 800e0bc:	230c      	movs	r3, #12
 800e0be:	6033      	str	r3, [r6, #0]
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e19c <_malloc_r+0xfc>
 800e0ca:	f000 f869 	bl	800e1a0 <__malloc_lock>
 800e0ce:	f8d8 3000 	ldr.w	r3, [r8]
 800e0d2:	461c      	mov	r4, r3
 800e0d4:	bb44      	cbnz	r4, 800e128 <_malloc_r+0x88>
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	4630      	mov	r0, r6
 800e0da:	f7ff ffbf 	bl	800e05c <sbrk_aligned>
 800e0de:	1c43      	adds	r3, r0, #1
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	d158      	bne.n	800e196 <_malloc_r+0xf6>
 800e0e4:	f8d8 4000 	ldr.w	r4, [r8]
 800e0e8:	4627      	mov	r7, r4
 800e0ea:	2f00      	cmp	r7, #0
 800e0ec:	d143      	bne.n	800e176 <_malloc_r+0xd6>
 800e0ee:	2c00      	cmp	r4, #0
 800e0f0:	d04b      	beq.n	800e18a <_malloc_r+0xea>
 800e0f2:	6823      	ldr	r3, [r4, #0]
 800e0f4:	4639      	mov	r1, r7
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	eb04 0903 	add.w	r9, r4, r3
 800e0fc:	f000 fae8 	bl	800e6d0 <_sbrk_r>
 800e100:	4581      	cmp	r9, r0
 800e102:	d142      	bne.n	800e18a <_malloc_r+0xea>
 800e104:	6821      	ldr	r1, [r4, #0]
 800e106:	1a6d      	subs	r5, r5, r1
 800e108:	4629      	mov	r1, r5
 800e10a:	4630      	mov	r0, r6
 800e10c:	f7ff ffa6 	bl	800e05c <sbrk_aligned>
 800e110:	3001      	adds	r0, #1
 800e112:	d03a      	beq.n	800e18a <_malloc_r+0xea>
 800e114:	6823      	ldr	r3, [r4, #0]
 800e116:	442b      	add	r3, r5
 800e118:	6023      	str	r3, [r4, #0]
 800e11a:	f8d8 3000 	ldr.w	r3, [r8]
 800e11e:	685a      	ldr	r2, [r3, #4]
 800e120:	bb62      	cbnz	r2, 800e17c <_malloc_r+0xdc>
 800e122:	f8c8 7000 	str.w	r7, [r8]
 800e126:	e00f      	b.n	800e148 <_malloc_r+0xa8>
 800e128:	6822      	ldr	r2, [r4, #0]
 800e12a:	1b52      	subs	r2, r2, r5
 800e12c:	d420      	bmi.n	800e170 <_malloc_r+0xd0>
 800e12e:	2a0b      	cmp	r2, #11
 800e130:	d917      	bls.n	800e162 <_malloc_r+0xc2>
 800e132:	1961      	adds	r1, r4, r5
 800e134:	42a3      	cmp	r3, r4
 800e136:	6025      	str	r5, [r4, #0]
 800e138:	bf18      	it	ne
 800e13a:	6059      	strne	r1, [r3, #4]
 800e13c:	6863      	ldr	r3, [r4, #4]
 800e13e:	bf08      	it	eq
 800e140:	f8c8 1000 	streq.w	r1, [r8]
 800e144:	5162      	str	r2, [r4, r5]
 800e146:	604b      	str	r3, [r1, #4]
 800e148:	4630      	mov	r0, r6
 800e14a:	f000 f82f 	bl	800e1ac <__malloc_unlock>
 800e14e:	f104 000b 	add.w	r0, r4, #11
 800e152:	1d23      	adds	r3, r4, #4
 800e154:	f020 0007 	bic.w	r0, r0, #7
 800e158:	1ac2      	subs	r2, r0, r3
 800e15a:	bf1c      	itt	ne
 800e15c:	1a1b      	subne	r3, r3, r0
 800e15e:	50a3      	strne	r3, [r4, r2]
 800e160:	e7af      	b.n	800e0c2 <_malloc_r+0x22>
 800e162:	6862      	ldr	r2, [r4, #4]
 800e164:	42a3      	cmp	r3, r4
 800e166:	bf0c      	ite	eq
 800e168:	f8c8 2000 	streq.w	r2, [r8]
 800e16c:	605a      	strne	r2, [r3, #4]
 800e16e:	e7eb      	b.n	800e148 <_malloc_r+0xa8>
 800e170:	4623      	mov	r3, r4
 800e172:	6864      	ldr	r4, [r4, #4]
 800e174:	e7ae      	b.n	800e0d4 <_malloc_r+0x34>
 800e176:	463c      	mov	r4, r7
 800e178:	687f      	ldr	r7, [r7, #4]
 800e17a:	e7b6      	b.n	800e0ea <_malloc_r+0x4a>
 800e17c:	461a      	mov	r2, r3
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	42a3      	cmp	r3, r4
 800e182:	d1fb      	bne.n	800e17c <_malloc_r+0xdc>
 800e184:	2300      	movs	r3, #0
 800e186:	6053      	str	r3, [r2, #4]
 800e188:	e7de      	b.n	800e148 <_malloc_r+0xa8>
 800e18a:	230c      	movs	r3, #12
 800e18c:	6033      	str	r3, [r6, #0]
 800e18e:	4630      	mov	r0, r6
 800e190:	f000 f80c 	bl	800e1ac <__malloc_unlock>
 800e194:	e794      	b.n	800e0c0 <_malloc_r+0x20>
 800e196:	6005      	str	r5, [r0, #0]
 800e198:	e7d6      	b.n	800e148 <_malloc_r+0xa8>
 800e19a:	bf00      	nop
 800e19c:	2003355c 	.word	0x2003355c

0800e1a0 <__malloc_lock>:
 800e1a0:	4801      	ldr	r0, [pc, #4]	@ (800e1a8 <__malloc_lock+0x8>)
 800e1a2:	f000 badc 	b.w	800e75e <__retarget_lock_acquire_recursive>
 800e1a6:	bf00      	nop
 800e1a8:	200336a0 	.word	0x200336a0

0800e1ac <__malloc_unlock>:
 800e1ac:	4801      	ldr	r0, [pc, #4]	@ (800e1b4 <__malloc_unlock+0x8>)
 800e1ae:	f000 bad7 	b.w	800e760 <__retarget_lock_release_recursive>
 800e1b2:	bf00      	nop
 800e1b4:	200336a0 	.word	0x200336a0

0800e1b8 <rand>:
 800e1b8:	4b16      	ldr	r3, [pc, #88]	@ (800e214 <rand+0x5c>)
 800e1ba:	b510      	push	{r4, lr}
 800e1bc:	681c      	ldr	r4, [r3, #0]
 800e1be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e1c0:	b9b3      	cbnz	r3, 800e1f0 <rand+0x38>
 800e1c2:	2018      	movs	r0, #24
 800e1c4:	f7ff ff42 	bl	800e04c <malloc>
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	6320      	str	r0, [r4, #48]	@ 0x30
 800e1cc:	b920      	cbnz	r0, 800e1d8 <rand+0x20>
 800e1ce:	4b12      	ldr	r3, [pc, #72]	@ (800e218 <rand+0x60>)
 800e1d0:	4812      	ldr	r0, [pc, #72]	@ (800e21c <rand+0x64>)
 800e1d2:	2152      	movs	r1, #82	@ 0x52
 800e1d4:	f000 fad4 	bl	800e780 <__assert_func>
 800e1d8:	4911      	ldr	r1, [pc, #68]	@ (800e220 <rand+0x68>)
 800e1da:	4b12      	ldr	r3, [pc, #72]	@ (800e224 <rand+0x6c>)
 800e1dc:	e9c0 1300 	strd	r1, r3, [r0]
 800e1e0:	4b11      	ldr	r3, [pc, #68]	@ (800e228 <rand+0x70>)
 800e1e2:	6083      	str	r3, [r0, #8]
 800e1e4:	230b      	movs	r3, #11
 800e1e6:	8183      	strh	r3, [r0, #12]
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	2001      	movs	r0, #1
 800e1ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e1f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e1f2:	480e      	ldr	r0, [pc, #56]	@ (800e22c <rand+0x74>)
 800e1f4:	690b      	ldr	r3, [r1, #16]
 800e1f6:	694c      	ldr	r4, [r1, #20]
 800e1f8:	4a0d      	ldr	r2, [pc, #52]	@ (800e230 <rand+0x78>)
 800e1fa:	4358      	muls	r0, r3
 800e1fc:	fb02 0004 	mla	r0, r2, r4, r0
 800e200:	fba3 3202 	umull	r3, r2, r3, r2
 800e204:	3301      	adds	r3, #1
 800e206:	eb40 0002 	adc.w	r0, r0, r2
 800e20a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e20e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e212:	bd10      	pop	{r4, pc}
 800e214:	20000050 	.word	0x20000050
 800e218:	08012424 	.word	0x08012424
 800e21c:	0801243b 	.word	0x0801243b
 800e220:	abcd330e 	.word	0xabcd330e
 800e224:	e66d1234 	.word	0xe66d1234
 800e228:	0005deec 	.word	0x0005deec
 800e22c:	5851f42d 	.word	0x5851f42d
 800e230:	4c957f2d 	.word	0x4c957f2d

0800e234 <std>:
 800e234:	2300      	movs	r3, #0
 800e236:	b510      	push	{r4, lr}
 800e238:	4604      	mov	r4, r0
 800e23a:	e9c0 3300 	strd	r3, r3, [r0]
 800e23e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e242:	6083      	str	r3, [r0, #8]
 800e244:	8181      	strh	r1, [r0, #12]
 800e246:	6643      	str	r3, [r0, #100]	@ 0x64
 800e248:	81c2      	strh	r2, [r0, #14]
 800e24a:	6183      	str	r3, [r0, #24]
 800e24c:	4619      	mov	r1, r3
 800e24e:	2208      	movs	r2, #8
 800e250:	305c      	adds	r0, #92	@ 0x5c
 800e252:	f000 f9ab 	bl	800e5ac <memset>
 800e256:	4b0d      	ldr	r3, [pc, #52]	@ (800e28c <std+0x58>)
 800e258:	6263      	str	r3, [r4, #36]	@ 0x24
 800e25a:	4b0d      	ldr	r3, [pc, #52]	@ (800e290 <std+0x5c>)
 800e25c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e25e:	4b0d      	ldr	r3, [pc, #52]	@ (800e294 <std+0x60>)
 800e260:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e262:	4b0d      	ldr	r3, [pc, #52]	@ (800e298 <std+0x64>)
 800e264:	6323      	str	r3, [r4, #48]	@ 0x30
 800e266:	4b0d      	ldr	r3, [pc, #52]	@ (800e29c <std+0x68>)
 800e268:	6224      	str	r4, [r4, #32]
 800e26a:	429c      	cmp	r4, r3
 800e26c:	d006      	beq.n	800e27c <std+0x48>
 800e26e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e272:	4294      	cmp	r4, r2
 800e274:	d002      	beq.n	800e27c <std+0x48>
 800e276:	33d0      	adds	r3, #208	@ 0xd0
 800e278:	429c      	cmp	r4, r3
 800e27a:	d105      	bne.n	800e288 <std+0x54>
 800e27c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e284:	f000 ba6a 	b.w	800e75c <__retarget_lock_init_recursive>
 800e288:	bd10      	pop	{r4, pc}
 800e28a:	bf00      	nop
 800e28c:	0800e3dd 	.word	0x0800e3dd
 800e290:	0800e3ff 	.word	0x0800e3ff
 800e294:	0800e437 	.word	0x0800e437
 800e298:	0800e45b 	.word	0x0800e45b
 800e29c:	20033560 	.word	0x20033560

0800e2a0 <stdio_exit_handler>:
 800e2a0:	4a02      	ldr	r2, [pc, #8]	@ (800e2ac <stdio_exit_handler+0xc>)
 800e2a2:	4903      	ldr	r1, [pc, #12]	@ (800e2b0 <stdio_exit_handler+0x10>)
 800e2a4:	4803      	ldr	r0, [pc, #12]	@ (800e2b4 <stdio_exit_handler+0x14>)
 800e2a6:	f000 b869 	b.w	800e37c <_fwalk_sglue>
 800e2aa:	bf00      	nop
 800e2ac:	20000044 	.word	0x20000044
 800e2b0:	0800eef9 	.word	0x0800eef9
 800e2b4:	20000054 	.word	0x20000054

0800e2b8 <cleanup_stdio>:
 800e2b8:	6841      	ldr	r1, [r0, #4]
 800e2ba:	4b0c      	ldr	r3, [pc, #48]	@ (800e2ec <cleanup_stdio+0x34>)
 800e2bc:	4299      	cmp	r1, r3
 800e2be:	b510      	push	{r4, lr}
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	d001      	beq.n	800e2c8 <cleanup_stdio+0x10>
 800e2c4:	f000 fe18 	bl	800eef8 <_fflush_r>
 800e2c8:	68a1      	ldr	r1, [r4, #8]
 800e2ca:	4b09      	ldr	r3, [pc, #36]	@ (800e2f0 <cleanup_stdio+0x38>)
 800e2cc:	4299      	cmp	r1, r3
 800e2ce:	d002      	beq.n	800e2d6 <cleanup_stdio+0x1e>
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	f000 fe11 	bl	800eef8 <_fflush_r>
 800e2d6:	68e1      	ldr	r1, [r4, #12]
 800e2d8:	4b06      	ldr	r3, [pc, #24]	@ (800e2f4 <cleanup_stdio+0x3c>)
 800e2da:	4299      	cmp	r1, r3
 800e2dc:	d004      	beq.n	800e2e8 <cleanup_stdio+0x30>
 800e2de:	4620      	mov	r0, r4
 800e2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2e4:	f000 be08 	b.w	800eef8 <_fflush_r>
 800e2e8:	bd10      	pop	{r4, pc}
 800e2ea:	bf00      	nop
 800e2ec:	20033560 	.word	0x20033560
 800e2f0:	200335c8 	.word	0x200335c8
 800e2f4:	20033630 	.word	0x20033630

0800e2f8 <global_stdio_init.part.0>:
 800e2f8:	b510      	push	{r4, lr}
 800e2fa:	4b0b      	ldr	r3, [pc, #44]	@ (800e328 <global_stdio_init.part.0+0x30>)
 800e2fc:	4c0b      	ldr	r4, [pc, #44]	@ (800e32c <global_stdio_init.part.0+0x34>)
 800e2fe:	4a0c      	ldr	r2, [pc, #48]	@ (800e330 <global_stdio_init.part.0+0x38>)
 800e300:	601a      	str	r2, [r3, #0]
 800e302:	4620      	mov	r0, r4
 800e304:	2200      	movs	r2, #0
 800e306:	2104      	movs	r1, #4
 800e308:	f7ff ff94 	bl	800e234 <std>
 800e30c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e310:	2201      	movs	r2, #1
 800e312:	2109      	movs	r1, #9
 800e314:	f7ff ff8e 	bl	800e234 <std>
 800e318:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e31c:	2202      	movs	r2, #2
 800e31e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e322:	2112      	movs	r1, #18
 800e324:	f7ff bf86 	b.w	800e234 <std>
 800e328:	20033698 	.word	0x20033698
 800e32c:	20033560 	.word	0x20033560
 800e330:	0800e2a1 	.word	0x0800e2a1

0800e334 <__sfp_lock_acquire>:
 800e334:	4801      	ldr	r0, [pc, #4]	@ (800e33c <__sfp_lock_acquire+0x8>)
 800e336:	f000 ba12 	b.w	800e75e <__retarget_lock_acquire_recursive>
 800e33a:	bf00      	nop
 800e33c:	200336a1 	.word	0x200336a1

0800e340 <__sfp_lock_release>:
 800e340:	4801      	ldr	r0, [pc, #4]	@ (800e348 <__sfp_lock_release+0x8>)
 800e342:	f000 ba0d 	b.w	800e760 <__retarget_lock_release_recursive>
 800e346:	bf00      	nop
 800e348:	200336a1 	.word	0x200336a1

0800e34c <__sinit>:
 800e34c:	b510      	push	{r4, lr}
 800e34e:	4604      	mov	r4, r0
 800e350:	f7ff fff0 	bl	800e334 <__sfp_lock_acquire>
 800e354:	6a23      	ldr	r3, [r4, #32]
 800e356:	b11b      	cbz	r3, 800e360 <__sinit+0x14>
 800e358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e35c:	f7ff bff0 	b.w	800e340 <__sfp_lock_release>
 800e360:	4b04      	ldr	r3, [pc, #16]	@ (800e374 <__sinit+0x28>)
 800e362:	6223      	str	r3, [r4, #32]
 800e364:	4b04      	ldr	r3, [pc, #16]	@ (800e378 <__sinit+0x2c>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d1f5      	bne.n	800e358 <__sinit+0xc>
 800e36c:	f7ff ffc4 	bl	800e2f8 <global_stdio_init.part.0>
 800e370:	e7f2      	b.n	800e358 <__sinit+0xc>
 800e372:	bf00      	nop
 800e374:	0800e2b9 	.word	0x0800e2b9
 800e378:	20033698 	.word	0x20033698

0800e37c <_fwalk_sglue>:
 800e37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e380:	4607      	mov	r7, r0
 800e382:	4688      	mov	r8, r1
 800e384:	4614      	mov	r4, r2
 800e386:	2600      	movs	r6, #0
 800e388:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e38c:	f1b9 0901 	subs.w	r9, r9, #1
 800e390:	d505      	bpl.n	800e39e <_fwalk_sglue+0x22>
 800e392:	6824      	ldr	r4, [r4, #0]
 800e394:	2c00      	cmp	r4, #0
 800e396:	d1f7      	bne.n	800e388 <_fwalk_sglue+0xc>
 800e398:	4630      	mov	r0, r6
 800e39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e39e:	89ab      	ldrh	r3, [r5, #12]
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d907      	bls.n	800e3b4 <_fwalk_sglue+0x38>
 800e3a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	d003      	beq.n	800e3b4 <_fwalk_sglue+0x38>
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	47c0      	blx	r8
 800e3b2:	4306      	orrs	r6, r0
 800e3b4:	3568      	adds	r5, #104	@ 0x68
 800e3b6:	e7e9      	b.n	800e38c <_fwalk_sglue+0x10>

0800e3b8 <iprintf>:
 800e3b8:	b40f      	push	{r0, r1, r2, r3}
 800e3ba:	b507      	push	{r0, r1, r2, lr}
 800e3bc:	4906      	ldr	r1, [pc, #24]	@ (800e3d8 <iprintf+0x20>)
 800e3be:	ab04      	add	r3, sp, #16
 800e3c0:	6808      	ldr	r0, [r1, #0]
 800e3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3c6:	6881      	ldr	r1, [r0, #8]
 800e3c8:	9301      	str	r3, [sp, #4]
 800e3ca:	f000 fa6b 	bl	800e8a4 <_vfiprintf_r>
 800e3ce:	b003      	add	sp, #12
 800e3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3d4:	b004      	add	sp, #16
 800e3d6:	4770      	bx	lr
 800e3d8:	20000050 	.word	0x20000050

0800e3dc <__sread>:
 800e3dc:	b510      	push	{r4, lr}
 800e3de:	460c      	mov	r4, r1
 800e3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3e4:	f000 f962 	bl	800e6ac <_read_r>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	bfab      	itete	ge
 800e3ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e3ee:	89a3      	ldrhlt	r3, [r4, #12]
 800e3f0:	181b      	addge	r3, r3, r0
 800e3f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e3f6:	bfac      	ite	ge
 800e3f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e3fa:	81a3      	strhlt	r3, [r4, #12]
 800e3fc:	bd10      	pop	{r4, pc}

0800e3fe <__swrite>:
 800e3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e402:	461f      	mov	r7, r3
 800e404:	898b      	ldrh	r3, [r1, #12]
 800e406:	05db      	lsls	r3, r3, #23
 800e408:	4605      	mov	r5, r0
 800e40a:	460c      	mov	r4, r1
 800e40c:	4616      	mov	r6, r2
 800e40e:	d505      	bpl.n	800e41c <__swrite+0x1e>
 800e410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e414:	2302      	movs	r3, #2
 800e416:	2200      	movs	r2, #0
 800e418:	f000 f936 	bl	800e688 <_lseek_r>
 800e41c:	89a3      	ldrh	r3, [r4, #12]
 800e41e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e422:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e426:	81a3      	strh	r3, [r4, #12]
 800e428:	4632      	mov	r2, r6
 800e42a:	463b      	mov	r3, r7
 800e42c:	4628      	mov	r0, r5
 800e42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e432:	f000 b95d 	b.w	800e6f0 <_write_r>

0800e436 <__sseek>:
 800e436:	b510      	push	{r4, lr}
 800e438:	460c      	mov	r4, r1
 800e43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e43e:	f000 f923 	bl	800e688 <_lseek_r>
 800e442:	1c43      	adds	r3, r0, #1
 800e444:	89a3      	ldrh	r3, [r4, #12]
 800e446:	bf15      	itete	ne
 800e448:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e44a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e44e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e452:	81a3      	strheq	r3, [r4, #12]
 800e454:	bf18      	it	ne
 800e456:	81a3      	strhne	r3, [r4, #12]
 800e458:	bd10      	pop	{r4, pc}

0800e45a <__sclose>:
 800e45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e45e:	f000 b8ad 	b.w	800e5bc <_close_r>

0800e462 <__swbuf_r>:
 800e462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e464:	460e      	mov	r6, r1
 800e466:	4614      	mov	r4, r2
 800e468:	4605      	mov	r5, r0
 800e46a:	b118      	cbz	r0, 800e474 <__swbuf_r+0x12>
 800e46c:	6a03      	ldr	r3, [r0, #32]
 800e46e:	b90b      	cbnz	r3, 800e474 <__swbuf_r+0x12>
 800e470:	f7ff ff6c 	bl	800e34c <__sinit>
 800e474:	69a3      	ldr	r3, [r4, #24]
 800e476:	60a3      	str	r3, [r4, #8]
 800e478:	89a3      	ldrh	r3, [r4, #12]
 800e47a:	071a      	lsls	r2, r3, #28
 800e47c:	d501      	bpl.n	800e482 <__swbuf_r+0x20>
 800e47e:	6923      	ldr	r3, [r4, #16]
 800e480:	b943      	cbnz	r3, 800e494 <__swbuf_r+0x32>
 800e482:	4621      	mov	r1, r4
 800e484:	4628      	mov	r0, r5
 800e486:	f000 f82b 	bl	800e4e0 <__swsetup_r>
 800e48a:	b118      	cbz	r0, 800e494 <__swbuf_r+0x32>
 800e48c:	f04f 37ff 	mov.w	r7, #4294967295
 800e490:	4638      	mov	r0, r7
 800e492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e494:	6823      	ldr	r3, [r4, #0]
 800e496:	6922      	ldr	r2, [r4, #16]
 800e498:	1a98      	subs	r0, r3, r2
 800e49a:	6963      	ldr	r3, [r4, #20]
 800e49c:	b2f6      	uxtb	r6, r6
 800e49e:	4283      	cmp	r3, r0
 800e4a0:	4637      	mov	r7, r6
 800e4a2:	dc05      	bgt.n	800e4b0 <__swbuf_r+0x4e>
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	f000 fd26 	bl	800eef8 <_fflush_r>
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	d1ed      	bne.n	800e48c <__swbuf_r+0x2a>
 800e4b0:	68a3      	ldr	r3, [r4, #8]
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	60a3      	str	r3, [r4, #8]
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	1c5a      	adds	r2, r3, #1
 800e4ba:	6022      	str	r2, [r4, #0]
 800e4bc:	701e      	strb	r6, [r3, #0]
 800e4be:	6962      	ldr	r2, [r4, #20]
 800e4c0:	1c43      	adds	r3, r0, #1
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d004      	beq.n	800e4d0 <__swbuf_r+0x6e>
 800e4c6:	89a3      	ldrh	r3, [r4, #12]
 800e4c8:	07db      	lsls	r3, r3, #31
 800e4ca:	d5e1      	bpl.n	800e490 <__swbuf_r+0x2e>
 800e4cc:	2e0a      	cmp	r6, #10
 800e4ce:	d1df      	bne.n	800e490 <__swbuf_r+0x2e>
 800e4d0:	4621      	mov	r1, r4
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	f000 fd10 	bl	800eef8 <_fflush_r>
 800e4d8:	2800      	cmp	r0, #0
 800e4da:	d0d9      	beq.n	800e490 <__swbuf_r+0x2e>
 800e4dc:	e7d6      	b.n	800e48c <__swbuf_r+0x2a>
	...

0800e4e0 <__swsetup_r>:
 800e4e0:	b538      	push	{r3, r4, r5, lr}
 800e4e2:	4b29      	ldr	r3, [pc, #164]	@ (800e588 <__swsetup_r+0xa8>)
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	6818      	ldr	r0, [r3, #0]
 800e4e8:	460c      	mov	r4, r1
 800e4ea:	b118      	cbz	r0, 800e4f4 <__swsetup_r+0x14>
 800e4ec:	6a03      	ldr	r3, [r0, #32]
 800e4ee:	b90b      	cbnz	r3, 800e4f4 <__swsetup_r+0x14>
 800e4f0:	f7ff ff2c 	bl	800e34c <__sinit>
 800e4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4f8:	0719      	lsls	r1, r3, #28
 800e4fa:	d422      	bmi.n	800e542 <__swsetup_r+0x62>
 800e4fc:	06da      	lsls	r2, r3, #27
 800e4fe:	d407      	bmi.n	800e510 <__swsetup_r+0x30>
 800e500:	2209      	movs	r2, #9
 800e502:	602a      	str	r2, [r5, #0]
 800e504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e508:	81a3      	strh	r3, [r4, #12]
 800e50a:	f04f 30ff 	mov.w	r0, #4294967295
 800e50e:	e033      	b.n	800e578 <__swsetup_r+0x98>
 800e510:	0758      	lsls	r0, r3, #29
 800e512:	d512      	bpl.n	800e53a <__swsetup_r+0x5a>
 800e514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e516:	b141      	cbz	r1, 800e52a <__swsetup_r+0x4a>
 800e518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e51c:	4299      	cmp	r1, r3
 800e51e:	d002      	beq.n	800e526 <__swsetup_r+0x46>
 800e520:	4628      	mov	r0, r5
 800e522:	f000 f94b 	bl	800e7bc <_free_r>
 800e526:	2300      	movs	r3, #0
 800e528:	6363      	str	r3, [r4, #52]	@ 0x34
 800e52a:	89a3      	ldrh	r3, [r4, #12]
 800e52c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e530:	81a3      	strh	r3, [r4, #12]
 800e532:	2300      	movs	r3, #0
 800e534:	6063      	str	r3, [r4, #4]
 800e536:	6923      	ldr	r3, [r4, #16]
 800e538:	6023      	str	r3, [r4, #0]
 800e53a:	89a3      	ldrh	r3, [r4, #12]
 800e53c:	f043 0308 	orr.w	r3, r3, #8
 800e540:	81a3      	strh	r3, [r4, #12]
 800e542:	6923      	ldr	r3, [r4, #16]
 800e544:	b94b      	cbnz	r3, 800e55a <__swsetup_r+0x7a>
 800e546:	89a3      	ldrh	r3, [r4, #12]
 800e548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e54c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e550:	d003      	beq.n	800e55a <__swsetup_r+0x7a>
 800e552:	4621      	mov	r1, r4
 800e554:	4628      	mov	r0, r5
 800e556:	f000 fd2f 	bl	800efb8 <__smakebuf_r>
 800e55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e55e:	f013 0201 	ands.w	r2, r3, #1
 800e562:	d00a      	beq.n	800e57a <__swsetup_r+0x9a>
 800e564:	2200      	movs	r2, #0
 800e566:	60a2      	str	r2, [r4, #8]
 800e568:	6962      	ldr	r2, [r4, #20]
 800e56a:	4252      	negs	r2, r2
 800e56c:	61a2      	str	r2, [r4, #24]
 800e56e:	6922      	ldr	r2, [r4, #16]
 800e570:	b942      	cbnz	r2, 800e584 <__swsetup_r+0xa4>
 800e572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e576:	d1c5      	bne.n	800e504 <__swsetup_r+0x24>
 800e578:	bd38      	pop	{r3, r4, r5, pc}
 800e57a:	0799      	lsls	r1, r3, #30
 800e57c:	bf58      	it	pl
 800e57e:	6962      	ldrpl	r2, [r4, #20]
 800e580:	60a2      	str	r2, [r4, #8]
 800e582:	e7f4      	b.n	800e56e <__swsetup_r+0x8e>
 800e584:	2000      	movs	r0, #0
 800e586:	e7f7      	b.n	800e578 <__swsetup_r+0x98>
 800e588:	20000050 	.word	0x20000050

0800e58c <memcmp>:
 800e58c:	b510      	push	{r4, lr}
 800e58e:	3901      	subs	r1, #1
 800e590:	4402      	add	r2, r0
 800e592:	4290      	cmp	r0, r2
 800e594:	d101      	bne.n	800e59a <memcmp+0xe>
 800e596:	2000      	movs	r0, #0
 800e598:	e005      	b.n	800e5a6 <memcmp+0x1a>
 800e59a:	7803      	ldrb	r3, [r0, #0]
 800e59c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e5a0:	42a3      	cmp	r3, r4
 800e5a2:	d001      	beq.n	800e5a8 <memcmp+0x1c>
 800e5a4:	1b18      	subs	r0, r3, r4
 800e5a6:	bd10      	pop	{r4, pc}
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	e7f2      	b.n	800e592 <memcmp+0x6>

0800e5ac <memset>:
 800e5ac:	4402      	add	r2, r0
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d100      	bne.n	800e5b6 <memset+0xa>
 800e5b4:	4770      	bx	lr
 800e5b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e5ba:	e7f9      	b.n	800e5b0 <memset+0x4>

0800e5bc <_close_r>:
 800e5bc:	b538      	push	{r3, r4, r5, lr}
 800e5be:	4d06      	ldr	r5, [pc, #24]	@ (800e5d8 <_close_r+0x1c>)
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	4608      	mov	r0, r1
 800e5c6:	602b      	str	r3, [r5, #0]
 800e5c8:	f7f2 fcba 	bl	8000f40 <_close>
 800e5cc:	1c43      	adds	r3, r0, #1
 800e5ce:	d102      	bne.n	800e5d6 <_close_r+0x1a>
 800e5d0:	682b      	ldr	r3, [r5, #0]
 800e5d2:	b103      	cbz	r3, 800e5d6 <_close_r+0x1a>
 800e5d4:	6023      	str	r3, [r4, #0]
 800e5d6:	bd38      	pop	{r3, r4, r5, pc}
 800e5d8:	2003369c 	.word	0x2003369c

0800e5dc <_reclaim_reent>:
 800e5dc:	4b29      	ldr	r3, [pc, #164]	@ (800e684 <_reclaim_reent+0xa8>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4283      	cmp	r3, r0
 800e5e2:	b570      	push	{r4, r5, r6, lr}
 800e5e4:	4604      	mov	r4, r0
 800e5e6:	d04b      	beq.n	800e680 <_reclaim_reent+0xa4>
 800e5e8:	69c3      	ldr	r3, [r0, #28]
 800e5ea:	b1ab      	cbz	r3, 800e618 <_reclaim_reent+0x3c>
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	b16b      	cbz	r3, 800e60c <_reclaim_reent+0x30>
 800e5f0:	2500      	movs	r5, #0
 800e5f2:	69e3      	ldr	r3, [r4, #28]
 800e5f4:	68db      	ldr	r3, [r3, #12]
 800e5f6:	5959      	ldr	r1, [r3, r5]
 800e5f8:	2900      	cmp	r1, #0
 800e5fa:	d13b      	bne.n	800e674 <_reclaim_reent+0x98>
 800e5fc:	3504      	adds	r5, #4
 800e5fe:	2d80      	cmp	r5, #128	@ 0x80
 800e600:	d1f7      	bne.n	800e5f2 <_reclaim_reent+0x16>
 800e602:	69e3      	ldr	r3, [r4, #28]
 800e604:	4620      	mov	r0, r4
 800e606:	68d9      	ldr	r1, [r3, #12]
 800e608:	f000 f8d8 	bl	800e7bc <_free_r>
 800e60c:	69e3      	ldr	r3, [r4, #28]
 800e60e:	6819      	ldr	r1, [r3, #0]
 800e610:	b111      	cbz	r1, 800e618 <_reclaim_reent+0x3c>
 800e612:	4620      	mov	r0, r4
 800e614:	f000 f8d2 	bl	800e7bc <_free_r>
 800e618:	6961      	ldr	r1, [r4, #20]
 800e61a:	b111      	cbz	r1, 800e622 <_reclaim_reent+0x46>
 800e61c:	4620      	mov	r0, r4
 800e61e:	f000 f8cd 	bl	800e7bc <_free_r>
 800e622:	69e1      	ldr	r1, [r4, #28]
 800e624:	b111      	cbz	r1, 800e62c <_reclaim_reent+0x50>
 800e626:	4620      	mov	r0, r4
 800e628:	f000 f8c8 	bl	800e7bc <_free_r>
 800e62c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e62e:	b111      	cbz	r1, 800e636 <_reclaim_reent+0x5a>
 800e630:	4620      	mov	r0, r4
 800e632:	f000 f8c3 	bl	800e7bc <_free_r>
 800e636:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e638:	b111      	cbz	r1, 800e640 <_reclaim_reent+0x64>
 800e63a:	4620      	mov	r0, r4
 800e63c:	f000 f8be 	bl	800e7bc <_free_r>
 800e640:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e642:	b111      	cbz	r1, 800e64a <_reclaim_reent+0x6e>
 800e644:	4620      	mov	r0, r4
 800e646:	f000 f8b9 	bl	800e7bc <_free_r>
 800e64a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e64c:	b111      	cbz	r1, 800e654 <_reclaim_reent+0x78>
 800e64e:	4620      	mov	r0, r4
 800e650:	f000 f8b4 	bl	800e7bc <_free_r>
 800e654:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e656:	b111      	cbz	r1, 800e65e <_reclaim_reent+0x82>
 800e658:	4620      	mov	r0, r4
 800e65a:	f000 f8af 	bl	800e7bc <_free_r>
 800e65e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e660:	b111      	cbz	r1, 800e668 <_reclaim_reent+0x8c>
 800e662:	4620      	mov	r0, r4
 800e664:	f000 f8aa 	bl	800e7bc <_free_r>
 800e668:	6a23      	ldr	r3, [r4, #32]
 800e66a:	b14b      	cbz	r3, 800e680 <_reclaim_reent+0xa4>
 800e66c:	4620      	mov	r0, r4
 800e66e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e672:	4718      	bx	r3
 800e674:	680e      	ldr	r6, [r1, #0]
 800e676:	4620      	mov	r0, r4
 800e678:	f000 f8a0 	bl	800e7bc <_free_r>
 800e67c:	4631      	mov	r1, r6
 800e67e:	e7bb      	b.n	800e5f8 <_reclaim_reent+0x1c>
 800e680:	bd70      	pop	{r4, r5, r6, pc}
 800e682:	bf00      	nop
 800e684:	20000050 	.word	0x20000050

0800e688 <_lseek_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	4d07      	ldr	r5, [pc, #28]	@ (800e6a8 <_lseek_r+0x20>)
 800e68c:	4604      	mov	r4, r0
 800e68e:	4608      	mov	r0, r1
 800e690:	4611      	mov	r1, r2
 800e692:	2200      	movs	r2, #0
 800e694:	602a      	str	r2, [r5, #0]
 800e696:	461a      	mov	r2, r3
 800e698:	f7f2 fc5c 	bl	8000f54 <_lseek>
 800e69c:	1c43      	adds	r3, r0, #1
 800e69e:	d102      	bne.n	800e6a6 <_lseek_r+0x1e>
 800e6a0:	682b      	ldr	r3, [r5, #0]
 800e6a2:	b103      	cbz	r3, 800e6a6 <_lseek_r+0x1e>
 800e6a4:	6023      	str	r3, [r4, #0]
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	2003369c 	.word	0x2003369c

0800e6ac <_read_r>:
 800e6ac:	b538      	push	{r3, r4, r5, lr}
 800e6ae:	4d07      	ldr	r5, [pc, #28]	@ (800e6cc <_read_r+0x20>)
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	4608      	mov	r0, r1
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	602a      	str	r2, [r5, #0]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f7f2 fc24 	bl	8000f08 <_read>
 800e6c0:	1c43      	adds	r3, r0, #1
 800e6c2:	d102      	bne.n	800e6ca <_read_r+0x1e>
 800e6c4:	682b      	ldr	r3, [r5, #0]
 800e6c6:	b103      	cbz	r3, 800e6ca <_read_r+0x1e>
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	2003369c 	.word	0x2003369c

0800e6d0 <_sbrk_r>:
 800e6d0:	b538      	push	{r3, r4, r5, lr}
 800e6d2:	4d06      	ldr	r5, [pc, #24]	@ (800e6ec <_sbrk_r+0x1c>)
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	4608      	mov	r0, r1
 800e6da:	602b      	str	r3, [r5, #0]
 800e6dc:	f7f2 fc3c 	bl	8000f58 <_sbrk>
 800e6e0:	1c43      	adds	r3, r0, #1
 800e6e2:	d102      	bne.n	800e6ea <_sbrk_r+0x1a>
 800e6e4:	682b      	ldr	r3, [r5, #0]
 800e6e6:	b103      	cbz	r3, 800e6ea <_sbrk_r+0x1a>
 800e6e8:	6023      	str	r3, [r4, #0]
 800e6ea:	bd38      	pop	{r3, r4, r5, pc}
 800e6ec:	2003369c 	.word	0x2003369c

0800e6f0 <_write_r>:
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	4d07      	ldr	r5, [pc, #28]	@ (800e710 <_write_r+0x20>)
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	4608      	mov	r0, r1
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	602a      	str	r2, [r5, #0]
 800e6fe:	461a      	mov	r2, r3
 800e700:	f7f2 fc10 	bl	8000f24 <_write>
 800e704:	1c43      	adds	r3, r0, #1
 800e706:	d102      	bne.n	800e70e <_write_r+0x1e>
 800e708:	682b      	ldr	r3, [r5, #0]
 800e70a:	b103      	cbz	r3, 800e70e <_write_r+0x1e>
 800e70c:	6023      	str	r3, [r4, #0]
 800e70e:	bd38      	pop	{r3, r4, r5, pc}
 800e710:	2003369c 	.word	0x2003369c

0800e714 <__libc_init_array>:
 800e714:	b570      	push	{r4, r5, r6, lr}
 800e716:	4d0d      	ldr	r5, [pc, #52]	@ (800e74c <__libc_init_array+0x38>)
 800e718:	4c0d      	ldr	r4, [pc, #52]	@ (800e750 <__libc_init_array+0x3c>)
 800e71a:	1b64      	subs	r4, r4, r5
 800e71c:	10a4      	asrs	r4, r4, #2
 800e71e:	2600      	movs	r6, #0
 800e720:	42a6      	cmp	r6, r4
 800e722:	d109      	bne.n	800e738 <__libc_init_array+0x24>
 800e724:	4d0b      	ldr	r5, [pc, #44]	@ (800e754 <__libc_init_array+0x40>)
 800e726:	4c0c      	ldr	r4, [pc, #48]	@ (800e758 <__libc_init_array+0x44>)
 800e728:	f000 fcf0 	bl	800f10c <_init>
 800e72c:	1b64      	subs	r4, r4, r5
 800e72e:	10a4      	asrs	r4, r4, #2
 800e730:	2600      	movs	r6, #0
 800e732:	42a6      	cmp	r6, r4
 800e734:	d105      	bne.n	800e742 <__libc_init_array+0x2e>
 800e736:	bd70      	pop	{r4, r5, r6, pc}
 800e738:	f855 3b04 	ldr.w	r3, [r5], #4
 800e73c:	4798      	blx	r3
 800e73e:	3601      	adds	r6, #1
 800e740:	e7ee      	b.n	800e720 <__libc_init_array+0xc>
 800e742:	f855 3b04 	ldr.w	r3, [r5], #4
 800e746:	4798      	blx	r3
 800e748:	3601      	adds	r6, #1
 800e74a:	e7f2      	b.n	800e732 <__libc_init_array+0x1e>
 800e74c:	0801250c 	.word	0x0801250c
 800e750:	0801250c 	.word	0x0801250c
 800e754:	0801250c 	.word	0x0801250c
 800e758:	08012510 	.word	0x08012510

0800e75c <__retarget_lock_init_recursive>:
 800e75c:	4770      	bx	lr

0800e75e <__retarget_lock_acquire_recursive>:
 800e75e:	4770      	bx	lr

0800e760 <__retarget_lock_release_recursive>:
 800e760:	4770      	bx	lr

0800e762 <memcpy>:
 800e762:	440a      	add	r2, r1
 800e764:	4291      	cmp	r1, r2
 800e766:	f100 33ff 	add.w	r3, r0, #4294967295
 800e76a:	d100      	bne.n	800e76e <memcpy+0xc>
 800e76c:	4770      	bx	lr
 800e76e:	b510      	push	{r4, lr}
 800e770:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e774:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e778:	4291      	cmp	r1, r2
 800e77a:	d1f9      	bne.n	800e770 <memcpy+0xe>
 800e77c:	bd10      	pop	{r4, pc}
	...

0800e780 <__assert_func>:
 800e780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e782:	4614      	mov	r4, r2
 800e784:	461a      	mov	r2, r3
 800e786:	4b09      	ldr	r3, [pc, #36]	@ (800e7ac <__assert_func+0x2c>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4605      	mov	r5, r0
 800e78c:	68d8      	ldr	r0, [r3, #12]
 800e78e:	b954      	cbnz	r4, 800e7a6 <__assert_func+0x26>
 800e790:	4b07      	ldr	r3, [pc, #28]	@ (800e7b0 <__assert_func+0x30>)
 800e792:	461c      	mov	r4, r3
 800e794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e798:	9100      	str	r1, [sp, #0]
 800e79a:	462b      	mov	r3, r5
 800e79c:	4905      	ldr	r1, [pc, #20]	@ (800e7b4 <__assert_func+0x34>)
 800e79e:	f000 fbd3 	bl	800ef48 <fiprintf>
 800e7a2:	f000 fc67 	bl	800f074 <abort>
 800e7a6:	4b04      	ldr	r3, [pc, #16]	@ (800e7b8 <__assert_func+0x38>)
 800e7a8:	e7f4      	b.n	800e794 <__assert_func+0x14>
 800e7aa:	bf00      	nop
 800e7ac:	20000050 	.word	0x20000050
 800e7b0:	08010746 	.word	0x08010746
 800e7b4:	080124a0 	.word	0x080124a0
 800e7b8:	08012493 	.word	0x08012493

0800e7bc <_free_r>:
 800e7bc:	b538      	push	{r3, r4, r5, lr}
 800e7be:	4605      	mov	r5, r0
 800e7c0:	2900      	cmp	r1, #0
 800e7c2:	d041      	beq.n	800e848 <_free_r+0x8c>
 800e7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7c8:	1f0c      	subs	r4, r1, #4
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	bfb8      	it	lt
 800e7ce:	18e4      	addlt	r4, r4, r3
 800e7d0:	f7ff fce6 	bl	800e1a0 <__malloc_lock>
 800e7d4:	4a1d      	ldr	r2, [pc, #116]	@ (800e84c <_free_r+0x90>)
 800e7d6:	6813      	ldr	r3, [r2, #0]
 800e7d8:	b933      	cbnz	r3, 800e7e8 <_free_r+0x2c>
 800e7da:	6063      	str	r3, [r4, #4]
 800e7dc:	6014      	str	r4, [r2, #0]
 800e7de:	4628      	mov	r0, r5
 800e7e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7e4:	f7ff bce2 	b.w	800e1ac <__malloc_unlock>
 800e7e8:	42a3      	cmp	r3, r4
 800e7ea:	d908      	bls.n	800e7fe <_free_r+0x42>
 800e7ec:	6820      	ldr	r0, [r4, #0]
 800e7ee:	1821      	adds	r1, r4, r0
 800e7f0:	428b      	cmp	r3, r1
 800e7f2:	bf01      	itttt	eq
 800e7f4:	6819      	ldreq	r1, [r3, #0]
 800e7f6:	685b      	ldreq	r3, [r3, #4]
 800e7f8:	1809      	addeq	r1, r1, r0
 800e7fa:	6021      	streq	r1, [r4, #0]
 800e7fc:	e7ed      	b.n	800e7da <_free_r+0x1e>
 800e7fe:	461a      	mov	r2, r3
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	b10b      	cbz	r3, 800e808 <_free_r+0x4c>
 800e804:	42a3      	cmp	r3, r4
 800e806:	d9fa      	bls.n	800e7fe <_free_r+0x42>
 800e808:	6811      	ldr	r1, [r2, #0]
 800e80a:	1850      	adds	r0, r2, r1
 800e80c:	42a0      	cmp	r0, r4
 800e80e:	d10b      	bne.n	800e828 <_free_r+0x6c>
 800e810:	6820      	ldr	r0, [r4, #0]
 800e812:	4401      	add	r1, r0
 800e814:	1850      	adds	r0, r2, r1
 800e816:	4283      	cmp	r3, r0
 800e818:	6011      	str	r1, [r2, #0]
 800e81a:	d1e0      	bne.n	800e7de <_free_r+0x22>
 800e81c:	6818      	ldr	r0, [r3, #0]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	6053      	str	r3, [r2, #4]
 800e822:	4408      	add	r0, r1
 800e824:	6010      	str	r0, [r2, #0]
 800e826:	e7da      	b.n	800e7de <_free_r+0x22>
 800e828:	d902      	bls.n	800e830 <_free_r+0x74>
 800e82a:	230c      	movs	r3, #12
 800e82c:	602b      	str	r3, [r5, #0]
 800e82e:	e7d6      	b.n	800e7de <_free_r+0x22>
 800e830:	6820      	ldr	r0, [r4, #0]
 800e832:	1821      	adds	r1, r4, r0
 800e834:	428b      	cmp	r3, r1
 800e836:	bf04      	itt	eq
 800e838:	6819      	ldreq	r1, [r3, #0]
 800e83a:	685b      	ldreq	r3, [r3, #4]
 800e83c:	6063      	str	r3, [r4, #4]
 800e83e:	bf04      	itt	eq
 800e840:	1809      	addeq	r1, r1, r0
 800e842:	6021      	streq	r1, [r4, #0]
 800e844:	6054      	str	r4, [r2, #4]
 800e846:	e7ca      	b.n	800e7de <_free_r+0x22>
 800e848:	bd38      	pop	{r3, r4, r5, pc}
 800e84a:	bf00      	nop
 800e84c:	2003355c 	.word	0x2003355c

0800e850 <__sfputc_r>:
 800e850:	6893      	ldr	r3, [r2, #8]
 800e852:	3b01      	subs	r3, #1
 800e854:	2b00      	cmp	r3, #0
 800e856:	b410      	push	{r4}
 800e858:	6093      	str	r3, [r2, #8]
 800e85a:	da08      	bge.n	800e86e <__sfputc_r+0x1e>
 800e85c:	6994      	ldr	r4, [r2, #24]
 800e85e:	42a3      	cmp	r3, r4
 800e860:	db01      	blt.n	800e866 <__sfputc_r+0x16>
 800e862:	290a      	cmp	r1, #10
 800e864:	d103      	bne.n	800e86e <__sfputc_r+0x1e>
 800e866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e86a:	f7ff bdfa 	b.w	800e462 <__swbuf_r>
 800e86e:	6813      	ldr	r3, [r2, #0]
 800e870:	1c58      	adds	r0, r3, #1
 800e872:	6010      	str	r0, [r2, #0]
 800e874:	7019      	strb	r1, [r3, #0]
 800e876:	4608      	mov	r0, r1
 800e878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e87c:	4770      	bx	lr

0800e87e <__sfputs_r>:
 800e87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e880:	4606      	mov	r6, r0
 800e882:	460f      	mov	r7, r1
 800e884:	4614      	mov	r4, r2
 800e886:	18d5      	adds	r5, r2, r3
 800e888:	42ac      	cmp	r4, r5
 800e88a:	d101      	bne.n	800e890 <__sfputs_r+0x12>
 800e88c:	2000      	movs	r0, #0
 800e88e:	e007      	b.n	800e8a0 <__sfputs_r+0x22>
 800e890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e894:	463a      	mov	r2, r7
 800e896:	4630      	mov	r0, r6
 800e898:	f7ff ffda 	bl	800e850 <__sfputc_r>
 800e89c:	1c43      	adds	r3, r0, #1
 800e89e:	d1f3      	bne.n	800e888 <__sfputs_r+0xa>
 800e8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8a4 <_vfiprintf_r>:
 800e8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a8:	460d      	mov	r5, r1
 800e8aa:	b09d      	sub	sp, #116	@ 0x74
 800e8ac:	4614      	mov	r4, r2
 800e8ae:	4698      	mov	r8, r3
 800e8b0:	4606      	mov	r6, r0
 800e8b2:	b118      	cbz	r0, 800e8bc <_vfiprintf_r+0x18>
 800e8b4:	6a03      	ldr	r3, [r0, #32]
 800e8b6:	b90b      	cbnz	r3, 800e8bc <_vfiprintf_r+0x18>
 800e8b8:	f7ff fd48 	bl	800e34c <__sinit>
 800e8bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8be:	07d9      	lsls	r1, r3, #31
 800e8c0:	d405      	bmi.n	800e8ce <_vfiprintf_r+0x2a>
 800e8c2:	89ab      	ldrh	r3, [r5, #12]
 800e8c4:	059a      	lsls	r2, r3, #22
 800e8c6:	d402      	bmi.n	800e8ce <_vfiprintf_r+0x2a>
 800e8c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8ca:	f7ff ff48 	bl	800e75e <__retarget_lock_acquire_recursive>
 800e8ce:	89ab      	ldrh	r3, [r5, #12]
 800e8d0:	071b      	lsls	r3, r3, #28
 800e8d2:	d501      	bpl.n	800e8d8 <_vfiprintf_r+0x34>
 800e8d4:	692b      	ldr	r3, [r5, #16]
 800e8d6:	b99b      	cbnz	r3, 800e900 <_vfiprintf_r+0x5c>
 800e8d8:	4629      	mov	r1, r5
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f7ff fe00 	bl	800e4e0 <__swsetup_r>
 800e8e0:	b170      	cbz	r0, 800e900 <_vfiprintf_r+0x5c>
 800e8e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8e4:	07dc      	lsls	r4, r3, #31
 800e8e6:	d504      	bpl.n	800e8f2 <_vfiprintf_r+0x4e>
 800e8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ec:	b01d      	add	sp, #116	@ 0x74
 800e8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f2:	89ab      	ldrh	r3, [r5, #12]
 800e8f4:	0598      	lsls	r0, r3, #22
 800e8f6:	d4f7      	bmi.n	800e8e8 <_vfiprintf_r+0x44>
 800e8f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8fa:	f7ff ff31 	bl	800e760 <__retarget_lock_release_recursive>
 800e8fe:	e7f3      	b.n	800e8e8 <_vfiprintf_r+0x44>
 800e900:	2300      	movs	r3, #0
 800e902:	9309      	str	r3, [sp, #36]	@ 0x24
 800e904:	2320      	movs	r3, #32
 800e906:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e90a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e90e:	2330      	movs	r3, #48	@ 0x30
 800e910:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eac0 <_vfiprintf_r+0x21c>
 800e914:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e918:	f04f 0901 	mov.w	r9, #1
 800e91c:	4623      	mov	r3, r4
 800e91e:	469a      	mov	sl, r3
 800e920:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e924:	b10a      	cbz	r2, 800e92a <_vfiprintf_r+0x86>
 800e926:	2a25      	cmp	r2, #37	@ 0x25
 800e928:	d1f9      	bne.n	800e91e <_vfiprintf_r+0x7a>
 800e92a:	ebba 0b04 	subs.w	fp, sl, r4
 800e92e:	d00b      	beq.n	800e948 <_vfiprintf_r+0xa4>
 800e930:	465b      	mov	r3, fp
 800e932:	4622      	mov	r2, r4
 800e934:	4629      	mov	r1, r5
 800e936:	4630      	mov	r0, r6
 800e938:	f7ff ffa1 	bl	800e87e <__sfputs_r>
 800e93c:	3001      	adds	r0, #1
 800e93e:	f000 80a7 	beq.w	800ea90 <_vfiprintf_r+0x1ec>
 800e942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e944:	445a      	add	r2, fp
 800e946:	9209      	str	r2, [sp, #36]	@ 0x24
 800e948:	f89a 3000 	ldrb.w	r3, [sl]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f000 809f 	beq.w	800ea90 <_vfiprintf_r+0x1ec>
 800e952:	2300      	movs	r3, #0
 800e954:	f04f 32ff 	mov.w	r2, #4294967295
 800e958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e95c:	f10a 0a01 	add.w	sl, sl, #1
 800e960:	9304      	str	r3, [sp, #16]
 800e962:	9307      	str	r3, [sp, #28]
 800e964:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e968:	931a      	str	r3, [sp, #104]	@ 0x68
 800e96a:	4654      	mov	r4, sl
 800e96c:	2205      	movs	r2, #5
 800e96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e972:	4853      	ldr	r0, [pc, #332]	@ (800eac0 <_vfiprintf_r+0x21c>)
 800e974:	f7f1 fc54 	bl	8000220 <memchr>
 800e978:	9a04      	ldr	r2, [sp, #16]
 800e97a:	b9d8      	cbnz	r0, 800e9b4 <_vfiprintf_r+0x110>
 800e97c:	06d1      	lsls	r1, r2, #27
 800e97e:	bf44      	itt	mi
 800e980:	2320      	movmi	r3, #32
 800e982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e986:	0713      	lsls	r3, r2, #28
 800e988:	bf44      	itt	mi
 800e98a:	232b      	movmi	r3, #43	@ 0x2b
 800e98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e990:	f89a 3000 	ldrb.w	r3, [sl]
 800e994:	2b2a      	cmp	r3, #42	@ 0x2a
 800e996:	d015      	beq.n	800e9c4 <_vfiprintf_r+0x120>
 800e998:	9a07      	ldr	r2, [sp, #28]
 800e99a:	4654      	mov	r4, sl
 800e99c:	2000      	movs	r0, #0
 800e99e:	f04f 0c0a 	mov.w	ip, #10
 800e9a2:	4621      	mov	r1, r4
 800e9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9a8:	3b30      	subs	r3, #48	@ 0x30
 800e9aa:	2b09      	cmp	r3, #9
 800e9ac:	d94b      	bls.n	800ea46 <_vfiprintf_r+0x1a2>
 800e9ae:	b1b0      	cbz	r0, 800e9de <_vfiprintf_r+0x13a>
 800e9b0:	9207      	str	r2, [sp, #28]
 800e9b2:	e014      	b.n	800e9de <_vfiprintf_r+0x13a>
 800e9b4:	eba0 0308 	sub.w	r3, r0, r8
 800e9b8:	fa09 f303 	lsl.w	r3, r9, r3
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	9304      	str	r3, [sp, #16]
 800e9c0:	46a2      	mov	sl, r4
 800e9c2:	e7d2      	b.n	800e96a <_vfiprintf_r+0xc6>
 800e9c4:	9b03      	ldr	r3, [sp, #12]
 800e9c6:	1d19      	adds	r1, r3, #4
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	9103      	str	r1, [sp, #12]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	bfbb      	ittet	lt
 800e9d0:	425b      	neglt	r3, r3
 800e9d2:	f042 0202 	orrlt.w	r2, r2, #2
 800e9d6:	9307      	strge	r3, [sp, #28]
 800e9d8:	9307      	strlt	r3, [sp, #28]
 800e9da:	bfb8      	it	lt
 800e9dc:	9204      	strlt	r2, [sp, #16]
 800e9de:	7823      	ldrb	r3, [r4, #0]
 800e9e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9e2:	d10a      	bne.n	800e9fa <_vfiprintf_r+0x156>
 800e9e4:	7863      	ldrb	r3, [r4, #1]
 800e9e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9e8:	d132      	bne.n	800ea50 <_vfiprintf_r+0x1ac>
 800e9ea:	9b03      	ldr	r3, [sp, #12]
 800e9ec:	1d1a      	adds	r2, r3, #4
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	9203      	str	r2, [sp, #12]
 800e9f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9f6:	3402      	adds	r4, #2
 800e9f8:	9305      	str	r3, [sp, #20]
 800e9fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ead0 <_vfiprintf_r+0x22c>
 800e9fe:	7821      	ldrb	r1, [r4, #0]
 800ea00:	2203      	movs	r2, #3
 800ea02:	4650      	mov	r0, sl
 800ea04:	f7f1 fc0c 	bl	8000220 <memchr>
 800ea08:	b138      	cbz	r0, 800ea1a <_vfiprintf_r+0x176>
 800ea0a:	9b04      	ldr	r3, [sp, #16]
 800ea0c:	eba0 000a 	sub.w	r0, r0, sl
 800ea10:	2240      	movs	r2, #64	@ 0x40
 800ea12:	4082      	lsls	r2, r0
 800ea14:	4313      	orrs	r3, r2
 800ea16:	3401      	adds	r4, #1
 800ea18:	9304      	str	r3, [sp, #16]
 800ea1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea1e:	4829      	ldr	r0, [pc, #164]	@ (800eac4 <_vfiprintf_r+0x220>)
 800ea20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea24:	2206      	movs	r2, #6
 800ea26:	f7f1 fbfb 	bl	8000220 <memchr>
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	d03f      	beq.n	800eaae <_vfiprintf_r+0x20a>
 800ea2e:	4b26      	ldr	r3, [pc, #152]	@ (800eac8 <_vfiprintf_r+0x224>)
 800ea30:	bb1b      	cbnz	r3, 800ea7a <_vfiprintf_r+0x1d6>
 800ea32:	9b03      	ldr	r3, [sp, #12]
 800ea34:	3307      	adds	r3, #7
 800ea36:	f023 0307 	bic.w	r3, r3, #7
 800ea3a:	3308      	adds	r3, #8
 800ea3c:	9303      	str	r3, [sp, #12]
 800ea3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea40:	443b      	add	r3, r7
 800ea42:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea44:	e76a      	b.n	800e91c <_vfiprintf_r+0x78>
 800ea46:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea4a:	460c      	mov	r4, r1
 800ea4c:	2001      	movs	r0, #1
 800ea4e:	e7a8      	b.n	800e9a2 <_vfiprintf_r+0xfe>
 800ea50:	2300      	movs	r3, #0
 800ea52:	3401      	adds	r4, #1
 800ea54:	9305      	str	r3, [sp, #20]
 800ea56:	4619      	mov	r1, r3
 800ea58:	f04f 0c0a 	mov.w	ip, #10
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea62:	3a30      	subs	r2, #48	@ 0x30
 800ea64:	2a09      	cmp	r2, #9
 800ea66:	d903      	bls.n	800ea70 <_vfiprintf_r+0x1cc>
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d0c6      	beq.n	800e9fa <_vfiprintf_r+0x156>
 800ea6c:	9105      	str	r1, [sp, #20]
 800ea6e:	e7c4      	b.n	800e9fa <_vfiprintf_r+0x156>
 800ea70:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea74:	4604      	mov	r4, r0
 800ea76:	2301      	movs	r3, #1
 800ea78:	e7f0      	b.n	800ea5c <_vfiprintf_r+0x1b8>
 800ea7a:	ab03      	add	r3, sp, #12
 800ea7c:	9300      	str	r3, [sp, #0]
 800ea7e:	462a      	mov	r2, r5
 800ea80:	4b12      	ldr	r3, [pc, #72]	@ (800eacc <_vfiprintf_r+0x228>)
 800ea82:	a904      	add	r1, sp, #16
 800ea84:	4630      	mov	r0, r6
 800ea86:	f3af 8000 	nop.w
 800ea8a:	4607      	mov	r7, r0
 800ea8c:	1c78      	adds	r0, r7, #1
 800ea8e:	d1d6      	bne.n	800ea3e <_vfiprintf_r+0x19a>
 800ea90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea92:	07d9      	lsls	r1, r3, #31
 800ea94:	d405      	bmi.n	800eaa2 <_vfiprintf_r+0x1fe>
 800ea96:	89ab      	ldrh	r3, [r5, #12]
 800ea98:	059a      	lsls	r2, r3, #22
 800ea9a:	d402      	bmi.n	800eaa2 <_vfiprintf_r+0x1fe>
 800ea9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea9e:	f7ff fe5f 	bl	800e760 <__retarget_lock_release_recursive>
 800eaa2:	89ab      	ldrh	r3, [r5, #12]
 800eaa4:	065b      	lsls	r3, r3, #25
 800eaa6:	f53f af1f 	bmi.w	800e8e8 <_vfiprintf_r+0x44>
 800eaaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eaac:	e71e      	b.n	800e8ec <_vfiprintf_r+0x48>
 800eaae:	ab03      	add	r3, sp, #12
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	462a      	mov	r2, r5
 800eab4:	4b05      	ldr	r3, [pc, #20]	@ (800eacc <_vfiprintf_r+0x228>)
 800eab6:	a904      	add	r1, sp, #16
 800eab8:	4630      	mov	r0, r6
 800eaba:	f000 f879 	bl	800ebb0 <_printf_i>
 800eabe:	e7e4      	b.n	800ea8a <_vfiprintf_r+0x1e6>
 800eac0:	080124cf 	.word	0x080124cf
 800eac4:	080124d9 	.word	0x080124d9
 800eac8:	00000000 	.word	0x00000000
 800eacc:	0800e87f 	.word	0x0800e87f
 800ead0:	080124d5 	.word	0x080124d5

0800ead4 <_printf_common>:
 800ead4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ead8:	4616      	mov	r6, r2
 800eada:	4698      	mov	r8, r3
 800eadc:	688a      	ldr	r2, [r1, #8]
 800eade:	690b      	ldr	r3, [r1, #16]
 800eae0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eae4:	4293      	cmp	r3, r2
 800eae6:	bfb8      	it	lt
 800eae8:	4613      	movlt	r3, r2
 800eaea:	6033      	str	r3, [r6, #0]
 800eaec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eaf0:	4607      	mov	r7, r0
 800eaf2:	460c      	mov	r4, r1
 800eaf4:	b10a      	cbz	r2, 800eafa <_printf_common+0x26>
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	6033      	str	r3, [r6, #0]
 800eafa:	6823      	ldr	r3, [r4, #0]
 800eafc:	0699      	lsls	r1, r3, #26
 800eafe:	bf42      	ittt	mi
 800eb00:	6833      	ldrmi	r3, [r6, #0]
 800eb02:	3302      	addmi	r3, #2
 800eb04:	6033      	strmi	r3, [r6, #0]
 800eb06:	6825      	ldr	r5, [r4, #0]
 800eb08:	f015 0506 	ands.w	r5, r5, #6
 800eb0c:	d106      	bne.n	800eb1c <_printf_common+0x48>
 800eb0e:	f104 0a19 	add.w	sl, r4, #25
 800eb12:	68e3      	ldr	r3, [r4, #12]
 800eb14:	6832      	ldr	r2, [r6, #0]
 800eb16:	1a9b      	subs	r3, r3, r2
 800eb18:	42ab      	cmp	r3, r5
 800eb1a:	dc26      	bgt.n	800eb6a <_printf_common+0x96>
 800eb1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb20:	6822      	ldr	r2, [r4, #0]
 800eb22:	3b00      	subs	r3, #0
 800eb24:	bf18      	it	ne
 800eb26:	2301      	movne	r3, #1
 800eb28:	0692      	lsls	r2, r2, #26
 800eb2a:	d42b      	bmi.n	800eb84 <_printf_common+0xb0>
 800eb2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb30:	4641      	mov	r1, r8
 800eb32:	4638      	mov	r0, r7
 800eb34:	47c8      	blx	r9
 800eb36:	3001      	adds	r0, #1
 800eb38:	d01e      	beq.n	800eb78 <_printf_common+0xa4>
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	6922      	ldr	r2, [r4, #16]
 800eb3e:	f003 0306 	and.w	r3, r3, #6
 800eb42:	2b04      	cmp	r3, #4
 800eb44:	bf02      	ittt	eq
 800eb46:	68e5      	ldreq	r5, [r4, #12]
 800eb48:	6833      	ldreq	r3, [r6, #0]
 800eb4a:	1aed      	subeq	r5, r5, r3
 800eb4c:	68a3      	ldr	r3, [r4, #8]
 800eb4e:	bf0c      	ite	eq
 800eb50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb54:	2500      	movne	r5, #0
 800eb56:	4293      	cmp	r3, r2
 800eb58:	bfc4      	itt	gt
 800eb5a:	1a9b      	subgt	r3, r3, r2
 800eb5c:	18ed      	addgt	r5, r5, r3
 800eb5e:	2600      	movs	r6, #0
 800eb60:	341a      	adds	r4, #26
 800eb62:	42b5      	cmp	r5, r6
 800eb64:	d11a      	bne.n	800eb9c <_printf_common+0xc8>
 800eb66:	2000      	movs	r0, #0
 800eb68:	e008      	b.n	800eb7c <_printf_common+0xa8>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4652      	mov	r2, sl
 800eb6e:	4641      	mov	r1, r8
 800eb70:	4638      	mov	r0, r7
 800eb72:	47c8      	blx	r9
 800eb74:	3001      	adds	r0, #1
 800eb76:	d103      	bne.n	800eb80 <_printf_common+0xac>
 800eb78:	f04f 30ff 	mov.w	r0, #4294967295
 800eb7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb80:	3501      	adds	r5, #1
 800eb82:	e7c6      	b.n	800eb12 <_printf_common+0x3e>
 800eb84:	18e1      	adds	r1, r4, r3
 800eb86:	1c5a      	adds	r2, r3, #1
 800eb88:	2030      	movs	r0, #48	@ 0x30
 800eb8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb8e:	4422      	add	r2, r4
 800eb90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb98:	3302      	adds	r3, #2
 800eb9a:	e7c7      	b.n	800eb2c <_printf_common+0x58>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	4622      	mov	r2, r4
 800eba0:	4641      	mov	r1, r8
 800eba2:	4638      	mov	r0, r7
 800eba4:	47c8      	blx	r9
 800eba6:	3001      	adds	r0, #1
 800eba8:	d0e6      	beq.n	800eb78 <_printf_common+0xa4>
 800ebaa:	3601      	adds	r6, #1
 800ebac:	e7d9      	b.n	800eb62 <_printf_common+0x8e>
	...

0800ebb0 <_printf_i>:
 800ebb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebb4:	7e0f      	ldrb	r7, [r1, #24]
 800ebb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ebb8:	2f78      	cmp	r7, #120	@ 0x78
 800ebba:	4691      	mov	r9, r2
 800ebbc:	4680      	mov	r8, r0
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	469a      	mov	sl, r3
 800ebc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ebc6:	d807      	bhi.n	800ebd8 <_printf_i+0x28>
 800ebc8:	2f62      	cmp	r7, #98	@ 0x62
 800ebca:	d80a      	bhi.n	800ebe2 <_printf_i+0x32>
 800ebcc:	2f00      	cmp	r7, #0
 800ebce:	f000 80d2 	beq.w	800ed76 <_printf_i+0x1c6>
 800ebd2:	2f58      	cmp	r7, #88	@ 0x58
 800ebd4:	f000 80b9 	beq.w	800ed4a <_printf_i+0x19a>
 800ebd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ebe0:	e03a      	b.n	800ec58 <_printf_i+0xa8>
 800ebe2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ebe6:	2b15      	cmp	r3, #21
 800ebe8:	d8f6      	bhi.n	800ebd8 <_printf_i+0x28>
 800ebea:	a101      	add	r1, pc, #4	@ (adr r1, 800ebf0 <_printf_i+0x40>)
 800ebec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebf0:	0800ec49 	.word	0x0800ec49
 800ebf4:	0800ec5d 	.word	0x0800ec5d
 800ebf8:	0800ebd9 	.word	0x0800ebd9
 800ebfc:	0800ebd9 	.word	0x0800ebd9
 800ec00:	0800ebd9 	.word	0x0800ebd9
 800ec04:	0800ebd9 	.word	0x0800ebd9
 800ec08:	0800ec5d 	.word	0x0800ec5d
 800ec0c:	0800ebd9 	.word	0x0800ebd9
 800ec10:	0800ebd9 	.word	0x0800ebd9
 800ec14:	0800ebd9 	.word	0x0800ebd9
 800ec18:	0800ebd9 	.word	0x0800ebd9
 800ec1c:	0800ed5d 	.word	0x0800ed5d
 800ec20:	0800ec87 	.word	0x0800ec87
 800ec24:	0800ed17 	.word	0x0800ed17
 800ec28:	0800ebd9 	.word	0x0800ebd9
 800ec2c:	0800ebd9 	.word	0x0800ebd9
 800ec30:	0800ed7f 	.word	0x0800ed7f
 800ec34:	0800ebd9 	.word	0x0800ebd9
 800ec38:	0800ec87 	.word	0x0800ec87
 800ec3c:	0800ebd9 	.word	0x0800ebd9
 800ec40:	0800ebd9 	.word	0x0800ebd9
 800ec44:	0800ed1f 	.word	0x0800ed1f
 800ec48:	6833      	ldr	r3, [r6, #0]
 800ec4a:	1d1a      	adds	r2, r3, #4
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	6032      	str	r2, [r6, #0]
 800ec50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec58:	2301      	movs	r3, #1
 800ec5a:	e09d      	b.n	800ed98 <_printf_i+0x1e8>
 800ec5c:	6833      	ldr	r3, [r6, #0]
 800ec5e:	6820      	ldr	r0, [r4, #0]
 800ec60:	1d19      	adds	r1, r3, #4
 800ec62:	6031      	str	r1, [r6, #0]
 800ec64:	0606      	lsls	r6, r0, #24
 800ec66:	d501      	bpl.n	800ec6c <_printf_i+0xbc>
 800ec68:	681d      	ldr	r5, [r3, #0]
 800ec6a:	e003      	b.n	800ec74 <_printf_i+0xc4>
 800ec6c:	0645      	lsls	r5, r0, #25
 800ec6e:	d5fb      	bpl.n	800ec68 <_printf_i+0xb8>
 800ec70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec74:	2d00      	cmp	r5, #0
 800ec76:	da03      	bge.n	800ec80 <_printf_i+0xd0>
 800ec78:	232d      	movs	r3, #45	@ 0x2d
 800ec7a:	426d      	negs	r5, r5
 800ec7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec80:	4859      	ldr	r0, [pc, #356]	@ (800ede8 <_printf_i+0x238>)
 800ec82:	230a      	movs	r3, #10
 800ec84:	e011      	b.n	800ecaa <_printf_i+0xfa>
 800ec86:	6821      	ldr	r1, [r4, #0]
 800ec88:	6833      	ldr	r3, [r6, #0]
 800ec8a:	0608      	lsls	r0, r1, #24
 800ec8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec90:	d402      	bmi.n	800ec98 <_printf_i+0xe8>
 800ec92:	0649      	lsls	r1, r1, #25
 800ec94:	bf48      	it	mi
 800ec96:	b2ad      	uxthmi	r5, r5
 800ec98:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec9a:	4853      	ldr	r0, [pc, #332]	@ (800ede8 <_printf_i+0x238>)
 800ec9c:	6033      	str	r3, [r6, #0]
 800ec9e:	bf14      	ite	ne
 800eca0:	230a      	movne	r3, #10
 800eca2:	2308      	moveq	r3, #8
 800eca4:	2100      	movs	r1, #0
 800eca6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ecaa:	6866      	ldr	r6, [r4, #4]
 800ecac:	60a6      	str	r6, [r4, #8]
 800ecae:	2e00      	cmp	r6, #0
 800ecb0:	bfa2      	ittt	ge
 800ecb2:	6821      	ldrge	r1, [r4, #0]
 800ecb4:	f021 0104 	bicge.w	r1, r1, #4
 800ecb8:	6021      	strge	r1, [r4, #0]
 800ecba:	b90d      	cbnz	r5, 800ecc0 <_printf_i+0x110>
 800ecbc:	2e00      	cmp	r6, #0
 800ecbe:	d04b      	beq.n	800ed58 <_printf_i+0x1a8>
 800ecc0:	4616      	mov	r6, r2
 800ecc2:	fbb5 f1f3 	udiv	r1, r5, r3
 800ecc6:	fb03 5711 	mls	r7, r3, r1, r5
 800ecca:	5dc7      	ldrb	r7, [r0, r7]
 800eccc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ecd0:	462f      	mov	r7, r5
 800ecd2:	42bb      	cmp	r3, r7
 800ecd4:	460d      	mov	r5, r1
 800ecd6:	d9f4      	bls.n	800ecc2 <_printf_i+0x112>
 800ecd8:	2b08      	cmp	r3, #8
 800ecda:	d10b      	bne.n	800ecf4 <_printf_i+0x144>
 800ecdc:	6823      	ldr	r3, [r4, #0]
 800ecde:	07df      	lsls	r7, r3, #31
 800ece0:	d508      	bpl.n	800ecf4 <_printf_i+0x144>
 800ece2:	6923      	ldr	r3, [r4, #16]
 800ece4:	6861      	ldr	r1, [r4, #4]
 800ece6:	4299      	cmp	r1, r3
 800ece8:	bfde      	ittt	le
 800ecea:	2330      	movle	r3, #48	@ 0x30
 800ecec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ecf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ecf4:	1b92      	subs	r2, r2, r6
 800ecf6:	6122      	str	r2, [r4, #16]
 800ecf8:	f8cd a000 	str.w	sl, [sp]
 800ecfc:	464b      	mov	r3, r9
 800ecfe:	aa03      	add	r2, sp, #12
 800ed00:	4621      	mov	r1, r4
 800ed02:	4640      	mov	r0, r8
 800ed04:	f7ff fee6 	bl	800ead4 <_printf_common>
 800ed08:	3001      	adds	r0, #1
 800ed0a:	d14a      	bne.n	800eda2 <_printf_i+0x1f2>
 800ed0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed10:	b004      	add	sp, #16
 800ed12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed16:	6823      	ldr	r3, [r4, #0]
 800ed18:	f043 0320 	orr.w	r3, r3, #32
 800ed1c:	6023      	str	r3, [r4, #0]
 800ed1e:	4833      	ldr	r0, [pc, #204]	@ (800edec <_printf_i+0x23c>)
 800ed20:	2778      	movs	r7, #120	@ 0x78
 800ed22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed26:	6823      	ldr	r3, [r4, #0]
 800ed28:	6831      	ldr	r1, [r6, #0]
 800ed2a:	061f      	lsls	r7, r3, #24
 800ed2c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed30:	d402      	bmi.n	800ed38 <_printf_i+0x188>
 800ed32:	065f      	lsls	r7, r3, #25
 800ed34:	bf48      	it	mi
 800ed36:	b2ad      	uxthmi	r5, r5
 800ed38:	6031      	str	r1, [r6, #0]
 800ed3a:	07d9      	lsls	r1, r3, #31
 800ed3c:	bf44      	itt	mi
 800ed3e:	f043 0320 	orrmi.w	r3, r3, #32
 800ed42:	6023      	strmi	r3, [r4, #0]
 800ed44:	b11d      	cbz	r5, 800ed4e <_printf_i+0x19e>
 800ed46:	2310      	movs	r3, #16
 800ed48:	e7ac      	b.n	800eca4 <_printf_i+0xf4>
 800ed4a:	4827      	ldr	r0, [pc, #156]	@ (800ede8 <_printf_i+0x238>)
 800ed4c:	e7e9      	b.n	800ed22 <_printf_i+0x172>
 800ed4e:	6823      	ldr	r3, [r4, #0]
 800ed50:	f023 0320 	bic.w	r3, r3, #32
 800ed54:	6023      	str	r3, [r4, #0]
 800ed56:	e7f6      	b.n	800ed46 <_printf_i+0x196>
 800ed58:	4616      	mov	r6, r2
 800ed5a:	e7bd      	b.n	800ecd8 <_printf_i+0x128>
 800ed5c:	6833      	ldr	r3, [r6, #0]
 800ed5e:	6825      	ldr	r5, [r4, #0]
 800ed60:	6961      	ldr	r1, [r4, #20]
 800ed62:	1d18      	adds	r0, r3, #4
 800ed64:	6030      	str	r0, [r6, #0]
 800ed66:	062e      	lsls	r6, r5, #24
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	d501      	bpl.n	800ed70 <_printf_i+0x1c0>
 800ed6c:	6019      	str	r1, [r3, #0]
 800ed6e:	e002      	b.n	800ed76 <_printf_i+0x1c6>
 800ed70:	0668      	lsls	r0, r5, #25
 800ed72:	d5fb      	bpl.n	800ed6c <_printf_i+0x1bc>
 800ed74:	8019      	strh	r1, [r3, #0]
 800ed76:	2300      	movs	r3, #0
 800ed78:	6123      	str	r3, [r4, #16]
 800ed7a:	4616      	mov	r6, r2
 800ed7c:	e7bc      	b.n	800ecf8 <_printf_i+0x148>
 800ed7e:	6833      	ldr	r3, [r6, #0]
 800ed80:	1d1a      	adds	r2, r3, #4
 800ed82:	6032      	str	r2, [r6, #0]
 800ed84:	681e      	ldr	r6, [r3, #0]
 800ed86:	6862      	ldr	r2, [r4, #4]
 800ed88:	2100      	movs	r1, #0
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	f7f1 fa48 	bl	8000220 <memchr>
 800ed90:	b108      	cbz	r0, 800ed96 <_printf_i+0x1e6>
 800ed92:	1b80      	subs	r0, r0, r6
 800ed94:	6060      	str	r0, [r4, #4]
 800ed96:	6863      	ldr	r3, [r4, #4]
 800ed98:	6123      	str	r3, [r4, #16]
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eda0:	e7aa      	b.n	800ecf8 <_printf_i+0x148>
 800eda2:	6923      	ldr	r3, [r4, #16]
 800eda4:	4632      	mov	r2, r6
 800eda6:	4649      	mov	r1, r9
 800eda8:	4640      	mov	r0, r8
 800edaa:	47d0      	blx	sl
 800edac:	3001      	adds	r0, #1
 800edae:	d0ad      	beq.n	800ed0c <_printf_i+0x15c>
 800edb0:	6823      	ldr	r3, [r4, #0]
 800edb2:	079b      	lsls	r3, r3, #30
 800edb4:	d413      	bmi.n	800edde <_printf_i+0x22e>
 800edb6:	68e0      	ldr	r0, [r4, #12]
 800edb8:	9b03      	ldr	r3, [sp, #12]
 800edba:	4298      	cmp	r0, r3
 800edbc:	bfb8      	it	lt
 800edbe:	4618      	movlt	r0, r3
 800edc0:	e7a6      	b.n	800ed10 <_printf_i+0x160>
 800edc2:	2301      	movs	r3, #1
 800edc4:	4632      	mov	r2, r6
 800edc6:	4649      	mov	r1, r9
 800edc8:	4640      	mov	r0, r8
 800edca:	47d0      	blx	sl
 800edcc:	3001      	adds	r0, #1
 800edce:	d09d      	beq.n	800ed0c <_printf_i+0x15c>
 800edd0:	3501      	adds	r5, #1
 800edd2:	68e3      	ldr	r3, [r4, #12]
 800edd4:	9903      	ldr	r1, [sp, #12]
 800edd6:	1a5b      	subs	r3, r3, r1
 800edd8:	42ab      	cmp	r3, r5
 800edda:	dcf2      	bgt.n	800edc2 <_printf_i+0x212>
 800eddc:	e7eb      	b.n	800edb6 <_printf_i+0x206>
 800edde:	2500      	movs	r5, #0
 800ede0:	f104 0619 	add.w	r6, r4, #25
 800ede4:	e7f5      	b.n	800edd2 <_printf_i+0x222>
 800ede6:	bf00      	nop
 800ede8:	080124e0 	.word	0x080124e0
 800edec:	080124f1 	.word	0x080124f1

0800edf0 <__sflush_r>:
 800edf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf8:	0716      	lsls	r6, r2, #28
 800edfa:	4605      	mov	r5, r0
 800edfc:	460c      	mov	r4, r1
 800edfe:	d454      	bmi.n	800eeaa <__sflush_r+0xba>
 800ee00:	684b      	ldr	r3, [r1, #4]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	dc02      	bgt.n	800ee0c <__sflush_r+0x1c>
 800ee06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	dd48      	ble.n	800ee9e <__sflush_r+0xae>
 800ee0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee0e:	2e00      	cmp	r6, #0
 800ee10:	d045      	beq.n	800ee9e <__sflush_r+0xae>
 800ee12:	2300      	movs	r3, #0
 800ee14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ee18:	682f      	ldr	r7, [r5, #0]
 800ee1a:	6a21      	ldr	r1, [r4, #32]
 800ee1c:	602b      	str	r3, [r5, #0]
 800ee1e:	d030      	beq.n	800ee82 <__sflush_r+0x92>
 800ee20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ee22:	89a3      	ldrh	r3, [r4, #12]
 800ee24:	0759      	lsls	r1, r3, #29
 800ee26:	d505      	bpl.n	800ee34 <__sflush_r+0x44>
 800ee28:	6863      	ldr	r3, [r4, #4]
 800ee2a:	1ad2      	subs	r2, r2, r3
 800ee2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ee2e:	b10b      	cbz	r3, 800ee34 <__sflush_r+0x44>
 800ee30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ee32:	1ad2      	subs	r2, r2, r3
 800ee34:	2300      	movs	r3, #0
 800ee36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee38:	6a21      	ldr	r1, [r4, #32]
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	47b0      	blx	r6
 800ee3e:	1c43      	adds	r3, r0, #1
 800ee40:	89a3      	ldrh	r3, [r4, #12]
 800ee42:	d106      	bne.n	800ee52 <__sflush_r+0x62>
 800ee44:	6829      	ldr	r1, [r5, #0]
 800ee46:	291d      	cmp	r1, #29
 800ee48:	d82b      	bhi.n	800eea2 <__sflush_r+0xb2>
 800ee4a:	4a2a      	ldr	r2, [pc, #168]	@ (800eef4 <__sflush_r+0x104>)
 800ee4c:	410a      	asrs	r2, r1
 800ee4e:	07d6      	lsls	r6, r2, #31
 800ee50:	d427      	bmi.n	800eea2 <__sflush_r+0xb2>
 800ee52:	2200      	movs	r2, #0
 800ee54:	6062      	str	r2, [r4, #4]
 800ee56:	04d9      	lsls	r1, r3, #19
 800ee58:	6922      	ldr	r2, [r4, #16]
 800ee5a:	6022      	str	r2, [r4, #0]
 800ee5c:	d504      	bpl.n	800ee68 <__sflush_r+0x78>
 800ee5e:	1c42      	adds	r2, r0, #1
 800ee60:	d101      	bne.n	800ee66 <__sflush_r+0x76>
 800ee62:	682b      	ldr	r3, [r5, #0]
 800ee64:	b903      	cbnz	r3, 800ee68 <__sflush_r+0x78>
 800ee66:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee6a:	602f      	str	r7, [r5, #0]
 800ee6c:	b1b9      	cbz	r1, 800ee9e <__sflush_r+0xae>
 800ee6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee72:	4299      	cmp	r1, r3
 800ee74:	d002      	beq.n	800ee7c <__sflush_r+0x8c>
 800ee76:	4628      	mov	r0, r5
 800ee78:	f7ff fca0 	bl	800e7bc <_free_r>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee80:	e00d      	b.n	800ee9e <__sflush_r+0xae>
 800ee82:	2301      	movs	r3, #1
 800ee84:	4628      	mov	r0, r5
 800ee86:	47b0      	blx	r6
 800ee88:	4602      	mov	r2, r0
 800ee8a:	1c50      	adds	r0, r2, #1
 800ee8c:	d1c9      	bne.n	800ee22 <__sflush_r+0x32>
 800ee8e:	682b      	ldr	r3, [r5, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d0c6      	beq.n	800ee22 <__sflush_r+0x32>
 800ee94:	2b1d      	cmp	r3, #29
 800ee96:	d001      	beq.n	800ee9c <__sflush_r+0xac>
 800ee98:	2b16      	cmp	r3, #22
 800ee9a:	d11e      	bne.n	800eeda <__sflush_r+0xea>
 800ee9c:	602f      	str	r7, [r5, #0]
 800ee9e:	2000      	movs	r0, #0
 800eea0:	e022      	b.n	800eee8 <__sflush_r+0xf8>
 800eea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eea6:	b21b      	sxth	r3, r3
 800eea8:	e01b      	b.n	800eee2 <__sflush_r+0xf2>
 800eeaa:	690f      	ldr	r7, [r1, #16]
 800eeac:	2f00      	cmp	r7, #0
 800eeae:	d0f6      	beq.n	800ee9e <__sflush_r+0xae>
 800eeb0:	0793      	lsls	r3, r2, #30
 800eeb2:	680e      	ldr	r6, [r1, #0]
 800eeb4:	bf08      	it	eq
 800eeb6:	694b      	ldreq	r3, [r1, #20]
 800eeb8:	600f      	str	r7, [r1, #0]
 800eeba:	bf18      	it	ne
 800eebc:	2300      	movne	r3, #0
 800eebe:	eba6 0807 	sub.w	r8, r6, r7
 800eec2:	608b      	str	r3, [r1, #8]
 800eec4:	f1b8 0f00 	cmp.w	r8, #0
 800eec8:	dde9      	ble.n	800ee9e <__sflush_r+0xae>
 800eeca:	6a21      	ldr	r1, [r4, #32]
 800eecc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eece:	4643      	mov	r3, r8
 800eed0:	463a      	mov	r2, r7
 800eed2:	4628      	mov	r0, r5
 800eed4:	47b0      	blx	r6
 800eed6:	2800      	cmp	r0, #0
 800eed8:	dc08      	bgt.n	800eeec <__sflush_r+0xfc>
 800eeda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eee2:	81a3      	strh	r3, [r4, #12]
 800eee4:	f04f 30ff 	mov.w	r0, #4294967295
 800eee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeec:	4407      	add	r7, r0
 800eeee:	eba8 0800 	sub.w	r8, r8, r0
 800eef2:	e7e7      	b.n	800eec4 <__sflush_r+0xd4>
 800eef4:	dfbffffe 	.word	0xdfbffffe

0800eef8 <_fflush_r>:
 800eef8:	b538      	push	{r3, r4, r5, lr}
 800eefa:	690b      	ldr	r3, [r1, #16]
 800eefc:	4605      	mov	r5, r0
 800eefe:	460c      	mov	r4, r1
 800ef00:	b913      	cbnz	r3, 800ef08 <_fflush_r+0x10>
 800ef02:	2500      	movs	r5, #0
 800ef04:	4628      	mov	r0, r5
 800ef06:	bd38      	pop	{r3, r4, r5, pc}
 800ef08:	b118      	cbz	r0, 800ef12 <_fflush_r+0x1a>
 800ef0a:	6a03      	ldr	r3, [r0, #32]
 800ef0c:	b90b      	cbnz	r3, 800ef12 <_fflush_r+0x1a>
 800ef0e:	f7ff fa1d 	bl	800e34c <__sinit>
 800ef12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d0f3      	beq.n	800ef02 <_fflush_r+0xa>
 800ef1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ef1c:	07d0      	lsls	r0, r2, #31
 800ef1e:	d404      	bmi.n	800ef2a <_fflush_r+0x32>
 800ef20:	0599      	lsls	r1, r3, #22
 800ef22:	d402      	bmi.n	800ef2a <_fflush_r+0x32>
 800ef24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef26:	f7ff fc1a 	bl	800e75e <__retarget_lock_acquire_recursive>
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	4621      	mov	r1, r4
 800ef2e:	f7ff ff5f 	bl	800edf0 <__sflush_r>
 800ef32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef34:	07da      	lsls	r2, r3, #31
 800ef36:	4605      	mov	r5, r0
 800ef38:	d4e4      	bmi.n	800ef04 <_fflush_r+0xc>
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	059b      	lsls	r3, r3, #22
 800ef3e:	d4e1      	bmi.n	800ef04 <_fflush_r+0xc>
 800ef40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef42:	f7ff fc0d 	bl	800e760 <__retarget_lock_release_recursive>
 800ef46:	e7dd      	b.n	800ef04 <_fflush_r+0xc>

0800ef48 <fiprintf>:
 800ef48:	b40e      	push	{r1, r2, r3}
 800ef4a:	b503      	push	{r0, r1, lr}
 800ef4c:	4601      	mov	r1, r0
 800ef4e:	ab03      	add	r3, sp, #12
 800ef50:	4805      	ldr	r0, [pc, #20]	@ (800ef68 <fiprintf+0x20>)
 800ef52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef56:	6800      	ldr	r0, [r0, #0]
 800ef58:	9301      	str	r3, [sp, #4]
 800ef5a:	f7ff fca3 	bl	800e8a4 <_vfiprintf_r>
 800ef5e:	b002      	add	sp, #8
 800ef60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef64:	b003      	add	sp, #12
 800ef66:	4770      	bx	lr
 800ef68:	20000050 	.word	0x20000050

0800ef6c <__swhatbuf_r>:
 800ef6c:	b570      	push	{r4, r5, r6, lr}
 800ef6e:	460c      	mov	r4, r1
 800ef70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef74:	2900      	cmp	r1, #0
 800ef76:	b096      	sub	sp, #88	@ 0x58
 800ef78:	4615      	mov	r5, r2
 800ef7a:	461e      	mov	r6, r3
 800ef7c:	da0d      	bge.n	800ef9a <__swhatbuf_r+0x2e>
 800ef7e:	89a3      	ldrh	r3, [r4, #12]
 800ef80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ef84:	f04f 0100 	mov.w	r1, #0
 800ef88:	bf14      	ite	ne
 800ef8a:	2340      	movne	r3, #64	@ 0x40
 800ef8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ef90:	2000      	movs	r0, #0
 800ef92:	6031      	str	r1, [r6, #0]
 800ef94:	602b      	str	r3, [r5, #0]
 800ef96:	b016      	add	sp, #88	@ 0x58
 800ef98:	bd70      	pop	{r4, r5, r6, pc}
 800ef9a:	466a      	mov	r2, sp
 800ef9c:	f000 f848 	bl	800f030 <_fstat_r>
 800efa0:	2800      	cmp	r0, #0
 800efa2:	dbec      	blt.n	800ef7e <__swhatbuf_r+0x12>
 800efa4:	9901      	ldr	r1, [sp, #4]
 800efa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800efaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800efae:	4259      	negs	r1, r3
 800efb0:	4159      	adcs	r1, r3
 800efb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800efb6:	e7eb      	b.n	800ef90 <__swhatbuf_r+0x24>

0800efb8 <__smakebuf_r>:
 800efb8:	898b      	ldrh	r3, [r1, #12]
 800efba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efbc:	079d      	lsls	r5, r3, #30
 800efbe:	4606      	mov	r6, r0
 800efc0:	460c      	mov	r4, r1
 800efc2:	d507      	bpl.n	800efd4 <__smakebuf_r+0x1c>
 800efc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800efc8:	6023      	str	r3, [r4, #0]
 800efca:	6123      	str	r3, [r4, #16]
 800efcc:	2301      	movs	r3, #1
 800efce:	6163      	str	r3, [r4, #20]
 800efd0:	b003      	add	sp, #12
 800efd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd4:	ab01      	add	r3, sp, #4
 800efd6:	466a      	mov	r2, sp
 800efd8:	f7ff ffc8 	bl	800ef6c <__swhatbuf_r>
 800efdc:	9f00      	ldr	r7, [sp, #0]
 800efde:	4605      	mov	r5, r0
 800efe0:	4639      	mov	r1, r7
 800efe2:	4630      	mov	r0, r6
 800efe4:	f7ff f85c 	bl	800e0a0 <_malloc_r>
 800efe8:	b948      	cbnz	r0, 800effe <__smakebuf_r+0x46>
 800efea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efee:	059a      	lsls	r2, r3, #22
 800eff0:	d4ee      	bmi.n	800efd0 <__smakebuf_r+0x18>
 800eff2:	f023 0303 	bic.w	r3, r3, #3
 800eff6:	f043 0302 	orr.w	r3, r3, #2
 800effa:	81a3      	strh	r3, [r4, #12]
 800effc:	e7e2      	b.n	800efc4 <__smakebuf_r+0xc>
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	6020      	str	r0, [r4, #0]
 800f002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f006:	81a3      	strh	r3, [r4, #12]
 800f008:	9b01      	ldr	r3, [sp, #4]
 800f00a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f00e:	b15b      	cbz	r3, 800f028 <__smakebuf_r+0x70>
 800f010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f014:	4630      	mov	r0, r6
 800f016:	f000 f81d 	bl	800f054 <_isatty_r>
 800f01a:	b128      	cbz	r0, 800f028 <__smakebuf_r+0x70>
 800f01c:	89a3      	ldrh	r3, [r4, #12]
 800f01e:	f023 0303 	bic.w	r3, r3, #3
 800f022:	f043 0301 	orr.w	r3, r3, #1
 800f026:	81a3      	strh	r3, [r4, #12]
 800f028:	89a3      	ldrh	r3, [r4, #12]
 800f02a:	431d      	orrs	r5, r3
 800f02c:	81a5      	strh	r5, [r4, #12]
 800f02e:	e7cf      	b.n	800efd0 <__smakebuf_r+0x18>

0800f030 <_fstat_r>:
 800f030:	b538      	push	{r3, r4, r5, lr}
 800f032:	4d07      	ldr	r5, [pc, #28]	@ (800f050 <_fstat_r+0x20>)
 800f034:	2300      	movs	r3, #0
 800f036:	4604      	mov	r4, r0
 800f038:	4608      	mov	r0, r1
 800f03a:	4611      	mov	r1, r2
 800f03c:	602b      	str	r3, [r5, #0]
 800f03e:	f7f1 ff82 	bl	8000f46 <_fstat>
 800f042:	1c43      	adds	r3, r0, #1
 800f044:	d102      	bne.n	800f04c <_fstat_r+0x1c>
 800f046:	682b      	ldr	r3, [r5, #0]
 800f048:	b103      	cbz	r3, 800f04c <_fstat_r+0x1c>
 800f04a:	6023      	str	r3, [r4, #0]
 800f04c:	bd38      	pop	{r3, r4, r5, pc}
 800f04e:	bf00      	nop
 800f050:	2003369c 	.word	0x2003369c

0800f054 <_isatty_r>:
 800f054:	b538      	push	{r3, r4, r5, lr}
 800f056:	4d06      	ldr	r5, [pc, #24]	@ (800f070 <_isatty_r+0x1c>)
 800f058:	2300      	movs	r3, #0
 800f05a:	4604      	mov	r4, r0
 800f05c:	4608      	mov	r0, r1
 800f05e:	602b      	str	r3, [r5, #0]
 800f060:	f7f1 ff76 	bl	8000f50 <_isatty>
 800f064:	1c43      	adds	r3, r0, #1
 800f066:	d102      	bne.n	800f06e <_isatty_r+0x1a>
 800f068:	682b      	ldr	r3, [r5, #0]
 800f06a:	b103      	cbz	r3, 800f06e <_isatty_r+0x1a>
 800f06c:	6023      	str	r3, [r4, #0]
 800f06e:	bd38      	pop	{r3, r4, r5, pc}
 800f070:	2003369c 	.word	0x2003369c

0800f074 <abort>:
 800f074:	b508      	push	{r3, lr}
 800f076:	2006      	movs	r0, #6
 800f078:	f000 f82c 	bl	800f0d4 <raise>
 800f07c:	2001      	movs	r0, #1
 800f07e:	f7f1 ff3d 	bl	8000efc <_exit>

0800f082 <_raise_r>:
 800f082:	291f      	cmp	r1, #31
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4605      	mov	r5, r0
 800f088:	460c      	mov	r4, r1
 800f08a:	d904      	bls.n	800f096 <_raise_r+0x14>
 800f08c:	2316      	movs	r3, #22
 800f08e:	6003      	str	r3, [r0, #0]
 800f090:	f04f 30ff 	mov.w	r0, #4294967295
 800f094:	bd38      	pop	{r3, r4, r5, pc}
 800f096:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f098:	b112      	cbz	r2, 800f0a0 <_raise_r+0x1e>
 800f09a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f09e:	b94b      	cbnz	r3, 800f0b4 <_raise_r+0x32>
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	f000 f831 	bl	800f108 <_getpid_r>
 800f0a6:	4622      	mov	r2, r4
 800f0a8:	4601      	mov	r1, r0
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0b0:	f000 b818 	b.w	800f0e4 <_kill_r>
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	d00a      	beq.n	800f0ce <_raise_r+0x4c>
 800f0b8:	1c59      	adds	r1, r3, #1
 800f0ba:	d103      	bne.n	800f0c4 <_raise_r+0x42>
 800f0bc:	2316      	movs	r3, #22
 800f0be:	6003      	str	r3, [r0, #0]
 800f0c0:	2001      	movs	r0, #1
 800f0c2:	e7e7      	b.n	800f094 <_raise_r+0x12>
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	4798      	blx	r3
 800f0ce:	2000      	movs	r0, #0
 800f0d0:	e7e0      	b.n	800f094 <_raise_r+0x12>
	...

0800f0d4 <raise>:
 800f0d4:	4b02      	ldr	r3, [pc, #8]	@ (800f0e0 <raise+0xc>)
 800f0d6:	4601      	mov	r1, r0
 800f0d8:	6818      	ldr	r0, [r3, #0]
 800f0da:	f7ff bfd2 	b.w	800f082 <_raise_r>
 800f0de:	bf00      	nop
 800f0e0:	20000050 	.word	0x20000050

0800f0e4 <_kill_r>:
 800f0e4:	b538      	push	{r3, r4, r5, lr}
 800f0e6:	4d07      	ldr	r5, [pc, #28]	@ (800f104 <_kill_r+0x20>)
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	4608      	mov	r0, r1
 800f0ee:	4611      	mov	r1, r2
 800f0f0:	602b      	str	r3, [r5, #0]
 800f0f2:	f7f1 fefb 	bl	8000eec <_kill>
 800f0f6:	1c43      	adds	r3, r0, #1
 800f0f8:	d102      	bne.n	800f100 <_kill_r+0x1c>
 800f0fa:	682b      	ldr	r3, [r5, #0]
 800f0fc:	b103      	cbz	r3, 800f100 <_kill_r+0x1c>
 800f0fe:	6023      	str	r3, [r4, #0]
 800f100:	bd38      	pop	{r3, r4, r5, pc}
 800f102:	bf00      	nop
 800f104:	2003369c 	.word	0x2003369c

0800f108 <_getpid_r>:
 800f108:	f7f1 beee 	b.w	8000ee8 <_getpid>

0800f10c <_init>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	bf00      	nop
 800f110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f112:	bc08      	pop	{r3}
 800f114:	469e      	mov	lr, r3
 800f116:	4770      	bx	lr

0800f118 <_fini>:
 800f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11a:	bf00      	nop
 800f11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f11e:	bc08      	pop	{r3}
 800f120:	469e      	mov	lr, r3
 800f122:	4770      	bx	lr
