
TCP_TEST_STM32F746_PJT_V0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e254  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002894  0800e424  0800e424  0000f424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cb8  08010cb8  000121cc  2**0
                  CONTENTS
  4 .ARM          00000008  08010cb8  08010cb8  00011cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cc0  08010cc0  000121cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cc0  08010cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cc4  08010cc4  00011cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08010cc8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 000000a0  2000008c  08010d54  0001208c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDecripSection 000000a0  2000012c  08010df4  0001212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00037630  200001d0  08010e94  000121d0  2**3
                  ALLOC
 12 ._user_heap_stack 00000c00  20037800  08010e94  00012800  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000121cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004279e  00000000  00000000  000121fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009f9d  00000000  00000000  0005499a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000160c8  00000000  00000000  0005e937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002160  00000000  00000000  00074a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000258f  00000000  00000000  00076b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00037d8c  00000000  00000000  000790ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00046264  00000000  00000000  000b0e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00112033  00000000  00000000  000f70df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00209112  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000696c  00000000  00000000  00209158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000075  00000000  00000000  0020fac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e40c 	.word	0x0800e40c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	0800e40c 	.word	0x0800e40c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <TCP_Server_Modbus>:
void TCP_Server_Modbus(void)
{
	volatile uint16_t i, j;
	uint16_t Data_Cnt = 0;

	if((u1f_eth_rx_buff_01[6] == Modbus.u.Header.ID)||(u1f_eth_rx_buff_01[6] == 0x01))
 80005a0:	4bba      	ldr	r3, [pc, #744]	@ (800088c <TCP_Server_Modbus+0x2ec>)
 80005a2:	4abb      	ldr	r2, [pc, #748]	@ (8000890 <TCP_Server_Modbus+0x2f0>)
{
 80005a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if((u1f_eth_rx_buff_01[6] == Modbus.u.Header.ID)||(u1f_eth_rx_buff_01[6] == 0x01))
 80005a8:	f8b2 26a2 	ldrh.w	r2, [r2, #1698]	@ 0x6a2
{
 80005ac:	b085      	sub	sp, #20
	if((u1f_eth_rx_buff_01[6] == Modbus.u.Header.ID)||(u1f_eth_rx_buff_01[6] == 0x01))
 80005ae:	7998      	ldrb	r0, [r3, #6]
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d002      	beq.n	80005ba <TCP_Server_Modbus+0x1a>
 80005b4:	2801      	cmp	r0, #1
 80005b6:	f040 81a5 	bne.w	8000904 <TCP_Server_Modbus+0x364>
	{
		//읽기 영억
		if(u1f_eth_rx_buff_01[7] == 0x03)
 80005ba:	79dc      	ldrb	r4, [r3, #7]
 80005bc:	2c03      	cmp	r4, #3
 80005be:	d177      	bne.n	80006b0 <TCP_Server_Modbus+0x110>
		{
			MORD.u.stream[0] = u1f_eth_rx_buff_01[6];  //Unit ID
 80005c0:	4ab4      	ldr	r2, [pc, #720]	@ (8000894 <TCP_Server_Modbus+0x2f4>)
			MORD.u.stream[1] = u1f_eth_rx_buff_01[7];  //Function code
			MORD.u.stream[2] = u1f_eth_rx_buff_01[9];  //Start Add
 80005c2:	7a59      	ldrb	r1, [r3, #9]
			MORD.u.stream[1] = u1f_eth_rx_buff_01[7];  //Function code
 80005c4:	7054      	strb	r4, [r2, #1]
			MORD.u.stream[2] = u1f_eth_rx_buff_01[9];  //Start Add
 80005c6:	7091      	strb	r1, [r2, #2]
			MORD.u.stream[3] = u1f_eth_rx_buff_01[8];  //Start_Add
 80005c8:	7a19      	ldrb	r1, [r3, #8]
			MORD.u.stream[0] = u1f_eth_rx_buff_01[6];  //Unit ID
 80005ca:	7010      	strb	r0, [r2, #0]
			MORD.u.stream[3] = u1f_eth_rx_buff_01[8];  //Start_Add
 80005cc:	70d1      	strb	r1, [r2, #3]
			MORD.u.stream[4] = u1f_eth_rx_buff_01[11]; //Length
 80005ce:	7ad9      	ldrb	r1, [r3, #11]
			MORD.u.stream[5] = u1f_eth_rx_buff_01[10]; //Length
			if(MORD.u.Header.Add == 40976)
 80005d0:	8854      	ldrh	r4, [r2, #2]
			MORD.u.stream[4] = u1f_eth_rx_buff_01[11]; //Length
 80005d2:	7111      	strb	r1, [r2, #4]
			MORD.u.stream[5] = u1f_eth_rx_buff_01[10]; //Length
 80005d4:	7a99      	ldrb	r1, [r3, #10]
 80005d6:	7151      	strb	r1, [r2, #5]
			if(MORD.u.Header.Add == 40976)
 80005d8:	f24a 0110 	movw	r1, #40976	@ 0xa010
 80005dc:	428c      	cmp	r4, r1
 80005de:	d107      	bne.n	80005f0 <TCP_Server_Modbus+0x50>
			{
				StandardCount++;
 80005e0:	4dad      	ldr	r5, [pc, #692]	@ (8000898 <TCP_Server_Modbus+0x2f8>)
 80005e2:	e9d5 1600 	ldrd	r1, r6, [r5]
 80005e6:	3101      	adds	r1, #1
 80005e8:	f146 0600 	adc.w	r6, r6, #0
 80005ec:	e9c5 1600 	strd	r1, r6, [r5]
			}
			j = MORD.u.Header.Inx*2 + 3;
 80005f0:	8895      	ldrh	r5, [r2, #4]

			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 80005f2:	781e      	ldrb	r6, [r3, #0]
			j = MORD.u.Header.Inx*2 + 3;
 80005f4:	006a      	lsls	r2, r5, #1
 80005f6:	b292      	uxth	r2, r2
 80005f8:	1cd1      	adds	r1, r2, #3
 80005fa:	b289      	uxth	r1, r1
 80005fc:	f8ad 100e 	strh.w	r1, [sp, #14]
			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 8000600:	49a6      	ldr	r1, [pc, #664]	@ (800089c <TCP_Server_Modbus+0x2fc>)
 8000602:	700e      	strb	r6, [r1, #0]
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 8000604:	785e      	ldrb	r6, [r3, #1]
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
			u1f_eth_tx_buff_01[4] = (unsigned char)(j >> 8);
			u1f_eth_tx_buff_01[5] = (unsigned char)(j); //길이정보

			u1f_eth_tx_buff_01[6] = u1f_eth_rx_buff_01[6]; //ID
 8000606:	7188      	strb	r0, [r1, #6]
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 8000608:	704e      	strb	r6, [r1, #1]
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 800060a:	789e      	ldrb	r6, [r3, #2]
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 800060c:	78db      	ldrb	r3, [r3, #3]
			u1f_eth_tx_buff_01[8] = MORD.u.Header.Inx*2*2;
			for(i=0;i<MORD.u.Header.Inx;i++)
			{
				j = MORD.u.Header.Add+i;

				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1];
 800060e:	48a4      	ldr	r0, [pc, #656]	@ (80008a0 <TCP_Server_Modbus+0x300>)
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 8000610:	70cb      	strb	r3, [r1, #3]
			u1f_eth_tx_buff_01[4] = (unsigned char)(j >> 8);
 8000612:	f8bd 300e 	ldrh.w	r3, [sp, #14]
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 8000616:	708e      	strb	r6, [r1, #2]
			u1f_eth_tx_buff_01[4] = (unsigned char)(j >> 8);
 8000618:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800061c:	710b      	strb	r3, [r1, #4]
			u1f_eth_tx_buff_01[5] = (unsigned char)(j); //길이정보
 800061e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000622:	714b      	strb	r3, [r1, #5]
			u1f_eth_tx_buff_01[7] = 0x03;               //FunctionCode
 8000624:	2303      	movs	r3, #3
 8000626:	71cb      	strb	r3, [r1, #7]
			u1f_eth_tx_buff_01[8] = MORD.u.Header.Inx*2*2;
 8000628:	00ab      	lsls	r3, r5, #2
 800062a:	720b      	strb	r3, [r1, #8]
			for(i=0;i<MORD.u.Header.Inx;i++)
 800062c:	2300      	movs	r3, #0
 800062e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8000632:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8000636:	b29b      	uxth	r3, r3
 8000638:	429d      	cmp	r5, r3
 800063a:	d814      	bhi.n	8000666 <TCP_Server_Modbus+0xc6>
				u1f_eth_tx_buff_01[9+i*2 + 1] = Modbus.u.stream[j*2];

			}

			Data_Cnt = (MORD.u.Header.Inx*2) + 9;
 800063c:	3209      	adds	r2, #9
			TCP_TX_COUNT_A++;
 800063e:	4999      	ldr	r1, [pc, #612]	@ (80008a4 <TCP_Server_Modbus+0x304>)
			Data_Cnt = (MORD.u.Header.Inx*2) + 9;
 8000640:	b292      	uxth	r2, r2
				u1f_eth_tx_buff_01[9+i*2 + 1] = Modbus.u.stream[j*2]; // 10

			}

			Data_Cnt = (MORD.u.Header.Inx*2) + 9;
			TCP_TX_COUNT_C++;
 8000642:	e9d1 3000 	ldrd	r3, r0, [r1]
 8000646:	3301      	adds	r3, #1
 8000648:	f140 0000 	adc.w	r0, r0, #0
 800064c:	e9c1 3000 	strd	r3, r0, [r1]
			 Data_Cnt = 12;
			 TCP_TX_COUNT_D++;
		}


		netconn_write(newconn_01, u1f_eth_tx_buff_01, Data_Cnt, NETCONN_COPY);
 8000650:	2300      	movs	r3, #0
 8000652:	4895      	ldr	r0, [pc, #596]	@ (80008a8 <TCP_Server_Modbus+0x308>)
 8000654:	4991      	ldr	r1, [pc, #580]	@ (800089c <TCP_Server_Modbus+0x2fc>)
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	6800      	ldr	r0, [r0, #0]
 800065c:	f005 f93a 	bl	80058d4 <netconn_write_partly>
	{
		Data_Cnt = 0;

		Check_ETH_ERR++;
	}
}
 8000660:	b005      	add	sp, #20
 8000662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				j = MORD.u.Header.Add+i;
 8000666:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800066a:	fa14 f383 	uxtah	r3, r4, r3
 800066e:	b29b      	uxth	r3, r3
 8000670:	f8ad 300e 	strh.w	r3, [sp, #14]
				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1];
 8000674:	f8bd 600e 	ldrh.w	r6, [sp, #14]
 8000678:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800067c:	b2b6      	uxth	r6, r6
 800067e:	b29b      	uxth	r3, r3
 8000680:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8000684:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000688:	7876      	ldrb	r6, [r6, #1]
 800068a:	725e      	strb	r6, [r3, #9]
				u1f_eth_tx_buff_01[9+i*2 + 1] = Modbus.u.stream[j*2];
 800068c:	f8bd 600e 	ldrh.w	r6, [sp, #14]
 8000690:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8000694:	b2b6      	uxth	r6, r6
 8000696:	b29b      	uxth	r3, r3
 8000698:	f810 6016 	ldrb.w	r6, [r0, r6, lsl #1]
 800069c:	3305      	adds	r3, #5
 800069e:	f801 6013 	strb.w	r6, [r1, r3, lsl #1]
			for(i=0;i<MORD.u.Header.Inx;i++)
 80006a2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80006a6:	3301      	adds	r3, #1
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80006ae:	e7c0      	b.n	8000632 <TCP_Server_Modbus+0x92>
		else if(u1f_eth_rx_buff_01[7] == 0x10) // broadcast
 80006b0:	2c10      	cmp	r4, #16
 80006b2:	d15e      	bne.n	8000772 <TCP_Server_Modbus+0x1d2>
			MOWR.u.stream[0] = u1f_eth_rx_buff_01[6];   //Unit ID
 80006b4:	4a7d      	ldr	r2, [pc, #500]	@ (80008ac <TCP_Server_Modbus+0x30c>)
			for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 80006b6:	2700      	movs	r7, #0
			MOWR.u.stream[2] = u1f_eth_rx_buff_01[9];   //Start Add
 80006b8:	7a5d      	ldrb	r5, [r3, #9]
			MOWR.u.stream[3] = u1f_eth_rx_buff_01[8];   //Start_Add
 80006ba:	7a1e      	ldrb	r6, [r3, #8]
			MOWR.u.stream[4] = u1f_eth_rx_buff_01[11];  //Length
 80006bc:	7ad9      	ldrb	r1, [r3, #11]
			MOWR.u.stream[1] = u1f_eth_rx_buff_01[7];   //Function code
 80006be:	7054      	strb	r4, [r2, #1]
			MOWR.u.stream[5] = u1f_eth_rx_buff_01[10];  //Length
 80006c0:	7a9c      	ldrb	r4, [r3, #10]
			MOWR.u.stream[2] = u1f_eth_rx_buff_01[9];   //Start Add
 80006c2:	7095      	strb	r5, [r2, #2]
			MOWR.u.stream[3] = u1f_eth_rx_buff_01[8];   //Start_Add
 80006c4:	70d6      	strb	r6, [r2, #3]
			MOWR.u.stream[4] = u1f_eth_rx_buff_01[11];  //Length
 80006c6:	7111      	strb	r1, [r2, #4]
			MOWR.u.stream[5] = u1f_eth_rx_buff_01[10];  //Length
 80006c8:	7154      	strb	r4, [r2, #5]
			for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 80006ca:	f8ad 700c 	strh.w	r7, [sp, #12]
 80006ce:	f8b2 c004 	ldrh.w	ip, [r2, #4]
				j = MOWR.u.Header.Add+i;
 80006d2:	f8b2 e002 	ldrh.w	lr, [r2, #2]
				Modbus.u.stream[(j*2)+1] = u1f_eth_rx_buff_01[(i*2)+13];
 80006d6:	4f72      	ldr	r7, [pc, #456]	@ (80008a0 <TCP_Server_Modbus+0x300>)
			MOWR.u.stream[0] = u1f_eth_rx_buff_01[6];   //Unit ID
 80006d8:	7010      	strb	r0, [r2, #0]
			for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 80006da:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80006de:	b292      	uxth	r2, r2
 80006e0:	4594      	cmp	ip, r2
 80006e2:	d81d      	bhi.n	8000720 <TCP_Server_Modbus+0x180>
			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 80006e4:	4a6d      	ldr	r2, [pc, #436]	@ (800089c <TCP_Server_Modbus+0x2fc>)
 80006e6:	781f      	ldrb	r7, [r3, #0]
			u1f_eth_tx_buff_01[6]  = u1f_eth_rx_buff_01[6];
 80006e8:	7190      	strb	r0, [r2, #6]
			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 80006ea:	7017      	strb	r7, [r2, #0]
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 80006ec:	785f      	ldrb	r7, [r3, #1]
			u1f_eth_tx_buff_01[8]  = u1f_eth_rx_buff_01[8];
 80006ee:	7216      	strb	r6, [r2, #8]
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 80006f0:	7057      	strb	r7, [r2, #1]
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 80006f2:	789f      	ldrb	r7, [r3, #2]
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 80006f4:	78db      	ldrb	r3, [r3, #3]
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 80006f6:	7097      	strb	r7, [r2, #2]
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 80006f8:	70d3      	strb	r3, [r2, #3]
			u1f_eth_tx_buff_01[4]  = 0;
 80006fa:	2300      	movs	r3, #0
			u1f_eth_tx_buff_01[9]  = u1f_eth_rx_buff_01[9];
 80006fc:	7255      	strb	r5, [r2, #9]
			u1f_eth_tx_buff_01[4]  = 0;
 80006fe:	7113      	strb	r3, [r2, #4]
			u1f_eth_tx_buff_01[5]  = 0x06;
 8000700:	2306      	movs	r3, #6
			u1f_eth_tx_buff_01[10] = u1f_eth_rx_buff_01[10];
 8000702:	7294      	strb	r4, [r2, #10]
			u1f_eth_tx_buff_01[5]  = 0x06;
 8000704:	7153      	strb	r3, [r2, #5]
			u1f_eth_tx_buff_01[7]  = u1f_eth_rx_buff_01[7];
 8000706:	2310      	movs	r3, #16
			u1f_eth_tx_buff_01[11] = u1f_eth_rx_buff_01[11];
 8000708:	72d1      	strb	r1, [r2, #11]
			u1f_eth_tx_buff_01[7]  = u1f_eth_rx_buff_01[7];
 800070a:	71d3      	strb	r3, [r2, #7]
			TCP_TX_COUNT_B++;
 800070c:	4a68      	ldr	r2, [pc, #416]	@ (80008b0 <TCP_Server_Modbus+0x310>)
			 TCP_TX_COUNT_D++;
 800070e:	e9d2 3100 	ldrd	r3, r1, [r2]
 8000712:	3301      	adds	r3, #1
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	e9c2 3100 	strd	r3, r1, [r2]
			Data_Cnt = 12;
 800071c:	220c      	movs	r2, #12
 800071e:	e797      	b.n	8000650 <TCP_Server_Modbus+0xb0>
				j = MOWR.u.Header.Add+i;
 8000720:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000724:	fa1e f282 	uxtah	r2, lr, r2
 8000728:	b292      	uxth	r2, r2
 800072a:	f8ad 200e 	strh.w	r2, [sp, #14]
				Modbus.u.stream[(j*2)+1] = u1f_eth_rx_buff_01[(i*2)+13];
 800072e:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 8000732:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8000736:	fa1f f888 	uxth.w	r8, r8
 800073a:	b292      	uxth	r2, r2
 800073c:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8000740:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8000744:	f898 800d 	ldrb.w	r8, [r8, #13]
 8000748:	f882 8001 	strb.w	r8, [r2, #1]
				Modbus.u.stream[j*2]     = u1f_eth_rx_buff_01[(i*2)+14];
 800074c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000750:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8000754:	b292      	uxth	r2, r2
 8000756:	fa1f f888 	uxth.w	r8, r8
 800075a:	3207      	adds	r2, #7
 800075c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8000760:	f807 2018 	strb.w	r2, [r7, r8, lsl #1]
			for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 8000764:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000768:	3201      	adds	r2, #1
 800076a:	b292      	uxth	r2, r2
 800076c:	f8ad 200c 	strh.w	r2, [sp, #12]
 8000770:	e7b3      	b.n	80006da <TCP_Server_Modbus+0x13a>
		else if(u1f_eth_rx_buff_01[7] == 0x01)
 8000772:	2c01      	cmp	r4, #1
 8000774:	d158      	bne.n	8000828 <TCP_Server_Modbus+0x288>
			MORD.u.stream[0] = u1f_eth_rx_buff_01[6];  //Unit ID
 8000776:	4d47      	ldr	r5, [pc, #284]	@ (8000894 <TCP_Server_Modbus+0x2f4>)
			MORD.u.stream[2] = u1f_eth_rx_buff_01[9];  //Start Add
 8000778:	7a5a      	ldrb	r2, [r3, #9]
			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 800077a:	781f      	ldrb	r7, [r3, #0]
			MORD.u.stream[2] = u1f_eth_rx_buff_01[9];  //Start Add
 800077c:	70aa      	strb	r2, [r5, #2]
			MORD.u.stream[3] = u1f_eth_rx_buff_01[8];  //Start_Add
 800077e:	7a1a      	ldrb	r2, [r3, #8]
			MORD.u.stream[0] = u1f_eth_rx_buff_01[6];  //Unit ID
 8000780:	7028      	strb	r0, [r5, #0]
			MORD.u.stream[3] = u1f_eth_rx_buff_01[8];  //Start_Add
 8000782:	70ea      	strb	r2, [r5, #3]
			MORD.u.stream[4] = u1f_eth_rx_buff_01[11]; //Length
 8000784:	7ada      	ldrb	r2, [r3, #11]
			MORD.u.stream[1] = u1f_eth_rx_buff_01[7];  //Function code
 8000786:	706c      	strb	r4, [r5, #1]
			MORD.u.stream[4] = u1f_eth_rx_buff_01[11]; //Length
 8000788:	712a      	strb	r2, [r5, #4]
			MORD.u.stream[5] = u1f_eth_rx_buff_01[10]; //Length
 800078a:	7a9a      	ldrb	r2, [r3, #10]
 800078c:	716a      	strb	r2, [r5, #5]
			MORD.u.Header.Inx = MORD.u.Header.Inx / 16;
 800078e:	88ae      	ldrh	r6, [r5, #4]
 8000790:	0936      	lsrs	r6, r6, #4
			j = MORD.u.Header.Inx*2 + 3;
 8000792:	0072      	lsls	r2, r6, #1
			MORD.u.Header.Inx = MORD.u.Header.Inx / 16;
 8000794:	80ae      	strh	r6, [r5, #4]
			j = MORD.u.Header.Inx*2 + 3;
 8000796:	1cd1      	adds	r1, r2, #3
 8000798:	f8ad 100e 	strh.w	r1, [sp, #14]
			u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 800079c:	493f      	ldr	r1, [pc, #252]	@ (800089c <TCP_Server_Modbus+0x2fc>)
 800079e:	700f      	strb	r7, [r1, #0]
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 80007a0:	785f      	ldrb	r7, [r3, #1]
			u1f_eth_tx_buff_01[6] = u1f_eth_rx_buff_01[6]; //ID
 80007a2:	7188      	strb	r0, [r1, #6]
			u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 80007a4:	704f      	strb	r7, [r1, #1]
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 80007a6:	789f      	ldrb	r7, [r3, #2]
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 80007a8:	78db      	ldrb	r3, [r3, #3]
			u1f_eth_tx_buff_01[7] = 0x01;               //FunctionCode
 80007aa:	71cc      	strb	r4, [r1, #7]
			u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 80007ac:	70cb      	strb	r3, [r1, #3]
			u1f_eth_tx_buff_01[4] = (unsigned char)(j >> 8);
 80007ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
				j = MORD.u.Header.Add+i;
 80007b2:	886c      	ldrh	r4, [r5, #2]
			u1f_eth_tx_buff_01[4] = (unsigned char)(j >> 8);
 80007b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1]; // 11
 80007b8:	4839      	ldr	r0, [pc, #228]	@ (80008a0 <TCP_Server_Modbus+0x300>)
			u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 80007ba:	708f      	strb	r7, [r1, #2]
			u1f_eth_tx_buff_01[4] = (unsigned char)(j >> 8);
 80007bc:	710b      	strb	r3, [r1, #4]
			u1f_eth_tx_buff_01[5] = (unsigned char)(j); //길이정보
 80007be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80007c2:	714b      	strb	r3, [r1, #5]
			u1f_eth_tx_buff_01[8] = MORD.u.Header.Inx*2*2;  // 4 * 4byte
 80007c4:	00b3      	lsls	r3, r6, #2
 80007c6:	720b      	strb	r3, [r1, #8]
			for(i=0;i<MORD.u.Header.Inx;i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 80007ce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	429e      	cmp	r6, r3
 80007d6:	d802      	bhi.n	80007de <TCP_Server_Modbus+0x23e>
			Data_Cnt = (MORD.u.Header.Inx*2) + 9;
 80007d8:	3209      	adds	r2, #9
			TCP_TX_COUNT_C++;
 80007da:	4936      	ldr	r1, [pc, #216]	@ (80008b4 <TCP_Server_Modbus+0x314>)
 80007dc:	e731      	b.n	8000642 <TCP_Server_Modbus+0xa2>
				j = MORD.u.Header.Add+i;
 80007de:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80007e2:	fa14 f383 	uxtah	r3, r4, r3
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	f8ad 300e 	strh.w	r3, [sp, #14]
				u1f_eth_tx_buff_01[9+i*2] = Modbus.u.stream[j*2+1]; // 11
 80007ec:	f8bd 500e 	ldrh.w	r5, [sp, #14]
 80007f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80007f4:	b2ad      	uxth	r5, r5
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80007fc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000800:	786d      	ldrb	r5, [r5, #1]
 8000802:	725d      	strb	r5, [r3, #9]
				u1f_eth_tx_buff_01[9+i*2 + 1] = Modbus.u.stream[j*2]; // 10
 8000804:	f8bd 500e 	ldrh.w	r5, [sp, #14]
 8000808:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800080c:	b2ad      	uxth	r5, r5
 800080e:	b29b      	uxth	r3, r3
 8000810:	f810 5015 	ldrb.w	r5, [r0, r5, lsl #1]
 8000814:	3305      	adds	r3, #5
 8000816:	f801 5013 	strb.w	r5, [r1, r3, lsl #1]
			for(i=0;i<MORD.u.Header.Inx;i++)
 800081a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	b29b      	uxth	r3, r3
 8000822:	f8ad 300c 	strh.w	r3, [sp, #12]
 8000826:	e7d2      	b.n	80007ce <TCP_Server_Modbus+0x22e>
		else if(u1f_eth_rx_buff_01[7] == 0x0F) // broadcast
 8000828:	2c0f      	cmp	r4, #15
 800082a:	d169      	bne.n	8000900 <TCP_Server_Modbus+0x360>
			 MOWR.u.stream[0] = u1f_eth_rx_buff_01[6];   //Unit ID
 800082c:	4a1f      	ldr	r2, [pc, #124]	@ (80008ac <TCP_Server_Modbus+0x30c>)
			 for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 800082e:	2700      	movs	r7, #0
			 MOWR.u.stream[2] = u1f_eth_rx_buff_01[9];   //Start Add
 8000830:	7a5d      	ldrb	r5, [r3, #9]
			 MOWR.u.stream[3] = u1f_eth_rx_buff_01[8];   //Start_Add
 8000832:	7a1e      	ldrb	r6, [r3, #8]
			 MOWR.u.stream[4] = u1f_eth_rx_buff_01[11];  //Length
 8000834:	7ad9      	ldrb	r1, [r3, #11]
			 MOWR.u.stream[1] = u1f_eth_rx_buff_01[7];   //Function code
 8000836:	7054      	strb	r4, [r2, #1]
			 MOWR.u.stream[5] = u1f_eth_rx_buff_01[10];  //Length
 8000838:	7a9c      	ldrb	r4, [r3, #10]
			 MOWR.u.stream[2] = u1f_eth_rx_buff_01[9];   //Start Add
 800083a:	7095      	strb	r5, [r2, #2]
			 MOWR.u.stream[3] = u1f_eth_rx_buff_01[8];   //Start_Add
 800083c:	70d6      	strb	r6, [r2, #3]
			 MOWR.u.stream[4] = u1f_eth_rx_buff_01[11];  //Length
 800083e:	7111      	strb	r1, [r2, #4]
			 MOWR.u.stream[5] = u1f_eth_rx_buff_01[10];  //Length
 8000840:	7154      	strb	r4, [r2, #5]
				j = MOWR.u.Header.Add+i;
 8000842:	f8b2 8002 	ldrh.w	r8, [r2, #2]
			 for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 8000846:	f8b2 e004 	ldrh.w	lr, [r2, #4]
				Modbus.u.stream[(j*2)+1] = u1f_eth_rx_buff_01[(i*2)+13];
 800084a:	f8df c054 	ldr.w	ip, [pc, #84]	@ 80008a0 <TCP_Server_Modbus+0x300>
			 MOWR.u.stream[0] = u1f_eth_rx_buff_01[6];   //Unit ID
 800084e:	7010      	strb	r0, [r2, #0]
			 for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 8000850:	f8ad 700c 	strh.w	r7, [sp, #12]
 8000854:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000858:	b292      	uxth	r2, r2
 800085a:	4596      	cmp	lr, r2
 800085c:	d82e      	bhi.n	80008bc <TCP_Server_Modbus+0x31c>
			 u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 800085e:	4a0f      	ldr	r2, [pc, #60]	@ (800089c <TCP_Server_Modbus+0x2fc>)
 8000860:	781f      	ldrb	r7, [r3, #0]
			 u1f_eth_tx_buff_01[6]  = u1f_eth_rx_buff_01[6];
 8000862:	7190      	strb	r0, [r2, #6]
			 u1f_eth_tx_buff_01[0] = u1f_eth_rx_buff_01[0];
 8000864:	7017      	strb	r7, [r2, #0]
			 u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 8000866:	785f      	ldrb	r7, [r3, #1]
			 u1f_eth_tx_buff_01[8]  = u1f_eth_rx_buff_01[8];
 8000868:	7216      	strb	r6, [r2, #8]
			 u1f_eth_tx_buff_01[1] = u1f_eth_rx_buff_01[1];
 800086a:	7057      	strb	r7, [r2, #1]
			 u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 800086c:	789f      	ldrb	r7, [r3, #2]
			 u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 800086e:	78db      	ldrb	r3, [r3, #3]
			 u1f_eth_tx_buff_01[2] = u1f_eth_rx_buff_01[2];
 8000870:	7097      	strb	r7, [r2, #2]
			 u1f_eth_tx_buff_01[3] = u1f_eth_rx_buff_01[3];
 8000872:	70d3      	strb	r3, [r2, #3]
			 u1f_eth_tx_buff_01[4]  = 0;
 8000874:	2300      	movs	r3, #0
			 u1f_eth_tx_buff_01[9]  = u1f_eth_rx_buff_01[9];
 8000876:	7255      	strb	r5, [r2, #9]
			 u1f_eth_tx_buff_01[4]  = 0;
 8000878:	7113      	strb	r3, [r2, #4]
			 u1f_eth_tx_buff_01[5]  = 0x06;
 800087a:	2306      	movs	r3, #6
			 u1f_eth_tx_buff_01[10] = u1f_eth_rx_buff_01[10];
 800087c:	7294      	strb	r4, [r2, #10]
			 u1f_eth_tx_buff_01[5]  = 0x06;
 800087e:	7153      	strb	r3, [r2, #5]
			 u1f_eth_tx_buff_01[7]  = u1f_eth_rx_buff_01[7];
 8000880:	230f      	movs	r3, #15
			 u1f_eth_tx_buff_01[11] = u1f_eth_rx_buff_01[11];
 8000882:	72d1      	strb	r1, [r2, #11]
			 u1f_eth_tx_buff_01[7]  = u1f_eth_rx_buff_01[7];
 8000884:	71d3      	strb	r3, [r2, #7]
			 TCP_TX_COUNT_D++;
 8000886:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <TCP_Server_Modbus+0x318>)
 8000888:	e741      	b.n	800070e <TCP_Server_Modbus+0x16e>
 800088a:	bf00      	nop
 800088c:	20000a22 	.word	0x20000a22
 8000890:	20018c22 	.word	0x20018c22
 8000894:	20019396 	.word	0x20019396
 8000898:	200001f0 	.word	0x200001f0
 800089c:	20000222 	.word	0x20000222
 80008a0:	20000c22 	.word	0x20000c22
 80008a4:	20000210 	.word	0x20000210
 80008a8:	200193a0 	.word	0x200193a0
 80008ac:	200192c6 	.word	0x200192c6
 80008b0:	20000208 	.word	0x20000208
 80008b4:	20000200 	.word	0x20000200
 80008b8:	200001f8 	.word	0x200001f8
				j = MOWR.u.Header.Add+i;
 80008bc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80008c0:	fa18 f282 	uxtah	r2, r8, r2
 80008c4:	b292      	uxth	r2, r2
 80008c6:	f8ad 200e 	strh.w	r2, [sp, #14]
				Modbus.u.stream[(j*2)+1] = u1f_eth_rx_buff_01[(i*2)+13];
 80008ca:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80008ce:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80008d2:	fa1f f989 	uxth.w	r9, r9
 80008d6:	b292      	uxth	r2, r2
 80008d8:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 80008dc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80008e0:	f899 900d 	ldrb.w	r9, [r9, #13]
 80008e4:	f882 9001 	strb.w	r9, [r2, #1]
				Modbus.u.stream[j*2]     = 0x00;
 80008e8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80008ec:	b292      	uxth	r2, r2
 80008ee:	f80c 7012 	strb.w	r7, [ip, r2, lsl #1]
			 for(i=0; i < MOWR.u.Header.Inx; i++)   //2  -> 0, 1
 80008f2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80008f6:	3201      	adds	r2, #1
 80008f8:	b292      	uxth	r2, r2
 80008fa:	f8ad 200c 	strh.w	r2, [sp, #12]
 80008fe:	e7a9      	b.n	8000854 <TCP_Server_Modbus+0x2b4>
	uint16_t Data_Cnt = 0;
 8000900:	2200      	movs	r2, #0
 8000902:	e6a5      	b.n	8000650 <TCP_Server_Modbus+0xb0>
		Check_ETH_ERR++;
 8000904:	4a02      	ldr	r2, [pc, #8]	@ (8000910 <TCP_Server_Modbus+0x370>)
 8000906:	6813      	ldr	r3, [r2, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	e6a8      	b.n	8000660 <TCP_Server_Modbus+0xc0>
 800090e:	bf00      	nop
 8000910:	200001ec 	.word	0x200001ec

08000914 <TCP_RX_DATA_TASK>:
	  conn_01 = netconn_new(NETCONN_TCP);
 8000914:	2200      	movs	r2, #0
 8000916:	2010      	movs	r0, #16
{
 8000918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  conn_01 = netconn_new(NETCONN_TCP);
 800091c:	4611      	mov	r1, r2
{
 800091e:	b085      	sub	sp, #20
	  conn_01 = netconn_new(NETCONN_TCP);
 8000920:	f004 feaa 	bl	8005678 <netconn_new_with_proto_and_callback>
	  netconn_bind(conn_01, IP_ADDR_ANY, TCP_Server_Port_01);
 8000924:	4b26      	ldr	r3, [pc, #152]	@ (80009c0 <TCP_RX_DATA_TASK+0xac>)
	  conn_01 = netconn_new(NETCONN_TCP);
 8000926:	4e27      	ldr	r6, [pc, #156]	@ (80009c4 <TCP_RX_DATA_TASK+0xb0>)
	  netconn_bind(conn_01, IP_ADDR_ANY, TCP_Server_Port_01);
 8000928:	881a      	ldrh	r2, [r3, #0]
 800092a:	4927      	ldr	r1, [pc, #156]	@ (80009c8 <TCP_RX_DATA_TASK+0xb4>)
	  conn_01 = netconn_new(NETCONN_TCP);
 800092c:	6030      	str	r0, [r6, #0]
	  netconn_bind(conn_01, IP_ADDR_ANY, TCP_Server_Port_01);
 800092e:	f004 ff1b 	bl	8005768 <netconn_bind>
	  LWIP_ERROR("tcpecho: invalid conn", (conn_01 != NULL), return;);
 8000932:	6830      	ldr	r0, [r6, #0]
 8000934:	b940      	cbnz	r0, 8000948 <TCP_RX_DATA_TASK+0x34>
 8000936:	4b25      	ldr	r3, [pc, #148]	@ (80009cc <TCP_RX_DATA_TASK+0xb8>)
 8000938:	223c      	movs	r2, #60	@ 0x3c
 800093a:	4925      	ldr	r1, [pc, #148]	@ (80009d0 <TCP_RX_DATA_TASK+0xbc>)
 800093c:	4825      	ldr	r0, [pc, #148]	@ (80009d4 <TCP_RX_DATA_TASK+0xc0>)
}
 800093e:	b005      	add	sp, #20
 8000940:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  LWIP_ERROR("tcpecho: invalid conn", (conn_01 != NULL), return;);
 8000944:	f00c be02 	b.w	800d54c <iprintf>
	    err = netconn_accept(conn_01, &newconn_01);
 8000948:	4c23      	ldr	r4, [pc, #140]	@ (80009d8 <TCP_RX_DATA_TASK+0xc4>)
	  netconn_listen(conn_01);
 800094a:	21ff      	movs	r1, #255	@ 0xff
				 memcpy(&u1f_eth_rx_buff_01, data, len);
 800094c:	4f23      	ldr	r7, [pc, #140]	@ (80009dc <TCP_RX_DATA_TASK+0xc8>)
	  netconn_listen(conn_01);
 800094e:	f004 ff31 	bl	80057b4 <netconn_listen_with_backlog>
	    err = netconn_accept(conn_01, &newconn_01);
 8000952:	4621      	mov	r1, r4
 8000954:	6830      	ldr	r0, [r6, #0]
 8000956:	f004 ffdb 	bl	8005910 <netconn_accept>
	    if(err == ERR_OK)
 800095a:	2800      	cmp	r0, #0
 800095c:	d1f9      	bne.n	8000952 <TCP_RX_DATA_TASK+0x3e>
				 u1f_eth_rx_length_01 = len;
 800095e:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 80009e4 <TCP_RX_DATA_TASK+0xd0>
	      while((err = netconn_recv(newconn_01, &buf)) == ERR_OK)
 8000962:	a902      	add	r1, sp, #8
 8000964:	6820      	ldr	r0, [r4, #0]
 8000966:	f005 f8eb 	bl	8005b40 <netconn_recv>
 800096a:	bb08      	cbnz	r0, 80009b0 <TCP_RX_DATA_TASK+0x9c>
				 Check_TCP_01_RX_Cnt++;
 800096c:	4d1c      	ldr	r5, [pc, #112]	@ (80009e0 <TCP_RX_DATA_TASK+0xcc>)
				 netbuf_data(buf, &data, &len);       //receive data pointer & length
 800096e:	f10d 0206 	add.w	r2, sp, #6
 8000972:	a903      	add	r1, sp, #12
 8000974:	9802      	ldr	r0, [sp, #8]
 8000976:	f006 f8c5 	bl	8006b04 <netbuf_data>
				 memcpy(&u1f_eth_rx_buff_01, data, len);
 800097a:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 800097e:	9903      	ldr	r1, [sp, #12]
 8000980:	4638      	mov	r0, r7
 8000982:	464a      	mov	r2, r9
 8000984:	f00c ff13 	bl	800d7ae <memcpy>
				 u1f_eth_rx_length_01 = len;
 8000988:	f8a8 9000 	strh.w	r9, [r8]
				 Check_TCP_01_RX_Cnt++;
 800098c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8000990:	3301      	adds	r3, #1
 8000992:	f142 0200 	adc.w	r2, r2, #0
 8000996:	e9c5 3200 	strd	r3, r2, [r5]
				   TCP_Server_Modbus();
 800099a:	f7ff fe01 	bl	80005a0 <TCP_Server_Modbus>
	        while(netbuf_next(buf) >= 0);  //check buffer empty
 800099e:	9802      	ldr	r0, [sp, #8]
 80009a0:	f006 f8dc 	bl	8006b5c <netbuf_next>
 80009a4:	2800      	cmp	r0, #0
 80009a6:	dae2      	bge.n	800096e <TCP_RX_DATA_TASK+0x5a>
	        netbuf_delete(buf);      	   //clear buffer
 80009a8:	9802      	ldr	r0, [sp, #8]
 80009aa:	f006 f899 	bl	8006ae0 <netbuf_delete>
 80009ae:	e7d8      	b.n	8000962 <TCP_RX_DATA_TASK+0x4e>
	      netconn_close(newconn_01);
 80009b0:	6820      	ldr	r0, [r4, #0]
 80009b2:	f004 ff9b 	bl	80058ec <netconn_close>
	      netconn_delete(newconn_01);         //clear buffer
 80009b6:	6820      	ldr	r0, [r4, #0]
 80009b8:	f004 fec8 	bl	800574c <netconn_delete>
 80009bc:	e7c9      	b.n	8000952 <TCP_RX_DATA_TASK+0x3e>
 80009be:	bf00      	nop
 80009c0:	20000000 	.word	0x20000000
 80009c4:	200193a4 	.word	0x200193a4
 80009c8:	080109a0 	.word	0x080109a0
 80009cc:	0800e424 	.word	0x0800e424
 80009d0:	0800e444 	.word	0x0800e444
 80009d4:	0800e45a 	.word	0x0800e45a
 80009d8:	200193a0 	.word	0x200193a0
 80009dc:	20000a22 	.word	0x20000a22
 80009e0:	20000218 	.word	0x20000218
 80009e4:	20000220 	.word	0x20000220

080009e8 <Task_Schedule>:




void Task_Schedule(void) // Task 스퀘줄링 함수
{
 80009e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	TimeTaskCnt.TimeScheduleCnt++;
 80009ea:	4f28      	ldr	r7, [pc, #160]	@ (8000a8c <Task_Schedule+0xa4>)
//	}
//
//
//	if((TimeTaskCnt.TimeScheduleCnt%1) == 0)    //10ms 카운터 체크
//	{
		TimeTask.bit.Task_10ms = 1;
 80009ec:	2205      	movs	r2, #5
 80009ee:	4c28      	ldr	r4, [pc, #160]	@ (8000a90 <Task_Schedule+0xa8>)
	TimeTaskCnt.TimeScheduleCnt++;
 80009f0:	e9d7 5600 	ldrd	r5, r6, [r7]
		TimeTask.bit.Task_10ms = 1;
 80009f4:	7823      	ldrb	r3, [r4, #0]
	TimeTaskCnt.TimeScheduleCnt++;
 80009f6:	3501      	adds	r5, #1
		TimeTask.bit.Task_10ms = 1;
 80009f8:	f043 0304 	orr.w	r3, r3, #4
	TimeTaskCnt.TimeScheduleCnt++;
 80009fc:	f146 0600 	adc.w	r6, r6, #0
		TimeTask.bit.Task_10ms = 1;
 8000a00:	4628      	mov	r0, r5
 8000a02:	7023      	strb	r3, [r4, #0]
 8000a04:	2300      	movs	r3, #0
 8000a06:	4631      	mov	r1, r6
	TimeTaskCnt.TimeScheduleCnt++;
 8000a08:	e9c7 5600 	strd	r5, r6, [r7]
		TimeTask.bit.Task_10ms = 1;
 8000a0c:	f7ff fc50 	bl	80002b0 <__aeabi_uldivmod>
//	}

	if((TimeTaskCnt.TimeScheduleCnt%5) == 0)    //50ms 카운터 체크
 8000a10:	431a      	orrs	r2, r3
	{
		TimeTask.bit.Task_50ms = 1;
 8000a12:	4631      	mov	r1, r6
 8000a14:	f04f 020a 	mov.w	r2, #10
 8000a18:	bf08      	it	eq
 8000a1a:	7823      	ldrbeq	r3, [r4, #0]
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	bf04      	itt	eq
 8000a20:	f043 0308 	orreq.w	r3, r3, #8
 8000a24:	7023      	strbeq	r3, [r4, #0]
 8000a26:	2300      	movs	r3, #0
 8000a28:	f7ff fc42 	bl	80002b0 <__aeabi_uldivmod>
	}

	if((TimeTaskCnt.TimeScheduleCnt%10) == 0)    //100ms 카운터 체크
 8000a2c:	431a      	orrs	r2, r3
	{
		TimeTask.bit.Task_100ms = 1;
 8000a2e:	4631      	mov	r1, r6
 8000a30:	f04f 0219 	mov.w	r2, #25
 8000a34:	bf08      	it	eq
 8000a36:	7823      	ldrbeq	r3, [r4, #0]
 8000a38:	4628      	mov	r0, r5
 8000a3a:	bf04      	itt	eq
 8000a3c:	f043 0310 	orreq.w	r3, r3, #16
 8000a40:	7023      	strbeq	r3, [r4, #0]
 8000a42:	2300      	movs	r3, #0
 8000a44:	f7ff fc34 	bl	80002b0 <__aeabi_uldivmod>
	}

	if((TimeTaskCnt.TimeScheduleCnt%25) == 0)    //250ms 카운터 체크
 8000a48:	431a      	orrs	r2, r3
	{
		TimeTask.bit.Task_250ms = 1;
 8000a4a:	4631      	mov	r1, r6
 8000a4c:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8000a50:	bf08      	it	eq
 8000a52:	7823      	ldrbeq	r3, [r4, #0]
 8000a54:	4628      	mov	r0, r5
 8000a56:	bf04      	itt	eq
 8000a58:	f043 0320 	orreq.w	r3, r3, #32
 8000a5c:	7023      	strbeq	r3, [r4, #0]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f7ff fc26 	bl	80002b0 <__aeabi_uldivmod>
	}

	if((TimeTaskCnt.TimeScheduleCnt%50) == 0)    //500ms 카운터 체크
 8000a64:	431a      	orrs	r2, r3
	{
		TimeTask.bit.Task_500ms = 1;
 8000a66:	bf02      	ittt	eq
 8000a68:	7823      	ldrbeq	r3, [r4, #0]
 8000a6a:	f043 0340 	orreq.w	r3, r3, #64	@ 0x40
 8000a6e:	7023      	strbeq	r3, [r4, #0]
	}

	if(TimeTaskCnt.TimeScheduleCnt >= 100)       //1sec 카운터 체크
 8000a70:	2d64      	cmp	r5, #100	@ 0x64
 8000a72:	f176 0600 	sbcs.w	r6, r6, #0
 8000a76:	d307      	bcc.n	8000a88 <Task_Schedule+0xa0>
	{
		TimeTask.bit.Task_1000ms = 1;
 8000a78:	7823      	ldrb	r3, [r4, #0]
		TimeTaskCnt.TimeScheduleCnt = 0;
 8000a7a:	2200      	movs	r2, #0
		TimeTask.bit.Task_1000ms = 1;
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a80:	7023      	strb	r3, [r4, #0]
		TimeTaskCnt.TimeScheduleCnt = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c7 2300 	strd	r2, r3, [r7]
	}

}
 8000a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200193a8 	.word	0x200193a8
 8000a90:	200193f0 	.word	0x200193f0

08000a94 <Task_Schedule_FreeRun>:
	{
		Task_5ms();
		TimeTask.bit.Task_5ms = 0;
	}*/

	if(TimeTask.bit.Task_10ms==1)                // 10ms  체크
 8000a94:	4b50      	ldr	r3, [pc, #320]	@ (8000bd8 <Task_Schedule_FreeRun+0x144>)
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	0751      	lsls	r1, r2, #29
{
 8000a9a:	b510      	push	{r4, lr}
	if(TimeTask.bit.Task_10ms==1)                // 10ms  체크
 8000a9c:	d50a      	bpl.n	8000ab4 <Task_Schedule_FreeRun+0x20>
	TimeTaskCnt.Task_10msCnt++;
 8000a9e:	484f      	ldr	r0, [pc, #316]	@ (8000bdc <Task_Schedule_FreeRun+0x148>)
	{
		Task_10ms();
		TimeTask.bit.Task_10ms = 0;
 8000aa0:	f36f 0282 	bfc	r2, #2, #1
	TimeTaskCnt.Task_10msCnt++;
 8000aa4:	e9d0 1406 	ldrd	r1, r4, [r0, #24]
		TimeTask.bit.Task_10ms = 0;
 8000aa8:	701a      	strb	r2, [r3, #0]
	TimeTaskCnt.Task_10msCnt++;
 8000aaa:	3101      	adds	r1, #1
 8000aac:	f144 0400 	adc.w	r4, r4, #0
 8000ab0:	e9c0 1406 	strd	r1, r4, [r0, #24]
	}

	if(TimeTask.bit.Task_50ms==1)                // 10ms  체크
 8000ab4:	781a      	ldrb	r2, [r3, #0]
 8000ab6:	0714      	lsls	r4, r2, #28
 8000ab8:	d50a      	bpl.n	8000ad0 <Task_Schedule_FreeRun+0x3c>
	TimeTaskCnt.Task_50msCnt++;
 8000aba:	4848      	ldr	r0, [pc, #288]	@ (8000bdc <Task_Schedule_FreeRun+0x148>)
	{
		Task_50ms();
		TimeTask.bit.Task_50ms = 0;
 8000abc:	f36f 02c3 	bfc	r2, #3, #1
	TimeTaskCnt.Task_50msCnt++;
 8000ac0:	e9d0 1408 	ldrd	r1, r4, [r0, #32]
		TimeTask.bit.Task_50ms = 0;
 8000ac4:	701a      	strb	r2, [r3, #0]
	TimeTaskCnt.Task_50msCnt++;
 8000ac6:	3101      	adds	r1, #1
 8000ac8:	f144 0400 	adc.w	r4, r4, #0
 8000acc:	e9c0 1408 	strd	r1, r4, [r0, #32]
	}

	if(TimeTask.bit.Task_100ms==1)               // 100ms 체크
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	06d0      	lsls	r0, r2, #27
 8000ad4:	d515      	bpl.n	8000b02 <Task_Schedule_FreeRun+0x6e>
	TimeTaskCnt.Task_100msCnt++;
 8000ad6:	4941      	ldr	r1, [pc, #260]	@ (8000bdc <Task_Schedule_FreeRun+0x148>)
 8000ad8:	e9d1 200a 	ldrd	r2, r0, [r1, #40]	@ 0x28
 8000adc:	3201      	adds	r2, #1
 8000ade:	f140 0000 	adc.w	r0, r0, #0
 8000ae2:	e9c1 200a 	strd	r2, r0, [r1, #40]	@ 0x28
	if(Modbus.u.Header.Temperature++>15000)
 8000ae6:	493e      	ldr	r1, [pc, #248]	@ (8000be0 <Task_Schedule_FreeRun+0x14c>)
 8000ae8:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8000aec:	890a      	ldrh	r2, [r1, #8]
 8000aee:	4282      	cmp	r2, r0
 8000af0:	bf96      	itet	ls
 8000af2:	3201      	addls	r2, #1
		Modbus.u.Header.Temperature = 0;
 8000af4:	2200      	movhi	r2, #0
	if(Modbus.u.Header.Temperature++>15000)
 8000af6:	b292      	uxthls	r2, r2
 8000af8:	810a      	strh	r2, [r1, #8]
	{
		Task_100ms();
		TimeTask.bit.Task_100ms = 0;
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	f36f 1204 	bfc	r2, #4, #1
 8000b00:	701a      	strb	r2, [r3, #0]
	}

	if(TimeTask.bit.Task_250ms==1)               // 250ms 체크
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	0691      	lsls	r1, r2, #26
 8000b06:	d50a      	bpl.n	8000b1e <Task_Schedule_FreeRun+0x8a>
	TimeTaskCnt.Task_250msCnt++;
 8000b08:	4834      	ldr	r0, [pc, #208]	@ (8000bdc <Task_Schedule_FreeRun+0x148>)
	{
		Task_250ms();
		TimeTask.bit.Task_250ms = 0;
 8000b0a:	f36f 1245 	bfc	r2, #5, #1
	TimeTaskCnt.Task_250msCnt++;
 8000b0e:	e9d0 140c 	ldrd	r1, r4, [r0, #48]	@ 0x30
		TimeTask.bit.Task_250ms = 0;
 8000b12:	701a      	strb	r2, [r3, #0]
	TimeTaskCnt.Task_250msCnt++;
 8000b14:	3101      	adds	r1, #1
 8000b16:	f144 0400 	adc.w	r4, r4, #0
 8000b1a:	e9c0 140c 	strd	r1, r4, [r0, #48]	@ 0x30
	}

	if(TimeTask.bit.Task_500ms==1)               // 500ms 체크
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	0652      	lsls	r2, r2, #25
 8000b22:	d515      	bpl.n	8000b50 <Task_Schedule_FreeRun+0xbc>
	TimeTaskCnt.Task_500msCnt++;
 8000b24:	492d      	ldr	r1, [pc, #180]	@ (8000bdc <Task_Schedule_FreeRun+0x148>)
 8000b26:	e9d1 200e 	ldrd	r2, r0, [r1, #56]	@ 0x38
 8000b2a:	3201      	adds	r2, #1
 8000b2c:	f140 0000 	adc.w	r0, r0, #0
 8000b30:	e9c1 200e 	strd	r2, r0, [r1, #56]	@ 0x38
	if(Modbus.u.Header.Humidity++>10000)
 8000b34:	492a      	ldr	r1, [pc, #168]	@ (8000be0 <Task_Schedule_FreeRun+0x14c>)
 8000b36:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000b3a:	898a      	ldrh	r2, [r1, #12]
 8000b3c:	4282      	cmp	r2, r0
 8000b3e:	bf96      	itet	ls
 8000b40:	3201      	addls	r2, #1
		Modbus.u.Header.Humidity = 0;
 8000b42:	2200      	movhi	r2, #0
	if(Modbus.u.Header.Humidity++>10000)
 8000b44:	b292      	uxthls	r2, r2
 8000b46:	818a      	strh	r2, [r1, #12]
	{
		Task_500ms();
		TimeTask.bit.Task_500ms = 0;
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	f36f 1286 	bfc	r2, #6, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
	}

	if(TimeTask.bit.Task_1000ms==1)              // 1sec  체크
 8000b50:	f993 2000 	ldrsb.w	r2, [r3]
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	da16      	bge.n	8000b86 <Task_Schedule_FreeRun+0xf2>
	TimeTaskCnt.Task_1000msCnt++;
 8000b58:	4920      	ldr	r1, [pc, #128]	@ (8000bdc <Task_Schedule_FreeRun+0x148>)
 8000b5a:	e9d1 2010 	ldrd	r2, r0, [r1, #64]	@ 0x40
 8000b5e:	3201      	adds	r2, #1
 8000b60:	f140 0000 	adc.w	r0, r0, #0
 8000b64:	e9c1 2010 	strd	r2, r0, [r1, #64]	@ 0x40
	if(Modbus.u.Header.WarningStandard-- <= 0)
 8000b68:	4a1d      	ldr	r2, [pc, #116]	@ (8000be0 <Task_Schedule_FreeRun+0x14c>)
 8000b6a:	8c11      	ldrh	r1, [r2, #32]
 8000b6c:	b161      	cbz	r1, 8000b88 <Task_Schedule_FreeRun+0xf4>
 8000b6e:	3901      	subs	r1, #1
 8000b70:	b289      	uxth	r1, r1
 8000b72:	8411      	strh	r1, [r2, #32]
	if(Modbus.u.Header.Alert == 0x0E)
 8000b74:	8811      	ldrh	r1, [r2, #0]
 8000b76:	290e      	cmp	r1, #14
 8000b78:	d109      	bne.n	8000b8e <Task_Schedule_FreeRun+0xfa>
		Modbus.u.Header.Alert = 0x0C;
 8000b7a:	210c      	movs	r1, #12
		Modbus.u.Header.Alert = 0x0E;
 8000b7c:	8011      	strh	r1, [r2, #0]
	{
		Task_1000ms();
		TimeTask.bit.Task_1000ms = 0;
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	f36f 12c7 	bfc	r2, #7, #1
 8000b84:	701a      	strb	r2, [r3, #0]
	}
}
 8000b86:	bd10      	pop	{r4, pc}
		Modbus.u.Header.WarningStandard = 10000;
 8000b88:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000b8c:	e7f1      	b.n	8000b72 <Task_Schedule_FreeRun+0xde>
	else if(Modbus.u.Header.Alert == 0x0C)
 8000b8e:	3902      	subs	r1, #2
 8000b90:	290a      	cmp	r1, #10
 8000b92:	d8f4      	bhi.n	8000b7e <Task_Schedule_FreeRun+0xea>
 8000b94:	a001      	add	r0, pc, #4	@ (adr r0, 8000b9c <Task_Schedule_FreeRun+0x108>)
 8000b96:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8000b9a:	bf00      	nop
 8000b9c:	08000bd1 	.word	0x08000bd1
 8000ba0:	08000b7f 	.word	0x08000b7f
 8000ba4:	08000b7f 	.word	0x08000b7f
 8000ba8:	08000b7f 	.word	0x08000b7f
 8000bac:	08000bd5 	.word	0x08000bd5
 8000bb0:	08000b7f 	.word	0x08000b7f
 8000bb4:	08000bcd 	.word	0x08000bcd
 8000bb8:	08000b7f 	.word	0x08000b7f
 8000bbc:	08000b7f 	.word	0x08000b7f
 8000bc0:	08000b7f 	.word	0x08000b7f
 8000bc4:	08000bc9 	.word	0x08000bc9
		Modbus.u.Header.Alert = 0x08;
 8000bc8:	2108      	movs	r1, #8
 8000bca:	e7d7      	b.n	8000b7c <Task_Schedule_FreeRun+0xe8>
		Modbus.u.Header.Alert = 0x02;
 8000bcc:	2102      	movs	r1, #2
 8000bce:	e7d5      	b.n	8000b7c <Task_Schedule_FreeRun+0xe8>
		Modbus.u.Header.Alert = 0x06;
 8000bd0:	2106      	movs	r1, #6
 8000bd2:	e7d3      	b.n	8000b7c <Task_Schedule_FreeRun+0xe8>
		Modbus.u.Header.Alert = 0x0E;
 8000bd4:	210e      	movs	r1, #14
 8000bd6:	e7d1      	b.n	8000b7c <Task_Schedule_FreeRun+0xe8>
 8000bd8:	200193f0 	.word	0x200193f0
 8000bdc:	200193a8 	.word	0x200193a8
 8000be0:	20014c22 	.word	0x20014c22

08000be4 <StartDefaultTask>:
/* USER CODE END Header_StartDefaultTask */

uint64_t MAIN_CNT = 0;

void StartDefaultTask(void *argument)
{
 8000be4:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 8000be6:	f001 fe75 	bl	80028d4 <MX_LWIP_Init>
  Modbus.u.Header.Alert = 0x0E;
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <StartDefaultTask+0x3c>)
 8000bec:	220e      	movs	r2, #14
  for(;;)
  {
	osDelay(10);
    Task_Schedule();
    Task_Schedule_FreeRun();
	MAIN_CNT++;
 8000bee:	4c0d      	ldr	r4, [pc, #52]	@ (8000c24 <StartDefaultTask+0x40>)
  Modbus.u.Header.Alert = 0x0E;
 8000bf0:	801a      	strh	r2, [r3, #0]
  Modbus.u.Header.Temperature = 2000;
 8000bf2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000bf6:	811a      	strh	r2, [r3, #8]
  Modbus.u.Header.Humidity = 2000;
 8000bf8:	819a      	strh	r2, [r3, #12]
  Modbus.u.Header.WarningStandard = 10000;
 8000bfa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000bfe:	841a      	strh	r2, [r3, #32]
	osDelay(10);
 8000c00:	200a      	movs	r0, #10
 8000c02:	f002 fa37 	bl	8003074 <osDelay>
    Task_Schedule();
 8000c06:	f7ff feef 	bl	80009e8 <Task_Schedule>
    Task_Schedule_FreeRun();
 8000c0a:	f7ff ff43 	bl	8000a94 <Task_Schedule_FreeRun>
	MAIN_CNT++;
 8000c0e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8000c12:	3301      	adds	r3, #1
 8000c14:	f142 0200 	adc.w	r2, r2, #0
 8000c18:	e9c4 3200 	strd	r3, r2, [r4]
  for(;;)
 8000c1c:	e7f0      	b.n	8000c00 <StartDefaultTask+0x1c>
 8000c1e:	bf00      	nop
 8000c20:	20014c22 	.word	0x20014c22
 8000c24:	200193f8 	.word	0x200193f8

08000c28 <SystemClock_Config>:
{
 8000c28:	b510      	push	{r4, lr}
 8000c2a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2c:	2230      	movs	r2, #48	@ 0x30
 8000c2e:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c30:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	a808      	add	r0, sp, #32
 8000c34:	f00c fcef 	bl	800d616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	2214      	movs	r2, #20
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	a803      	add	r0, sp, #12
 8000c3e:	f00c fcea 	bl	800d616 <memset>
  HAL_PWR_EnableBkUpAccess();
 8000c42:	f001 f9c9 	bl	8001fd8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c48:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c4a:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c4e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000c52:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <SystemClock_Config+0xa4>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c76:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c7e:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c82:	23d8      	movs	r3, #216	@ 0xd8
 8000c84:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c88:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c8a:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f001 f9e3 	bl	8002058 <HAL_RCC_OscConfig>
 8000c92:	b108      	cbz	r0, 8000c98 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <SystemClock_Config+0x6e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c98:	f001 f9a6 	bl	8001fe8 <HAL_PWREx_EnableOverDrive>
 8000c9c:	b108      	cbz	r0, 8000ca2 <SystemClock_Config+0x7a>
 8000c9e:	b672      	cpsid	i
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ca4:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca8:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000caa:	2107      	movs	r1, #7
 8000cac:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cae:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000cba:	f001 fbb5 	bl	8002428 <HAL_RCC_ClockConfig>
 8000cbe:	b108      	cbz	r0, 8000cc4 <SystemClock_Config+0x9c>
 8000cc0:	b672      	cpsid	i
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <SystemClock_Config+0x9a>
}
 8000cc4:	b014      	add	sp, #80	@ 0x50
 8000cc6:	bd10      	pop	{r4, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <main>:
{
 8000cd0:	b500      	push	{lr}
 8000cd2:	b08d      	sub	sp, #52	@ 0x34
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cd4:	2210      	movs	r2, #16
 8000cd6:	2100      	movs	r1, #0
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cd8:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cda:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cdc:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cde:	f00c fc9a 	bl	800d616 <memset>
  HAL_MPU_Disable();
 8000ce2:	f000 fabd 	bl	8001260 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ce6:	f248 731f 	movw	r3, #34591	@ 0x871f
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cea:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cec:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cf0:	e9cd 4308 	strd	r4, r3, [sp, #32]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cf4:	f240 1301 	movw	r3, #257	@ 0x101
 8000cf8:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cfa:	f000 facf 	bl	800129c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f000 fabc 	bl	800127c <HAL_MPU_Enable>
  HAL_Init();
 8000d04:	f000 fa2a 	bl	800115c <HAL_Init>
  SystemClock_Config();
 8000d08:	f7ff ff8e 	bl	8000c28 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	2214      	movs	r2, #20
 8000d0e:	4621      	mov	r1, r4
 8000d10:	a807      	add	r0, sp, #28
 8000d12:	f00c fc80 	bl	800d616 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d16:	4b3a      	ldr	r3, [pc, #232]	@ (8000e00 <main+0x130>)
  HAL_GPIO_WritePin(GPIOC, DO_EXT_OUT1_Pin|DO_EXT_OUT2_Pin|DO_EXT_OUT3_Pin, GPIO_PIN_RESET);
 8000d18:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000d1c:	4839      	ldr	r0, [pc, #228]	@ (8000e04 <main+0x134>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d20:	f042 0210 	orr.w	r2, r2, #16
 8000d24:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d28:	f002 0210 	and.w	r2, r2, #16
 8000d2c:	9201      	str	r2, [sp, #4]
 8000d2e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d32:	f042 0204 	orr.w	r2, r2, #4
 8000d36:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d3a:	f002 0204 	and.w	r2, r2, #4
 8000d3e:	9202      	str	r2, [sp, #8]
 8000d40:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d48:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d4c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000d50:	9203      	str	r2, [sp, #12]
 8000d52:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d56:	432a      	orrs	r2, r5
 8000d58:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d5c:	402a      	ands	r2, r5
 8000d5e:	9204      	str	r2, [sp, #16]
 8000d60:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d64:	f042 0202 	orr.w	r2, r2, #2
 8000d68:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d6c:	f002 0202 	and.w	r2, r2, #2
 8000d70:	9205      	str	r2, [sp, #20]
 8000d72:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d76:	f042 0208 	orr.w	r2, r2, #8
 8000d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOC, DO_EXT_OUT1_Pin|DO_EXT_OUT2_Pin|DO_EXT_OUT3_Pin, GPIO_PIN_RESET);
 8000d7c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d80:	f003 0308 	and.w	r3, r3, #8
 8000d84:	9306      	str	r3, [sp, #24]
 8000d86:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, DO_EXT_OUT1_Pin|DO_EXT_OUT2_Pin|DO_EXT_OUT3_Pin, GPIO_PIN_RESET);
 8000d88:	f001 f920 	bl	8001fcc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DI_SW_RST_Pin;
 8000d8c:	2320      	movs	r3, #32
  HAL_GPIO_Init(DI_SW_RST_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	a907      	add	r1, sp, #28
 8000d90:	481d      	ldr	r0, [pc, #116]	@ (8000e08 <main+0x138>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(DI_SW_RST_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f001 f834 	bl	8001e04 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_IN_Pin;
 8000d9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000da0:	a907      	add	r1, sp, #28
 8000da2:	481a      	ldr	r0, [pc, #104]	@ (8000e0c <main+0x13c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f001 f82b 	bl	8001e04 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000db2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(DI_EXT_IN1_GPIO_Port, &GPIO_InitStruct);
 8000db6:	a907      	add	r1, sp, #28
 8000db8:	4814      	ldr	r0, [pc, #80]	@ (8000e0c <main+0x13c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dbc:	e9cd 2307 	strd	r2, r3, [sp, #28]
  HAL_GPIO_Init(DI_EXT_IN1_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f001 f820 	bl	8001e04 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_EXT_OUT1_Pin|DO_EXT_OUT2_Pin|DO_EXT_OUT3_Pin;
 8000dc4:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	a907      	add	r1, sp, #28
 8000dca:	480e      	ldr	r0, [pc, #56]	@ (8000e04 <main+0x134>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f001 f816 	bl	8001e04 <HAL_GPIO_Init>
  osKernelInitialize();
 8000dd8:	f002 f8aa 	bl	8002f30 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e10 <main+0x140>)
 8000dde:	4621      	mov	r1, r4
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <main+0x144>)
 8000de2:	f002 f8f3 	bl	8002fcc <osThreadNew>
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <main+0x148>)
  ETH_TASKHandle = osThreadNew(TCP_RX_DATA_TASK, NULL, &ETH_TASK_attributes);
 8000de8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e1c <main+0x14c>)
 8000dea:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dec:	6018      	str	r0, [r3, #0]
  ETH_TASKHandle = osThreadNew(TCP_RX_DATA_TASK, NULL, &ETH_TASK_attributes);
 8000dee:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <main+0x150>)
 8000df0:	f002 f8ec 	bl	8002fcc <osThreadNew>
 8000df4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <main+0x154>)
 8000df6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000df8:	f002 f8b4 	bl	8002f64 <osKernelStart>
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <main+0x12c>
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	0800e4bc 	.word	0x0800e4bc
 8000e14:	08000be5 	.word	0x08000be5
 8000e18:	20019404 	.word	0x20019404
 8000e1c:	0800e498 	.word	0x0800e498
 8000e20:	08000915 	.word	0x08000915
 8000e24:	20019400 	.word	0x20019400

08000e28 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8000e28:	6802      	ldr	r2, [r0, #0]
 8000e2a:	4b03      	ldr	r3, [pc, #12]	@ (8000e38 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d101      	bne.n	8000e34 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000e30:	f000 b9a0 	b.w	8001174 <HAL_IncTick>
}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40010000 	.word	0x40010000

08000e3c <Error_Handler>:
 8000e3c:	b672      	cpsid	i
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <Error_Handler+0x2>

08000e40 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <HAL_MspInit+0x38>)
{
 8000e42:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e44:	210f      	movs	r1, #15
 8000e46:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e4c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e50:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e54:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000e58:	9200      	str	r2, [sp, #0]
 8000e5a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000e62:	645a      	str	r2, [r3, #68]	@ 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e64:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e70:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e72:	f000 b9b5 	b.w	80011e0 <HAL_NVIC_SetPriority>
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <HAL_InitTick+0x7c>)
 8000e7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e80:	f042 0201 	orr.w	r2, r2, #1
{
 8000e84:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e86:	645a      	str	r2, [r3, #68]	@ 0x44
{
 8000e88:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
{
 8000e8c:	4606      	mov	r6, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e8e:	a901      	add	r1, sp, #4
 8000e90:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e92:	f003 0301 	and.w	r3, r3, #1

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e96:	4d19      	ldr	r5, [pc, #100]	@ (8000efc <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e98:	9302      	str	r3, [sp, #8]
 8000e9a:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e9c:	f001 fb78 	bl	8002590 <HAL_RCC_GetClockConfig>
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ea0:	f001 fb66 	bl	8002570 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <HAL_InitTick+0x84>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ea6:	4a17      	ldr	r2, [pc, #92]	@ (8000f04 <HAL_InitTick+0x88>)
  htim1.Instance = TIM1;
 8000ea8:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000eaa:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000eae:	60eb      	str	r3, [r5, #12]
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000eb0:	0043      	lsls	r3, r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8000eb2:	4628      	mov	r0, r5
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000eb8:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eba:	606b      	str	r3, [r5, #4]
  htim1.Init.ClockDivision = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8000ec4:	f001 fcd2 	bl	800286c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000ec8:	4604      	mov	r4, r0
 8000eca:	b980      	cbnz	r0, 8000eee <HAL_InitTick+0x72>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ecc:	4628      	mov	r0, r5
 8000ece:	f001 fb7f 	bl	80025d0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	b958      	cbnz	r0, 8000eee <HAL_InitTick+0x72>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ed6:	2019      	movs	r0, #25
 8000ed8:	f000 f9b4 	bl	8001244 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000edc:	2e0f      	cmp	r6, #15
 8000ede:	d809      	bhi.n	8000ef4 <HAL_InitTick+0x78>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ee0:	4622      	mov	r2, r4
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	2019      	movs	r0, #25
 8000ee6:	f000 f97b 	bl	80011e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <HAL_InitTick+0x8c>)
 8000eec:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8000eee:	4620      	mov	r0, r4
 8000ef0:	b008      	add	sp, #32
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 8000ef4:	2401      	movs	r4, #1
 8000ef6:	e7fa      	b.n	8000eee <HAL_InitTick+0x72>
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	20019408 	.word	0x20019408
 8000f00:	40010000 	.word	0x40010000
 8000f04:	000f4240 	.word	0x000f4240
 8000f08:	2000000c 	.word	0x2000000c

08000f0c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler>

08000f0e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler>

08000f10 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler>

08000f12 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler>

08000f14 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler>

08000f16 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f16:	4770      	bx	lr

08000f18 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f18:	4801      	ldr	r0, [pc, #4]	@ (8000f20 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000f1a:	f001 bb9b 	b.w	8002654 <HAL_TIM_IRQHandler>
 8000f1e:	bf00      	nop
 8000f20:	20019408 	.word	0x20019408

08000f24 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f24:	4801      	ldr	r0, [pc, #4]	@ (8000f2c <ETH_IRQHandler+0x8>)
 8000f26:	f000 be13 	b.w	8001b50 <HAL_ETH_IRQHandler>
 8000f2a:	bf00      	nop
 8000f2c:	20019524 	.word	0x20019524

08000f30 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000f30:	2001      	movs	r0, #1
 8000f32:	4770      	bx	lr

08000f34 <_kill>:

int _kill(int pid, int sig)
{
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f34:	4b02      	ldr	r3, [pc, #8]	@ (8000f40 <_kill+0xc>)
 8000f36:	2216      	movs	r2, #22
  return -1;
}
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 8000f3c:	601a      	str	r2, [r3, #0]
}
 8000f3e:	4770      	bx	lr
 8000f40:	200377f0 	.word	0x200377f0

08000f44 <_exit>:
  errno = EINVAL;
 8000f44:	4b01      	ldr	r3, [pc, #4]	@ (8000f4c <_exit+0x8>)
 8000f46:	2216      	movs	r2, #22
 8000f48:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8000f4a:	e7fe      	b.n	8000f4a <_exit+0x6>
 8000f4c:	200377f0 	.word	0x200377f0

08000f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f50:	b570      	push	{r4, r5, r6, lr}
 8000f52:	460d      	mov	r5, r1
 8000f54:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	460e      	mov	r6, r1
 8000f58:	1b73      	subs	r3, r6, r5
 8000f5a:	429c      	cmp	r4, r3
 8000f5c:	dc01      	bgt.n	8000f62 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8000f5e:	4620      	mov	r0, r4
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8000f62:	f3af 8000 	nop.w
 8000f66:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	e7f5      	b.n	8000f58 <_read+0x8>

08000f6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	460d      	mov	r5, r1
 8000f70:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	460e      	mov	r6, r1
 8000f74:	1b73      	subs	r3, r6, r5
 8000f76:	429c      	cmp	r4, r3
 8000f78:	dc01      	bgt.n	8000f7e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8000f7e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000f82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	e7f5      	b.n	8000f74 <_write+0x8>

08000f88 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	4770      	bx	lr

08000f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8000f92:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000f94:	604b      	str	r3, [r1, #4]
}
 8000f96:	4770      	bx	lr

08000f98 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4770      	bx	lr

08000f9c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	4770      	bx	lr

08000fa0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <_sbrk+0x2c>)
{
 8000fa2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000fa4:	6811      	ldr	r1, [r2, #0]
{
 8000fa6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000fa8:	b909      	cbnz	r1, 8000fae <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000faa:	4909      	ldr	r1, [pc, #36]	@ (8000fd0 <_sbrk+0x30>)
 8000fac:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	6810      	ldr	r0, [r2, #0]
 8000fb0:	4c08      	ldr	r4, [pc, #32]	@ (8000fd4 <_sbrk+0x34>)
 8000fb2:	4909      	ldr	r1, [pc, #36]	@ (8000fd8 <_sbrk+0x38>)
 8000fb4:	4403      	add	r3, r0
 8000fb6:	1b09      	subs	r1, r1, r4
 8000fb8:	428b      	cmp	r3, r1
  {
    errno = ENOMEM;
 8000fba:	bf83      	ittte	hi
 8000fbc:	4b07      	ldrhi	r3, [pc, #28]	@ (8000fdc <_sbrk+0x3c>)
 8000fbe:	220c      	movhi	r2, #12
    return (void *)-1;
 8000fc0:	f04f 30ff 	movhi.w	r0, #4294967295
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000fc4:	6013      	strls	r3, [r2, #0]
    errno = ENOMEM;
 8000fc6:	bf88      	it	hi
 8000fc8:	601a      	strhi	r2, [r3, #0]

  return (void *)prev_heap_end;
}
 8000fca:	bd10      	pop	{r4, pc}
 8000fcc:	20019454 	.word	0x20019454
 8000fd0:	20037800 	.word	0x20037800
 8000fd4:	00000800 	.word	0x00000800
 8000fd8:	20050000 	.word	0x20050000
 8000fdc:	200377f0 	.word	0x200377f0

08000fe0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4a03      	ldr	r2, [pc, #12]	@ (8000ff0 <SystemInit+0x10>)
 8000fe2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000fe6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800102c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff8:	f7ff fff2 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	@ (8001034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	@ (8001040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001022:	f00c fb9d 	bl	800d760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001026:	f7ff fe53 	bl	8000cd0 <main>
  bx  lr    
 800102a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001038:	08010cc8 	.word	0x08010cc8
  ldr r2, =_sbss
 800103c:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001040:	20037800 	.word	0x20037800

08001044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC_IRQHandler>

08001046 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001046:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001048:	b170      	cbz	r0, 8001068 <DP83848_RegisterBusIO+0x22>
 800104a:	68cc      	ldr	r4, [r1, #12]
 800104c:	b164      	cbz	r4, 8001068 <DP83848_RegisterBusIO+0x22>
 800104e:	688a      	ldr	r2, [r1, #8]
 8001050:	b152      	cbz	r2, 8001068 <DP83848_RegisterBusIO+0x22>
 8001052:	690b      	ldr	r3, [r1, #16]
 8001054:	b143      	cbz	r3, 8001068 <DP83848_RegisterBusIO+0x22>
  {
    return DP83848_STATUS_ERROR;
  }

  pObj->IO.Init = ioctx->Init;
 8001056:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 8001058:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 800105a:	6085      	str	r5, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800105c:	60c1      	str	r1, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
 800105e:	6183      	str	r3, [r0, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001060:	e9c0 2404 	strd	r2, r4, [r0, #16]

  return DP83848_STATUS_OK;
 8001064:	2000      	movs	r0, #0
}
 8001066:	bd30      	pop	{r4, r5, pc}
    return DP83848_STATUS_ERROR;
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	e7fb      	b.n	8001066 <DP83848_RegisterBusIO+0x20>

0800106e <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 800106e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t regvalue = 0, addr = 0;
 8001070:	2300      	movs	r3, #0
   int32_t status = DP83848_STATUS_OK;

   if(pObj->Is_Initialized == 0)
 8001072:	6845      	ldr	r5, [r0, #4]
 {
 8001074:	4604      	mov	r4, r0
   uint32_t regvalue = 0, addr = 0;
 8001076:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8001078:	b9a5      	cbnz	r5, 80010a4 <DP83848_Init+0x36>
   {
     if(pObj->IO.Init != 0)
 800107a:	6883      	ldr	r3, [r0, #8]
 800107c:	b103      	cbz	r3, 8001080 <DP83848_Init+0x12>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800107e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001080:	2320      	movs	r3, #32
   int32_t status = DP83848_STATUS_OK;
 8001082:	2600      	movs	r6, #0
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001084:	6023      	str	r3, [r4, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001086:	6963      	ldr	r3, [r4, #20]
 8001088:	aa01      	add	r2, sp, #4
 800108a:	2119      	movs	r1, #25
 800108c:	4628      	mov	r0, r5
 800108e:	4798      	blx	r3
 8001090:	2800      	cmp	r0, #0
 8001092:	db09      	blt.n	80010a8 <DP83848_Init+0x3a>
         /* Can't read from this device address
            continue with next address */
         continue;
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8001094:	9b01      	ldr	r3, [sp, #4]
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	42ab      	cmp	r3, r5
 800109c:	d106      	bne.n	80010ac <DP83848_Init+0x3e>
       {
         pObj->DevAddr = addr;
 800109e:	6025      	str	r5, [r4, #0]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
     {
       pObj->Is_Initialized = 1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	6063      	str	r3, [r4, #4]
   int32_t status = DP83848_STATUS_OK;
 80010a4:	2600      	movs	r6, #0
 80010a6:	e009      	b.n	80010bc <DP83848_Init+0x4e>
         status = DP83848_STATUS_READ_ERROR;
 80010a8:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80010ac:	3501      	adds	r5, #1
 80010ae:	2d20      	cmp	r5, #32
 80010b0:	d1e9      	bne.n	8001086 <DP83848_Init+0x18>
     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	2b1f      	cmp	r3, #31
 80010b6:	d804      	bhi.n	80010c2 <DP83848_Init+0x54>
     if(status == DP83848_STATUS_OK)
 80010b8:	2e00      	cmp	r6, #0
 80010ba:	d0f1      	beq.n	80010a0 <DP83848_Init+0x32>
     }
   }

   return status;
 }
 80010bc:	4630      	mov	r0, r6
 80010be:	b002      	add	sp, #8
 80010c0:	bd70      	pop	{r4, r5, r6, pc}
       status = DP83848_STATUS_ADDRESS_ERROR;
 80010c2:	f06f 0602 	mvn.w	r6, #2
   return status;
 80010c6:	e7f9      	b.n	80010bc <DP83848_Init+0x4e>

080010c8 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80010c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t readval = 0;
 80010ca:	2500      	movs	r5, #0

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80010cc:	6943      	ldr	r3, [r0, #20]
{
 80010ce:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80010d0:	aa01      	add	r2, sp, #4
 80010d2:	2101      	movs	r1, #1
 80010d4:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 80010d6:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80010d8:	4798      	blx	r3
 80010da:	42a8      	cmp	r0, r5
 80010dc:	da03      	bge.n	80010e6 <DP83848_GetLinkState+0x1e>
  {
    return DP83848_STATUS_READ_ERROR;
 80010de:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
    }
  }
}
 80010e2:	b003      	add	sp, #12
 80010e4:	bd30      	pop	{r4, r5, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80010e6:	6963      	ldr	r3, [r4, #20]
 80010e8:	aa01      	add	r2, sp, #4
 80010ea:	2101      	movs	r1, #1
 80010ec:	6820      	ldr	r0, [r4, #0]
 80010ee:	4798      	blx	r3
 80010f0:	2800      	cmp	r0, #0
 80010f2:	dbf4      	blt.n	80010de <DP83848_GetLinkState+0x16>
  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80010f4:	9b01      	ldr	r3, [sp, #4]
 80010f6:	075b      	lsls	r3, r3, #29
 80010f8:	d52c      	bpl.n	8001154 <DP83848_GetLinkState+0x8c>
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80010fa:	6963      	ldr	r3, [r4, #20]
 80010fc:	aa01      	add	r2, sp, #4
 80010fe:	4629      	mov	r1, r5
 8001100:	6820      	ldr	r0, [r4, #0]
 8001102:	4798      	blx	r3
 8001104:	2800      	cmp	r0, #0
 8001106:	dbea      	blt.n	80010de <DP83848_GetLinkState+0x16>
  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001108:	9b01      	ldr	r3, [sp, #4]
 800110a:	04dd      	lsls	r5, r3, #19
 800110c:	d40e      	bmi.n	800112c <DP83848_GetLinkState+0x64>
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 800110e:	f403 5204 	and.w	r2, r3, #8448	@ 0x2100
 8001112:	f5b2 5f04 	cmp.w	r2, #8448	@ 0x2100
 8001116:	d101      	bne.n	800111c <DP83848_GetLinkState+0x54>
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001118:	2002      	movs	r0, #2
 800111a:	e7e2      	b.n	80010e2 <DP83848_GetLinkState+0x1a>
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 800111c:	0498      	lsls	r0, r3, #18
 800111e:	d501      	bpl.n	8001124 <DP83848_GetLinkState+0x5c>
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001120:	2003      	movs	r0, #3
 8001122:	e7de      	b.n	80010e2 <DP83848_GetLinkState+0x1a>
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001124:	05d9      	lsls	r1, r3, #23
 8001126:	d413      	bmi.n	8001150 <DP83848_GetLinkState+0x88>
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001128:	2005      	movs	r0, #5
 800112a:	e7da      	b.n	80010e2 <DP83848_GetLinkState+0x1a>
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 800112c:	6963      	ldr	r3, [r4, #20]
 800112e:	aa01      	add	r2, sp, #4
 8001130:	2110      	movs	r1, #16
 8001132:	6820      	ldr	r0, [r4, #0]
 8001134:	4798      	blx	r3
 8001136:	2800      	cmp	r0, #0
 8001138:	dbd1      	blt.n	80010de <DP83848_GetLinkState+0x16>
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 800113a:	9b01      	ldr	r3, [sp, #4]
 800113c:	06da      	lsls	r2, r3, #27
 800113e:	d50b      	bpl.n	8001158 <DP83848_GetLinkState+0x90>
    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001140:	f003 0306 	and.w	r3, r3, #6
 8001144:	2b04      	cmp	r3, #4
 8001146:	d0e7      	beq.n	8001118 <DP83848_GetLinkState+0x50>
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0e9      	beq.n	8001120 <DP83848_GetLinkState+0x58>
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 800114c:	2b06      	cmp	r3, #6
 800114e:	d1eb      	bne.n	8001128 <DP83848_GetLinkState+0x60>
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001150:	2004      	movs	r0, #4
 8001152:	e7c6      	b.n	80010e2 <DP83848_GetLinkState+0x1a>
    return DP83848_STATUS_LINK_DOWN;
 8001154:	2001      	movs	r0, #1
 8001156:	e7c4      	b.n	80010e2 <DP83848_GetLinkState+0x1a>
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001158:	2006      	movs	r0, #6
 800115a:	e7c2      	b.n	80010e2 <DP83848_GetLinkState+0x1a>

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115e:	2003      	movs	r0, #3
 8001160:	f000 f82c 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001164:	200f      	movs	r0, #15
 8001166:	f7ff fe89 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116a:	f7ff fe69 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800116e:	2000      	movs	r0, #0
 8001170:	bd08      	pop	{r3, pc}
	...

08001174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001174:	4a03      	ldr	r2, [pc, #12]	@ (8001184 <HAL_IncTick+0x10>)
 8001176:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <HAL_IncTick+0x14>)
 8001178:	6811      	ldr	r1, [r2, #0]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	440b      	add	r3, r1
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20019458 	.word	0x20019458
 8001188:	20000008 	.word	0x20000008

0800118c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800118c:	4b01      	ldr	r3, [pc, #4]	@ (8001194 <HAL_GetTick+0x8>)
 800118e:	6818      	ldr	r0, [r3, #0]
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20019458 	.word	0x20019458

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b538      	push	{r3, r4, r5, lr}
 800119a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff fff6 	bl	800118c <HAL_GetTick>
 80011a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80011a4:	bf1e      	ittt	ne
 80011a6:	4b04      	ldrne	r3, [pc, #16]	@ (80011b8 <HAL_Delay+0x20>)
 80011a8:	781b      	ldrbne	r3, [r3, #0]
 80011aa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	1b43      	subs	r3, r0, r5
 80011b2:	42a3      	cmp	r3, r4
 80011b4:	d3fa      	bcc.n	80011ac <HAL_Delay+0x14>
  {
  }
}
 80011b6:	bd38      	pop	{r3, r4, r5, pc}
 80011b8:	20000008 	.word	0x20000008

080011bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4907      	ldr	r1, [pc, #28]	@ (80011dc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011be:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80011ca:	0412      	lsls	r2, r2, #16
 80011cc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80011d8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b530      	push	{r4, r5, lr}
 80011e4:	68dc      	ldr	r4, [r3, #12]
 80011e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	bf28      	it	cs
 80011f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fc:	bf8c      	ite	hi
 80011fe:	3c03      	subhi	r4, #3
 8001200:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001202:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8001206:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	fa03 f304 	lsl.w	r3, r3, r4
 8001218:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001220:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001222:	db06      	blt.n	8001232 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001228:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800122c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001230:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	f000 000f 	and.w	r0, r0, #15
 8001236:	4a02      	ldr	r2, [pc, #8]	@ (8001240 <HAL_NVIC_SetPriority+0x60>)
 8001238:	5413      	strb	r3, [r2, r0]
 800123a:	e7f9      	b.n	8001230 <HAL_NVIC_SetPriority+0x50>
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	e000ed14 	.word	0xe000ed14

08001244 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001244:	2800      	cmp	r0, #0
 8001246:	db07      	blt.n	8001258 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001248:	0941      	lsrs	r1, r0, #5
 800124a:	2301      	movs	r3, #1
 800124c:	f000 001f 	and.w	r0, r0, #31
 8001250:	4a02      	ldr	r2, [pc, #8]	@ (800125c <HAL_NVIC_EnableIRQ+0x18>)
 8001252:	4083      	lsls	r3, r0
 8001254:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001260:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <HAL_MPU_Disable+0x18>)
 8001266:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001268:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800126c:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_MPU_Enable+0x1c>)
 800127e:	f040 0001 	orr.w	r0, r0, #1
 8001282:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001286:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001288:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800128e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001292:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800129c:	7843      	ldrb	r3, [r0, #1]
 800129e:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <HAL_MPU_ConfigRegion+0x54>)
 80012a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80012a4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80012b0:	6843      	ldr	r3, [r0, #4]
 80012b2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012b6:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012b8:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012ba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012bc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012c0:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012c2:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012c4:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012c6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012ca:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012cc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012d0:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012d2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012d6:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012dc:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80012e2:	7a01      	ldrb	r1, [r0, #8]
 80012e4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012e8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80012f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80012f8:	6a86      	ldr	r6, [r0, #40]	@ 0x28
{
 80012fa:	4691      	mov	r9, r2
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80012fc:	688c      	ldr	r4, [r1, #8]
 80012fe:	eb00 0786 	add.w	r7, r0, r6, lsl #2
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001302:	69bb      	ldr	r3, [r7, #24]
  uint32_t           bd_count = 0;
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001304:	681d      	ldr	r5, [r3, #0]
 8001306:	2d00      	cmp	r5, #0
 8001308:	da02      	bge.n	8001310 <ETH_Prepare_Tx_Descriptors+0x1c>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
  {
    return HAL_ETH_ERROR_BUSY;
 800130a:	2002      	movs	r0, #2
  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 800130c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001310:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8001312:	2d00      	cmp	r5, #0
 8001314:	d1f9      	bne.n	800130a <ETH_Prepare_Tx_Descriptors+0x16>
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001316:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001318:	6862      	ldr	r2, [r4, #4]
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800131a:	609d      	str	r5, [r3, #8]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800131c:	685d      	ldr	r5, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800131e:	f8d1 c000 	ldr.w	ip, [r1]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001322:	f425 55ff 	bic.w	r5, r5, #8160	@ 0x1fe0
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001326:	f01c 0f01 	tst.w	ip, #1
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800132a:	f025 051f 	bic.w	r5, r5, #31
 800132e:	ea45 0502 	orr.w	r5, r5, r2
 8001332:	605d      	str	r5, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001334:	d005      	beq.n	8001342 <ETH_Prepare_Tx_Descriptors+0x4e>
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001336:	681d      	ldr	r5, [r3, #0]
 8001338:	694a      	ldr	r2, [r1, #20]
 800133a:	f425 0540 	bic.w	r5, r5, #12582912	@ 0xc00000
 800133e:	4315      	orrs	r5, r2
 8001340:	601d      	str	r5, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001342:	f01c 0f20 	tst.w	ip, #32
 8001346:	d005      	beq.n	8001354 <ETH_Prepare_Tx_Descriptors+0x60>
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001348:	681d      	ldr	r5, [r3, #0]
 800134a:	6909      	ldr	r1, [r1, #16]
 800134c:	f025 6540 	bic.w	r5, r5, #201326592	@ 0xc000000
 8001350:	4329      	orrs	r1, r5
 8001352:	6019      	str	r1, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001354:	f01c 0f04 	tst.w	ip, #4
 8001358:	d003      	beq.n	8001362 <ETH_Prepare_Tx_Descriptors+0x6e>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800135a:	6819      	ldr	r1, [r3, #0]
 800135c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001360:	6019      	str	r1, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001362:	6819      	ldr	r1, [r3, #0]
  uint32_t           bd_count = 0;
 8001364:	2500      	movs	r5, #0
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001366:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 8001458 <ETH_Prepare_Tx_Descriptors+0x164>
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800136a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800136e:	6019      	str	r1, [r3, #0]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001370:	4631      	mov	r1, r6
  while (txbuffer->next != NULL)
 8001372:	68a4      	ldr	r4, [r4, #8]
 8001374:	f105 0e01 	add.w	lr, r5, #1
 8001378:	bb1c      	cbnz	r4, 80013c2 <ETH_Prepare_Tx_Descriptors+0xce>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800137a:	681a      	ldr	r2, [r3, #0]
  if (ItMode != ((uint32_t)RESET))
 800137c:	f1b9 0f00 	cmp.w	r9, #0
 8001380:	d066      	beq.n	8001450 <ETH_Prepare_Tx_Descriptors+0x15c>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001382:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001386:	601a      	str	r2, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800138e:	601a      	str	r2, [r3, #0]
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8001390:	69ba      	ldr	r2, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001392:	f3bf 8f5f 	dmb	sy
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001396:	6813      	ldr	r3, [r2, #0]
 8001398:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800139c:	6013      	str	r3, [r2, #0]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800139e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80013a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80013a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 80013a6:	6281      	str	r1, [r0, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013a8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013ac:	2301      	movs	r3, #1
 80013ae:	f383 8810 	msr	PRIMASK, r3
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80013b2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80013b4:	3301      	adds	r3, #1
 80013b6:	442b      	add	r3, r5
 80013b8:	6403      	str	r3, [r0, #64]	@ 0x40
 80013ba:	f382 8810 	msr	PRIMASK, r2
  return HAL_ETH_ERROR_NONE;
 80013be:	2000      	movs	r0, #0
 80013c0:	e7a4      	b.n	800130c <ETH_Prepare_Tx_Descriptors+0x18>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80013c2:	681d      	ldr	r5, [r3, #0]
 80013c4:	f025 5500 	bic.w	r5, r5, #536870912	@ 0x20000000
 80013c8:	601d      	str	r5, [r3, #0]
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80013ca:	681d      	ldr	r5, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80013cc:	f1b9 0f00 	cmp.w	r9, #0
 80013d0:	d023      	beq.n	800141a <ETH_Prepare_Tx_Descriptors+0x126>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80013d2:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 80013d6:	f101 0c01 	add.w	ip, r1, #1
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80013da:	601d      	str	r5, [r3, #0]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80013dc:	f1bc 0f03 	cmp.w	ip, #3
 80013e0:	bf88      	it	hi
 80013e2:	f1a1 0c03 	subhi.w	ip, r1, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80013e6:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 80013ea:	698b      	ldr	r3, [r1, #24]
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80013ec:	681d      	ldr	r5, [r3, #0]
 80013ee:	2d00      	cmp	r5, #0
 80013f0:	da16      	bge.n	8001420 <ETH_Prepare_Tx_Descriptors+0x12c>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80013f2:	69b9      	ldr	r1, [r7, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80013f4:	2200      	movs	r2, #0
 80013f6:	4572      	cmp	r2, lr
 80013f8:	d087      	beq.n	800130a <ETH_Prepare_Tx_Descriptors+0x16>
  __ASM volatile ("dmb 0xF":::"memory");
 80013fa:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80013fe:	680b      	ldr	r3, [r1, #0]
      for (idx = 0; idx < descnbr; idx ++)
 8001400:	3201      	adds	r2, #1
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001402:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001406:	600b      	str	r3, [r1, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001408:	1c73      	adds	r3, r6, #1
 800140a:	2b03      	cmp	r3, #3
 800140c:	bf88      	it	hi
 800140e:	1ef3      	subhi	r3, r6, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001410:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for (idx = 0; idx < descnbr; idx ++)
 8001414:	461e      	mov	r6, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001416:	6989      	ldr	r1, [r1, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001418:	e7ed      	b.n	80013f6 <ETH_Prepare_Tx_Descriptors+0x102>
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800141a:	f025 4580 	bic.w	r5, r5, #1073741824	@ 0x40000000
 800141e:	e7da      	b.n	80013d6 <ETH_Prepare_Tx_Descriptors+0xe2>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001420:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8001422:	2900      	cmp	r1, #0
 8001424:	d1e5      	bne.n	80013f2 <ETH_Prepare_Tx_Descriptors+0xfe>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001426:	6819      	ldr	r1, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001428:	6865      	ldr	r5, [r4, #4]
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800142a:	f021 5180 	bic.w	r1, r1, #268435456	@ 0x10000000
 800142e:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001430:	6821      	ldr	r1, [r4, #0]
 8001432:	6099      	str	r1, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001434:	6859      	ldr	r1, [r3, #4]
 8001436:	ea01 0108 	and.w	r1, r1, r8
 800143a:	4329      	orrs	r1, r5
 800143c:	6059      	str	r1, [r3, #4]
 800143e:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001442:	6819      	ldr	r1, [r3, #0]
 8001444:	4675      	mov	r5, lr
 8001446:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 800144a:	6019      	str	r1, [r3, #0]
 800144c:	4661      	mov	r1, ip
 800144e:	e790      	b.n	8001372 <ETH_Prepare_Tx_Descriptors+0x7e>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001450:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8001454:	e797      	b.n	8001386 <ETH_Prepare_Tx_Descriptors+0x92>
 8001456:	bf00      	nop
 8001458:	ffffe000 	.word	0xffffe000

0800145c <ETH_SetMACConfig>:
{
 800145c:	b570      	push	{r4, r5, r6, lr}
 800145e:	460d      	mov	r5, r1
  tmpreg1 = (heth->Instance)->MACCR;
 8001460:	6802      	ldr	r2, [r0, #0]
{
 8001462:	4604      	mov	r4, r0
 8001464:	68ab      	ldr	r3, [r5, #8]
 8001466:	6968      	ldr	r0, [r5, #20]
  tmpreg1 = (heth->Instance)->MACCR;
 8001468:	6811      	ldr	r1, [r2, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800146a:	4303      	orrs	r3, r0
 800146c:	69a8      	ldr	r0, [r5, #24]
 800146e:	4303      	orrs	r3, r0
 8001470:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8001472:	4303      	orrs	r3, r0
 8001474:	7ba8      	ldrb	r0, [r5, #14]
 8001476:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800147a:	7fe8      	ldrb	r0, [r5, #31]
 800147c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001480:	7f28      	ldrb	r0, [r5, #28]
 8001482:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001486:	7928      	ldrb	r0, [r5, #4]
 8001488:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800148c:	7be8      	ldrb	r0, [r5, #15]
 800148e:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001492:	f895 0028 	ldrb.w	r0, [r5, #40]	@ 0x28
 8001496:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800149a:	482a      	ldr	r0, [pc, #168]	@ (8001544 <ETH_SetMACConfig+0xe8>)
 800149c:	4008      	ands	r0, r1
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800149e:	7c29      	ldrb	r1, [r5, #16]
 80014a0:	fab1 f181 	clz	r1, r1
 80014a4:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014a6:	2001      	movs	r0, #1
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014a8:	0949      	lsrs	r1, r1, #5
 80014aa:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014ae:	7c69      	ldrb	r1, [r5, #17]
 80014b0:	fab1 f181 	clz	r1, r1
 80014b4:	0949      	lsrs	r1, r1, #5
 80014b6:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014ba:	7fa9      	ldrb	r1, [r5, #30]
 80014bc:	fab1 f181 	clz	r1, r1
 80014c0:	0949      	lsrs	r1, r1, #5
 80014c2:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014c6:	f895 1020 	ldrb.w	r1, [r5, #32]
 80014ca:	fab1 f181 	clz	r1, r1
 80014ce:	0949      	lsrs	r1, r1, #5
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014d0:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014d4:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80014d6:	6816      	ldr	r6, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d8:	f7ff fe5e 	bl	8001198 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014dc:	6821      	ldr	r1, [r4, #0]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014de:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
  (heth->Instance)->MACCR = tmpreg1;
 80014e0:	600e      	str	r6, [r1, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 80014e2:	698a      	ldr	r2, [r1, #24]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014e4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014e6:	f022 02be 	bic.w	r2, r2, #190	@ 0xbe
 80014ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80014ee:	0412      	lsls	r2, r2, #16
 80014f0:	0c12      	lsrs	r2, r2, #16
 80014f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014f4:	f895 204c 	ldrb.w	r2, [r5, #76]	@ 0x4c
 80014f8:	fab2 f282 	clz	r2, r2
 80014fc:	0952      	lsrs	r2, r2, #5
 80014fe:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001502:	f895 2055 	ldrb.w	r2, [r5, #85]	@ 0x55
 8001506:	1e50      	subs	r0, r2, #1
 8001508:	4242      	negs	r2, r0
 800150a:	4142      	adcs	r2, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800150c:	2001      	movs	r0, #1
 800150e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001512:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8001516:	1e56      	subs	r6, r2, #1
 8001518:	4272      	negs	r2, r6
 800151a:	4172      	adcs	r2, r6
 800151c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001520:	f895 2054 	ldrb.w	r2, [r5, #84]	@ 0x54
 8001524:	f102 3cff 	add.w	ip, r2, #4294967295
 8001528:	f1dc 0200 	rsbs	r2, ip, #0
 800152c:	eb42 020c 	adc.w	r2, r2, ip
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001530:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001534:	618b      	str	r3, [r1, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001536:	698d      	ldr	r5, [r1, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001538:	f7ff fe2e 	bl	8001198 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	619d      	str	r5, [r3, #24]
}
 8001540:	bd70      	pop	{r4, r5, r6, pc}
 8001542:	bf00      	nop
 8001544:	fd20810f 	.word	0xfd20810f

08001548 <ETH_SetDMAConfig>:
{
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	694b      	ldr	r3, [r1, #20]
 800154c:	460d      	mov	r5, r1
 800154e:	6a09      	ldr	r1, [r1, #32]
 8001550:	4604      	mov	r4, r0
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001552:	6802      	ldr	r2, [r0, #0]
 8001554:	430b      	orrs	r3, r1
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001556:	7b69      	ldrb	r1, [r5, #13]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001558:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800155c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001560:	7ba9      	ldrb	r1, [r5, #14]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001562:	6990      	ldr	r0, [r2, #24]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001564:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001568:	7f29      	ldrb	r1, [r5, #28]
 800156a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800156e:	7fa9      	ldrb	r1, [r5, #30]
 8001570:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001574:	f895 1024 	ldrb.w	r1, [r5, #36]	@ 0x24
 8001578:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800157c:	491a      	ldr	r1, [pc, #104]	@ (80015e8 <ETH_SetDMAConfig+0xa0>)
 800157e:	4001      	ands	r1, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001580:	2001      	movs	r0, #1
 8001582:	430b      	orrs	r3, r1
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001584:	7b29      	ldrb	r1, [r5, #12]
 8001586:	fab1 f181 	clz	r1, r1
 800158a:	0949      	lsrs	r1, r1, #5
 800158c:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001590:	7f69      	ldrb	r1, [r5, #29]
 8001592:	fab1 f181 	clz	r1, r1
 8001596:	0949      	lsrs	r1, r1, #5
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001598:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800159c:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 800159e:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a0:	f7ff fdfa 	bl	8001198 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015a4:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a6:	2001      	movs	r0, #1
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015a8:	69a9      	ldr	r1, [r5, #24]
  (heth->Instance)->DMAOMR = tmpreg1;
 80015aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015ae:	68ab      	ldr	r3, [r5, #8]
  (heth->Instance)->DMAOMR = tmpreg1;
 80015b0:	6196      	str	r6, [r2, #24]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015b2:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015b4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015b8:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80015bc:	6929      	ldr	r1, [r5, #16]
 80015be:	430b      	orrs	r3, r1
 80015c0:	6829      	ldr	r1, [r5, #0]
 80015c2:	430b      	orrs	r3, r1
 80015c4:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80015c6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015ca:	7929      	ldrb	r1, [r5, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015cc:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015d4:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 80015d6:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015d8:	f7ff fdde 	bl	8001198 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015e2:	601d      	str	r5, [r3, #0]
}
 80015e4:	bd70      	pop	{r4, r5, r6, pc}
 80015e6:	bf00      	nop
 80015e8:	f8de3f23 	.word	0xf8de3f23

080015ec <ETH_FlushTransmitFIFO>:
  __IO uint32_t tmpreg = 0;
 80015ec:	2300      	movs	r3, #0
{
 80015ee:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 80015f0:	9301      	str	r3, [sp, #4]
{
 80015f2:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80015f4:	6803      	ldr	r3, [r0, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f6:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80015f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001602:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001608:	f7ff fdc6 	bl	8001198 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	9a01      	ldr	r2, [sp, #4]
 8001610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001614:	619a      	str	r2, [r3, #24]
}
 8001616:	b002      	add	sp, #8
 8001618:	bd10      	pop	{r4, pc}
	...

0800161c <ETH_UpdateDescriptor>:
{
 800161c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t *buff = NULL;
 8001620:	2300      	movs	r3, #0
  descidx = heth->RxDescList.RxBuildDescIdx;
 8001622:	6e86      	ldr	r6, [r0, #104]	@ 0x68
{
 8001624:	4604      	mov	r4, r0
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001626:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
  uint8_t *buff = NULL;
 8001628:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800162a:	f106 0312 	add.w	r3, r6, #18
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800162e:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 80016a4 <ETH_UpdateDescriptor+0x88>
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001632:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001636:	b137      	cbz	r7, 8001646 <ETH_UpdateDescriptor+0x2a>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001638:	6a2b      	ldr	r3, [r5, #32]
 800163a:	b9db      	cbnz	r3, 8001674 <ETH_UpdateDescriptor+0x58>
      HAL_ETH_RxAllocateCallback(&buff);
 800163c:	a801      	add	r0, sp, #4
 800163e:	f001 fc29 	bl	8002e94 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001642:	9b01      	ldr	r3, [sp, #4]
 8001644:	b9a3      	cbnz	r3, 8001670 <ETH_UpdateDescriptor+0x54>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001646:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8001648:	42bb      	cmp	r3, r7
 800164a:	d00e      	beq.n	800166a <ETH_UpdateDescriptor+0x4e>
 800164c:	f3bf 8f5f 	dmb	sy
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001650:	1c71      	adds	r1, r6, #1
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	6922      	ldr	r2, [r4, #16]
 8001656:	2028      	movs	r0, #40	@ 0x28
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001658:	f001 0103 	and.w	r1, r1, #3
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800165c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001660:	fb00 2201 	mla	r2, r0, r1, r2
 8001664:	609a      	str	r2, [r3, #8]
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001666:	e9c4 671a 	strd	r6, r7, [r4, #104]	@ 0x68
}
 800166a:	b002      	add	sp, #8
 800166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001670:	622b      	str	r3, [r5, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001672:	60ab      	str	r3, [r5, #8]
      if (heth->RxDescList.ItMode == 0U)
 8001674:	6da2      	ldr	r2, [r4, #88]	@ 0x58
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001676:	6963      	ldr	r3, [r4, #20]
      if (heth->RxDescList.ItMode == 0U)
 8001678:	b98a      	cbnz	r2, 800169e <ETH_UpdateDescriptor+0x82>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800167a:	ea43 0308 	orr.w	r3, r3, r8
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800167e:	606b      	str	r3, [r5, #4]
      desccount--;
 8001680:	3f01      	subs	r7, #1
      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001682:	682b      	ldr	r3, [r5, #0]
 8001684:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001688:	602b      	str	r3, [r5, #0]
      INCR_RX_DESC_INDEX(descidx, 1U);
 800168a:	1c73      	adds	r3, r6, #1
 800168c:	2b03      	cmp	r3, #3
 800168e:	bf88      	it	hi
 8001690:	1ef3      	subhi	r3, r6, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001692:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 8001696:	461e      	mov	r6, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001698:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
      desccount--;
 800169c:	e7cb      	b.n	8001636 <ETH_UpdateDescriptor+0x1a>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800169e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a2:	e7ec      	b.n	800167e <ETH_UpdateDescriptor+0x62>
 80016a4:	80004000 	.word	0x80004000

080016a8 <HAL_ETH_Init>:
{
 80016a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 80016aa:	4604      	mov	r4, r0
{
 80016ac:	b0a7      	sub	sp, #156	@ 0x9c
  if (heth == NULL)
 80016ae:	2800      	cmp	r0, #0
 80016b0:	f000 80e8 	beq.w	8001884 <HAL_ETH_Init+0x1dc>
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016b4:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80016b8:	b923      	cbnz	r3, 80016c4 <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 80016ba:	2323      	movs	r3, #35	@ 0x23
 80016bc:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 80016c0:	f001 fb1c 	bl	8002cfc <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c4:	4b73      	ldr	r3, [pc, #460]	@ (8001894 <HAL_ETH_Init+0x1ec>)
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016c6:	68a1      	ldr	r1, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016da:	4b6f      	ldr	r3, [pc, #444]	@ (8001898 <HAL_ETH_Init+0x1f0>)
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80016e2:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 80016ea:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	f042 0201 	orr.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80016fa:	f7ff fd47 	bl	800118c <HAL_GetTick>
 80016fe:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001706:	681d      	ldr	r5, [r3, #0]
 8001708:	f015 0501 	ands.w	r5, r5, #1
 800170c:	f040 80ad 	bne.w	800186a <HAL_ETH_Init+0x1c2>
  macDefaultConf.ChecksumOffload = ENABLE;
 8001710:	2601      	movs	r6, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001712:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  macDefaultConf.Watchdog = ENABLE;
 8001716:	f240 1701 	movw	r7, #257	@ 0x101
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800171a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  ETH_SetMACConfig(heth, &macDefaultConf);
 800171e:	a90d      	add	r1, sp, #52	@ 0x34
 8001720:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 8001722:	f88d 6038 	strb.w	r6, [sp, #56]	@ 0x38
  macDefaultConf.ReceiveOwn = ENABLE;
 8001726:	f8ad 6052 	strh.w	r6, [sp, #82]	@ 0x52
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800172a:	f8ad 6042 	strh.w	r6, [sp, #66]	@ 0x42
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800172e:	950f      	str	r5, [sp, #60]	@ 0x3c
  macDefaultConf.LoopbackMode = DISABLE;
 8001730:	f88d 5050 	strb.w	r5, [sp, #80]	@ 0x50
  macDefaultConf.RetryTransmission = DISABLE;
 8001734:	f88d 5054 	strb.w	r5, [sp, #84]	@ 0x54
  macDefaultConf.Watchdog = ENABLE;
 8001738:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800173c:	9516      	str	r5, [sp, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800173e:	f88d 505c 	strb.w	r5, [sp, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001742:	951f      	str	r5, [sp, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001744:	f88d 5080 	strb.w	r5, [sp, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001748:	9521      	str	r5, [sp, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800174a:	f8ad 5088 	strh.w	r5, [sp, #136]	@ 0x88
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800174e:	f88d 508a 	strb.w	r5, [sp, #138]	@ 0x8a
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001752:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001756:	f7ff fe81 	bl	800145c <ETH_SetMACConfig>
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800175a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800175e:	4620      	mov	r0, r4
 8001760:	a902      	add	r1, sp, #8
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001762:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001768:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800176c:	f88d 6016 	strb.w	r6, [sp, #22]
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001770:	f8ad 7014 	strh.w	r7, [sp, #20]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001774:	f88d 5026 	strb.w	r5, [sp, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001778:	950a      	str	r5, [sp, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800177a:	f8ad 702c 	strh.w	r7, [sp, #44]	@ 0x2c
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800177e:	950c      	str	r5, [sp, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001780:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001782:	e9cd 3506 	strd	r3, r5, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001786:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800178a:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800178c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001790:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001794:	f7ff fed8 	bl	8001548 <ETH_SetDMAConfig>
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001798:	68e6      	ldr	r6, [r4, #12]
 800179a:	f104 0c14 	add.w	ip, r4, #20
    dmatxdesc = heth->Init.TxDesc + i;
 800179e:	462a      	mov	r2, r5
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80017a0:	4628      	mov	r0, r5
    dmatxdesc = heth->Init.TxDesc + i;
 80017a2:	4633      	mov	r3, r6
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80017a4:	6018      	str	r0, [r3, #0]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017a6:	4619      	mov	r1, r3
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80017a8:	6058      	str	r0, [r3, #4]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017aa:	2a03      	cmp	r2, #3
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80017ac:	6098      	str	r0, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80017ae:	60d8      	str	r0, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017b0:	f84c 3f04 	str.w	r3, [ip, #4]!
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017b4:	681f      	ldr	r7, [r3, #0]
 80017b6:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 80017ba:	f841 7b28 	str.w	r7, [r1], #40
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017be:	d064      	beq.n	800188a <HAL_ETH_Init+0x1e2>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017c0:	60d9      	str	r1, [r3, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017c2:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017c4:	3201      	adds	r2, #1
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017c6:	f447 0740 	orr.w	r7, r7, #12582912	@ 0xc00000
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017ca:	2a04      	cmp	r2, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017cc:	601f      	str	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017ce:	460b      	mov	r3, r1
 80017d0:	d1e8      	bne.n	80017a4 <HAL_ETH_Init+0xfc>
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017d2:	6822      	ldr	r2, [r4, #0]
  heth->TxDescList.CurTxDesc = 0;
 80017d4:	2100      	movs	r1, #0
 80017d6:	f104 0c44 	add.w	ip, r4, #68	@ 0x44
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017da:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017de:	f502 5780 	add.w	r7, r2, #4096	@ 0x1000
  heth->TxDescList.CurTxDesc = 0;
 80017e2:	62a1      	str	r1, [r4, #40]	@ 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017e4:	613e      	str	r6, [r7, #16]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017e6:	6926      	ldr	r6, [r4, #16]
    dmarxdesc =  heth->Init.RxDesc + i;
 80017e8:	4633      	mov	r3, r6
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80017ea:	6019      	str	r1, [r3, #0]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017ec:	2d03      	cmp	r5, #3
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80017ee:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80017f0:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80017f2:	60d9      	str	r1, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017f4:	f8c3 e000 	str.w	lr, [r3]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80017f8:	e9c3 1108 	strd	r1, r1, [r3, #32]
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80017fc:	6960      	ldr	r0, [r4, #20]
 80017fe:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 8001802:	6058      	str	r0, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001804:	6858      	ldr	r0, [r3, #4]
 8001806:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800180a:	6058      	str	r0, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800180c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001810:	f84c 3f04 	str.w	r3, [ip, #4]!
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001814:	d03b      	beq.n	800188e <HAL_ETH_Init+0x1e6>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001816:	60d8      	str	r0, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001818:	3501      	adds	r5, #1
 800181a:	4603      	mov	r3, r0
 800181c:	2d04      	cmp	r5, #4
 800181e:	d1e4      	bne.n	80017ea <HAL_ETH_Init+0x142>
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001820:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001822:	2000      	movs	r0, #0
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001824:	4b1d      	ldr	r3, [pc, #116]	@ (800189c <HAL_ETH_Init+0x1f4>)
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001826:	65a0      	str	r0, [r4, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001828:	e9c4 0017 	strd	r0, r0, [r4, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800182c:	e9c4 001a 	strd	r0, r0, [r4, #104]	@ 0x68
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001830:	60fe      	str	r6, [r7, #12]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001832:	888d      	ldrh	r5, [r1, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001834:	641d      	str	r5, [r3, #64]	@ 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001836:	6809      	ldr	r1, [r1, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001838:	6459      	str	r1, [r3, #68]	@ 0x44
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800183a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800183c:	f443 7302 	orr.w	r3, r3, #520	@ 0x208
 8001840:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001842:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
 8001846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800184a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800184e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001852:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
 8001856:	f443 1303 	orr.w	r3, r3, #2146304	@ 0x20c000
 800185a:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  heth->gState = HAL_ETH_STATE_READY;
 800185e:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001860:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001864:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 8001868:	e00d      	b.n	8001886 <HAL_ETH_Init+0x1de>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800186a:	f7ff fc8f 	bl	800118c <HAL_GetTick>
 800186e:	1b80      	subs	r0, r0, r6
 8001870:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8001874:	f67f af44 	bls.w	8001700 <HAL_ETH_Init+0x58>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001878:	2304      	movs	r3, #4
 800187a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 800187e:	23e0      	movs	r3, #224	@ 0xe0
 8001880:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return HAL_ERROR;
 8001884:	2001      	movs	r0, #1
}
 8001886:	b027      	add	sp, #156	@ 0x9c
 8001888:	bdf0      	pop	{r4, r5, r6, r7, pc}
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800188a:	60de      	str	r6, [r3, #12]
 800188c:	e799      	b.n	80017c2 <HAL_ETH_Init+0x11a>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800188e:	60de      	str	r6, [r3, #12]
 8001890:	e7c2      	b.n	8001818 <HAL_ETH_Init+0x170>
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40013800 	.word	0x40013800
 800189c:	40028000 	.word	0x40028000

080018a0 <HAL_ETH_Start_IT>:
{
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80018a2:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 80018a6:	4604      	mov	r4, r0
 80018a8:	2501      	movs	r5, #1
  if (heth->gState == HAL_ETH_STATE_READY)
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d136      	bne.n	800191c <HAL_ETH_Start_IT+0x7c>
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80018ae:	2304      	movs	r3, #4
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b0:	2623      	movs	r6, #35	@ 0x23
    heth->RxDescList.ItMode = 1U;
 80018b2:	6585      	str	r5, [r0, #88]	@ 0x58
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80018b4:	66c3      	str	r3, [r0, #108]	@ 0x6c
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b6:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
    ETH_UpdateDescriptor(heth);
 80018ba:	f7ff feaf 	bl	800161c <ETH_UpdateDescriptor>
    tmpreg1 = (heth->Instance)->MACCR;
 80018be:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018c0:	4628      	mov	r0, r5
    tmpreg1 = (heth->Instance)->MACCR;
 80018c2:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018c4:	f7ff fc68 	bl	8001198 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018c8:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 80018ca:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 80018cc:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80018d8:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018da:	699a      	ldr	r2, [r3, #24]
 80018dc:	f042 0202 	orr.w	r2, r2, #2
 80018e0:	619a      	str	r2, [r3, #24]
    ETH_FlushTransmitFIFO(heth);
 80018e2:	f7ff fe83 	bl	80015ec <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018e6:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018e8:	4628      	mov	r0, r5
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	f042 0208 	orr.w	r2, r2, #8
 80018f0:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80018f2:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018f4:	f7ff fc50 	bl	8001198 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018f8:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 80018fa:	2000      	movs	r0, #0
    (heth->Instance)->MACCR = tmpreg1;
 80018fc:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	f042 0204 	orr.w	r2, r2, #4
 8001904:	601a      	str	r2, [r3, #0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800190a:	69da      	ldr	r2, [r3, #28]
 800190c:	f442 32d0 	orr.w	r2, r2, #106496	@ 0x1a000
 8001910:	f042 02c1 	orr.w	r2, r2, #193	@ 0xc1
 8001914:	61da      	str	r2, [r3, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001916:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
}
 800191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800191c:	4628      	mov	r0, r5
 800191e:	e7fc      	b.n	800191a <HAL_ETH_Start_IT+0x7a>

08001920 <HAL_ETH_Stop_IT>:
{
 8001920:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001922:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 8001926:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001928:	2b23      	cmp	r3, #35	@ 0x23
 800192a:	d13c      	bne.n	80019a6 <HAL_ETH_Stop_IT+0x86>
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800192c:	6801      	ldr	r1, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 800192e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001932:	2001      	movs	r0, #1
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001934:	f501 5380 	add.w	r3, r1, #4096	@ 0x1000
 8001938:	69da      	ldr	r2, [r3, #28]
 800193a:	f422 32d0 	bic.w	r2, r2, #106496	@ 0x1a000
 800193e:	f022 02c1 	bic.w	r2, r2, #193	@ 0xc1
 8001942:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001944:	699a      	ldr	r2, [r3, #24]
 8001946:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800194a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800194c:	699a      	ldr	r2, [r3, #24]
 800194e:	f022 0202 	bic.w	r2, r2, #2
 8001952:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001954:	680b      	ldr	r3, [r1, #0]
 8001956:	f023 0304 	bic.w	r3, r3, #4
 800195a:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800195c:	680d      	ldr	r5, [r1, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800195e:	f7ff fc1b 	bl	8001198 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001962:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 8001964:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 8001966:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001968:	f7ff fe40 	bl	80015ec <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800196c:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800196e:	2001      	movs	r0, #1
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	f022 0208 	bic.w	r2, r2, #8
 8001976:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001978:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800197a:	f7ff fc0d 	bl	8001198 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800197e:	4623      	mov	r3, r4
 8001980:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8001984:	f853 2b44 	ldr.w	r2, [r3], #68
 8001988:	6015      	str	r5, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800198a:	f853 1f04 	ldr.w	r1, [r3, #4]!
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800198e:	684a      	ldr	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001990:	4283      	cmp	r3, r0
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001992:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001996:	604a      	str	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001998:	d1f7      	bne.n	800198a <HAL_ETH_Stop_IT+0x6a>
    heth->RxDescList.ItMode = 0U;
 800199a:	2000      	movs	r0, #0
    heth->gState = HAL_ETH_STATE_READY;
 800199c:	2310      	movs	r3, #16
    heth->RxDescList.ItMode = 0U;
 800199e:	65a0      	str	r0, [r4, #88]	@ 0x58
    heth->gState = HAL_ETH_STATE_READY;
 80019a0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
}
 80019a4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80019a6:	2001      	movs	r0, #1
 80019a8:	e7fc      	b.n	80019a4 <HAL_ETH_Stop_IT+0x84>

080019aa <HAL_ETH_Transmit_IT>:
{
 80019aa:	b510      	push	{r4, lr}
 80019ac:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 80019ae:	b939      	cbnz	r1, 80019c0 <HAL_ETH_Transmit_IT+0x16>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019b0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80019b4:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80019b8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_ERROR;
 80019bc:	2001      	movs	r0, #1
}
 80019be:	bd10      	pop	{r4, pc}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019c0:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 80019c4:	2a23      	cmp	r2, #35	@ 0x23
 80019c6:	d1f9      	bne.n	80019bc <HAL_ETH_Transmit_IT+0x12>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80019c8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80019ca:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80019cc:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80019ce:	f7ff fc91 	bl	80012f4 <ETH_Prepare_Tx_Descriptors>
 80019d2:	b120      	cbz	r0, 80019de <HAL_ETH_Transmit_IT+0x34>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80019d4:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	e7ec      	b.n	80019b8 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 80019de:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80019e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80019e4:	1c53      	adds	r3, r2, #1
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	bf88      	it	hi
 80019ea:	1ed3      	subhi	r3, r2, #3
 80019ec:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	0752      	lsls	r2, r2, #29
 80019f8:	d503      	bpl.n	8001a02 <HAL_ETH_Transmit_IT+0x58>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80019fa:	2204      	movs	r2, #4
 80019fc:	615a      	str	r2, [r3, #20]
      (heth->Instance)->DMATPDR = 0U;
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
    return HAL_OK;
 8001a02:	2000      	movs	r0, #0
 8001a04:	e7db      	b.n	80019be <HAL_ETH_Transmit_IT+0x14>

08001a06 <HAL_ETH_ReadData>:
{
 8001a06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 8001a0e:	4689      	mov	r9, r1
 8001a10:	b949      	cbnz	r1, 8001a26 <HAL_ETH_ReadData+0x20>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a12:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
}
 8001a20:	b005      	add	sp, #20
 8001a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a26:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8001a2a:	2b23      	cmp	r3, #35	@ 0x23
 8001a2c:	d1f7      	bne.n	8001a1e <HAL_ETH_ReadData+0x18>
  descidx = heth->RxDescList.RxDescIdx;
 8001a2e:	f8d0 805c 	ldr.w	r8, [r0, #92]	@ 0x5c
  uint8_t rxdataready = 0U;
 8001a32:	2700      	movs	r7, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a34:	f100 0180 	add.w	r1, r0, #128	@ 0x80
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a38:	f108 0312 	add.w	r3, r8, #18
  uint32_t desccnt = 0U;
 8001a3c:	463e      	mov	r6, r7
      dmarxdesc->BackupAddr0 = 0;
 8001a3e:	46bb      	mov	fp, r7
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a40:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a44:	307c      	adds	r0, #124	@ 0x7c
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a46:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8001a4a:	f1c3 0a04 	rsb	sl, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a4e:	682b      	ldr	r3, [r5, #0]
         && (rxdataready == 0U))
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db02      	blt.n	8001a5a <HAL_ETH_ReadData+0x54>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a54:	4556      	cmp	r6, sl
 8001a56:	d000      	beq.n	8001a5a <HAL_ETH_ReadData+0x54>
         && (rxdataready == 0U))
 8001a58:	b187      	cbz	r7, 8001a7c <HAL_ETH_ReadData+0x76>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a5a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8001a5c:	441e      	add	r6, r3
 8001a5e:	66e6      	str	r6, [r4, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a60:	b116      	cbz	r6, 8001a68 <HAL_ETH_ReadData+0x62>
    ETH_UpdateDescriptor(heth);
 8001a62:	4620      	mov	r0, r4
 8001a64:	f7ff fdda 	bl	800161c <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8001a68:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 8001a6c:	2f00      	cmp	r7, #0
 8001a6e:	d0d6      	beq.n	8001a1e <HAL_ETH_ReadData+0x18>
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a70:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
    heth->RxDescList.pRxStart = NULL;
 8001a72:	2000      	movs	r0, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a74:	f8c9 3000 	str.w	r3, [r9]
    heth->RxDescList.pRxStart = NULL;
 8001a78:	67e0      	str	r0, [r4, #124]	@ 0x7c
    return HAL_OK;
 8001a7a:	e7d1      	b.n	8001a20 <HAL_ETH_ReadData+0x1a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	05db      	lsls	r3, r3, #23
 8001a80:	d503      	bpl.n	8001a8a <HAL_ETH_ReadData+0x84>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001a82:	69eb      	ldr	r3, [r5, #28]
 8001a84:	67a3      	str	r3, [r4, #120]	@ 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001a86:	69ab      	ldr	r3, [r5, #24]
 8001a88:	6763      	str	r3, [r4, #116]	@ 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a8a:	682b      	ldr	r3, [r5, #0]
 8001a8c:	059a      	lsls	r2, r3, #22
 8001a8e:	d401      	bmi.n	8001a94 <HAL_ETH_ReadData+0x8e>
 8001a90:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8001a92:	b1fb      	cbz	r3, 8001ad4 <HAL_ETH_ReadData+0xce>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a94:	682b      	ldr	r3, [r5, #0]
 8001a96:	059b      	lsls	r3, r3, #22
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001a98:	682b      	ldr	r3, [r5, #0]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a9a:	682a      	ldr	r2, [r5, #0]
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001a9c:	f3c3 430d 	ubfx	r3, r3, #16, #14
        heth->RxDescList.RxDataLength = 0;
 8001aa0:	bf48      	it	mi
 8001aa2:	e9c4 bb18 	strdmi	fp, fp, [r4, #96]	@ 0x60
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001aa6:	05d2      	lsls	r2, r2, #23
 8001aa8:	d502      	bpl.n	8001ab0 <HAL_ETH_ReadData+0xaa>
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001aaa:	682a      	ldr	r2, [r5, #0]
        rxdataready = 1;
 8001aac:	2701      	movs	r7, #1
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001aae:	6722      	str	r2, [r4, #112]	@ 0x70
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001ab0:	68aa      	ldr	r2, [r5, #8]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ab2:	9001      	str	r0, [sp, #4]
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001ab4:	622a      	str	r2, [r5, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ab6:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8001aba:	f001 fa0d 	bl	8002ed8 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8001abe:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ac0:	9b03      	ldr	r3, [sp, #12]
      heth->RxDescList.RxDescCnt++;
 8001ac2:	3201      	adds	r2, #1
 8001ac4:	6622      	str	r2, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ac6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001ac8:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
      heth->RxDescList.RxDataLength += bufflength;
 8001acc:	441a      	add	r2, r3
 8001ace:	6662      	str	r2, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001ad0:	f8c5 b020 	str.w	fp, [r5, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001ad4:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8001ad8:	3601      	adds	r6, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	bf88      	it	hi
 8001ade:	f1a8 0303 	subhi.w	r3, r8, #3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ae2:	f103 0212 	add.w	r2, r3, #18
    desccnt++;
 8001ae6:	4698      	mov	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ae8:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    desccnt++;
 8001aec:	e7af      	b.n	8001a4e <HAL_ETH_ReadData+0x48>

08001aee <HAL_ETH_ReleaseTxPacket>:
{
 8001aee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001af2:	4605      	mov	r5, r0
  uint8_t pktTxStatus = 1U;
 8001af4:	2701      	movs	r7, #1
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001af6:	f04f 0928 	mov.w	r9, #40	@ 0x28
 8001afa:	f04f 0a00 	mov.w	sl, #0
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001afe:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b02:	b106      	cbz	r6, 8001b06 <HAL_ETH_ReleaseTxPacket+0x18>
 8001b04:	b917      	cbnz	r7, 8001b0c <HAL_ETH_ReleaseTxPacket+0x1e>
}
 8001b06:	2000      	movs	r0, #0
 8001b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numOfBuf--;
 8001b0c:	eb05 0884 	add.w	r8, r5, r4, lsl #2
 8001b10:	3e01      	subs	r6, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b12:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8001b16:	b928      	cbnz	r0, 8001b24 <HAL_ETH_ReleaseTxPacket+0x36>
      INCR_TX_DESC_INDEX(idx, 1U);
 8001b18:	1c63      	adds	r3, r4, #1
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d900      	bls.n	8001b20 <HAL_ETH_ReleaseTxPacket+0x32>
 8001b1e:	1ee3      	subs	r3, r4, #3
        pktTxStatus = 0U;
 8001b20:	461c      	mov	r4, r3
 8001b22:	e7ee      	b.n	8001b02 <HAL_ETH_ReleaseTxPacket+0x14>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001b24:	fb09 f304 	mul.w	r3, r9, r4
 8001b28:	68ea      	ldr	r2, [r5, #12]
 8001b2a:	58d3      	ldr	r3, [r2, r3]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <HAL_ETH_ReleaseTxPacket+0x58>
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b30:	f001 f9fc 	bl	8002f2c <HAL_ETH_TxFreeCallback>
        INCR_TX_DESC_INDEX(idx, 1U);
 8001b34:	1c63      	adds	r3, r4, #1
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b36:	f8c8 a02c 	str.w	sl, [r8, #44]	@ 0x2c
        INCR_TX_DESC_INDEX(idx, 1U);
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	bf88      	it	hi
 8001b3e:	1ee3      	subhi	r3, r4, #3
        dmatxdesclist->releaseIndex = idx;
 8001b40:	e9c5 6310 	strd	r6, r3, [r5, #64]	@ 0x40
 8001b44:	e7ec      	b.n	8001b20 <HAL_ETH_ReleaseTxPacket+0x32>
 8001b46:	4623      	mov	r3, r4
        pktTxStatus = 0U;
 8001b48:	2700      	movs	r7, #0
 8001b4a:	e7e9      	b.n	8001b20 <HAL_ETH_ReleaseTxPacket+0x32>

08001b4c <HAL_ETH_PMTCallback>:
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
 8001b4c:	4770      	bx	lr

08001b4e <HAL_ETH_WakeUpCallback>:
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
 8001b4e:	4770      	bx	lr

08001b50 <HAL_ETH_IRQHandler>:
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001b50:	6803      	ldr	r3, [r0, #0]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001b52:	4a34      	ldr	r2, [pc, #208]	@ (8001c24 <HAL_ETH_IRQHandler+0xd4>)
{
 8001b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001b58:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
{
 8001b5e:	4604      	mov	r4, r0
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001b60:	695d      	ldr	r5, [r3, #20]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001b62:	f8d3 801c 	ldr.w	r8, [r3, #28]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001b66:	6956      	ldr	r6, [r2, #20]
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001b68:	066a      	lsls	r2, r5, #25
 8001b6a:	d506      	bpl.n	8001b7a <HAL_ETH_IRQHandler+0x2a>
 8001b6c:	f018 0f40 	tst.w	r8, #64	@ 0x40
 8001b70:	d003      	beq.n	8001b7a <HAL_ETH_IRQHandler+0x2a>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001b72:	4a2d      	ldr	r2, [pc, #180]	@ (8001c28 <HAL_ETH_IRQHandler+0xd8>)
 8001b74:	615a      	str	r2, [r3, #20]
    HAL_ETH_RxCpltCallback(heth);
 8001b76:	f000 ffc5 	bl	8002b04 <HAL_ETH_RxCpltCallback>
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001b7a:	07e8      	lsls	r0, r5, #31
 8001b7c:	d50b      	bpl.n	8001b96 <HAL_ETH_IRQHandler+0x46>
 8001b7e:	f018 0f01 	tst.w	r8, #1
 8001b82:	d008      	beq.n	8001b96 <HAL_ETH_IRQHandler+0x46>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
    HAL_ETH_TxCpltCallback(heth);
 8001b8a:	4620      	mov	r0, r4
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b90:	615a      	str	r2, [r3, #20]
    HAL_ETH_TxCpltCallback(heth);
 8001b92:	f000 ffbd 	bl	8002b10 <HAL_ETH_TxCpltCallback>
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001b96:	0429      	lsls	r1, r5, #16
 8001b98:	d523      	bpl.n	8001be2 <HAL_ETH_IRQHandler+0x92>
 8001b9a:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
 8001b9e:	d020      	beq.n	8001be2 <HAL_ETH_IRQHandler+0x92>
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ba0:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001ba4:	f415 5f00 	tst.w	r5, #8192	@ 0x2000
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb6:	695a      	ldr	r2, [r3, #20]
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001bb8:	d02c      	beq.n	8001c14 <HAL_ETH_IRQHandler+0xc4>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001bba:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001bbe:	f422 0201 	bic.w	r2, r2, #8454144	@ 0x810000
 8001bc2:	f422 425f 	bic.w	r2, r2, #57088	@ 0xdf00
 8001bc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001bca:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001bce:	69da      	ldr	r2, [r3, #28]
 8001bd0:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
 8001bd4:	61da      	str	r2, [r3, #28]
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bd6:	23e0      	movs	r3, #224	@ 0xe0
 8001bd8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f000 ff9d 	bl	8002b1c <HAL_ETH_ErrorCallback>
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001be2:	073a      	lsls	r2, r7, #28
 8001be4:	d50b      	bpl.n	8001bfe <HAL_ETH_IRQHandler+0xae>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001be6:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_PMTCallback(heth);
 8001be8:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001bf0:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_ETH_PMTCallback(heth);
 8001bf4:	f7ff ffaa 	bl	8001b4c <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001bfe:	0333      	lsls	r3, r6, #12
 8001c00:	d506      	bpl.n	8001c10 <HAL_ETH_IRQHandler+0xc0>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c02:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <HAL_ETH_IRQHandler+0xd4>)
 8001c04:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    HAL_ETH_WakeUpCallback(heth);
 8001c08:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c0a:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001c0c:	f7ff ff9f 	bl	8001b4e <HAL_ETH_WakeUpCallback>
}
 8001c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c14:	f248 6180 	movw	r1, #34432	@ 0x8680
 8001c18:	400a      	ands	r2, r1
 8001c1a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c1e:	6159      	str	r1, [r3, #20]
 8001c20:	e7dc      	b.n	8001bdc <HAL_ETH_IRQHandler+0x8c>
 8001c22:	bf00      	nop
 8001c24:	40013c00 	.word	0x40013c00
 8001c28:	00010040 	.word	0x00010040

08001c2c <HAL_ETH_ReadPHYRegister>:
{
 8001c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2e:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c30:	6800      	ldr	r0, [r0, #0]
{
 8001c32:	461e      	mov	r6, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c34:	0192      	lsls	r2, r2, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c36:	6903      	ldr	r3, [r0, #16]
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c38:	02cc      	lsls	r4, r1, #11
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c3a:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c3e:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c42:	b2a4      	uxth	r4, r4
 8001c44:	431a      	orrs	r2, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c46:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c48:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001c4c:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8001c4e:	f7ff fa9d 	bl	800118c <HAL_GetTick>
 8001c52:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c54:	f014 0001 	ands.w	r0, r4, #1
 8001c58:	d104      	bne.n	8001c64 <HAL_ETH_ReadPHYRegister+0x38>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c5a:	682b      	ldr	r3, [r5, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	6033      	str	r3, [r6, #0]
}
 8001c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001c64:	f7ff fa92 	bl	800118c <HAL_GetTick>
 8001c68:	1bc0      	subs	r0, r0, r7
 8001c6a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8001c6e:	d202      	bcs.n	8001c76 <HAL_ETH_ReadPHYRegister+0x4a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	691c      	ldr	r4, [r3, #16]
 8001c74:	e7ee      	b.n	8001c54 <HAL_ETH_ReadPHYRegister+0x28>
      return HAL_ERROR;
 8001c76:	2001      	movs	r0, #1
 8001c78:	e7f3      	b.n	8001c62 <HAL_ETH_ReadPHYRegister+0x36>

08001c7a <HAL_ETH_WritePHYRegister>:
{
 8001c7a:	b570      	push	{r4, r5, r6, lr}
 8001c7c:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c7e:	6800      	ldr	r0, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c80:	0192      	lsls	r2, r2, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c82:	6904      	ldr	r4, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c8a:	f004 041c 	and.w	r4, r4, #28
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c8e:	6143      	str	r3, [r0, #20]
 8001c90:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001c92:	02cc      	lsls	r4, r1, #11
 8001c94:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c96:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c98:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg1;
 8001c9c:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8001c9e:	f7ff fa75 	bl	800118c <HAL_GetTick>
 8001ca2:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ca4:	f014 0001 	ands.w	r0, r4, #1
 8001ca8:	d100      	bne.n	8001cac <HAL_ETH_WritePHYRegister+0x32>
}
 8001caa:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001cac:	f7ff fa6e 	bl	800118c <HAL_GetTick>
 8001cb0:	1b80      	subs	r0, r0, r6
 8001cb2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8001cb6:	d202      	bcs.n	8001cbe <HAL_ETH_WritePHYRegister+0x44>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	691c      	ldr	r4, [r3, #16]
 8001cbc:	e7f2      	b.n	8001ca4 <HAL_ETH_WritePHYRegister+0x2a>
      return HAL_ERROR;
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	e7f3      	b.n	8001caa <HAL_ETH_WritePHYRegister+0x30>

08001cc2 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001cc2:	2900      	cmp	r1, #0
 8001cc4:	d061      	beq.n	8001d8a <HAL_ETH_GetMACConfig+0xc8>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001cc6:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8001cc8:	2000      	movs	r0, #0
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001cd0:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8001cda:	624a      	str	r2, [r1, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	f482 7200 	eor.w	r2, r2, #512	@ 0x200
 8001ce2:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001ce6:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001cea:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8001cec:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001cf0:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8001cf8:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001cfc:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001d04:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001d0c:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001d14:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f482 0280 	eor.w	r2, r2, #4194304	@ 0x400000
 8001d1c:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001d20:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f482 0200 	eor.w	r2, r2, #8388608	@ 0x800000
 8001d28:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001d2c:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001d34:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001d3c:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001d44:	710a      	strb	r2, [r1, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8001d4c:	738a      	strb	r2, [r1, #14]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001d54:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8001d5e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001d62:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d66:	699a      	ldr	r2, [r3, #24]
 8001d68:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8001d6c:	650a      	str	r2, [r1, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d6e:	699a      	ldr	r2, [r3, #24]
 8001d70:	0c12      	lsrs	r2, r2, #16
 8001d72:	648a      	str	r2, [r1, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001d7a:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d7e:	699b      	ldr	r3, [r3, #24]
                                      ? ENABLE : DISABLE;
 8001d80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d84:	f881 3055 	strb.w	r3, [r1, #85]	@ 0x55
  return HAL_OK;
 8001d88:	4770      	bx	lr
    return HAL_ERROR;
 8001d8a:	2001      	movs	r0, #1
}
 8001d8c:	4770      	bx	lr

08001d8e <HAL_ETH_SetMACConfig>:
{
 8001d8e:	b508      	push	{r3, lr}
  if (macconf == NULL)
 8001d90:	b139      	cbz	r1, 8001da2 <HAL_ETH_SetMACConfig+0x14>
  if (heth->gState == HAL_ETH_STATE_READY)
 8001d92:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d103      	bne.n	8001da2 <HAL_ETH_SetMACConfig+0x14>
    ETH_SetMACConfig(heth, macconf);
 8001d9a:	f7ff fb5f 	bl	800145c <ETH_SetMACConfig>
    return HAL_OK;
 8001d9e:	2000      	movs	r0, #0
}
 8001da0:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8001da2:	2001      	movs	r0, #1
 8001da4:	e7fc      	b.n	8001da0 <HAL_ETH_SetMACConfig+0x12>
	...

08001da8 <HAL_ETH_SetMDIOClockRange>:
{
 8001da8:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMIIAR;
 8001daa:	6803      	ldr	r3, [r0, #0]
{
 8001dac:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8001dae:	691c      	ldr	r4, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8001db0:	f000 fbd8 	bl	8002564 <HAL_RCC_GetHCLKFreq>
  if (hclk < 35000000U)
 8001db4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dec <HAL_ETH_SetMDIOClockRange+0x44>)
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001db6:	f024 041c 	bic.w	r4, r4, #28
  if (hclk < 35000000U)
 8001dba:	4298      	cmp	r0, r3
 8001dbc:	d804      	bhi.n	8001dc8 <HAL_ETH_SetMDIOClockRange+0x20>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dbe:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001dc2:	682b      	ldr	r3, [r5, #0]
 8001dc4:	611c      	str	r4, [r3, #16]
}
 8001dc6:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 60000000U)
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <HAL_ETH_SetMDIOClockRange+0x48>)
 8001dca:	4298      	cmp	r0, r3
 8001dcc:	d202      	bcs.n	8001dd4 <HAL_ETH_SetMDIOClockRange+0x2c>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001dce:	f044 040c 	orr.w	r4, r4, #12
 8001dd2:	e7f6      	b.n	8001dc2 <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 100000000U)
 8001dd4:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <HAL_ETH_SetMDIOClockRange+0x4c>)
 8001dd6:	4298      	cmp	r0, r3
 8001dd8:	d9f3      	bls.n	8001dc2 <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 150000000U)
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <HAL_ETH_SetMDIOClockRange+0x50>)
 8001ddc:	4298      	cmp	r0, r3
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001dde:	bf94      	ite	ls
 8001de0:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001de4:	f044 0410 	orrhi.w	r4, r4, #16
 8001de8:	e7eb      	b.n	8001dc2 <HAL_ETH_SetMDIOClockRange+0x1a>
 8001dea:	bf00      	nop
 8001dec:	02160ebf 	.word	0x02160ebf
 8001df0:	03938700 	.word	0x03938700
 8001df4:	05f5e0ff 	.word	0x05f5e0ff
 8001df8:	08f0d17f 	.word	0x08f0d17f

08001dfc <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8001dfc:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
}
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e08:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8001fc8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0e:	4a6c      	ldr	r2, [pc, #432]	@ (8001fc0 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8001e10:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e12:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8001e14:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e16:	ea04 0605 	and.w	r6, r4, r5
    if (iocurrent == ioposition)
 8001e1a:	43ac      	bics	r4, r5
 8001e1c:	f040 80b7 	bne.w	8001f8e <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e20:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e22:	2703      	movs	r7, #3
 8001e24:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e28:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e2c:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e30:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e32:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e36:	2f01      	cmp	r7, #1
 8001e38:	d834      	bhi.n	8001ea4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 8001e3a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e3c:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e40:	68cf      	ldr	r7, [r1, #12]
 8001e42:	fa07 f70e 	lsl.w	r7, r7, lr
 8001e46:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 8001e4a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e4c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e4e:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e52:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001e56:	409f      	lsls	r7, r3
 8001e58:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001e5c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001e5e:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e60:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e62:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e66:	688f      	ldr	r7, [r1, #8]
 8001e68:	fa07 f70e 	lsl.w	r7, r7, lr
 8001e6c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8001e70:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e72:	d119      	bne.n	8001ea8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8001e74:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e78:	f003 0a07 	and.w	sl, r3, #7
 8001e7c:	f04f 0b0f 	mov.w	fp, #15
 8001e80:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8001e84:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001e88:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e8c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001e90:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e94:	690f      	ldr	r7, [r1, #16]
 8001e96:	fa07 f70a 	lsl.w	r7, r7, sl
 8001e9a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8001e9e:	f8c8 7020 	str.w	r7, [r8, #32]
 8001ea2:	e001      	b.n	8001ea8 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea4:	2c03      	cmp	r4, #3
 8001ea6:	d1da      	bne.n	8001e5e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001ea8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001eaa:	fa04 f40e 	lsl.w	r4, r4, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eae:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001eb2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001eb6:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8001eba:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ebc:	d067      	beq.n	8001f8e <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8001ec2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ec6:	f003 0c03 	and.w	ip, r3, #3
 8001eca:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001ed2:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ed6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8001ede:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8001ee2:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ee6:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8001eee:	9401      	str	r4, [sp, #4]
 8001ef0:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001ef2:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ef4:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ef8:	4c32      	ldr	r4, [pc, #200]	@ (8001fc4 <HAL_GPIO_Init+0x1c0>)
 8001efa:	42a0      	cmp	r0, r4
 8001efc:	d04e      	beq.n	8001f9c <HAL_GPIO_Init+0x198>
 8001efe:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f02:	42a0      	cmp	r0, r4
 8001f04:	d04c      	beq.n	8001fa0 <HAL_GPIO_Init+0x19c>
 8001f06:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f0a:	42a0      	cmp	r0, r4
 8001f0c:	d04a      	beq.n	8001fa4 <HAL_GPIO_Init+0x1a0>
 8001f0e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f12:	42a0      	cmp	r0, r4
 8001f14:	d048      	beq.n	8001fa8 <HAL_GPIO_Init+0x1a4>
 8001f16:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f1a:	42a0      	cmp	r0, r4
 8001f1c:	d046      	beq.n	8001fac <HAL_GPIO_Init+0x1a8>
 8001f1e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f22:	42a0      	cmp	r0, r4
 8001f24:	d044      	beq.n	8001fb0 <HAL_GPIO_Init+0x1ac>
 8001f26:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f2a:	42a0      	cmp	r0, r4
 8001f2c:	d042      	beq.n	8001fb4 <HAL_GPIO_Init+0x1b0>
 8001f2e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f32:	42a0      	cmp	r0, r4
 8001f34:	d040      	beq.n	8001fb8 <HAL_GPIO_Init+0x1b4>
 8001f36:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f3a:	42a0      	cmp	r0, r4
 8001f3c:	d03e      	beq.n	8001fbc <HAL_GPIO_Init+0x1b8>
 8001f3e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001f42:	42a0      	cmp	r0, r4
 8001f44:	bf14      	ite	ne
 8001f46:	240a      	movne	r4, #10
 8001f48:	2409      	moveq	r4, #9
 8001f4a:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f4e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f52:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f56:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 8001f5c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	bf0c      	ite	eq
 8001f60:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001f62:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f64:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8001f68:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8001f6a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	bf0c      	ite	eq
 8001f6e:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001f70:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f72:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8001f76:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8001f78:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	bf0c      	ite	eq
 8001f7c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001f7e:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f80:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8001f82:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8001f84:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f86:	bf54      	ite	pl
 8001f88:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001f8a:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8001f8c:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f8e:	3301      	adds	r3, #1
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	f47f af3d 	bne.w	8001e10 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001f96:	b003      	add	sp, #12
 8001f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f9c:	2400      	movs	r4, #0
 8001f9e:	e7d4      	b.n	8001f4a <HAL_GPIO_Init+0x146>
 8001fa0:	2401      	movs	r4, #1
 8001fa2:	e7d2      	b.n	8001f4a <HAL_GPIO_Init+0x146>
 8001fa4:	2402      	movs	r4, #2
 8001fa6:	e7d0      	b.n	8001f4a <HAL_GPIO_Init+0x146>
 8001fa8:	2403      	movs	r4, #3
 8001faa:	e7ce      	b.n	8001f4a <HAL_GPIO_Init+0x146>
 8001fac:	2404      	movs	r4, #4
 8001fae:	e7cc      	b.n	8001f4a <HAL_GPIO_Init+0x146>
 8001fb0:	2405      	movs	r4, #5
 8001fb2:	e7ca      	b.n	8001f4a <HAL_GPIO_Init+0x146>
 8001fb4:	2406      	movs	r4, #6
 8001fb6:	e7c8      	b.n	8001f4a <HAL_GPIO_Init+0x146>
 8001fb8:	2407      	movs	r4, #7
 8001fba:	e7c6      	b.n	8001f4a <HAL_GPIO_Init+0x146>
 8001fbc:	2408      	movs	r4, #8
 8001fbe:	e7c4      	b.n	8001f4a <HAL_GPIO_Init+0x146>
 8001fc0:	40013c00 	.word	0x40013c00
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40023800 	.word	0x40023800

08001fcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fcc:	b10a      	cbz	r2, 8001fd2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fce:	6181      	str	r1, [r0, #24]
  }
}
 8001fd0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fd2:	0409      	lsls	r1, r1, #16
 8001fd4:	e7fb      	b.n	8001fce <HAL_GPIO_WritePin+0x2>
	...

08001fd8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd8:	4a02      	ldr	r2, [pc, #8]	@ (8001fe4 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe0:	6013      	str	r3, [r2, #0]
}
 8001fe2:	4770      	bx	lr
 8001fe4:	40007000 	.word	0x40007000

08001fe8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe8:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001fea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fee:	4c19      	ldr	r4, [pc, #100]	@ (8002054 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002006:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002008:	f7ff f8c0 	bl	800118c <HAL_GetTick>
 800200c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800200e:	6863      	ldr	r3, [r4, #4]
 8002010:	03da      	lsls	r2, r3, #15
 8002012:	d50c      	bpl.n	800202e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002014:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002016:	4d0f      	ldr	r5, [pc, #60]	@ (8002054 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800201e:	f7ff f8b5 	bl	800118c <HAL_GetTick>
 8002022:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002024:	686b      	ldr	r3, [r5, #4]
 8002026:	039b      	lsls	r3, r3, #14
 8002028:	d50a      	bpl.n	8002040 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800202a:	2000      	movs	r0, #0
 800202c:	e006      	b.n	800203c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800202e:	f7ff f8ad 	bl	800118c <HAL_GetTick>
 8002032:	1b40      	subs	r0, r0, r5
 8002034:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002038:	d9e9      	bls.n	800200e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800203a:	2003      	movs	r0, #3
}
 800203c:	b003      	add	sp, #12
 800203e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002040:	f7ff f8a4 	bl	800118c <HAL_GetTick>
 8002044:	1b00      	subs	r0, r0, r4
 8002046:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800204a:	d9eb      	bls.n	8002024 <HAL_PWREx_EnableOverDrive+0x3c>
 800204c:	e7f5      	b.n	800203a <HAL_PWREx_EnableOverDrive+0x52>
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	40007000 	.word	0x40007000

08002058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002058:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800205c:	4604      	mov	r4, r0
 800205e:	b340      	cbz	r0, 80020b2 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002060:	6803      	ldr	r3, [r0, #0]
 8002062:	07de      	lsls	r6, r3, #31
 8002064:	d410      	bmi.n	8002088 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	079d      	lsls	r5, r3, #30
 800206a:	d461      	bmi.n	8002130 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	0719      	lsls	r1, r3, #28
 8002070:	f100 80a6 	bmi.w	80021c0 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	075a      	lsls	r2, r3, #29
 8002078:	f100 80c7 	bmi.w	800220a <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207c:	69a2      	ldr	r2, [r4, #24]
 800207e:	2a00      	cmp	r2, #0
 8002080:	f040 8130 	bne.w	80022e4 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002084:	2000      	movs	r0, #0
 8002086:	e02c      	b.n	80020e2 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002088:	4b94      	ldr	r3, [pc, #592]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	f002 020c 	and.w	r2, r2, #12
 8002090:	2a04      	cmp	r2, #4
 8002092:	d007      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	f002 020c 	and.w	r2, r2, #12
 800209a:	2a08      	cmp	r2, #8
 800209c:	d10b      	bne.n	80020b6 <HAL_RCC_OscConfig+0x5e>
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0259      	lsls	r1, r3, #9
 80020a2:	d508      	bpl.n	80020b6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	4b8d      	ldr	r3, [pc, #564]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	039a      	lsls	r2, r3, #14
 80020aa:	d5dc      	bpl.n	8002066 <HAL_RCC_OscConfig+0xe>
 80020ac:	6863      	ldr	r3, [r4, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1d9      	bne.n	8002066 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80020b2:	2001      	movs	r0, #1
 80020b4:	e015      	b.n	80020e2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b6:	6863      	ldr	r3, [r4, #4]
 80020b8:	4d88      	ldr	r5, [pc, #544]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
 80020ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020be:	d113      	bne.n	80020e8 <HAL_RCC_OscConfig+0x90>
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020c8:	f7ff f860 	bl	800118c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020cc:	4e83      	ldr	r6, [pc, #524]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 80020ce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d0:	6833      	ldr	r3, [r6, #0]
 80020d2:	039b      	lsls	r3, r3, #14
 80020d4:	d4c7      	bmi.n	8002066 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d6:	f7ff f859 	bl	800118c <HAL_GetTick>
 80020da:	1b40      	subs	r0, r0, r5
 80020dc:	2864      	cmp	r0, #100	@ 0x64
 80020de:	d9f7      	bls.n	80020d0 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80020e0:	2003      	movs	r0, #3
}
 80020e2:	b002      	add	sp, #8
 80020e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e8:	b99b      	cbnz	r3, 8002112 <HAL_RCC_OscConfig+0xba>
 80020ea:	682b      	ldr	r3, [r5, #0]
 80020ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f0:	602b      	str	r3, [r5, #0]
 80020f2:	682b      	ldr	r3, [r5, #0]
 80020f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020fa:	f7ff f847 	bl	800118c <HAL_GetTick>
 80020fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	039f      	lsls	r7, r3, #14
 8002104:	d5af      	bpl.n	8002066 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002106:	f7ff f841 	bl	800118c <HAL_GetTick>
 800210a:	1b80      	subs	r0, r0, r6
 800210c:	2864      	cmp	r0, #100	@ 0x64
 800210e:	d9f7      	bls.n	8002100 <HAL_RCC_OscConfig+0xa8>
 8002110:	e7e6      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002112:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002116:	682b      	ldr	r3, [r5, #0]
 8002118:	d103      	bne.n	8002122 <HAL_RCC_OscConfig+0xca>
 800211a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800211e:	602b      	str	r3, [r5, #0]
 8002120:	e7ce      	b.n	80020c0 <HAL_RCC_OscConfig+0x68>
 8002122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002126:	602b      	str	r3, [r5, #0]
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800212e:	e7ca      	b.n	80020c6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002130:	4b6a      	ldr	r3, [pc, #424]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	f012 0f0c 	tst.w	r2, #12
 8002138:	d007      	beq.n	800214a <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	f002 020c 	and.w	r2, r2, #12
 8002140:	2a08      	cmp	r2, #8
 8002142:	d111      	bne.n	8002168 <HAL_RCC_OscConfig+0x110>
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	025d      	lsls	r5, r3, #9
 8002148:	d40e      	bmi.n	8002168 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	4a64      	ldr	r2, [pc, #400]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
 800214c:	6813      	ldr	r3, [r2, #0]
 800214e:	0799      	lsls	r1, r3, #30
 8002150:	d502      	bpl.n	8002158 <HAL_RCC_OscConfig+0x100>
 8002152:	68e3      	ldr	r3, [r4, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d1ac      	bne.n	80020b2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	6921      	ldr	r1, [r4, #16]
 800215c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002160:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002164:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e781      	b.n	800206c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002168:	68e3      	ldr	r3, [r4, #12]
 800216a:	4d5c      	ldr	r5, [pc, #368]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
 800216c:	b1bb      	cbz	r3, 800219e <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 800216e:	682b      	ldr	r3, [r5, #0]
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002176:	f7ff f809 	bl	800118c <HAL_GetTick>
 800217a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	079b      	lsls	r3, r3, #30
 8002180:	d507      	bpl.n	8002192 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	682b      	ldr	r3, [r5, #0]
 8002184:	6922      	ldr	r2, [r4, #16]
 8002186:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800218a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800218e:	602b      	str	r3, [r5, #0]
 8002190:	e76c      	b.n	800206c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7fe fffb 	bl	800118c <HAL_GetTick>
 8002196:	1b80      	subs	r0, r0, r6
 8002198:	2802      	cmp	r0, #2
 800219a:	d9ef      	bls.n	800217c <HAL_RCC_OscConfig+0x124>
 800219c:	e7a0      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800219e:	682b      	ldr	r3, [r5, #0]
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021a6:	f7fe fff1 	bl	800118c <HAL_GetTick>
 80021aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ac:	682b      	ldr	r3, [r5, #0]
 80021ae:	079f      	lsls	r7, r3, #30
 80021b0:	f57f af5c 	bpl.w	800206c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7fe ffea 	bl	800118c <HAL_GetTick>
 80021b8:	1b80      	subs	r0, r0, r6
 80021ba:	2802      	cmp	r0, #2
 80021bc:	d9f6      	bls.n	80021ac <HAL_RCC_OscConfig+0x154>
 80021be:	e78f      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021c0:	6963      	ldr	r3, [r4, #20]
 80021c2:	4d46      	ldr	r5, [pc, #280]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
 80021c4:	b183      	cbz	r3, 80021e8 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 80021c6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80021ce:	f7fe ffdd 	bl	800118c <HAL_GetTick>
 80021d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80021d6:	079b      	lsls	r3, r3, #30
 80021d8:	f53f af4c 	bmi.w	8002074 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7fe ffd6 	bl	800118c <HAL_GetTick>
 80021e0:	1b80      	subs	r0, r0, r6
 80021e2:	2802      	cmp	r0, #2
 80021e4:	d9f6      	bls.n	80021d4 <HAL_RCC_OscConfig+0x17c>
 80021e6:	e77b      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80021e8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80021f0:	f7fe ffcc 	bl	800118c <HAL_GetTick>
 80021f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80021f8:	079f      	lsls	r7, r3, #30
 80021fa:	f57f af3b 	bpl.w	8002074 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fe:	f7fe ffc5 	bl	800118c <HAL_GetTick>
 8002202:	1b80      	subs	r0, r0, r6
 8002204:	2802      	cmp	r0, #2
 8002206:	d9f6      	bls.n	80021f6 <HAL_RCC_OscConfig+0x19e>
 8002208:	e76a      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4b34      	ldr	r3, [pc, #208]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
 800220c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800220e:	00d5      	lsls	r5, r2, #3
 8002210:	d427      	bmi.n	8002262 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8002214:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800221a:	641a      	str	r2, [r3, #64]	@ 0x40
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002226:	4d2e      	ldr	r5, [pc, #184]	@ (80022e0 <HAL_RCC_OscConfig+0x288>)
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	05d8      	lsls	r0, r3, #23
 800222c:	d51b      	bpl.n	8002266 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222e:	68a3      	ldr	r3, [r4, #8]
 8002230:	4d2a      	ldr	r5, [pc, #168]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
 8002232:	2b01      	cmp	r3, #1
 8002234:	d127      	bne.n	8002286 <HAL_RCC_OscConfig+0x22e>
 8002236:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002242:	f7fe ffa3 	bl	800118c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002246:	4e25      	ldr	r6, [pc, #148]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8002248:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800224c:	079a      	lsls	r2, r3, #30
 800224e:	d53f      	bpl.n	80022d0 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8002250:	2f00      	cmp	r7, #0
 8002252:	f43f af13 	beq.w	800207c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002256:	4a21      	ldr	r2, [pc, #132]	@ (80022dc <HAL_RCC_OscConfig+0x284>)
 8002258:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800225a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800225e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002260:	e70c      	b.n	800207c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8002262:	2700      	movs	r7, #0
 8002264:	e7df      	b.n	8002226 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8002266:	682b      	ldr	r3, [r5, #0]
 8002268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800226e:	f7fe ff8d 	bl	800118c <HAL_GetTick>
 8002272:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	05d9      	lsls	r1, r3, #23
 8002278:	d4d9      	bmi.n	800222e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227a:	f7fe ff87 	bl	800118c <HAL_GetTick>
 800227e:	1b80      	subs	r0, r0, r6
 8002280:	2864      	cmp	r0, #100	@ 0x64
 8002282:	d9f7      	bls.n	8002274 <HAL_RCC_OscConfig+0x21c>
 8002284:	e72c      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002286:	b9ab      	cbnz	r3, 80022b4 <HAL_RCC_OscConfig+0x25c>
 8002288:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	672b      	str	r3, [r5, #112]	@ 0x70
 8002294:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002296:	f023 0304 	bic.w	r3, r3, #4
 800229a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800229c:	f7fe ff76 	bl	800118c <HAL_GetTick>
 80022a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80022a4:	079b      	lsls	r3, r3, #30
 80022a6:	d5d3      	bpl.n	8002250 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7fe ff70 	bl	800118c <HAL_GetTick>
 80022ac:	1b80      	subs	r0, r0, r6
 80022ae:	4540      	cmp	r0, r8
 80022b0:	d9f7      	bls.n	80022a2 <HAL_RCC_OscConfig+0x24a>
 80022b2:	e715      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80022b8:	d103      	bne.n	80022c2 <HAL_RCC_OscConfig+0x26a>
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	672b      	str	r3, [r5, #112]	@ 0x70
 80022c0:	e7b9      	b.n	8002236 <HAL_RCC_OscConfig+0x1de>
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	672b      	str	r3, [r5, #112]	@ 0x70
 80022c8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80022ca:	f023 0304 	bic.w	r3, r3, #4
 80022ce:	e7b5      	b.n	800223c <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7fe ff5c 	bl	800118c <HAL_GetTick>
 80022d4:	1b40      	subs	r0, r0, r5
 80022d6:	4540      	cmp	r0, r8
 80022d8:	d9b7      	bls.n	800224a <HAL_RCC_OscConfig+0x1f2>
 80022da:	e701      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e4:	4d38      	ldr	r5, [pc, #224]	@ (80023c8 <HAL_RCC_OscConfig+0x370>)
 80022e6:	68ab      	ldr	r3, [r5, #8]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d041      	beq.n	8002374 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 80022f0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80022f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022f8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fa:	d12e      	bne.n	800235a <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 80022fc:	f7fe ff46 	bl	800118c <HAL_GetTick>
 8002300:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	682b      	ldr	r3, [r5, #0]
 8002304:	0199      	lsls	r1, r3, #6
 8002306:	d422      	bmi.n	800234e <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002308:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800230a:	085b      	lsrs	r3, r3, #1
 800230c:	1e5a      	subs	r2, r3, #1
 800230e:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002312:	430b      	orrs	r3, r1
 8002314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002318:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800231a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800231e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002320:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002324:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002328:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800232a:	682b      	ldr	r3, [r5, #0]
 800232c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002330:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002332:	f7fe ff2b 	bl	800118c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002336:	4d24      	ldr	r5, [pc, #144]	@ (80023c8 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 8002338:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	682b      	ldr	r3, [r5, #0]
 800233c:	019a      	lsls	r2, r3, #6
 800233e:	f53f aea1 	bmi.w	8002084 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002342:	f7fe ff23 	bl	800118c <HAL_GetTick>
 8002346:	1b00      	subs	r0, r0, r4
 8002348:	2802      	cmp	r0, #2
 800234a:	d9f6      	bls.n	800233a <HAL_RCC_OscConfig+0x2e2>
 800234c:	e6c8      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234e:	f7fe ff1d 	bl	800118c <HAL_GetTick>
 8002352:	1b80      	subs	r0, r0, r6
 8002354:	2802      	cmp	r0, #2
 8002356:	d9d4      	bls.n	8002302 <HAL_RCC_OscConfig+0x2aa>
 8002358:	e6c2      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 800235a:	f7fe ff17 	bl	800118c <HAL_GetTick>
 800235e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	019b      	lsls	r3, r3, #6
 8002364:	f57f ae8e 	bpl.w	8002084 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe ff10 	bl	800118c <HAL_GetTick>
 800236c:	1b00      	subs	r0, r0, r4
 800236e:	2802      	cmp	r0, #2
 8002370:	d9f6      	bls.n	8002360 <HAL_RCC_OscConfig+0x308>
 8002372:	e6b5      	b.n	80020e0 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002374:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8002376:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002378:	f43f ae9b 	beq.w	80020b2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002380:	69e1      	ldr	r1, [r4, #28]
 8002382:	428a      	cmp	r2, r1
 8002384:	f47f ae95 	bne.w	80020b2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002388:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238c:	6a21      	ldr	r1, [r4, #32]
 800238e:	428a      	cmp	r2, r1
 8002390:	f47f ae8f 	bne.w	80020b2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002394:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002398:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800239a:	401a      	ands	r2, r3
 800239c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80023a0:	f47f ae87 	bne.w	80020b2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023a4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80023a6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80023aa:	0852      	lsrs	r2, r2, #1
 80023ac:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ae:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80023b2:	f47f ae7e 	bne.w	80020b2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80023b8:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023bc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80023c0:	bf14      	ite	ne
 80023c2:	2001      	movne	r0, #1
 80023c4:	2000      	moveq	r0, #0
 80023c6:	e68c      	b.n	80020e2 <HAL_RCC_OscConfig+0x8a>
 80023c8:	40023800 	.word	0x40023800

080023cc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023cc:	4913      	ldr	r1, [pc, #76]	@ (800241c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80023ce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d0:	688b      	ldr	r3, [r1, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d01b      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0x46>
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d11b      	bne.n	8002416 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023de:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023e0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023e8:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ec:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80023f0:	bf1a      	itte	ne
 80023f2:	480b      	ldrne	r0, [pc, #44]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x54>)
 80023f4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f6:	480b      	ldreq	r0, [pc, #44]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x58>)
 80023f8:	fba1 0100 	umull	r0, r1, r1, r0
 80023fc:	f7fd ff58 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCC_GetSysClockFreq+0x50>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002408:	3301      	adds	r3, #1
 800240a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800240c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002410:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002412:	4803      	ldr	r0, [pc, #12]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x54>)
 8002414:	e7fc      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8002416:	4803      	ldr	r0, [pc, #12]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002418:	e7fa      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x44>
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	007a1200 	.word	0x007a1200
 8002424:	00f42400 	.word	0x00f42400

08002428 <HAL_RCC_ClockConfig>:
{
 8002428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800242c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800242e:	4604      	mov	r4, r0
 8002430:	b910      	cbnz	r0, 8002438 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002432:	2001      	movs	r0, #1
}
 8002434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4a45      	ldr	r2, [pc, #276]	@ (8002550 <HAL_RCC_ClockConfig+0x128>)
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	428b      	cmp	r3, r1
 8002442:	d328      	bcc.n	8002496 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	6821      	ldr	r1, [r4, #0]
 8002446:	078f      	lsls	r7, r1, #30
 8002448:	d430      	bmi.n	80024ac <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	07c8      	lsls	r0, r1, #31
 800244c:	d443      	bmi.n	80024d6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800244e:	4a40      	ldr	r2, [pc, #256]	@ (8002550 <HAL_RCC_ClockConfig+0x128>)
 8002450:	6813      	ldr	r3, [r2, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	42ab      	cmp	r3, r5
 8002458:	d866      	bhi.n	8002528 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245a:	6822      	ldr	r2, [r4, #0]
 800245c:	0751      	lsls	r1, r2, #29
 800245e:	d46f      	bmi.n	8002540 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002460:	0713      	lsls	r3, r2, #28
 8002462:	d507      	bpl.n	8002474 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002464:	4a3b      	ldr	r2, [pc, #236]	@ (8002554 <HAL_RCC_ClockConfig+0x12c>)
 8002466:	6921      	ldr	r1, [r4, #16]
 8002468:	6893      	ldr	r3, [r2, #8]
 800246a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800246e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002472:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002474:	f7ff ffaa 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 8002478:	4b36      	ldr	r3, [pc, #216]	@ (8002554 <HAL_RCC_ClockConfig+0x12c>)
 800247a:	4a37      	ldr	r2, [pc, #220]	@ (8002558 <HAL_RCC_ClockConfig+0x130>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	40d8      	lsrs	r0, r3
 8002486:	4b35      	ldr	r3, [pc, #212]	@ (800255c <HAL_RCC_ClockConfig+0x134>)
 8002488:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800248a:	4b35      	ldr	r3, [pc, #212]	@ (8002560 <HAL_RCC_ClockConfig+0x138>)
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	f7fe fcf5 	bl	8000e7c <HAL_InitTick>
  return HAL_OK;
 8002492:	2000      	movs	r0, #0
 8002494:	e7ce      	b.n	8002434 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	6813      	ldr	r3, [r2, #0]
 8002498:	f023 030f 	bic.w	r3, r3, #15
 800249c:	430b      	orrs	r3, r1
 800249e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	428b      	cmp	r3, r1
 80024a8:	d1c3      	bne.n	8002432 <HAL_RCC_ClockConfig+0xa>
 80024aa:	e7cb      	b.n	8002444 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	f011 0f04 	tst.w	r1, #4
 80024b0:	4b28      	ldr	r3, [pc, #160]	@ (8002554 <HAL_RCC_ClockConfig+0x12c>)
 80024b2:	d003      	beq.n	80024bc <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80024ba:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	070e      	lsls	r6, r1, #28
 80024be:	d503      	bpl.n	80024c8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80024c6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	68a0      	ldr	r0, [r4, #8]
 80024cc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80024d0:	4302      	orrs	r2, r0
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e7b9      	b.n	800244a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	6861      	ldr	r1, [r4, #4]
 80024d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002554 <HAL_RCC_ClockConfig+0x12c>)
 80024da:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024dc:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	d11b      	bne.n	8002518 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	d0a5      	beq.n	8002432 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e8:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ec:	4f19      	ldr	r7, [pc, #100]	@ (8002554 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	f022 0203 	bic.w	r2, r2, #3
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80024f6:	f7fe fe49 	bl	800118c <HAL_GetTick>
 80024fa:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	6862      	ldr	r2, [r4, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002508:	d0a1      	beq.n	800244e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250a:	f7fe fe3f 	bl	800118c <HAL_GetTick>
 800250e:	1b80      	subs	r0, r0, r6
 8002510:	4540      	cmp	r0, r8
 8002512:	d9f3      	bls.n	80024fc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002514:	2003      	movs	r0, #3
 8002516:	e78d      	b.n	8002434 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002518:	2902      	cmp	r1, #2
 800251a:	d102      	bne.n	8002522 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251c:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002520:	e7e0      	b.n	80024e4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	f012 0f02 	tst.w	r2, #2
 8002526:	e7dd      	b.n	80024e4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	f023 030f 	bic.w	r3, r3, #15
 800252e:	432b      	orrs	r3, r5
 8002530:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	6813      	ldr	r3, [r2, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	42ab      	cmp	r3, r5
 800253a:	f47f af7a 	bne.w	8002432 <HAL_RCC_ClockConfig+0xa>
 800253e:	e78c      	b.n	800245a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4904      	ldr	r1, [pc, #16]	@ (8002554 <HAL_RCC_ClockConfig+0x12c>)
 8002542:	68e0      	ldr	r0, [r4, #12]
 8002544:	688b      	ldr	r3, [r1, #8]
 8002546:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800254a:	4303      	orrs	r3, r0
 800254c:	608b      	str	r3, [r1, #8]
 800254e:	e787      	b.n	8002460 <HAL_RCC_ClockConfig+0x38>
 8002550:	40023c00 	.word	0x40023c00
 8002554:	40023800 	.word	0x40023800
 8002558:	0800e4e8 	.word	0x0800e4e8
 800255c:	20000004 	.word	0x20000004
 8002560:	2000000c 	.word	0x2000000c

08002564 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002564:	4b01      	ldr	r3, [pc, #4]	@ (800256c <HAL_RCC_GetHCLKFreq+0x8>)
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002570:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002572:	4a05      	ldr	r2, [pc, #20]	@ (8002588 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	4a03      	ldr	r2, [pc, #12]	@ (800258c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800257e:	6810      	ldr	r0, [r2, #0]
}
 8002580:	40d8      	lsrs	r0, r3
 8002582:	4770      	bx	lr
 8002584:	40023800 	.word	0x40023800
 8002588:	0800e4e0 	.word	0x0800e4e0
 800258c:	20000004 	.word	0x20000004

08002590 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002590:	230f      	movs	r3, #15
 8002592:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_RCC_GetClockConfig+0x34>)
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	f002 0203 	and.w	r2, r2, #3
 800259c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80025a4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80025ac:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	08db      	lsrs	r3, r3, #3
 80025b2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80025b6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <HAL_RCC_GetClockConfig+0x38>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	600b      	str	r3, [r1, #0]
}
 80025c2:	4770      	bx	lr
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40023c00 	.word	0x40023c00

080025cc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d133      	bne.n	8002640 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	2302      	movs	r3, #2
 80025da:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025de:	6803      	ldr	r3, [r0, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e8:	4a16      	ldr	r2, [pc, #88]	@ (8002644 <HAL_TIM_Base_Start_IT+0x74>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01a      	beq.n	8002624 <HAL_TIM_Base_Start_IT+0x54>
 80025ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f2:	d017      	beq.n	8002624 <HAL_TIM_Base_Start_IT+0x54>
 80025f4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d013      	beq.n	8002624 <HAL_TIM_Base_Start_IT+0x54>
 80025fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002600:	4293      	cmp	r3, r2
 8002602:	d00f      	beq.n	8002624 <HAL_TIM_Base_Start_IT+0x54>
 8002604:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002608:	4293      	cmp	r3, r2
 800260a:	d00b      	beq.n	8002624 <HAL_TIM_Base_Start_IT+0x54>
 800260c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002610:	4293      	cmp	r3, r2
 8002612:	d007      	beq.n	8002624 <HAL_TIM_Base_Start_IT+0x54>
 8002614:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002618:	4293      	cmp	r3, r2
 800261a:	d003      	beq.n	8002624 <HAL_TIM_Base_Start_IT+0x54>
 800261c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002620:	4293      	cmp	r3, r2
 8002622:	d107      	bne.n	8002634 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002624:	6899      	ldr	r1, [r3, #8]
 8002626:	4a08      	ldr	r2, [pc, #32]	@ (8002648 <HAL_TIM_Base_Start_IT+0x78>)
 8002628:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262a:	2a06      	cmp	r2, #6
 800262c:	d006      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x6c>
 800262e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002632:	d003      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800263c:	2000      	movs	r0, #0
 800263e:	4770      	bx	lr
    return HAL_ERROR;
 8002640:	2001      	movs	r0, #1
}
 8002642:	4770      	bx	lr
 8002644:	40010000 	.word	0x40010000
 8002648:	00010007 	.word	0x00010007

0800264c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800264c:	4770      	bx	lr

0800264e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800264e:	4770      	bx	lr

08002650 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8002650:	4770      	bx	lr

08002652 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8002652:	4770      	bx	lr

08002654 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8002654:	6803      	ldr	r3, [r0, #0]
{
 8002656:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002658:	68dd      	ldr	r5, [r3, #12]
{
 800265a:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800265c:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800265e:	07b2      	lsls	r2, r6, #30
 8002660:	d50d      	bpl.n	800267e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002662:	07a9      	lsls	r1, r5, #30
 8002664:	d50b      	bpl.n	800267e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002666:	f06f 0202 	mvn.w	r2, #2
 800266a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800266c:	2201      	movs	r2, #1
 800266e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	079a      	lsls	r2, r3, #30
 8002674:	d075      	beq.n	8002762 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002676:	f7ff ffea 	bl	800264e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	2300      	movs	r3, #0
 800267c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800267e:	0773      	lsls	r3, r6, #29
 8002680:	d510      	bpl.n	80026a4 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002682:	0768      	lsls	r0, r5, #29
 8002684:	d50e      	bpl.n	80026a4 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800268c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800268e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002690:	2202      	movs	r2, #2
 8002692:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800269a:	d068      	beq.n	800276e <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800269c:	f7ff ffd7 	bl	800264e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a0:	2300      	movs	r3, #0
 80026a2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026a4:	0731      	lsls	r1, r6, #28
 80026a6:	d50f      	bpl.n	80026c8 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026a8:	072a      	lsls	r2, r5, #28
 80026aa:	d50d      	bpl.n	80026c8 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b6:	2204      	movs	r2, #4
 80026b8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	079b      	lsls	r3, r3, #30
 80026be:	d05c      	beq.n	800277a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80026c0:	f7ff ffc5 	bl	800264e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c4:	2300      	movs	r3, #0
 80026c6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026c8:	06f1      	lsls	r1, r6, #27
 80026ca:	d510      	bpl.n	80026ee <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026cc:	06ea      	lsls	r2, r5, #27
 80026ce:	d50e      	bpl.n	80026ee <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026da:	2208      	movs	r2, #8
 80026dc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80026e4:	d04f      	beq.n	8002786 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	f7ff ffb2 	bl	800264e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	2300      	movs	r3, #0
 80026ec:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026ee:	07f3      	lsls	r3, r6, #31
 80026f0:	d508      	bpl.n	8002704 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026f2:	07e8      	lsls	r0, r5, #31
 80026f4:	d506      	bpl.n	8002704 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80026fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002700:	f7fe fb92 	bl	8000e28 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002704:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 8002708:	d008      	beq.n	800271c <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800270a:	0629      	lsls	r1, r5, #24
 800270c:	d506      	bpl.n	800271c <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 8002714:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002716:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002718:	f000 f8d9 	bl	80028ce <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800271c:	05f2      	lsls	r2, r6, #23
 800271e:	d508      	bpl.n	8002732 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002720:	062b      	lsls	r3, r5, #24
 8002722:	d506      	bpl.n	8002732 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800272a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800272c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800272e:	f000 f8cf 	bl	80028d0 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002732:	0670      	lsls	r0, r6, #25
 8002734:	d508      	bpl.n	8002748 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002736:	0669      	lsls	r1, r5, #25
 8002738:	d506      	bpl.n	8002748 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8002740:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002742:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002744:	f7ff ff85 	bl	8002652 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002748:	06b2      	lsls	r2, r6, #26
 800274a:	d522      	bpl.n	8002792 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800274c:	06ab      	lsls	r3, r5, #26
 800274e:	d520      	bpl.n	8002792 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002756:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002758:	611a      	str	r2, [r3, #16]
}
 800275a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800275e:	f000 b8b5 	b.w	80028cc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	f7ff ff73 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff ff72 	bl	8002650 <HAL_TIM_PWM_PulseFinishedCallback>
 800276c:	e785      	b.n	800267a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276e:	f7ff ff6d 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002772:	4620      	mov	r0, r4
 8002774:	f7ff ff6c 	bl	8002650 <HAL_TIM_PWM_PulseFinishedCallback>
 8002778:	e792      	b.n	80026a0 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	f7ff ff67 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277e:	4620      	mov	r0, r4
 8002780:	f7ff ff66 	bl	8002650 <HAL_TIM_PWM_PulseFinishedCallback>
 8002784:	e79e      	b.n	80026c4 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	f7ff ff61 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff ff60 	bl	8002650 <HAL_TIM_PWM_PulseFinishedCallback>
 8002790:	e7ab      	b.n	80026ea <HAL_TIM_IRQHandler+0x96>
}
 8002792:	bd70      	pop	{r4, r5, r6, pc}

08002794 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002794:	4a33      	ldr	r2, [pc, #204]	@ (8002864 <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 8002796:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002798:	4290      	cmp	r0, r2
 800279a:	d012      	beq.n	80027c2 <TIM_Base_SetConfig+0x2e>
 800279c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80027a0:	d00f      	beq.n	80027c2 <TIM_Base_SetConfig+0x2e>
 80027a2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80027a6:	4290      	cmp	r0, r2
 80027a8:	d00b      	beq.n	80027c2 <TIM_Base_SetConfig+0x2e>
 80027aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027ae:	4290      	cmp	r0, r2
 80027b0:	d007      	beq.n	80027c2 <TIM_Base_SetConfig+0x2e>
 80027b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027b6:	4290      	cmp	r0, r2
 80027b8:	d003      	beq.n	80027c2 <TIM_Base_SetConfig+0x2e>
 80027ba:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80027be:	4290      	cmp	r0, r2
 80027c0:	d119      	bne.n	80027f6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80027c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80027c8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ca:	4a26      	ldr	r2, [pc, #152]	@ (8002864 <TIM_Base_SetConfig+0xd0>)
 80027cc:	4290      	cmp	r0, r2
 80027ce:	d029      	beq.n	8002824 <TIM_Base_SetConfig+0x90>
 80027d0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80027d4:	d026      	beq.n	8002824 <TIM_Base_SetConfig+0x90>
 80027d6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80027da:	4290      	cmp	r0, r2
 80027dc:	d022      	beq.n	8002824 <TIM_Base_SetConfig+0x90>
 80027de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027e2:	4290      	cmp	r0, r2
 80027e4:	d01e      	beq.n	8002824 <TIM_Base_SetConfig+0x90>
 80027e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027ea:	4290      	cmp	r0, r2
 80027ec:	d01a      	beq.n	8002824 <TIM_Base_SetConfig+0x90>
 80027ee:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80027f2:	4290      	cmp	r0, r2
 80027f4:	d016      	beq.n	8002824 <TIM_Base_SetConfig+0x90>
 80027f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002868 <TIM_Base_SetConfig+0xd4>)
 80027f8:	4290      	cmp	r0, r2
 80027fa:	d013      	beq.n	8002824 <TIM_Base_SetConfig+0x90>
 80027fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002800:	4290      	cmp	r0, r2
 8002802:	d00f      	beq.n	8002824 <TIM_Base_SetConfig+0x90>
 8002804:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002808:	4290      	cmp	r0, r2
 800280a:	d00b      	beq.n	8002824 <TIM_Base_SetConfig+0x90>
 800280c:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002810:	4290      	cmp	r0, r2
 8002812:	d007      	beq.n	8002824 <TIM_Base_SetConfig+0x90>
 8002814:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002818:	4290      	cmp	r0, r2
 800281a:	d003      	beq.n	8002824 <TIM_Base_SetConfig+0x90>
 800281c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002820:	4290      	cmp	r0, r2
 8002822:	d103      	bne.n	800282c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002828:	68ca      	ldr	r2, [r1, #12]
 800282a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800282c:	694a      	ldr	r2, [r1, #20]
 800282e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002832:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002834:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002836:	688b      	ldr	r3, [r1, #8]
 8002838:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800283a:	680b      	ldr	r3, [r1, #0]
 800283c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <TIM_Base_SetConfig+0xd0>)
 8002840:	4298      	cmp	r0, r3
 8002842:	d003      	beq.n	800284c <TIM_Base_SetConfig+0xb8>
 8002844:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002848:	4298      	cmp	r0, r3
 800284a:	d101      	bne.n	8002850 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800284c:	690b      	ldr	r3, [r1, #16]
 800284e:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002850:	2301      	movs	r3, #1
 8002852:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002854:	6903      	ldr	r3, [r0, #16]
 8002856:	07db      	lsls	r3, r3, #31
 8002858:	d503      	bpl.n	8002862 <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800285a:	6903      	ldr	r3, [r0, #16]
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6103      	str	r3, [r0, #16]
  }
}
 8002862:	4770      	bx	lr
 8002864:	40010000 	.word	0x40010000
 8002868:	40014000 	.word	0x40014000

0800286c <HAL_TIM_Base_Init>:
{
 800286c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800286e:	4604      	mov	r4, r0
 8002870:	b350      	cbz	r0, 80028c8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002872:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002876:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800287a:	b91b      	cbnz	r3, 8002884 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800287c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002880:	f7ff fea4 	bl	80025cc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002886:	6820      	ldr	r0, [r4, #0]
 8002888:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800288a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288e:	f7ff ff81 	bl	8002794 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002892:	2301      	movs	r3, #1
  return HAL_OK;
 8002894:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002896:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800289e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80028a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80028a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80028aa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80028b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80028ba:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80028be:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80028c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80028c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028c8:	2001      	movs	r0, #1
 80028ca:	e7fc      	b.n	80028c6 <HAL_TIM_Base_Init+0x5a>

080028cc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80028cc:	4770      	bx	lr

080028ce <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80028ce:	4770      	bx	lr

080028d0 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80028d0:	4770      	bx	lr

080028d2 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80028d2:	4770      	bx	lr

080028d4 <MX_LWIP_Init>:
{
 80028d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[3] = 20;
 80028d6:	2314      	movs	r3, #20
  IP_ADDRESS[0] = 192;
 80028d8:	4f25      	ldr	r7, [pc, #148]	@ (8002970 <MX_LWIP_Init+0x9c>)
  NETMASK_ADDRESS[0] = 255;
 80028da:	4e26      	ldr	r6, [pc, #152]	@ (8002974 <MX_LWIP_Init+0xa0>)
  IP_ADDRESS[2] = 0;
 80028dc:	2400      	movs	r4, #0
  IP_ADDRESS[3] = 20;
 80028de:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 80028e0:	23ff      	movs	r3, #255	@ 0xff
  GATEWAY_ADDRESS[0] = 192;
 80028e2:	4d25      	ldr	r5, [pc, #148]	@ (8002978 <MX_LWIP_Init+0xa4>)
  IP_ADDRESS[0] = 192;
 80028e4:	21c0      	movs	r1, #192	@ 0xc0
  IP_ADDRESS[1] = 168;
 80028e6:	22a8      	movs	r2, #168	@ 0xa8
  NETMASK_ADDRESS[0] = 255;
 80028e8:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 80028ea:	7073      	strb	r3, [r6, #1]
{
 80028ec:	b085      	sub	sp, #20
  NETMASK_ADDRESS[2] = 255;
 80028ee:	70b3      	strb	r3, [r6, #2]
  GATEWAY_ADDRESS[3] = 1;
 80028f0:	2301      	movs	r3, #1
  tcpip_init( NULL, NULL );
 80028f2:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 80028f4:	7039      	strb	r1, [r7, #0]
  GATEWAY_ADDRESS[0] = 192;
 80028f6:	7029      	strb	r1, [r5, #0]
  tcpip_init( NULL, NULL );
 80028f8:	4621      	mov	r1, r4
  IP_ADDRESS[1] = 168;
 80028fa:	707a      	strb	r2, [r7, #1]
  GATEWAY_ADDRESS[1] = 168;
 80028fc:	706a      	strb	r2, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 80028fe:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002900:	70eb      	strb	r3, [r5, #3]
  IP_ADDRESS[2] = 0;
 8002902:	70bc      	strb	r4, [r7, #2]
  NETMASK_ADDRESS[3] = 0;
 8002904:	70f4      	strb	r4, [r6, #3]
  tcpip_init( NULL, NULL );
 8002906:	f004 fa23 	bl	8006d50 <tcpip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	491b      	ldr	r1, [pc, #108]	@ (800297c <MX_LWIP_Init+0xa8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800290e:	4a1c      	ldr	r2, [pc, #112]	@ (8002980 <MX_LWIP_Init+0xac>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002910:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002912:	6833      	ldr	r3, [r6, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002914:	6828      	ldr	r0, [r5, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002916:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002918:	4b1a      	ldr	r3, [pc, #104]	@ (8002984 <MX_LWIP_Init+0xb0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800291a:	4d1b      	ldr	r5, [pc, #108]	@ (8002988 <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800291c:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800291e:	481b      	ldr	r0, [pc, #108]	@ (800298c <MX_LWIP_Init+0xb8>)
 8002920:	9002      	str	r0, [sp, #8]
 8002922:	481b      	ldr	r0, [pc, #108]	@ (8002990 <MX_LWIP_Init+0xbc>)
 8002924:	e9cd 4000 	strd	r4, r0, [sp]
 8002928:	4628      	mov	r0, r5
 800292a:	f004 fe03 	bl	8007534 <netif_add>
  netif_set_default(&gnetif);
 800292e:	4628      	mov	r0, r5
 8002930:	f004 fe8c 	bl	800764c <netif_set_default>
  netif_set_up(&gnetif);
 8002934:	4628      	mov	r0, r5
 8002936:	f004 fe8f 	bl	8007658 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800293a:	4628      	mov	r0, r5
 800293c:	4915      	ldr	r1, [pc, #84]	@ (8002994 <MX_LWIP_Init+0xc0>)
 800293e:	f004 feff 	bl	8007740 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8002942:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <MX_LWIP_Init+0xc4>)
 8002944:	4621      	mov	r1, r4
 8002946:	2220      	movs	r2, #32
 8002948:	4618      	mov	r0, r3
 800294a:	f00a fe64 	bl	800d616 <memset>
  attributes.name = "EthLink";
 800294e:	4913      	ldr	r1, [pc, #76]	@ (800299c <MX_LWIP_Init+0xc8>)
 8002950:	1f02      	subs	r2, r0, #4
  attributes.priority = osPriorityBelowNormal;
 8002952:	2310      	movs	r3, #16
  attributes.name = "EthLink";
 8002954:	f840 1c04 	str.w	r1, [r0, #-4]
  attributes.priority = osPriorityBelowNormal;
 8002958:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800295c:	4810      	ldr	r0, [pc, #64]	@ (80029a0 <MX_LWIP_Init+0xcc>)
  attributes.priority = osPriorityBelowNormal;
 800295e:	e9c2 1305 	strd	r1, r3, [r2, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8002962:	4629      	mov	r1, r5
}
 8002964:	b005      	add	sp, #20
 8002966:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800296a:	f000 bb2f 	b.w	8002fcc <osThreadNew>
 800296e:	bf00      	nop
 8002970:	20019488 	.word	0x20019488
 8002974:	20019484 	.word	0x20019484
 8002978:	20019480 	.word	0x20019480
 800297c:	20019494 	.word	0x20019494
 8002980:	20019490 	.word	0x20019490
 8002984:	2001948c 	.word	0x2001948c
 8002988:	20019498 	.word	0x20019498
 800298c:	08006cbd 	.word	0x08006cbd
 8002990:	08002b39 	.word	0x08002b39
 8002994:	080028d3 	.word	0x080028d3
 8002998:	20019460 	.word	0x20019460
 800299c:	0800e4f8 	.word	0x0800e4f8
 80029a0:	08002ded 	.word	0x08002ded

080029a4 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 80029a4:	2000      	movs	r0, #0
 80029a6:	4770      	bx	lr

080029a8 <low_level_output>:
{
 80029a8:	b530      	push	{r4, r5, lr}
 80029aa:	b08d      	sub	sp, #52	@ 0x34
 80029ac:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80029ae:	2230      	movs	r2, #48	@ 0x30
 80029b0:	2100      	movs	r1, #0
 80029b2:	4668      	mov	r0, sp
 80029b4:	f00a fe2f 	bl	800d616 <memset>
  for(q = p; q != NULL; q = q->next)
 80029b8:	466a      	mov	r2, sp
 80029ba:	4623      	mov	r3, r4
  uint32_t i = 0U;
 80029bc:	2100      	movs	r1, #0
  for(q = p; q != NULL; q = q->next)
 80029be:	b9db      	cbnz	r3, 80029f8 <low_level_output+0x50>
  TxConfig.Length = p->tot_len;
 80029c0:	4d18      	ldr	r5, [pc, #96]	@ (8002a24 <low_level_output+0x7c>)
  pbuf_ref(p);
 80029c2:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 80029c4:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 80029c6:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.Length = p->tot_len;
 80029ca:	606b      	str	r3, [r5, #4]
  TxConfig.pData = p;
 80029cc:	636c      	str	r4, [r5, #52]	@ 0x34
  pbuf_ref(p);
 80029ce:	f005 f8eb 	bl	8007ba8 <pbuf_ref>
  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 80029d2:	4629      	mov	r1, r5
 80029d4:	4814      	ldr	r0, [pc, #80]	@ (8002a28 <low_level_output+0x80>)
 80029d6:	f7fe ffe8 	bl	80019aa <HAL_ETH_Transmit_IT>
 80029da:	b9e0      	cbnz	r0, 8002a16 <low_level_output+0x6e>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80029dc:	4c13      	ldr	r4, [pc, #76]	@ (8002a2c <low_level_output+0x84>)
 80029de:	f04f 31ff 	mov.w	r1, #4294967295
 80029e2:	6820      	ldr	r0, [r4, #0]
 80029e4:	f000 fc54 	bl	8003290 <osSemaphoreAcquire>
 80029e8:	2800      	cmp	r0, #0
 80029ea:	d1f8      	bne.n	80029de <low_level_output+0x36>
    HAL_ETH_ReleaseTxPacket(&heth);
 80029ec:	480e      	ldr	r0, [pc, #56]	@ (8002a28 <low_level_output+0x80>)
 80029ee:	f7ff f87e 	bl	8001aee <HAL_ETH_ReleaseTxPacket>
  return errval;
 80029f2:	2000      	movs	r0, #0
}
 80029f4:	b00d      	add	sp, #52	@ 0x34
 80029f6:	bd30      	pop	{r4, r5, pc}
    if(i >= ETH_TX_DESC_CNT)
 80029f8:	2904      	cmp	r1, #4
 80029fa:	d010      	beq.n	8002a1e <low_level_output+0x76>
    Txbuffer[i].buffer = q->payload;
 80029fc:	6858      	ldr	r0, [r3, #4]
 80029fe:	6010      	str	r0, [r2, #0]
    Txbuffer[i].len = q->len;
 8002a00:	8958      	ldrh	r0, [r3, #10]
 8002a02:	6050      	str	r0, [r2, #4]
    if(i>0)
 8002a04:	b109      	cbz	r1, 8002a0a <low_level_output+0x62>
      Txbuffer[i-1].next = &Txbuffer[i];
 8002a06:	f842 2c04 	str.w	r2, [r2, #-4]
    if(q->next == NULL)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	b903      	cbnz	r3, 8002a10 <low_level_output+0x68>
      Txbuffer[i].next = NULL;
 8002a0e:	6093      	str	r3, [r2, #8]
    i++;
 8002a10:	3101      	adds	r1, #1
  for(q = p; q != NULL; q = q->next)
 8002a12:	320c      	adds	r2, #12
 8002a14:	e7d3      	b.n	80029be <low_level_output+0x16>
    pbuf_free(p);
 8002a16:	4620      	mov	r0, r4
 8002a18:	f004 ff6a 	bl	80078f0 <pbuf_free>
 8002a1c:	e7e9      	b.n	80029f2 <low_level_output+0x4a>
      return ERR_IF;
 8002a1e:	f06f 000b 	mvn.w	r0, #11
 8002a22:	e7e7      	b.n	80029f4 <low_level_output+0x4c>
 8002a24:	200194ec 	.word	0x200194ec
 8002a28:	20019524 	.word	0x20019524
 8002a2c:	200195d4 	.word	0x200195d4

08002a30 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8002a30:	f7fe bbac 	b.w	800118c <HAL_GetTick>

08002a34 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 8002a34:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <ETH_PHY_IO_Init+0xc>)
{
 8002a36:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8002a38:	f7ff f9b6 	bl	8001da8 <HAL_ETH_SetMDIOClockRange>
}
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	bd08      	pop	{r3, pc}
 8002a40:	20019524 	.word	0x20019524

08002a44 <ETH_PHY_IO_ReadReg>:
{
 8002a44:	b508      	push	{r3, lr}
 8002a46:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8002a48:	460a      	mov	r2, r1
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	4803      	ldr	r0, [pc, #12]	@ (8002a5c <ETH_PHY_IO_ReadReg+0x18>)
 8002a4e:	f7ff f8ed 	bl	8001c2c <HAL_ETH_ReadPHYRegister>
 8002a52:	3800      	subs	r0, #0
 8002a54:	bf18      	it	ne
 8002a56:	2001      	movne	r0, #1
}
 8002a58:	4240      	negs	r0, r0
 8002a5a:	bd08      	pop	{r3, pc}
 8002a5c:	20019524 	.word	0x20019524

08002a60 <ETH_PHY_IO_WriteReg>:
{
 8002a60:	b508      	push	{r3, lr}
 8002a62:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8002a64:	460a      	mov	r2, r1
 8002a66:	4601      	mov	r1, r0
 8002a68:	4803      	ldr	r0, [pc, #12]	@ (8002a78 <ETH_PHY_IO_WriteReg+0x18>)
 8002a6a:	f7ff f906 	bl	8001c7a <HAL_ETH_WritePHYRegister>
 8002a6e:	3800      	subs	r0, #0
 8002a70:	bf18      	it	ne
 8002a72:	2001      	movne	r0, #1
}
 8002a74:	4240      	negs	r0, r0
 8002a76:	bd08      	pop	{r3, pc}
 8002a78:	20019524 	.word	0x20019524

08002a7c <pbuf_free_custom>:
{
 8002a7c:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8002a7e:	4808      	ldr	r0, [pc, #32]	@ (8002aa0 <pbuf_free_custom+0x24>)
{
 8002a80:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8002a82:	f004 fcbf 	bl	8007404 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8002a86:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <pbuf_free_custom+0x28>)
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	2a01      	cmp	r2, #1
 8002a8c:	d107      	bne.n	8002a9e <pbuf_free_custom+0x22>
    RxAllocStatus = RX_ALLOC_OK;
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8002a92:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <pbuf_free_custom+0x2c>)
 8002a94:	6818      	ldr	r0, [r3, #0]
}
 8002a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8002a9a:	f000 bc35 	b.w	8003308 <osSemaphoreRelease>
}
 8002a9e:	bd08      	pop	{r3, pc}
 8002aa0:	0800e54c 	.word	0x0800e54c
 8002aa4:	200195dc 	.word	0x200195dc
 8002aa8:	200195d8 	.word	0x200195d8

08002aac <ethernetif_input>:
{
 8002aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002ab0:	4605      	mov	r5, r0
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8002ab2:	4f11      	ldr	r7, [pc, #68]	@ (8002af8 <ethernetif_input+0x4c>)
  if(RxAllocStatus == RX_ALLOC_OK)
 8002ab4:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8002afc <ethernetif_input+0x50>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8002ab8:	f8df 9044 	ldr.w	r9, [pc, #68]	@ 8002b00 <ethernetif_input+0x54>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	6838      	ldr	r0, [r7, #0]
 8002ac2:	f000 fbe5 	bl	8003290 <osSemaphoreAcquire>
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d1f7      	bne.n	8002abc <ethernetif_input+0x10>
  if(RxAllocStatus == RX_ALLOC_OK)
 8002acc:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8002ad0:	9401      	str	r4, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8002ad2:	b91b      	cbnz	r3, 8002adc <ethernetif_input+0x30>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8002ad4:	a901      	add	r1, sp, #4
 8002ad6:	4648      	mov	r0, r9
 8002ad8:	f7fe ff95 	bl	8001a06 <HAL_ETH_ReadData>
  return p;
 8002adc:	9e01      	ldr	r6, [sp, #4]
        if (p != NULL)
 8002ade:	2e00      	cmp	r6, #0
 8002ae0:	d0ec      	beq.n	8002abc <ethernetif_input+0x10>
          if (netif->input( p, netif) != ERR_OK )
 8002ae2:	692b      	ldr	r3, [r5, #16]
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	4630      	mov	r0, r6
 8002ae8:	4798      	blx	r3
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d0ee      	beq.n	8002acc <ethernetif_input+0x20>
            pbuf_free(p);
 8002aee:	4630      	mov	r0, r6
 8002af0:	f004 fefe 	bl	80078f0 <pbuf_free>
 8002af4:	e7ea      	b.n	8002acc <ethernetif_input+0x20>
 8002af6:	bf00      	nop
 8002af8:	200195d8 	.word	0x200195d8
 8002afc:	200195dc 	.word	0x200195dc
 8002b00:	20019524 	.word	0x20019524

08002b04 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8002b04:	4b01      	ldr	r3, [pc, #4]	@ (8002b0c <HAL_ETH_RxCpltCallback+0x8>)
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	f000 bbfe 	b.w	8003308 <osSemaphoreRelease>
 8002b0c:	200195d8 	.word	0x200195d8

08002b10 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8002b10:	4b01      	ldr	r3, [pc, #4]	@ (8002b18 <HAL_ETH_TxCpltCallback+0x8>)
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	f000 bbf8 	b.w	8003308 <osSemaphoreRelease>
 8002b18:	200195d4 	.word	0x200195d4

08002b1c <HAL_ETH_ErrorCallback>:
{
 8002b1c:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8002b1e:	f7ff f96d 	bl	8001dfc <HAL_ETH_GetDMAError>
 8002b22:	0603      	lsls	r3, r0, #24
 8002b24:	d505      	bpl.n	8002b32 <HAL_ETH_ErrorCallback+0x16>
     osSemaphoreRelease(RxPktSemaphore);
 8002b26:	4b03      	ldr	r3, [pc, #12]	@ (8002b34 <HAL_ETH_ErrorCallback+0x18>)
 8002b28:	6818      	ldr	r0, [r3, #0]
}
 8002b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8002b2e:	f000 bbeb 	b.w	8003308 <osSemaphoreRelease>
}
 8002b32:	bd08      	pop	{r3, pc}
 8002b34:	200195d8 	.word	0x200195d8

08002b38 <ethernetif_init>:
{
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8002b3a:	4604      	mov	r4, r0
{
 8002b3c:	b0a5      	sub	sp, #148	@ 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8002b3e:	b930      	cbnz	r0, 8002b4e <ethernetif_init+0x16>
 8002b40:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <ethernetif_init+0x170>)
 8002b42:	f240 12fd 	movw	r2, #509	@ 0x1fd
 8002b46:	4959      	ldr	r1, [pc, #356]	@ (8002cac <ethernetif_init+0x174>)
 8002b48:	4859      	ldr	r0, [pc, #356]	@ (8002cb0 <ethernetif_init+0x178>)
 8002b4a:	f00a fcff 	bl	800d54c <iprintf>
  netif->name[0] = IFNAME0;
 8002b4e:	f247 4373 	movw	r3, #29811	@ 0x7473
  ETH_MACConfigTypeDef MACConf = {0};
 8002b52:	2264      	movs	r2, #100	@ 0x64
 8002b54:	2100      	movs	r1, #0
 8002b56:	a80b      	add	r0, sp, #44	@ 0x2c
  netif->name[0] = IFNAME0;
 8002b58:	85e3      	strh	r3, [r4, #46]	@ 0x2e
  MACAddr[4] = 0x00;
 8002b5a:	2600      	movs	r6, #0
  netif->output = etharp_output;
 8002b5c:	4b55      	ldr	r3, [pc, #340]	@ (8002cb4 <ethernetif_init+0x17c>)
  heth.Instance = ETH;
 8002b5e:	4d56      	ldr	r5, [pc, #344]	@ (8002cb8 <ethernetif_init+0x180>)
  netif->output = etharp_output;
 8002b60:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8002b62:	4b56      	ldr	r3, [pc, #344]	@ (8002cbc <ethernetif_init+0x184>)
 8002b64:	61a3      	str	r3, [r4, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 8002b66:	f00a fd56 	bl	800d616 <memset>
  heth.Instance = ETH;
 8002b6a:	4b55      	ldr	r3, [pc, #340]	@ (8002cc0 <ethernetif_init+0x188>)
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002b6c:	4628      	mov	r0, r5
  MACAddr[4] = 0x00;
 8002b6e:	f8ad 6004 	strh.w	r6, [sp, #4]
  heth.Instance = ETH;
 8002b72:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 8002b74:	4b53      	ldr	r3, [pc, #332]	@ (8002cc4 <ethernetif_init+0x18c>)
  heth.Init.MACAddr = &MACAddr[0];
 8002b76:	f8c5 d004 	str.w	sp, [r5, #4]
  MACAddr[0] = 0x00;
 8002b7a:	9300      	str	r3, [sp, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002b7c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8002b80:	60ab      	str	r3, [r5, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002b82:	4b51      	ldr	r3, [pc, #324]	@ (8002cc8 <ethernetif_init+0x190>)
 8002b84:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002b86:	4b51      	ldr	r3, [pc, #324]	@ (8002ccc <ethernetif_init+0x194>)
 8002b88:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 8002b8a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b8e:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002b90:	f7fe fd8a 	bl	80016a8 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002b94:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd0 <ethernetif_init+0x198>)
 8002b96:	4631      	mov	r1, r6
 8002b98:	2234      	movs	r2, #52	@ 0x34
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002b9a:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f00a fd3a 	bl	800d616 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002ba2:	2221      	movs	r2, #33	@ 0x21
 8002ba4:	f840 2c04 	str.w	r2, [r0, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002ba8:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002bac:	6102      	str	r2, [r0, #16]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8002bae:	4849      	ldr	r0, [pc, #292]	@ (8002cd4 <ethernetif_init+0x19c>)
 8002bb0:	f004 fbd4 	bl	800735c <memp_init_pool>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002bb4:	2306      	movs	r3, #6
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002bb6:	4631      	mov	r1, r6
 8002bb8:	2001      	movs	r0, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002bba:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002bbe:	686b      	ldr	r3, [r5, #4]
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	f884 2026 	strb.w	r2, [r4, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002bc6:	785a      	ldrb	r2, [r3, #1]
 8002bc8:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002bcc:	789a      	ldrb	r2, [r3, #2]
 8002bce:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002bd2:	78da      	ldrb	r2, [r3, #3]
 8002bd4:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002bd8:	791a      	ldrb	r2, [r3, #4]
 8002bda:	f884 202a 	strb.w	r2, [r4, #42]	@ 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002bde:	4632      	mov	r2, r6
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002be0:	795b      	ldrb	r3, [r3, #5]
 8002be2:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8002be6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002bea:	84a3      	strh	r3, [r4, #36]	@ 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002bec:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8002bf0:	f043 030a 	orr.w	r3, r3, #10
 8002bf4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002bf8:	f000 faf2 	bl	80031e0 <osSemaphoreNew>
 8002bfc:	4b36      	ldr	r3, [pc, #216]	@ (8002cd8 <ethernetif_init+0x1a0>)
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002bfe:	4632      	mov	r2, r6
 8002c00:	4631      	mov	r1, r6
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002c02:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002c04:	2001      	movs	r0, #1
 8002c06:	f000 faeb 	bl	80031e0 <osSemaphoreNew>
 8002c0a:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <ethernetif_init+0x1a4>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	4631      	mov	r1, r6
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8002c10:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8002c12:	a803      	add	r0, sp, #12
 8002c14:	f00a fcff 	bl	800d616 <memset>
  attributes.name = "EthIf";
 8002c18:	4b31      	ldr	r3, [pc, #196]	@ (8002ce0 <ethernetif_init+0x1a8>)
  attributes.priority = osPriorityRealtime;
 8002c1a:	f44f 70af 	mov.w	r0, #350	@ 0x15e
  osThreadNew(ethernetif_input, netif, &attributes);
 8002c1e:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8002c20:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 8002c22:	2330      	movs	r3, #48	@ 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8002c24:	4621      	mov	r1, r4
  attributes.priority = osPriorityRealtime;
 8002c26:	e9cd 0307 	strd	r0, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8002c2a:	482e      	ldr	r0, [pc, #184]	@ (8002ce4 <ethernetif_init+0x1ac>)
 8002c2c:	f000 f9ce 	bl	8002fcc <osThreadNew>
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8002c30:	492d      	ldr	r1, [pc, #180]	@ (8002ce8 <ethernetif_init+0x1b0>)
 8002c32:	482e      	ldr	r0, [pc, #184]	@ (8002cec <ethernetif_init+0x1b4>)
 8002c34:	f7fe fa07 	bl	8001046 <DP83848_RegisterBusIO>
  if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 8002c38:	482c      	ldr	r0, [pc, #176]	@ (8002cec <ethernetif_init+0x1b4>)
 8002c3a:	f7fe fa18 	bl	800106e <DP83848_Init>
 8002c3e:	b140      	cbz	r0, 8002c52 <ethernetif_init+0x11a>
      netif_set_link_down(netif);
 8002c40:	4620      	mov	r0, r4
 8002c42:	f004 fd63 	bl	800770c <netif_set_link_down>
      netif_set_down(netif);
 8002c46:	4620      	mov	r0, r4
 8002c48:	f004 fd20 	bl	800768c <netif_set_down>
}
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	b025      	add	sp, #148	@ 0x94
 8002c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hal_eth_init_status == HAL_OK)
 8002c52:	bb37      	cbnz	r7, 8002ca2 <ethernetif_init+0x16a>
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 8002c54:	4825      	ldr	r0, [pc, #148]	@ (8002cec <ethernetif_init+0x1b4>)
 8002c56:	f7fe fa37 	bl	80010c8 <DP83848_GetLinkState>
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8002c5a:	2801      	cmp	r0, #1
 8002c5c:	ddf0      	ble.n	8002c40 <ethernetif_init+0x108>
      switch (PHYLinkState)
 8002c5e:	3803      	subs	r0, #3
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8002c60:	a90b      	add	r1, sp, #44	@ 0x2c
 8002c62:	2802      	cmp	r0, #2
 8002c64:	bf93      	iteet	ls
 8002c66:	4b22      	ldrls	r3, [pc, #136]	@ (8002cf0 <ethernetif_init+0x1b8>)
      switch (PHYLinkState)
 8002c68:	f44f 4580 	movhi.w	r5, #16384	@ 0x4000
 8002c6c:	f44f 6600 	movhi.w	r6, #2048	@ 0x800
 8002c70:	f833 6010 	ldrhls.w	r6, [r3, r0, lsl #1]
 8002c74:	bf9c      	itt	ls
 8002c76:	4b1f      	ldrls	r3, [pc, #124]	@ (8002cf4 <ethernetif_init+0x1bc>)
 8002c78:	f833 5010 	ldrhls.w	r5, [r3, r0, lsl #1]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8002c7c:	480e      	ldr	r0, [pc, #56]	@ (8002cb8 <ethernetif_init+0x180>)
 8002c7e:	f7ff f820 	bl	8001cc2 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8002c82:	a90b      	add	r1, sp, #44	@ 0x2c
 8002c84:	480c      	ldr	r0, [pc, #48]	@ (8002cb8 <ethernetif_init+0x180>)
    MACConf.Speed = speed;
 8002c86:	e9cd 5610 	strd	r5, r6, [sp, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8002c8a:	f7ff f880 	bl	8001d8e <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8002c8e:	480a      	ldr	r0, [pc, #40]	@ (8002cb8 <ethernetif_init+0x180>)
 8002c90:	f7fe fe06 	bl	80018a0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8002c94:	4620      	mov	r0, r4
 8002c96:	f004 fcdf 	bl	8007658 <netif_set_up>
    netif_set_link_up(netif);
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f004 fd12 	bl	80076c4 <netif_set_link_up>
 8002ca0:	e7d4      	b.n	8002c4c <ethernetif_init+0x114>
    Error_Handler();
 8002ca2:	f7fe f8cb 	bl	8000e3c <Error_Handler>
 8002ca6:	e7d1      	b.n	8002c4c <ethernetif_init+0x114>
 8002ca8:	0800e500 	.word	0x0800e500
 8002cac:	0800e51c 	.word	0x0800e51c
 8002cb0:	0800e45a 	.word	0x0800e45a
 8002cb4:	0800c2c1 	.word	0x0800c2c1
 8002cb8:	20019524 	.word	0x20019524
 8002cbc:	080029a9 	.word	0x080029a9
 8002cc0:	40028000 	.word	0x40028000
 8002cc4:	00e18000 	.word	0x00e18000
 8002cc8:	2000008c 	.word	0x2000008c
 8002ccc:	2000012c 	.word	0x2000012c
 8002cd0:	200194f0 	.word	0x200194f0
 8002cd4:	0800e54c 	.word	0x0800e54c
 8002cd8:	200195d8 	.word	0x200195d8
 8002cdc:	200195d4 	.word	0x200195d4
 8002ce0:	0800e52a 	.word	0x0800e52a
 8002ce4:	08002aad 	.word	0x08002aad
 8002ce8:	20000010 	.word	0x20000010
 8002cec:	200194cc 	.word	0x200194cc
 8002cf0:	0800e546 	.word	0x0800e546
 8002cf4:	0800e540 	.word	0x0800e540

08002cf8 <sys_now>:
  return HAL_GetTick();
 8002cf8:	f7fe ba48 	b.w	800118c <HAL_GetTick>

08002cfc <HAL_ETH_MspInit>:
{
 8002cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfe:	b08d      	sub	sp, #52	@ 0x34
 8002d00:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d02:	2214      	movs	r2, #20
 8002d04:	2100      	movs	r1, #0
 8002d06:	a807      	add	r0, sp, #28
 8002d08:	f00a fc85 	bl	800d616 <memset>
  if(ethHandle->Instance==ETH)
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	4b33      	ldr	r3, [pc, #204]	@ (8002ddc <HAL_ETH_MspInit+0xe0>)
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d161      	bne.n	8002dd8 <HAL_ETH_MspInit+0xdc>
    __HAL_RCC_ETH_CLK_ENABLE();
 8002d14:	f5a3 4390 	sub.w	r3, r3, #18432	@ 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d1a:	2603      	movs	r6, #3
 8002d1c:	250b      	movs	r5, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 8002d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d20:	a907      	add	r1, sp, #28
 8002d22:	482f      	ldr	r0, [pc, #188]	@ (8002de0 <HAL_ETH_MspInit+0xe4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2400      	movs	r4, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 8002d26:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d2e:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8002d32:	9201      	str	r2, [sp, #4]
 8002d34:	9a01      	ldr	r2, [sp, #4]
 8002d36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d38:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002d3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d40:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8002d44:	9202      	str	r2, [sp, #8]
 8002d46:	9a02      	ldr	r2, [sp, #8]
 8002d48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d4a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8002d4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d52:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002d56:	9203      	str	r2, [sp, #12]
 8002d58:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d5c:	f042 0204 	orr.w	r2, r2, #4
 8002d60:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d64:	f002 0204 	and.w	r2, r2, #4
 8002d68:	9204      	str	r2, [sp, #16]
 8002d6a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d76:	f002 0201 	and.w	r2, r2, #1
 8002d7a:	9205      	str	r2, [sp, #20]
 8002d7c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d80:	f042 0202 	orr.w	r2, r2, #2
 8002d84:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	9306      	str	r3, [sp, #24]
 8002d8e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2332      	movs	r3, #50	@ 0x32
 8002d92:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d96:	e9cd 650a 	strd	r6, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9a:	f7ff f833 	bl	8001e04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002d9e:	2386      	movs	r3, #134	@ 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	a907      	add	r1, sp, #28
 8002da2:	4810      	ldr	r0, [pc, #64]	@ (8002de4 <HAL_ETH_MspInit+0xe8>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002da4:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002daa:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	f7ff f829 	bl	8001e04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002db2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db6:	a907      	add	r1, sp, #28
 8002db8:	480b      	ldr	r0, [pc, #44]	@ (8002de8 <HAL_ETH_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dba:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc0:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc4:	f7ff f81e 	bl	8001e04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8002dc8:	203d      	movs	r0, #61	@ 0x3d
 8002dca:	4622      	mov	r2, r4
 8002dcc:	2105      	movs	r1, #5
 8002dce:	f7fe fa07 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8002dd2:	203d      	movs	r0, #61	@ 0x3d
 8002dd4:	f7fe fa36 	bl	8001244 <HAL_NVIC_EnableIRQ>
}
 8002dd8:	b00d      	add	sp, #52	@ 0x34
 8002dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ddc:	40028000 	.word	0x40028000
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40020400 	.word	0x40020400

08002dec <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8002dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ETH_MACConfigTypeDef MACConf = {0};
  int32_t PHYLinkState = 0;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8002df0:	2500      	movs	r5, #0
{
 8002df2:	b09a      	sub	sp, #104	@ 0x68

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8002df4:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8002e8c <ethernet_link_thread+0xa0>
{
 8002df8:	4604      	mov	r4, r0
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8002dfa:	46a8      	mov	r8, r5
 8002dfc:	462f      	mov	r7, r5
    }

    if(linkchanged)
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8002dfe:	4e21      	ldr	r6, [pc, #132]	@ (8002e84 <ethernet_link_thread+0x98>)
  ETH_MACConfigTypeDef MACConf = {0};
 8002e00:	2264      	movs	r2, #100	@ 0x64
 8002e02:	f8df a08c 	ldr.w	sl, [pc, #140]	@ 8002e90 <ethernet_link_thread+0xa4>
 8002e06:	2100      	movs	r1, #0
 8002e08:	a801      	add	r0, sp, #4
 8002e0a:	f00a fc04 	bl	800d616 <memset>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8002e0e:	4648      	mov	r0, r9
 8002e10:	f7fe f95a 	bl	80010c8 <DP83848_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8002e14:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8002e18:	075a      	lsls	r2, r3, #29
 8002e1a:	d510      	bpl.n	8002e3e <ethernet_link_thread+0x52>
 8002e1c:	2801      	cmp	r0, #1
 8002e1e:	dc0c      	bgt.n	8002e3a <ethernet_link_thread+0x4e>
    HAL_ETH_Stop_IT(&heth);
 8002e20:	4630      	mov	r0, r6
 8002e22:	f7fe fd7d 	bl	8001920 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8002e26:	4620      	mov	r0, r4
 8002e28:	f004 fc30 	bl	800768c <netif_set_down>
    netif_set_link_down(netif);
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f004 fc6d 	bl	800770c <netif_set_link_down>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8002e32:	2064      	movs	r0, #100	@ 0x64
 8002e34:	f000 f91e 	bl	8003074 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8002e38:	e7e9      	b.n	8002e0e <ethernet_link_thread+0x22>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8002e3a:	075b      	lsls	r3, r3, #29
 8002e3c:	d4f9      	bmi.n	8002e32 <ethernet_link_thread+0x46>
 8002e3e:	2801      	cmp	r0, #1
 8002e40:	ddf7      	ble.n	8002e32 <ethernet_link_thread+0x46>
    switch (PHYLinkState)
 8002e42:	1e83      	subs	r3, r0, #2
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d819      	bhi.n	8002e7c <ethernet_link_thread+0x90>
 8002e48:	4a0f      	ldr	r2, [pc, #60]	@ (8002e88 <ethernet_link_thread+0x9c>)
 8002e4a:	f83a 8013 	ldrh.w	r8, [sl, r3, lsl #1]
 8002e4e:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8002e52:	a901      	add	r1, sp, #4
 8002e54:	4630      	mov	r0, r6
 8002e56:	f7fe ff34 	bl	8001cc2 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8002e5a:	a901      	add	r1, sp, #4
 8002e5c:	4630      	mov	r0, r6
      netif_set_link_up(netif);
 8002e5e:	2701      	movs	r7, #1
      MACConf.Speed = speed;
 8002e60:	e9cd 8506 	strd	r8, r5, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8002e64:	f7fe ff93 	bl	8001d8e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8002e68:	4630      	mov	r0, r6
 8002e6a:	f7fe fd19 	bl	80018a0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f004 fbf2 	bl	8007658 <netif_set_up>
      netif_set_link_up(netif);
 8002e74:	4620      	mov	r0, r4
 8002e76:	f004 fc25 	bl	80076c4 <netif_set_link_up>
 8002e7a:	e7da      	b.n	8002e32 <ethernet_link_thread+0x46>
    if(linkchanged)
 8002e7c:	2f00      	cmp	r7, #0
 8002e7e:	d0d8      	beq.n	8002e32 <ethernet_link_thread+0x46>
 8002e80:	e7e7      	b.n	8002e52 <ethernet_link_thread+0x66>
 8002e82:	bf00      	nop
 8002e84:	20019524 	.word	0x20019524
 8002e88:	0800e530 	.word	0x0800e530
 8002e8c:	200194cc 	.word	0x200194cc
 8002e90:	0800e538 	.word	0x0800e538

08002e94 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8002e94:	b513      	push	{r0, r1, r4, lr}
 8002e96:	4604      	mov	r4, r0
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8002e98:	480c      	ldr	r0, [pc, #48]	@ (8002ecc <HAL_ETH_RxAllocateCallback+0x38>)
 8002e9a:	f004 fa81 	bl	80073a0 <memp_malloc_pool>
  if (p)
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	b178      	cbz	r0, 8002ec2 <HAL_ETH_RxAllocateCallback+0x2e>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8002ea2:	f100 0220 	add.w	r2, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8002ea6:	490a      	ldr	r1, [pc, #40]	@ (8002ed0 <HAL_ETH_RxAllocateCallback+0x3c>)
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8002ea8:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8002eaa:	6101      	str	r1, [r0, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8002eac:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002eb0:	e9cd 2100 	strd	r2, r1, [sp]
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2241      	movs	r2, #65	@ 0x41
 8002eb8:	4608      	mov	r0, r1
 8002eba:	f004 fcc7 	bl	800784c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8002ebe:	b002      	add	sp, #8
 8002ec0:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8002ec2:	4a04      	ldr	r2, [pc, #16]	@ (8002ed4 <HAL_ETH_RxAllocateCallback+0x40>)
 8002ec4:	2101      	movs	r1, #1
    *buff = NULL;
 8002ec6:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8002ec8:	7011      	strb	r1, [r2, #0]
}
 8002eca:	e7f8      	b.n	8002ebe <HAL_ETH_RxAllocateCallback+0x2a>
 8002ecc:	0800e54c 	.word	0x0800e54c
 8002ed0:	08002a7d 	.word	0x08002a7d
 8002ed4:	200195dc 	.word	0x200195dc

08002ed8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8002ed8:	b530      	push	{r4, r5, lr}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8002eda:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8002edc:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 8002ee0:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8002ee4:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8002ee8:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8002eec:	6805      	ldr	r5, [r0, #0]
 8002eee:	b96d      	cbnz	r5, 8002f0c <HAL_ETH_RxLinkCallback+0x34>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8002ef0:	6004      	str	r4, [r0, #0]
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
  }
  *ppEnd  = p;
 8002ef2:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8002ef4:	6801      	ldr	r1, [r0, #0]
 8002ef6:	b961      	cbnz	r1, 8002f12 <HAL_ETH_RxLinkCallback+0x3a>
 8002ef8:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCIMVAC = op_addr;
 8002efc:	490a      	ldr	r1, [pc, #40]	@ (8002f28 <HAL_ETH_RxLinkCallback+0x50>)
    while (op_size > 0) {
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	dc0c      	bgt.n	8002f1c <HAL_ETH_RxLinkCallback+0x44>
 8002f02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f06:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8002f0a:	bd30      	pop	{r4, r5, pc}
    (*ppEnd)->next = p;
 8002f0c:	680d      	ldr	r5, [r1, #0]
 8002f0e:	602c      	str	r4, [r5, #0]
 8002f10:	e7ef      	b.n	8002ef2 <HAL_ETH_RxLinkCallback+0x1a>
    p->tot_len += Length;
 8002f12:	8908      	ldrh	r0, [r1, #8]
 8002f14:	4418      	add	r0, r3
 8002f16:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8002f18:	6809      	ldr	r1, [r1, #0]
 8002f1a:	e7ec      	b.n	8002ef6 <HAL_ETH_RxLinkCallback+0x1e>
      SCB->DCIMVAC = op_addr;
 8002f1c:	f8c1 225c 	str.w	r2, [r1, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 8002f20:	3b20      	subs	r3, #32
      op_addr += (uint32_t)linesize;
 8002f22:	3220      	adds	r2, #32
      op_size -=           linesize;
 8002f24:	e7eb      	b.n	8002efe <HAL_ETH_RxLinkCallback+0x26>
 8002f26:	bf00      	nop
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8002f2c:	f004 bce0 	b.w	80078f0 <pbuf_free>

08002f30 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f30:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f34:	b113      	cbz	r3, 8002f3c <osKernelInitialize+0xc>
    stat = osErrorISR;
 8002f36:	f06f 0005 	mvn.w	r0, #5
 8002f3a:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f3c:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8002f40:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8002f42:	b912      	cbnz	r2, 8002f4a <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f44:	f3ef 8211 	mrs	r2, BASEPRI
 8002f48:	b112      	cbz	r2, 8002f50 <osKernelInitialize+0x20>
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	2a02      	cmp	r2, #2
 8002f4e:	d0f2      	beq.n	8002f36 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	b910      	cbnz	r0, 8002f5a <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f58:	4770      	bx	lr
    } else {
      stat = osError;
 8002f5a:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8002f5e:	4770      	bx	lr
 8002f60:	2001e6b8 	.word	0x2001e6b8

08002f64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f64:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f66:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f6a:	b113      	cbz	r3, 8002f72 <osKernelStart+0xe>
    stat = osErrorISR;
 8002f6c:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8002f70:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f72:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8002f76:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa0 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8002f78:	b912      	cbnz	r2, 8002f80 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f7a:	f3ef 8211 	mrs	r2, BASEPRI
 8002f7e:	b112      	cbz	r2, 8002f86 <osKernelStart+0x22>
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	2a02      	cmp	r2, #2
 8002f84:	d0f2      	beq.n	8002f6c <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2a01      	cmp	r2, #1
 8002f8a:	d105      	bne.n	8002f98 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002f90:	f001 fafa 	bl	8004588 <vTaskStartScheduler>
      stat = osOK;
 8002f94:	2000      	movs	r0, #0
 8002f96:	e7eb      	b.n	8002f70 <osKernelStart+0xc>
      stat = osError;
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8002f9c:	e7e8      	b.n	8002f70 <osKernelStart+0xc>
 8002f9e:	bf00      	nop
 8002fa0:	2001e6b8 	.word	0x2001e6b8

08002fa4 <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fa4:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8002fa8:	b10b      	cbz	r3, 8002fae <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8002faa:	f001 bb4f 	b.w	800464c <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fae:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8002fb2:	b913      	cbnz	r3, 8002fba <osKernelGetTickCount+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8002fb8:	b11b      	cbz	r3, 8002fc2 <osKernelGetTickCount+0x1e>
 8002fba:	4b03      	ldr	r3, [pc, #12]	@ (8002fc8 <osKernelGetTickCount+0x24>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d0f3      	beq.n	8002faa <osKernelGetTickCount+0x6>
  } else {
    ticks = xTaskGetTickCount();
 8002fc2:	f001 bb3d 	b.w	8004640 <xTaskGetTickCount>
 8002fc6:	bf00      	nop
 8002fc8:	2001e6b8 	.word	0x2001e6b8

08002fcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fce:	4614      	mov	r4, r2
 8002fd0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002fd2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fd4:	460b      	mov	r3, r1
  hTask = NULL;
 8002fd6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fd8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8002fdc:	bb1a      	cbnz	r2, 8003026 <osThreadNew+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fde:	f3ef 8210 	mrs	r2, PRIMASK
 8002fe2:	b912      	cbnz	r2, 8002fea <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fe4:	f3ef 8211 	mrs	r2, BASEPRI
 8002fe8:	b11a      	cbz	r2, 8002ff2 <osThreadNew+0x26>
 8002fea:	4a21      	ldr	r2, [pc, #132]	@ (8003070 <osThreadNew+0xa4>)
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	2a02      	cmp	r2, #2
 8002ff0:	d019      	beq.n	8003026 <osThreadNew+0x5a>
 8002ff2:	b1c0      	cbz	r0, 8003026 <osThreadNew+0x5a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8002ff4:	b36c      	cbz	r4, 8003052 <osThreadNew+0x86>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8002ff6:	69a5      	ldr	r5, [r4, #24]
 8002ff8:	2d00      	cmp	r5, #0
 8002ffa:	bf08      	it	eq
 8002ffc:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ffe:	1e6a      	subs	r2, r5, #1
 8003000:	46ac      	mov	ip, r5
 8003002:	2a37      	cmp	r2, #55	@ 0x37
 8003004:	d82a      	bhi.n	800305c <osThreadNew+0x90>
 8003006:	6862      	ldr	r2, [r4, #4]
 8003008:	07d2      	lsls	r2, r2, #31
 800300a:	d427      	bmi.n	800305c <osThreadNew+0x90>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800300c:	6966      	ldr	r6, [r4, #20]
 800300e:	b16e      	cbz	r6, 800302c <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003010:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8003012:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003014:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8003018:	b157      	cbz	r7, 8003030 <osThreadNew+0x64>
 800301a:	f1be 0fa7 	cmp.w	lr, #167	@ 0xa7
 800301e:	d902      	bls.n	8003026 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003020:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003022:	b104      	cbz	r4, 8003026 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003024:	b9e6      	cbnz	r6, 8003060 <osThreadNew+0x94>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003026:	9805      	ldr	r0, [sp, #20]
}
 8003028:	b007      	add	sp, #28
 800302a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800302c:	2280      	movs	r2, #128	@ 0x80
 800302e:	e7f0      	b.n	8003012 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003030:	f1be 0f00 	cmp.w	lr, #0
 8003034:	d1f7      	bne.n	8003026 <osThreadNew+0x5a>
      if (mem == 0) {
 8003036:	6924      	ldr	r4, [r4, #16]
 8003038:	2c00      	cmp	r4, #0
 800303a:	d1f4      	bne.n	8003026 <osThreadNew+0x5a>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800303c:	ac05      	add	r4, sp, #20
 800303e:	b292      	uxth	r2, r2
 8003040:	e9cd c400 	strd	ip, r4, [sp]
 8003044:	f001 fa72 	bl	800452c <xTaskCreate>
 8003048:	2801      	cmp	r0, #1
          hTask = NULL;
 800304a:	bf1c      	itt	ne
 800304c:	2300      	movne	r3, #0
 800304e:	9305      	strne	r3, [sp, #20]
 8003050:	e7e9      	b.n	8003026 <osThreadNew+0x5a>
    name = NULL;
 8003052:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8003054:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8003058:	2280      	movs	r2, #128	@ 0x80
 800305a:	e7ef      	b.n	800303c <osThreadNew+0x70>
        return (NULL);
 800305c:	2000      	movs	r0, #0
 800305e:	e7e3      	b.n	8003028 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003060:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8003064:	9500      	str	r5, [sp, #0]
 8003066:	f001 fa23 	bl	80044b0 <xTaskCreateStatic>
 800306a:	9005      	str	r0, [sp, #20]
 800306c:	e7db      	b.n	8003026 <osThreadNew+0x5a>
 800306e:	bf00      	nop
 8003070:	2001e6b8 	.word	0x2001e6b8

08003074 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003074:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003076:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800307a:	b113      	cbz	r3, 8003082 <osDelay+0xe>
    stat = osErrorISR;
 800307c:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003080:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003082:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8003086:	b913      	cbnz	r3, 800308e <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003088:	f3ef 8311 	mrs	r3, BASEPRI
 800308c:	b11b      	cbz	r3, 8003096 <osDelay+0x22>
 800308e:	4b04      	ldr	r3, [pc, #16]	@ (80030a0 <osDelay+0x2c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d0f2      	beq.n	800307c <osDelay+0x8>
    if (ticks != 0U) {
 8003096:	b108      	cbz	r0, 800309c <osDelay+0x28>
      vTaskDelay(ticks);
 8003098:	f001 fbee 	bl	8004878 <vTaskDelay>
    stat = osOK;
 800309c:	2000      	movs	r0, #0
  return (stat);
 800309e:	e7ef      	b.n	8003080 <osDelay+0xc>
 80030a0:	2001e6b8 	.word	0x2001e6b8

080030a4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030a8:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80030ac:	b116      	cbz	r6, 80030b4 <osMutexNew+0x10>
  hMutex = NULL;
 80030ae:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80030b0:	4620      	mov	r0, r4
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b4:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 80030b8:	b912      	cbnz	r2, 80030c0 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030ba:	f3ef 8211 	mrs	r2, BASEPRI
 80030be:	b11a      	cbz	r2, 80030c8 <osMutexNew+0x24>
 80030c0:	4a18      	ldr	r2, [pc, #96]	@ (8003124 <osMutexNew+0x80>)
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	2a02      	cmp	r2, #2
 80030c6:	d0f2      	beq.n	80030ae <osMutexNew+0xa>
    if (attr != NULL) {
 80030c8:	b115      	cbz	r5, 80030d0 <osMutexNew+0x2c>
      type = attr->attr_bits;
 80030ca:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 80030cc:	0733      	lsls	r3, r6, #28
 80030ce:	d4ee      	bmi.n	80030ae <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80030d0:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 80030d4:	b17d      	cbz	r5, 80030f6 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80030d6:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 80030da:	b151      	cbz	r1, 80030f2 <osMutexNew+0x4e>
 80030dc:	2b4f      	cmp	r3, #79	@ 0x4f
 80030de:	d9e6      	bls.n	80030ae <osMutexNew+0xa>
        if (rmtx != 0U) {
 80030e0:	b1de      	cbz	r6, 800311a <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80030e2:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80030e4:	f000 fcf9 	bl	8003ada <xQueueCreateMutexStatic>
 80030e8:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d0df      	beq.n	80030ae <osMutexNew+0xa>
          name = attr->name;
 80030ee:	682d      	ldr	r5, [r5, #0]
 80030f0:	e00a      	b.n	8003108 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1db      	bne.n	80030ae <osMutexNew+0xa>
          if (rmtx != 0U) {
 80030f6:	b196      	cbz	r6, 800311e <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80030f8:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 80030fa:	f000 fd24 	bl	8003b46 <xQueueCreateMutex>
 80030fe:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8003100:	2800      	cmp	r0, #0
 8003102:	d0d4      	beq.n	80030ae <osMutexNew+0xa>
        if (attr != NULL) {
 8003104:	2d00      	cmp	r5, #0
 8003106:	d1f2      	bne.n	80030ee <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 8003108:	4629      	mov	r1, r5
 800310a:	4620      	mov	r0, r4
 800310c:	f000 fff8 	bl	8004100 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003110:	2e00      	cmp	r6, #0
 8003112:	d0cd      	beq.n	80030b0 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003114:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8003118:	e7ca      	b.n	80030b0 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800311a:	2001      	movs	r0, #1
 800311c:	e7e2      	b.n	80030e4 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800311e:	2001      	movs	r0, #1
 8003120:	e7eb      	b.n	80030fa <osMutexNew+0x56>
 8003122:	bf00      	nop
 8003124:	2001e6b8 	.word	0x2001e6b8

08003128 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003128:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800312a:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800312e:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8003130:	f003 0201 	and.w	r2, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003134:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003136:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800313a:	b111      	cbz	r1, 8003142 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800313c:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8003140:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003142:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 8003146:	b911      	cbnz	r1, 800314e <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003148:	f3ef 8111 	mrs	r1, BASEPRI
 800314c:	b119      	cbz	r1, 8003156 <osMutexAcquire+0x2e>
 800314e:	490d      	ldr	r1, [pc, #52]	@ (8003184 <osMutexAcquire+0x5c>)
 8003150:	6809      	ldr	r1, [r1, #0]
 8003152:	2902      	cmp	r1, #2
 8003154:	d0f2      	beq.n	800313c <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8003156:	2b01      	cmp	r3, #1
 8003158:	d911      	bls.n	800317e <osMutexAcquire+0x56>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800315a:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800315c:	b162      	cbz	r2, 8003178 <osMutexAcquire+0x50>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800315e:	f000 ff35 	bl	8003fcc <xQueueTakeMutexRecursive>
 8003162:	2801      	cmp	r0, #1
 8003164:	d101      	bne.n	800316a <osMutexAcquire+0x42>
  stat = osOK;
 8003166:	2000      	movs	r0, #0
 8003168:	e7ea      	b.n	8003140 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800316a:	2c00      	cmp	r4, #0
 800316c:	bf14      	ite	ne
 800316e:	f06f 0001 	mvnne.w	r0, #1
 8003172:	f06f 0002 	mvneq.w	r0, #2
 8003176:	e7e3      	b.n	8003140 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003178:	f000 fe63 	bl	8003e42 <xQueueSemaphoreTake>
 800317c:	e7f1      	b.n	8003162 <osMutexAcquire+0x3a>
    stat = osErrorParameter;
 800317e:	f06f 0003 	mvn.w	r0, #3
 8003182:	e7dd      	b.n	8003140 <osMutexAcquire+0x18>
 8003184:	2001e6b8 	.word	0x2001e6b8

08003188 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003188:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800318a:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800318e:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8003190:	f002 0301 	and.w	r3, r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003194:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8003198:	b111      	cbz	r1, 80031a0 <osMutexRelease+0x18>
    stat = osErrorISR;
 800319a:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800319e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a0:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 80031a4:	b911      	cbnz	r1, 80031ac <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031a6:	f3ef 8111 	mrs	r1, BASEPRI
 80031aa:	b119      	cbz	r1, 80031b4 <osMutexRelease+0x2c>
 80031ac:	490b      	ldr	r1, [pc, #44]	@ (80031dc <osMutexRelease+0x54>)
 80031ae:	6809      	ldr	r1, [r1, #0]
 80031b0:	2902      	cmp	r1, #2
 80031b2:	d0f2      	beq.n	800319a <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 80031b4:	2a01      	cmp	r2, #1
 80031b6:	d90d      	bls.n	80031d4 <osMutexRelease+0x4c>
    if (rmtx != 0U) {
 80031b8:	b13b      	cbz	r3, 80031ca <osMutexRelease+0x42>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80031ba:	f000 fca3 	bl	8003b04 <xQueueGiveMutexRecursive>
 80031be:	2801      	cmp	r0, #1
  stat = osOK;
 80031c0:	bf0c      	ite	eq
 80031c2:	2000      	moveq	r0, #0
        stat = osErrorResource;
 80031c4:	f06f 0002 	mvnne.w	r0, #2
 80031c8:	e7e9      	b.n	800319e <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80031ca:	461a      	mov	r2, r3
 80031cc:	4619      	mov	r1, r3
 80031ce:	f000 fbca 	bl	8003966 <xQueueGenericSend>
 80031d2:	e7f4      	b.n	80031be <osMutexRelease+0x36>
    stat = osErrorParameter;
 80031d4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80031d8:	e7e1      	b.n	800319e <osMutexRelease+0x16>
 80031da:	bf00      	nop
 80031dc:	2001e6b8 	.word	0x2001e6b8

080031e0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80031e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031e2:	460e      	mov	r6, r1
 80031e4:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031e6:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80031ea:	b993      	cbnz	r3, 8003212 <osSemaphoreNew+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ec:	f3ef 8310 	mrs	r3, PRIMASK
 80031f0:	b913      	cbnz	r3, 80031f8 <osSemaphoreNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031f2:	f3ef 8311 	mrs	r3, BASEPRI
 80031f6:	b11b      	cbz	r3, 8003200 <osSemaphoreNew+0x20>
 80031f8:	4b24      	ldr	r3, [pc, #144]	@ (800328c <osSemaphoreNew+0xac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d008      	beq.n	8003212 <osSemaphoreNew+0x32>
 8003200:	b138      	cbz	r0, 8003212 <osSemaphoreNew+0x32>
 8003202:	42b0      	cmp	r0, r6
 8003204:	d305      	bcc.n	8003212 <osSemaphoreNew+0x32>
    mem = -1;

    if (attr != NULL) {
 8003206:	b155      	cbz	r5, 800321e <osSemaphoreNew+0x3e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003208:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800320c:	b12b      	cbz	r3, 800321a <osSemaphoreNew+0x3a>
 800320e:	2a4f      	cmp	r2, #79	@ 0x4f
 8003210:	d823      	bhi.n	800325a <osSemaphoreNew+0x7a>
  hSemaphore = NULL;
 8003212:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8003214:	4620      	mov	r0, r4
 8003216:	b002      	add	sp, #8
 8003218:	bd70      	pop	{r4, r5, r6, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800321a:	2a00      	cmp	r2, #0
 800321c:	d1f9      	bne.n	8003212 <osSemaphoreNew+0x32>
      if (max_count == 1U) {
 800321e:	2801      	cmp	r0, #1
 8003220:	d10e      	bne.n	8003240 <osSemaphoreNew+0x60>
          hSemaphore = xSemaphoreCreateBinary();
 8003222:	2203      	movs	r2, #3
 8003224:	2100      	movs	r1, #0
 8003226:	2001      	movs	r0, #1
 8003228:	f000 fb2c 	bl	8003884 <xQueueGenericCreate>
 800322c:	e01d      	b.n	800326a <osSemaphoreNew+0x8a>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800322e:	461a      	mov	r2, r3
 8003230:	4631      	mov	r1, r6
 8003232:	f000 fb50 	bl	80038d6 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8003236:	4604      	mov	r4, r0
 8003238:	2800      	cmp	r0, #0
 800323a:	d0ea      	beq.n	8003212 <osSemaphoreNew+0x32>
          name = attr->name;
 800323c:	682d      	ldr	r5, [r5, #0]
 800323e:	e007      	b.n	8003250 <osSemaphoreNew+0x70>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003240:	4631      	mov	r1, r6
 8003242:	f000 fb6e 	bl	8003922 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8003246:	4604      	mov	r4, r0
 8003248:	2800      	cmp	r0, #0
 800324a:	d0e2      	beq.n	8003212 <osSemaphoreNew+0x32>
        if (attr != NULL) {
 800324c:	2d00      	cmp	r5, #0
 800324e:	d1f5      	bne.n	800323c <osSemaphoreNew+0x5c>
        vQueueAddToRegistry (hSemaphore, name);
 8003250:	4629      	mov	r1, r5
 8003252:	4620      	mov	r0, r4
 8003254:	f000 ff54 	bl	8004100 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8003258:	e7dc      	b.n	8003214 <osSemaphoreNew+0x34>
      if (max_count == 1U) {
 800325a:	2801      	cmp	r0, #1
 800325c:	d1e7      	bne.n	800322e <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800325e:	2203      	movs	r2, #3
 8003260:	9200      	str	r2, [sp, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	4611      	mov	r1, r2
 8003266:	f000 faf9 	bl	800385c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800326a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800326c:	2800      	cmp	r0, #0
 800326e:	d0d0      	beq.n	8003212 <osSemaphoreNew+0x32>
 8003270:	2e00      	cmp	r6, #0
 8003272:	d0eb      	beq.n	800324c <osSemaphoreNew+0x6c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003274:	2300      	movs	r3, #0
 8003276:	461a      	mov	r2, r3
 8003278:	4619      	mov	r1, r3
 800327a:	f000 fb74 	bl	8003966 <xQueueGenericSend>
 800327e:	2801      	cmp	r0, #1
 8003280:	d0e4      	beq.n	800324c <osSemaphoreNew+0x6c>
            vSemaphoreDelete (hSemaphore);
 8003282:	4620      	mov	r0, r4
 8003284:	f000 ff66 	bl	8004154 <vQueueDelete>
      if (hSemaphore != NULL) {
 8003288:	e7c3      	b.n	8003212 <osSemaphoreNew+0x32>
 800328a:	bf00      	nop
 800328c:	2001e6b8 	.word	0x2001e6b8

08003290 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003290:	b513      	push	{r0, r1, r4, lr}
 8003292:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003294:	b918      	cbnz	r0, 800329e <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8003296:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800329a:	b002      	add	sp, #8
 800329c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800329e:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 80032a2:	b15b      	cbz	r3, 80032bc <osSemaphoreAcquire+0x2c>
    if (timeout != 0U) {
 80032a4:	2c00      	cmp	r4, #0
 80032a6:	d1f6      	bne.n	8003296 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80032a8:	aa01      	add	r2, sp, #4
 80032aa:	4621      	mov	r1, r4
      yield = pdFALSE;
 80032ac:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80032ae:	f000 feb0 	bl	8004012 <xQueueReceiveFromISR>
 80032b2:	2801      	cmp	r0, #1
 80032b4:	d016      	beq.n	80032e4 <osSemaphoreAcquire+0x54>
        stat = osErrorResource;
 80032b6:	f06f 0002 	mvn.w	r0, #2
 80032ba:	e7ee      	b.n	800329a <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032bc:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80032c0:	b913      	cbnz	r3, 80032c8 <osSemaphoreAcquire+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032c2:	f3ef 8311 	mrs	r3, BASEPRI
 80032c6:	b11b      	cbz	r3, 80032d0 <osSemaphoreAcquire+0x40>
 80032c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <osSemaphoreAcquire+0x74>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d0e9      	beq.n	80032a4 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80032d0:	4621      	mov	r1, r4
 80032d2:	f000 fdb6 	bl	8003e42 <xQueueSemaphoreTake>
 80032d6:	2801      	cmp	r0, #1
 80032d8:	d006      	beq.n	80032e8 <osSemaphoreAcquire+0x58>
      if (timeout != 0U) {
 80032da:	2c00      	cmp	r4, #0
 80032dc:	d0eb      	beq.n	80032b6 <osSemaphoreAcquire+0x26>
        stat = osErrorTimeout;
 80032de:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80032e2:	e7da      	b.n	800329a <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 80032e4:	9b01      	ldr	r3, [sp, #4]
 80032e6:	b90b      	cbnz	r3, 80032ec <osSemaphoreAcquire+0x5c>
  stat = osOK;
 80032e8:	2000      	movs	r0, #0
 80032ea:	e7d6      	b.n	800329a <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 80032ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80032f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	e7f2      	b.n	80032e8 <osSemaphoreAcquire+0x58>
 8003302:	bf00      	nop
 8003304:	2001e6b8 	.word	0x2001e6b8

08003308 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003308:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800330a:	b370      	cbz	r0, 800336a <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800330c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8003310:	b15b      	cbz	r3, 800332a <osSemaphoreRelease+0x22>
    yield = pdFALSE;
 8003312:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003314:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8003316:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003318:	f000 fc96 	bl	8003c48 <xQueueGiveFromISR>
 800331c:	2801      	cmp	r0, #1
 800331e:	d016      	beq.n	800334e <osSemaphoreRelease+0x46>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8003320:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8003324:	b003      	add	sp, #12
 8003326:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800332a:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800332e:	b913      	cbnz	r3, 8003336 <osSemaphoreRelease+0x2e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003330:	f3ef 8311 	mrs	r3, BASEPRI
 8003334:	b11b      	cbz	r3, 800333e <osSemaphoreRelease+0x36>
 8003336:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <osSemaphoreRelease+0x68>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d0e9      	beq.n	8003312 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800333e:	2300      	movs	r3, #0
 8003340:	461a      	mov	r2, r3
 8003342:	4619      	mov	r1, r3
 8003344:	f000 fb0f 	bl	8003966 <xQueueGenericSend>
 8003348:	2801      	cmp	r0, #1
 800334a:	d00c      	beq.n	8003366 <osSemaphoreRelease+0x5e>
 800334c:	e7e8      	b.n	8003320 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800334e:	9b01      	ldr	r3, [sp, #4]
 8003350:	b14b      	cbz	r3, 8003366 <osSemaphoreRelease+0x5e>
 8003352:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800335a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003366:	2000      	movs	r0, #0
 8003368:	e7dc      	b.n	8003324 <osSemaphoreRelease+0x1c>
    stat = osErrorParameter;
 800336a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800336e:	e7d9      	b.n	8003324 <osSemaphoreRelease+0x1c>
 8003370:	2001e6b8 	.word	0x2001e6b8

08003374 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 8003374:	4603      	mov	r3, r0
 8003376:	b190      	cbz	r0, 800339e <osSemaphoreGetCount+0x2a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003378:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 800337c:	b112      	cbz	r2, 8003384 <osSemaphoreGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800337e:	4618      	mov	r0, r3
 8003380:	f000 beaf 	b.w	80040e2 <uxQueueMessagesWaitingFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003384:	f3ef 8210 	mrs	r2, PRIMASK
  else if (IS_IRQ()) {
 8003388:	b912      	cbnz	r2, 8003390 <osSemaphoreGetCount+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800338a:	f3ef 8211 	mrs	r2, BASEPRI
 800338e:	b11a      	cbz	r2, 8003398 <osSemaphoreGetCount+0x24>
 8003390:	4a03      	ldr	r2, [pc, #12]	@ (80033a0 <osSemaphoreGetCount+0x2c>)
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	2a02      	cmp	r2, #2
 8003396:	d0f2      	beq.n	800337e <osSemaphoreGetCount+0xa>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8003398:	4618      	mov	r0, r3
 800339a:	f000 be8d 	b.w	80040b8 <uxQueueMessagesWaiting>
  }

  return (count);
}
 800339e:	4770      	bx	lr
 80033a0:	2001e6b8 	.word	0x2001e6b8

080033a4 <osSemaphoreDelete>:

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80033a4:	b510      	push	{r4, lr}
 80033a6:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033a8:	f3ef 8305 	mrs	r3, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80033ac:	b113      	cbz	r3, 80033b4 <osSemaphoreDelete+0x10>
    stat = osErrorISR;
 80033ae:	f06f 0005 	mvn.w	r0, #5
#else
  stat = osError;
#endif

  return (stat);
}
 80033b2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80033b8:	b913      	cbnz	r3, 80033c0 <osSemaphoreDelete+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033ba:	f3ef 8311 	mrs	r3, BASEPRI
 80033be:	b11b      	cbz	r3, 80033c8 <osSemaphoreDelete+0x24>
 80033c0:	4b07      	ldr	r3, [pc, #28]	@ (80033e0 <osSemaphoreDelete+0x3c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d0f2      	beq.n	80033ae <osSemaphoreDelete+0xa>
  else if (hSemaphore == NULL) {
 80033c8:	b13c      	cbz	r4, 80033da <osSemaphoreDelete+0x36>
    vQueueUnregisterQueue (hSemaphore);
 80033ca:	4620      	mov	r0, r4
 80033cc:	f000 feaa 	bl	8004124 <vQueueUnregisterQueue>
    vSemaphoreDelete (hSemaphore);
 80033d0:	4620      	mov	r0, r4
 80033d2:	f000 febf 	bl	8004154 <vQueueDelete>
    stat = osOK;
 80033d6:	2000      	movs	r0, #0
 80033d8:	e7eb      	b.n	80033b2 <osSemaphoreDelete+0xe>
    stat = osErrorParameter;
 80033da:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80033de:	e7e8      	b.n	80033b2 <osSemaphoreDelete+0xe>
 80033e0:	2001e6b8 	.word	0x2001e6b8

080033e4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80033e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033e6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033e8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80033ec:	b11b      	cbz	r3, 80033f6 <osMessageQueueNew+0x12>
  hQueue = NULL;
 80033ee:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80033f0:	4628      	mov	r0, r5
 80033f2:	b002      	add	sp, #8
 80033f4:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f6:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80033fa:	b913      	cbnz	r3, 8003402 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033fc:	f3ef 8311 	mrs	r3, BASEPRI
 8003400:	b11b      	cbz	r3, 800340a <osMessageQueueNew+0x26>
 8003402:	4b1a      	ldr	r3, [pc, #104]	@ (800346c <osMessageQueueNew+0x88>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d0f1      	beq.n	80033ee <osMessageQueueNew+0xa>
 800340a:	2800      	cmp	r0, #0
 800340c:	d0ef      	beq.n	80033ee <osMessageQueueNew+0xa>
 800340e:	2900      	cmp	r1, #0
 8003410:	d0ed      	beq.n	80033ee <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8003412:	b1ec      	cbz	r4, 8003450 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003414:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8003418:	b193      	cbz	r3, 8003440 <osMessageQueueNew+0x5c>
 800341a:	2a4f      	cmp	r2, #79	@ 0x4f
 800341c:	d9e7      	bls.n	80033ee <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800341e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003420:	2a00      	cmp	r2, #0
 8003422:	d0e4      	beq.n	80033ee <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003424:	fb01 f500 	mul.w	r5, r1, r0
 8003428:	6966      	ldr	r6, [r4, #20]
 800342a:	42ae      	cmp	r6, r5
 800342c:	d3df      	bcc.n	80033ee <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800342e:	2500      	movs	r5, #0
 8003430:	9500      	str	r5, [sp, #0]
 8003432:	f000 fa13 	bl	800385c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8003436:	4605      	mov	r5, r0
 8003438:	2800      	cmp	r0, #0
 800343a:	d0d8      	beq.n	80033ee <osMessageQueueNew+0xa>
        name = attr->name;
 800343c:	6824      	ldr	r4, [r4, #0]
 800343e:	e00f      	b.n	8003460 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003440:	2a00      	cmp	r2, #0
 8003442:	d1d4      	bne.n	80033ee <osMessageQueueNew+0xa>
 8003444:	6923      	ldr	r3, [r4, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1d1      	bne.n	80033ee <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800344a:	6963      	ldr	r3, [r4, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ce      	bne.n	80033ee <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003450:	2200      	movs	r2, #0
 8003452:	f000 fa17 	bl	8003884 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8003456:	4605      	mov	r5, r0
 8003458:	2800      	cmp	r0, #0
 800345a:	d0c8      	beq.n	80033ee <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800345c:	2c00      	cmp	r4, #0
 800345e:	d1ed      	bne.n	800343c <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 8003460:	4621      	mov	r1, r4
 8003462:	4628      	mov	r0, r5
 8003464:	f000 fe4c 	bl	8004100 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8003468:	e7c2      	b.n	80033f0 <osMessageQueueNew+0xc>
 800346a:	bf00      	nop
 800346c:	2001e6b8 	.word	0x2001e6b8

08003470 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003470:	b513      	push	{r0, r1, r4, lr}
 8003472:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003474:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003478:	b123      	cbz	r3, 8003484 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800347a:	b9d8      	cbnz	r0, 80034b4 <osMessageQueuePut+0x44>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 800347c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8003480:	b002      	add	sp, #8
 8003482:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003484:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8003488:	b913      	cbnz	r3, 8003490 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800348a:	f3ef 8311 	mrs	r3, BASEPRI
 800348e:	b11b      	cbz	r3, 8003498 <osMessageQueuePut+0x28>
 8003490:	4b17      	ldr	r3, [pc, #92]	@ (80034f0 <osMessageQueuePut+0x80>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d0f0      	beq.n	800347a <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003498:	2800      	cmp	r0, #0
 800349a:	d0ef      	beq.n	800347c <osMessageQueuePut+0xc>
 800349c:	2900      	cmp	r1, #0
 800349e:	d0ed      	beq.n	800347c <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80034a0:	2300      	movs	r3, #0
 80034a2:	4622      	mov	r2, r4
 80034a4:	f000 fa5f 	bl	8003966 <xQueueGenericSend>
 80034a8:	2801      	cmp	r0, #1
 80034aa:	d013      	beq.n	80034d4 <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 80034ac:	b16c      	cbz	r4, 80034ca <osMessageQueuePut+0x5a>
          stat = osErrorTimeout;
 80034ae:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80034b2:	e7e5      	b.n	8003480 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034b4:	2900      	cmp	r1, #0
 80034b6:	d0e1      	beq.n	800347c <osMessageQueuePut+0xc>
 80034b8:	2c00      	cmp	r4, #0
 80034ba:	d1df      	bne.n	800347c <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80034bc:	4623      	mov	r3, r4
 80034be:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80034c0:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80034c2:	f000 fb5d 	bl	8003b80 <xQueueGenericSendFromISR>
 80034c6:	2801      	cmp	r0, #1
 80034c8:	d002      	beq.n	80034d0 <osMessageQueuePut+0x60>
        stat = osErrorResource;
 80034ca:	f06f 0002 	mvn.w	r0, #2
 80034ce:	e7d7      	b.n	8003480 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80034d0:	9b01      	ldr	r3, [sp, #4]
 80034d2:	b90b      	cbnz	r3, 80034d8 <osMessageQueuePut+0x68>
  stat = osOK;
 80034d4:	2000      	movs	r0, #0
 80034d6:	e7d3      	b.n	8003480 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80034d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80034dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	e7f2      	b.n	80034d4 <osMessageQueuePut+0x64>
 80034ee:	bf00      	nop
 80034f0:	2001e6b8 	.word	0x2001e6b8

080034f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80034f4:	b513      	push	{r0, r1, r4, lr}
 80034f6:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034f8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80034fc:	b123      	cbz	r3, 8003508 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034fe:	b9d0      	cbnz	r0, 8003536 <osMessageQueueGet+0x42>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 8003500:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8003504:	b002      	add	sp, #8
 8003506:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003508:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800350c:	b913      	cbnz	r3, 8003514 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800350e:	f3ef 8311 	mrs	r3, BASEPRI
 8003512:	b11b      	cbz	r3, 800351c <osMessageQueueGet+0x28>
 8003514:	4b16      	ldr	r3, [pc, #88]	@ (8003570 <osMessageQueueGet+0x7c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d0f0      	beq.n	80034fe <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800351c:	2800      	cmp	r0, #0
 800351e:	d0ef      	beq.n	8003500 <osMessageQueueGet+0xc>
 8003520:	2900      	cmp	r1, #0
 8003522:	d0ed      	beq.n	8003500 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003524:	4622      	mov	r2, r4
 8003526:	f000 fbe8 	bl	8003cfa <xQueueReceive>
 800352a:	2801      	cmp	r0, #1
 800352c:	d012      	beq.n	8003554 <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 800352e:	b164      	cbz	r4, 800354a <osMessageQueueGet+0x56>
          stat = osErrorTimeout;
 8003530:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8003534:	e7e6      	b.n	8003504 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003536:	2900      	cmp	r1, #0
 8003538:	d0e2      	beq.n	8003500 <osMessageQueueGet+0xc>
 800353a:	2c00      	cmp	r4, #0
 800353c:	d1e0      	bne.n	8003500 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800353e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8003540:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003542:	f000 fd66 	bl	8004012 <xQueueReceiveFromISR>
 8003546:	2801      	cmp	r0, #1
 8003548:	d002      	beq.n	8003550 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800354a:	f06f 0002 	mvn.w	r0, #2
 800354e:	e7d9      	b.n	8003504 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8003550:	9b01      	ldr	r3, [sp, #4]
 8003552:	b90b      	cbnz	r3, 8003558 <osMessageQueueGet+0x64>
  stat = osOK;
 8003554:	2000      	movs	r0, #0
 8003556:	e7d5      	b.n	8003504 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8003558:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800355c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003560:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	e7f2      	b.n	8003554 <osMessageQueueGet+0x60>
 800356e:	bf00      	nop
 8003570:	2001e6b8 	.word	0x2001e6b8

08003574 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003574:	f7ff befe 	b.w	8003374 <osSemaphoreGetCount>

08003578 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8003578:	f7ff bf14 	b.w	80033a4 <osSemaphoreDelete>

0800357c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <vApplicationGetIdleTaskMemory+0x10>)
 800357e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003580:	4b03      	ldr	r3, [pc, #12]	@ (8003590 <vApplicationGetIdleTaskMemory+0x14>)
 8003582:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003584:	2380      	movs	r3, #128	@ 0x80
 8003586:	6013      	str	r3, [r2, #0]
}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	2001e610 	.word	0x2001e610
 8003590:	2001e410 	.word	0x2001e410

08003594 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003594:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <vApplicationGetTimerTaskMemory+0x10>)
 8003596:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <vApplicationGetTimerTaskMemory+0x14>)
 800359a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800359c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035a0:	6013      	str	r3, [r2, #0]
}
 80035a2:	4770      	bx	lr
 80035a4:	2001e368 	.word	0x2001e368
 80035a8:	2001df68 	.word	0x2001df68

080035ac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ac:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035b4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035b6:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035b8:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035c0:	4770      	bx	lr

080035c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035c6:	4770      	bx	lr

080035c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80035c8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035ca:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80035cc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035ce:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035d0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035d2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80035d4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80035d6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80035d8:	3301      	adds	r3, #1
 80035da:	6003      	str	r3, [r0, #0]
}
 80035dc:	4770      	bx	lr

080035de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035de:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035e0:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035e2:	1c63      	adds	r3, r4, #1
 80035e4:	d10a      	bne.n	80035fc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035e6:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035ec:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035ee:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80035f0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80035f2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80035f4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80035f6:	3301      	adds	r3, #1
 80035f8:	6003      	str	r3, [r0, #0]
}
 80035fa:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035fc:	f100 0208 	add.w	r2, r0, #8
 8003600:	4613      	mov	r3, r2
 8003602:	6852      	ldr	r2, [r2, #4]
 8003604:	6815      	ldr	r5, [r2, #0]
 8003606:	42a5      	cmp	r5, r4
 8003608:	d9fa      	bls.n	8003600 <vListInsert+0x22>
 800360a:	e7ed      	b.n	80035e8 <vListInsert+0xa>

0800360c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800360c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800360e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8003612:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003614:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800361a:	bf08      	it	eq
 800361c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800361e:	2200      	movs	r2, #0
 8003620:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	3a01      	subs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003628:	6818      	ldr	r0, [r3, #0]
}
 800362a:	4770      	bx	lr

0800362c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800362c:	b510      	push	{r4, lr}
 800362e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003630:	f001 fdb0 	bl	8005194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003634:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003636:	f001 fdd1 	bl	80051dc <vPortExitCritical>

	return xReturn;
}
 800363a:	fab4 f084 	clz	r0, r4
 800363e:	0940      	lsrs	r0, r0, #5
 8003640:	bd10      	pop	{r4, pc}

08003642 <prvCopyDataToQueue>:
{
 8003642:	b570      	push	{r4, r5, r6, lr}
 8003644:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003646:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8003648:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800364a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800364c:	b942      	cbnz	r2, 8003660 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800364e:	6806      	ldr	r6, [r0, #0]
 8003650:	b99e      	cbnz	r6, 800367a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003652:	6880      	ldr	r0, [r0, #8]
 8003654:	f001 fa9e 	bl	8004b94 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003658:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800365a:	3501      	adds	r5, #1
 800365c:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800365e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003660:	b96e      	cbnz	r6, 800367e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003662:	6840      	ldr	r0, [r0, #4]
 8003664:	f00a f8a3 	bl	800d7ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003668:	6863      	ldr	r3, [r4, #4]
 800366a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800366c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800366e:	68a2      	ldr	r2, [r4, #8]
 8003670:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003672:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003674:	bf24      	itt	cs
 8003676:	6823      	ldrcs	r3, [r4, #0]
 8003678:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800367a:	2000      	movs	r0, #0
 800367c:	e7ed      	b.n	800365a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800367e:	68c0      	ldr	r0, [r0, #12]
 8003680:	f00a f895 	bl	800d7ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003684:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003686:	68e3      	ldr	r3, [r4, #12]
 8003688:	4251      	negs	r1, r2
 800368a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800368c:	6822      	ldr	r2, [r4, #0]
 800368e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003690:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003692:	bf3e      	ittt	cc
 8003694:	68a3      	ldrcc	r3, [r4, #8]
 8003696:	185b      	addcc	r3, r3, r1
 8003698:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800369a:	2e02      	cmp	r6, #2
 800369c:	d1ed      	bne.n	800367a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800369e:	b10d      	cbz	r5, 80036a4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80036a0:	3d01      	subs	r5, #1
 80036a2:	e7ea      	b.n	800367a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80036a4:	4628      	mov	r0, r5
 80036a6:	e7d8      	b.n	800365a <prvCopyDataToQueue+0x18>

080036a8 <prvCopyDataFromQueue>:
{
 80036a8:	4603      	mov	r3, r0
 80036aa:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80036ae:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036b0:	b162      	cbz	r2, 80036cc <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036b2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036b4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036b6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036b8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036ba:	60dc      	str	r4, [r3, #12]
}
 80036bc:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80036c0:	bf24      	itt	cs
 80036c2:	6819      	ldrcs	r1, [r3, #0]
 80036c4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036c6:	68d9      	ldr	r1, [r3, #12]
 80036c8:	f00a b871 	b.w	800d7ae <memcpy>
}
 80036cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <prvUnlockQueue>:
{
 80036d2:	b570      	push	{r4, r5, r6, lr}
 80036d4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80036d6:	f001 fd5d 	bl	8005194 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80036da:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036de:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80036e2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036e4:	2d00      	cmp	r5, #0
 80036e6:	dc14      	bgt.n	8003712 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80036e8:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036ea:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80036ee:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80036f2:	f001 fd73 	bl	80051dc <vPortExitCritical>
	taskENTER_CRITICAL();
 80036f6:	f001 fd4d 	bl	8005194 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80036fa:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 80036fe:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003700:	2d00      	cmp	r5, #0
 8003702:	dc12      	bgt.n	800372a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8003704:	23ff      	movs	r3, #255	@ 0xff
 8003706:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800370a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800370e:	f001 bd65 	b.w	80051dc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003712:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0e7      	beq.n	80036e8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003718:	4630      	mov	r0, r6
 800371a:	f001 f951 	bl	80049c0 <xTaskRemoveFromEventList>
 800371e:	b108      	cbz	r0, 8003724 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003720:	f001 f9de 	bl	8004ae0 <vTaskMissedYield>
			--cTxLock;
 8003724:	3d01      	subs	r5, #1
 8003726:	b26d      	sxtb	r5, r5
 8003728:	e7dc      	b.n	80036e4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800372a:	6923      	ldr	r3, [r4, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0e9      	beq.n	8003704 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003730:	4630      	mov	r0, r6
 8003732:	f001 f945 	bl	80049c0 <xTaskRemoveFromEventList>
 8003736:	b108      	cbz	r0, 800373c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003738:	f001 f9d2 	bl	8004ae0 <vTaskMissedYield>
				--cRxLock;
 800373c:	3d01      	subs	r5, #1
 800373e:	b26d      	sxtb	r5, r5
 8003740:	e7de      	b.n	8003700 <prvUnlockQueue+0x2e>

08003742 <xQueueGenericReset>:
{
 8003742:	b538      	push	{r3, r4, r5, lr}
 8003744:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003746:	4604      	mov	r4, r0
 8003748:	b950      	cbnz	r0, 8003760 <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374e:	b672      	cpsid	i
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	b662      	cpsie	i
 800375e:	e7fe      	b.n	800375e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8003760:	f001 fd18 	bl	8005194 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003764:	6822      	ldr	r2, [r4, #0]
 8003766:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800376a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800376c:	434b      	muls	r3, r1
 800376e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003770:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003772:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003774:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003776:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8003778:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800377a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800377c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800377e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003782:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8003786:	b9a5      	cbnz	r5, 80037b2 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003788:	6923      	ldr	r3, [r4, #16]
 800378a:	b173      	cbz	r3, 80037aa <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800378c:	f104 0010 	add.w	r0, r4, #16
 8003790:	f001 f916 	bl	80049c0 <xTaskRemoveFromEventList>
 8003794:	b148      	cbz	r0, 80037aa <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8003796:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800379a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800379e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80037aa:	f001 fd17 	bl	80051dc <vPortExitCritical>
}
 80037ae:	2001      	movs	r0, #1
 80037b0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037b2:	f104 0010 	add.w	r0, r4, #16
 80037b6:	f7ff fef9 	bl	80035ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037ba:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80037be:	f7ff fef5 	bl	80035ac <vListInitialise>
 80037c2:	e7f2      	b.n	80037aa <xQueueGenericReset+0x68>

080037c4 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 80037c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037c6:	460d      	mov	r5, r1
		configASSERT( pxStaticQueue != NULL );
 80037c8:	461c      	mov	r4, r3
 80037ca:	b953      	cbnz	r3, 80037e2 <xQueueGenericCreateStatic.part.0+0x1e>
 80037cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d0:	b672      	cpsid	i
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	b662      	cpsie	i
 80037e0:	e7fe      	b.n	80037e0 <xQueueGenericCreateStatic.part.0+0x1c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037e2:	b15a      	cbz	r2, 80037fc <xQueueGenericCreateStatic.part.0+0x38>
 80037e4:	b9b1      	cbnz	r1, 8003814 <xQueueGenericCreateStatic.part.0+0x50>
 80037e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ea:	b672      	cpsid	i
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	b662      	cpsie	i
 80037fa:	e7fe      	b.n	80037fa <xQueueGenericCreateStatic.part.0+0x36>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037fc:	b151      	cbz	r1, 8003814 <xQueueGenericCreateStatic.part.0+0x50>
 80037fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003802:	b672      	cpsid	i
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	b662      	cpsie	i
 8003812:	e7fe      	b.n	8003812 <xQueueGenericCreateStatic.part.0+0x4e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003814:	2350      	movs	r3, #80	@ 0x50
 8003816:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003818:	9b01      	ldr	r3, [sp, #4]
 800381a:	2b50      	cmp	r3, #80	@ 0x50
 800381c:	d00a      	beq.n	8003834 <xQueueGenericCreateStatic.part.0+0x70>
 800381e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003822:	b672      	cpsid	i
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	b662      	cpsie	i
 8003832:	e7fe      	b.n	8003832 <xQueueGenericCreateStatic.part.0+0x6e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003834:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003836:	2d00      	cmp	r5, #0
 8003838:	bf08      	it	eq
 800383a:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800383c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800383e:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003842:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8003844:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003848:	4620      	mov	r0, r4
 800384a:	f7ff ff7a 	bl	8003742 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800384e:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 8003852:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8003854:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8003858:	b003      	add	sp, #12
 800385a:	bd30      	pop	{r4, r5, pc}

0800385c <xQueueGenericCreateStatic>:
	{
 800385c:	b410      	push	{r4}
 800385e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003862:	b950      	cbnz	r0, 800387a <xQueueGenericCreateStatic+0x1e>
 8003864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003868:	b672      	cpsid	i
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	b662      	cpsie	i
 8003878:	e7fe      	b.n	8003878 <xQueueGenericCreateStatic+0x1c>
 800387a:	9401      	str	r4, [sp, #4]
	}
 800387c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003880:	f7ff bfa0 	b.w	80037c4 <xQueueGenericCreateStatic.part.0>

08003884 <xQueueGenericCreate>:
	{
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	460d      	mov	r5, r1
 8003888:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800388a:	4606      	mov	r6, r0
 800388c:	b950      	cbnz	r0, 80038a4 <xQueueGenericCreate+0x20>
 800388e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003892:	b672      	cpsid	i
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	b662      	cpsie	i
 80038a2:	e7fe      	b.n	80038a2 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a4:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038a6:	3050      	adds	r0, #80	@ 0x50
 80038a8:	f001 fdc8 	bl	800543c <pvPortMalloc>
		if( pxNewQueue != NULL )
 80038ac:	4604      	mov	r4, r0
 80038ae:	b170      	cbz	r0, 80038ce <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80038b6:	b165      	cbz	r5, 80038d2 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038b8:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038bc:	2101      	movs	r1, #1
 80038be:	4620      	mov	r0, r4
 80038c0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80038c2:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038c6:	f7ff ff3c 	bl	8003742 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80038ca:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80038ce:	4620      	mov	r0, r4
 80038d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038d2:	4603      	mov	r3, r0
 80038d4:	e7f2      	b.n	80038bc <xQueueGenericCreate+0x38>

080038d6 <xQueueCreateCountingSemaphoreStatic>:
	{
 80038d6:	b513      	push	{r0, r1, r4, lr}
 80038d8:	4613      	mov	r3, r2
 80038da:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80038dc:	b950      	cbnz	r0, 80038f4 <xQueueCreateCountingSemaphoreStatic+0x1e>
 80038de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e2:	b672      	cpsid	i
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	b662      	cpsie	i
 80038f2:	e7fe      	b.n	80038f2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 80038f4:	4288      	cmp	r0, r1
 80038f6:	d20a      	bcs.n	800390e <xQueueCreateCountingSemaphoreStatic+0x38>
 80038f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fc:	b672      	cpsid	i
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	b662      	cpsie	i
 800390c:	e7fe      	b.n	800390c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800390e:	2202      	movs	r2, #2
 8003910:	9200      	str	r2, [sp, #0]
 8003912:	2200      	movs	r2, #0
 8003914:	4611      	mov	r1, r2
 8003916:	f7ff ffa1 	bl	800385c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800391a:	b100      	cbz	r0, 800391e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800391c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800391e:	b002      	add	sp, #8
 8003920:	bd10      	pop	{r4, pc}

08003922 <xQueueCreateCountingSemaphore>:
	{
 8003922:	b510      	push	{r4, lr}
 8003924:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8003926:	b950      	cbnz	r0, 800393e <xQueueCreateCountingSemaphore+0x1c>
 8003928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392c:	b672      	cpsid	i
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	b662      	cpsie	i
 800393c:	e7fe      	b.n	800393c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800393e:	4288      	cmp	r0, r1
 8003940:	d20a      	bcs.n	8003958 <xQueueCreateCountingSemaphore+0x36>
 8003942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003946:	b672      	cpsid	i
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	b662      	cpsie	i
 8003956:	e7fe      	b.n	8003956 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003958:	2202      	movs	r2, #2
 800395a:	2100      	movs	r1, #0
 800395c:	f7ff ff92 	bl	8003884 <xQueueGenericCreate>
		if( xHandle != NULL )
 8003960:	b100      	cbz	r0, 8003964 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003962:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8003964:	bd10      	pop	{r4, pc}

08003966 <xQueueGenericSend>:
{
 8003966:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800396a:	460f      	mov	r7, r1
 800396c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800396e:	4604      	mov	r4, r0
{
 8003970:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003972:	b950      	cbnz	r0, 800398a <xQueueGenericSend+0x24>
 8003974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003978:	b672      	cpsid	i
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	b662      	cpsie	i
 8003988:	e7fe      	b.n	8003988 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800398a:	b961      	cbnz	r1, 80039a6 <xQueueGenericSend+0x40>
 800398c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800398e:	b153      	cbz	r3, 80039a6 <xQueueGenericSend+0x40>
 8003990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003994:	b672      	cpsid	i
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	b662      	cpsie	i
 80039a4:	e7fe      	b.n	80039a4 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039a6:	2e02      	cmp	r6, #2
 80039a8:	d10d      	bne.n	80039c6 <xQueueGenericSend+0x60>
 80039aa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d00a      	beq.n	80039c6 <xQueueGenericSend+0x60>
 80039b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b4:	b672      	cpsid	i
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	b662      	cpsie	i
 80039c4:	e7fe      	b.n	80039c4 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039c6:	f001 f897 	bl	8004af8 <xTaskGetSchedulerState>
 80039ca:	4605      	mov	r5, r0
 80039cc:	b330      	cbz	r0, 8003a1c <xQueueGenericSend+0xb6>
 80039ce:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80039d0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80039d4:	f001 fbde 	bl	8005194 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80039da:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039dc:	429a      	cmp	r2, r3
 80039de:	d301      	bcc.n	80039e4 <xQueueGenericSend+0x7e>
 80039e0:	2e02      	cmp	r6, #2
 80039e2:	d129      	bne.n	8003a38 <xQueueGenericSend+0xd2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039e4:	4632      	mov	r2, r6
 80039e6:	4639      	mov	r1, r7
 80039e8:	4620      	mov	r0, r4
 80039ea:	f7ff fe2a 	bl	8003642 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80039f0:	b11b      	cbz	r3, 80039fa <xQueueGenericSend+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039f2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80039f6:	f000 ffe3 	bl	80049c0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80039fa:	b148      	cbz	r0, 8003a10 <xQueueGenericSend+0xaa>
						queueYIELD_IF_USING_PREEMPTION();
 80039fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003a10:	f001 fbe4 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 8003a14:	2001      	movs	r0, #1
}
 8003a16:	b004      	add	sp, #16
 8003a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a1c:	9b01      	ldr	r3, [sp, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0d6      	beq.n	80039d0 <xQueueGenericSend+0x6a>
 8003a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a26:	b672      	cpsid	i
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	b662      	cpsie	i
 8003a36:	e7fe      	b.n	8003a36 <xQueueGenericSend+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a38:	9b01      	ldr	r3, [sp, #4]
 8003a3a:	b91b      	cbnz	r3, 8003a44 <xQueueGenericSend+0xde>
					taskEXIT_CRITICAL();
 8003a3c:	f001 fbce 	bl	80051dc <vPortExitCritical>
					return errQUEUE_FULL;
 8003a40:	2000      	movs	r0, #0
 8003a42:	e7e8      	b.n	8003a16 <xQueueGenericSend+0xb0>
				else if( xEntryTimeSet == pdFALSE )
 8003a44:	b915      	cbnz	r5, 8003a4c <xQueueGenericSend+0xe6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a46:	a802      	add	r0, sp, #8
 8003a48:	f000 fffe 	bl	8004a48 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003a4c:	f001 fbc6 	bl	80051dc <vPortExitCritical>
		vTaskSuspendAll();
 8003a50:	f000 fdee 	bl	8004630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a54:	f001 fb9e 	bl	8005194 <vPortEnterCritical>
 8003a58:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003a5c:	2bff      	cmp	r3, #255	@ 0xff
 8003a5e:	d101      	bne.n	8003a64 <xQueueGenericSend+0xfe>
 8003a60:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8003a64:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003a68:	2bff      	cmp	r3, #255	@ 0xff
 8003a6a:	d101      	bne.n	8003a70 <xQueueGenericSend+0x10a>
 8003a6c:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8003a70:	f001 fbb4 	bl	80051dc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a74:	a901      	add	r1, sp, #4
 8003a76:	a802      	add	r0, sp, #8
 8003a78:	f000 fff2 	bl	8004a60 <xTaskCheckForTimeOut>
 8003a7c:	bb38      	cbnz	r0, 8003ace <xQueueGenericSend+0x168>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a7e:	f001 fb89 	bl	8005194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a82:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003a84:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d10e      	bne.n	8003aa8 <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003a8a:	f001 fba7 	bl	80051dc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a8e:	9901      	ldr	r1, [sp, #4]
 8003a90:	f104 0010 	add.w	r0, r4, #16
 8003a94:	f000 ff58 	bl	8004948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f7ff fe1a 	bl	80036d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a9e:	f000 fe75 	bl	800478c <xTaskResumeAll>
 8003aa2:	b148      	cbz	r0, 8003ab8 <xQueueGenericSend+0x152>
 8003aa4:	2501      	movs	r5, #1
 8003aa6:	e795      	b.n	80039d4 <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 8003aa8:	f001 fb98 	bl	80051dc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7ff fe10 	bl	80036d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ab2:	f000 fe6b 	bl	800478c <xTaskResumeAll>
 8003ab6:	e7f5      	b.n	8003aa4 <xQueueGenericSend+0x13e>
					portYIELD_WITHIN_API();
 8003ab8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	e7ea      	b.n	8003aa4 <xQueueGenericSend+0x13e>
			prvUnlockQueue( pxQueue );
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7ff fdff 	bl	80036d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ad4:	f000 fe5a 	bl	800478c <xTaskResumeAll>
			return errQUEUE_FULL;
 8003ad8:	e7b2      	b.n	8003a40 <xQueueGenericSend+0xda>

08003ada <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003ada:	2200      	movs	r2, #0
	{
 8003adc:	460b      	mov	r3, r1
 8003ade:	b513      	push	{r0, r1, r4, lr}
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	9000      	str	r0, [sp, #0]
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7ff fe6d 	bl	80037c4 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 8003aea:	4604      	mov	r4, r0
 8003aec:	b138      	cbz	r0, 8003afe <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003aee:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003af0:	461a      	mov	r2, r3
 8003af2:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003af4:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003af6:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003af8:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003afa:	f7ff ff34 	bl	8003966 <xQueueGenericSend>
	}
 8003afe:	4620      	mov	r0, r4
 8003b00:	b002      	add	sp, #8
 8003b02:	bd10      	pop	{r4, pc}

08003b04 <xQueueGiveMutexRecursive>:
	{
 8003b04:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8003b06:	4604      	mov	r4, r0
 8003b08:	b950      	cbnz	r0, 8003b20 <xQueueGiveMutexRecursive+0x1c>
 8003b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0e:	b672      	cpsid	i
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	b662      	cpsie	i
 8003b1e:	e7fe      	b.n	8003b1e <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003b20:	6885      	ldr	r5, [r0, #8]
 8003b22:	f000 ffe3 	bl	8004aec <xTaskGetCurrentTaskHandle>
 8003b26:	4285      	cmp	r5, r0
 8003b28:	d10b      	bne.n	8003b42 <xQueueGiveMutexRecursive+0x3e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003b2a:	68e3      	ldr	r3, [r4, #12]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003b30:	b10b      	cbz	r3, 8003b36 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8003b32:	2001      	movs	r0, #1
	}
 8003b34:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003b36:	461a      	mov	r2, r3
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f7ff ff13 	bl	8003966 <xQueueGenericSend>
 8003b40:	e7f7      	b.n	8003b32 <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdFAIL;
 8003b42:	2000      	movs	r0, #0
		return xReturn;
 8003b44:	e7f6      	b.n	8003b34 <xQueueGiveMutexRecursive+0x30>

08003b46 <xQueueCreateMutex>:
	{
 8003b46:	b570      	push	{r4, r5, r6, lr}
 8003b48:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b4a:	2050      	movs	r0, #80	@ 0x50
 8003b4c:	f001 fc76 	bl	800543c <pvPortMalloc>
 8003b50:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 8003b52:	b198      	cbz	r0, 8003b7c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b54:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8003b56:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b58:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b5a:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8003b5e:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b62:	f7ff fdee 	bl	8003742 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b66:	462b      	mov	r3, r5
 8003b68:	462a      	mov	r2, r5
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8003b6e:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b72:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003b74:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003b76:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b78:	f7ff fef5 	bl	8003966 <xQueueGenericSend>
	}
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}

08003b80 <xQueueGenericSendFromISR>:
{
 8003b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b84:	4689      	mov	r9, r1
 8003b86:	4617      	mov	r7, r2
 8003b88:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	b950      	cbnz	r0, 8003ba4 <xQueueGenericSendFromISR+0x24>
 8003b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b92:	b672      	cpsid	i
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	b662      	cpsie	i
 8003ba2:	e7fe      	b.n	8003ba2 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba4:	b961      	cbnz	r1, 8003bc0 <xQueueGenericSendFromISR+0x40>
 8003ba6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003ba8:	b153      	cbz	r3, 8003bc0 <xQueueGenericSendFromISR+0x40>
 8003baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bae:	b672      	cpsid	i
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	b662      	cpsie	i
 8003bbe:	e7fe      	b.n	8003bbe <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bc0:	2e02      	cmp	r6, #2
 8003bc2:	d10d      	bne.n	8003be0 <xQueueGenericSendFromISR+0x60>
 8003bc4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d00a      	beq.n	8003be0 <xQueueGenericSendFromISR+0x60>
 8003bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bce:	b672      	cpsid	i
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	b662      	cpsie	i
 8003bde:	e7fe      	b.n	8003bde <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003be0:	f001 fbd4 	bl	800538c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003be4:	f3ef 8811 	mrs	r8, BASEPRI
 8003be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bec:	b672      	cpsid	i
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bfc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003bfe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d301      	bcc.n	8003c08 <xQueueGenericSendFromISR+0x88>
 8003c04:	2e02      	cmp	r6, #2
 8003c06:	d11d      	bne.n	8003c44 <xQueueGenericSendFromISR+0xc4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c08:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c0c:	4632      	mov	r2, r6
 8003c0e:	4649      	mov	r1, r9
 8003c10:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c12:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c14:	f7ff fd15 	bl	8003642 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003c18:	1c6b      	adds	r3, r5, #1
 8003c1a:	d10e      	bne.n	8003c3a <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003c1e:	b13b      	cbz	r3, 8003c30 <xQueueGenericSendFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c20:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003c24:	f000 fecc 	bl	80049c0 <xTaskRemoveFromEventList>
 8003c28:	b110      	cbz	r0, 8003c30 <xQueueGenericSendFromISR+0xb0>
							if( pxHigherPriorityTaskWoken != NULL )
 8003c2a:	b10f      	cbz	r7, 8003c30 <xQueueGenericSendFromISR+0xb0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8003c30:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c32:	f388 8811 	msr	BASEPRI, r8
}
 8003c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c3a:	3501      	adds	r5, #1
 8003c3c:	b26d      	sxtb	r5, r5
 8003c3e:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8003c42:	e7f5      	b.n	8003c30 <xQueueGenericSendFromISR+0xb0>
			xReturn = errQUEUE_FULL;
 8003c44:	2000      	movs	r0, #0
 8003c46:	e7f4      	b.n	8003c32 <xQueueGenericSendFromISR+0xb2>

08003c48 <xQueueGiveFromISR>:
{
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	b950      	cbnz	r0, 8003c66 <xQueueGiveFromISR+0x1e>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c54:	b672      	cpsid	i
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	b662      	cpsie	i
 8003c64:	e7fe      	b.n	8003c64 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c66:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003c68:	b153      	cbz	r3, 8003c80 <xQueueGiveFromISR+0x38>
 8003c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6e:	b672      	cpsid	i
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	b662      	cpsie	i
 8003c7e:	e7fe      	b.n	8003c7e <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003c80:	6803      	ldr	r3, [r0, #0]
 8003c82:	b963      	cbnz	r3, 8003c9e <xQueueGiveFromISR+0x56>
 8003c84:	6883      	ldr	r3, [r0, #8]
 8003c86:	b153      	cbz	r3, 8003c9e <xQueueGiveFromISR+0x56>
 8003c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8c:	b672      	cpsid	i
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	b662      	cpsie	i
 8003c9c:	e7fe      	b.n	8003c9c <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c9e:	f001 fb75 	bl	800538c <vPortValidateInterruptPriority>
	__asm volatile
 8003ca2:	f3ef 8611 	mrs	r6, BASEPRI
 8003ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003caa:	b672      	cpsid	i
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cba:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003cbc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d919      	bls.n	8003cf6 <xQueueGiveFromISR+0xae>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cc2:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cc6:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8003cc8:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cca:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ccc:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8003cce:	d10d      	bne.n	8003cec <xQueueGiveFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cd0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003cd2:	b13b      	cbz	r3, 8003ce4 <xQueueGiveFromISR+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cd4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003cd8:	f000 fe72 	bl	80049c0 <xTaskRemoveFromEventList>
 8003cdc:	b110      	cbz	r0, 8003ce4 <xQueueGiveFromISR+0x9c>
							if( pxHigherPriorityTaskWoken != NULL )
 8003cde:	b10d      	cbz	r5, 8003ce4 <xQueueGiveFromISR+0x9c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8003ce4:	2001      	movs	r0, #1
	__asm volatile
 8003ce6:	f386 8811 	msr	BASEPRI, r6
}
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cec:	3301      	adds	r3, #1
 8003cee:	b25b      	sxtb	r3, r3
 8003cf0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003cf4:	e7f6      	b.n	8003ce4 <xQueueGiveFromISR+0x9c>
			xReturn = errQUEUE_FULL;
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	e7f5      	b.n	8003ce6 <xQueueGiveFromISR+0x9e>

08003cfa <xQueueReceive>:
{
 8003cfa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003cfe:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 8003d00:	4604      	mov	r4, r0
{
 8003d02:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003d04:	b950      	cbnz	r0, 8003d1c <xQueueReceive+0x22>
	__asm volatile
 8003d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0a:	b672      	cpsid	i
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	b662      	cpsie	i
 8003d1a:	e7fe      	b.n	8003d1a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d1c:	b961      	cbnz	r1, 8003d38 <xQueueReceive+0x3e>
 8003d1e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003d20:	b153      	cbz	r3, 8003d38 <xQueueReceive+0x3e>
 8003d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d26:	b672      	cpsid	i
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	b662      	cpsie	i
 8003d36:	e7fe      	b.n	8003d36 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d38:	f000 fede 	bl	8004af8 <xTaskGetSchedulerState>
 8003d3c:	4605      	mov	r5, r0
 8003d3e:	b318      	cbz	r0, 8003d88 <xQueueReceive+0x8e>
 8003d40:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8003d42:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8003d46:	f001 fa25 	bl	8005194 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d4a:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d4c:	b357      	cbz	r7, 8003da4 <xQueueReceive+0xaa>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d4e:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d50:	4631      	mov	r1, r6
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff fca8 	bl	80036a8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d58:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d5a:	6923      	ldr	r3, [r4, #16]
 8003d5c:	b173      	cbz	r3, 8003d7c <xQueueReceive+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d5e:	f104 0010 	add.w	r0, r4, #16
 8003d62:	f000 fe2d 	bl	80049c0 <xTaskRemoveFromEventList>
 8003d66:	b148      	cbz	r0, 8003d7c <xQueueReceive+0x82>
						queueYIELD_IF_USING_PREEMPTION();
 8003d68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d70:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003d7c:	f001 fa2e 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 8003d80:	2001      	movs	r0, #1
}
 8003d82:	b004      	add	sp, #16
 8003d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d88:	9b01      	ldr	r3, [sp, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0d9      	beq.n	8003d42 <xQueueReceive+0x48>
 8003d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d92:	b672      	cpsid	i
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	b662      	cpsie	i
 8003da2:	e7fe      	b.n	8003da2 <xQueueReceive+0xa8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003da4:	9b01      	ldr	r3, [sp, #4]
 8003da6:	b91b      	cbnz	r3, 8003db0 <xQueueReceive+0xb6>
					taskEXIT_CRITICAL();
 8003da8:	f001 fa18 	bl	80051dc <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003dac:	2000      	movs	r0, #0
 8003dae:	e7e8      	b.n	8003d82 <xQueueReceive+0x88>
				else if( xEntryTimeSet == pdFALSE )
 8003db0:	b915      	cbnz	r5, 8003db8 <xQueueReceive+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003db2:	a802      	add	r0, sp, #8
 8003db4:	f000 fe48 	bl	8004a48 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003db8:	f001 fa10 	bl	80051dc <vPortExitCritical>
		vTaskSuspendAll();
 8003dbc:	f000 fc38 	bl	8004630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dc0:	f001 f9e8 	bl	8005194 <vPortEnterCritical>
 8003dc4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003dc8:	2bff      	cmp	r3, #255	@ 0xff
 8003dca:	d101      	bne.n	8003dd0 <xQueueReceive+0xd6>
 8003dcc:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8003dd0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003dd4:	2bff      	cmp	r3, #255	@ 0xff
 8003dd6:	d101      	bne.n	8003ddc <xQueueReceive+0xe2>
 8003dd8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8003ddc:	f001 f9fe 	bl	80051dc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de0:	a901      	add	r1, sp, #4
 8003de2:	a802      	add	r0, sp, #8
 8003de4:	f000 fe3c 	bl	8004a60 <xTaskCheckForTimeOut>
 8003de8:	bb00      	cbnz	r0, 8003e2c <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dea:	4620      	mov	r0, r4
 8003dec:	f7ff fc1e 	bl	800362c <prvIsQueueEmpty>
 8003df0:	b1b0      	cbz	r0, 8003e20 <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003df2:	9901      	ldr	r1, [sp, #4]
 8003df4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003df8:	f000 fda6 	bl	8004948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f7ff fc68 	bl	80036d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e02:	f000 fcc3 	bl	800478c <xTaskResumeAll>
 8003e06:	b948      	cbnz	r0, 8003e1c <xQueueReceive+0x122>
					portYIELD_WITHIN_API();
 8003e08:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003e0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e10:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	2501      	movs	r5, #1
 8003e1e:	e792      	b.n	8003d46 <xQueueReceive+0x4c>
				prvUnlockQueue( pxQueue );
 8003e20:	4620      	mov	r0, r4
 8003e22:	f7ff fc56 	bl	80036d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e26:	f000 fcb1 	bl	800478c <xTaskResumeAll>
 8003e2a:	e7f7      	b.n	8003e1c <xQueueReceive+0x122>
			prvUnlockQueue( pxQueue );
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7ff fc50 	bl	80036d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e32:	f000 fcab 	bl	800478c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e36:	4620      	mov	r0, r4
 8003e38:	f7ff fbf8 	bl	800362c <prvIsQueueEmpty>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d0ed      	beq.n	8003e1c <xQueueReceive+0x122>
 8003e40:	e7b4      	b.n	8003dac <xQueueReceive+0xb2>

08003e42 <xQueueSemaphoreTake>:
{
 8003e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e44:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8003e46:	4604      	mov	r4, r0
{
 8003e48:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003e4a:	b950      	cbnz	r0, 8003e62 <xQueueSemaphoreTake+0x20>
 8003e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e50:	b672      	cpsid	i
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	b662      	cpsie	i
 8003e60:	e7fe      	b.n	8003e60 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e62:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003e64:	b155      	cbz	r5, 8003e7c <xQueueSemaphoreTake+0x3a>
 8003e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6a:	b672      	cpsid	i
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	b662      	cpsie	i
 8003e7a:	e7fe      	b.n	8003e7a <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e7c:	f000 fe3c 	bl	8004af8 <xTaskGetSchedulerState>
 8003e80:	4606      	mov	r6, r0
 8003e82:	b320      	cbz	r0, 8003ece <xQueueSemaphoreTake+0x8c>
 8003e84:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8003e86:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8003e88:	f001 f984 	bl	8005194 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e8c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e8e:	b363      	cbz	r3, 8003eea <xQueueSemaphoreTake+0xa8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e90:	3b01      	subs	r3, #1
 8003e92:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	b913      	cbnz	r3, 8003e9e <xQueueSemaphoreTake+0x5c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e98:	f000 ff14 	bl	8004cc4 <pvTaskIncrementMutexHeldCount>
 8003e9c:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e9e:	6923      	ldr	r3, [r4, #16]
 8003ea0:	b173      	cbz	r3, 8003ec0 <xQueueSemaphoreTake+0x7e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ea2:	f104 0010 	add.w	r0, r4, #16
 8003ea6:	f000 fd8b 	bl	80049c0 <xTaskRemoveFromEventList>
 8003eaa:	b148      	cbz	r0, 8003ec0 <xQueueSemaphoreTake+0x7e>
						queueYIELD_IF_USING_PREEMPTION();
 8003eac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003ec0:	f001 f98c 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 8003ec4:	2001      	movs	r0, #1
}
 8003ec6:	b005      	add	sp, #20
 8003ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eca:	4635      	mov	r5, r6
 8003ecc:	e7db      	b.n	8003e86 <xQueueSemaphoreTake+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ece:	9b01      	ldr	r3, [sp, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0fa      	beq.n	8003eca <xQueueSemaphoreTake+0x88>
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	b672      	cpsid	i
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	b662      	cpsie	i
 8003ee8:	e7fe      	b.n	8003ee8 <xQueueSemaphoreTake+0xa6>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eea:	9b01      	ldr	r3, [sp, #4]
 8003eec:	b963      	cbnz	r3, 8003f08 <xQueueSemaphoreTake+0xc6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003eee:	2d00      	cmp	r5, #0
 8003ef0:	d068      	beq.n	8003fc4 <xQueueSemaphoreTake+0x182>
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	b672      	cpsid	i
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	b662      	cpsie	i
 8003f06:	e7fe      	b.n	8003f06 <xQueueSemaphoreTake+0xc4>
				else if( xEntryTimeSet == pdFALSE )
 8003f08:	b916      	cbnz	r6, 8003f10 <xQueueSemaphoreTake+0xce>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f0a:	a802      	add	r0, sp, #8
 8003f0c:	f000 fd9c 	bl	8004a48 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003f10:	f001 f964 	bl	80051dc <vPortExitCritical>
		vTaskSuspendAll();
 8003f14:	f000 fb8c 	bl	8004630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f18:	f001 f93c 	bl	8005194 <vPortEnterCritical>
 8003f1c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003f20:	2bff      	cmp	r3, #255	@ 0xff
 8003f22:	d101      	bne.n	8003f28 <xQueueSemaphoreTake+0xe6>
 8003f24:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8003f28:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003f2c:	2bff      	cmp	r3, #255	@ 0xff
 8003f2e:	d101      	bne.n	8003f34 <xQueueSemaphoreTake+0xf2>
 8003f30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f34:	f001 f952 	bl	80051dc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f38:	a901      	add	r1, sp, #4
 8003f3a:	a802      	add	r0, sp, #8
 8003f3c:	f000 fd90 	bl	8004a60 <xTaskCheckForTimeOut>
 8003f40:	bb50      	cbnz	r0, 8003f98 <xQueueSemaphoreTake+0x156>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f42:	4620      	mov	r0, r4
 8003f44:	f7ff fb72 	bl	800362c <prvIsQueueEmpty>
 8003f48:	b300      	cbz	r0, 8003f8c <xQueueSemaphoreTake+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	b93b      	cbnz	r3, 8003f5e <xQueueSemaphoreTake+0x11c>
						taskENTER_CRITICAL();
 8003f4e:	f001 f921 	bl	8005194 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f52:	68a0      	ldr	r0, [r4, #8]
 8003f54:	f000 fde0 	bl	8004b18 <xTaskPriorityInherit>
 8003f58:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8003f5a:	f001 f93f 	bl	80051dc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f5e:	9901      	ldr	r1, [sp, #4]
 8003f60:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003f64:	f000 fcf0 	bl	8004948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f7ff fbb2 	bl	80036d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f6e:	f000 fc0d 	bl	800478c <xTaskResumeAll>
 8003f72:	b948      	cbnz	r0, 8003f88 <xQueueSemaphoreTake+0x146>
					portYIELD_WITHIN_API();
 8003f74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	2601      	movs	r6, #1
 8003f8a:	e77d      	b.n	8003e88 <xQueueSemaphoreTake+0x46>
				prvUnlockQueue( pxQueue );
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f7ff fba0 	bl	80036d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f92:	f000 fbfb 	bl	800478c <xTaskResumeAll>
 8003f96:	e7f7      	b.n	8003f88 <xQueueSemaphoreTake+0x146>
			prvUnlockQueue( pxQueue );
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f7ff fb9a 	bl	80036d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f9e:	f000 fbf5 	bl	800478c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f7ff fb42 	bl	800362c <prvIsQueueEmpty>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d0ed      	beq.n	8003f88 <xQueueSemaphoreTake+0x146>
					if( xInheritanceOccurred != pdFALSE )
 8003fac:	b165      	cbz	r5, 8003fc8 <xQueueSemaphoreTake+0x186>
						taskENTER_CRITICAL();
 8003fae:	f001 f8f1 	bl	8005194 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003fb2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003fb4:	b119      	cbz	r1, 8003fbe <xQueueSemaphoreTake+0x17c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003fbe:	68a0      	ldr	r0, [r4, #8]
 8003fc0:	f000 fe2e 	bl	8004c20 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8003fc4:	f001 f90a 	bl	80051dc <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003fc8:	2000      	movs	r0, #0
 8003fca:	e77c      	b.n	8003ec6 <xQueueSemaphoreTake+0x84>

08003fcc <xQueueTakeMutexRecursive>:
	{
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	b950      	cbnz	r0, 8003fea <xQueueTakeMutexRecursive+0x1e>
 8003fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd8:	b672      	cpsid	i
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	b662      	cpsie	i
 8003fe8:	e7fe      	b.n	8003fe8 <xQueueTakeMutexRecursive+0x1c>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003fea:	6886      	ldr	r6, [r0, #8]
 8003fec:	f000 fd7e 	bl	8004aec <xTaskGetCurrentTaskHandle>
 8003ff0:	4286      	cmp	r6, r0
 8003ff2:	d104      	bne.n	8003ffe <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003ff4:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8003ff6:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60e3      	str	r3, [r4, #12]
	}
 8003ffc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003ffe:	4629      	mov	r1, r5
 8004000:	4620      	mov	r0, r4
 8004002:	f7ff ff1e 	bl	8003e42 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8004006:	2800      	cmp	r0, #0
 8004008:	d0f8      	beq.n	8003ffc <xQueueTakeMutexRecursive+0x30>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800400a:	68e3      	ldr	r3, [r4, #12]
 800400c:	3301      	adds	r3, #1
 800400e:	60e3      	str	r3, [r4, #12]
 8004010:	e7f4      	b.n	8003ffc <xQueueTakeMutexRecursive+0x30>

08004012 <xQueueReceiveFromISR>:
{
 8004012:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004016:	4689      	mov	r9, r1
 8004018:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800401a:	4604      	mov	r4, r0
 800401c:	b950      	cbnz	r0, 8004034 <xQueueReceiveFromISR+0x22>
 800401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004022:	b672      	cpsid	i
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	b662      	cpsie	i
 8004032:	e7fe      	b.n	8004032 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004034:	b961      	cbnz	r1, 8004050 <xQueueReceiveFromISR+0x3e>
 8004036:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004038:	b153      	cbz	r3, 8004050 <xQueueReceiveFromISR+0x3e>
 800403a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403e:	b672      	cpsid	i
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	b662      	cpsie	i
 800404e:	e7fe      	b.n	800404e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004050:	f001 f99c 	bl	800538c <vPortValidateInterruptPriority>
	__asm volatile
 8004054:	f3ef 8711 	mrs	r7, BASEPRI
 8004058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405c:	b672      	cpsid	i
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800406c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800406e:	b30d      	cbz	r5, 80040b4 <xQueueReceiveFromISR+0xa2>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004070:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004074:	4649      	mov	r1, r9
 8004076:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004078:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800407a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800407c:	f7ff fb14 	bl	80036a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004080:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8004082:	1c73      	adds	r3, r6, #1
 8004084:	d111      	bne.n	80040aa <xQueueReceiveFromISR+0x98>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	b153      	cbz	r3, 80040a0 <xQueueReceiveFromISR+0x8e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800408a:	f104 0010 	add.w	r0, r4, #16
 800408e:	f000 fc97 	bl	80049c0 <xTaskRemoveFromEventList>
 8004092:	b128      	cbz	r0, 80040a0 <xQueueReceiveFromISR+0x8e>
						if( pxHigherPriorityTaskWoken != NULL )
 8004094:	f1b8 0f00 	cmp.w	r8, #0
 8004098:	d002      	beq.n	80040a0 <xQueueReceiveFromISR+0x8e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800409a:	2301      	movs	r3, #1
 800409c:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 80040a0:	2001      	movs	r0, #1
	__asm volatile
 80040a2:	f387 8811 	msr	BASEPRI, r7
}
 80040a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80040aa:	3601      	adds	r6, #1
 80040ac:	b276      	sxtb	r6, r6
 80040ae:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 80040b2:	e7f5      	b.n	80040a0 <xQueueReceiveFromISR+0x8e>
			xReturn = pdFAIL;
 80040b4:	4628      	mov	r0, r5
 80040b6:	e7f4      	b.n	80040a2 <xQueueReceiveFromISR+0x90>

080040b8 <uxQueueMessagesWaiting>:
{
 80040b8:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 80040ba:	4604      	mov	r4, r0
 80040bc:	b950      	cbnz	r0, 80040d4 <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	b672      	cpsid	i
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	b662      	cpsie	i
 80040d2:	e7fe      	b.n	80040d2 <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 80040d4:	f001 f85e 	bl	8005194 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80040d8:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 80040da:	f001 f87f 	bl	80051dc <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80040de:	4620      	mov	r0, r4
 80040e0:	bd10      	pop	{r4, pc}

080040e2 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80040e2:	b950      	cbnz	r0, 80040fa <uxQueueMessagesWaitingFromISR+0x18>
 80040e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e8:	b672      	cpsid	i
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	b662      	cpsie	i
 80040f8:	e7fe      	b.n	80040f8 <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = pxQueue->uxMessagesWaiting;
 80040fa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80040fc:	4770      	bx	lr
	...

08004100 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004100:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004102:	4a07      	ldr	r2, [pc, #28]	@ (8004120 <vQueueAddToRegistry+0x20>)
	{
 8004104:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004106:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800410a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800410e:	b91d      	cbnz	r5, 8004118 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004110:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004114:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004116:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004118:	3301      	adds	r3, #1
 800411a:	2b08      	cmp	r3, #8
 800411c:	d1f3      	bne.n	8004106 <vQueueAddToRegistry+0x6>
 800411e:	e7fa      	b.n	8004116 <vQueueAddToRegistry+0x16>
 8004120:	2001e6bc 	.word	0x2001e6bc

08004124 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004124:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004126:	4a09      	ldr	r2, [pc, #36]	@ (800414c <vQueueUnregisterQueue+0x28>)
	{
 8004128:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800412a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800412e:	00dc      	lsls	r4, r3, #3
 8004130:	4281      	cmp	r1, r0
 8004132:	d106      	bne.n	8004142 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004134:	4a06      	ldr	r2, [pc, #24]	@ (8004150 <vQueueUnregisterQueue+0x2c>)
 8004136:	2100      	movs	r1, #0
 8004138:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800413c:	4422      	add	r2, r4
 800413e:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004140:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004142:	3301      	adds	r3, #1
 8004144:	2b08      	cmp	r3, #8
 8004146:	d1f0      	bne.n	800412a <vQueueUnregisterQueue+0x6>
 8004148:	e7fa      	b.n	8004140 <vQueueUnregisterQueue+0x1c>
 800414a:	bf00      	nop
 800414c:	2001e6c0 	.word	0x2001e6c0
 8004150:	2001e6bc 	.word	0x2001e6bc

08004154 <vQueueDelete>:
{
 8004154:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8004156:	b950      	cbnz	r0, 800416e <vQueueDelete+0x1a>
 8004158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415c:	b672      	cpsid	i
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	b662      	cpsie	i
 800416c:	e7fe      	b.n	800416c <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
 800416e:	f7ff ffd9 	bl	8004124 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004172:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8004176:	b91b      	cbnz	r3, 8004180 <vQueueDelete+0x2c>
}
 8004178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800417c:	f001 b9f2 	b.w	8005564 <vPortFree>
}
 8004180:	bd10      	pop	{r4, pc}

08004182 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004182:	b570      	push	{r4, r5, r6, lr}
 8004184:	4604      	mov	r4, r0
 8004186:	460d      	mov	r5, r1
 8004188:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800418a:	f001 f803 	bl	8005194 <vPortEnterCritical>
 800418e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004192:	2bff      	cmp	r3, #255	@ 0xff
 8004194:	d102      	bne.n	800419c <vQueueWaitForMessageRestricted+0x1a>
 8004196:	2300      	movs	r3, #0
 8004198:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800419c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80041a0:	2bff      	cmp	r3, #255	@ 0xff
 80041a2:	d102      	bne.n	80041aa <vQueueWaitForMessageRestricted+0x28>
 80041a4:	2300      	movs	r3, #0
 80041a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80041aa:	f001 f817 	bl	80051dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80041b0:	b92b      	cbnz	r3, 80041be <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041b2:	4632      	mov	r2, r6
 80041b4:	4629      	mov	r1, r5
 80041b6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80041ba:	f000 fbe1 	bl	8004980 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041be:	4620      	mov	r0, r4
	}
 80041c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80041c4:	f7ff ba85 	b.w	80036d2 <prvUnlockQueue>

080041c8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041cc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041ce:	f000 ffe1 	bl	8005194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004290 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80041d4:	4e2f      	ldr	r6, [pc, #188]	@ (8004294 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4f2f      	ldr	r7, [pc, #188]	@ (8004298 <prvAddNewTaskToReadyList+0xd0>)
 80041da:	3201      	adds	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80041de:	6835      	ldr	r5, [r6, #0]
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	d14a      	bne.n	800427a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041e4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d11f      	bne.n	800422c <prvAddNewTaskToReadyList+0x64>
 80041ec:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041ee:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041f0:	4640      	mov	r0, r8
 80041f2:	f7ff f9db 	bl	80035ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041f6:	f108 0814 	add.w	r8, r8, #20
 80041fa:	2d38      	cmp	r5, #56	@ 0x38
 80041fc:	d1f7      	bne.n	80041ee <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041fe:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 80042c0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8004202:	4d26      	ldr	r5, [pc, #152]	@ (800429c <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8004204:	4640      	mov	r0, r8
 8004206:	f7ff f9d1 	bl	80035ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800420a:	4628      	mov	r0, r5
 800420c:	f7ff f9ce 	bl	80035ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004210:	4823      	ldr	r0, [pc, #140]	@ (80042a0 <prvAddNewTaskToReadyList+0xd8>)
 8004212:	f7ff f9cb 	bl	80035ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004216:	4823      	ldr	r0, [pc, #140]	@ (80042a4 <prvAddNewTaskToReadyList+0xdc>)
 8004218:	f7ff f9c8 	bl	80035ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800421c:	4822      	ldr	r0, [pc, #136]	@ (80042a8 <prvAddNewTaskToReadyList+0xe0>)
 800421e:	f7ff f9c5 	bl	80035ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004222:	4b22      	ldr	r3, [pc, #136]	@ (80042ac <prvAddNewTaskToReadyList+0xe4>)
 8004224:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004228:	4b21      	ldr	r3, [pc, #132]	@ (80042b0 <prvAddNewTaskToReadyList+0xe8>)
 800422a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800422c:	4a21      	ldr	r2, [pc, #132]	@ (80042b4 <prvAddNewTaskToReadyList+0xec>)
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	3301      	adds	r3, #1
 8004232:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004234:	4a20      	ldr	r2, [pc, #128]	@ (80042b8 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004236:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004238:	6811      	ldr	r1, [r2, #0]
 800423a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800423c:	428b      	cmp	r3, r1
 800423e:	d900      	bls.n	8004242 <prvAddNewTaskToReadyList+0x7a>
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	2014      	movs	r0, #20
 8004244:	1d21      	adds	r1, r4, #4
 8004246:	fb00 7003 	mla	r0, r0, r3, r7
 800424a:	f7ff f9bd 	bl	80035c8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800424e:	f000 ffc5 	bl	80051dc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004252:	4b1a      	ldr	r3, [pc, #104]	@ (80042bc <prvAddNewTaskToReadyList+0xf4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b173      	cbz	r3, 8004276 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004258:	6833      	ldr	r3, [r6, #0]
 800425a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800425e:	429a      	cmp	r2, r3
 8004260:	d209      	bcs.n	8004276 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8004262:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800426a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	f3bf 8f6f 	isb	sy
}
 8004276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800427a:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <prvAddNewTaskToReadyList+0xf4>)
 800427c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800427e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8004280:	2a00      	cmp	r2, #0
 8004282:	d1d3      	bne.n	800422c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004284:	6832      	ldr	r2, [r6, #0]
 8004286:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004288:	429a      	cmp	r2, r3
 800428a:	d8cf      	bhi.n	800422c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800428c:	6034      	str	r4, [r6, #0]
 800428e:	e7cd      	b.n	800422c <prvAddNewTaskToReadyList+0x64>
 8004290:	2001e720 	.word	0x2001e720
 8004294:	2001ebf4 	.word	0x2001ebf4
 8004298:	2001e794 	.word	0x2001e794
 800429c:	2001e76c 	.word	0x2001e76c
 80042a0:	2001e750 	.word	0x2001e750
 80042a4:	2001e73c 	.word	0x2001e73c
 80042a8:	2001e724 	.word	0x2001e724
 80042ac:	2001e768 	.word	0x2001e768
 80042b0:	2001e764 	.word	0x2001e764
 80042b4:	2001e704 	.word	0x2001e704
 80042b8:	2001e718 	.word	0x2001e718
 80042bc:	2001e714 	.word	0x2001e714
 80042c0:	2001e780 	.word	0x2001e780

080042c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042c6:	4b15      	ldr	r3, [pc, #84]	@ (800431c <prvAddCurrentTaskToDelayedList+0x58>)
{
 80042c8:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ca:	4d15      	ldr	r5, [pc, #84]	@ (8004320 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80042cc:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80042ce:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042d0:	6828      	ldr	r0, [r5, #0]
 80042d2:	3004      	adds	r0, #4
 80042d4:	f7ff f99a 	bl	800360c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042d8:	1c73      	adds	r3, r6, #1
 80042da:	d107      	bne.n	80042ec <prvAddCurrentTaskToDelayedList+0x28>
 80042dc:	b137      	cbz	r7, 80042ec <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042de:	6829      	ldr	r1, [r5, #0]
 80042e0:	4810      	ldr	r0, [pc, #64]	@ (8004324 <prvAddCurrentTaskToDelayedList+0x60>)
 80042e2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042e8:	f7ff b96e 	b.w	80035c8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042ec:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042ee:	682b      	ldr	r3, [r5, #0]
 80042f0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042f2:	d307      	bcc.n	8004304 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <prvAddCurrentTaskToDelayedList+0x64>)
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	6829      	ldr	r1, [r5, #0]
}
 80042fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042fe:	3104      	adds	r1, #4
 8004300:	f7ff b96d 	b.w	80035de <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004304:	4b09      	ldr	r3, [pc, #36]	@ (800432c <prvAddCurrentTaskToDelayedList+0x68>)
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	6829      	ldr	r1, [r5, #0]
 800430a:	3104      	adds	r1, #4
 800430c:	f7ff f967 	bl	80035de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004310:	4b07      	ldr	r3, [pc, #28]	@ (8004330 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	42a2      	cmp	r2, r4
 8004316:	d900      	bls.n	800431a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8004318:	601c      	str	r4, [r3, #0]
}
 800431a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800431c:	2001e71c 	.word	0x2001e71c
 8004320:	2001ebf4 	.word	0x2001ebf4
 8004324:	2001e724 	.word	0x2001e724
 8004328:	2001e764 	.word	0x2001e764
 800432c:	2001e768 	.word	0x2001e768
 8004330:	2001e700 	.word	0x2001e700

08004334 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004334:	4a06      	ldr	r2, [pc, #24]	@ (8004350 <prvResetNextTaskUnblockTime+0x1c>)
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	6819      	ldr	r1, [r3, #0]
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <prvResetNextTaskUnblockTime+0x20>)
 800433c:	b919      	cbnz	r1, 8004346 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800433e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004342:	601a      	str	r2, [r3, #0]
}
 8004344:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800434a:	68d2      	ldr	r2, [r2, #12]
 800434c:	6852      	ldr	r2, [r2, #4]
 800434e:	e7f8      	b.n	8004342 <prvResetNextTaskUnblockTime+0xe>
 8004350:	2001e768 	.word	0x2001e768
 8004354:	2001e700 	.word	0x2001e700

08004358 <prvDeleteTCB>:
	{
 8004358:	b510      	push	{r4, lr}
 800435a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800435c:	3054      	adds	r0, #84	@ 0x54
 800435e:	f009 f973 	bl	800d648 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004362:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8004366:	b93b      	cbnz	r3, 8004378 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8004368:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800436a:	f001 f8fb 	bl	8005564 <vPortFree>
				vPortFree( pxTCB );
 800436e:	4620      	mov	r0, r4
	}
 8004370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8004374:	f001 b8f6 	b.w	8005564 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004378:	2b01      	cmp	r3, #1
 800437a:	d0f8      	beq.n	800436e <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800437c:	2b02      	cmp	r3, #2
 800437e:	d00a      	beq.n	8004396 <prvDeleteTCB+0x3e>
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	b672      	cpsid	i
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	b662      	cpsie	i
 8004394:	e7fe      	b.n	8004394 <prvDeleteTCB+0x3c>
	}
 8004396:	bd10      	pop	{r4, pc}

08004398 <prvIdleTask>:
{
 8004398:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800439a:	4c13      	ldr	r4, [pc, #76]	@ (80043e8 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800439c:	4f13      	ldr	r7, [pc, #76]	@ (80043ec <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800439e:	4d14      	ldr	r5, [pc, #80]	@ (80043f0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	b973      	cbnz	r3, 80043c2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043a4:	4b13      	ldr	r3, [pc, #76]	@ (80043f4 <prvIdleTask+0x5c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d9f8      	bls.n	800439e <prvIdleTask+0x6>
				taskYIELD();
 80043ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80043b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	e7ed      	b.n	800439e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80043c2:	f000 fee7 	bl	8005194 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043ca:	1d30      	adds	r0, r6, #4
 80043cc:	f7ff f91e 	bl	800360c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	3b01      	subs	r3, #1
 80043da:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80043dc:	f000 fefe 	bl	80051dc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80043e0:	4630      	mov	r0, r6
 80043e2:	f7ff ffb9 	bl	8004358 <prvDeleteTCB>
 80043e6:	e7db      	b.n	80043a0 <prvIdleTask+0x8>
 80043e8:	2001e738 	.word	0x2001e738
 80043ec:	2001e73c 	.word	0x2001e73c
 80043f0:	2001e720 	.word	0x2001e720
 80043f4:	2001e794 	.word	0x2001e794

080043f8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80043f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043fc:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80043fe:	4607      	mov	r7, r0
 8004400:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004402:	21a5      	movs	r1, #165	@ 0xa5
 8004404:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004406:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004408:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800440a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800440e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004410:	f009 f901 	bl	800d616 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004414:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004416:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004418:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800441c:	2d00      	cmp	r5, #0
 800441e:	d041      	beq.n	80044a4 <prvInitialiseNewTask.constprop.0+0xac>
 8004420:	1e6b      	subs	r3, r5, #1
 8004422:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8004426:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004428:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800442c:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8004430:	b109      	cbz	r1, 8004436 <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004432:	42ab      	cmp	r3, r5
 8004434:	d1f8      	bne.n	8004428 <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004436:	2300      	movs	r3, #0
 8004438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800443c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800443e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004442:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004444:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8004446:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800444a:	bf28      	it	cs
 800444c:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800444e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004450:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004452:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004456:	f7ff f8b4 	bl	80035c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800445a:	f104 0018 	add.w	r0, r4, #24
 800445e:	f7ff f8b0 	bl	80035c2 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004462:	224c      	movs	r2, #76	@ 0x4c
 8004464:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8004466:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800446a:	f104 0054 	add.w	r0, r4, #84	@ 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800446e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004470:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004472:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004474:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004478:	f009 f8cd 	bl	800d616 <memset>
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <prvInitialiseNewTask.constprop.0+0xb4>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800447e:	4639      	mov	r1, r7
 8004480:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004482:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004486:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004488:	33d0      	adds	r3, #208	@ 0xd0
 800448a:	65e2      	str	r2, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800448c:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800448e:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004490:	f000 fe58 	bl	8005144 <pxPortInitialiseStack>
 8004494:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004496:	f1b9 0f00 	cmp.w	r9, #0
 800449a:	d001      	beq.n	80044a0 <prvInitialiseNewTask.constprop.0+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800449c:	f8c9 4000 	str.w	r4, [r9]
}
 80044a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044a4:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 80044a8:	e7c8      	b.n	800443c <prvInitialiseNewTask.constprop.0+0x44>
 80044aa:	bf00      	nop
 80044ac:	200376b4 	.word	0x200376b4

080044b0 <xTaskCreateStatic>:
	{
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80044b8:	b955      	cbnz	r5, 80044d0 <xTaskCreateStatic+0x20>
 80044ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044be:	b672      	cpsid	i
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	b662      	cpsie	i
 80044ce:	e7fe      	b.n	80044ce <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 80044d0:	b954      	cbnz	r4, 80044e8 <xTaskCreateStatic+0x38>
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	b672      	cpsid	i
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	b662      	cpsie	i
 80044e6:	e7fe      	b.n	80044e6 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 80044e8:	26a8      	movs	r6, #168	@ 0xa8
 80044ea:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044ec:	9e05      	ldr	r6, [sp, #20]
 80044ee:	2ea8      	cmp	r6, #168	@ 0xa8
 80044f0:	d00a      	beq.n	8004508 <xTaskCreateStatic+0x58>
 80044f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f6:	b672      	cpsid	i
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	b662      	cpsie	i
 8004506:	e7fe      	b.n	8004506 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004508:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800450a:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800450c:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800450e:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004512:	ad04      	add	r5, sp, #16
 8004514:	9402      	str	r4, [sp, #8]
 8004516:	9501      	str	r5, [sp, #4]
 8004518:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800451a:	9500      	str	r5, [sp, #0]
 800451c:	f7ff ff6c 	bl	80043f8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004520:	4620      	mov	r0, r4
 8004522:	f7ff fe51 	bl	80041c8 <prvAddNewTaskToReadyList>
	}
 8004526:	9804      	ldr	r0, [sp, #16]
 8004528:	b006      	add	sp, #24
 800452a:	bd70      	pop	{r4, r5, r6, pc}

0800452c <xTaskCreate>:
	{
 800452c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004530:	4607      	mov	r7, r0
 8004532:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004534:	0090      	lsls	r0, r2, #2
	{
 8004536:	4688      	mov	r8, r1
 8004538:	4616      	mov	r6, r2
 800453a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800453c:	f000 ff7e 	bl	800543c <pvPortMalloc>
			if( pxStack != NULL )
 8004540:	4605      	mov	r5, r0
 8004542:	b920      	cbnz	r0, 800454e <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004548:	b005      	add	sp, #20
 800454a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800454e:	20a8      	movs	r0, #168	@ 0xa8
 8004550:	f000 ff74 	bl	800543c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004554:	4604      	mov	r4, r0
 8004556:	b198      	cbz	r0, 8004580 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004558:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800455a:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800455c:	4632      	mov	r2, r6
 800455e:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004560:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004564:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004566:	9002      	str	r0, [sp, #8]
 8004568:	4638      	mov	r0, r7
 800456a:	9301      	str	r3, [sp, #4]
 800456c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	464b      	mov	r3, r9
 8004572:	f7ff ff41 	bl	80043f8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004576:	4620      	mov	r0, r4
 8004578:	f7ff fe26 	bl	80041c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800457c:	2001      	movs	r0, #1
 800457e:	e7e3      	b.n	8004548 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8004580:	4628      	mov	r0, r5
 8004582:	f000 ffef 	bl	8005564 <vPortFree>
		if( pxNewTCB != NULL )
 8004586:	e7dd      	b.n	8004544 <xTaskCreate+0x18>

08004588 <vTaskStartScheduler>:
{
 8004588:	b510      	push	{r4, lr}
 800458a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800458c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800458e:	aa07      	add	r2, sp, #28
 8004590:	a906      	add	r1, sp, #24
 8004592:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004594:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004598:	f7fe fff0 	bl	800357c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800459c:	9b05      	ldr	r3, [sp, #20]
 800459e:	9a07      	ldr	r2, [sp, #28]
 80045a0:	9302      	str	r3, [sp, #8]
 80045a2:	9b06      	ldr	r3, [sp, #24]
 80045a4:	491b      	ldr	r1, [pc, #108]	@ (8004614 <vTaskStartScheduler+0x8c>)
 80045a6:	481c      	ldr	r0, [pc, #112]	@ (8004618 <vTaskStartScheduler+0x90>)
 80045a8:	e9cd 4300 	strd	r4, r3, [sp]
 80045ac:	4623      	mov	r3, r4
 80045ae:	f7ff ff7f 	bl	80044b0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80045b2:	2800      	cmp	r0, #0
 80045b4:	d02c      	beq.n	8004610 <vTaskStartScheduler+0x88>
			xReturn = xTimerCreateTimerTask();
 80045b6:	f000 fbe3 	bl	8004d80 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80045ba:	2801      	cmp	r0, #1
 80045bc:	d11b      	bne.n	80045f6 <vTaskStartScheduler+0x6e>
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	b672      	cpsid	i
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045d2:	4b12      	ldr	r3, [pc, #72]	@ (800461c <vTaskStartScheduler+0x94>)
 80045d4:	4a12      	ldr	r2, [pc, #72]	@ (8004620 <vTaskStartScheduler+0x98>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3354      	adds	r3, #84	@ 0x54
 80045da:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295
 80045e0:	4b10      	ldr	r3, [pc, #64]	@ (8004624 <vTaskStartScheduler+0x9c>)
 80045e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045e4:	4b10      	ldr	r3, [pc, #64]	@ (8004628 <vTaskStartScheduler+0xa0>)
 80045e6:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045e8:	4b10      	ldr	r3, [pc, #64]	@ (800462c <vTaskStartScheduler+0xa4>)
 80045ea:	601c      	str	r4, [r3, #0]
}
 80045ec:	b008      	add	sp, #32
 80045ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80045f2:	f000 be69 	b.w	80052c8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045f6:	3001      	adds	r0, #1
 80045f8:	d10a      	bne.n	8004610 <vTaskStartScheduler+0x88>
 80045fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fe:	b672      	cpsid	i
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	b662      	cpsie	i
 800460e:	e7fe      	b.n	800460e <vTaskStartScheduler+0x86>
}
 8004610:	b008      	add	sp, #32
 8004612:	bd10      	pop	{r4, pc}
 8004614:	0800e558 	.word	0x0800e558
 8004618:	08004399 	.word	0x08004399
 800461c:	2001ebf4 	.word	0x2001ebf4
 8004620:	2000003c 	.word	0x2000003c
 8004624:	2001e700 	.word	0x2001e700
 8004628:	2001e714 	.word	0x2001e714
 800462c:	2001e71c 	.word	0x2001e71c

08004630 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004630:	4a02      	ldr	r2, [pc, #8]	@ (800463c <vTaskSuspendAll+0xc>)
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	6013      	str	r3, [r2, #0]
}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	2001e6fc 	.word	0x2001e6fc

08004640 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004640:	4b01      	ldr	r3, [pc, #4]	@ (8004648 <xTaskGetTickCount+0x8>)
 8004642:	6818      	ldr	r0, [r3, #0]
}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	2001e71c 	.word	0x2001e71c

0800464c <xTaskGetTickCountFromISR>:
{
 800464c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800464e:	f000 fe9d 	bl	800538c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004652:	4b01      	ldr	r3, [pc, #4]	@ (8004658 <xTaskGetTickCountFromISR+0xc>)
 8004654:	6818      	ldr	r0, [r3, #0]
}
 8004656:	bd08      	pop	{r3, pc}
 8004658:	2001e71c 	.word	0x2001e71c

0800465c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800465c:	4b40      	ldr	r3, [pc, #256]	@ (8004760 <xTaskIncrementTick+0x104>)
 800465e:	681b      	ldr	r3, [r3, #0]
{
 8004660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004664:	2b00      	cmp	r3, #0
 8004666:	d173      	bne.n	8004750 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004668:	4b3e      	ldr	r3, [pc, #248]	@ (8004764 <xTaskIncrementTick+0x108>)
 800466a:	681c      	ldr	r4, [r3, #0]
 800466c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800466e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004670:	b9cc      	cbnz	r4, 80046a6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8004672:	4b3d      	ldr	r3, [pc, #244]	@ (8004768 <xTaskIncrementTick+0x10c>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	b152      	cbz	r2, 8004690 <xTaskIncrementTick+0x34>
 800467a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467e:	b672      	cpsid	i
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	b662      	cpsie	i
 800468e:	e7fe      	b.n	800468e <xTaskIncrementTick+0x32>
 8004690:	4a36      	ldr	r2, [pc, #216]	@ (800476c <xTaskIncrementTick+0x110>)
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	6810      	ldr	r0, [r2, #0]
 8004696:	6018      	str	r0, [r3, #0]
 8004698:	6011      	str	r1, [r2, #0]
 800469a:	4a35      	ldr	r2, [pc, #212]	@ (8004770 <xTaskIncrementTick+0x114>)
 800469c:	6813      	ldr	r3, [r2, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	f7ff fe47 	bl	8004334 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046a6:	4d33      	ldr	r5, [pc, #204]	@ (8004774 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80046a8:	f04f 0b00 	mov.w	fp, #0
 80046ac:	4e32      	ldr	r6, [pc, #200]	@ (8004778 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046ae:	682b      	ldr	r3, [r5, #0]
 80046b0:	4f32      	ldr	r7, [pc, #200]	@ (800477c <xTaskIncrementTick+0x120>)
 80046b2:	42a3      	cmp	r3, r4
 80046b4:	d911      	bls.n	80046da <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	2114      	movs	r1, #20
 80046ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046bc:	434a      	muls	r2, r1
 80046be:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80046c0:	2a02      	cmp	r2, #2
 80046c2:	bf28      	it	cs
 80046c4:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80046c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004780 <xTaskIncrementTick+0x124>)
 80046ca:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80046cc:	2a00      	cmp	r2, #0
}
 80046ce:	bf0c      	ite	eq
 80046d0:	4658      	moveq	r0, fp
 80046d2:	2001      	movne	r0, #1
 80046d4:	b003      	add	sp, #12
 80046d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046da:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8004768 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80046de:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8004788 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046e2:	f8d9 2000 	ldr.w	r2, [r9]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	b91a      	cbnz	r2, 80046f2 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ea:	f04f 32ff 	mov.w	r2, #4294967295
 80046ee:	602a      	str	r2, [r5, #0]
					break;
 80046f0:	e7e1      	b.n	80046b6 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f2:	f8d9 2000 	ldr.w	r2, [r9]
 80046f6:	68d2      	ldr	r2, [r2, #12]
 80046f8:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8004700:	428c      	cmp	r4, r1
 8004702:	d201      	bcs.n	8004708 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8004704:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004706:	e7d6      	b.n	80046b6 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004708:	f108 0304 	add.w	r3, r8, #4
 800470c:	4618      	mov	r0, r3
 800470e:	9301      	str	r3, [sp, #4]
 8004710:	f7fe ff7c 	bl	800360c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004714:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8004718:	b119      	cbz	r1, 8004722 <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800471a:	f108 0018 	add.w	r0, r8, #24
 800471e:	f7fe ff75 	bl	800360c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004722:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8004726:	f8da 1000 	ldr.w	r1, [sl]
 800472a:	4288      	cmp	r0, r1
 800472c:	d901      	bls.n	8004732 <xTaskIncrementTick+0xd6>
 800472e:	f8ca 0000 	str.w	r0, [sl]
 8004732:	2314      	movs	r3, #20
 8004734:	9901      	ldr	r1, [sp, #4]
 8004736:	fb03 6000 	mla	r0, r3, r0, r6
 800473a:	f7fe ff45 	bl	80035c8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800473e:	6838      	ldr	r0, [r7, #0]
 8004740:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8004744:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8004746:	4291      	cmp	r1, r2
 8004748:	bf28      	it	cs
 800474a:	f04f 0b01 	movcs.w	fp, #1
 800474e:	e7c8      	b.n	80046e2 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8004750:	4a0c      	ldr	r2, [pc, #48]	@ (8004784 <xTaskIncrementTick+0x128>)
BaseType_t xSwitchRequired = pdFALSE;
 8004752:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	3301      	adds	r3, #1
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	e7b4      	b.n	80046c8 <xTaskIncrementTick+0x6c>
 800475e:	bf00      	nop
 8004760:	2001e6fc 	.word	0x2001e6fc
 8004764:	2001e71c 	.word	0x2001e71c
 8004768:	2001e768 	.word	0x2001e768
 800476c:	2001e764 	.word	0x2001e764
 8004770:	2001e708 	.word	0x2001e708
 8004774:	2001e700 	.word	0x2001e700
 8004778:	2001e794 	.word	0x2001e794
 800477c:	2001ebf4 	.word	0x2001ebf4
 8004780:	2001e70c 	.word	0x2001e70c
 8004784:	2001e710 	.word	0x2001e710
 8004788:	2001e718 	.word	0x2001e718

0800478c <xTaskResumeAll>:
{
 800478c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8004790:	4c31      	ldr	r4, [pc, #196]	@ (8004858 <xTaskResumeAll+0xcc>)
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	b953      	cbnz	r3, 80047ac <xTaskResumeAll+0x20>
 8004796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479a:	b672      	cpsid	i
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	b662      	cpsie	i
 80047aa:	e7fe      	b.n	80047aa <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80047ac:	f000 fcf2 	bl	8005194 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b6:	6824      	ldr	r4, [r4, #0]
 80047b8:	b12c      	cbz	r4, 80047c6 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 80047ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80047bc:	f000 fd0e 	bl	80051dc <vPortExitCritical>
}
 80047c0:	4620      	mov	r0, r4
 80047c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047c6:	4b25      	ldr	r3, [pc, #148]	@ (800485c <xTaskResumeAll+0xd0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f5      	beq.n	80047ba <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ce:	4d24      	ldr	r5, [pc, #144]	@ (8004860 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 80047d0:	4e24      	ldr	r6, [pc, #144]	@ (8004864 <xTaskResumeAll+0xd8>)
 80047d2:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8004874 <xTaskResumeAll+0xe8>
 80047d6:	e01d      	b.n	8004814 <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d8:	68eb      	ldr	r3, [r5, #12]
 80047da:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047dc:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047de:	f104 0018 	add.w	r0, r4, #24
 80047e2:	f7fe ff13 	bl	800360c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e6:	4638      	mov	r0, r7
 80047e8:	f7fe ff10 	bl	800360c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80047ee:	6832      	ldr	r2, [r6, #0]
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d900      	bls.n	80047f6 <xTaskResumeAll+0x6a>
 80047f4:	6033      	str	r3, [r6, #0]
 80047f6:	2014      	movs	r0, #20
 80047f8:	4639      	mov	r1, r7
 80047fa:	fb00 8003 	mla	r0, r0, r3, r8
 80047fe:	f7fe fee3 	bl	80035c8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004802:	4b19      	ldr	r3, [pc, #100]	@ (8004868 <xTaskResumeAll+0xdc>)
 8004804:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800480e:	4b17      	ldr	r3, [pc, #92]	@ (800486c <xTaskResumeAll+0xe0>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1de      	bne.n	80047d8 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 800481a:	b10c      	cbz	r4, 8004820 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800481c:	f7ff fd8a 	bl	8004334 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004820:	4d13      	ldr	r5, [pc, #76]	@ (8004870 <xTaskResumeAll+0xe4>)
 8004822:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004824:	b144      	cbz	r4, 8004838 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8004826:	4e11      	ldr	r6, [pc, #68]	@ (800486c <xTaskResumeAll+0xe0>)
 8004828:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800482a:	f7ff ff17 	bl	800465c <xTaskIncrementTick>
 800482e:	b100      	cbz	r0, 8004832 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8004830:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004832:	3c01      	subs	r4, #1
 8004834:	d1f9      	bne.n	800482a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8004836:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004838:	4b0c      	ldr	r3, [pc, #48]	@ (800486c <xTaskResumeAll+0xe0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0bc      	beq.n	80047ba <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8004840:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004848:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004854:	2401      	movs	r4, #1
 8004856:	e7b1      	b.n	80047bc <xTaskResumeAll+0x30>
 8004858:	2001e6fc 	.word	0x2001e6fc
 800485c:	2001e720 	.word	0x2001e720
 8004860:	2001e750 	.word	0x2001e750
 8004864:	2001e718 	.word	0x2001e718
 8004868:	2001ebf4 	.word	0x2001ebf4
 800486c:	2001e70c 	.word	0x2001e70c
 8004870:	2001e710 	.word	0x2001e710
 8004874:	2001e794 	.word	0x2001e794

08004878 <vTaskDelay>:
	{
 8004878:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800487a:	b950      	cbnz	r0, 8004892 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800487c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004884:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
	}
 8004890:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004892:	4b0b      	ldr	r3, [pc, #44]	@ (80048c0 <vTaskDelay+0x48>)
 8004894:	6819      	ldr	r1, [r3, #0]
 8004896:	b151      	cbz	r1, 80048ae <vTaskDelay+0x36>
 8004898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489c:	b672      	cpsid	i
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	b662      	cpsie	i
 80048ac:	e7fe      	b.n	80048ac <vTaskDelay+0x34>
			vTaskSuspendAll();
 80048ae:	f7ff febf 	bl	8004630 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048b2:	f7ff fd07 	bl	80042c4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80048b6:	f7ff ff69 	bl	800478c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d0de      	beq.n	800487c <vTaskDelay+0x4>
 80048be:	e7e7      	b.n	8004890 <vTaskDelay+0x18>
 80048c0:	2001e6fc 	.word	0x2001e6fc

080048c4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <vTaskSwitchContext+0x6c>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004934 <vTaskSwitchContext+0x70>)
{
 80048ca:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048cc:	b112      	cbz	r2, 80048d4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80048ce:	2201      	movs	r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
}
 80048d2:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d4:	4d18      	ldr	r5, [pc, #96]	@ (8004938 <vTaskSwitchContext+0x74>)
 80048d6:	2614      	movs	r6, #20
		xYieldPending = pdFALSE;
 80048d8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048da:	4918      	ldr	r1, [pc, #96]	@ (800493c <vTaskSwitchContext+0x78>)
 80048dc:	682a      	ldr	r2, [r5, #0]
 80048de:	fb06 f302 	mul.w	r3, r6, r2
 80048e2:	58cc      	ldr	r4, [r1, r3]
 80048e4:	18c8      	adds	r0, r1, r3
 80048e6:	b1ac      	cbz	r4, 8004914 <vTaskSwitchContext+0x50>
 80048e8:	6844      	ldr	r4, [r0, #4]
 80048ea:	3308      	adds	r3, #8
 80048ec:	6864      	ldr	r4, [r4, #4]
 80048ee:	440b      	add	r3, r1
 80048f0:	429c      	cmp	r4, r3
 80048f2:	6044      	str	r4, [r0, #4]
 80048f4:	bf04      	itt	eq
 80048f6:	6863      	ldreq	r3, [r4, #4]
 80048f8:	6043      	streq	r3, [r0, #4]
 80048fa:	2314      	movs	r3, #20
 80048fc:	fb03 1102 	mla	r1, r3, r2, r1
 8004900:	684b      	ldr	r3, [r1, #4]
 8004902:	68d9      	ldr	r1, [r3, #12]
 8004904:	4b0e      	ldr	r3, [pc, #56]	@ (8004940 <vTaskSwitchContext+0x7c>)
 8004906:	6019      	str	r1, [r3, #0]
 8004908:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a0d      	ldr	r2, [pc, #52]	@ (8004944 <vTaskSwitchContext+0x80>)
 800490e:	3354      	adds	r3, #84	@ 0x54
 8004910:	6013      	str	r3, [r2, #0]
}
 8004912:	e7de      	b.n	80048d2 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004914:	b952      	cbnz	r2, 800492c <vTaskSwitchContext+0x68>
 8004916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491a:	b672      	cpsid	i
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	b662      	cpsie	i
 800492a:	e7fe      	b.n	800492a <vTaskSwitchContext+0x66>
 800492c:	3a01      	subs	r2, #1
 800492e:	e7d6      	b.n	80048de <vTaskSwitchContext+0x1a>
 8004930:	2001e6fc 	.word	0x2001e6fc
 8004934:	2001e70c 	.word	0x2001e70c
 8004938:	2001e718 	.word	0x2001e718
 800493c:	2001e794 	.word	0x2001e794
 8004940:	2001ebf4 	.word	0x2001ebf4
 8004944:	2000003c 	.word	0x2000003c

08004948 <vTaskPlaceOnEventList>:
{
 8004948:	b510      	push	{r4, lr}
 800494a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800494c:	b950      	cbnz	r0, 8004964 <vTaskPlaceOnEventList+0x1c>
 800494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004952:	b672      	cpsid	i
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	b662      	cpsie	i
 8004962:	e7fe      	b.n	8004962 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004964:	4b05      	ldr	r3, [pc, #20]	@ (800497c <vTaskPlaceOnEventList+0x34>)
 8004966:	6819      	ldr	r1, [r3, #0]
 8004968:	3118      	adds	r1, #24
 800496a:	f7fe fe38 	bl	80035de <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800496e:	4620      	mov	r0, r4
 8004970:	2101      	movs	r1, #1
}
 8004972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004976:	f7ff bca5 	b.w	80042c4 <prvAddCurrentTaskToDelayedList>
 800497a:	bf00      	nop
 800497c:	2001ebf4 	.word	0x2001ebf4

08004980 <vTaskPlaceOnEventListRestricted>:
	{
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	460d      	mov	r5, r1
 8004984:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8004986:	b950      	cbnz	r0, 800499e <vTaskPlaceOnEventListRestricted+0x1e>
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	b672      	cpsid	i
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	b662      	cpsie	i
 800499c:	e7fe      	b.n	800499c <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800499e:	4b07      	ldr	r3, [pc, #28]	@ (80049bc <vTaskPlaceOnEventListRestricted+0x3c>)
 80049a0:	6819      	ldr	r1, [r3, #0]
 80049a2:	3118      	adds	r1, #24
 80049a4:	f7fe fe10 	bl	80035c8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80049a8:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049aa:	4621      	mov	r1, r4
 80049ac:	bf0c      	ite	eq
 80049ae:	4628      	moveq	r0, r5
 80049b0:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80049b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049b8:	f7ff bc84 	b.w	80042c4 <prvAddCurrentTaskToDelayedList>
 80049bc:	2001ebf4 	.word	0x2001ebf4

080049c0 <xTaskRemoveFromEventList>:
{
 80049c0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c2:	68c3      	ldr	r3, [r0, #12]
 80049c4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80049c6:	b954      	cbnz	r4, 80049de <xTaskRemoveFromEventList+0x1e>
 80049c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049cc:	b672      	cpsid	i
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	b662      	cpsie	i
 80049dc:	e7fe      	b.n	80049dc <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049de:	f104 0518 	add.w	r5, r4, #24
 80049e2:	4628      	mov	r0, r5
 80049e4:	f7fe fe12 	bl	800360c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e8:	4b11      	ldr	r3, [pc, #68]	@ (8004a30 <xTaskRemoveFromEventList+0x70>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	b9d3      	cbnz	r3, 8004a24 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049ee:	1d25      	adds	r5, r4, #4
 80049f0:	4628      	mov	r0, r5
 80049f2:	f7fe fe0b 	bl	800360c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004a34 <xTaskRemoveFromEventList+0x74>)
 80049f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80049fa:	6811      	ldr	r1, [r2, #0]
 80049fc:	428b      	cmp	r3, r1
 80049fe:	d900      	bls.n	8004a02 <xTaskRemoveFromEventList+0x42>
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	2014      	movs	r0, #20
 8004a04:	4a0c      	ldr	r2, [pc, #48]	@ (8004a38 <xTaskRemoveFromEventList+0x78>)
 8004a06:	4629      	mov	r1, r5
 8004a08:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a0c:	f7fe fddc 	bl	80035c8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a10:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <xTaskRemoveFromEventList+0x7c>)
 8004a12:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d906      	bls.n	8004a2a <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	4b08      	ldr	r3, [pc, #32]	@ (8004a40 <xTaskRemoveFromEventList+0x80>)
 8004a20:	6018      	str	r0, [r3, #0]
}
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a24:	4629      	mov	r1, r5
 8004a26:	4807      	ldr	r0, [pc, #28]	@ (8004a44 <xTaskRemoveFromEventList+0x84>)
 8004a28:	e7f0      	b.n	8004a0c <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 8004a2a:	2000      	movs	r0, #0
	return xReturn;
 8004a2c:	e7f9      	b.n	8004a22 <xTaskRemoveFromEventList+0x62>
 8004a2e:	bf00      	nop
 8004a30:	2001e6fc 	.word	0x2001e6fc
 8004a34:	2001e718 	.word	0x2001e718
 8004a38:	2001e794 	.word	0x2001e794
 8004a3c:	2001ebf4 	.word	0x2001ebf4
 8004a40:	2001e70c 	.word	0x2001e70c
 8004a44:	2001e750 	.word	0x2001e750

08004a48 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a48:	4b03      	ldr	r3, [pc, #12]	@ (8004a58 <vTaskInternalSetTimeOutState+0x10>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a4e:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <vTaskInternalSetTimeOutState+0x14>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6043      	str	r3, [r0, #4]
}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	2001e708 	.word	0x2001e708
 8004a5c:	2001e71c 	.word	0x2001e71c

08004a60 <xTaskCheckForTimeOut>:
{
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004a64:	4605      	mov	r5, r0
 8004a66:	b950      	cbnz	r0, 8004a7e <xTaskCheckForTimeOut+0x1e>
 8004a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6c:	b672      	cpsid	i
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	b662      	cpsie	i
 8004a7c:	e7fe      	b.n	8004a7c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8004a7e:	b951      	cbnz	r1, 8004a96 <xTaskCheckForTimeOut+0x36>
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	b672      	cpsid	i
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	b662      	cpsie	i
 8004a94:	e7fe      	b.n	8004a94 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8004a96:	f000 fb7d 	bl	8005194 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad8 <xTaskCheckForTimeOut+0x78>)
 8004a9c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	d010      	beq.n	8004ac6 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004aa4:	480d      	ldr	r0, [pc, #52]	@ (8004adc <xTaskCheckForTimeOut+0x7c>)
 8004aa6:	682e      	ldr	r6, [r5, #0]
 8004aa8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004aaa:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004aac:	4286      	cmp	r6, r0
 8004aae:	d001      	beq.n	8004ab4 <xTaskCheckForTimeOut+0x54>
 8004ab0:	428a      	cmp	r2, r1
 8004ab2:	d90f      	bls.n	8004ad4 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ab4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ab6:	4283      	cmp	r3, r0
 8004ab8:	d90a      	bls.n	8004ad0 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8004aba:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004abc:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8004abe:	4413      	add	r3, r2
 8004ac0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ac2:	f7ff ffc1 	bl	8004a48 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8004ac6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004ac8:	f000 fb88 	bl	80051dc <vPortExitCritical>
}
 8004acc:	4620      	mov	r0, r4
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004ad4:	2401      	movs	r4, #1
 8004ad6:	e7f7      	b.n	8004ac8 <xTaskCheckForTimeOut+0x68>
 8004ad8:	2001e71c 	.word	0x2001e71c
 8004adc:	2001e708 	.word	0x2001e708

08004ae0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004ae0:	4b01      	ldr	r3, [pc, #4]	@ (8004ae8 <vTaskMissedYield+0x8>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
}
 8004ae6:	4770      	bx	lr
 8004ae8:	2001e70c 	.word	0x2001e70c

08004aec <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8004aec:	4b01      	ldr	r3, [pc, #4]	@ (8004af4 <xTaskGetCurrentTaskHandle+0x8>)
 8004aee:	6818      	ldr	r0, [r3, #0]
	}
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	2001ebf4 	.word	0x2001ebf4

08004af8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004af8:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <xTaskGetSchedulerState+0x18>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	b133      	cbz	r3, 8004b0c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004afe:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <xTaskGetSchedulerState+0x1c>)
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	fab0 f080 	clz	r0, r0
 8004b06:	0940      	lsrs	r0, r0, #5
 8004b08:	0040      	lsls	r0, r0, #1
 8004b0a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b0c:	2001      	movs	r0, #1
	}
 8004b0e:	4770      	bx	lr
 8004b10:	2001e714 	.word	0x2001e714
 8004b14:	2001e6fc 	.word	0x2001e6fc

08004b18 <xTaskPriorityInherit>:
	{
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	b338      	cbz	r0, 8004b6e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b1e:	4d1a      	ldr	r5, [pc, #104]	@ (8004b88 <xTaskPriorityInherit+0x70>)
 8004b20:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004b22:	682a      	ldr	r2, [r5, #0]
 8004b24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d226      	bcs.n	8004b78 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b2a:	6982      	ldr	r2, [r0, #24]
 8004b2c:	2a00      	cmp	r2, #0
 8004b2e:	db04      	blt.n	8004b3a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b30:	682a      	ldr	r2, [r5, #0]
 8004b32:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b34:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8004b38:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b3a:	2214      	movs	r2, #20
 8004b3c:	4e13      	ldr	r6, [pc, #76]	@ (8004b8c <xTaskPriorityInherit+0x74>)
 8004b3e:	fb02 6303 	mla	r3, r2, r3, r6
 8004b42:	6962      	ldr	r2, [r4, #20]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d113      	bne.n	8004b70 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b48:	1d27      	adds	r7, r4, #4
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	f7fe fd5e 	bl	800360c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b50:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b52:	4a0f      	ldr	r2, [pc, #60]	@ (8004b90 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b56:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b58:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b5a:	428b      	cmp	r3, r1
 8004b5c:	d900      	bls.n	8004b60 <xTaskPriorityInherit+0x48>
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	2014      	movs	r0, #20
 8004b62:	4639      	mov	r1, r7
 8004b64:	fb00 6003 	mla	r0, r0, r3, r6
 8004b68:	f7fe fd2e 	bl	80035c8 <vListInsertEnd>
				xReturn = pdTRUE;
 8004b6c:	2001      	movs	r0, #1
	}
 8004b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b76:	e7f9      	b.n	8004b6c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8004b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7e:	4298      	cmp	r0, r3
 8004b80:	bf2c      	ite	cs
 8004b82:	2000      	movcs	r0, #0
 8004b84:	2001      	movcc	r0, #1
 8004b86:	e7f2      	b.n	8004b6e <xTaskPriorityInherit+0x56>
 8004b88:	2001ebf4 	.word	0x2001ebf4
 8004b8c:	2001e794 	.word	0x2001e794
 8004b90:	2001e718 	.word	0x2001e718

08004b94 <xTaskPriorityDisinherit>:
	{
 8004b94:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8004b96:	b908      	cbnz	r0, 8004b9c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8004b98:	2000      	movs	r0, #0
	}
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c14 <xTaskPriorityDisinherit+0x80>)
 8004b9e:	681c      	ldr	r4, [r3, #0]
 8004ba0:	4284      	cmp	r4, r0
 8004ba2:	d00a      	beq.n	8004bba <xTaskPriorityDisinherit+0x26>
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	b672      	cpsid	i
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	b662      	cpsie	i
 8004bb8:	e7fe      	b.n	8004bb8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004bbc:	b953      	cbnz	r3, 8004bd4 <xTaskPriorityDisinherit+0x40>
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	b672      	cpsid	i
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	b662      	cpsie	i
 8004bd2:	e7fe      	b.n	8004bd2 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bd4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8004bd6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bd8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8004bda:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bdc:	4291      	cmp	r1, r2
 8004bde:	d0db      	beq.n	8004b98 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1d9      	bne.n	8004b98 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be4:	1d25      	adds	r5, r4, #4
 8004be6:	4628      	mov	r0, r5
 8004be8:	f7fe fd10 	bl	800360c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bf2:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bf6:	4a08      	ldr	r2, [pc, #32]	@ (8004c18 <xTaskPriorityDisinherit+0x84>)
 8004bf8:	6811      	ldr	r1, [r2, #0]
 8004bfa:	428b      	cmp	r3, r1
 8004bfc:	d900      	bls.n	8004c00 <xTaskPriorityDisinherit+0x6c>
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	4a06      	ldr	r2, [pc, #24]	@ (8004c1c <xTaskPriorityDisinherit+0x88>)
 8004c02:	2014      	movs	r0, #20
 8004c04:	4629      	mov	r1, r5
 8004c06:	fb00 2003 	mla	r0, r0, r3, r2
 8004c0a:	f7fe fcdd 	bl	80035c8 <vListInsertEnd>
					xReturn = pdTRUE;
 8004c0e:	2001      	movs	r0, #1
		return xReturn;
 8004c10:	e7c3      	b.n	8004b9a <xTaskPriorityDisinherit+0x6>
 8004c12:	bf00      	nop
 8004c14:	2001ebf4 	.word	0x2001ebf4
 8004c18:	2001e718 	.word	0x2001e718
 8004c1c:	2001e794 	.word	0x2001e794

08004c20 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8004c20:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8004c22:	4604      	mov	r4, r0
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d046      	beq.n	8004cb6 <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c28:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004c2a:	b952      	cbnz	r2, 8004c42 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8004c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c30:	b672      	cpsid	i
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	b662      	cpsie	i
 8004c40:	e7fe      	b.n	8004c40 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004c42:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8004c44:	4299      	cmp	r1, r3
 8004c46:	bf38      	it	cc
 8004c48:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004c4a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004c4c:	428b      	cmp	r3, r1
 8004c4e:	d032      	beq.n	8004cb6 <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004c50:	2a01      	cmp	r2, #1
 8004c52:	d130      	bne.n	8004cb6 <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 8004c54:	4a18      	ldr	r2, [pc, #96]	@ (8004cb8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	4282      	cmp	r2, r0
 8004c5a:	d10a      	bne.n	8004c72 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8004c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c60:	b672      	cpsid	i
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	b662      	cpsie	i
 8004c70:	e7fe      	b.n	8004c70 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c72:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c74:	4d11      	ldr	r5, [pc, #68]	@ (8004cbc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c76:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c78:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8004c7c:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c7e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c82:	bfa8      	it	ge
 8004c84:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c88:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c8a:	bfa8      	it	ge
 8004c8c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d111      	bne.n	8004cb6 <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c92:	1d06      	adds	r6, r0, #4
 8004c94:	4630      	mov	r0, r6
 8004c96:	f7fe fcb9 	bl	800360c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8004c9a:	4a09      	ldr	r2, [pc, #36]	@ (8004cc0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8004c9c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004c9e:	6811      	ldr	r1, [r2, #0]
 8004ca0:	428b      	cmp	r3, r1
 8004ca2:	d900      	bls.n	8004ca6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	2014      	movs	r0, #20
 8004ca8:	4631      	mov	r1, r6
 8004caa:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8004cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8004cb2:	f7fe bc89 	b.w	80035c8 <vListInsertEnd>
	}
 8004cb6:	bd70      	pop	{r4, r5, r6, pc}
 8004cb8:	2001ebf4 	.word	0x2001ebf4
 8004cbc:	2001e794 	.word	0x2001e794
 8004cc0:	2001e718 	.word	0x2001e718

08004cc4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004cc4:	4b04      	ldr	r3, [pc, #16]	@ (8004cd8 <pvTaskIncrementMutexHeldCount+0x14>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	b11a      	cbz	r2, 8004cd2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004cce:	3201      	adds	r2, #1
 8004cd0:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8004cd2:	6818      	ldr	r0, [r3, #0]
	}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	2001ebf4 	.word	0x2001ebf4

08004cdc <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8004cdc:	4291      	cmp	r1, r2
{
 8004cde:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ce0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ce2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8004ce4:	d80a      	bhi.n	8004cfc <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce6:	1ad2      	subs	r2, r2, r3
 8004ce8:	6983      	ldr	r3, [r0, #24]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d20d      	bcs.n	8004d0a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004cee:	1d01      	adds	r1, r0, #4
 8004cf0:	4b07      	ldr	r3, [pc, #28]	@ (8004d10 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	f7fe fc73 	bl	80035de <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8004cf8:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8004cfa:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d201      	bcs.n	8004d04 <prvInsertTimerInActiveList+0x28>
 8004d00:	4299      	cmp	r1, r3
 8004d02:	d202      	bcs.n	8004d0a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d04:	1d01      	adds	r1, r0, #4
 8004d06:	4b03      	ldr	r3, [pc, #12]	@ (8004d14 <prvInsertTimerInActiveList+0x38>)
 8004d08:	e7f3      	b.n	8004cf2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8004d0a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8004d0c:	e7f5      	b.n	8004cfa <prvInsertTimerInActiveList+0x1e>
 8004d0e:	bf00      	nop
 8004d10:	2001ecf4 	.word	0x2001ecf4
 8004d14:	2001ecf8 	.word	0x2001ecf8

08004d18 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8004d1a:	4c11      	ldr	r4, [pc, #68]	@ (8004d60 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8004d1c:	f000 fa3a 	bl	8005194 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8004d20:	6825      	ldr	r5, [r4, #0]
 8004d22:	b9bd      	cbnz	r5, 8004d54 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d24:	4f0f      	ldr	r7, [pc, #60]	@ (8004d64 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8004d26:	4e10      	ldr	r6, [pc, #64]	@ (8004d68 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f7fe fc3f 	bl	80035ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f7fe fc3c 	bl	80035ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d34:	4b0d      	ldr	r3, [pc, #52]	@ (8004d6c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d36:	4a0e      	ldr	r2, [pc, #56]	@ (8004d70 <prvCheckForValidListAndQueue+0x58>)
 8004d38:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8004d3a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d3c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <prvCheckForValidListAndQueue+0x5c>)
 8004d40:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d42:	4b0d      	ldr	r3, [pc, #52]	@ (8004d78 <prvCheckForValidListAndQueue+0x60>)
 8004d44:	9500      	str	r5, [sp, #0]
 8004d46:	f7fe fd89 	bl	800385c <xQueueGenericCreateStatic>
 8004d4a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d4c:	b110      	cbz	r0, 8004d54 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d4e:	490b      	ldr	r1, [pc, #44]	@ (8004d7c <prvCheckForValidListAndQueue+0x64>)
 8004d50:	f7ff f9d6 	bl	8004100 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8004d54:	b003      	add	sp, #12
 8004d56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8004d5a:	f000 ba3f 	b.w	80051dc <vPortExitCritical>
 8004d5e:	bf00      	nop
 8004d60:	2001ecf0 	.word	0x2001ecf0
 8004d64:	2001ed10 	.word	0x2001ed10
 8004d68:	2001ecfc 	.word	0x2001ecfc
 8004d6c:	2001ecf8 	.word	0x2001ecf8
 8004d70:	2001ec48 	.word	0x2001ec48
 8004d74:	2001ecf4 	.word	0x2001ecf4
 8004d78:	2001ebf8 	.word	0x2001ebf8
 8004d7c:	0800e55d 	.word	0x0800e55d

08004d80 <xTimerCreateTimerTask>:
{
 8004d80:	b510      	push	{r4, lr}
 8004d82:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8004d84:	f7ff ffc8 	bl	8004d18 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8004d88:	4b13      	ldr	r3, [pc, #76]	@ (8004dd8 <xTimerCreateTimerTask+0x58>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	b1b3      	cbz	r3, 8004dbc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d8e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d90:	aa07      	add	r2, sp, #28
 8004d92:	a906      	add	r1, sp, #24
 8004d94:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d96:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d9a:	f7fe fbfb 	bl	8003594 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d9e:	9b05      	ldr	r3, [sp, #20]
 8004da0:	9a07      	ldr	r2, [sp, #28]
 8004da2:	9302      	str	r3, [sp, #8]
 8004da4:	9b06      	ldr	r3, [sp, #24]
 8004da6:	490d      	ldr	r1, [pc, #52]	@ (8004ddc <xTimerCreateTimerTask+0x5c>)
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	2302      	movs	r3, #2
 8004dac:	480c      	ldr	r0, [pc, #48]	@ (8004de0 <xTimerCreateTimerTask+0x60>)
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	4623      	mov	r3, r4
 8004db2:	f7ff fb7d 	bl	80044b0 <xTaskCreateStatic>
 8004db6:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <xTimerCreateTimerTask+0x64>)
 8004db8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8004dba:	b950      	cbnz	r0, 8004dd2 <xTimerCreateTimerTask+0x52>
 8004dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc0:	b672      	cpsid	i
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	b662      	cpsie	i
	configASSERT( xReturn );
 8004dd0:	e7fe      	b.n	8004dd0 <xTimerCreateTimerTask+0x50>
}
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	b008      	add	sp, #32
 8004dd6:	bd10      	pop	{r4, pc}
 8004dd8:	2001ecf0 	.word	0x2001ecf0
 8004ddc:	0800e562 	.word	0x0800e562
 8004de0:	08004ee9 	.word	0x08004ee9
 8004de4:	2001ecec 	.word	0x2001ecec

08004de8 <xTimerGenericCommand>:
{
 8004de8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004dea:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8004dec:	4604      	mov	r4, r0
{
 8004dee:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8004df0:	b950      	cbnz	r0, 8004e08 <xTimerGenericCommand+0x20>
 8004df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df6:	b672      	cpsid	i
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	b662      	cpsie	i
 8004e06:	e7fe      	b.n	8004e06 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 8004e08:	4d0c      	ldr	r5, [pc, #48]	@ (8004e3c <xTimerGenericCommand+0x54>)
 8004e0a:	6828      	ldr	r0, [r5, #0]
 8004e0c:	b178      	cbz	r0, 8004e2e <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e0e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e10:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e12:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e16:	dc0c      	bgt.n	8004e32 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e18:	f7ff fe6e 	bl	8004af8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e1c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e1e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e20:	4669      	mov	r1, sp
 8004e22:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e24:	bf0c      	ite	eq
 8004e26:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e28:	461a      	movne	r2, r3
 8004e2a:	f7fe fd9c 	bl	8003966 <xQueueGenericSend>
}
 8004e2e:	b004      	add	sp, #16
 8004e30:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e32:	2300      	movs	r3, #0
 8004e34:	4669      	mov	r1, sp
 8004e36:	f7fe fea3 	bl	8003b80 <xQueueGenericSendFromISR>
 8004e3a:	e7f8      	b.n	8004e2e <xTimerGenericCommand+0x46>
 8004e3c:	2001ecf0 	.word	0x2001ecf0

08004e40 <prvSampleTimeNow>:
{
 8004e40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8004e44:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8004ee4 <prvSampleTimeNow+0xa4>
{
 8004e48:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8004e4a:	f7ff fbf9 	bl	8004640 <xTaskGetTickCount>
 8004e4e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8004e50:	f8d8 3000 	ldr.w	r3, [r8]
 8004e54:	4283      	cmp	r3, r0
 8004e56:	d909      	bls.n	8004e6c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e58:	4f20      	ldr	r7, [pc, #128]	@ (8004edc <prvSampleTimeNow+0x9c>)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	b96a      	cbnz	r2, 8004e7c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8004e60:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee0 <prvSampleTimeNow+0xa0>)
 8004e62:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8004e68:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8004e6a:	e000      	b.n	8004e6e <prvSampleTimeNow+0x2e>
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8004e70:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8004e72:	f8c8 5000 	str.w	r5, [r8]
}
 8004e76:	b002      	add	sp, #8
 8004e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e7c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e80:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e84:	f104 0a04 	add.w	sl, r4, #4
 8004e88:	4650      	mov	r0, sl
 8004e8a:	f7fe fbbf 	bl	800360c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e8e:	6a23      	ldr	r3, [r4, #32]
 8004e90:	4620      	mov	r0, r4
 8004e92:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e94:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004e98:	075b      	lsls	r3, r3, #29
 8004e9a:	d5de      	bpl.n	8004e5a <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e9c:	69a3      	ldr	r3, [r4, #24]
 8004e9e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8004ea0:	4599      	cmp	r9, r3
 8004ea2:	d206      	bcs.n	8004eb2 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ea4:	4651      	mov	r1, sl
 8004ea6:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ea8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004eaa:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eac:	f7fe fb97 	bl	80035de <vListInsert>
 8004eb0:	e7d3      	b.n	8004e5a <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	464a      	mov	r2, r9
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	f7ff ff94 	bl	8004de8 <xTimerGenericCommand>
				configASSERT( xResult );
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d1ca      	bne.n	8004e5a <prvSampleTimeNow+0x1a>
 8004ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec8:	b672      	cpsid	i
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	b662      	cpsie	i
 8004ed8:	e7fe      	b.n	8004ed8 <prvSampleTimeNow+0x98>
 8004eda:	bf00      	nop
 8004edc:	2001ecf8 	.word	0x2001ecf8
 8004ee0:	2001ecf4 	.word	0x2001ecf4
 8004ee4:	2001ece8 	.word	0x2001ece8

08004ee8 <prvTimerTask>:
{
 8004ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004eec:	4d71      	ldr	r5, [pc, #452]	@ (80050b4 <prvTimerTask+0x1cc>)
{
 8004eee:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ef0:	4e71      	ldr	r6, [pc, #452]	@ (80050b8 <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ef2:	682b      	ldr	r3, [r5, #0]
 8004ef4:	f8d3 8000 	ldr.w	r8, [r3]
 8004ef8:	f1b8 0f00 	cmp.w	r8, #0
 8004efc:	d037      	beq.n	8004f6e <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004efe:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f00:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f02:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8004f06:	f7ff fb93 	bl	8004630 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f0a:	a804      	add	r0, sp, #16
 8004f0c:	f7ff ff98 	bl	8004e40 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8004f10:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f12:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d16b      	bne.n	8004ff0 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f18:	2c00      	cmp	r4, #0
 8004f1a:	d14e      	bne.n	8004fba <prvTimerTask+0xd2>
 8004f1c:	4540      	cmp	r0, r8
 8004f1e:	d352      	bcc.n	8004fc6 <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8004f20:	f7ff fc34 	bl	800478c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f2a:	1d38      	adds	r0, r7, #4
 8004f2c:	f7fe fb6e 	bl	800360c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f34:	0758      	lsls	r0, r3, #29
 8004f36:	d51c      	bpl.n	8004f72 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f38:	69b9      	ldr	r1, [r7, #24]
 8004f3a:	4643      	mov	r3, r8
 8004f3c:	464a      	mov	r2, r9
 8004f3e:	4638      	mov	r0, r7
 8004f40:	4441      	add	r1, r8
 8004f42:	f7ff fecb 	bl	8004cdc <prvInsertTimerInActiveList>
 8004f46:	b1c0      	cbz	r0, 8004f7a <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f48:	4623      	mov	r3, r4
 8004f4a:	4642      	mov	r2, r8
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	4638      	mov	r0, r7
 8004f50:	9400      	str	r4, [sp, #0]
 8004f52:	f7ff ff49 	bl	8004de8 <xTimerGenericCommand>
			configASSERT( xResult );
 8004f56:	b980      	cbnz	r0, 8004f7a <prvTimerTask+0x92>
 8004f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5c:	b672      	cpsid	i
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	b662      	cpsie	i
 8004f6c:	e7fe      	b.n	8004f6c <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f6e:	2401      	movs	r4, #1
 8004f70:	e7c9      	b.n	8004f06 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f80:	2200      	movs	r2, #0
 8004f82:	a904      	add	r1, sp, #16
 8004f84:	6830      	ldr	r0, [r6, #0]
 8004f86:	f7fe feb8 	bl	8003cfa <xQueueReceive>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d0b1      	beq.n	8004ef2 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f8e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f90:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	db2f      	blt.n	8004ff6 <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f96:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f98:	6963      	ldr	r3, [r4, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d132      	bne.n	8005004 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f9e:	a803      	add	r0, sp, #12
 8004fa0:	f7ff ff4e 	bl	8004e40 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8004fa4:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fa6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8004fa8:	2b09      	cmp	r3, #9
 8004faa:	d8e9      	bhi.n	8004f80 <prvTimerTask+0x98>
 8004fac:	e8df f003 	tbb	[pc, r3]
 8004fb0:	592e2e2e 	.word	0x592e2e2e
 8004fb4:	2e2e7a60 	.word	0x2e2e7a60
 8004fb8:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004fba:	4b40      	ldr	r3, [pc, #256]	@ (80050bc <prvTimerTask+0x1d4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681c      	ldr	r4, [r3, #0]
 8004fc0:	fab4 f484 	clz	r4, r4
 8004fc4:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	eba8 0109 	sub.w	r1, r8, r9
 8004fcc:	6830      	ldr	r0, [r6, #0]
 8004fce:	f7ff f8d8 	bl	8004182 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004fd2:	f7ff fbdb 	bl	800478c <xTaskResumeAll>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d1d2      	bne.n	8004f80 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 8004fda:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fe2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	e7c7      	b.n	8004f80 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 8004ff0:	f7ff fbcc 	bl	800478c <xTaskResumeAll>
}
 8004ff4:	e7c4      	b.n	8004f80 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ff6:	9b05      	ldr	r3, [sp, #20]
 8004ff8:	9907      	ldr	r1, [sp, #28]
 8004ffa:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ffc:	9b04      	ldr	r3, [sp, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	dbbe      	blt.n	8004f80 <prvTimerTask+0x98>
 8005002:	e7c8      	b.n	8004f96 <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005004:	1d20      	adds	r0, r4, #4
 8005006:	f7fe fb01 	bl	800360c <uxListRemove>
 800500a:	e7c8      	b.n	8004f9e <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800500c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005010:	4620      	mov	r0, r4
 8005012:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800501c:	9b05      	ldr	r3, [sp, #20]
 800501e:	4419      	add	r1, r3
 8005020:	f7ff fe5c 	bl	8004cdc <prvInsertTimerInActiveList>
 8005024:	2800      	cmp	r0, #0
 8005026:	d0ab      	beq.n	8004f80 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005028:	6a23      	ldr	r3, [r4, #32]
 800502a:	4620      	mov	r0, r4
 800502c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800502e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005032:	0759      	lsls	r1, r3, #29
 8005034:	d5a4      	bpl.n	8004f80 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005036:	69a2      	ldr	r2, [r4, #24]
 8005038:	2300      	movs	r3, #0
 800503a:	9905      	ldr	r1, [sp, #20]
 800503c:	4620      	mov	r0, r4
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	440a      	add	r2, r1
 8005042:	4619      	mov	r1, r3
 8005044:	f7ff fed0 	bl	8004de8 <xTimerGenericCommand>
							configASSERT( xResult );
 8005048:	2800      	cmp	r0, #0
 800504a:	d199      	bne.n	8004f80 <prvTimerTask+0x98>
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	b672      	cpsid	i
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	b662      	cpsie	i
 8005060:	e7fe      	b.n	8005060 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005062:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800506e:	e787      	b.n	8004f80 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005070:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800507c:	9905      	ldr	r1, [sp, #20]
 800507e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005080:	b951      	cbnz	r1, 8005098 <prvTimerTask+0x1b0>
 8005082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005086:	b672      	cpsid	i
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	b662      	cpsie	i
 8005096:	e7fe      	b.n	8005096 <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005098:	4603      	mov	r3, r0
 800509a:	4401      	add	r1, r0
 800509c:	4620      	mov	r0, r4
 800509e:	f7ff fe1d 	bl	8004cdc <prvInsertTimerInActiveList>
					break;
 80050a2:	e76d      	b.n	8004f80 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050a4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80050a8:	079a      	lsls	r2, r3, #30
 80050aa:	d4dc      	bmi.n	8005066 <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 80050ac:	4620      	mov	r0, r4
 80050ae:	f000 fa59 	bl	8005564 <vPortFree>
 80050b2:	e765      	b.n	8004f80 <prvTimerTask+0x98>
 80050b4:	2001ecf8 	.word	0x2001ecf8
 80050b8:	2001ecf0 	.word	0x2001ecf0
 80050bc:	2001ecf4 	.word	0x2001ecf4

080050c0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050c0:	4808      	ldr	r0, [pc, #32]	@ (80050e4 <prvPortStartFirstTask+0x24>)
 80050c2:	6800      	ldr	r0, [r0, #0]
 80050c4:	6800      	ldr	r0, [r0, #0]
 80050c6:	f380 8808 	msr	MSP, r0
 80050ca:	f04f 0000 	mov.w	r0, #0
 80050ce:	f380 8814 	msr	CONTROL, r0
 80050d2:	b662      	cpsie	i
 80050d4:	b661      	cpsie	f
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	df00      	svc	0
 80050e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050e2:	0000      	.short	0x0000
 80050e4:	e000ed08 	.word	0xe000ed08

080050e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80050f8 <vPortEnableVFP+0x10>
 80050ec:	6801      	ldr	r1, [r0, #0]
 80050ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80050f2:	6001      	str	r1, [r0, #0]
 80050f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050f6:	0000      	.short	0x0000
 80050f8:	e000ed88 	.word	0xe000ed88

080050fc <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80050fc:	2300      	movs	r3, #0
{
 80050fe:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005100:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005102:	4b0f      	ldr	r3, [pc, #60]	@ (8005140 <prvTaskExitError+0x44>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3301      	adds	r3, #1
 8005108:	d00a      	beq.n	8005120 <prvTaskExitError+0x24>
 800510a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510e:	b672      	cpsid	i
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	b662      	cpsie	i
 800511e:	e7fe      	b.n	800511e <prvTaskExitError+0x22>
 8005120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005124:	b672      	cpsid	i
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	b662      	cpsie	i
	while( ulDummy == 0 )
 8005134:	9b01      	ldr	r3, [sp, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0fc      	beq.n	8005134 <prvTaskExitError+0x38>
}
 800513a:	b002      	add	sp, #8
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000024 	.word	0x20000024

08005144 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005144:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005148:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800514c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005150:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005152:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005154:	4b03      	ldr	r3, [pc, #12]	@ (8005164 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005156:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005158:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800515a:	f06f 0302 	mvn.w	r3, #2
 800515e:	6203      	str	r3, [r0, #32]
}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	080050fd 	.word	0x080050fd
	...

08005170 <SVC_Handler>:
	__asm volatile (
 8005170:	4b07      	ldr	r3, [pc, #28]	@ (8005190 <pxCurrentTCBConst2>)
 8005172:	6819      	ldr	r1, [r3, #0]
 8005174:	6808      	ldr	r0, [r1, #0]
 8005176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517a:	f380 8809 	msr	PSP, r0
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f380 8811 	msr	BASEPRI, r0
 800518a:	4770      	bx	lr
 800518c:	f3af 8000 	nop.w

08005190 <pxCurrentTCBConst2>:
 8005190:	2001ebf4 	.word	0x2001ebf4

08005194 <vPortEnterCritical>:
 8005194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005198:	b672      	cpsid	i
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	b662      	cpsie	i
	uxCriticalNesting++;
 80051a8:	4a0b      	ldr	r2, [pc, #44]	@ (80051d8 <vPortEnterCritical+0x44>)
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80051ae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80051b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80051b2:	d110      	bne.n	80051d6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80051b8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	b153      	cbz	r3, 80051d6 <vPortEnterCritical+0x42>
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	b672      	cpsid	i
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	b662      	cpsie	i
 80051d4:	e7fe      	b.n	80051d4 <vPortEnterCritical+0x40>
}
 80051d6:	4770      	bx	lr
 80051d8:	20000024 	.word	0x20000024

080051dc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80051dc:	4a09      	ldr	r2, [pc, #36]	@ (8005204 <vPortExitCritical+0x28>)
 80051de:	6813      	ldr	r3, [r2, #0]
 80051e0:	b953      	cbnz	r3, 80051f8 <vPortExitCritical+0x1c>
 80051e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e6:	b672      	cpsid	i
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	b662      	cpsie	i
 80051f6:	e7fe      	b.n	80051f6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80051f8:	3b01      	subs	r3, #1
 80051fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051fc:	b90b      	cbnz	r3, 8005202 <vPortExitCritical+0x26>
	__asm volatile
 80051fe:	f383 8811 	msr	BASEPRI, r3
}
 8005202:	4770      	bx	lr
 8005204:	20000024 	.word	0x20000024
	...

08005210 <PendSV_Handler>:
	__asm volatile
 8005210:	f3ef 8009 	mrs	r0, PSP
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	4b15      	ldr	r3, [pc, #84]	@ (8005270 <pxCurrentTCBConst>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	f01e 0f10 	tst.w	lr, #16
 8005220:	bf08      	it	eq
 8005222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522a:	6010      	str	r0, [r2, #0]
 800522c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005234:	b672      	cpsid	i
 8005236:	f380 8811 	msr	BASEPRI, r0
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	b662      	cpsie	i
 8005244:	f7ff fb3e 	bl	80048c4 <vTaskSwitchContext>
 8005248:	f04f 0000 	mov.w	r0, #0
 800524c:	f380 8811 	msr	BASEPRI, r0
 8005250:	bc09      	pop	{r0, r3}
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	6808      	ldr	r0, [r1, #0]
 8005256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525a:	f01e 0f10 	tst.w	lr, #16
 800525e:	bf08      	it	eq
 8005260:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005264:	f380 8809 	msr	PSP, r0
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop

08005270 <pxCurrentTCBConst>:
 8005270:	2001ebf4 	.word	0x2001ebf4

08005274 <SysTick_Handler>:
{
 8005274:	b508      	push	{r3, lr}
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	b672      	cpsid	i
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800528a:	f7ff f9e7 	bl	800465c <xTaskIncrementTick>
 800528e:	b128      	cbz	r0, 800529c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005290:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005298:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800529c:	2300      	movs	r3, #0
 800529e:	f383 8811 	msr	BASEPRI, r3
}
 80052a2:	bd08      	pop	{r3, pc}

080052a4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052a4:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80052a8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052ae:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052b0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052b2:	4b04      	ldr	r3, [pc, #16]	@ (80052c4 <vPortSetupTimerInterrupt+0x20>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80052ba:	3b01      	subs	r3, #1
 80052bc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052be:	2307      	movs	r3, #7
 80052c0:	6113      	str	r3, [r2, #16]
}
 80052c2:	4770      	bx	lr
 80052c4:	20000004 	.word	0x20000004

080052c8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052c8:	4b2c      	ldr	r3, [pc, #176]	@ (800537c <xPortStartScheduler+0xb4>)
{
 80052ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052cc:	781a      	ldrb	r2, [r3, #0]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052d2:	22ff      	movs	r2, #255	@ 0xff
 80052d4:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052d6:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052d8:	4a29      	ldr	r2, [pc, #164]	@ (8005380 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80052e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052e8:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052ea:	2307      	movs	r3, #7
 80052ec:	4a25      	ldr	r2, [pc, #148]	@ (8005384 <xPortStartScheduler+0xbc>)
 80052ee:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052f0:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80052f4:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052f6:	0609      	lsls	r1, r1, #24
 80052f8:	d40c      	bmi.n	8005314 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d013      	beq.n	8005326 <xPortStartScheduler+0x5e>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	b672      	cpsid	i
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	b662      	cpsie	i
 8005312:	e7fe      	b.n	8005312 <xPortStartScheduler+0x4a>
			ulMaxPRIGROUPValue--;
 8005314:	3b01      	subs	r3, #1
 8005316:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005318:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f88d 3003 	strb.w	r3, [sp, #3]
 8005324:	e7e4      	b.n	80052f0 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005326:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800532a:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800532e:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005330:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005332:	9b01      	ldr	r3, [sp, #4]
 8005334:	4a11      	ldr	r2, [pc, #68]	@ (800537c <xPortStartScheduler+0xb4>)
 8005336:	b2db      	uxtb	r3, r3
 8005338:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800533a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800533e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005342:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005346:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800534a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800534e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8005352:	f7ff ffa7 	bl	80052a4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005356:	4b0c      	ldr	r3, [pc, #48]	@ (8005388 <xPortStartScheduler+0xc0>)
 8005358:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800535a:	f7ff fec5 	bl	80050e8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800535e:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8005362:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005366:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800536a:	f7ff fea9 	bl	80050c0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800536e:	f7ff faa9 	bl	80048c4 <vTaskSwitchContext>
}
 8005372:	4628      	mov	r0, r5
	prvTaskExitError();
 8005374:	f7ff fec2 	bl	80050fc <prvTaskExitError>
}
 8005378:	b003      	add	sp, #12
 800537a:	bd30      	pop	{r4, r5, pc}
 800537c:	e000e400 	.word	0xe000e400
 8005380:	2001ed28 	.word	0x2001ed28
 8005384:	2001ed24 	.word	0x2001ed24
 8005388:	20000024 	.word	0x20000024

0800538c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800538c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005390:	2b0f      	cmp	r3, #15
 8005392:	d910      	bls.n	80053b6 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005394:	4a13      	ldr	r2, [pc, #76]	@ (80053e4 <vPortValidateInterruptPriority+0x58>)
 8005396:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005398:	4a13      	ldr	r2, [pc, #76]	@ (80053e8 <vPortValidateInterruptPriority+0x5c>)
 800539a:	7812      	ldrb	r2, [r2, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d90a      	bls.n	80053b6 <vPortValidateInterruptPriority+0x2a>
 80053a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a4:	b672      	cpsid	i
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	b662      	cpsie	i
 80053b4:	e7fe      	b.n	80053b4 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80053ba:	4a0c      	ldr	r2, [pc, #48]	@ (80053ec <vPortValidateInterruptPriority+0x60>)
 80053bc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d90a      	bls.n	80053e0 <vPortValidateInterruptPriority+0x54>
 80053ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ce:	b672      	cpsid	i
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	b662      	cpsie	i
 80053de:	e7fe      	b.n	80053de <vPortValidateInterruptPriority+0x52>
	}
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	e000e3f0 	.word	0xe000e3f0
 80053e8:	2001ed28 	.word	0x2001ed28
 80053ec:	2001ed24 	.word	0x2001ed24

080053f0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053f0:	4b10      	ldr	r3, [pc, #64]	@ (8005434 <prvInsertBlockIntoFreeList+0x44>)
{
 80053f2:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053f4:	461a      	mov	r2, r3
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4283      	cmp	r3, r0
 80053fa:	d3fb      	bcc.n	80053f4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053fc:	6854      	ldr	r4, [r2, #4]
 80053fe:	1911      	adds	r1, r2, r4
 8005400:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005402:	bf01      	itttt	eq
 8005404:	6841      	ldreq	r1, [r0, #4]
 8005406:	4610      	moveq	r0, r2
 8005408:	1909      	addeq	r1, r1, r4
 800540a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800540c:	6844      	ldr	r4, [r0, #4]
 800540e:	1901      	adds	r1, r0, r4
 8005410:	428b      	cmp	r3, r1
 8005412:	d10c      	bne.n	800542e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005414:	4908      	ldr	r1, [pc, #32]	@ (8005438 <prvInsertBlockIntoFreeList+0x48>)
 8005416:	6809      	ldr	r1, [r1, #0]
 8005418:	428b      	cmp	r3, r1
 800541a:	d003      	beq.n	8005424 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800541c:	6859      	ldr	r1, [r3, #4]
 800541e:	4421      	add	r1, r4
 8005420:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005422:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005424:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005426:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005428:	bf18      	it	ne
 800542a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800542c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800542e:	4619      	mov	r1, r3
 8005430:	e7f8      	b.n	8005424 <prvInsertBlockIntoFreeList+0x34>
 8005432:	bf00      	nop
 8005434:	2001ed3c 	.word	0x2001ed3c
 8005438:	2001ed38 	.word	0x2001ed38

0800543c <pvPortMalloc>:
{
 800543c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005440:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005442:	f7ff f8f5 	bl	8004630 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005446:	4940      	ldr	r1, [pc, #256]	@ (8005548 <pvPortMalloc+0x10c>)
 8005448:	4d40      	ldr	r5, [pc, #256]	@ (800554c <pvPortMalloc+0x110>)
 800544a:	680b      	ldr	r3, [r1, #0]
 800544c:	b9fb      	cbnz	r3, 800548e <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 800544e:	4a40      	ldr	r2, [pc, #256]	@ (8005550 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8005450:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005452:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005454:	4e3f      	ldr	r6, [pc, #252]	@ (8005554 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005456:	bf1a      	itte	ne
 8005458:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800545a:	4b3f      	ldrne	r3, [pc, #252]	@ (8005558 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800545c:	f64f 73ff 	movweq	r3, #65535	@ 0xffff
	xStart.xBlockSize = ( size_t ) 0;
 8005460:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005462:	bf1c      	itt	ne
 8005464:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005468:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800546a:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800546c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800546e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005470:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8005474:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005478:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800547a:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800547c:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005480:	4b36      	ldr	r3, [pc, #216]	@ (800555c <pvPortMalloc+0x120>)
 8005482:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005484:	4b36      	ldr	r3, [pc, #216]	@ (8005560 <pvPortMalloc+0x124>)
 8005486:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005488:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800548c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800548e:	682e      	ldr	r6, [r5, #0]
 8005490:	4226      	tst	r6, r4
 8005492:	d154      	bne.n	800553e <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 8005494:	2c00      	cmp	r4, #0
 8005496:	d043      	beq.n	8005520 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8005498:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800549c:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800549e:	bf1c      	itt	ne
 80054a0:	f023 0307 	bicne.w	r3, r3, #7
 80054a4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d049      	beq.n	800553e <pvPortMalloc+0x102>
 80054aa:	4f2d      	ldr	r7, [pc, #180]	@ (8005560 <pvPortMalloc+0x124>)
 80054ac:	683c      	ldr	r4, [r7, #0]
 80054ae:	429c      	cmp	r4, r3
 80054b0:	d345      	bcc.n	800553e <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 80054b2:	4a28      	ldr	r2, [pc, #160]	@ (8005554 <pvPortMalloc+0x118>)
 80054b4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054b6:	6868      	ldr	r0, [r5, #4]
 80054b8:	4298      	cmp	r0, r3
 80054ba:	d204      	bcs.n	80054c6 <pvPortMalloc+0x8a>
 80054bc:	f8d5 c000 	ldr.w	ip, [r5]
 80054c0:	f1bc 0f00 	cmp.w	ip, #0
 80054c4:	d117      	bne.n	80054f6 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80054c6:	6809      	ldr	r1, [r1, #0]
 80054c8:	42a9      	cmp	r1, r5
 80054ca:	d038      	beq.n	800553e <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054cc:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054ce:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054d2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054d4:	1ac2      	subs	r2, r0, r3
 80054d6:	2a10      	cmp	r2, #16
 80054d8:	d914      	bls.n	8005504 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054da:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054dc:	0741      	lsls	r1, r0, #29
 80054de:	d00d      	beq.n	80054fc <pvPortMalloc+0xc0>
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	b672      	cpsid	i
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	b662      	cpsie	i
 80054f4:	e7fe      	b.n	80054f4 <pvPortMalloc+0xb8>
 80054f6:	462a      	mov	r2, r5
 80054f8:	4665      	mov	r5, ip
 80054fa:	e7dc      	b.n	80054b6 <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054fc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054fe:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005500:	f7ff ff76 	bl	80053f0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005504:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005506:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005508:	4914      	ldr	r1, [pc, #80]	@ (800555c <pvPortMalloc+0x120>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800550a:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800550c:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800550e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005510:	603c      	str	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005512:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005514:	606e      	str	r6, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005516:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005518:	bf38      	it	cc
 800551a:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800551c:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8005520:	f7ff f934 	bl	800478c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005524:	0763      	lsls	r3, r4, #29
 8005526:	d00c      	beq.n	8005542 <pvPortMalloc+0x106>
 8005528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552c:	b672      	cpsid	i
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	b662      	cpsie	i
 800553c:	e7fe      	b.n	800553c <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800553e:	2400      	movs	r4, #0
 8005540:	e7ee      	b.n	8005520 <pvPortMalloc+0xe4>
}
 8005542:	4620      	mov	r0, r4
 8005544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005548:	2001ed38 	.word	0x2001ed38
 800554c:	2001ed2c 	.word	0x2001ed2c
 8005550:	2001ed44 	.word	0x2001ed44
 8005554:	2001ed3c 	.word	0x2001ed3c
 8005558:	2002ed43 	.word	0x2002ed43
 800555c:	2001ed30 	.word	0x2001ed30
 8005560:	2001ed34 	.word	0x2001ed34

08005564 <vPortFree>:
{
 8005564:	b510      	push	{r4, lr}
	if( pv != NULL )
 8005566:	4604      	mov	r4, r0
 8005568:	2800      	cmp	r0, #0
 800556a:	d032      	beq.n	80055d2 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800556c:	4a19      	ldr	r2, [pc, #100]	@ (80055d4 <vPortFree+0x70>)
 800556e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005572:	6812      	ldr	r2, [r2, #0]
 8005574:	4213      	tst	r3, r2
 8005576:	d10a      	bne.n	800558e <vPortFree+0x2a>
 8005578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557c:	b672      	cpsid	i
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	b662      	cpsie	i
 800558c:	e7fe      	b.n	800558c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800558e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005592:	b151      	cbz	r1, 80055aa <vPortFree+0x46>
 8005594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005598:	b672      	cpsid	i
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	b662      	cpsie	i
 80055a8:	e7fe      	b.n	80055a8 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055aa:	ea23 0302 	bic.w	r3, r3, r2
 80055ae:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80055b2:	f7ff f83d 	bl	8004630 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055b6:	4a08      	ldr	r2, [pc, #32]	@ (80055d8 <vPortFree+0x74>)
 80055b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055bc:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055c0:	6811      	ldr	r1, [r2, #0]
 80055c2:	440b      	add	r3, r1
 80055c4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055c6:	f7ff ff13 	bl	80053f0 <prvInsertBlockIntoFreeList>
}
 80055ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80055ce:	f7ff b8dd 	b.w	800478c <xTaskResumeAll>
}
 80055d2:	bd10      	pop	{r4, pc}
 80055d4:	2001ed2c 	.word	0x2001ed2c
 80055d8:	2001ed34 	.word	0x2001ed34

080055dc <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80055dc:	680a      	ldr	r2, [r1, #0]
{
 80055de:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80055e0:	320c      	adds	r2, #12
{
 80055e2:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80055e4:	f001 fba4 	bl	8006d30 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80055e8:	b908      	cbnz	r0, 80055ee <netconn_apimsg+0x12>
    return apimsg->err;
 80055ea:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 80055ee:	bd10      	pop	{r4, pc}

080055f0 <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80055f0:	b508      	push	{r3, lr}
 80055f2:	460b      	mov	r3, r1
 80055f4:	4611      	mov	r1, r2
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80055f6:	b158      	cbz	r0, 8005610 <netconn_tcp_recvd_msg+0x20>
 80055f8:	7802      	ldrb	r2, [r0, #0]
 80055fa:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80055fe:	2a10      	cmp	r2, #16
 8005600:	d106      	bne.n	8005610 <netconn_tcp_recvd_msg+0x20>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8005602:	6008      	str	r0, [r1, #0]
  msg->msg.r.len = len;
 8005604:	608b      	str	r3, [r1, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8005606:	4807      	ldr	r0, [pc, #28]	@ (8005624 <netconn_tcp_recvd_msg+0x34>)
}
 8005608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800560c:	f7ff bfe6 	b.w	80055dc <netconn_apimsg>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005610:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <netconn_tcp_recvd_msg+0x38>)
 8005612:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8005616:	4905      	ldr	r1, [pc, #20]	@ (800562c <netconn_tcp_recvd_msg+0x3c>)
 8005618:	4805      	ldr	r0, [pc, #20]	@ (8005630 <netconn_tcp_recvd_msg+0x40>)
 800561a:	f007 ff97 	bl	800d54c <iprintf>
}
 800561e:	f06f 000f 	mvn.w	r0, #15
 8005622:	bd08      	pop	{r3, pc}
 8005624:	08006921 	.word	0x08006921
 8005628:	0800e56a 	.word	0x0800e56a
 800562c:	0800e59c 	.word	0x0800e59c
 8005630:	0800e45a 	.word	0x0800e45a

08005634 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8005634:	b500      	push	{lr}
 8005636:	b089      	sub	sp, #36	@ 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005638:	b958      	cbnz	r0, 8005652 <netconn_close_shutdown+0x1e>
 800563a:	4b0b      	ldr	r3, [pc, #44]	@ (8005668 <netconn_close_shutdown+0x34>)
 800563c:	f240 4247 	movw	r2, #1095	@ 0x447
 8005640:	490a      	ldr	r1, [pc, #40]	@ (800566c <netconn_close_shutdown+0x38>)
 8005642:	480b      	ldr	r0, [pc, #44]	@ (8005670 <netconn_close_shutdown+0x3c>)
 8005644:	f007 ff82 	bl	800d54c <iprintf>
 8005648:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 800564c:	b009      	add	sp, #36	@ 0x24
 800564e:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005652:	2329      	movs	r3, #41	@ 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8005654:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8005656:	f88d 1008 	strb.w	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800565a:	4669      	mov	r1, sp
 800565c:	4805      	ldr	r0, [pc, #20]	@ (8005674 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800565e:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005662:	f7ff ffbb 	bl	80055dc <netconn_apimsg>
  return err;
 8005666:	e7f1      	b.n	800564c <netconn_close_shutdown+0x18>
 8005668:	0800e56a 	.word	0x0800e56a
 800566c:	0800e5c0 	.word	0x0800e5c0
 8005670:	0800e45a 	.word	0x0800e45a
 8005674:	08006a25 	.word	0x08006a25

08005678 <netconn_new_with_proto_and_callback>:
{
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	460d      	mov	r5, r1
 800567c:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 800567e:	4611      	mov	r1, r2
 8005680:	f000 ff0c 	bl	800649c <netconn_alloc>
  if (conn != NULL) {
 8005684:	4604      	mov	r4, r0
 8005686:	2800      	cmp	r0, #0
 8005688:	d03d      	beq.n	8005706 <netconn_new_with_proto_and_callback+0x8e>
    API_MSG_VAR_REF(msg).conn = conn;
 800568a:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800568c:	4669      	mov	r1, sp
 800568e:	4820      	ldr	r0, [pc, #128]	@ (8005710 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8005690:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005694:	f7ff ffa2 	bl	80055dc <netconn_apimsg>
    if (err != ERR_OK) {
 8005698:	2800      	cmp	r0, #0
 800569a:	d035      	beq.n	8005708 <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800569c:	6863      	ldr	r3, [r4, #4]
 800569e:	b12b      	cbz	r3, 80056ac <netconn_new_with_proto_and_callback+0x34>
 80056a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005714 <netconn_new_with_proto_and_callback+0x9c>)
 80056a2:	22a3      	movs	r2, #163	@ 0xa3
 80056a4:	491c      	ldr	r1, [pc, #112]	@ (8005718 <netconn_new_with_proto_and_callback+0xa0>)
 80056a6:	481d      	ldr	r0, [pc, #116]	@ (800571c <netconn_new_with_proto_and_callback+0xa4>)
 80056a8:	f007 ff50 	bl	800d54c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80056ac:	f104 0510 	add.w	r5, r4, #16
 80056b0:	4628      	mov	r0, r5
 80056b2:	f007 fdc0 	bl	800d236 <sys_mbox_valid>
 80056b6:	b928      	cbnz	r0, 80056c4 <netconn_new_with_proto_and_callback+0x4c>
 80056b8:	4b16      	ldr	r3, [pc, #88]	@ (8005714 <netconn_new_with_proto_and_callback+0x9c>)
 80056ba:	22a4      	movs	r2, #164	@ 0xa4
 80056bc:	4918      	ldr	r1, [pc, #96]	@ (8005720 <netconn_new_with_proto_and_callback+0xa8>)
 80056be:	4817      	ldr	r0, [pc, #92]	@ (800571c <netconn_new_with_proto_and_callback+0xa4>)
 80056c0:	f007 ff44 	bl	800d54c <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80056c4:	f104 0014 	add.w	r0, r4, #20
 80056c8:	f007 fdb5 	bl	800d236 <sys_mbox_valid>
 80056cc:	b128      	cbz	r0, 80056da <netconn_new_with_proto_and_callback+0x62>
 80056ce:	4b11      	ldr	r3, [pc, #68]	@ (8005714 <netconn_new_with_proto_and_callback+0x9c>)
 80056d0:	22a6      	movs	r2, #166	@ 0xa6
 80056d2:	4914      	ldr	r1, [pc, #80]	@ (8005724 <netconn_new_with_proto_and_callback+0xac>)
 80056d4:	4811      	ldr	r0, [pc, #68]	@ (800571c <netconn_new_with_proto_and_callback+0xa4>)
 80056d6:	f007 ff39 	bl	800d54c <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80056da:	f104 060c 	add.w	r6, r4, #12
 80056de:	4630      	mov	r0, r6
 80056e0:	f007 fde6 	bl	800d2b0 <sys_sem_valid>
 80056e4:	b928      	cbnz	r0, 80056f2 <netconn_new_with_proto_and_callback+0x7a>
 80056e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005714 <netconn_new_with_proto_and_callback+0x9c>)
 80056e8:	22a9      	movs	r2, #169	@ 0xa9
 80056ea:	490f      	ldr	r1, [pc, #60]	@ (8005728 <netconn_new_with_proto_and_callback+0xb0>)
 80056ec:	480b      	ldr	r0, [pc, #44]	@ (800571c <netconn_new_with_proto_and_callback+0xa4>)
 80056ee:	f007 ff2d 	bl	800d54c <iprintf>
      sys_sem_free(&conn->op_completed);
 80056f2:	4630      	mov	r0, r6
 80056f4:	f007 fdd9 	bl	800d2aa <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 80056f8:	4628      	mov	r0, r5
 80056fa:	f007 fd5a 	bl	800d1b2 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80056fe:	4621      	mov	r1, r4
 8005700:	2007      	movs	r0, #7
 8005702:	f001 fe91 	bl	8007428 <memp_free>
      return NULL;
 8005706:	2400      	movs	r4, #0
}
 8005708:	4620      	mov	r0, r4
 800570a:	b008      	add	sp, #32
 800570c:	bd70      	pop	{r4, r5, r6, pc}
 800570e:	bf00      	nop
 8005710:	0800643d 	.word	0x0800643d
 8005714:	0800e56a 	.word	0x0800e56a
 8005718:	0800e5dc 	.word	0x0800e5dc
 800571c:	0800e45a 	.word	0x0800e45a
 8005720:	0800e5fd 	.word	0x0800e5fd
 8005724:	0800e612 	.word	0x0800e612
 8005728:	0800e633 	.word	0x0800e633

0800572c <netconn_prepare_delete>:
{
 800572c:	b500      	push	{lr}
 800572e:	b089      	sub	sp, #36	@ 0x24
  if (conn == NULL) {
 8005730:	b138      	cbz	r0, 8005742 <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005732:	2329      	movs	r3, #41	@ 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8005734:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005736:	4669      	mov	r1, sp
 8005738:	4803      	ldr	r0, [pc, #12]	@ (8005748 <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800573a:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800573e:	f7ff ff4d 	bl	80055dc <netconn_apimsg>
}
 8005742:	b009      	add	sp, #36	@ 0x24
 8005744:	f85d fb04 	ldr.w	pc, [sp], #4
 8005748:	08006729 	.word	0x08006729

0800574c <netconn_delete>:
{
 800574c:	b510      	push	{r4, lr}
  if (conn == NULL) {
 800574e:	4604      	mov	r4, r0
 8005750:	b908      	cbnz	r0, 8005756 <netconn_delete+0xa>
    return ERR_OK;
 8005752:	2000      	movs	r0, #0
}
 8005754:	bd10      	pop	{r4, pc}
    err = netconn_prepare_delete(conn);
 8005756:	f7ff ffe9 	bl	800572c <netconn_prepare_delete>
  if (err == ERR_OK) {
 800575a:	2800      	cmp	r0, #0
 800575c:	d1fa      	bne.n	8005754 <netconn_delete+0x8>
    netconn_free(conn);
 800575e:	4620      	mov	r0, r4
 8005760:	f000 fee2 	bl	8006528 <netconn_free>
 8005764:	e7f5      	b.n	8005752 <netconn_delete+0x6>
	...

08005768 <netconn_bind>:
{
 8005768:	b500      	push	{lr}
 800576a:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800576c:	b958      	cbnz	r0, 8005786 <netconn_bind+0x1e>
 800576e:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <netconn_bind+0x38>)
 8005770:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8005774:	490b      	ldr	r1, [pc, #44]	@ (80057a4 <netconn_bind+0x3c>)
 8005776:	480c      	ldr	r0, [pc, #48]	@ (80057a8 <netconn_bind+0x40>)
 8005778:	f007 fee8 	bl	800d54c <iprintf>
 800577c:	f06f 000f 	mvn.w	r0, #15
}
 8005780:	b009      	add	sp, #36	@ 0x24
 8005782:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8005786:	4b09      	ldr	r3, [pc, #36]	@ (80057ac <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8005788:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 800578a:	2900      	cmp	r1, #0
 800578c:	bf08      	it	eq
 800578e:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005790:	4807      	ldr	r0, [pc, #28]	@ (80057b0 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8005792:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8005796:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005798:	4669      	mov	r1, sp
 800579a:	f7ff ff1f 	bl	80055dc <netconn_apimsg>
  return err;
 800579e:	e7ef      	b.n	8005780 <netconn_bind+0x18>
 80057a0:	0800e56a 	.word	0x0800e56a
 80057a4:	0800e64c 	.word	0x0800e64c
 80057a8:	0800e45a 	.word	0x0800e45a
 80057ac:	080109a0 	.word	0x080109a0
 80057b0:	08006835 	.word	0x08006835

080057b4 <netconn_listen_with_backlog>:
{
 80057b4:	b500      	push	{lr}
 80057b6:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80057b8:	b958      	cbnz	r0, 80057d2 <netconn_listen_with_backlog+0x1e>
 80057ba:	4b09      	ldr	r3, [pc, #36]	@ (80057e0 <netconn_listen_with_backlog+0x2c>)
 80057bc:	f240 12bb 	movw	r2, #443	@ 0x1bb
 80057c0:	4908      	ldr	r1, [pc, #32]	@ (80057e4 <netconn_listen_with_backlog+0x30>)
 80057c2:	4809      	ldr	r0, [pc, #36]	@ (80057e8 <netconn_listen_with_backlog+0x34>)
 80057c4:	f007 fec2 	bl	800d54c <iprintf>
 80057c8:	f06f 000f 	mvn.w	r0, #15
}
 80057cc:	b009      	add	sp, #36	@ 0x24
 80057ce:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 80057d2:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80057d4:	4669      	mov	r1, sp
 80057d6:	4805      	ldr	r0, [pc, #20]	@ (80057ec <netconn_listen_with_backlog+0x38>)
 80057d8:	f7ff ff00 	bl	80055dc <netconn_apimsg>
  return err;
 80057dc:	e7f6      	b.n	80057cc <netconn_listen_with_backlog+0x18>
 80057de:	bf00      	nop
 80057e0:	0800e56a 	.word	0x0800e56a
 80057e4:	0800e667 	.word	0x0800e667
 80057e8:	0800e45a 	.word	0x0800e45a
 80057ec:	08006869 	.word	0x08006869

080057f0 <netconn_write_vectors_partly>:
{
 80057f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f4:	b088      	sub	sp, #32
 80057f6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80057fa:	b958      	cbnz	r0, 8005814 <netconn_write_vectors_partly+0x24>
 80057fc:	4b2f      	ldr	r3, [pc, #188]	@ (80058bc <netconn_write_vectors_partly+0xcc>)
 80057fe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8005802:	492f      	ldr	r1, [pc, #188]	@ (80058c0 <netconn_write_vectors_partly+0xd0>)
 8005804:	482f      	ldr	r0, [pc, #188]	@ (80058c4 <netconn_write_vectors_partly+0xd4>)
 8005806:	f007 fea1 	bl	800d54c <iprintf>
 800580a:	f06f 000f 	mvn.w	r0, #15
}
 800580e:	b008      	add	sp, #32
 8005810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8005814:	7804      	ldrb	r4, [r0, #0]
 8005816:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
 800581a:	2c10      	cmp	r4, #16
 800581c:	d009      	beq.n	8005832 <netconn_write_vectors_partly+0x42>
 800581e:	4b27      	ldr	r3, [pc, #156]	@ (80058bc <netconn_write_vectors_partly+0xcc>)
 8005820:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8005824:	4928      	ldr	r1, [pc, #160]	@ (80058c8 <netconn_write_vectors_partly+0xd8>)
 8005826:	4827      	ldr	r0, [pc, #156]	@ (80058c4 <netconn_write_vectors_partly+0xd4>)
 8005828:	f007 fe90 	bl	800d54c <iprintf>
 800582c:	f06f 0005 	mvn.w	r0, #5
 8005830:	e7ed      	b.n	800580e <netconn_write_vectors_partly+0x1e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005832:	7f05      	ldrb	r5, [r0, #28]
 8005834:	f003 0404 	and.w	r4, r3, #4
 8005838:	f005 0502 	and.w	r5, r5, #2
 800583c:	4325      	orrs	r5, r4
 800583e:	d003      	beq.n	8005848 <netconn_write_vectors_partly+0x58>
  if (dontblock && !bytes_written) {
 8005840:	f1b8 0f00 	cmp.w	r8, #0
 8005844:	d0f2      	beq.n	800582c <netconn_write_vectors_partly+0x3c>
 8005846:	2501      	movs	r5, #1
 8005848:	2600      	movs	r6, #0
    size += vectors[i].len;
 800584a:	f101 0c04 	add.w	ip, r1, #4
 800584e:	4637      	mov	r7, r6
 8005850:	e004      	b.n	800585c <netconn_write_vectors_partly+0x6c>
 8005852:	f85c 4036 	ldr.w	r4, [ip, r6, lsl #3]
    if (size < vectors[i].len) {
 8005856:	19e7      	adds	r7, r4, r7
 8005858:	d2e8      	bcs.n	800582c <netconn_write_vectors_partly+0x3c>
  for (i = 0; i < vectorcnt; i++) {
 800585a:	3601      	adds	r6, #1
 800585c:	42b2      	cmp	r2, r6
 800585e:	dcf8      	bgt.n	8005852 <netconn_write_vectors_partly+0x62>
  if (size == 0) {
 8005860:	2f00      	cmp	r7, #0
 8005862:	d101      	bne.n	8005868 <netconn_write_vectors_partly+0x78>
    return ERR_OK;
 8005864:	2000      	movs	r0, #0
 8005866:	e7d2      	b.n	800580e <netconn_write_vectors_partly+0x1e>
  } else if (size > SSIZE_MAX) {
 8005868:	da04      	bge.n	8005874 <netconn_write_vectors_partly+0x84>
    if (!bytes_written) {
 800586a:	f1b8 0f00 	cmp.w	r8, #0
 800586e:	d0dd      	beq.n	800582c <netconn_write_vectors_partly+0x3c>
    size = (size_t)limited;
 8005870:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8005874:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8005878:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 800587a:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800587c:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800587e:	4669      	mov	r1, sp
 8005880:	4812      	ldr	r0, [pc, #72]	@ (80058cc <netconn_write_vectors_partly+0xdc>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8005882:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8005884:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8005888:	e9cd 7205 	strd	r7, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800588c:	f7ff fea6 	bl	80055dc <netconn_apimsg>
  if (err == ERR_OK) {
 8005890:	2800      	cmp	r0, #0
 8005892:	d1bc      	bne.n	800580e <netconn_write_vectors_partly+0x1e>
    if (bytes_written != NULL) {
 8005894:	f1b8 0f00 	cmp.w	r8, #0
 8005898:	d002      	beq.n	80058a0 <netconn_write_vectors_partly+0xb0>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800589a:	9b06      	ldr	r3, [sp, #24]
 800589c:	f8c8 3000 	str.w	r3, [r8]
    if (!dontblock) {
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	d1df      	bne.n	8005864 <netconn_write_vectors_partly+0x74>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80058a4:	9b06      	ldr	r3, [sp, #24]
 80058a6:	42bb      	cmp	r3, r7
 80058a8:	d0dc      	beq.n	8005864 <netconn_write_vectors_partly+0x74>
 80058aa:	4b04      	ldr	r3, [pc, #16]	@ (80058bc <netconn_write_vectors_partly+0xcc>)
 80058ac:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80058b0:	4907      	ldr	r1, [pc, #28]	@ (80058d0 <netconn_write_vectors_partly+0xe0>)
 80058b2:	4804      	ldr	r0, [pc, #16]	@ (80058c4 <netconn_write_vectors_partly+0xd4>)
 80058b4:	f007 fe4a 	bl	800d54c <iprintf>
 80058b8:	e7d4      	b.n	8005864 <netconn_write_vectors_partly+0x74>
 80058ba:	bf00      	nop
 80058bc:	0800e56a 	.word	0x0800e56a
 80058c0:	0800e684 	.word	0x0800e684
 80058c4:	0800e45a 	.word	0x0800e45a
 80058c8:	0800e6a0 	.word	0x0800e6a0
 80058cc:	08006959 	.word	0x08006959
 80058d0:	0800e6c2 	.word	0x0800e6c2

080058d4 <netconn_write_partly>:
{
 80058d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 80058d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80058da:	9a06      	ldr	r2, [sp, #24]
 80058dc:	a902      	add	r1, sp, #8
 80058de:	9200      	str	r2, [sp, #0]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f7ff ff85 	bl	80057f0 <netconn_write_vectors_partly>
}
 80058e6:	b005      	add	sp, #20
 80058e8:	f85d fb04 	ldr.w	pc, [sp], #4

080058ec <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80058ec:	2103      	movs	r1, #3
 80058ee:	f7ff bea1 	b.w	8005634 <netconn_close_shutdown>

080058f2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80058f2:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80058f4:	4604      	mov	r4, r0
 80058f6:	b148      	cbz	r0, 800590c <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 80058f8:	f007 fd16 	bl	800d328 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 80058fc:	2300      	movs	r3, #0
  err = conn->pending_err;
 80058fe:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8005902:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8005904:	f007 fd1c 	bl	800d340 <sys_arch_unprotect>
  return err;
}
 8005908:	4628      	mov	r0, r5
 800590a:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 800590c:	4605      	mov	r5, r0
 800590e:	e7fb      	b.n	8005908 <netconn_err+0x16>

08005910 <netconn_accept>:
{
 8005910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005912:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8005914:	460e      	mov	r6, r1
 8005916:	b959      	cbnz	r1, 8005930 <netconn_accept+0x20>
 8005918:	4b25      	ldr	r3, [pc, #148]	@ (80059b0 <netconn_accept+0xa0>)
 800591a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800591e:	4925      	ldr	r1, [pc, #148]	@ (80059b4 <netconn_accept+0xa4>)
 8005920:	f06f 040f 	mvn.w	r4, #15
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005924:	4824      	ldr	r0, [pc, #144]	@ (80059b8 <netconn_accept+0xa8>)
 8005926:	f007 fe11 	bl	800d54c <iprintf>
}
 800592a:	4620      	mov	r0, r4
 800592c:	b003      	add	sp, #12
 800592e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005934:	b920      	cbnz	r0, 8005940 <netconn_accept+0x30>
 8005936:	4b1e      	ldr	r3, [pc, #120]	@ (80059b0 <netconn_accept+0xa0>)
 8005938:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800593c:	491f      	ldr	r1, [pc, #124]	@ (80059bc <netconn_accept+0xac>)
 800593e:	e7ef      	b.n	8005920 <netconn_accept+0x10>
  err = netconn_err(conn);
 8005940:	f7ff ffd7 	bl	80058f2 <netconn_err>
 8005944:	4604      	mov	r4, r0
 8005946:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 800594a:	2800      	cmp	r0, #0
 800594c:	d1ed      	bne.n	800592a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800594e:	f105 0714 	add.w	r7, r5, #20
 8005952:	4638      	mov	r0, r7
 8005954:	f007 fc6f 	bl	800d236 <sys_mbox_valid>
 8005958:	b910      	cbnz	r0, 8005960 <netconn_accept+0x50>
    return ERR_CLSD;
 800595a:	f06f 040e 	mvn.w	r4, #14
 800595e:	e7e4      	b.n	800592a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8005960:	7f2b      	ldrb	r3, [r5, #28]
 8005962:	07da      	lsls	r2, r3, #31
 8005964:	d4f9      	bmi.n	800595a <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 8005966:	079b      	lsls	r3, r3, #30
 8005968:	d508      	bpl.n	800597c <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800596a:	a901      	add	r1, sp, #4
 800596c:	4638      	mov	r0, r7
 800596e:	f007 fc57 	bl	800d220 <sys_arch_mbox_tryfetch>
 8005972:	3001      	adds	r0, #1
 8005974:	d107      	bne.n	8005986 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 8005976:	f06f 0406 	mvn.w	r4, #6
 800597a:	e7d6      	b.n	800592a <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800597c:	4622      	mov	r2, r4
 800597e:	a901      	add	r1, sp, #4
 8005980:	4638      	mov	r0, r7
 8005982:	f007 fc2f 	bl	800d1e4 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005986:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005988:	b11b      	cbz	r3, 8005992 <netconn_accept+0x82>
 800598a:	2200      	movs	r2, #0
 800598c:	2101      	movs	r1, #1
 800598e:	4628      	mov	r0, r5
 8005990:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8005992:	f10d 0103 	add.w	r1, sp, #3
 8005996:	9801      	ldr	r0, [sp, #4]
 8005998:	f000 fd24 	bl	80063e4 <lwip_netconn_is_err_msg>
 800599c:	b110      	cbz	r0, 80059a4 <netconn_accept+0x94>
    return err;
 800599e:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 80059a2:	e7c2      	b.n	800592a <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0d7      	beq.n	800595a <netconn_accept+0x4a>
  *new_conn = newconn;
 80059aa:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 80059ac:	e7bd      	b.n	800592a <netconn_accept+0x1a>
 80059ae:	bf00      	nop
 80059b0:	0800e56a 	.word	0x0800e56a
 80059b4:	0800e6e5 	.word	0x0800e6e5
 80059b8:	0800e45a 	.word	0x0800e45a
 80059bc:	0800e705 	.word	0x0800e705

080059c0 <netconn_recv_data>:
  void *buf = NULL;
 80059c0:	2300      	movs	r3, #0
{
 80059c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059c4:	4604      	mov	r4, r0
 80059c6:	4616      	mov	r6, r2
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80059c8:	460d      	mov	r5, r1
  void *buf = NULL;
 80059ca:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80059cc:	b951      	cbnz	r1, 80059e4 <netconn_recv_data+0x24>
 80059ce:	4b32      	ldr	r3, [pc, #200]	@ (8005a98 <netconn_recv_data+0xd8>)
 80059d0:	f44f 7212 	mov.w	r2, #584	@ 0x248
 80059d4:	4931      	ldr	r1, [pc, #196]	@ (8005a9c <netconn_recv_data+0xdc>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80059d6:	4832      	ldr	r0, [pc, #200]	@ (8005aa0 <netconn_recv_data+0xe0>)
 80059d8:	f007 fdb8 	bl	800d54c <iprintf>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80059dc:	f06f 000f 	mvn.w	r0, #15
}
 80059e0:	b003      	add	sp, #12
 80059e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 80059e4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80059e6:	b920      	cbnz	r0, 80059f2 <netconn_recv_data+0x32>
 80059e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a98 <netconn_recv_data+0xd8>)
 80059ea:	f240 224a 	movw	r2, #586	@ 0x24a
 80059ee:	492d      	ldr	r1, [pc, #180]	@ (8005aa4 <netconn_recv_data+0xe4>)
 80059f0:	e7f1      	b.n	80059d6 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80059f2:	f100 0710 	add.w	r7, r0, #16
 80059f6:	4638      	mov	r0, r7
 80059f8:	f007 fc1d 	bl	800d236 <sys_mbox_valid>
 80059fc:	b938      	cbnz	r0, 8005a0e <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 80059fe:	4620      	mov	r0, r4
 8005a00:	f7ff ff77 	bl	80058f2 <netconn_err>
    if (err != ERR_OK) {
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d1eb      	bne.n	80059e0 <netconn_recv_data+0x20>
    return ERR_CONN;
 8005a08:	f06f 000a 	mvn.w	r0, #10
 8005a0c:	e7e8      	b.n	80059e0 <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8005a0e:	7f23      	ldrb	r3, [r4, #28]
 8005a10:	f006 0604 	and.w	r6, r6, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005a14:	a901      	add	r1, sp, #4
 8005a16:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	4333      	orrs	r3, r6
 8005a1e:	d102      	bne.n	8005a26 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8005a20:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8005a24:	b172      	cbz	r2, 8005a44 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005a26:	f007 fbfb 	bl	800d220 <sys_arch_mbox_tryfetch>
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d10c      	bne.n	8005a48 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f7ff ff5f 	bl	80058f2 <netconn_err>
      if (err != ERR_OK) {
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d1d3      	bne.n	80059e0 <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8005a38:	7f23      	ldrb	r3, [r4, #28]
 8005a3a:	07db      	lsls	r3, r3, #31
 8005a3c:	d4e4      	bmi.n	8005a08 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 8005a3e:	f06f 0006 	mvn.w	r0, #6
 8005a42:	e7cd      	b.n	80059e0 <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8005a44:	f007 fbce 	bl	800d1e4 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005a48:	7823      	ldrb	r3, [r4, #0]
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8005a4a:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005a4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a50:	2b10      	cmp	r3, #16
 8005a52:	d116      	bne.n	8005a82 <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8005a54:	f10d 0103 	add.w	r1, sp, #3
 8005a58:	f000 fcc4 	bl	80063e4 <lwip_netconn_is_err_msg>
 8005a5c:	b130      	cbz	r0, 8005a6c <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 8005a5e:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 8005a62:	f110 0f0f 	cmn.w	r0, #15
 8005a66:	bf08      	it	eq
 8005a68:	2000      	moveq	r0, #0
 8005a6a:	e7b9      	b.n	80059e0 <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 8005a6c:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 8005a6e:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8005a70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005a72:	b113      	cbz	r3, 8005a7a <netconn_recv_data+0xba>
 8005a74:	2101      	movs	r1, #1
 8005a76:	4620      	mov	r0, r4
 8005a78:	4798      	blx	r3
  *new_buf = buf;
 8005a7a:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 8005a7c:	2000      	movs	r0, #0
  *new_buf = buf;
 8005a7e:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8005a80:	e7ae      	b.n	80059e0 <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8005a82:	b930      	cbnz	r0, 8005a92 <netconn_recv_data+0xd2>
 8005a84:	4b04      	ldr	r3, [pc, #16]	@ (8005a98 <netconn_recv_data+0xd8>)
 8005a86:	f240 2291 	movw	r2, #657	@ 0x291
 8005a8a:	4907      	ldr	r1, [pc, #28]	@ (8005aa8 <netconn_recv_data+0xe8>)
 8005a8c:	4804      	ldr	r0, [pc, #16]	@ (8005aa0 <netconn_recv_data+0xe0>)
 8005a8e:	f007 fd5d 	bl	800d54c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8005a92:	9b01      	ldr	r3, [sp, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	e7ea      	b.n	8005a6e <netconn_recv_data+0xae>
 8005a98:	0800e56a 	.word	0x0800e56a
 8005a9c:	0800e722 	.word	0x0800e722
 8005aa0:	0800e45a 	.word	0x0800e45a
 8005aa4:	0800e740 	.word	0x0800e740
 8005aa8:	0800e75b 	.word	0x0800e75b

08005aac <netconn_recv_data_tcp>:
{
 8005aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aae:	4604      	mov	r4, r0
 8005ab0:	b089      	sub	sp, #36	@ 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005ab2:	3010      	adds	r0, #16
{
 8005ab4:	460f      	mov	r7, r1
 8005ab6:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005ab8:	f007 fbbd 	bl	800d236 <sys_mbox_valid>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d03c      	beq.n	8005b3a <netconn_recv_data_tcp+0x8e>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8005ac0:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8005ac4:	7f23      	ldrb	r3, [r4, #28]
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	da12      	bge.n	8005af0 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8005aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ace:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005ad0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005ad2:	b11b      	cbz	r3, 8005adc <netconn_recv_data_tcp+0x30>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	4620      	mov	r0, r4
 8005ada:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8005adc:	6863      	ldr	r3, [r4, #4]
 8005ade:	bb2b      	cbnz	r3, 8005b2c <netconn_recv_data_tcp+0x80>
        err = netconn_err(conn);
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f7ff ff06 	bl	80058f2 <netconn_err>
        return ERR_RST;
 8005ae6:	1e05      	subs	r5, r0, #0
 8005ae8:	bf08      	it	eq
 8005aea:	f06f 050d 	mvneq.w	r5, #13
 8005aee:	e018      	b.n	8005b22 <netconn_recv_data_tcp+0x76>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8005af0:	4632      	mov	r2, r6
 8005af2:	4639      	mov	r1, r7
 8005af4:	4620      	mov	r0, r4
 8005af6:	f7ff ff63 	bl	80059c0 <netconn_recv_data>
  if (err != ERR_OK) {
 8005afa:	4605      	mov	r5, r0
 8005afc:	b988      	cbnz	r0, 8005b22 <netconn_recv_data_tcp+0x76>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8005afe:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 8005b00:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8005b02:	d405      	bmi.n	8005b10 <netconn_recv_data_tcp+0x64>
    u16_t len = buf ? buf->tot_len : 1;
 8005b04:	b187      	cbz	r7, 8005b28 <netconn_recv_data_tcp+0x7c>
 8005b06:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8005b08:	466a      	mov	r2, sp
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f7ff fd70 	bl	80055f0 <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 8005b10:	b93f      	cbnz	r7, 8005b22 <netconn_recv_data_tcp+0x76>
    if (apiflags & NETCONN_NOFIN) {
 8005b12:	06f3      	lsls	r3, r6, #27
 8005b14:	d5dc      	bpl.n	8005ad0 <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8005b16:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8005b18:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8005b1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b20:	7723      	strb	r3, [r4, #28]
}
 8005b22:	4628      	mov	r0, r5
 8005b24:	b009      	add	sp, #36	@ 0x24
 8005b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8005b28:	2101      	movs	r1, #1
 8005b2a:	e7ed      	b.n	8005b08 <netconn_recv_data_tcp+0x5c>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	4620      	mov	r0, r4
      return ERR_CLSD;
 8005b30:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8005b34:	f7ff fd7e 	bl	8005634 <netconn_close_shutdown>
      return ERR_CLSD;
 8005b38:	e7f3      	b.n	8005b22 <netconn_recv_data_tcp+0x76>
    return ERR_CONN;
 8005b3a:	f06f 050a 	mvn.w	r5, #10
 8005b3e:	e7f0      	b.n	8005b22 <netconn_recv_data_tcp+0x76>

08005b40 <netconn_recv>:
{
 8005b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b42:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005b44:	460e      	mov	r6, r1
 8005b46:	b959      	cbnz	r1, 8005b60 <netconn_recv+0x20>
 8005b48:	4b21      	ldr	r3, [pc, #132]	@ (8005bd0 <netconn_recv+0x90>)
 8005b4a:	f240 3263 	movw	r2, #867	@ 0x363
 8005b4e:	4921      	ldr	r1, [pc, #132]	@ (8005bd4 <netconn_recv+0x94>)
 8005b50:	f06f 050f 	mvn.w	r5, #15
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005b54:	4820      	ldr	r0, [pc, #128]	@ (8005bd8 <netconn_recv+0x98>)
 8005b56:	f007 fcf9 	bl	800d54c <iprintf>
}
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	b003      	add	sp, #12
 8005b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8005b60:	2700      	movs	r7, #0
 8005b62:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005b64:	b920      	cbnz	r0, 8005b70 <netconn_recv+0x30>
 8005b66:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd0 <netconn_recv+0x90>)
 8005b68:	f240 3265 	movw	r2, #869	@ 0x365
 8005b6c:	491b      	ldr	r1, [pc, #108]	@ (8005bdc <netconn_recv+0x9c>)
 8005b6e:	e7ef      	b.n	8005b50 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005b70:	7803      	ldrb	r3, [r0, #0]
 8005b72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b76:	2b10      	cmp	r3, #16
 8005b78:	d124      	bne.n	8005bc4 <netconn_recv+0x84>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005b7a:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 8005b7c:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005b7e:	f001 fc25 	bl	80073cc <memp_malloc>
    if (buf == NULL) {
 8005b82:	4604      	mov	r4, r0
 8005b84:	b1d8      	cbz	r0, 8005bbe <netconn_recv+0x7e>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8005b86:	4628      	mov	r0, r5
 8005b88:	463a      	mov	r2, r7
 8005b8a:	a901      	add	r1, sp, #4
 8005b8c:	f7ff ff8e 	bl	8005aac <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 8005b90:	4605      	mov	r5, r0
 8005b92:	b120      	cbz	r0, 8005b9e <netconn_recv+0x5e>
      memp_free(MEMP_NETBUF, buf);
 8005b94:	4621      	mov	r1, r4
 8005b96:	2006      	movs	r0, #6
 8005b98:	f001 fc46 	bl	8007428 <memp_free>
      return err;
 8005b9c:	e7dd      	b.n	8005b5a <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005b9e:	9f01      	ldr	r7, [sp, #4]
 8005ba0:	b937      	cbnz	r7, 8005bb0 <netconn_recv+0x70>
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <netconn_recv+0x90>)
 8005ba4:	f240 3279 	movw	r2, #889	@ 0x379
 8005ba8:	490d      	ldr	r1, [pc, #52]	@ (8005be0 <netconn_recv+0xa0>)
 8005baa:	480b      	ldr	r0, [pc, #44]	@ (8005bd8 <netconn_recv+0x98>)
 8005bac:	f007 fcce 	bl	800d54c <iprintf>
    buf->port = 0;
 8005bb0:	2300      	movs	r3, #0
    buf->ptr = p;
 8005bb2:	e9c4 7700 	strd	r7, r7, [r4]
    buf->port = 0;
 8005bb6:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 8005bb8:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 8005bba:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 8005bbc:	e7cd      	b.n	8005b5a <netconn_recv+0x1a>
      return ERR_MEM;
 8005bbe:	f04f 35ff 	mov.w	r5, #4294967295
 8005bc2:	e7ca      	b.n	8005b5a <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8005bc4:	463a      	mov	r2, r7
}
 8005bc6:	b003      	add	sp, #12
 8005bc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8005bcc:	f7ff bef8 	b.w	80059c0 <netconn_recv_data>
 8005bd0:	0800e56a 	.word	0x0800e56a
 8005bd4:	0800e722 	.word	0x0800e722
 8005bd8:	0800e45a 	.word	0x0800e45a
 8005bdc:	0800e740 	.word	0x0800e740
 8005be0:	0800f2d5 	.word	0x0800f2d5

08005be4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8005be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be8:	4606      	mov	r6, r0
 8005bea:	4617      	mov	r7, r2
 8005bec:	461d      	mov	r5, r3
 8005bee:	f8bd 8020 	ldrh.w	r8, [sp, #32]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	b929      	cbnz	r1, 8005c02 <recv_udp+0x1e>
 8005bf6:	4b21      	ldr	r3, [pc, #132]	@ (8005c7c <recv_udp+0x98>)
 8005bf8:	22e5      	movs	r2, #229	@ 0xe5
 8005bfa:	4921      	ldr	r1, [pc, #132]	@ (8005c80 <recv_udp+0x9c>)
 8005bfc:	4821      	ldr	r0, [pc, #132]	@ (8005c84 <recv_udp+0xa0>)
 8005bfe:	f007 fca5 	bl	800d54c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8005c02:	b306      	cbz	r6, 8005c46 <recv_udp+0x62>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8005c04:	6873      	ldr	r3, [r6, #4]
 8005c06:	42a3      	cmp	r3, r4
 8005c08:	d128      	bne.n	8005c5c <recv_udp+0x78>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005c0a:	f106 0910 	add.w	r9, r6, #16
 8005c0e:	4648      	mov	r0, r9
 8005c10:	f007 fb11 	bl	800d236 <sys_mbox_valid>
 8005c14:	b1e8      	cbz	r0, 8005c52 <recv_udp+0x6e>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005c16:	2006      	movs	r0, #6
 8005c18:	f001 fbd8 	bl	80073cc <memp_malloc>
  if (buf == NULL) {
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	b1c0      	cbz	r0, 8005c52 <recv_udp+0x6e>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
    buf->ptr = p;
 8005c20:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 8005c24:	b105      	cbz	r5, 8005c28 <recv_udp+0x44>
 8005c26:	682d      	ldr	r5, [r5, #0]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005c28:	4621      	mov	r1, r4
    ip_addr_set(&buf->addr, addr);
 8005c2a:	60a5      	str	r5, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005c2c:	4648      	mov	r0, r9
    buf->port = port;
 8005c2e:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 8005c32:	893d      	ldrh	r5, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005c34:	f007 fac7 	bl	800d1c6 <sys_mbox_trypost>
 8005c38:	4601      	mov	r1, r0
 8005c3a:	b1b0      	cbz	r0, 8005c6a <recv_udp+0x86>
    netbuf_delete(buf);
 8005c3c:	4620      	mov	r0, r4
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8005c3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 8005c42:	f000 bf4d 	b.w	8006ae0 <netbuf_delete>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8005c46:	4b0d      	ldr	r3, [pc, #52]	@ (8005c7c <recv_udp+0x98>)
 8005c48:	22e6      	movs	r2, #230	@ 0xe6
 8005c4a:	490f      	ldr	r1, [pc, #60]	@ (8005c88 <recv_udp+0xa4>)
 8005c4c:	480d      	ldr	r0, [pc, #52]	@ (8005c84 <recv_udp+0xa0>)
 8005c4e:	f007 fc7d 	bl	800d54c <iprintf>
    pbuf_free(p);
 8005c52:	4638      	mov	r0, r7
}
 8005c54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8005c58:	f001 be4a 	b.w	80078f0 <pbuf_free>
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8005c5c:	4b07      	ldr	r3, [pc, #28]	@ (8005c7c <recv_udp+0x98>)
 8005c5e:	22ee      	movs	r2, #238	@ 0xee
 8005c60:	490a      	ldr	r1, [pc, #40]	@ (8005c8c <recv_udp+0xa8>)
 8005c62:	4808      	ldr	r0, [pc, #32]	@ (8005c84 <recv_udp+0xa0>)
 8005c64:	f007 fc72 	bl	800d54c <iprintf>
 8005c68:	e7cf      	b.n	8005c0a <recv_udp+0x26>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005c6a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8005c6c:	b123      	cbz	r3, 8005c78 <recv_udp+0x94>
 8005c6e:	462a      	mov	r2, r5
 8005c70:	4630      	mov	r0, r6
}
 8005c72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005c76:	4718      	bx	r3
}
 8005c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7c:	0800e767 	.word	0x0800e767
 8005c80:	0800e799 	.word	0x0800e799
 8005c84:	0800e45a 	.word	0x0800e45a
 8005c88:	0800e7bb 	.word	0x0800e7bb
 8005c8c:	0800e7da 	.word	0x0800e7da

08005c90 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8005c90:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8005c92:	6844      	ldr	r4, [r0, #4]
{
 8005c94:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 8005c96:	4620      	mov	r0, r4
 8005c98:	f002 faa2 	bl	80081e0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	4909      	ldr	r1, [pc, #36]	@ (8005cc4 <setup_tcp+0x34>)
 8005ca0:	f002 faa2 	bl	80081e8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	4908      	ldr	r1, [pc, #32]	@ (8005cc8 <setup_tcp+0x38>)
 8005ca8:	f002 fab6 	bl	8008218 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8005cac:	4620      	mov	r0, r4
 8005cae:	4907      	ldr	r1, [pc, #28]	@ (8005ccc <setup_tcp+0x3c>)
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f002 fae7 	bl	8008284 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	4905      	ldr	r1, [pc, #20]	@ (8005cd0 <setup_tcp+0x40>)
}
 8005cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 8005cbe:	f002 bac3 	b.w	8008248 <tcp_err>
 8005cc2:	bf00      	nop
 8005cc4:	080061f1 	.word	0x080061f1
 8005cc8:	08006185 	.word	0x08006185
 8005ccc:	08006109 	.word	0x08006109
 8005cd0:	080062b1 	.word	0x080062b1

08005cd4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8005cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd8:	4689      	mov	r9, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8005cda:	4604      	mov	r4, r0
 8005cdc:	b930      	cbnz	r0, 8005cec <lwip_netconn_do_writemore+0x18>
 8005cde:	4b88      	ldr	r3, [pc, #544]	@ (8005f00 <lwip_netconn_do_writemore+0x22c>)
 8005ce0:	f240 6273 	movw	r2, #1651	@ 0x673
 8005ce4:	4987      	ldr	r1, [pc, #540]	@ (8005f04 <lwip_netconn_do_writemore+0x230>)
 8005ce6:	4888      	ldr	r0, [pc, #544]	@ (8005f08 <lwip_netconn_do_writemore+0x234>)
 8005ce8:	f007 fc30 	bl	800d54c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8005cec:	7863      	ldrb	r3, [r4, #1]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d006      	beq.n	8005d00 <lwip_netconn_do_writemore+0x2c>
 8005cf2:	4b83      	ldr	r3, [pc, #524]	@ (8005f00 <lwip_netconn_do_writemore+0x22c>)
 8005cf4:	f240 6274 	movw	r2, #1652	@ 0x674
 8005cf8:	4984      	ldr	r1, [pc, #528]	@ (8005f0c <lwip_netconn_do_writemore+0x238>)
 8005cfa:	4883      	ldr	r0, [pc, #524]	@ (8005f08 <lwip_netconn_do_writemore+0x234>)
 8005cfc:	f007 fc26 	bl	800d54c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005d00:	6a23      	ldr	r3, [r4, #32]
 8005d02:	b933      	cbnz	r3, 8005d12 <lwip_netconn_do_writemore+0x3e>
 8005d04:	4b7e      	ldr	r3, [pc, #504]	@ (8005f00 <lwip_netconn_do_writemore+0x22c>)
 8005d06:	f240 6275 	movw	r2, #1653	@ 0x675
 8005d0a:	4981      	ldr	r1, [pc, #516]	@ (8005f10 <lwip_netconn_do_writemore+0x23c>)
 8005d0c:	487e      	ldr	r0, [pc, #504]	@ (8005f08 <lwip_netconn_do_writemore+0x234>)
 8005d0e:	f007 fc1d 	bl	800d54c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8005d12:	6863      	ldr	r3, [r4, #4]
 8005d14:	b933      	cbnz	r3, 8005d24 <lwip_netconn_do_writemore+0x50>
 8005d16:	4b7a      	ldr	r3, [pc, #488]	@ (8005f00 <lwip_netconn_do_writemore+0x22c>)
 8005d18:	f240 6276 	movw	r2, #1654	@ 0x676
 8005d1c:	497d      	ldr	r1, [pc, #500]	@ (8005f14 <lwip_netconn_do_writemore+0x240>)
 8005d1e:	487a      	ldr	r0, [pc, #488]	@ (8005f08 <lwip_netconn_do_writemore+0x234>)
 8005d20:	f007 fc14 	bl	800d54c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8005d24:	6a23      	ldr	r3, [r4, #32]
 8005d26:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d306      	bcc.n	8005d3c <lwip_netconn_do_writemore+0x68>
 8005d2e:	4b74      	ldr	r3, [pc, #464]	@ (8005f00 <lwip_netconn_do_writemore+0x22c>)
 8005d30:	f240 6277 	movw	r2, #1655	@ 0x677
 8005d34:	4978      	ldr	r1, [pc, #480]	@ (8005f18 <lwip_netconn_do_writemore+0x244>)
 8005d36:	4874      	ldr	r0, [pc, #464]	@ (8005f08 <lwip_netconn_do_writemore+0x234>)
 8005d38:	f007 fc08 	bl	800d54c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8005d3c:	6a23      	ldr	r3, [r4, #32]
 8005d3e:	899b      	ldrh	r3, [r3, #12]
 8005d40:	b933      	cbnz	r3, 8005d50 <lwip_netconn_do_writemore+0x7c>
 8005d42:	4b6f      	ldr	r3, [pc, #444]	@ (8005f00 <lwip_netconn_do_writemore+0x22c>)
 8005d44:	f240 6279 	movw	r2, #1657	@ 0x679
 8005d48:	4974      	ldr	r1, [pc, #464]	@ (8005f1c <lwip_netconn_do_writemore+0x248>)
 8005d4a:	486f      	ldr	r0, [pc, #444]	@ (8005f08 <lwip_netconn_do_writemore+0x234>)
 8005d4c:	f007 fbfe 	bl	800d54c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8005d50:	6a23      	ldr	r3, [r4, #32]
 8005d52:	7f26      	ldrb	r6, [r4, #28]
 8005d54:	7f1f      	ldrb	r7, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005d56:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8005d5a:	f8df b1ac 	ldr.w	fp, [pc, #428]	@ 8005f08 <lwip_netconn_do_writemore+0x234>
 8005d5e:	f007 0304 	and.w	r3, r7, #4
 8005d62:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005d64:	6a21      	ldr	r1, [r4, #32]
      available = tcp_sndbuf(conn->pcb.tcp);
 8005d66:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005d68:	688a      	ldr	r2, [r1, #8]
 8005d6a:	690b      	ldr	r3, [r1, #16]
 8005d6c:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 8005d6e:	f8b5 5064 	ldrh.w	r5, [r5, #100]	@ 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005d72:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8005d76:	6850      	ldr	r0, [r2, #4]
 8005d78:	eba0 0803 	sub.w	r8, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8005d7c:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
        len = 0xffff;
 8005d80:	bf2a      	itet	cs
 8005d82:	f64f 72ff 	movwcs	r2, #65535	@ 0xffff
        len = (u16_t)diff;
 8005d86:	fa1f f288 	uxthcc.w	r2, r8
        apiflags |= TCP_WRITE_FLAG_MORE;
 8005d8a:	f047 0702 	orrcs.w	r7, r7, #2
      if (available < len) {
 8005d8e:	42aa      	cmp	r2, r5
 8005d90:	d969      	bls.n	8005e66 <lwip_netconn_do_writemore+0x192>
        if (dontblock) {
 8005d92:	2e00      	cmp	r6, #0
 8005d94:	d039      	beq.n	8005e0a <lwip_netconn_do_writemore+0x136>
          if (!len) {
 8005d96:	2d00      	cmp	r5, #0
 8005d98:	d139      	bne.n	8005e0e <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005d9a:	698b      	ldr	r3, [r1, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bf14      	ite	ne
 8005da0:	f04f 0a00 	movne.w	sl, #0
 8005da4:	f06f 0a06 	mvneq.w	sl, #6
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8005da8:	6a23      	ldr	r3, [r4, #32]
 8005daa:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d277      	bcs.n	8005ea2 <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8005db2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005db4:	b11b      	cbz	r3, 8005dbe <lwip_netconn_do_writemore+0xea>
 8005db6:	2200      	movs	r2, #0
 8005db8:	2103      	movs	r1, #3
 8005dba:	4620      	mov	r0, r4
 8005dbc:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8005dbe:	7f23      	ldrb	r3, [r4, #28]
 8005dc0:	f043 0310 	orr.w	r3, r3, #16
 8005dc4:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 8005dc6:	f1ba 0f00 	cmp.w	sl, #0
 8005dca:	d17f      	bne.n	8005ecc <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8005dcc:	6a23      	ldr	r3, [r4, #32]
 8005dce:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d078      	beq.n	8005ec8 <lwip_netconn_do_writemore+0x1f4>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005dd6:	3e00      	subs	r6, #0
 8005dd8:	bf18      	it	ne
 8005dda:	2601      	movne	r6, #1
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
      }
      out_err = tcp_output(conn->pcb.tcp);
 8005ddc:	6860      	ldr	r0, [r4, #4]
 8005dde:	f005 fa6f 	bl	800b2c0 <tcp_output>
      if (out_err == ERR_RTE) {
 8005de2:	3004      	adds	r0, #4
 8005de4:	f040 8085 	bne.w	8005ef2 <lwip_netconn_do_writemore+0x21e>
      err_t out_err = tcp_output(conn->pcb.tcp);
      if (out_err == ERR_RTE) {
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8005de8:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005dec:	6a23      	ldr	r3, [r4, #32]
 8005dee:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8005df0:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8005df8:	7063      	strb	r3, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8005dfa:	f1b9 0f00 	cmp.w	r9, #0
 8005dfe:	d002      	beq.n	8005e06 <lwip_netconn_do_writemore+0x132>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8005e00:	300c      	adds	r0, #12
 8005e02:	f007 fa4f 	bl	800d2a4 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8005e06:	2000      	movs	r0, #0
 8005e08:	e06b      	b.n	8005ee2 <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8005e0a:	f047 0702 	orr.w	r7, r7, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8005e0e:	442b      	add	r3, r5
 8005e10:	4298      	cmp	r0, r3
 8005e12:	d206      	bcs.n	8005e22 <lwip_netconn_do_writemore+0x14e>
 8005e14:	4b3a      	ldr	r3, [pc, #232]	@ (8005f00 <lwip_netconn_do_writemore+0x22c>)
 8005e16:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8005e1a:	4941      	ldr	r1, [pc, #260]	@ (8005f20 <lwip_netconn_do_writemore+0x24c>)
 8005e1c:	4658      	mov	r0, fp
 8005e1e:	f007 fb95 	bl	800d54c <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8005e22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e26:	429d      	cmp	r5, r3
 8005e28:	d102      	bne.n	8005e30 <lwip_netconn_do_writemore+0x15c>
 8005e2a:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 8005e2e:	d207      	bcs.n	8005e40 <lwip_netconn_do_writemore+0x16c>
 8005e30:	fa1f f888 	uxth.w	r8, r8
 8005e34:	45a8      	cmp	r8, r5
 8005e36:	d118      	bne.n	8005e6a <lwip_netconn_do_writemore+0x196>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8005e38:	6a23      	ldr	r3, [r4, #32]
 8005e3a:	899b      	ldrh	r3, [r3, #12]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d914      	bls.n	8005e6a <lwip_netconn_do_writemore+0x196>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8005e40:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 8005e44:	f04f 0801 	mov.w	r8, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8005e48:	4651      	mov	r1, sl
 8005e4a:	463b      	mov	r3, r7
 8005e4c:	462a      	mov	r2, r5
 8005e4e:	6860      	ldr	r0, [r4, #4]
 8005e50:	f004 fcf0 	bl	800a834 <tcp_write>
      if (err == ERR_OK) {
 8005e54:	4682      	mov	sl, r0
 8005e56:	b158      	cbz	r0, 8005e70 <lwip_netconn_do_writemore+0x19c>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d8c5      	bhi.n	8005dec <lwip_netconn_do_writemore+0x118>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8005e60:	f04f 3aff 	mov.w	sl, #4294967295
 8005e64:	e01b      	b.n	8005e9e <lwip_netconn_do_writemore+0x1ca>
 8005e66:	4615      	mov	r5, r2
 8005e68:	e7d1      	b.n	8005e0e <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 8005e6a:	f04f 0800 	mov.w	r8, #0
 8005e6e:	e7eb      	b.n	8005e48 <lwip_netconn_do_writemore+0x174>
        conn->current_msg->msg.w.offset += len;
 8005e70:	6a23      	ldr	r3, [r4, #32]
 8005e72:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005e74:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 8005e76:	442a      	add	r2, r5
 8005e78:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005e7e:	684a      	ldr	r2, [r1, #4]
 8005e80:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 8005e82:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005e84:	d107      	bne.n	8005e96 <lwip_netconn_do_writemore+0x1c2>
          conn->current_msg->msg.w.vector_cnt--;
 8005e86:	899a      	ldrh	r2, [r3, #12]
 8005e88:	3a01      	subs	r2, #1
 8005e8a:	b292      	uxth	r2, r2
 8005e8c:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8005e8e:	b112      	cbz	r2, 8005e96 <lwip_netconn_do_writemore+0x1c2>
            conn->current_msg->msg.w.vector++;
 8005e90:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 8005e92:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 8005e94:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 8005e96:	f1b8 0f00 	cmp.w	r8, #0
 8005e9a:	f47f af63 	bne.w	8005d64 <lwip_netconn_do_writemore+0x90>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8005e9e:	2e00      	cmp	r6, #0
 8005ea0:	d182      	bne.n	8005da8 <lwip_netconn_do_writemore+0xd4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8005ea2:	6863      	ldr	r3, [r4, #4]
 8005ea4:	f640 3225 	movw	r2, #2853	@ 0xb25
 8005ea8:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 8005eac:	4291      	cmp	r1, r2
 8005eae:	d903      	bls.n	8005eb8 <lwip_netconn_do_writemore+0x1e4>
 8005eb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8005eb4:	2b06      	cmp	r3, #6
 8005eb6:	d986      	bls.n	8005dc6 <lwip_netconn_do_writemore+0xf2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8005eb8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d083      	beq.n	8005dc6 <lwip_netconn_do_writemore+0xf2>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2103      	movs	r1, #3
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	4798      	blx	r3
 8005ec6:	e77e      	b.n	8005dc6 <lwip_netconn_do_writemore+0xf2>
 8005ec8:	2601      	movs	r6, #1
 8005eca:	e787      	b.n	8005ddc <lwip_netconn_do_writemore+0x108>
    } else if (err == ERR_MEM) {
 8005ecc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005ed0:	d112      	bne.n	8005ef8 <lwip_netconn_do_writemore+0x224>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8005ed2:	6860      	ldr	r0, [r4, #4]
 8005ed4:	f005 f9f4 	bl	800b2c0 <tcp_output>
      if (out_err == ERR_RTE) {
 8005ed8:	3004      	adds	r0, #4
 8005eda:	d085      	beq.n	8005de8 <lwip_netconn_do_writemore+0x114>
      } else if (dontblock) {
 8005edc:	b91e      	cbnz	r6, 8005ee6 <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 8005ede:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005ee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005ee6:	6a23      	ldr	r3, [r4, #32]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	b12b      	cbz	r3, 8005ef8 <lwip_netconn_do_writemore+0x224>
 8005eec:	f04f 0a00 	mov.w	sl, #0
 8005ef0:	e77c      	b.n	8005dec <lwip_netconn_do_writemore+0x118>
  if (write_finished) {
 8005ef2:	2e00      	cmp	r6, #0
 8005ef4:	d1fa      	bne.n	8005eec <lwip_netconn_do_writemore+0x218>
 8005ef6:	e7f2      	b.n	8005ede <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005ef8:	f06f 0a06 	mvn.w	sl, #6
 8005efc:	e776      	b.n	8005dec <lwip_netconn_do_writemore+0x118>
 8005efe:	bf00      	nop
 8005f00:	0800e767 	.word	0x0800e767
 8005f04:	0800e7f8 	.word	0x0800e7f8
 8005f08:	0800e45a 	.word	0x0800e45a
 8005f0c:	0800e805 	.word	0x0800e805
 8005f10:	0800e822 	.word	0x0800e822
 8005f14:	0800e83c 	.word	0x0800e83c
 8005f18:	0800e852 	.word	0x0800e852
 8005f1c:	0800e891 	.word	0x0800e891
 8005f20:	0800e8b9 	.word	0x0800e8b9

08005f24 <lwip_netconn_do_close_internal>:
{
 8005f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	468a      	mov	sl, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	b930      	cbnz	r0, 8005f3c <lwip_netconn_do_close_internal+0x18>
 8005f2e:	4b6b      	ldr	r3, [pc, #428]	@ (80060dc <lwip_netconn_do_close_internal+0x1b8>)
 8005f30:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8005f34:	496a      	ldr	r1, [pc, #424]	@ (80060e0 <lwip_netconn_do_close_internal+0x1bc>)
 8005f36:	486b      	ldr	r0, [pc, #428]	@ (80060e4 <lwip_netconn_do_close_internal+0x1c0>)
 8005f38:	f007 fb08 	bl	800d54c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8005f3c:	7823      	ldrb	r3, [r4, #0]
 8005f3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f42:	2b10      	cmp	r3, #16
 8005f44:	d006      	beq.n	8005f54 <lwip_netconn_do_close_internal+0x30>
 8005f46:	4b65      	ldr	r3, [pc, #404]	@ (80060dc <lwip_netconn_do_close_internal+0x1b8>)
 8005f48:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8005f4c:	4966      	ldr	r1, [pc, #408]	@ (80060e8 <lwip_netconn_do_close_internal+0x1c4>)
 8005f4e:	4865      	ldr	r0, [pc, #404]	@ (80060e4 <lwip_netconn_do_close_internal+0x1c0>)
 8005f50:	f007 fafc 	bl	800d54c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8005f54:	7863      	ldrb	r3, [r4, #1]
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d006      	beq.n	8005f68 <lwip_netconn_do_close_internal+0x44>
 8005f5a:	4b60      	ldr	r3, [pc, #384]	@ (80060dc <lwip_netconn_do_close_internal+0x1b8>)
 8005f5c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8005f60:	4962      	ldr	r1, [pc, #392]	@ (80060ec <lwip_netconn_do_close_internal+0x1c8>)
 8005f62:	4860      	ldr	r0, [pc, #384]	@ (80060e4 <lwip_netconn_do_close_internal+0x1c0>)
 8005f64:	f007 faf2 	bl	800d54c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	b933      	cbnz	r3, 8005f7a <lwip_netconn_do_close_internal+0x56>
 8005f6c:	4b5b      	ldr	r3, [pc, #364]	@ (80060dc <lwip_netconn_do_close_internal+0x1b8>)
 8005f6e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8005f72:	495f      	ldr	r1, [pc, #380]	@ (80060f0 <lwip_netconn_do_close_internal+0x1cc>)
 8005f74:	485b      	ldr	r0, [pc, #364]	@ (80060e4 <lwip_netconn_do_close_internal+0x1c0>)
 8005f76:	f007 fae9 	bl	800d54c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005f7a:	6a23      	ldr	r3, [r4, #32]
 8005f7c:	b933      	cbnz	r3, 8005f8c <lwip_netconn_do_close_internal+0x68>
 8005f7e:	4b57      	ldr	r3, [pc, #348]	@ (80060dc <lwip_netconn_do_close_internal+0x1b8>)
 8005f80:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8005f84:	495b      	ldr	r1, [pc, #364]	@ (80060f4 <lwip_netconn_do_close_internal+0x1d0>)
 8005f86:	4857      	ldr	r0, [pc, #348]	@ (80060e4 <lwip_netconn_do_close_internal+0x1c0>)
 8005f88:	f007 fae0 	bl	800d54c <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 8005f8c:	6a23      	ldr	r3, [r4, #32]
  tpcb = conn->pcb.tcp;
 8005f8e:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8005f90:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 8005f92:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8005f94:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8005f98:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8005f9c:	d00f      	beq.n	8005fbe <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 8005f9e:	f1b9 0f00 	cmp.w	r9, #0
 8005fa2:	d005      	beq.n	8005fb0 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 8005fa4:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 8005fa6:	1f5a      	subs	r2, r3, #5
 8005fa8:	2a01      	cmp	r2, #1
 8005faa:	d908      	bls.n	8005fbe <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d006      	beq.n	8005fbe <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8005fb0:	f1b8 0f00 	cmp.w	r8, #0
 8005fb4:	d04d      	beq.n	8006052 <lwip_netconn_do_close_internal+0x12e>
 8005fb6:	8b6f      	ldrh	r7, [r5, #26]
 8005fb8:	f017 0710 	ands.w	r7, r7, #16
 8005fbc:	d004      	beq.n	8005fc8 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 8005fbe:	2701      	movs	r7, #1
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f002 f90c 	bl	80081e0 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8005fc8:	7d2b      	ldrb	r3, [r5, #20]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d143      	bne.n	8006056 <lwip_netconn_do_close_internal+0x132>
    tcp_accept(tpcb, NULL);
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	f002 f951 	bl	8008278 <tcp_accept>
  if (shut_close) {
 8005fd6:	2f00      	cmp	r7, #0
 8005fd8:	d05a      	beq.n	8006090 <lwip_netconn_do_close_internal+0x16c>
      err = tcp_close(tpcb);
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f002 fca0 	bl	8008920 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8005fe0:	4606      	mov	r6, r0
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8005fe2:	6a23      	ldr	r3, [r4, #32]
  if (err == ERR_OK) {
 8005fe4:	b140      	cbz	r0, 8005ff8 <lwip_netconn_do_close_internal+0xd4>
    if (err == ERR_MEM) {
 8005fe6:	1c42      	adds	r2, r0, #1
 8005fe8:	d107      	bne.n	8005ffa <lwip_netconn_do_close_internal+0xd6>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8005fea:	7a5b      	ldrb	r3, [r3, #9]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d155      	bne.n	800609c <lwip_netconn_do_close_internal+0x178>
        if (shut_close) {
 8005ff0:	b11f      	cbz	r7, 8005ffa <lwip_netconn_do_close_internal+0xd6>
          tcp_abort(tpcb);
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f002 faca 	bl	800858c <tcp_abort>
    shut_close = 0;
 8005ff8:	2600      	movs	r6, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005ffa:	6a23      	ldr	r3, [r4, #32]
 8005ffc:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8005ffe:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8006000:	2300      	movs	r3, #0
 8006002:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8006004:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8006006:	b9ce      	cbnz	r6, 800603c <lwip_netconn_do_close_internal+0x118>
      if (shut_close) {
 8006008:	b137      	cbz	r7, 8006018 <lwip_netconn_do_close_internal+0xf4>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800600a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        conn->pcb.tcp = NULL;
 800600c:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800600e:	b11b      	cbz	r3, 8006018 <lwip_netconn_do_close_internal+0xf4>
 8006010:	4632      	mov	r2, r6
 8006012:	2104      	movs	r1, #4
 8006014:	4620      	mov	r0, r4
 8006016:	4798      	blx	r3
      if (shut_rx) {
 8006018:	f1b9 0f00 	cmp.w	r9, #0
 800601c:	d005      	beq.n	800602a <lwip_netconn_do_close_internal+0x106>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800601e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006020:	b11b      	cbz	r3, 800602a <lwip_netconn_do_close_internal+0x106>
 8006022:	2200      	movs	r2, #0
 8006024:	4620      	mov	r0, r4
 8006026:	4611      	mov	r1, r2
 8006028:	4798      	blx	r3
      if (shut_tx) {
 800602a:	f1b8 0f00 	cmp.w	r8, #0
 800602e:	d005      	beq.n	800603c <lwip_netconn_do_close_internal+0x118>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006030:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006032:	b11b      	cbz	r3, 800603c <lwip_netconn_do_close_internal+0x118>
 8006034:	2200      	movs	r2, #0
 8006036:	2102      	movs	r1, #2
 8006038:	4620      	mov	r0, r4
 800603a:	4798      	blx	r3
    if (delayed)
 800603c:	f1ba 0f00 	cmp.w	sl, #0
 8006040:	d003      	beq.n	800604a <lwip_netconn_do_close_internal+0x126>
      sys_sem_signal(op_completed_sem);
 8006042:	f105 000c 	add.w	r0, r5, #12
 8006046:	f007 f92d 	bl	800d2a4 <sys_sem_signal>
    return ERR_OK;
 800604a:	2600      	movs	r6, #0
}
 800604c:	4630      	mov	r0, r6
 800604e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    shut_close = 0;
 8006052:	4647      	mov	r7, r8
 8006054:	e7b8      	b.n	8005fc8 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 8006056:	f1b9 0f00 	cmp.w	r9, #0
 800605a:	d007      	beq.n	800606c <lwip_netconn_do_close_internal+0x148>
      tcp_recv(tpcb, NULL);
 800605c:	2100      	movs	r1, #0
 800605e:	4628      	mov	r0, r5
 8006060:	f002 f8c2 	bl	80081e8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8006064:	2100      	movs	r1, #0
 8006066:	4628      	mov	r0, r5
 8006068:	f002 f906 	bl	8008278 <tcp_accept>
    if (shut_tx) {
 800606c:	f1b8 0f00 	cmp.w	r8, #0
 8006070:	d003      	beq.n	800607a <lwip_netconn_do_close_internal+0x156>
      tcp_sent(tpcb, NULL);
 8006072:	2100      	movs	r1, #0
 8006074:	4628      	mov	r0, r5
 8006076:	f002 f8cf 	bl	8008218 <tcp_sent>
    if (shut_close) {
 800607a:	b14f      	cbz	r7, 8006090 <lwip_netconn_do_close_internal+0x16c>
      tcp_poll(tpcb, NULL, 0);
 800607c:	2200      	movs	r2, #0
 800607e:	4628      	mov	r0, r5
 8006080:	4611      	mov	r1, r2
 8006082:	f002 f8ff 	bl	8008284 <tcp_poll>
      tcp_err(tpcb, NULL);
 8006086:	2100      	movs	r1, #0
 8006088:	4628      	mov	r0, r5
 800608a:	f002 f8dd 	bl	8008248 <tcp_err>
  if (shut_close) {
 800608e:	e7a4      	b.n	8005fda <lwip_netconn_do_close_internal+0xb6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006090:	4642      	mov	r2, r8
 8006092:	4649      	mov	r1, r9
 8006094:	4628      	mov	r0, r5
 8006096:	f002 fd0b 	bl	8008ab0 <tcp_shutdown>
 800609a:	e7a1      	b.n	8005fe0 <lwip_netconn_do_close_internal+0xbc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800609c:	7d2b      	ldrb	r3, [r5, #20]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d106      	bne.n	80060b0 <lwip_netconn_do_close_internal+0x18c>
 80060a2:	4b0e      	ldr	r3, [pc, #56]	@ (80060dc <lwip_netconn_do_close_internal+0x1b8>)
 80060a4:	f240 4241 	movw	r2, #1089	@ 0x441
 80060a8:	4913      	ldr	r1, [pc, #76]	@ (80060f8 <lwip_netconn_do_close_internal+0x1d4>)
 80060aa:	480e      	ldr	r0, [pc, #56]	@ (80060e4 <lwip_netconn_do_close_internal+0x1c0>)
 80060ac:	f007 fa4e 	bl	800d54c <iprintf>
    if (shut_tx) {
 80060b0:	f1b8 0f00 	cmp.w	r8, #0
 80060b4:	d003      	beq.n	80060be <lwip_netconn_do_close_internal+0x19a>
      tcp_sent(tpcb, sent_tcp);
 80060b6:	4911      	ldr	r1, [pc, #68]	@ (80060fc <lwip_netconn_do_close_internal+0x1d8>)
 80060b8:	4628      	mov	r0, r5
 80060ba:	f002 f8ad 	bl	8008218 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 80060be:	2201      	movs	r2, #1
 80060c0:	4628      	mov	r0, r5
 80060c2:	490f      	ldr	r1, [pc, #60]	@ (8006100 <lwip_netconn_do_close_internal+0x1dc>)
 80060c4:	f002 f8de 	bl	8008284 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80060c8:	4628      	mov	r0, r5
 80060ca:	490e      	ldr	r1, [pc, #56]	@ (8006104 <lwip_netconn_do_close_internal+0x1e0>)
 80060cc:	f002 f8bc 	bl	8008248 <tcp_err>
    tcp_arg(tpcb, conn);
 80060d0:	4621      	mov	r1, r4
 80060d2:	4628      	mov	r0, r5
 80060d4:	f002 f884 	bl	80081e0 <tcp_arg>
  return err;
 80060d8:	e7b8      	b.n	800604c <lwip_netconn_do_close_internal+0x128>
 80060da:	bf00      	nop
 80060dc:	0800e767 	.word	0x0800e767
 80060e0:	0800e65a 	.word	0x0800e65a
 80060e4:	0800e45a 	.word	0x0800e45a
 80060e8:	0800e8e4 	.word	0x0800e8e4
 80060ec:	0800e902 	.word	0x0800e902
 80060f0:	0800e926 	.word	0x0800e926
 80060f4:	0800e822 	.word	0x0800e822
 80060f8:	0800e939 	.word	0x0800e939
 80060fc:	08006185 	.word	0x08006185
 8006100:	08006109 	.word	0x08006109
 8006104:	080062b1 	.word	0x080062b1

08006108 <poll_tcp>:
{
 8006108:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800610a:	4604      	mov	r4, r0
 800610c:	b930      	cbnz	r0, 800611c <poll_tcp+0x14>
 800610e:	4b1a      	ldr	r3, [pc, #104]	@ (8006178 <poll_tcp+0x70>)
 8006110:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8006114:	4919      	ldr	r1, [pc, #100]	@ (800617c <poll_tcp+0x74>)
 8006116:	481a      	ldr	r0, [pc, #104]	@ (8006180 <poll_tcp+0x78>)
 8006118:	f007 fa18 	bl	800d54c <iprintf>
  if (conn->state == NETCONN_WRITE) {
 800611c:	7861      	ldrb	r1, [r4, #1]
 800611e:	2901      	cmp	r1, #1
 8006120:	d11c      	bne.n	800615c <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006122:	4620      	mov	r0, r4
 8006124:	f7ff fdd6 	bl	8005cd4 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006128:	7f23      	ldrb	r3, [r4, #28]
 800612a:	06da      	lsls	r2, r3, #27
 800612c:	d514      	bpl.n	8006158 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800612e:	6862      	ldr	r2, [r4, #4]
 8006130:	b192      	cbz	r2, 8006158 <poll_tcp+0x50>
 8006132:	f8b2 0064 	ldrh.w	r0, [r2, #100]	@ 0x64
 8006136:	f640 3125 	movw	r1, #2853	@ 0xb25
 800613a:	4288      	cmp	r0, r1
 800613c:	d90c      	bls.n	8006158 <poll_tcp+0x50>
 800613e:	f8b2 2066 	ldrh.w	r2, [r2, #102]	@ 0x66
 8006142:	2a06      	cmp	r2, #6
 8006144:	d808      	bhi.n	8006158 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8006146:	f023 0310 	bic.w	r3, r3, #16
 800614a:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800614c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800614e:	b11b      	cbz	r3, 8006158 <poll_tcp+0x50>
 8006150:	2200      	movs	r2, #0
 8006152:	2102      	movs	r1, #2
 8006154:	4620      	mov	r0, r4
 8006156:	4798      	blx	r3
}
 8006158:	2000      	movs	r0, #0
 800615a:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 800615c:	2904      	cmp	r1, #4
 800615e:	d1e3      	bne.n	8006128 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8006160:	6a22      	ldr	r2, [r4, #32]
 8006162:	b11a      	cbz	r2, 800616c <poll_tcp+0x64>
 8006164:	7a53      	ldrb	r3, [r2, #9]
 8006166:	b10b      	cbz	r3, 800616c <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 8006168:	3b01      	subs	r3, #1
 800616a:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800616c:	2101      	movs	r1, #1
 800616e:	4620      	mov	r0, r4
 8006170:	f7ff fed8 	bl	8005f24 <lwip_netconn_do_close_internal>
 8006174:	e7d8      	b.n	8006128 <poll_tcp+0x20>
 8006176:	bf00      	nop
 8006178:	0800e767 	.word	0x0800e767
 800617c:	0800e7f8 	.word	0x0800e7f8
 8006180:	0800e45a 	.word	0x0800e45a

08006184 <sent_tcp>:
{
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006188:	4604      	mov	r4, r0
 800618a:	b1d8      	cbz	r0, 80061c4 <sent_tcp+0x40>
    if (conn->state == NETCONN_WRITE) {
 800618c:	7841      	ldrb	r1, [r0, #1]
 800618e:	2901      	cmp	r1, #1
 8006190:	d121      	bne.n	80061d6 <sent_tcp+0x52>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006192:	f7ff fd9f 	bl	8005cd4 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006196:	6863      	ldr	r3, [r4, #4]
 8006198:	b1db      	cbz	r3, 80061d2 <sent_tcp+0x4e>
 800619a:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 800619e:	f640 3225 	movw	r2, #2853	@ 0xb25
 80061a2:	4291      	cmp	r1, r2
 80061a4:	d915      	bls.n	80061d2 <sent_tcp+0x4e>
 80061a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80061aa:	2b06      	cmp	r3, #6
 80061ac:	d811      	bhi.n	80061d2 <sent_tcp+0x4e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80061ae:	7f23      	ldrb	r3, [r4, #28]
 80061b0:	f023 0310 	bic.w	r3, r3, #16
 80061b4:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80061b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80061b8:	b15b      	cbz	r3, 80061d2 <sent_tcp+0x4e>
 80061ba:	462a      	mov	r2, r5
 80061bc:	2102      	movs	r1, #2
 80061be:	4620      	mov	r0, r4
 80061c0:	4798      	blx	r3
 80061c2:	e006      	b.n	80061d2 <sent_tcp+0x4e>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80061c4:	4b07      	ldr	r3, [pc, #28]	@ (80061e4 <sent_tcp+0x60>)
 80061c6:	f240 1293 	movw	r2, #403	@ 0x193
 80061ca:	4907      	ldr	r1, [pc, #28]	@ (80061e8 <sent_tcp+0x64>)
 80061cc:	4807      	ldr	r0, [pc, #28]	@ (80061ec <sent_tcp+0x68>)
 80061ce:	f007 f9bd 	bl	800d54c <iprintf>
}
 80061d2:	2000      	movs	r0, #0
 80061d4:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 80061d6:	2904      	cmp	r1, #4
 80061d8:	d1dd      	bne.n	8006196 <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80061da:	2101      	movs	r1, #1
 80061dc:	f7ff fea2 	bl	8005f24 <lwip_netconn_do_close_internal>
 80061e0:	e7d9      	b.n	8006196 <sent_tcp+0x12>
 80061e2:	bf00      	nop
 80061e4:	0800e767 	.word	0x0800e767
 80061e8:	0800e7f8 	.word	0x0800e7f8
 80061ec:	0800e45a 	.word	0x0800e45a

080061f0 <recv_tcp>:
{
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	4605      	mov	r5, r0
 80061f4:	4614      	mov	r4, r2
 80061f6:	461f      	mov	r7, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80061f8:	460e      	mov	r6, r1
 80061fa:	b931      	cbnz	r1, 800620a <recv_tcp+0x1a>
 80061fc:	4b25      	ldr	r3, [pc, #148]	@ (8006294 <recv_tcp+0xa4>)
 80061fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006202:	4925      	ldr	r1, [pc, #148]	@ (8006298 <recv_tcp+0xa8>)
 8006204:	4825      	ldr	r0, [pc, #148]	@ (800629c <recv_tcp+0xac>)
 8006206:	f007 f9a1 	bl	800d54c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800620a:	b9f5      	cbnz	r5, 800624a <recv_tcp+0x5a>
 800620c:	4b21      	ldr	r3, [pc, #132]	@ (8006294 <recv_tcp+0xa4>)
 800620e:	f240 122d 	movw	r2, #301	@ 0x12d
 8006212:	4923      	ldr	r1, [pc, #140]	@ (80062a0 <recv_tcp+0xb0>)
 8006214:	4821      	ldr	r0, [pc, #132]	@ (800629c <recv_tcp+0xac>)
 8006216:	f007 f999 	bl	800d54c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800621a:	b9bf      	cbnz	r7, 800624c <recv_tcp+0x5c>
    return ERR_VAL;
 800621c:	f06f 0005 	mvn.w	r0, #5
}
 8006220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (p != NULL) {
 8006222:	b164      	cbz	r4, 800623e <recv_tcp+0x4e>
    len = p->tot_len;
 8006224:	8926      	ldrh	r6, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8006226:	4621      	mov	r1, r4
 8006228:	4638      	mov	r0, r7
 800622a:	f006 ffcc 	bl	800d1c6 <sys_mbox_trypost>
 800622e:	4601      	mov	r1, r0
 8006230:	b940      	cbnz	r0, 8006244 <recv_tcp+0x54>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006232:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006234:	b363      	cbz	r3, 8006290 <recv_tcp+0xa0>
 8006236:	4632      	mov	r2, r6
 8006238:	4628      	mov	r0, r5
 800623a:	4798      	blx	r3
 800623c:	e028      	b.n	8006290 <recv_tcp+0xa0>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800623e:	4c19      	ldr	r4, [pc, #100]	@ (80062a4 <recv_tcp+0xb4>)
    len = 0;
 8006240:	2600      	movs	r6, #0
 8006242:	e7f0      	b.n	8006226 <recv_tcp+0x36>
    return ERR_MEM;
 8006244:	f04f 30ff 	mov.w	r0, #4294967295
 8006248:	e7ea      	b.n	8006220 <recv_tcp+0x30>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800624a:	b147      	cbz	r7, 800625e <recv_tcp+0x6e>
 800624c:	4b11      	ldr	r3, [pc, #68]	@ (8006294 <recv_tcp+0xa4>)
 800624e:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8006252:	4915      	ldr	r1, [pc, #84]	@ (80062a8 <recv_tcp+0xb8>)
 8006254:	4811      	ldr	r0, [pc, #68]	@ (800629c <recv_tcp+0xac>)
 8006256:	f007 f979 	bl	800d54c <iprintf>
  if (conn == NULL) {
 800625a:	2d00      	cmp	r5, #0
 800625c:	d0de      	beq.n	800621c <recv_tcp+0x2c>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800625e:	686b      	ldr	r3, [r5, #4]
 8006260:	42b3      	cmp	r3, r6
 8006262:	d006      	beq.n	8006272 <recv_tcp+0x82>
 8006264:	4b0b      	ldr	r3, [pc, #44]	@ (8006294 <recv_tcp+0xa4>)
 8006266:	f240 1235 	movw	r2, #309	@ 0x135
 800626a:	4910      	ldr	r1, [pc, #64]	@ (80062ac <recv_tcp+0xbc>)
 800626c:	480b      	ldr	r0, [pc, #44]	@ (800629c <recv_tcp+0xac>)
 800626e:	f007 f96d 	bl	800d54c <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006272:	f105 0710 	add.w	r7, r5, #16
 8006276:	4638      	mov	r0, r7
 8006278:	f006 ffdd 	bl	800d236 <sys_mbox_valid>
 800627c:	2800      	cmp	r0, #0
 800627e:	d1d0      	bne.n	8006222 <recv_tcp+0x32>
    if (p != NULL) {
 8006280:	b134      	cbz	r4, 8006290 <recv_tcp+0xa0>
      tcp_recved(pcb, p->tot_len);
 8006282:	4630      	mov	r0, r6
 8006284:	8921      	ldrh	r1, [r4, #8]
 8006286:	f001 ff33 	bl	80080f0 <tcp_recved>
      pbuf_free(p);
 800628a:	4620      	mov	r0, r4
 800628c:	f001 fb30 	bl	80078f0 <pbuf_free>
    return ERR_OK;
 8006290:	2000      	movs	r0, #0
 8006292:	e7c5      	b.n	8006220 <recv_tcp+0x30>
 8006294:	0800e767 	.word	0x0800e767
 8006298:	0800e95c 	.word	0x0800e95c
 800629c:	0800e45a 	.word	0x0800e45a
 80062a0:	0800e97e 	.word	0x0800e97e
 80062a4:	0800eb6c 	.word	0x0800eb6c
 80062a8:	0800e99d 	.word	0x0800e99d
 80062ac:	0800e9b5 	.word	0x0800e9b5

080062b0 <err_tcp>:
{
 80062b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b4:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80062b6:	4604      	mov	r4, r0
 80062b8:	b930      	cbnz	r0, 80062c8 <err_tcp+0x18>
 80062ba:	4b42      	ldr	r3, [pc, #264]	@ (80063c4 <err_tcp+0x114>)
 80062bc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80062c0:	4941      	ldr	r1, [pc, #260]	@ (80063c8 <err_tcp+0x118>)
 80062c2:	4842      	ldr	r0, [pc, #264]	@ (80063cc <err_tcp+0x11c>)
 80062c4:	f007 f942 	bl	800d54c <iprintf>
  SYS_ARCH_PROTECT(lev);
 80062c8:	f007 f82e 	bl	800d328 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80062cc:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 80062ce:	2700      	movs	r7, #0
  old_state = conn->state;
 80062d0:	7866      	ldrb	r6, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80062d2:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 80062d6:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 80062d8:	6067      	str	r7, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80062da:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 80062dc:	7067      	strb	r7, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 80062de:	f007 f82f 	bl	800d340 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80062e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062e4:	b11b      	cbz	r3, 80062ee <err_tcp+0x3e>
 80062e6:	463a      	mov	r2, r7
 80062e8:	2104      	movs	r1, #4
 80062ea:	4620      	mov	r0, r4
 80062ec:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80062ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062f0:	b11b      	cbz	r3, 80062fa <err_tcp+0x4a>
 80062f2:	2200      	movs	r2, #0
 80062f4:	4620      	mov	r0, r4
 80062f6:	4611      	mov	r1, r2
 80062f8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80062fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062fc:	b11b      	cbz	r3, 8006306 <err_tcp+0x56>
 80062fe:	2200      	movs	r2, #0
 8006300:	2102      	movs	r1, #2
 8006302:	4620      	mov	r0, r4
 8006304:	4798      	blx	r3
  switch (err) {
 8006306:	f105 030f 	add.w	r3, r5, #15
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d843      	bhi.n	8006398 <err_tcp+0xe8>
 8006310:	4a2f      	ldr	r2, [pc, #188]	@ (80063d0 <err_tcp+0x120>)
 8006312:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006316:	f104 0810 	add.w	r8, r4, #16
 800631a:	4640      	mov	r0, r8
 800631c:	f006 ff8b 	bl	800d236 <sys_mbox_valid>
 8006320:	b118      	cbz	r0, 800632a <err_tcp+0x7a>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8006322:	4639      	mov	r1, r7
 8006324:	4640      	mov	r0, r8
 8006326:	f006 ff4e 	bl	800d1c6 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800632a:	f104 0814 	add.w	r8, r4, #20
 800632e:	4640      	mov	r0, r8
 8006330:	f006 ff81 	bl	800d236 <sys_mbox_valid>
 8006334:	b118      	cbz	r0, 800633e <err_tcp+0x8e>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8006336:	4639      	mov	r1, r7
 8006338:	4640      	mov	r0, r8
 800633a:	f006 ff44 	bl	800d1c6 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800633e:	2e01      	cmp	r6, #1
 8006340:	d002      	beq.n	8006348 <err_tcp+0x98>
 8006342:	1ef3      	subs	r3, r6, #3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d830      	bhi.n	80063aa <err_tcp+0xfa>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8006348:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800634a:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 800634e:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8006350:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8006352:	d435      	bmi.n	80063c0 <err_tcp+0x110>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006354:	6a23      	ldr	r3, [r4, #32]
 8006356:	b933      	cbnz	r3, 8006366 <err_tcp+0xb6>
 8006358:	4b1a      	ldr	r3, [pc, #104]	@ (80063c4 <err_tcp+0x114>)
 800635a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800635e:	491d      	ldr	r1, [pc, #116]	@ (80063d4 <err_tcp+0x124>)
 8006360:	481a      	ldr	r0, [pc, #104]	@ (80063cc <err_tcp+0x11c>)
 8006362:	f007 f8f3 	bl	800d54c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8006366:	2e04      	cmp	r6, #4
        conn->current_msg->err = ERR_OK;
 8006368:	6a23      	ldr	r3, [r4, #32]
 800636a:	bf08      	it	eq
 800636c:	2500      	moveq	r5, #0
 800636e:	711d      	strb	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006370:	681d      	ldr	r5, [r3, #0]
 8006372:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8006374:	4628      	mov	r0, r5
 8006376:	f006 ff9b 	bl	800d2b0 <sys_sem_valid>
 800637a:	b930      	cbnz	r0, 800638a <err_tcp+0xda>
 800637c:	4b11      	ldr	r3, [pc, #68]	@ (80063c4 <err_tcp+0x114>)
 800637e:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8006382:	4915      	ldr	r1, [pc, #84]	@ (80063d8 <err_tcp+0x128>)
 8006384:	4811      	ldr	r0, [pc, #68]	@ (80063cc <err_tcp+0x11c>)
 8006386:	f007 f8e1 	bl	800d54c <iprintf>
      conn->current_msg = NULL;
 800638a:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 800638c:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 800638e:	6223      	str	r3, [r4, #32]
}
 8006390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8006394:	f006 bf86 	b.w	800d2a4 <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8006398:	b12d      	cbz	r5, 80063a6 <err_tcp+0xf6>
 800639a:	4b0a      	ldr	r3, [pc, #40]	@ (80063c4 <err_tcp+0x114>)
 800639c:	227d      	movs	r2, #125	@ 0x7d
 800639e:	490f      	ldr	r1, [pc, #60]	@ (80063dc <err_tcp+0x12c>)
 80063a0:	480a      	ldr	r0, [pc, #40]	@ (80063cc <err_tcp+0x11c>)
 80063a2:	f007 f8d3 	bl	800d54c <iprintf>
{
 80063a6:	2700      	movs	r7, #0
 80063a8:	e7b5      	b.n	8006316 <err_tcp+0x66>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80063aa:	6a23      	ldr	r3, [r4, #32]
 80063ac:	b143      	cbz	r3, 80063c0 <err_tcp+0x110>
 80063ae:	4b05      	ldr	r3, [pc, #20]	@ (80063c4 <err_tcp+0x114>)
 80063b0:	f240 12f7 	movw	r2, #503	@ 0x1f7
 80063b4:	490a      	ldr	r1, [pc, #40]	@ (80063e0 <err_tcp+0x130>)
 80063b6:	4805      	ldr	r0, [pc, #20]	@ (80063cc <err_tcp+0x11c>)
}
 80063b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80063bc:	f007 b8c6 	b.w	800d54c <iprintf>
}
 80063c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c4:	0800e767 	.word	0x0800e767
 80063c8:	0800e7f8 	.word	0x0800e7f8
 80063cc:	0800e45a 	.word	0x0800e45a
 80063d0:	0800eb60 	.word	0x0800eb60
 80063d4:	0800e822 	.word	0x0800e822
 80063d8:	0800e9e3 	.word	0x0800e9e3
 80063dc:	0800e9d3 	.word	0x0800e9d3
 80063e0:	0800e9fc 	.word	0x0800e9fc

080063e4 <lwip_netconn_is_err_msg>:
{
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 80063e8:	460d      	mov	r5, r1
 80063ea:	b929      	cbnz	r1, 80063f8 <lwip_netconn_is_err_msg+0x14>
 80063ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <lwip_netconn_is_err_msg+0x40>)
 80063ee:	2285      	movs	r2, #133	@ 0x85
 80063f0:	490d      	ldr	r1, [pc, #52]	@ (8006428 <lwip_netconn_is_err_msg+0x44>)
 80063f2:	480e      	ldr	r0, [pc, #56]	@ (800642c <lwip_netconn_is_err_msg+0x48>)
 80063f4:	f007 f8aa 	bl	800d54c <iprintf>
  if (msg == &netconn_aborted) {
 80063f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006430 <lwip_netconn_is_err_msg+0x4c>)
 80063fa:	429c      	cmp	r4, r3
 80063fc:	d007      	beq.n	800640e <lwip_netconn_is_err_msg+0x2a>
  } else if (msg == &netconn_reset) {
 80063fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006434 <lwip_netconn_is_err_msg+0x50>)
 8006400:	429c      	cmp	r4, r3
 8006402:	d10a      	bne.n	800641a <lwip_netconn_is_err_msg+0x36>
 8006404:	f06f 030d 	mvn.w	r3, #13
    return 1;
 8006408:	2001      	movs	r0, #1
    *err = ERR_RST;
 800640a:	702b      	strb	r3, [r5, #0]
}
 800640c:	bd38      	pop	{r3, r4, r5, pc}
 800640e:	f06f 030c 	mvn.w	r3, #12
 8006412:	e7f9      	b.n	8006408 <lwip_netconn_is_err_msg+0x24>
 8006414:	f06f 030e 	mvn.w	r3, #14
 8006418:	e7f6      	b.n	8006408 <lwip_netconn_is_err_msg+0x24>
  } else if (msg == &netconn_closed) {
 800641a:	4b07      	ldr	r3, [pc, #28]	@ (8006438 <lwip_netconn_is_err_msg+0x54>)
 800641c:	429c      	cmp	r4, r3
 800641e:	d0f9      	beq.n	8006414 <lwip_netconn_is_err_msg+0x30>
  return 0;
 8006420:	2000      	movs	r0, #0
 8006422:	e7f3      	b.n	800640c <lwip_netconn_is_err_msg+0x28>
 8006424:	0800e767 	.word	0x0800e767
 8006428:	0800ea16 	.word	0x0800ea16
 800642c:	0800e45a 	.word	0x0800e45a
 8006430:	0800eb6e 	.word	0x0800eb6e
 8006434:	0800eb6d 	.word	0x0800eb6d
 8006438:	0800eb6c 	.word	0x0800eb6c

0800643c <lwip_netconn_do_newconn>:
{
 800643c:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800643e:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8006440:	6805      	ldr	r5, [r0, #0]
{
 8006442:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8006444:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8006446:	6868      	ldr	r0, [r5, #4]
 8006448:	bb28      	cbnz	r0, 8006496 <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800644a:	782b      	ldrb	r3, [r5, #0]
 800644c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006450:	2b10      	cmp	r3, #16
 8006452:	d014      	beq.n	800647e <lwip_netconn_do_newconn+0x42>
 8006454:	2b20      	cmp	r3, #32
 8006456:	d11c      	bne.n	8006492 <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006458:	f005 fc1c 	bl	800bc94 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 800645c:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800645e:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8006460:	6850      	ldr	r0, [r2, #4]
 8006462:	b150      	cbz	r0, 800647a <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006464:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006466:	490c      	ldr	r1, [pc, #48]	@ (8006498 <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006468:	2b22      	cmp	r3, #34	@ 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800646a:	bf04      	itt	eq
 800646c:	2301      	moveq	r3, #1
 800646e:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006470:	f005 fbca 	bl	800bc08 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	b96b      	cbnz	r3, 8006496 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 800647a:	23ff      	movs	r3, #255	@ 0xff
 800647c:	e00a      	b.n	8006494 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800647e:	f002 f999 	bl	80087b4 <tcp_new_ip_type>
 8006482:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8006484:	6820      	ldr	r0, [r4, #0]
 8006486:	6843      	ldr	r3, [r0, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0f6      	beq.n	800647a <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 800648c:	f7ff fc00 	bl	8005c90 <setup_tcp>
 8006490:	e7f0      	b.n	8006474 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 8006492:	23fa      	movs	r3, #250	@ 0xfa
    msg->err = ERR_MEM;
 8006494:	7123      	strb	r3, [r4, #4]
}
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	08005be5 	.word	0x08005be5

0800649c <netconn_alloc>:
{
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80064a0:	2007      	movs	r0, #7
{
 80064a2:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80064a4:	f000 ff92 	bl	80073cc <memp_malloc>
  if (conn == NULL) {
 80064a8:	4604      	mov	r4, r0
 80064aa:	b1a0      	cbz	r0, 80064d6 <netconn_alloc+0x3a>
  conn->type = t;
 80064ac:	7005      	strb	r5, [r0, #0]
 80064ae:	f005 05f0 	and.w	r5, r5, #240	@ 0xf0
  conn->pending_err = ERR_OK;
 80064b2:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 80064b4:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 80064b6:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 80064b8:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 80064ba:	d00e      	beq.n	80064da <netconn_alloc+0x3e>
 80064bc:	2d20      	cmp	r5, #32
 80064be:	d00c      	beq.n	80064da <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80064c0:	4b16      	ldr	r3, [pc, #88]	@ (800651c <netconn_alloc+0x80>)
 80064c2:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80064c6:	4916      	ldr	r1, [pc, #88]	@ (8006520 <netconn_alloc+0x84>)
 80064c8:	4816      	ldr	r0, [pc, #88]	@ (8006524 <netconn_alloc+0x88>)
 80064ca:	f007 f83f 	bl	800d54c <iprintf>
  memp_free(MEMP_NETCONN, conn);
 80064ce:	4621      	mov	r1, r4
 80064d0:	2007      	movs	r0, #7
 80064d2:	f000 ffa9 	bl	8007428 <memp_free>
    return NULL;
 80064d6:	2400      	movs	r4, #0
 80064d8:	e01d      	b.n	8006516 <netconn_alloc+0x7a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80064da:	f104 0710 	add.w	r7, r4, #16
 80064de:	2106      	movs	r1, #6
 80064e0:	4638      	mov	r0, r7
 80064e2:	f006 fe59 	bl	800d198 <sys_mbox_new>
 80064e6:	4601      	mov	r1, r0
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d1f0      	bne.n	80064ce <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80064ec:	f104 000c 	add.w	r0, r4, #12
 80064f0:	f006 fea9 	bl	800d246 <sys_sem_new>
 80064f4:	4605      	mov	r5, r0
 80064f6:	b118      	cbz	r0, 8006500 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 80064f8:	4638      	mov	r0, r7
 80064fa:	f006 fe5a 	bl	800d1b2 <sys_mbox_free>
    goto free_and_return;
 80064fe:	e7e6      	b.n	80064ce <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8006500:	f104 0014 	add.w	r0, r4, #20
 8006504:	f006 fe9c 	bl	800d240 <sys_mbox_set_invalid>
  conn->socket       = -1;
 8006508:	f04f 33ff 	mov.w	r3, #4294967295
  conn->state        = NETCONN_NONE;
 800650c:	7065      	strb	r5, [r4, #1]
  conn->socket       = -1;
 800650e:	61a3      	str	r3, [r4, #24]
  conn->flags = init_flags;
 8006510:	7725      	strb	r5, [r4, #28]
  conn->current_msg  = NULL;
 8006512:	e9c4 5608 	strd	r5, r6, [r4, #32]
}
 8006516:	4620      	mov	r0, r4
 8006518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800651a:	bf00      	nop
 800651c:	0800e767 	.word	0x0800e767
 8006520:	0800ea22 	.word	0x0800ea22
 8006524:	0800e45a 	.word	0x0800e45a

08006528 <netconn_free>:
{
 8006528:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800652a:	6843      	ldr	r3, [r0, #4]
{
 800652c:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800652e:	b133      	cbz	r3, 800653e <netconn_free+0x16>
 8006530:	4b16      	ldr	r3, [pc, #88]	@ (800658c <netconn_free+0x64>)
 8006532:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8006536:	4916      	ldr	r1, [pc, #88]	@ (8006590 <netconn_free+0x68>)
 8006538:	4816      	ldr	r0, [pc, #88]	@ (8006594 <netconn_free+0x6c>)
 800653a:	f007 f807 	bl	800d54c <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800653e:	f104 0010 	add.w	r0, r4, #16
 8006542:	f006 fe78 	bl	800d236 <sys_mbox_valid>
 8006546:	b130      	cbz	r0, 8006556 <netconn_free+0x2e>
 8006548:	4b10      	ldr	r3, [pc, #64]	@ (800658c <netconn_free+0x64>)
 800654a:	f240 3223 	movw	r2, #803	@ 0x323
 800654e:	4912      	ldr	r1, [pc, #72]	@ (8006598 <netconn_free+0x70>)
 8006550:	4810      	ldr	r0, [pc, #64]	@ (8006594 <netconn_free+0x6c>)
 8006552:	f006 fffb 	bl	800d54c <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8006556:	f104 0014 	add.w	r0, r4, #20
 800655a:	f006 fe6c 	bl	800d236 <sys_mbox_valid>
 800655e:	b130      	cbz	r0, 800656e <netconn_free+0x46>
 8006560:	4b0a      	ldr	r3, [pc, #40]	@ (800658c <netconn_free+0x64>)
 8006562:	f240 3226 	movw	r2, #806	@ 0x326
 8006566:	490d      	ldr	r1, [pc, #52]	@ (800659c <netconn_free+0x74>)
 8006568:	480a      	ldr	r0, [pc, #40]	@ (8006594 <netconn_free+0x6c>)
 800656a:	f006 ffef 	bl	800d54c <iprintf>
  sys_sem_free(&conn->op_completed);
 800656e:	f104 050c 	add.w	r5, r4, #12
 8006572:	4628      	mov	r0, r5
 8006574:	f006 fe99 	bl	800d2aa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8006578:	4628      	mov	r0, r5
 800657a:	f006 fe9e 	bl	800d2ba <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 800657e:	4621      	mov	r1, r4
 8006580:	2007      	movs	r0, #7
}
 8006582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 8006586:	f000 bf4f 	b.w	8007428 <memp_free>
 800658a:	bf00      	nop
 800658c:	0800e767 	.word	0x0800e767
 8006590:	0800ea48 	.word	0x0800ea48
 8006594:	0800e45a 	.word	0x0800e45a
 8006598:	0800ea76 	.word	0x0800ea76
 800659c:	0800eab0 	.word	0x0800eab0

080065a0 <netconn_drain>:
{
 80065a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 80065a2:	f100 0510 	add.w	r5, r0, #16
{
 80065a6:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 80065a8:	4628      	mov	r0, r5
 80065aa:	f006 fe44 	bl	800d236 <sys_mbox_valid>
 80065ae:	b158      	cbz	r0, 80065c8 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80065b0:	a901      	add	r1, sp, #4
 80065b2:	4628      	mov	r0, r5
 80065b4:	f006 fe34 	bl	800d220 <sys_arch_mbox_tryfetch>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d118      	bne.n	80065ee <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 80065bc:	4628      	mov	r0, r5
 80065be:	f006 fdf8 	bl	800d1b2 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80065c2:	4628      	mov	r0, r5
 80065c4:	f006 fe3c 	bl	800d240 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80065c8:	3414      	adds	r4, #20
 80065ca:	4620      	mov	r0, r4
 80065cc:	f006 fe33 	bl	800d236 <sys_mbox_valid>
 80065d0:	b158      	cbz	r0, 80065ea <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80065d2:	a901      	add	r1, sp, #4
 80065d4:	4620      	mov	r0, r4
 80065d6:	f006 fe23 	bl	800d220 <sys_arch_mbox_tryfetch>
 80065da:	3001      	adds	r0, #1
 80065dc:	d11a      	bne.n	8006614 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 80065de:	4620      	mov	r0, r4
 80065e0:	f006 fde7 	bl	800d1b2 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80065e4:	4620      	mov	r0, r4
 80065e6:	f006 fe2b 	bl	800d240 <sys_mbox_set_invalid>
}
 80065ea:	b002      	add	sp, #8
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80065ee:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80065f0:	9801      	ldr	r0, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80065f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d109      	bne.n	800660e <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80065fa:	f10d 0103 	add.w	r1, sp, #3
 80065fe:	f7ff fef1 	bl	80063e4 <lwip_netconn_is_err_msg>
 8006602:	2800      	cmp	r0, #0
 8006604:	d1d4      	bne.n	80065b0 <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 8006606:	9801      	ldr	r0, [sp, #4]
 8006608:	f001 f972 	bl	80078f0 <pbuf_free>
 800660c:	e7d0      	b.n	80065b0 <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 800660e:	f000 fa67 	bl	8006ae0 <netbuf_delete>
 8006612:	e7cd      	b.n	80065b0 <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006614:	f10d 0103 	add.w	r1, sp, #3
 8006618:	9801      	ldr	r0, [sp, #4]
 800661a:	f7ff fee3 	bl	80063e4 <lwip_netconn_is_err_msg>
 800661e:	4606      	mov	r6, r0
 8006620:	2800      	cmp	r0, #0
 8006622:	d1d6      	bne.n	80065d2 <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 8006624:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8006626:	4628      	mov	r0, r5
 8006628:	f7ff ffba 	bl	80065a0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800662c:	6868      	ldr	r0, [r5, #4]
 800662e:	b110      	cbz	r0, 8006636 <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 8006630:	f001 ffac 	bl	800858c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8006634:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 8006636:	4628      	mov	r0, r5
 8006638:	f7ff ff76 	bl	8006528 <netconn_free>
 800663c:	e7c9      	b.n	80065d2 <netconn_drain+0x32>
	...

08006640 <accept_function>:
{
 8006640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006642:	460f      	mov	r7, r1
 8006644:	4615      	mov	r5, r2
  if (conn == NULL) {
 8006646:	4604      	mov	r4, r0
 8006648:	b188      	cbz	r0, 800666e <accept_function+0x2e>
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800664a:	f100 0614 	add.w	r6, r0, #20
 800664e:	4630      	mov	r0, r6
 8006650:	f006 fdf1 	bl	800d236 <sys_mbox_valid>
 8006654:	b158      	cbz	r0, 800666e <accept_function+0x2e>
  if (newpcb == NULL) {
 8006656:	b977      	cbnz	r7, 8006676 <accept_function+0x36>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8006658:	492f      	ldr	r1, [pc, #188]	@ (8006718 <accept_function+0xd8>)
 800665a:	4630      	mov	r0, r6
 800665c:	f006 fdb3 	bl	800d1c6 <sys_mbox_trypost>
 8006660:	4602      	mov	r2, r0
 8006662:	b920      	cbnz	r0, 800666e <accept_function+0x2e>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006664:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006666:	b113      	cbz	r3, 800666e <accept_function+0x2e>
 8006668:	4601      	mov	r1, r0
 800666a:	4620      	mov	r0, r4
 800666c:	4798      	blx	r3
    return ERR_VAL;
 800666e:	f06f 0605 	mvn.w	r6, #5
}
 8006672:	4630      	mov	r0, r6
 8006674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8006676:	b135      	cbz	r5, 8006686 <accept_function+0x46>
 8006678:	4b28      	ldr	r3, [pc, #160]	@ (800671c <accept_function+0xdc>)
 800667a:	f240 222a 	movw	r2, #554	@ 0x22a
 800667e:	4928      	ldr	r1, [pc, #160]	@ (8006720 <accept_function+0xe0>)
 8006680:	4828      	ldr	r0, [pc, #160]	@ (8006724 <accept_function+0xe4>)
 8006682:	f006 ff63 	bl	800d54c <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 8006686:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006688:	7820      	ldrb	r0, [r4, #0]
 800668a:	f7ff ff07 	bl	800649c <netconn_alloc>
  if (newconn == NULL) {
 800668e:	4605      	mov	r5, r0
 8006690:	b968      	cbnz	r0, 80066ae <accept_function+0x6e>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8006692:	4921      	ldr	r1, [pc, #132]	@ (8006718 <accept_function+0xd8>)
 8006694:	4630      	mov	r0, r6
 8006696:	f006 fd96 	bl	800d1c6 <sys_mbox_trypost>
 800669a:	4602      	mov	r2, r0
 800669c:	b920      	cbnz	r0, 80066a8 <accept_function+0x68>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800669e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80066a0:	b113      	cbz	r3, 80066a8 <accept_function+0x68>
 80066a2:	4601      	mov	r1, r0
 80066a4:	4620      	mov	r0, r4
 80066a6:	4798      	blx	r3
    return ERR_MEM;
 80066a8:	f04f 36ff 	mov.w	r6, #4294967295
 80066ac:	e7e1      	b.n	8006672 <accept_function+0x32>
  newconn->pcb.tcp = newpcb;
 80066ae:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 80066b0:	f7ff faee 	bl	8005c90 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80066b4:	4630      	mov	r0, r6
 80066b6:	4629      	mov	r1, r5
 80066b8:	f006 fd85 	bl	800d1c6 <sys_mbox_trypost>
 80066bc:	4606      	mov	r6, r0
 80066be:	b318      	cbz	r0, 8006708 <accept_function+0xc8>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80066c0:	686c      	ldr	r4, [r5, #4]
    tcp_arg(pcb, NULL);
 80066c2:	2100      	movs	r1, #0
 80066c4:	4620      	mov	r0, r4
 80066c6:	f001 fd8b 	bl	80081e0 <tcp_arg>
    tcp_recv(pcb, NULL);
 80066ca:	4620      	mov	r0, r4
 80066cc:	2100      	movs	r1, #0
 80066ce:	f001 fd8b 	bl	80081e8 <tcp_recv>
    tcp_sent(pcb, NULL);
 80066d2:	4620      	mov	r0, r4
 80066d4:	2100      	movs	r1, #0
 80066d6:	f001 fd9f 	bl	8008218 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80066da:	2200      	movs	r2, #0
 80066dc:	4620      	mov	r0, r4
 80066de:	4611      	mov	r1, r2
 80066e0:	f001 fdd0 	bl	8008284 <tcp_poll>
    tcp_err(pcb, NULL);
 80066e4:	2100      	movs	r1, #0
 80066e6:	4620      	mov	r0, r4
    sys_mbox_free(&newconn->recvmbox);
 80066e8:	f105 0410 	add.w	r4, r5, #16
    tcp_err(pcb, NULL);
 80066ec:	f001 fdac 	bl	8008248 <tcp_err>
    newconn->pcb.tcp = NULL;
 80066f0:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 80066f2:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 80066f4:	606b      	str	r3, [r5, #4]
    sys_mbox_free(&newconn->recvmbox);
 80066f6:	f006 fd5c 	bl	800d1b2 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80066fa:	4620      	mov	r0, r4
 80066fc:	f006 fda0 	bl	800d240 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8006700:	4628      	mov	r0, r5
 8006702:	f7ff ff11 	bl	8006528 <netconn_free>
    return ERR_MEM;
 8006706:	e7cf      	b.n	80066a8 <accept_function+0x68>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006708:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0b1      	beq.n	8006672 <accept_function+0x32>
 800670e:	4602      	mov	r2, r0
 8006710:	4601      	mov	r1, r0
 8006712:	4620      	mov	r0, r4
 8006714:	4798      	blx	r3
 8006716:	e7ac      	b.n	8006672 <accept_function+0x32>
 8006718:	0800eb6e 	.word	0x0800eb6e
 800671c:	0800e767 	.word	0x0800e767
 8006720:	0800eaec 	.word	0x0800eaec
 8006724:	0800e45a 	.word	0x0800e45a

08006728 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 8006728:	6803      	ldr	r3, [r0, #0]
{
 800672a:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 800672c:	785d      	ldrb	r5, [r3, #1]
{
 800672e:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8006730:	b1dd      	cbz	r5, 800676a <lwip_netconn_do_delconn+0x42>
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006738:	2b10      	cmp	r3, #16
 800673a:	d006      	beq.n	800674a <lwip_netconn_do_delconn+0x22>
 800673c:	4b37      	ldr	r3, [pc, #220]	@ (800681c <lwip_netconn_do_delconn+0xf4>)
 800673e:	f240 425e 	movw	r2, #1118	@ 0x45e
 8006742:	4937      	ldr	r1, [pc, #220]	@ (8006820 <lwip_netconn_do_delconn+0xf8>)
 8006744:	4837      	ldr	r0, [pc, #220]	@ (8006824 <lwip_netconn_do_delconn+0xfc>)
 8006746:	f006 ff01 	bl	800d54c <iprintf>
  if (((state != NETCONN_NONE) &&
 800674a:	2d02      	cmp	r5, #2
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800674c:	6823      	ldr	r3, [r4, #0]
  if (((state != NETCONN_NONE) &&
 800674e:	d00c      	beq.n	800676a <lwip_netconn_do_delconn+0x42>
       (state != NETCONN_LISTEN) &&
 8006750:	2d03      	cmp	r5, #3
 8006752:	d102      	bne.n	800675a <lwip_netconn_do_delconn+0x32>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8006754:	7f1b      	ldrb	r3, [r3, #28]
 8006756:	075b      	lsls	r3, r3, #29
 8006758:	d407      	bmi.n	800676a <lwip_netconn_do_delconn+0x42>
    msg->err = ERR_INPROGRESS;
 800675a:	23fb      	movs	r3, #251	@ 0xfb
 800675c:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800675e:	6820      	ldr	r0, [r4, #0]
}
 8006760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006764:	300c      	adds	r0, #12
 8006766:	f006 bda3 	b.w	800d2b0 <sys_sem_valid>
    msg->err = ERR_OK;
 800676a:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 800676c:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 800676e:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8006770:	f7ff ff16 	bl	80065a0 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	6850      	ldr	r0, [r2, #4]
 8006778:	b160      	cbz	r0, 8006794 <lwip_netconn_do_delconn+0x6c>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800677a:	7813      	ldrb	r3, [r2, #0]
 800677c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006780:	2b10      	cmp	r3, #16
 8006782:	d015      	beq.n	80067b0 <lwip_netconn_do_delconn+0x88>
 8006784:	2b20      	cmp	r3, #32
 8006786:	d102      	bne.n	800678e <lwip_netconn_do_delconn+0x66>
          msg->conn->pcb.udp->recv_arg = NULL;
 8006788:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 800678a:	f005 fa4f 	bl	800bc2c <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	2200      	movs	r2, #0
 8006792:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8006794:	6820      	ldr	r0, [r4, #0]
 8006796:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006798:	b113      	cbz	r3, 80067a0 <lwip_netconn_do_delconn+0x78>
 800679a:	2200      	movs	r2, #0
 800679c:	4611      	mov	r1, r2
 800679e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0da      	beq.n	800675e <lwip_netconn_do_delconn+0x36>
 80067a8:	2200      	movs	r2, #0
 80067aa:	2102      	movs	r1, #2
 80067ac:	4798      	blx	r3
 80067ae:	e7d6      	b.n	800675e <lwip_netconn_do_delconn+0x36>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80067b0:	6a13      	ldr	r3, [r2, #32]
 80067b2:	b133      	cbz	r3, 80067c2 <lwip_netconn_do_delconn+0x9a>
 80067b4:	4b19      	ldr	r3, [pc, #100]	@ (800681c <lwip_netconn_do_delconn+0xf4>)
 80067b6:	f240 4294 	movw	r2, #1172	@ 0x494
 80067ba:	491b      	ldr	r1, [pc, #108]	@ (8006828 <lwip_netconn_do_delconn+0x100>)
 80067bc:	4819      	ldr	r0, [pc, #100]	@ (8006824 <lwip_netconn_do_delconn+0xfc>)
 80067be:	f006 fec5 	bl	800d54c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80067c2:	6820      	ldr	r0, [r4, #0]
 80067c4:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80067c6:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 80067c8:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80067ca:	2303      	movs	r3, #3
 80067cc:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 80067ce:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80067d0:	f7ff fba8 	bl	8005f24 <lwip_netconn_do_close_internal>
 80067d4:	b308      	cbz	r0, 800681a <lwip_netconn_do_delconn+0xf2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d006      	beq.n	80067ec <lwip_netconn_do_delconn+0xc4>
 80067de:	4b0f      	ldr	r3, [pc, #60]	@ (800681c <lwip_netconn_do_delconn+0xf4>)
 80067e0:	f240 429a 	movw	r2, #1178	@ 0x49a
 80067e4:	4911      	ldr	r1, [pc, #68]	@ (800682c <lwip_netconn_do_delconn+0x104>)
 80067e6:	480f      	ldr	r0, [pc, #60]	@ (8006824 <lwip_netconn_do_delconn+0xfc>)
 80067e8:	f006 feb0 	bl	800d54c <iprintf>
            UNLOCK_TCPIP_CORE();
 80067ec:	4810      	ldr	r0, [pc, #64]	@ (8006830 <lwip_netconn_do_delconn+0x108>)
 80067ee:	f006 fd81 	bl	800d2f4 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80067f2:	6820      	ldr	r0, [r4, #0]
 80067f4:	2100      	movs	r1, #0
 80067f6:	300c      	adds	r0, #12
 80067f8:	f006 fd39 	bl	800d26e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80067fc:	480c      	ldr	r0, [pc, #48]	@ (8006830 <lwip_netconn_do_delconn+0x108>)
 80067fe:	f006 fd74 	bl	800d2ea <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	b143      	cbz	r3, 800681a <lwip_netconn_do_delconn+0xf2>
 8006808:	4b04      	ldr	r3, [pc, #16]	@ (800681c <lwip_netconn_do_delconn+0xf4>)
 800680a:	f240 429e 	movw	r2, #1182	@ 0x49e
 800680e:	4907      	ldr	r1, [pc, #28]	@ (800682c <lwip_netconn_do_delconn+0x104>)
 8006810:	4804      	ldr	r0, [pc, #16]	@ (8006824 <lwip_netconn_do_delconn+0xfc>)
}
 8006812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006816:	f006 be99 	b.w	800d54c <iprintf>
}
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	0800e767 	.word	0x0800e767
 8006820:	0800eb13 	.word	0x0800eb13
 8006824:	0800e45a 	.word	0x0800e45a
 8006828:	0800eb27 	.word	0x0800eb27
 800682c:	0800eb42 	.word	0x0800eb42
 8006830:	2002ed44 	.word	0x2002ed44

08006834 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8006834:	6803      	ldr	r3, [r0, #0]
{
 8006836:	b510      	push	{r4, lr}
 8006838:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800683a:	6858      	ldr	r0, [r3, #4]
 800683c:	b188      	cbz	r0, 8006862 <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006844:	2b10      	cmp	r3, #16
 8006846:	d007      	beq.n	8006858 <lwip_netconn_do_bind+0x24>
 8006848:	2b20      	cmp	r3, #32
 800684a:	d10a      	bne.n	8006862 <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800684c:	89a2      	ldrh	r2, [r4, #12]
 800684e:	68a1      	ldr	r1, [r4, #8]
 8006850:	f005 f96e 	bl	800bb30 <udp_bind>
  msg->err = err;
 8006854:	7120      	strb	r0, [r4, #4]
}
 8006856:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006858:	89a2      	ldrh	r2, [r4, #12]
 800685a:	68a1      	ldr	r1, [r4, #8]
 800685c:	f001 fb56 	bl	8007f0c <tcp_bind>
        break;
 8006860:	e7f8      	b.n	8006854 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006862:	f06f 0005 	mvn.w	r0, #5
 8006866:	e7f5      	b.n	8006854 <lwip_netconn_do_bind+0x20>

08006868 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8006868:	6803      	ldr	r3, [r0, #0]
{
 800686a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800686c:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800686e:	6858      	ldr	r0, [r3, #4]
 8006870:	2800      	cmp	r0, #0
 8006872:	d04f      	beq.n	8006914 <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800687a:	2a10      	cmp	r2, #16
 800687c:	d14c      	bne.n	8006918 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 800687e:	785b      	ldrb	r3, [r3, #1]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d143      	bne.n	800690c <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8006884:	7d03      	ldrb	r3, [r0, #20]
 8006886:	b11b      	cbz	r3, 8006890 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 8006888:	23fa      	movs	r3, #250	@ 0xfa
      err = ERR_ARG;
 800688a:	f88d 3007 	strb.w	r3, [sp, #7]
 800688e:	e031      	b.n	80068f4 <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8006890:	f10d 0207 	add.w	r2, sp, #7
 8006894:	21ff      	movs	r1, #255	@ 0xff
 8006896:	f001 fb8f 	bl	8007fb8 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 800689a:	4605      	mov	r5, r0
 800689c:	b350      	cbz	r0, 80068f4 <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800689e:	6820      	ldr	r0, [r4, #0]
 80068a0:	3010      	adds	r0, #16
 80068a2:	f006 fcc8 	bl	800d236 <sys_mbox_valid>
 80068a6:	b138      	cbz	r0, 80068b8 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 80068a8:	6820      	ldr	r0, [r4, #0]
 80068aa:	3010      	adds	r0, #16
 80068ac:	f006 fc81 	bl	800d1b2 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	3010      	adds	r0, #16
 80068b4:	f006 fcc4 	bl	800d240 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80068b8:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 80068ba:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80068bc:	3014      	adds	r0, #20
            err = ERR_OK;
 80068be:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80068c2:	f006 fcb8 	bl	800d236 <sys_mbox_valid>
 80068c6:	b930      	cbnz	r0, 80068d6 <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	2106      	movs	r1, #6
 80068cc:	3014      	adds	r0, #20
 80068ce:	f006 fc63 	bl	800d198 <sys_mbox_new>
 80068d2:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 80068d6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80068da:	b983      	cbnz	r3, 80068fe <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 80068dc:	6821      	ldr	r1, [r4, #0]
 80068de:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80068e0:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 80068e2:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 80068e4:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80068e6:	f001 fc7b 	bl	80081e0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	490b      	ldr	r1, [pc, #44]	@ (800691c <lwip_netconn_do_listen+0xb4>)
 80068ee:	6858      	ldr	r0, [r3, #4]
 80068f0:	f001 fcc2 	bl	8008278 <tcp_accept>
  msg->err = err;
 80068f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80068f8:	7123      	strb	r3, [r4, #4]
}
 80068fa:	b003      	add	sp, #12
 80068fc:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 80068fe:	4628      	mov	r0, r5
 8006900:	f002 f80e 	bl	8008920 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	2200      	movs	r2, #0
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	e7f3      	b.n	80068f4 <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800690c:	2b02      	cmp	r3, #2
 800690e:	d101      	bne.n	8006914 <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	e7ba      	b.n	800688a <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 8006914:	23f5      	movs	r3, #245	@ 0xf5
 8006916:	e7b8      	b.n	800688a <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 8006918:	23f0      	movs	r3, #240	@ 0xf0
 800691a:	e7b6      	b.n	800688a <lwip_netconn_do_listen+0x22>
 800691c:	08006641 	.word	0x08006641

08006920 <lwip_netconn_do_recv>:
{
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8006922:	2300      	movs	r3, #0
{
 8006924:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8006926:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8006928:	6803      	ldr	r3, [r0, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	b192      	cbz	r2, 8006954 <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006934:	2b10      	cmp	r3, #16
 8006936:	d10d      	bne.n	8006954 <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 8006938:	6885      	ldr	r5, [r0, #8]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800693a:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800693e:	42bd      	cmp	r5, r7
 8006940:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006942:	6823      	ldr	r3, [r4, #0]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8006944:	bf28      	it	cs
 8006946:	463e      	movcs	r6, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006948:	6858      	ldr	r0, [r3, #4]
 800694a:	b2b1      	uxth	r1, r6
 800694c:	f001 fbd0 	bl	80080f0 <tcp_recved>
      } while (remaining != 0);
 8006950:	1bad      	subs	r5, r5, r6
 8006952:	d1f4      	bne.n	800693e <lwip_netconn_do_recv+0x1e>
}
 8006954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006958 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8006958:	b510      	push	{r4, lr}
 800695a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800695c:	6800      	ldr	r0, [r0, #0]
 800695e:	f7fe ffc8 	bl	80058f2 <netconn_err>
  if (err == ERR_OK) {
 8006962:	2800      	cmp	r0, #0
 8006964:	d14a      	bne.n	80069fc <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800696e:	2a10      	cmp	r2, #16
 8006970:	d142      	bne.n	80069f8 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8006972:	785a      	ldrb	r2, [r3, #1]
 8006974:	2a00      	cmp	r2, #0
 8006976:	d143      	bne.n	8006a00 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	2a00      	cmp	r2, #0
 800697c:	d043      	beq.n	8006a06 <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 800697e:	2201      	movs	r2, #1
 8006980:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	b133      	cbz	r3, 8006994 <lwip_netconn_do_write+0x3c>
 8006986:	4b21      	ldr	r3, [pc, #132]	@ (8006a0c <lwip_netconn_do_write+0xb4>)
 8006988:	f240 7223 	movw	r2, #1827	@ 0x723
 800698c:	4920      	ldr	r1, [pc, #128]	@ (8006a10 <lwip_netconn_do_write+0xb8>)
 800698e:	4821      	ldr	r0, [pc, #132]	@ (8006a14 <lwip_netconn_do_write+0xbc>)
 8006990:	f006 fddc 	bl	800d54c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8006994:	6963      	ldr	r3, [r4, #20]
 8006996:	b933      	cbnz	r3, 80069a6 <lwip_netconn_do_write+0x4e>
 8006998:	4b1c      	ldr	r3, [pc, #112]	@ (8006a0c <lwip_netconn_do_write+0xb4>)
 800699a:	f240 7224 	movw	r2, #1828	@ 0x724
 800699e:	491e      	ldr	r1, [pc, #120]	@ (8006a18 <lwip_netconn_do_write+0xc0>)
 80069a0:	481c      	ldr	r0, [pc, #112]	@ (8006a14 <lwip_netconn_do_write+0xbc>)
 80069a2:	f006 fdd3 	bl	800d54c <iprintf>
        msg->conn->current_msg = msg;
 80069a6:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80069a8:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 80069aa:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80069ac:	f7ff f992 	bl	8005cd4 <lwip_netconn_do_writemore>
 80069b0:	b328      	cbz	r0, 80069fe <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d006      	beq.n	80069c8 <lwip_netconn_do_write+0x70>
 80069ba:	4b14      	ldr	r3, [pc, #80]	@ (8006a0c <lwip_netconn_do_write+0xb4>)
 80069bc:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 80069c0:	4916      	ldr	r1, [pc, #88]	@ (8006a1c <lwip_netconn_do_write+0xc4>)
 80069c2:	4814      	ldr	r0, [pc, #80]	@ (8006a14 <lwip_netconn_do_write+0xbc>)
 80069c4:	f006 fdc2 	bl	800d54c <iprintf>
          UNLOCK_TCPIP_CORE();
 80069c8:	4815      	ldr	r0, [pc, #84]	@ (8006a20 <lwip_netconn_do_write+0xc8>)
 80069ca:	f006 fc93 	bl	800d2f4 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80069ce:	6820      	ldr	r0, [r4, #0]
 80069d0:	2100      	movs	r1, #0
 80069d2:	300c      	adds	r0, #12
 80069d4:	f006 fc4b 	bl	800d26e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80069d8:	4811      	ldr	r0, [pc, #68]	@ (8006a20 <lwip_netconn_do_write+0xc8>)
 80069da:	f006 fc86 	bl	800d2ea <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d10b      	bne.n	80069fe <lwip_netconn_do_write+0xa6>
 80069e6:	4b09      	ldr	r3, [pc, #36]	@ (8006a0c <lwip_netconn_do_write+0xb4>)
 80069e8:	f240 722c 	movw	r2, #1836	@ 0x72c
 80069ec:	490b      	ldr	r1, [pc, #44]	@ (8006a1c <lwip_netconn_do_write+0xc4>)
 80069ee:	4809      	ldr	r0, [pc, #36]	@ (8006a14 <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 80069f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80069f4:	f006 bdaa 	b.w	800d54c <iprintf>
      err = ERR_VAL;
 80069f8:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 80069fc:	7120      	strb	r0, [r4, #4]
}
 80069fe:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 8006a00:	f06f 0004 	mvn.w	r0, #4
 8006a04:	e7fa      	b.n	80069fc <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 8006a06:	f06f 000a 	mvn.w	r0, #10
 8006a0a:	e7f7      	b.n	80069fc <lwip_netconn_do_write+0xa4>
 8006a0c:	0800e767 	.word	0x0800e767
 8006a10:	0800eb27 	.word	0x0800eb27
 8006a14:	0800e45a 	.word	0x0800e45a
 8006a18:	0800eb49 	.word	0x0800eb49
 8006a1c:	0800eb42 	.word	0x0800eb42
 8006a20:	2002ed44 	.word	0x2002ed44

08006a24 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8006a24:	b510      	push	{r4, lr}
 8006a26:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8006a28:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8006a2a:	6842      	ldr	r2, [r0, #4]
  enum netconn_state state = msg->conn->state;
 8006a2c:	7843      	ldrb	r3, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 8006a2e:	b15a      	cbz	r2, 8006a48 <lwip_netconn_do_close+0x24>
 8006a30:	7802      	ldrb	r2, [r0, #0]
 8006a32:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8006a36:	2a10      	cmp	r2, #16
 8006a38:	d106      	bne.n	8006a48 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006a3a:	7a22      	ldrb	r2, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8006a3c:	2a03      	cmp	r2, #3
 8006a3e:	d001      	beq.n	8006a44 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d001      	beq.n	8006a48 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d102      	bne.n	8006a4e <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8006a48:	23f5      	movs	r3, #245	@ 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8006a4a:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8006a4c:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 8006a52:	23fb      	movs	r3, #251	@ 0xfb
 8006a54:	e7f9      	b.n	8006a4a <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8006a56:	07d3      	lsls	r3, r2, #31
 8006a58:	d501      	bpl.n	8006a5e <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 8006a5a:	f7ff fda1 	bl	80065a0 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	b133      	cbz	r3, 8006a72 <lwip_netconn_do_close+0x4e>
 8006a64:	4b19      	ldr	r3, [pc, #100]	@ (8006acc <lwip_netconn_do_close+0xa8>)
 8006a66:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8006a6a:	4919      	ldr	r1, [pc, #100]	@ (8006ad0 <lwip_netconn_do_close+0xac>)
 8006a6c:	4819      	ldr	r0, [pc, #100]	@ (8006ad4 <lwip_netconn_do_close+0xb0>)
 8006a6e:	f006 fd6d 	bl	800d54c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8006a72:	6820      	ldr	r0, [r4, #0]
 8006a74:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006a76:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 8006a78:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 8006a7a:	6204      	str	r4, [r0, #32]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006a7c:	f7ff fa52 	bl	8005f24 <lwip_netconn_do_close_internal>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d0e3      	beq.n	8006a4c <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d006      	beq.n	8006a9a <lwip_netconn_do_close+0x76>
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006acc <lwip_netconn_do_close+0xa8>)
 8006a8e:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8006a92:	4911      	ldr	r1, [pc, #68]	@ (8006ad8 <lwip_netconn_do_close+0xb4>)
 8006a94:	480f      	ldr	r0, [pc, #60]	@ (8006ad4 <lwip_netconn_do_close+0xb0>)
 8006a96:	f006 fd59 	bl	800d54c <iprintf>
        UNLOCK_TCPIP_CORE();
 8006a9a:	4810      	ldr	r0, [pc, #64]	@ (8006adc <lwip_netconn_do_close+0xb8>)
 8006a9c:	f006 fc2a 	bl	800d2f4 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006aa0:	6820      	ldr	r0, [r4, #0]
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	300c      	adds	r0, #12
 8006aa6:	f006 fbe2 	bl	800d26e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8006aaa:	480c      	ldr	r0, [pc, #48]	@ (8006adc <lwip_netconn_do_close+0xb8>)
 8006aac:	f006 fc1d 	bl	800d2ea <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	785b      	ldrb	r3, [r3, #1]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0c9      	beq.n	8006a4c <lwip_netconn_do_close+0x28>
 8006ab8:	4b04      	ldr	r3, [pc, #16]	@ (8006acc <lwip_netconn_do_close+0xa8>)
 8006aba:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8006abe:	4906      	ldr	r1, [pc, #24]	@ (8006ad8 <lwip_netconn_do_close+0xb4>)
 8006ac0:	4804      	ldr	r0, [pc, #16]	@ (8006ad4 <lwip_netconn_do_close+0xb0>)
}
 8006ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006ac6:	f006 bd41 	b.w	800d54c <iprintf>
 8006aca:	bf00      	nop
 8006acc:	0800e767 	.word	0x0800e767
 8006ad0:	0800eb27 	.word	0x0800eb27
 8006ad4:	0800e45a 	.word	0x0800e45a
 8006ad8:	0800eb42 	.word	0x0800eb42
 8006adc:	2002ed44 	.word	0x2002ed44

08006ae0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8006ae0:	b510      	push	{r4, lr}
  if (buf != NULL) {
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	b160      	cbz	r0, 8006b00 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 8006ae6:	6800      	ldr	r0, [r0, #0]
 8006ae8:	b120      	cbz	r0, 8006af4 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8006aea:	f000 ff01 	bl	80078f0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8006af4:	4621      	mov	r1, r4
 8006af6:	2006      	movs	r0, #6
  }
}
 8006af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8006afc:	f000 bc94 	b.w	8007428 <memp_free>
}
 8006b00:	bd10      	pop	{r4, pc}
	...

08006b04 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8006b04:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8006b06:	b940      	cbnz	r0, 8006b1a <netbuf_data+0x16>
 8006b08:	4b0f      	ldr	r3, [pc, #60]	@ (8006b48 <netbuf_data+0x44>)
 8006b0a:	22c6      	movs	r2, #198	@ 0xc6
 8006b0c:	490f      	ldr	r1, [pc, #60]	@ (8006b4c <netbuf_data+0x48>)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006b0e:	4810      	ldr	r0, [pc, #64]	@ (8006b50 <netbuf_data+0x4c>)
 8006b10:	f006 fd1c 	bl	800d54c <iprintf>
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8006b14:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 8006b18:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006b1a:	b919      	cbnz	r1, 8006b24 <netbuf_data+0x20>
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <netbuf_data+0x44>)
 8006b1e:	22c7      	movs	r2, #199	@ 0xc7
 8006b20:	490c      	ldr	r1, [pc, #48]	@ (8006b54 <netbuf_data+0x50>)
 8006b22:	e7f4      	b.n	8006b0e <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8006b24:	b91a      	cbnz	r2, 8006b2e <netbuf_data+0x2a>
 8006b26:	4b08      	ldr	r3, [pc, #32]	@ (8006b48 <netbuf_data+0x44>)
 8006b28:	22c8      	movs	r2, #200	@ 0xc8
 8006b2a:	490b      	ldr	r1, [pc, #44]	@ (8006b58 <netbuf_data+0x54>)
 8006b2c:	e7ef      	b.n	8006b0e <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 8006b2e:	6843      	ldr	r3, [r0, #4]
 8006b30:	b133      	cbz	r3, 8006b40 <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 8006b36:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 8006b38:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 8006b3a:	895b      	ldrh	r3, [r3, #10]
 8006b3c:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8006b3e:	e7eb      	b.n	8006b18 <netbuf_data+0x14>
    return ERR_BUF;
 8006b40:	f06f 0001 	mvn.w	r0, #1
 8006b44:	e7e8      	b.n	8006b18 <netbuf_data+0x14>
 8006b46:	bf00      	nop
 8006b48:	0800eb6f 	.word	0x0800eb6f
 8006b4c:	0800ebde 	.word	0x0800ebde
 8006b50:	0800e45a 	.word	0x0800e45a
 8006b54:	0800ebf7 	.word	0x0800ebf7
 8006b58:	0800ec14 	.word	0x0800ec14

08006b5c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8006b5c:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8006b5e:	b940      	cbnz	r0, 8006b72 <netbuf_next+0x16>
 8006b60:	4b09      	ldr	r3, [pc, #36]	@ (8006b88 <netbuf_next+0x2c>)
 8006b62:	22e0      	movs	r2, #224	@ 0xe0
 8006b64:	4909      	ldr	r1, [pc, #36]	@ (8006b8c <netbuf_next+0x30>)
 8006b66:	480a      	ldr	r0, [pc, #40]	@ (8006b90 <netbuf_next+0x34>)
 8006b68:	f006 fcf0 	bl	800d54c <iprintf>
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
  buf->ptr = buf->ptr->next;
  if (buf->ptr->next == NULL) {
    return 1;
  }
  return 0;
}
 8006b70:	bd08      	pop	{r3, pc}
  if (buf->ptr->next == NULL) {
 8006b72:	6843      	ldr	r3, [r0, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0f8      	beq.n	8006b6c <netbuf_next+0x10>
  buf->ptr = buf->ptr->next;
 8006b7a:	6043      	str	r3, [r0, #4]
  if (buf->ptr->next == NULL) {
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	fab0 f080 	clz	r0, r0
 8006b82:	0940      	lsrs	r0, r0, #5
 8006b84:	e7f4      	b.n	8006b70 <netbuf_next+0x14>
 8006b86:	bf00      	nop
 8006b88:	0800eb6f 	.word	0x0800eb6f
 8006b8c:	0800ec2d 	.word	0x0800ec2d
 8006b90:	0800e45a 	.word	0x0800e45a

08006b94 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006b94:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8006b96:	482c      	ldr	r0, [pc, #176]	@ (8006c48 <tcpip_thread+0xb4>)
 8006b98:	f006 fba7 	bl	800d2ea <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8006b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c4c <tcpip_thread+0xb8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	b113      	cbz	r3, 8006ba8 <tcpip_thread+0x14>
    tcpip_init_done(tcpip_init_done_arg);
 8006ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8006c50 <tcpip_thread+0xbc>)
 8006ba4:	6810      	ldr	r0, [r2, #0]
 8006ba6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8006ba8:	4d27      	ldr	r5, [pc, #156]	@ (8006c48 <tcpip_thread+0xb4>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006baa:	4f2a      	ldr	r7, [pc, #168]	@ (8006c54 <tcpip_thread+0xc0>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006bac:	4e2a      	ldr	r6, [pc, #168]	@ (8006c58 <tcpip_thread+0xc4>)
  sleeptime = sys_timeouts_sleeptime();
 8006bae:	f004 fecb 	bl	800b948 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006bb2:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8006bb4:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006bb6:	d113      	bne.n	8006be0 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f006 fb9b 	bl	800d2f4 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	a901      	add	r1, sp, #4
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	f006 fb0e 	bl	800d1e4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f006 fb8e 	bl	800d2ea <sys_mutex_lock>
    if (msg == NULL) {
 8006bce:	9c01      	ldr	r4, [sp, #4]
 8006bd0:	b9cc      	cbnz	r4, 8006c06 <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006bd2:	4633      	mov	r3, r6
 8006bd4:	2291      	movs	r2, #145	@ 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006bd6:	4921      	ldr	r1, [pc, #132]	@ (8006c5c <tcpip_thread+0xc8>)
 8006bd8:	4821      	ldr	r0, [pc, #132]	@ (8006c60 <tcpip_thread+0xcc>)
 8006bda:	f006 fcb7 	bl	800d54c <iprintf>
      break;
 8006bde:	e7e6      	b.n	8006bae <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 8006be0:	b910      	cbnz	r0, 8006be8 <tcpip_thread+0x54>
    sys_check_timeouts();
 8006be2:	f004 fe8f 	bl	800b904 <sys_check_timeouts>
    goto again;
 8006be6:	e7e2      	b.n	8006bae <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 8006be8:	4628      	mov	r0, r5
 8006bea:	f006 fb83 	bl	800d2f4 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006bee:	4622      	mov	r2, r4
 8006bf0:	a901      	add	r1, sp, #4
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f006 faf6 	bl	800d1e4 <sys_arch_mbox_fetch>
 8006bf8:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f006 fb75 	bl	800d2ea <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8006c00:	3401      	adds	r4, #1
 8006c02:	d0ee      	beq.n	8006be2 <tcpip_thread+0x4e>
 8006c04:	e7e3      	b.n	8006bce <tcpip_thread+0x3a>
  switch (msg->type) {
 8006c06:	7823      	ldrb	r3, [r4, #0]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d00f      	beq.n	8006c2c <tcpip_thread+0x98>
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d013      	beq.n	8006c38 <tcpip_thread+0xa4>
 8006c10:	b9b3      	cbnz	r3, 8006c40 <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006c12:	6860      	ldr	r0, [r4, #4]
 8006c14:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8006c18:	4798      	blx	r3
 8006c1a:	b110      	cbz	r0, 8006c22 <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
 8006c1c:	6860      	ldr	r0, [r4, #4]
 8006c1e:	f000 fe67 	bl	80078f0 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006c22:	4621      	mov	r1, r4
 8006c24:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006c26:	f000 fbff 	bl	8007428 <memp_free>
      break;
 8006c2a:	e7c0      	b.n	8006bae <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006c2c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006c30:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006c32:	4621      	mov	r1, r4
 8006c34:	2008      	movs	r0, #8
 8006c36:	e7f6      	b.n	8006c26 <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006c38:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006c3c:	4798      	blx	r3
      break;
 8006c3e:	e7b6      	b.n	8006bae <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006c40:	4633      	mov	r3, r6
 8006c42:	22cf      	movs	r2, #207	@ 0xcf
 8006c44:	e7c7      	b.n	8006bd6 <tcpip_thread+0x42>
 8006c46:	bf00      	nop
 8006c48:	2002ed44 	.word	0x2002ed44
 8006c4c:	2002ed50 	.word	0x2002ed50
 8006c50:	2002ed4c 	.word	0x2002ed4c
 8006c54:	2002ed48 	.word	0x2002ed48
 8006c58:	0800ec46 	.word	0x0800ec46
 8006c5c:	0800ec76 	.word	0x0800ec76
 8006c60:	0800e45a 	.word	0x0800e45a

08006c64 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006c68:	4810      	ldr	r0, [pc, #64]	@ (8006cac <tcpip_inpkt+0x48>)
{
 8006c6a:	460e      	mov	r6, r1
 8006c6c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006c6e:	f006 fae2 	bl	800d236 <sys_mbox_valid>
 8006c72:	b928      	cbnz	r0, 8006c80 <tcpip_inpkt+0x1c>
 8006c74:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb0 <tcpip_inpkt+0x4c>)
 8006c76:	22fc      	movs	r2, #252	@ 0xfc
 8006c78:	490e      	ldr	r1, [pc, #56]	@ (8006cb4 <tcpip_inpkt+0x50>)
 8006c7a:	480f      	ldr	r0, [pc, #60]	@ (8006cb8 <tcpip_inpkt+0x54>)
 8006c7c:	f006 fc66 	bl	800d54c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006c80:	2009      	movs	r0, #9
 8006c82:	f000 fba3 	bl	80073cc <memp_malloc>
  if (msg == NULL) {
 8006c86:	4604      	mov	r4, r0
 8006c88:	b168      	cbz	r0, 8006ca6 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8006c8a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006c8c:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 8006c8e:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8006c90:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8006c92:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006c96:	4805      	ldr	r0, [pc, #20]	@ (8006cac <tcpip_inpkt+0x48>)
 8006c98:	f006 fa95 	bl	800d1c6 <sys_mbox_trypost>
 8006c9c:	b128      	cbz	r0, 8006caa <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	2009      	movs	r0, #9
 8006ca2:	f000 fbc1 	bl	8007428 <memp_free>
    return ERR_MEM;
 8006ca6:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cac:	2002ed48 	.word	0x2002ed48
 8006cb0:	0800ec46 	.word	0x0800ec46
 8006cb4:	0800ec94 	.word	0x0800ec94
 8006cb8:	0800e45a 	.word	0x0800e45a

08006cbc <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006cbc:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 8006cc0:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8006cc4:	bf14      	ite	ne
 8006cc6:	4a02      	ldrne	r2, [pc, #8]	@ (8006cd0 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8006cc8:	4a02      	ldreq	r2, [pc, #8]	@ (8006cd4 <tcpip_input+0x18>)
 8006cca:	f7ff bfcb 	b.w	8006c64 <tcpip_inpkt>
 8006cce:	bf00      	nop
 8006cd0:	0800d089 	.word	0x0800d089
 8006cd4:	0800c655 	.word	0x0800c655

08006cd8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006cdc:	4810      	ldr	r0, [pc, #64]	@ (8006d20 <tcpip_try_callback+0x48>)
{
 8006cde:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006ce0:	f006 faa9 	bl	800d236 <sys_mbox_valid>
 8006ce4:	b930      	cbnz	r0, 8006cf4 <tcpip_try_callback+0x1c>
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d24 <tcpip_try_callback+0x4c>)
 8006ce8:	f240 125d 	movw	r2, #349	@ 0x15d
 8006cec:	490e      	ldr	r1, [pc, #56]	@ (8006d28 <tcpip_try_callback+0x50>)
 8006cee:	480f      	ldr	r0, [pc, #60]	@ (8006d2c <tcpip_try_callback+0x54>)
 8006cf0:	f006 fc2c 	bl	800d54c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8006cf4:	2008      	movs	r0, #8
 8006cf6:	f000 fb69 	bl	80073cc <memp_malloc>
  if (msg == NULL) {
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	b160      	cbz	r0, 8006d18 <tcpip_try_callback+0x40>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8006cfe:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006d00:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_CALLBACK;
 8006d02:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.ctx = ctx;
 8006d04:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006d08:	4805      	ldr	r0, [pc, #20]	@ (8006d20 <tcpip_try_callback+0x48>)
 8006d0a:	f006 fa5c 	bl	800d1c6 <sys_mbox_trypost>
 8006d0e:	b128      	cbz	r0, 8006d1c <tcpip_try_callback+0x44>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8006d10:	4621      	mov	r1, r4
 8006d12:	2008      	movs	r0, #8
 8006d14:	f000 fb88 	bl	8007428 <memp_free>
    return ERR_MEM;
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
}
 8006d1c:	bd70      	pop	{r4, r5, r6, pc}
 8006d1e:	bf00      	nop
 8006d20:	2002ed48 	.word	0x2002ed48
 8006d24:	0800ec46 	.word	0x0800ec46
 8006d28:	0800ec94 	.word	0x0800ec94
 8006d2c:	0800e45a 	.word	0x0800e45a

08006d30 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8006d30:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8006d32:	4e06      	ldr	r6, [pc, #24]	@ (8006d4c <tcpip_send_msg_wait_sem+0x1c>)
{
 8006d34:	460d      	mov	r5, r1
 8006d36:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f006 fad6 	bl	800d2ea <sys_mutex_lock>
  fn(apimsg);
 8006d3e:	4628      	mov	r0, r5
 8006d40:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 8006d42:	4630      	mov	r0, r6
 8006d44:	f006 fad6 	bl	800d2f4 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8006d48:	2000      	movs	r0, #0
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	2002ed44 	.word	0x2002ed44

08006d50 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d52:	4605      	mov	r5, r0
 8006d54:	460c      	mov	r4, r1
  lwip_init();
 8006d56:	f000 f840 	bl	8006dda <lwip_init>

  tcpip_init_done = initfunc;
 8006d5a:	4b13      	ldr	r3, [pc, #76]	@ (8006da8 <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006d5c:	2106      	movs	r1, #6
 8006d5e:	4813      	ldr	r0, [pc, #76]	@ (8006dac <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 8006d60:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8006d62:	4b13      	ldr	r3, [pc, #76]	@ (8006db0 <tcpip_init+0x60>)
 8006d64:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006d66:	f006 fa17 	bl	800d198 <sys_mbox_new>
 8006d6a:	b130      	cbz	r0, 8006d7a <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006d6c:	4b11      	ldr	r3, [pc, #68]	@ (8006db4 <tcpip_init+0x64>)
 8006d6e:	f240 2261 	movw	r2, #609	@ 0x261
 8006d72:	4911      	ldr	r1, [pc, #68]	@ (8006db8 <tcpip_init+0x68>)
 8006d74:	4811      	ldr	r0, [pc, #68]	@ (8006dbc <tcpip_init+0x6c>)
 8006d76:	f006 fbe9 	bl	800d54c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006d7a:	4811      	ldr	r0, [pc, #68]	@ (8006dc0 <tcpip_init+0x70>)
 8006d7c:	f006 faaa 	bl	800d2d4 <sys_mutex_new>
 8006d80:	b130      	cbz	r0, 8006d90 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8006d82:	4b0c      	ldr	r3, [pc, #48]	@ (8006db4 <tcpip_init+0x64>)
 8006d84:	f240 2265 	movw	r2, #613	@ 0x265
 8006d88:	490e      	ldr	r1, [pc, #56]	@ (8006dc4 <tcpip_init+0x74>)
 8006d8a:	480c      	ldr	r0, [pc, #48]	@ (8006dbc <tcpip_init+0x6c>)
 8006d8c:	f006 fbde 	bl	800d54c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006d90:	2303      	movs	r3, #3
 8006d92:	2200      	movs	r2, #0
 8006d94:	490c      	ldr	r1, [pc, #48]	@ (8006dc8 <tcpip_init+0x78>)
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d9c:	480b      	ldr	r0, [pc, #44]	@ (8006dcc <tcpip_init+0x7c>)
 8006d9e:	f006 faac 	bl	800d2fa <sys_thread_new>
}
 8006da2:	b003      	add	sp, #12
 8006da4:	bd30      	pop	{r4, r5, pc}
 8006da6:	bf00      	nop
 8006da8:	2002ed50 	.word	0x2002ed50
 8006dac:	2002ed48 	.word	0x2002ed48
 8006db0:	2002ed4c 	.word	0x2002ed4c
 8006db4:	0800ec46 	.word	0x0800ec46
 8006db8:	0800eca1 	.word	0x0800eca1
 8006dbc:	0800e45a 	.word	0x0800e45a
 8006dc0:	2002ed44 	.word	0x2002ed44
 8006dc4:	0800ecc4 	.word	0x0800ecc4
 8006dc8:	08006b95 	.word	0x08006b95
 8006dcc:	0800ece5 	.word	0x0800ece5

08006dd0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8006dd0:	ba40      	rev16	r0, r0
}
 8006dd2:	b280      	uxth	r0, r0
 8006dd4:	4770      	bx	lr

08006dd6 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8006dd6:	ba00      	rev	r0, r0
 8006dd8:	4770      	bx	lr

08006dda <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006dda:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8006ddc:	f006 fa70 	bl	800d2c0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8006de0:	f000 f80c 	bl	8006dfc <mem_init>
  memp_init();
 8006de4:	f000 face 	bl	8007384 <memp_init>
  pbuf_init();
  netif_init();
 8006de8:	f000 fb76 	bl	80074d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006dec:	f004 fdbe 	bl	800b96c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006df0:	f001 f868 	bl	8007ec4 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8006df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8006df8:	f004 bd6e 	b.w	800b8d8 <sys_timeouts_init>

08006dfc <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006dfc:	4b13      	ldr	r3, [pc, #76]	@ (8006e4c <mem_init+0x50>)
 8006dfe:	4a14      	ldr	r2, [pc, #80]	@ (8006e50 <mem_init+0x54>)
 8006e00:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006e04:	4813      	ldr	r0, [pc, #76]	@ (8006e54 <mem_init+0x58>)
{
 8006e06:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006e08:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 8006e0a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
  return (struct mem *)(void *)&ram[ptr];
 8006e0e:	f503 51fa 	add.w	r1, r3, #8000	@ 0x1f40
  mem->next = MEM_SIZE_ALIGNED;
 8006e12:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 8006e14:	2200      	movs	r2, #0
 8006e16:	711a      	strb	r2, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006e18:	4a0f      	ldr	r2, [pc, #60]	@ (8006e58 <mem_init+0x5c>)
 8006e1a:	6011      	str	r1, [r2, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006e1c:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8006e20:	490e      	ldr	r1, [pc, #56]	@ (8006e5c <mem_init+0x60>)
 8006e22:	f8c2 1f40 	str.w	r1, [r2, #3904]	@ 0xf40
  ram_end->used = 1;
 8006e26:	2101      	movs	r1, #1
 8006e28:	f882 1f44 	strb.w	r1, [r2, #3908]	@ 0xf44
  lfree = (struct mem *)(void *)ram;
 8006e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8006e60 <mem_init+0x64>)
 8006e2e:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006e30:	f006 fa50 	bl	800d2d4 <sys_mutex_new>
 8006e34:	b140      	cbz	r0, 8006e48 <mem_init+0x4c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006e36:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <mem_init+0x68>)
 8006e38:	f240 221f 	movw	r2, #543	@ 0x21f
 8006e3c:	490a      	ldr	r1, [pc, #40]	@ (8006e68 <mem_init+0x6c>)
 8006e3e:	480b      	ldr	r0, [pc, #44]	@ (8006e6c <mem_init+0x70>)
  }
}
 8006e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006e44:	f006 bb82 	b.w	800d54c <iprintf>
}
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	bf00      	nop
 8006e4c:	2002ed7f 	.word	0x2002ed7f
 8006e50:	2002ed78 	.word	0x2002ed78
 8006e54:	2002ed70 	.word	0x2002ed70
 8006e58:	2002ed74 	.word	0x2002ed74
 8006e5c:	1f401f40 	.word	0x1f401f40
 8006e60:	2002ed6c 	.word	0x2002ed6c
 8006e64:	0800ecf2 	.word	0x0800ecf2
 8006e68:	0800ed21 	.word	0x0800ed21
 8006e6c:	0800e45a 	.word	0x0800e45a

08006e70 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006e74:	4604      	mov	r4, r0
 8006e76:	2800      	cmp	r0, #0
 8006e78:	f000 80b4 	beq.w	8006fe4 <mem_free+0x174>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006e7c:	0783      	lsls	r3, r0, #30
 8006e7e:	d00c      	beq.n	8006e9a <mem_free+0x2a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006e80:	4b59      	ldr	r3, [pc, #356]	@ (8006fe8 <mem_free+0x178>)
 8006e82:	f240 2273 	movw	r2, #627	@ 0x273
 8006e86:	4959      	ldr	r1, [pc, #356]	@ (8006fec <mem_free+0x17c>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006e88:	4859      	ldr	r0, [pc, #356]	@ (8006ff0 <mem_free+0x180>)
 8006e8a:	f006 fb5f 	bl	800d54c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006e8e:	f006 fa4b 	bl	800d328 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8006e96:	f006 ba53 	b.w	800d340 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006e9a:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 800701c <mem_free+0x1ac>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006e9e:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea6:	42ab      	cmp	r3, r5
 8006ea8:	d805      	bhi.n	8006eb6 <mem_free+0x46>
 8006eaa:	4f52      	ldr	r7, [pc, #328]	@ (8006ff4 <mem_free+0x184>)
 8006eac:	f100 030c 	add.w	r3, r0, #12
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d204      	bcs.n	8006ec0 <mem_free+0x50>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8006fe8 <mem_free+0x178>)
 8006eb8:	f240 227f 	movw	r2, #639	@ 0x27f
 8006ebc:	494e      	ldr	r1, [pc, #312]	@ (8006ff8 <mem_free+0x188>)
 8006ebe:	e7e3      	b.n	8006e88 <mem_free+0x18>
  LWIP_MEM_FREE_PROTECT();
 8006ec0:	484e      	ldr	r0, [pc, #312]	@ (8006ffc <mem_free+0x18c>)
 8006ec2:	f006 fa12 	bl	800d2ea <sys_mutex_lock>
  if (!mem->used) {
 8006ec6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006eca:	b953      	cbnz	r3, 8006ee2 <mem_free+0x72>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006ecc:	4b46      	ldr	r3, [pc, #280]	@ (8006fe8 <mem_free+0x178>)
 8006ece:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8006ed2:	494b      	ldr	r1, [pc, #300]	@ (8007000 <mem_free+0x190>)
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006ed4:	4846      	ldr	r0, [pc, #280]	@ (8006ff0 <mem_free+0x180>)
 8006ed6:	f006 fb39 	bl	800d54c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8006eda:	4848      	ldr	r0, [pc, #288]	@ (8006ffc <mem_free+0x18c>)
 8006edc:	f006 fa0a 	bl	800d2f4 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8006ee0:	e7d5      	b.n	8006e8e <mem_free+0x1e>
  nmem = ptr_to_mem(mem->next);
 8006ee2:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8006ee6:	f8d8 1000 	ldr.w	r1, [r8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006eea:	f5b2 5ffa 	cmp.w	r2, #8000	@ 0x1f40
  pmem = ptr_to_mem(mem->prev);
 8006eee:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006ef2:	d810      	bhi.n	8006f16 <mem_free+0xa6>
 8006ef4:	f5b0 5ffa 	cmp.w	r0, #8000	@ 0x1f40
 8006ef8:	d80d      	bhi.n	8006f16 <mem_free+0xa6>
  return (mem_size_t)((u8_t *)mem - ram);
 8006efa:	1a6b      	subs	r3, r5, r1
 8006efc:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006efe:	4283      	cmp	r3, r0
 8006f00:	d002      	beq.n	8006f08 <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006f02:	5a08      	ldrh	r0, [r1, r0]
 8006f04:	4298      	cmp	r0, r3
 8006f06:	d106      	bne.n	8006f16 <mem_free+0xa6>
  return (struct mem *)(void *)&ram[ptr];
 8006f08:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006f0a:	6838      	ldr	r0, [r7, #0]
 8006f0c:	4282      	cmp	r2, r0
 8006f0e:	d007      	beq.n	8006f20 <mem_free+0xb0>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006f10:	8852      	ldrh	r2, [r2, #2]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d004      	beq.n	8006f20 <mem_free+0xb0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006f16:	4b34      	ldr	r3, [pc, #208]	@ (8006fe8 <mem_free+0x178>)
 8006f18:	f240 2295 	movw	r2, #661	@ 0x295
 8006f1c:	4939      	ldr	r1, [pc, #228]	@ (8007004 <mem_free+0x194>)
 8006f1e:	e7d9      	b.n	8006ed4 <mem_free+0x64>
  mem->used = 0;
 8006f20:	2300      	movs	r3, #0
  if (mem < lfree) {
 8006f22:	4e39      	ldr	r6, [pc, #228]	@ (8007008 <mem_free+0x198>)
  mem->used = 0;
 8006f24:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8006f28:	6833      	ldr	r3, [r6, #0]
 8006f2a:	42ab      	cmp	r3, r5
    lfree = mem;
 8006f2c:	bf88      	it	hi
 8006f2e:	6035      	strhi	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006f30:	428d      	cmp	r5, r1
 8006f32:	d206      	bcs.n	8006f42 <mem_free+0xd2>
 8006f34:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe8 <mem_free+0x178>)
 8006f36:	f240 12df 	movw	r2, #479	@ 0x1df
 8006f3a:	4934      	ldr	r1, [pc, #208]	@ (800700c <mem_free+0x19c>)
 8006f3c:	482c      	ldr	r0, [pc, #176]	@ (8006ff0 <mem_free+0x180>)
 8006f3e:	f006 fb05 	bl	800d54c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	429d      	cmp	r5, r3
 8006f46:	d306      	bcc.n	8006f56 <mem_free+0xe6>
 8006f48:	4b27      	ldr	r3, [pc, #156]	@ (8006fe8 <mem_free+0x178>)
 8006f4a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006f4e:	4930      	ldr	r1, [pc, #192]	@ (8007010 <mem_free+0x1a0>)
 8006f50:	4827      	ldr	r0, [pc, #156]	@ (8006ff0 <mem_free+0x180>)
 8006f52:	f006 fafb 	bl	800d54c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006f56:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006f5a:	b133      	cbz	r3, 8006f6a <mem_free+0xfa>
 8006f5c:	4b22      	ldr	r3, [pc, #136]	@ (8006fe8 <mem_free+0x178>)
 8006f5e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006f62:	492c      	ldr	r1, [pc, #176]	@ (8007014 <mem_free+0x1a4>)
 8006f64:	4822      	ldr	r0, [pc, #136]	@ (8006ff0 <mem_free+0x180>)
 8006f66:	f006 faf1 	bl	800d54c <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006f6a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006f6e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8006f72:	d906      	bls.n	8006f82 <mem_free+0x112>
 8006f74:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe8 <mem_free+0x178>)
 8006f76:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006f7a:	4927      	ldr	r1, [pc, #156]	@ (8007018 <mem_free+0x1a8>)
 8006f7c:	481c      	ldr	r0, [pc, #112]	@ (8006ff0 <mem_free+0x180>)
 8006f7e:	f006 fae5 	bl	800d54c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8006f82:	f8d8 3000 	ldr.w	r3, [r8]
 8006f86:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006f8a:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006f8c:	4295      	cmp	r5, r2
 8006f8e:	d011      	beq.n	8006fb4 <mem_free+0x144>
 8006f90:	7910      	ldrb	r0, [r2, #4]
 8006f92:	b978      	cbnz	r0, 8006fb4 <mem_free+0x144>
 8006f94:	6838      	ldr	r0, [r7, #0]
 8006f96:	4282      	cmp	r2, r0
 8006f98:	d00c      	beq.n	8006fb4 <mem_free+0x144>
    if (lfree == nmem) {
 8006f9a:	6830      	ldr	r0, [r6, #0]
 8006f9c:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8006f9e:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8006fa0:	bf08      	it	eq
 8006fa2:	6035      	streq	r5, [r6, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006fa4:	f5b2 5ffa 	cmp.w	r2, #8000	@ 0x1f40
    mem->next = nmem->next;
 8006fa8:	f824 2c08 	strh.w	r2, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8006fac:	bf1e      	ittt	ne
 8006fae:	1ae9      	subne	r1, r5, r3
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006fb0:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8006fb2:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8006fb4:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8006fb8:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8006fba:	428d      	cmp	r5, r1
 8006fbc:	d00d      	beq.n	8006fda <mem_free+0x16a>
 8006fbe:	7908      	ldrb	r0, [r1, #4]
 8006fc0:	b958      	cbnz	r0, 8006fda <mem_free+0x16a>
    if (lfree == mem) {
 8006fc2:	6830      	ldr	r0, [r6, #0]
 8006fc4:	4285      	cmp	r5, r0
      lfree = pmem;
 8006fc6:	bf08      	it	eq
 8006fc8:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8006fca:	f834 1c08 	ldrh.w	r1, [r4, #-8]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006fce:	f5b1 5ffa 	cmp.w	r1, #8000	@ 0x1f40
    pmem->next = mem->next;
 8006fd2:	5299      	strh	r1, [r3, r2]
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006fd4:	bf1c      	itt	ne
 8006fd6:	185b      	addne	r3, r3, r1
 8006fd8:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8006fda:	4808      	ldr	r0, [pc, #32]	@ (8006ffc <mem_free+0x18c>)
}
 8006fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8006fe0:	f006 b988 	b.w	800d2f4 <sys_mutex_unlock>
}
 8006fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe8:	0800ecf2 	.word	0x0800ecf2
 8006fec:	0800ed3c 	.word	0x0800ed3c
 8006ff0:	0800e45a 	.word	0x0800e45a
 8006ff4:	2002ed74 	.word	0x2002ed74
 8006ff8:	0800ed5d 	.word	0x0800ed5d
 8006ffc:	2002ed70 	.word	0x2002ed70
 8007000:	0800ed76 	.word	0x0800ed76
 8007004:	0800ed9c 	.word	0x0800ed9c
 8007008:	2002ed6c 	.word	0x2002ed6c
 800700c:	0800edce 	.word	0x0800edce
 8007010:	0800ede5 	.word	0x0800ede5
 8007014:	0800edff 	.word	0x0800edff
 8007018:	0800ee1a 	.word	0x0800ee1a
 800701c:	2002ed78 	.word	0x2002ed78

08007020 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007024:	1ccc      	adds	r4, r1, #3
{
 8007026:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007028:	f024 0403 	bic.w	r4, r4, #3
 800702c:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 800702e:	2c0b      	cmp	r4, #11
 8007030:	d904      	bls.n	800703c <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007032:	f5b4 5ffa 	cmp.w	r4, #8000	@ 0x1f40
 8007036:	d902      	bls.n	800703e <mem_trim+0x1e>
    return NULL;
 8007038:	2500      	movs	r5, #0
 800703a:	e01f      	b.n	800707c <mem_trim+0x5c>
    newsize = MIN_SIZE_ALIGNED;
 800703c:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800703e:	42a1      	cmp	r1, r4
 8007040:	d8fa      	bhi.n	8007038 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007042:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8007188 <mem_trim+0x168>
 8007046:	f8d8 3000 	ldr.w	r3, [r8]
 800704a:	42ab      	cmp	r3, r5
 800704c:	d803      	bhi.n	8007056 <mem_trim+0x36>
 800704e:	4b46      	ldr	r3, [pc, #280]	@ (8007168 <mem_trim+0x148>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	42ab      	cmp	r3, r5
 8007054:	d806      	bhi.n	8007064 <mem_trim+0x44>
 8007056:	4b45      	ldr	r3, [pc, #276]	@ (800716c <mem_trim+0x14c>)
 8007058:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800705c:	4944      	ldr	r1, [pc, #272]	@ (8007170 <mem_trim+0x150>)
 800705e:	4845      	ldr	r0, [pc, #276]	@ (8007174 <mem_trim+0x154>)
 8007060:	f006 fa74 	bl	800d54c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007064:	f8d8 3000 	ldr.w	r3, [r8]
 8007068:	42ab      	cmp	r3, r5
 800706a:	d803      	bhi.n	8007074 <mem_trim+0x54>
 800706c:	4a3e      	ldr	r2, [pc, #248]	@ (8007168 <mem_trim+0x148>)
 800706e:	6812      	ldr	r2, [r2, #0]
 8007070:	42aa      	cmp	r2, r5
 8007072:	d806      	bhi.n	8007082 <mem_trim+0x62>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007074:	f006 f958 	bl	800d328 <sys_arch_protect>
 8007078:	f006 f962 	bl	800d340 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800707c:	4628      	mov	r0, r5
 800707e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007082:	f1a5 0608 	sub.w	r6, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007086:	f835 7c08 	ldrh.w	r7, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800708a:	1af6      	subs	r6, r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800708c:	3f08      	subs	r7, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800708e:	b2b6      	uxth	r6, r6
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007090:	1bbf      	subs	r7, r7, r6
 8007092:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007094:	42a7      	cmp	r7, r4
 8007096:	d207      	bcs.n	80070a8 <mem_trim+0x88>
 8007098:	4b34      	ldr	r3, [pc, #208]	@ (800716c <mem_trim+0x14c>)
 800709a:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800709e:	4936      	ldr	r1, [pc, #216]	@ (8007178 <mem_trim+0x158>)
 80070a0:	4834      	ldr	r0, [pc, #208]	@ (8007174 <mem_trim+0x154>)
 80070a2:	f006 fa53 	bl	800d54c <iprintf>
  if (newsize > size) {
 80070a6:	e7c7      	b.n	8007038 <mem_trim+0x18>
  if (newsize == size) {
 80070a8:	d0e8      	beq.n	800707c <mem_trim+0x5c>
  LWIP_MEM_FREE_PROTECT();
 80070aa:	4834      	ldr	r0, [pc, #208]	@ (800717c <mem_trim+0x15c>)
 80070ac:	f006 f91d 	bl	800d2ea <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 80070b0:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 80070b4:	f8d8 b000 	ldr.w	fp, [r8]
 80070b8:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 80070bc:	f89a 3004 	ldrb.w	r3, [sl, #4]
 80070c0:	bb43      	cbnz	r3, 8007114 <mem_trim+0xf4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80070c2:	f5b9 5ffa 	cmp.w	r9, #8000	@ 0x1f40
 80070c6:	d106      	bne.n	80070d6 <mem_trim+0xb6>
 80070c8:	4b28      	ldr	r3, [pc, #160]	@ (800716c <mem_trim+0x14c>)
 80070ca:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80070ce:	492c      	ldr	r1, [pc, #176]	@ (8007180 <mem_trim+0x160>)
 80070d0:	4828      	ldr	r0, [pc, #160]	@ (8007174 <mem_trim+0x154>)
 80070d2:	f006 fa3b 	bl	800d54c <iprintf>
    if (lfree == mem2) {
 80070d6:	482b      	ldr	r0, [pc, #172]	@ (8007184 <mem_trim+0x164>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80070d8:	f106 0308 	add.w	r3, r6, #8
  return (struct mem *)(void *)&ram[ptr];
 80070dc:	f8d8 2000 	ldr.w	r2, [r8]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80070e0:	4423      	add	r3, r4
    if (lfree == mem2) {
 80070e2:	6804      	ldr	r4, [r0, #0]
    next = mem2->next;
 80070e4:	f83b 7009 	ldrh.w	r7, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80070e8:	b299      	uxth	r1, r3
    if (lfree == mem2) {
 80070ea:	4554      	cmp	r4, sl
  return (struct mem *)(void *)&ram[ptr];
 80070ec:	fa12 f383 	uxtah	r3, r2, r3
      lfree = ptr_to_mem(ptr2);
 80070f0:	bf08      	it	eq
 80070f2:	6003      	streq	r3, [r0, #0]
    mem2->used = 0;
 80070f4:	2000      	movs	r0, #0
 80070f6:	7118      	strb	r0, [r3, #4]
    mem2->next = next;
 80070f8:	5257      	strh	r7, [r2, r1]
    mem2->prev = ptr;
 80070fa:	805e      	strh	r6, [r3, #2]
    mem->next = ptr2;
 80070fc:	f825 1c08 	strh.w	r1, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007100:	5a53      	ldrh	r3, [r2, r1]
 8007102:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8007106:	d001      	beq.n	800710c <mem_trim+0xec>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007108:	441a      	add	r2, r3
 800710a:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800710c:	481b      	ldr	r0, [pc, #108]	@ (800717c <mem_trim+0x15c>)
 800710e:	f006 f8f1 	bl	800d2f4 <sys_mutex_unlock>
  return rmem;
 8007112:	e7b3      	b.n	800707c <mem_trim+0x5c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007114:	f104 0314 	add.w	r3, r4, #20
 8007118:	b29b      	uxth	r3, r3
 800711a:	429f      	cmp	r7, r3
 800711c:	d3f6      	bcc.n	800710c <mem_trim+0xec>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800711e:	f106 0308 	add.w	r3, r6, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007122:	f5b9 5ffa 	cmp.w	r9, #8000	@ 0x1f40
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007126:	441c      	add	r4, r3
 8007128:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800712a:	d106      	bne.n	800713a <mem_trim+0x11a>
 800712c:	4b0f      	ldr	r3, [pc, #60]	@ (800716c <mem_trim+0x14c>)
 800712e:	f240 3216 	movw	r2, #790	@ 0x316
 8007132:	4913      	ldr	r1, [pc, #76]	@ (8007180 <mem_trim+0x160>)
 8007134:	480f      	ldr	r0, [pc, #60]	@ (8007174 <mem_trim+0x154>)
 8007136:	f006 fa09 	bl	800d54c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800713a:	f8d8 3000 	ldr.w	r3, [r8]
    if (mem2 < lfree) {
 800713e:	4911      	ldr	r1, [pc, #68]	@ (8007184 <mem_trim+0x164>)
  return (struct mem *)(void *)&ram[ptr];
 8007140:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8007142:	6808      	ldr	r0, [r1, #0]
 8007144:	4290      	cmp	r0, r2
      lfree = mem2;
 8007146:	bf88      	it	hi
 8007148:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 800714a:	2100      	movs	r1, #0
 800714c:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 800714e:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 8007152:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8007154:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8007156:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800715a:	5b1a      	ldrh	r2, [r3, r4]
 800715c:	f5b2 5ffa 	cmp.w	r2, #8000	@ 0x1f40
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007160:	bf1c      	itt	ne
 8007162:	189b      	addne	r3, r3, r2
 8007164:	805c      	strhne	r4, [r3, #2]
 8007166:	e7d1      	b.n	800710c <mem_trim+0xec>
 8007168:	2002ed74 	.word	0x2002ed74
 800716c:	0800ecf2 	.word	0x0800ecf2
 8007170:	0800ee44 	.word	0x0800ee44
 8007174:	0800e45a 	.word	0x0800e45a
 8007178:	0800ee5b 	.word	0x0800ee5b
 800717c:	2002ed70 	.word	0x2002ed70
 8007180:	0800ee7b 	.word	0x0800ee7b
 8007184:	2002ed6c 	.word	0x2002ed6c
 8007188:	2002ed78 	.word	0x2002ed78

0800718c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800718c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007190:	b140      	cbz	r0, 80071a4 <mem_malloc+0x18>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007192:	1cc4      	adds	r4, r0, #3
 8007194:	f024 0403 	bic.w	r4, r4, #3
 8007198:	b2a4      	uxth	r4, r4
  if (size < MIN_SIZE_ALIGNED) {
 800719a:	2c0b      	cmp	r4, #11
 800719c:	d904      	bls.n	80071a8 <mem_malloc+0x1c>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800719e:	f5b4 5ffa 	cmp.w	r4, #8000	@ 0x1f40
 80071a2:	d902      	bls.n	80071aa <mem_malloc+0x1e>
    return NULL;
 80071a4:	2000      	movs	r0, #0
 80071a6:	e07e      	b.n	80072a6 <mem_malloc+0x11a>
    size = MIN_SIZE_ALIGNED;
 80071a8:	240c      	movs	r4, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80071aa:	42a0      	cmp	r0, r4
 80071ac:	d8fa      	bhi.n	80071a4 <mem_malloc+0x18>
  return (mem_size_t)((u8_t *)mem - ram);
 80071ae:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 80072e0 <mem_malloc+0x154>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80071b2:	f06f 0707 	mvn.w	r7, #7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80071b6:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 80072e4 <mem_malloc+0x158>
  sys_mutex_lock(&mem_mutex);
 80071ba:	4840      	ldr	r0, [pc, #256]	@ (80072bc <mem_malloc+0x130>)
 80071bc:	f006 f895 	bl	800d2ea <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 80071c0:	f8d9 2000 	ldr.w	r2, [r9]
 80071c4:	f8d8 6000 	ldr.w	r6, [r8]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80071c8:	f5c4 50fa 	rsb	r0, r4, #8000	@ 0x1f40
  return (mem_size_t)((u8_t *)mem - ram);
 80071cc:	1ab6      	subs	r6, r6, r2
 80071ce:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80071d0:	4286      	cmp	r6, r0
 80071d2:	d303      	bcc.n	80071dc <mem_malloc+0x50>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80071d4:	4839      	ldr	r0, [pc, #228]	@ (80072bc <mem_malloc+0x130>)
 80071d6:	f006 f88d 	bl	800d2f4 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80071da:	e7e3      	b.n	80071a4 <mem_malloc+0x18>
  return (struct mem *)(void *)&ram[ptr];
 80071dc:	1995      	adds	r5, r2, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80071de:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 80071e0:	792b      	ldrb	r3, [r5, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d167      	bne.n	80072b6 <mem_malloc+0x12a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80071e6:	1bbb      	subs	r3, r7, r6
 80071e8:	440b      	add	r3, r1
      if ((!mem->used) &&
 80071ea:	42a3      	cmp	r3, r4
 80071ec:	d363      	bcc.n	80072b6 <mem_malloc+0x12a>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80071ee:	f104 0214 	add.w	r2, r4, #20
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d359      	bcc.n	80072aa <mem_malloc+0x11e>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80071f6:	f104 0708 	add.w	r7, r4, #8
 80071fa:	4437      	add	r7, r6
 80071fc:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80071fe:	f5b7 5ffa 	cmp.w	r7, #8000	@ 0x1f40
 8007202:	d106      	bne.n	8007212 <mem_malloc+0x86>
 8007204:	4b2e      	ldr	r3, [pc, #184]	@ (80072c0 <mem_malloc+0x134>)
 8007206:	f240 3287 	movw	r2, #903	@ 0x387
 800720a:	492e      	ldr	r1, [pc, #184]	@ (80072c4 <mem_malloc+0x138>)
 800720c:	482e      	ldr	r0, [pc, #184]	@ (80072c8 <mem_malloc+0x13c>)
 800720e:	f006 f99d 	bl	800d54c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8007212:	f8d9 3000 	ldr.w	r3, [r9]
          mem2->used = 0;
 8007216:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 8007218:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 800721a:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800721c:	8829      	ldrh	r1, [r5, #0]
 800721e:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 8007220:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8007222:	2201      	movs	r2, #1
          mem->next = ptr2;
 8007224:	802f      	strh	r7, [r5, #0]
          mem->used = 1;
 8007226:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007228:	5bda      	ldrh	r2, [r3, r7]
 800722a:	f5b2 5ffa 	cmp.w	r2, #8000	@ 0x1f40
 800722e:	d001      	beq.n	8007234 <mem_malloc+0xa8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007230:	4413      	add	r3, r2
 8007232:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 8007234:	f8d8 3000 	ldr.w	r3, [r8]
 8007238:	4e24      	ldr	r6, [pc, #144]	@ (80072cc <mem_malloc+0x140>)
 800723a:	42ab      	cmp	r3, r5
 800723c:	d112      	bne.n	8007264 <mem_malloc+0xd8>
          while (cur->used && cur != ram_end) {
 800723e:	6831      	ldr	r1, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
 8007240:	f8d9 0000 	ldr.w	r0, [r9]
          while (cur->used && cur != ram_end) {
 8007244:	791a      	ldrb	r2, [r3, #4]
 8007246:	b10a      	cbz	r2, 800724c <mem_malloc+0xc0>
 8007248:	4299      	cmp	r1, r3
 800724a:	d131      	bne.n	80072b0 <mem_malloc+0x124>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800724c:	4299      	cmp	r1, r3
          lfree = cur;
 800724e:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007252:	d007      	beq.n	8007264 <mem_malloc+0xd8>
 8007254:	b132      	cbz	r2, 8007264 <mem_malloc+0xd8>
 8007256:	4b1a      	ldr	r3, [pc, #104]	@ (80072c0 <mem_malloc+0x134>)
 8007258:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800725c:	491c      	ldr	r1, [pc, #112]	@ (80072d0 <mem_malloc+0x144>)
 800725e:	481a      	ldr	r0, [pc, #104]	@ (80072c8 <mem_malloc+0x13c>)
 8007260:	f006 f974 	bl	800d54c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007264:	3408      	adds	r4, #8
        sys_mutex_unlock(&mem_mutex);
 8007266:	4815      	ldr	r0, [pc, #84]	@ (80072bc <mem_malloc+0x130>)
 8007268:	f006 f844 	bl	800d2f4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800726c:	6833      	ldr	r3, [r6, #0]
 800726e:	442c      	add	r4, r5
 8007270:	42a3      	cmp	r3, r4
 8007272:	d206      	bcs.n	8007282 <mem_malloc+0xf6>
 8007274:	4b12      	ldr	r3, [pc, #72]	@ (80072c0 <mem_malloc+0x134>)
 8007276:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800727a:	4916      	ldr	r1, [pc, #88]	@ (80072d4 <mem_malloc+0x148>)
 800727c:	4812      	ldr	r0, [pc, #72]	@ (80072c8 <mem_malloc+0x13c>)
 800727e:	f006 f965 	bl	800d54c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007282:	07ab      	lsls	r3, r5, #30
 8007284:	d00d      	beq.n	80072a2 <mem_malloc+0x116>
 8007286:	4b0e      	ldr	r3, [pc, #56]	@ (80072c0 <mem_malloc+0x134>)
 8007288:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800728c:	4912      	ldr	r1, [pc, #72]	@ (80072d8 <mem_malloc+0x14c>)
 800728e:	480e      	ldr	r0, [pc, #56]	@ (80072c8 <mem_malloc+0x13c>)
 8007290:	f006 f95c 	bl	800d54c <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007294:	4b0a      	ldr	r3, [pc, #40]	@ (80072c0 <mem_malloc+0x134>)
 8007296:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800729a:	4910      	ldr	r1, [pc, #64]	@ (80072dc <mem_malloc+0x150>)
 800729c:	480a      	ldr	r0, [pc, #40]	@ (80072c8 <mem_malloc+0x13c>)
 800729e:	f006 f955 	bl	800d54c <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80072a2:	f105 0008 	add.w	r0, r5, #8
}
 80072a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 80072aa:	2301      	movs	r3, #1
 80072ac:	712b      	strb	r3, [r5, #4]
 80072ae:	e7c1      	b.n	8007234 <mem_malloc+0xa8>
  return (struct mem *)(void *)&ram[ptr];
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	4403      	add	r3, r0
 80072b4:	e7c6      	b.n	8007244 <mem_malloc+0xb8>
 80072b6:	460e      	mov	r6, r1
 80072b8:	e78a      	b.n	80071d0 <mem_malloc+0x44>
 80072ba:	bf00      	nop
 80072bc:	2002ed70 	.word	0x2002ed70
 80072c0:	0800ecf2 	.word	0x0800ecf2
 80072c4:	0800ee7b 	.word	0x0800ee7b
 80072c8:	0800e45a 	.word	0x0800e45a
 80072cc:	2002ed74 	.word	0x2002ed74
 80072d0:	0800ee8c 	.word	0x0800ee8c
 80072d4:	0800eea5 	.word	0x0800eea5
 80072d8:	0800eed5 	.word	0x0800eed5
 80072dc:	0800ef04 	.word	0x0800ef04
 80072e0:	2002ed78 	.word	0x2002ed78
 80072e4:	2002ed6c 	.word	0x2002ed6c

080072e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80072ec:	f006 f81c 	bl	800d328 <sys_arch_protect>
 80072f0:	4605      	mov	r5, r0

  memp = *desc->tab;
 80072f2:	68a3      	ldr	r3, [r4, #8]
 80072f4:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80072f6:	b15c      	cbz	r4, 8007310 <do_memp_malloc_pool+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80072f8:	6822      	ldr	r2, [r4, #0]
 80072fa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80072fc:	07a3      	lsls	r3, r4, #30
 80072fe:	d006      	beq.n	800730e <do_memp_malloc_pool+0x26>
 8007300:	4b05      	ldr	r3, [pc, #20]	@ (8007318 <do_memp_malloc_pool+0x30>)
 8007302:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007306:	4905      	ldr	r1, [pc, #20]	@ (800731c <do_memp_malloc_pool+0x34>)
 8007308:	4805      	ldr	r0, [pc, #20]	@ (8007320 <do_memp_malloc_pool+0x38>)
 800730a:	f006 f91f 	bl	800d54c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800730e:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007310:	f006 f816 	bl	800d340 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8007314:	4620      	mov	r0, r4
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	0800ef27 	.word	0x0800ef27
 800731c:	0800ef57 	.word	0x0800ef57
 8007320:	0800e45a 	.word	0x0800e45a

08007324 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007324:	b538      	push	{r3, r4, r5, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007326:	078b      	lsls	r3, r1, #30
{
 8007328:	4605      	mov	r5, r0
 800732a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800732c:	d006      	beq.n	800733c <do_memp_free_pool+0x18>
 800732e:	4b08      	ldr	r3, [pc, #32]	@ (8007350 <do_memp_free_pool+0x2c>)
 8007330:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8007334:	4907      	ldr	r1, [pc, #28]	@ (8007354 <do_memp_free_pool+0x30>)
 8007336:	4808      	ldr	r0, [pc, #32]	@ (8007358 <do_memp_free_pool+0x34>)
 8007338:	f006 f908 	bl	800d54c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800733c:	f005 fff4 	bl	800d328 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007340:	68ab      	ldr	r3, [r5, #8]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8007346:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800734c:	f005 bff8 	b.w	800d340 <sys_arch_unprotect>
 8007350:	0800ef27 	.word	0x0800ef27
 8007354:	0800ef7a 	.word	0x0800ef7a
 8007358:	0800e45a 	.word	0x0800e45a

0800735c <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800735c:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800735e:	2200      	movs	r2, #0
 8007360:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007362:	3303      	adds	r3, #3
{
 8007364:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007366:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800736a:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800736c:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800736e:	4294      	cmp	r4, r2
 8007370:	dc00      	bgt.n	8007374 <memp_init_pool+0x18>
}
 8007372:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8007374:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8007376:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8007378:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800737a:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800737c:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800737e:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 8007380:	e7f5      	b.n	800736e <memp_init_pool+0x12>
	...

08007384 <memp_init>:
{
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4d05      	ldr	r5, [pc, #20]	@ (800739c <memp_init+0x18>)
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007388:	2400      	movs	r4, #0
 800738a:	3401      	adds	r4, #1
    memp_init_pool(memp_pools[i]);
 800738c:	f855 0b04 	ldr.w	r0, [r5], #4
 8007390:	f7ff ffe4 	bl	800735c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007394:	b2a4      	uxth	r4, r4
 8007396:	2c0d      	cmp	r4, #13
 8007398:	d1f7      	bne.n	800738a <memp_init+0x6>
}
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	0800efe4 	.word	0x0800efe4

080073a0 <memp_malloc_pool>:
{
 80073a0:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80073a2:	4604      	mov	r4, r0
 80073a4:	b118      	cbz	r0, 80073ae <memp_malloc_pool+0xe>
}
 80073a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 80073aa:	f7ff bf9d 	b.w	80072e8 <do_memp_malloc_pool>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80073ae:	4b04      	ldr	r3, [pc, #16]	@ (80073c0 <memp_malloc_pool+0x20>)
 80073b0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80073b4:	4903      	ldr	r1, [pc, #12]	@ (80073c4 <memp_malloc_pool+0x24>)
 80073b6:	4804      	ldr	r0, [pc, #16]	@ (80073c8 <memp_malloc_pool+0x28>)
 80073b8:	f006 f8c8 	bl	800d54c <iprintf>
}
 80073bc:	4620      	mov	r0, r4
 80073be:	bd10      	pop	{r4, pc}
 80073c0:	0800ef27 	.word	0x0800ef27
 80073c4:	0800ef9a 	.word	0x0800ef9a
 80073c8:	0800e45a 	.word	0x0800e45a

080073cc <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80073cc:	280c      	cmp	r0, #12
{
 80073ce:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80073d0:	d806      	bhi.n	80073e0 <memp_malloc+0x14>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80073d2:	4b08      	ldr	r3, [pc, #32]	@ (80073f4 <memp_malloc+0x28>)
 80073d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 80073d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80073dc:	f7ff bf84 	b.w	80072e8 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80073e0:	4b05      	ldr	r3, [pc, #20]	@ (80073f8 <memp_malloc+0x2c>)
 80073e2:	f240 1257 	movw	r2, #343	@ 0x157
 80073e6:	4905      	ldr	r1, [pc, #20]	@ (80073fc <memp_malloc+0x30>)
 80073e8:	4805      	ldr	r0, [pc, #20]	@ (8007400 <memp_malloc+0x34>)
 80073ea:	f006 f8af 	bl	800d54c <iprintf>
}
 80073ee:	2000      	movs	r0, #0
 80073f0:	bd08      	pop	{r3, pc}
 80073f2:	bf00      	nop
 80073f4:	0800efe4 	.word	0x0800efe4
 80073f8:	0800ef27 	.word	0x0800ef27
 80073fc:	0800efac 	.word	0x0800efac
 8007400:	0800e45a 	.word	0x0800e45a

08007404 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007404:	b108      	cbz	r0, 800740a <memp_free_pool+0x6>
  if ((desc == NULL) || (mem == NULL)) {
 8007406:	b939      	cbnz	r1, 8007418 <memp_free_pool+0x14>
 8007408:	4770      	bx	lr
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800740a:	4b04      	ldr	r3, [pc, #16]	@ (800741c <memp_free_pool+0x18>)
 800740c:	f240 1295 	movw	r2, #405	@ 0x195
 8007410:	4903      	ldr	r1, [pc, #12]	@ (8007420 <memp_free_pool+0x1c>)
 8007412:	4804      	ldr	r0, [pc, #16]	@ (8007424 <memp_free_pool+0x20>)
 8007414:	f006 b89a 	b.w	800d54c <iprintf>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007418:	f7ff bf84 	b.w	8007324 <do_memp_free_pool>
 800741c:	0800ef27 	.word	0x0800ef27
 8007420:	0800ef9a 	.word	0x0800ef9a
 8007424:	0800e45a 	.word	0x0800e45a

08007428 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007428:	280c      	cmp	r0, #12
 800742a:	d906      	bls.n	800743a <memp_free+0x12>
 800742c:	4b06      	ldr	r3, [pc, #24]	@ (8007448 <memp_free+0x20>)
 800742e:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007432:	4906      	ldr	r1, [pc, #24]	@ (800744c <memp_free+0x24>)
 8007434:	4806      	ldr	r0, [pc, #24]	@ (8007450 <memp_free+0x28>)
 8007436:	f006 b889 	b.w	800d54c <iprintf>

  if (mem == NULL) {
 800743a:	b121      	cbz	r1, 8007446 <memp_free+0x1e>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800743c:	4b05      	ldr	r3, [pc, #20]	@ (8007454 <memp_free+0x2c>)
 800743e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007442:	f7ff bf6f 	b.w	8007324 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007446:	4770      	bx	lr
 8007448:	0800ef27 	.word	0x0800ef27
 800744c:	0800efc9 	.word	0x0800efc9
 8007450:	0800e45a 	.word	0x0800e45a
 8007454:	0800efe4 	.word	0x0800efe4

08007458 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8007458:	f06f 000b 	mvn.w	r0, #11
 800745c:	4770      	bx	lr
	...

08007460 <netif_issue_reports>:
{
 8007460:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007462:	4604      	mov	r4, r0
 8007464:	b930      	cbnz	r0, 8007474 <netif_issue_reports+0x14>
 8007466:	4b0c      	ldr	r3, [pc, #48]	@ (8007498 <netif_issue_reports+0x38>)
 8007468:	f240 326d 	movw	r2, #877	@ 0x36d
 800746c:	490b      	ldr	r1, [pc, #44]	@ (800749c <netif_issue_reports+0x3c>)
 800746e:	480c      	ldr	r0, [pc, #48]	@ (80074a0 <netif_issue_reports+0x40>)
 8007470:	f006 f86c 	bl	800d54c <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007474:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8007478:	f003 0205 	and.w	r2, r3, #5
 800747c:	2a05      	cmp	r2, #5
 800747e:	d109      	bne.n	8007494 <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007480:	6862      	ldr	r2, [r4, #4]
 8007482:	b13a      	cbz	r2, 8007494 <netif_issue_reports+0x34>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007484:	071b      	lsls	r3, r3, #28
 8007486:	d505      	bpl.n	8007494 <netif_issue_reports+0x34>
      etharp_gratuitous(netif);
 8007488:	1d21      	adds	r1, r4, #4
 800748a:	4620      	mov	r0, r4
}
 800748c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8007490:	f004 bde6 	b.w	800c060 <etharp_request>
}
 8007494:	bd10      	pop	{r4, pc}
 8007496:	bf00      	nop
 8007498:	0800f0b4 	.word	0x0800f0b4
 800749c:	0800f0e5 	.word	0x0800f0e5
 80074a0:	0800e45a 	.word	0x0800e45a

080074a4 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 80074a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80074a6:	6843      	ldr	r3, [r0, #4]
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 80074a8:	4615      	mov	r5, r2
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80074aa:	680a      	ldr	r2, [r1, #0]
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 80074ac:	4604      	mov	r4, r0
 80074ae:	460e      	mov	r6, r1
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d00f      	beq.n	80074d4 <netif_do_set_ipaddr.isra.0+0x30>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80074b4:	602b      	str	r3, [r5, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80074b6:	a901      	add	r1, sp, #4
 80074b8:	4628      	mov	r0, r5
    *ip_2_ip4(&new_addr) = *ipaddr;
 80074ba:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80074bc:	f001 f89e 	bl	80085fc <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80074c0:	a901      	add	r1, sp, #4
 80074c2:	4628      	mov	r0, r5
 80074c4:	f004 fbe8 	bl	800bc98 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80074c8:	6833      	ldr	r3, [r6, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80074ca:	2101      	movs	r1, #1
 80074cc:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80074ce:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80074d0:	f7ff ffc6 	bl	8007460 <netif_issue_reports>
}
 80074d4:	b002      	add	sp, #8
 80074d6:	bd70      	pop	{r4, r5, r6, pc}

080074d8 <netif_init>:
}
 80074d8:	4770      	bx	lr
	...

080074dc <netif_set_addr>:
{
 80074dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 80074de:	4e14      	ldr	r6, [pc, #80]	@ (8007530 <netif_set_addr+0x54>)
{
 80074e0:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 80074e2:	2900      	cmp	r1, #0
 80074e4:	bf14      	ite	ne
 80074e6:	460d      	movne	r5, r1
 80074e8:	4635      	moveq	r5, r6
    netmask = IP4_ADDR_ANY4;
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	bf14      	ite	ne
 80074ee:	4617      	movne	r7, r2
 80074f0:	4637      	moveq	r7, r6
    gw = IP4_ADDR_ANY4;
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bf18      	it	ne
 80074f6:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b9b3      	cbnz	r3, 800752a <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80074fc:	aa01      	add	r2, sp, #4
 80074fe:	4629      	mov	r1, r5
 8007500:	f7ff ffd0 	bl	80074a4 <netif_do_set_ipaddr.isra.0>
 8007504:	2301      	movs	r3, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	68a1      	ldr	r1, [r4, #8]
 800750a:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800750c:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800750e:	bf18      	it	ne
 8007510:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007512:	6832      	ldr	r2, [r6, #0]
 8007514:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007516:	bf18      	it	ne
 8007518:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800751a:	b923      	cbnz	r3, 8007526 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800751c:	aa01      	add	r2, sp, #4
 800751e:	4629      	mov	r1, r5
 8007520:	4620      	mov	r0, r4
 8007522:	f7ff ffbf 	bl	80074a4 <netif_do_set_ipaddr.isra.0>
}
 8007526:	b003      	add	sp, #12
 8007528:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800752a:	2300      	movs	r3, #0
 800752c:	e7eb      	b.n	8007506 <netif_set_addr+0x2a>
 800752e:	bf00      	nop
 8007530:	080109a0 	.word	0x080109a0

08007534 <netif_add>:
{
 8007534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800753a:	4604      	mov	r4, r0
 800753c:	b950      	cbnz	r0, 8007554 <netif_add+0x20>
 800753e:	4b39      	ldr	r3, [pc, #228]	@ (8007624 <netif_add+0xf0>)
 8007540:	f240 1227 	movw	r2, #295	@ 0x127
 8007544:	4938      	ldr	r1, [pc, #224]	@ (8007628 <netif_add+0xf4>)
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007546:	4839      	ldr	r0, [pc, #228]	@ (800762c <netif_add+0xf8>)
 8007548:	f006 f800 	bl	800d54c <iprintf>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800754c:	2400      	movs	r4, #0
}
 800754e:	4620      	mov	r0, r4
 8007550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007554:	b926      	cbnz	r6, 8007560 <netif_add+0x2c>
 8007556:	4b33      	ldr	r3, [pc, #204]	@ (8007624 <netif_add+0xf0>)
 8007558:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800755c:	4934      	ldr	r1, [pc, #208]	@ (8007630 <netif_add+0xfc>)
 800755e:	e7f2      	b.n	8007546 <netif_add+0x12>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007560:	2500      	movs	r5, #0
  netif->num = netif_num;
 8007562:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8007640 <netif_add+0x10c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007566:	4f33      	ldr	r7, [pc, #204]	@ (8007634 <netif_add+0x100>)
  ip_addr_set_zero_ip4(&netif->gw);
 8007568:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 800756a:	8485      	strh	r5, [r0, #36]	@ 0x24
  netif_set_addr(netif, ipaddr, netmask, gw);
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf08      	it	eq
 8007570:	463b      	moveq	r3, r7
  netif->flags = 0;
 8007572:	f880 502d 	strb.w	r5, [r0, #45]	@ 0x2d
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007576:	2a00      	cmp	r2, #0
 8007578:	bf08      	it	eq
 800757a:	463a      	moveq	r2, r7
  netif->link_callback = NULL;
 800757c:	61c5      	str	r5, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800757e:	2900      	cmp	r1, #0
 8007580:	bf08      	it	eq
 8007582:	4639      	moveq	r1, r7
  netif->output = netif_null_output_ip4;
 8007584:	f8df c0bc 	ldr.w	ip, [pc, #188]	@ 8007644 <netif_add+0x110>
  ip_addr_set_zero_ip4(&netif->netmask);
 8007588:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif->state = state;
 800758c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  netif->output = netif_null_output_ip4;
 800758e:	f8c0 c014 	str.w	ip, [r0, #20]
  netif->state = state;
 8007592:	6205      	str	r5, [r0, #32]
  netif->num = netif_num;
 8007594:	f898 5000 	ldrb.w	r5, [r8]
 8007598:	f880 5030 	strb.w	r5, [r0, #48]	@ 0x30
  netif->input = input;
 800759c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800759e:	6105      	str	r5, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80075a0:	f7ff ff9c 	bl	80074dc <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80075a4:	4620      	mov	r0, r4
 80075a6:	47b0      	blx	r6
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d1cf      	bne.n	800754c <netif_add+0x18>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80075ac:	4e22      	ldr	r6, [pc, #136]	@ (8007638 <netif_add+0x104>)
        LWIP_ASSERT("netif already added", netif2 != netif);
 80075ae:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 8007624 <netif_add+0xf0>
      if (netif->num == 255) {
 80075b2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
      num_netifs = 0;
 80075b6:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80075b8:	6835      	ldr	r5, [r6, #0]
      if (netif->num == 255) {
 80075ba:	2bff      	cmp	r3, #255	@ 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 80075bc:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8007648 <netif_add+0x114>
 80075c0:	f8df a068 	ldr.w	sl, [pc, #104]	@ 800762c <netif_add+0xf8>
        netif->num = 0;
 80075c4:	bf04      	itt	eq
 80075c6:	2300      	moveq	r3, #0
 80075c8:	f884 3030 	strbeq.w	r3, [r4, #48]	@ 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80075cc:	b95d      	cbnz	r5, 80075e6 <netif_add+0xb2>
  if (netif->num == 254) {
 80075ce:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80075d2:	2bfe      	cmp	r3, #254	@ 0xfe
    netif_num = (u8_t)(netif->num + 1);
 80075d4:	bf1c      	itt	ne
 80075d6:	3301      	addne	r3, #1
 80075d8:	b2dd      	uxtbne	r5, r3
  netif->next = netif_list;
 80075da:	6833      	ldr	r3, [r6, #0]
 80075dc:	f888 5000 	strb.w	r5, [r8]
 80075e0:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 80075e2:	6034      	str	r4, [r6, #0]
  return netif;
 80075e4:	e7b3      	b.n	800754e <netif_add+0x1a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80075e6:	42a5      	cmp	r5, r4
 80075e8:	d106      	bne.n	80075f8 <netif_add+0xc4>
 80075ea:	464b      	mov	r3, r9
 80075ec:	f240 128b 	movw	r2, #395	@ 0x18b
 80075f0:	4659      	mov	r1, fp
 80075f2:	4650      	mov	r0, sl
 80075f4:	f005 ffaa 	bl	800d54c <iprintf>
        num_netifs++;
 80075f8:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80075fa:	2fff      	cmp	r7, #255	@ 0xff
 80075fc:	dd06      	ble.n	800760c <netif_add+0xd8>
 80075fe:	464b      	mov	r3, r9
 8007600:	f240 128d 	movw	r2, #397	@ 0x18d
 8007604:	490d      	ldr	r1, [pc, #52]	@ (800763c <netif_add+0x108>)
 8007606:	4650      	mov	r0, sl
 8007608:	f005 ffa0 	bl	800d54c <iprintf>
        if (netif2->num == netif->num) {
 800760c:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 8007610:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8007614:	4293      	cmp	r3, r2
 8007616:	d103      	bne.n	8007620 <netif_add+0xec>
          netif->num++;
 8007618:	3301      	adds	r3, #1
 800761a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    } while (netif2 != NULL);
 800761e:	e7c8      	b.n	80075b2 <netif_add+0x7e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007620:	682d      	ldr	r5, [r5, #0]
 8007622:	e7d3      	b.n	80075cc <netif_add+0x98>
 8007624:	0800f0b4 	.word	0x0800f0b4
 8007628:	0800f108 	.word	0x0800f108
 800762c:	0800e45a 	.word	0x0800e45a
 8007630:	0800f121 	.word	0x0800f121
 8007634:	080109a0 	.word	0x080109a0
 8007638:	20037550 	.word	0x20037550
 800763c:	0800f157 	.word	0x0800f157
 8007640:	2003754b 	.word	0x2003754b
 8007644:	08007459 	.word	0x08007459
 8007648:	0800f143 	.word	0x0800f143

0800764c <netif_set_default>:
  netif_default = netif;
 800764c:	4b01      	ldr	r3, [pc, #4]	@ (8007654 <netif_set_default+0x8>)
 800764e:	6018      	str	r0, [r3, #0]
}
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	2003754c 	.word	0x2003754c

08007658 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007658:	b930      	cbnz	r0, 8007668 <netif_set_up+0x10>
 800765a:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <netif_set_up+0x28>)
 800765c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007660:	4908      	ldr	r1, [pc, #32]	@ (8007684 <netif_set_up+0x2c>)
 8007662:	4809      	ldr	r0, [pc, #36]	@ (8007688 <netif_set_up+0x30>)
 8007664:	f005 bf72 	b.w	800d54c <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007668:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 800766c:	07d1      	lsls	r1, r2, #31
 800766e:	d406      	bmi.n	800767e <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007670:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007674:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007676:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800767a:	f7ff bef1 	b.w	8007460 <netif_issue_reports>
}
 800767e:	4770      	bx	lr
 8007680:	0800f0b4 	.word	0x0800f0b4
 8007684:	0800f185 	.word	0x0800f185
 8007688:	0800e45a 	.word	0x0800e45a

0800768c <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800768c:	b930      	cbnz	r0, 800769c <netif_set_down+0x10>
 800768e:	4b0a      	ldr	r3, [pc, #40]	@ (80076b8 <netif_set_down+0x2c>)
 8007690:	f240 329b 	movw	r2, #923	@ 0x39b
 8007694:	4909      	ldr	r1, [pc, #36]	@ (80076bc <netif_set_down+0x30>)
 8007696:	480a      	ldr	r0, [pc, #40]	@ (80076c0 <netif_set_down+0x34>)
 8007698:	f005 bf58 	b.w	800d54c <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 800769c:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 80076a0:	07d1      	lsls	r1, r2, #31
 80076a2:	d507      	bpl.n	80076b4 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80076a4:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80076a8:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80076aa:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80076ae:	d501      	bpl.n	80076b4 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 80076b0:	f004 bc1e 	b.w	800bef0 <etharp_cleanup_netif>
}
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	0800f0b4 	.word	0x0800f0b4
 80076bc:	0800f1a1 	.word	0x0800f1a1
 80076c0:	0800e45a 	.word	0x0800e45a

080076c4 <netif_set_link_up>:
{
 80076c4:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80076c6:	4604      	mov	r4, r0
 80076c8:	b940      	cbnz	r0, 80076dc <netif_set_link_up+0x18>
 80076ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <netif_set_link_up+0x3c>)
 80076cc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80076d0:	490c      	ldr	r1, [pc, #48]	@ (8007704 <netif_set_link_up+0x40>)
 80076d2:	480d      	ldr	r0, [pc, #52]	@ (8007708 <netif_set_link_up+0x44>)
}
 80076d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80076d8:	f005 bf38 	b.w	800d54c <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80076dc:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80076e0:	075a      	lsls	r2, r3, #29
 80076e2:	d40c      	bmi.n	80076fe <netif_set_link_up+0x3a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80076e4:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80076e8:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80076ea:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80076ee:	f7ff feb7 	bl	8007460 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80076f2:	69e3      	ldr	r3, [r4, #28]
 80076f4:	b11b      	cbz	r3, 80076fe <netif_set_link_up+0x3a>
 80076f6:	4620      	mov	r0, r4
}
 80076f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 80076fc:	4718      	bx	r3
}
 80076fe:	bd10      	pop	{r4, pc}
 8007700:	0800f0b4 	.word	0x0800f0b4
 8007704:	0800f1bf 	.word	0x0800f1bf
 8007708:	0800e45a 	.word	0x0800e45a

0800770c <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800770c:	b930      	cbnz	r0, 800771c <netif_set_link_down+0x10>
 800770e:	4b09      	ldr	r3, [pc, #36]	@ (8007734 <netif_set_link_down+0x28>)
 8007710:	f240 4206 	movw	r2, #1030	@ 0x406
 8007714:	4908      	ldr	r1, [pc, #32]	@ (8007738 <netif_set_link_down+0x2c>)
 8007716:	4809      	ldr	r0, [pc, #36]	@ (800773c <netif_set_link_down+0x30>)
 8007718:	f005 bf18 	b.w	800d54c <iprintf>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800771c:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 8007720:	0751      	lsls	r1, r2, #29
 8007722:	d506      	bpl.n	8007732 <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007724:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 8007728:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800772a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800772e:	b103      	cbz	r3, 8007732 <netif_set_link_down+0x26>
 8007730:	4718      	bx	r3
}
 8007732:	4770      	bx	lr
 8007734:	0800f0b4 	.word	0x0800f0b4
 8007738:	0800f1e0 	.word	0x0800f1e0
 800773c:	0800e45a 	.word	0x0800e45a

08007740 <netif_set_link_callback>:
  if (netif) {
 8007740:	b100      	cbz	r0, 8007744 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8007742:	61c1      	str	r1, [r0, #28]
}
 8007744:	4770      	bx	lr
	...

08007748 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007748:	4603      	mov	r3, r0
 800774a:	b158      	cbz	r0, 8007764 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800774c:	4a06      	ldr	r2, [pc, #24]	@ (8007768 <netif_get_by_index+0x20>)
 800774e:	6810      	ldr	r0, [r2, #0]
 8007750:	b900      	cbnz	r0, 8007754 <netif_get_by_index+0xc>
 8007752:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 8007754:	f890 2030 	ldrb.w	r2, [r0, #48]	@ 0x30
 8007758:	3201      	adds	r2, #1
 800775a:	b2d2      	uxtb	r2, r2
 800775c:	429a      	cmp	r2, r3
 800775e:	d001      	beq.n	8007764 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8007760:	6800      	ldr	r0, [r0, #0]
 8007762:	e7f5      	b.n	8007750 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	20037550 	.word	0x20037550

0800776c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800776c:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800776e:	b120      	cbz	r0, 800777a <pbuf_add_header_impl+0xe>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007770:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8007774:	d309      	bcc.n	800778a <pbuf_add_header_impl+0x1e>
    return 1;
 8007776:	2001      	movs	r0, #1
  p->len = (u16_t)(p->len + increment_magnitude);
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);


  return 0;
}
 8007778:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800777a:	4b13      	ldr	r3, [pc, #76]	@ (80077c8 <pbuf_add_header_impl+0x5c>)
 800777c:	f240 12df 	movw	r2, #479	@ 0x1df
 8007780:	4912      	ldr	r1, [pc, #72]	@ (80077cc <pbuf_add_header_impl+0x60>)
 8007782:	4813      	ldr	r0, [pc, #76]	@ (80077d0 <pbuf_add_header_impl+0x64>)
 8007784:	f005 fee2 	bl	800d54c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007788:	e7f5      	b.n	8007776 <pbuf_add_header_impl+0xa>
  if (header_size_increment == 0) {
 800778a:	b1a9      	cbz	r1, 80077b8 <pbuf_add_header_impl+0x4c>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800778c:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 800778e:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007790:	fa13 f381 	uxtah	r3, r3, r1
 8007794:	b29b      	uxth	r3, r3
 8007796:	42a3      	cmp	r3, r4
 8007798:	d3ed      	bcc.n	8007776 <pbuf_add_header_impl+0xa>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800779a:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800779e:	2d00      	cmp	r5, #0
 80077a0:	da0c      	bge.n	80077bc <pbuf_add_header_impl+0x50>
    payload = (u8_t *)p->payload - header_size_increment;
 80077a2:	6842      	ldr	r2, [r0, #4]
 80077a4:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80077a6:	f100 0210 	add.w	r2, r0, #16
 80077aa:	4291      	cmp	r1, r2
 80077ac:	d3e3      	bcc.n	8007776 <pbuf_add_header_impl+0xa>
  p->len = (u16_t)(p->len + increment_magnitude);
 80077ae:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 80077b0:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80077b2:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80077b4:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 80077b6:	8144      	strh	r4, [r0, #10]
    return 0;
 80077b8:	2000      	movs	r0, #0
 80077ba:	e7dd      	b.n	8007778 <pbuf_add_header_impl+0xc>
    if (force) {
 80077bc:	2a00      	cmp	r2, #0
 80077be:	d0da      	beq.n	8007776 <pbuf_add_header_impl+0xa>
      payload = (u8_t *)p->payload - header_size_increment;
 80077c0:	6842      	ldr	r2, [r0, #4]
 80077c2:	1a51      	subs	r1, r2, r1
 80077c4:	e7f3      	b.n	80077ae <pbuf_add_header_impl+0x42>
 80077c6:	bf00      	nop
 80077c8:	0800f203 	.word	0x0800f203
 80077cc:	0800f2d5 	.word	0x0800f2d5
 80077d0:	0800e45a 	.word	0x0800e45a

080077d4 <pbuf_free_ooseq_callback>:
{
 80077d4:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80077d6:	f005 fda7 	bl	800d328 <sys_arch_protect>
 80077da:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <pbuf_free_ooseq_callback+0x28>)
 80077dc:	2200      	movs	r2, #0
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	f005 fdae 	bl	800d340 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80077e4:	4b06      	ldr	r3, [pc, #24]	@ (8007800 <pbuf_free_ooseq_callback+0x2c>)
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	b900      	cbnz	r0, 80077ec <pbuf_free_ooseq_callback+0x18>
}
 80077ea:	bd08      	pop	{r3, pc}
    if (pcb->ooseq != NULL) {
 80077ec:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80077ee:	b11b      	cbz	r3, 80077f8 <pbuf_free_ooseq_callback+0x24>
}
 80077f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 80077f4:	f000 bda2 	b.w	800833c <tcp_free_ooseq>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80077f8:	68c0      	ldr	r0, [r0, #12]
 80077fa:	e7f5      	b.n	80077e8 <pbuf_free_ooseq_callback+0x14>
 80077fc:	20037554 	.word	0x20037554
 8007800:	2003755c 	.word	0x2003755c

08007804 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007804:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 8007808:	2b01      	cmp	r3, #1
{
 800780a:	b570      	push	{r4, r5, r6, lr}
 800780c:	4606      	mov	r6, r0
 800780e:	460d      	mov	r5, r1
 8007810:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007812:	d006      	beq.n	8007822 <pbuf_alloc_reference+0x1e>
 8007814:	4b0a      	ldr	r3, [pc, #40]	@ (8007840 <pbuf_alloc_reference+0x3c>)
 8007816:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800781a:	490a      	ldr	r1, [pc, #40]	@ (8007844 <pbuf_alloc_reference+0x40>)
 800781c:	480a      	ldr	r0, [pc, #40]	@ (8007848 <pbuf_alloc_reference+0x44>)
 800781e:	f005 fe95 	bl	800d54c <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007822:	200b      	movs	r0, #11
 8007824:	f7ff fdd2 	bl	80073cc <memp_malloc>
  if (p == NULL) {
 8007828:	b140      	cbz	r0, 800783c <pbuf_alloc_reference+0x38>
  p->next = NULL;
 800782a:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800782c:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800782e:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 8007830:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 8007832:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 8007834:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 8007838:	2301      	movs	r3, #1
 800783a:	81c3      	strh	r3, [r0, #14]
}
 800783c:	bd70      	pop	{r4, r5, r6, pc}
 800783e:	bf00      	nop
 8007840:	0800f203 	.word	0x0800f203
 8007844:	0800f233 	.word	0x0800f233
 8007848:	0800e45a 	.word	0x0800e45a

0800784c <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800784c:	3003      	adds	r0, #3
 800784e:	f020 0003 	bic.w	r0, r0, #3
{
 8007852:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007854:	180e      	adds	r6, r1, r0
 8007856:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 800785a:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800785c:	42ae      	cmp	r6, r5
 800785e:	d80d      	bhi.n	800787c <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 8007860:	b104      	cbz	r4, 8007864 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007862:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007864:	4618      	mov	r0, r3
  p->next = NULL;
 8007866:	2300      	movs	r3, #0
  p->payload = payload;
 8007868:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 800786c:	2302      	movs	r3, #2
  p->tot_len = tot_len;
 800786e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8007870:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
 8007872:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8007874:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
 8007876:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 8007878:	81c3      	strh	r3, [r0, #14]
}
 800787a:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800787c:	2000      	movs	r0, #0
 800787e:	e7fc      	b.n	800787a <pbuf_alloced_custom+0x2e>

08007880 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007880:	2200      	movs	r2, #0
 8007882:	f7ff bf73 	b.w	800776c <pbuf_add_header_impl>
	...

08007888 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007888:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800788a:	b120      	cbz	r0, 8007896 <pbuf_remove_header+0xe>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800788c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8007890:	d309      	bcc.n	80078a6 <pbuf_remove_header+0x1e>
    return 1;
 8007892:	2001      	movs	r0, #1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
}
 8007894:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007896:	4b0e      	ldr	r3, [pc, #56]	@ (80078d0 <pbuf_remove_header+0x48>)
 8007898:	f240 224b 	movw	r2, #587	@ 0x24b
 800789c:	490d      	ldr	r1, [pc, #52]	@ (80078d4 <pbuf_remove_header+0x4c>)
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800789e:	480e      	ldr	r0, [pc, #56]	@ (80078d8 <pbuf_remove_header+0x50>)
 80078a0:	f005 fe54 	bl	800d54c <iprintf>
 80078a4:	e7f5      	b.n	8007892 <pbuf_remove_header+0xa>
  if (header_size_decrement == 0) {
 80078a6:	b181      	cbz	r1, 80078ca <pbuf_remove_header+0x42>
  increment_magnitude = (u16_t)header_size_decrement;
 80078a8:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80078aa:	8943      	ldrh	r3, [r0, #10]
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d204      	bcs.n	80078ba <pbuf_remove_header+0x32>
 80078b0:	4b07      	ldr	r3, [pc, #28]	@ (80078d0 <pbuf_remove_header+0x48>)
 80078b2:	f240 2255 	movw	r2, #597	@ 0x255
 80078b6:	4909      	ldr	r1, [pc, #36]	@ (80078dc <pbuf_remove_header+0x54>)
 80078b8:	e7f1      	b.n	800789e <pbuf_remove_header+0x16>
  p->len = (u16_t)(p->len - increment_magnitude);
 80078ba:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80078bc:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 80078be:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80078c0:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80078c2:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80078c4:	6044      	str	r4, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	8103      	strh	r3, [r0, #8]
    return 0;
 80078ca:	2000      	movs	r0, #0
 80078cc:	e7e2      	b.n	8007894 <pbuf_remove_header+0xc>
 80078ce:	bf00      	nop
 80078d0:	0800f203 	.word	0x0800f203
 80078d4:	0800f2d5 	.word	0x0800f2d5
 80078d8:	0800e45a 	.word	0x0800e45a
 80078dc:	0800f245 	.word	0x0800f245

080078e0 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 80078e0:	1e0b      	subs	r3, r1, #0
 80078e2:	da02      	bge.n	80078ea <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80078e4:	4259      	negs	r1, r3
 80078e6:	f7ff bfcf 	b.w	8007888 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80078ea:	2201      	movs	r2, #1
 80078ec:	f7ff bf3e 	b.w	800776c <pbuf_add_header_impl>

080078f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80078f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80078f4:	4604      	mov	r4, r0
 80078f6:	b950      	cbnz	r0, 800790e <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80078f8:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 80078fa:	4b2c      	ldr	r3, [pc, #176]	@ (80079ac <pbuf_free+0xbc>)
 80078fc:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007900:	492b      	ldr	r1, [pc, #172]	@ (80079b0 <pbuf_free+0xc0>)
 8007902:	482c      	ldr	r0, [pc, #176]	@ (80079b4 <pbuf_free+0xc4>)
 8007904:	f005 fe22 	bl	800d54c <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8007908:	4628      	mov	r0, r5
 800790a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 800790e:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007910:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80079ac <pbuf_free+0xbc>
 8007914:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 80079c0 <pbuf_free+0xd0>
 8007918:	f8df 9098 	ldr.w	r9, [pc, #152]	@ 80079b4 <pbuf_free+0xc4>
    SYS_ARCH_PROTECT(old_level);
 800791c:	f005 fd04 	bl	800d328 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007920:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8007922:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007924:	b933      	cbnz	r3, 8007934 <pbuf_free+0x44>
 8007926:	4643      	mov	r3, r8
 8007928:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800792c:	4651      	mov	r1, sl
 800792e:	4648      	mov	r0, r9
 8007930:	f005 fe0c 	bl	800d54c <iprintf>
    ref = --(p->ref);
 8007934:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007936:	4638      	mov	r0, r7
    ref = --(p->ref);
 8007938:	3e01      	subs	r6, #1
 800793a:	b2f6      	uxtb	r6, r6
 800793c:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800793e:	f005 fcff 	bl	800d340 <sys_arch_unprotect>
    if (ref == 0) {
 8007942:	2e00      	cmp	r6, #0
 8007944:	d1e0      	bne.n	8007908 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007946:	7b62      	ldrb	r2, [r4, #13]
      q = p->next;
 8007948:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800794a:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800794c:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800794e:	d511      	bpl.n	8007974 <pbuf_free+0x84>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007950:	6923      	ldr	r3, [r4, #16]
 8007952:	b933      	cbnz	r3, 8007962 <pbuf_free+0x72>
 8007954:	4b15      	ldr	r3, [pc, #84]	@ (80079ac <pbuf_free+0xbc>)
 8007956:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800795a:	4917      	ldr	r1, [pc, #92]	@ (80079b8 <pbuf_free+0xc8>)
 800795c:	4815      	ldr	r0, [pc, #84]	@ (80079b4 <pbuf_free+0xc4>)
 800795e:	f005 fdf5 	bl	800d54c <iprintf>
        pc->custom_free_function(p);
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	4620      	mov	r0, r4
 8007966:	4798      	blx	r3
      count++;
 8007968:	3501      	adds	r5, #1
 800796a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800796c:	2e00      	cmp	r6, #0
 800796e:	d0cb      	beq.n	8007908 <pbuf_free+0x18>
      p = q;
 8007970:	4634      	mov	r4, r6
 8007972:	e7d3      	b.n	800791c <pbuf_free+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
 8007974:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007978:	2b02      	cmp	r3, #2
 800797a:	d104      	bne.n	8007986 <pbuf_free+0x96>
          memp_free(MEMP_PBUF_POOL, p);
 800797c:	4621      	mov	r1, r4
 800797e:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8007980:	f7ff fd52 	bl	8007428 <memp_free>
 8007984:	e7f0      	b.n	8007968 <pbuf_free+0x78>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007986:	2b01      	cmp	r3, #1
 8007988:	d102      	bne.n	8007990 <pbuf_free+0xa0>
          memp_free(MEMP_PBUF, p);
 800798a:	4621      	mov	r1, r4
 800798c:	200b      	movs	r0, #11
 800798e:	e7f7      	b.n	8007980 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007990:	b91b      	cbnz	r3, 800799a <pbuf_free+0xaa>
          mem_free(p);
 8007992:	4620      	mov	r0, r4
 8007994:	f7ff fa6c 	bl	8006e70 <mem_free>
 8007998:	e7e6      	b.n	8007968 <pbuf_free+0x78>
          LWIP_ASSERT("invalid pbuf type", 0);
 800799a:	4643      	mov	r3, r8
 800799c:	f240 320f 	movw	r2, #783	@ 0x30f
 80079a0:	4906      	ldr	r1, [pc, #24]	@ (80079bc <pbuf_free+0xcc>)
 80079a2:	4648      	mov	r0, r9
 80079a4:	f005 fdd2 	bl	800d54c <iprintf>
 80079a8:	e7de      	b.n	8007968 <pbuf_free+0x78>
 80079aa:	bf00      	nop
 80079ac:	0800f203 	.word	0x0800f203
 80079b0:	0800f2d5 	.word	0x0800f2d5
 80079b4:	0800e45a 	.word	0x0800e45a
 80079b8:	0800f279 	.word	0x0800f279
 80079bc:	0800f29a 	.word	0x0800f29a
 80079c0:	0800f263 	.word	0x0800f263

080079c4 <pbuf_alloc>:
  switch (type) {
 80079c4:	f5b2 7fc1 	cmp.w	r2, #386	@ 0x182
{
 80079c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	4605      	mov	r5, r0
 80079ce:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 80079d0:	4607      	mov	r7, r0
  switch (type) {
 80079d2:	d014      	beq.n	80079fe <pbuf_alloc+0x3a>
 80079d4:	d808      	bhi.n	80079e8 <pbuf_alloc+0x24>
 80079d6:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d107      	bne.n	80079ee <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 80079de:	2000      	movs	r0, #0
}
 80079e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 80079e4:	f7ff bf0e 	b.w	8007804 <pbuf_alloc_reference>
  switch (type) {
 80079e8:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 80079ec:	d04e      	beq.n	8007a8c <pbuf_alloc+0xc8>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80079ee:	4b37      	ldr	r3, [pc, #220]	@ (8007acc <pbuf_alloc+0x108>)
 80079f0:	f240 1227 	movw	r2, #295	@ 0x127
 80079f4:	4936      	ldr	r1, [pc, #216]	@ (8007ad0 <pbuf_alloc+0x10c>)
 80079f6:	4837      	ldr	r0, [pc, #220]	@ (8007ad4 <pbuf_alloc+0x110>)
 80079f8:	f005 fda8 	bl	800d54c <iprintf>
      return NULL;
 80079fc:	e023      	b.n	8007a46 <pbuf_alloc+0x82>
  switch (type) {
 80079fe:	2500      	movs	r5, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007a00:	f240 58cc 	movw	r8, #1484	@ 0x5cc
  p->type_internal = (u8_t)type;
 8007a04:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8007ae4 <pbuf_alloc+0x120>
  switch (type) {
 8007a08:	462c      	mov	r4, r5
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007a0a:	200c      	movs	r0, #12
 8007a0c:	46aa      	mov	sl, r5
 8007a0e:	f7ff fcdd 	bl	80073cc <memp_malloc>
        if (q == NULL) {
 8007a12:	4605      	mov	r5, r0
 8007a14:	b9d8      	cbnz	r0, 8007a4e <pbuf_alloc+0x8a>
  queued = pbuf_free_ooseq_pending;
 8007a16:	4e30      	ldr	r6, [pc, #192]	@ (8007ad8 <pbuf_alloc+0x114>)
  SYS_ARCH_PROTECT(old_level);
 8007a18:	f005 fc86 	bl	800d328 <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
 8007a1c:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8007a1e:	7837      	ldrb	r7, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 8007a20:	7033      	strb	r3, [r6, #0]
  queued = pbuf_free_ooseq_pending;
 8007a22:	b2ff      	uxtb	r7, r7
  SYS_ARCH_UNPROTECT(old_level);
 8007a24:	f005 fc8c 	bl	800d340 <sys_arch_unprotect>
  if (!queued) {
 8007a28:	b94f      	cbnz	r7, 8007a3e <pbuf_alloc+0x7a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	482b      	ldr	r0, [pc, #172]	@ (8007adc <pbuf_alloc+0x118>)
 8007a2e:	f7ff f953 	bl	8006cd8 <tcpip_try_callback>
 8007a32:	b120      	cbz	r0, 8007a3e <pbuf_alloc+0x7a>
 8007a34:	f005 fc78 	bl	800d328 <sys_arch_protect>
 8007a38:	7035      	strb	r5, [r6, #0]
 8007a3a:	f005 fc81 	bl	800d340 <sys_arch_unprotect>
          if (p) {
 8007a3e:	b114      	cbz	r4, 8007a46 <pbuf_alloc+0x82>
            pbuf_free(p);
 8007a40:	4620      	mov	r0, r4
 8007a42:	f7ff ff55 	bl	80078f0 <pbuf_free>
          return NULL;
 8007a46:	2400      	movs	r4, #0
}
 8007a48:	4620      	mov	r0, r4
 8007a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007a4e:	1cfb      	adds	r3, r7, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007a50:	4407      	add	r7, r0
  p->next = NULL;
 8007a52:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 8007a54:	8106      	strh	r6, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007a56:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007a5a:	3713      	adds	r7, #19
  p->next = NULL;
 8007a5c:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007a5e:	eba8 0303 	sub.w	r3, r8, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007a62:	f027 0703 	bic.w	r7, r7, #3
  p->type_internal = (u8_t)type;
 8007a66:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007a6a:	b29b      	uxth	r3, r3
  p->payload = payload;
 8007a6c:	6047      	str	r7, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007a6e:	42b3      	cmp	r3, r6
 8007a70:	bf28      	it	cs
 8007a72:	4633      	movcs	r3, r6
  p->len = len;
 8007a74:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8007a76:	b13c      	cbz	r4, 8007a88 <pbuf_alloc+0xc4>
          last->next = q;
 8007a78:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 8007a7c:	1af3      	subs	r3, r6, r3
        offset = 0;
 8007a7e:	2700      	movs	r7, #0
        rem_len = (u16_t)(rem_len - qlen);
 8007a80:	b29e      	uxth	r6, r3
      } while (rem_len > 0);
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d1c1      	bne.n	8007a0a <pbuf_alloc+0x46>
 8007a86:	e7df      	b.n	8007a48 <pbuf_alloc+0x84>
 8007a88:	4604      	mov	r4, r0
 8007a8a:	e7f7      	b.n	8007a7c <pbuf_alloc+0xb8>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007a8c:	1cc3      	adds	r3, r0, #3
 8007a8e:	1cca      	adds	r2, r1, #3
 8007a90:	f023 0303 	bic.w	r3, r3, #3
 8007a94:	f022 0203 	bic.w	r2, r2, #3
 8007a98:	4413      	add	r3, r2
 8007a9a:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007a9c:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007aa0:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007aa2:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007aa4:	d3cf      	bcc.n	8007a46 <pbuf_alloc+0x82>
 8007aa6:	4282      	cmp	r2, r0
 8007aa8:	d8cd      	bhi.n	8007a46 <pbuf_alloc+0x82>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007aaa:	f7ff fb6f 	bl	800718c <mem_malloc>
      if (p == NULL) {
 8007aae:	4604      	mov	r4, r0
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d0c9      	beq.n	8007a48 <pbuf_alloc+0x84>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007ab4:	4405      	add	r5, r0
  p->next = NULL;
 8007ab6:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 8007ab8:	8106      	strh	r6, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007aba:	3513      	adds	r5, #19
  p->next = NULL;
 8007abc:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 8007abe:	4b08      	ldr	r3, [pc, #32]	@ (8007ae0 <pbuf_alloc+0x11c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007ac0:	f025 0503 	bic.w	r5, r5, #3
  p->len = len;
 8007ac4:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 8007ac6:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 8007ac8:	6045      	str	r5, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007aca:	e7bd      	b.n	8007a48 <pbuf_alloc+0x84>
 8007acc:	0800f203 	.word	0x0800f203
 8007ad0:	0800f2ac 	.word	0x0800f2ac
 8007ad4:	0800e45a 	.word	0x0800e45a
 8007ad8:	20037554 	.word	0x20037554
 8007adc:	080077d5 	.word	0x080077d5
 8007ae0:	00010080 	.word	0x00010080
 8007ae4:	00010082 	.word	0x00010082

08007ae8 <pbuf_realloc>:
{
 8007ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aec:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007aee:	4604      	mov	r4, r0
 8007af0:	b930      	cbnz	r0, 8007b00 <pbuf_realloc+0x18>
 8007af2:	4b24      	ldr	r3, [pc, #144]	@ (8007b84 <pbuf_realloc+0x9c>)
 8007af4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007af8:	4923      	ldr	r1, [pc, #140]	@ (8007b88 <pbuf_realloc+0xa0>)
 8007afa:	4824      	ldr	r0, [pc, #144]	@ (8007b8c <pbuf_realloc+0xa4>)
 8007afc:	f005 fd26 	bl	800d54c <iprintf>
  if (new_len >= p->tot_len) {
 8007b00:	8927      	ldrh	r7, [r4, #8]
 8007b02:	42b7      	cmp	r7, r6
 8007b04:	d93c      	bls.n	8007b80 <pbuf_realloc+0x98>
 8007b06:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007b08:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8007b84 <pbuf_realloc+0x9c>
 8007b0c:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007b94 <pbuf_realloc+0xac>
 8007b10:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8007b8c <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 8007b14:	8962      	ldrh	r2, [r4, #10]
 8007b16:	42aa      	cmp	r2, r5
 8007b18:	d319      	bcc.n	8007b4e <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007b1a:	7b23      	ldrb	r3, [r4, #12]
 8007b1c:	0719      	lsls	r1, r3, #28
 8007b1e:	d127      	bne.n	8007b70 <pbuf_realloc+0x88>
 8007b20:	42aa      	cmp	r2, r5
 8007b22:	d025      	beq.n	8007b70 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007b24:	7b63      	ldrb	r3, [r4, #13]
 8007b26:	079b      	lsls	r3, r3, #30
 8007b28:	d422      	bmi.n	8007b70 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007b2a:	6861      	ldr	r1, [r4, #4]
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	1b09      	subs	r1, r1, r4
 8007b30:	4429      	add	r1, r5
 8007b32:	b289      	uxth	r1, r1
 8007b34:	f7ff fa74 	bl	8007020 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007b38:	4604      	mov	r4, r0
 8007b3a:	b9c8      	cbnz	r0, 8007b70 <pbuf_realloc+0x88>
 8007b3c:	4b11      	ldr	r3, [pc, #68]	@ (8007b84 <pbuf_realloc+0x9c>)
 8007b3e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8007b42:	4913      	ldr	r1, [pc, #76]	@ (8007b90 <pbuf_realloc+0xa8>)
 8007b44:	4811      	ldr	r0, [pc, #68]	@ (8007b8c <pbuf_realloc+0xa4>)
 8007b46:	f005 fd01 	bl	800d54c <iprintf>
  q->len = rem_len;
 8007b4a:	8164      	strh	r4, [r4, #10]
 8007b4c:	deff      	udf	#255	@ 0xff
    rem_len = (u16_t)(rem_len - q->len);
 8007b4e:	1aaa      	subs	r2, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007b50:	1bf3      	subs	r3, r6, r7
    rem_len = (u16_t)(rem_len - q->len);
 8007b52:	b295      	uxth	r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007b54:	8922      	ldrh	r2, [r4, #8]
 8007b56:	4413      	add	r3, r2
 8007b58:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8007b5a:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007b5c:	2c00      	cmp	r4, #0
 8007b5e:	d1d9      	bne.n	8007b14 <pbuf_realloc+0x2c>
 8007b60:	4643      	mov	r3, r8
 8007b62:	f240 12af 	movw	r2, #431	@ 0x1af
 8007b66:	4651      	mov	r1, sl
 8007b68:	4648      	mov	r0, r9
 8007b6a:	f005 fcef 	bl	800d54c <iprintf>
 8007b6e:	e7d1      	b.n	8007b14 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 8007b70:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8007b72:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8007b74:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8007b76:	b108      	cbz	r0, 8007b7c <pbuf_realloc+0x94>
    pbuf_free(q->next);
 8007b78:	f7ff feba 	bl	80078f0 <pbuf_free>
  q->next = NULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	6023      	str	r3, [r4, #0]
}
 8007b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b84:	0800f203 	.word	0x0800f203
 8007b88:	0800f2c7 	.word	0x0800f2c7
 8007b8c:	0800e45a 	.word	0x0800e45a
 8007b90:	0800f2f7 	.word	0x0800f2f7
 8007b94:	0800f2df 	.word	0x0800f2df

08007b98 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 8007b98:	2300      	movs	r3, #0
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	b908      	cbnz	r0, 8007ba2 <pbuf_clen+0xa>
    ++len;
    p = p->next;
  }
  return len;
}
 8007b9e:	b298      	uxth	r0, r3
 8007ba0:	4770      	bx	lr
    p = p->next;
 8007ba2:	6800      	ldr	r0, [r0, #0]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	e7f8      	b.n	8007b9a <pbuf_clen+0x2>

08007ba8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007ba8:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 8007baa:	4604      	mov	r4, r0
 8007bac:	b188      	cbz	r0, 8007bd2 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007bae:	f005 fbbb 	bl	800d328 <sys_arch_protect>
 8007bb2:	7ba3      	ldrb	r3, [r4, #14]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	73a3      	strb	r3, [r4, #14]
 8007bb8:	f005 fbc2 	bl	800d340 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007bbc:	7ba3      	ldrb	r3, [r4, #14]
 8007bbe:	b943      	cbnz	r3, 8007bd2 <pbuf_ref+0x2a>
 8007bc0:	4b04      	ldr	r3, [pc, #16]	@ (8007bd4 <pbuf_ref+0x2c>)
 8007bc2:	f240 3242 	movw	r2, #834	@ 0x342
 8007bc6:	4904      	ldr	r1, [pc, #16]	@ (8007bd8 <pbuf_ref+0x30>)
 8007bc8:	4804      	ldr	r0, [pc, #16]	@ (8007bdc <pbuf_ref+0x34>)
  }
}
 8007bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007bce:	f005 bcbd 	b.w	800d54c <iprintf>
}
 8007bd2:	bd10      	pop	{r4, pc}
 8007bd4:	0800f203 	.word	0x0800f203
 8007bd8:	0800f313 	.word	0x0800f313
 8007bdc:	0800e45a 	.word	0x0800e45a

08007be0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007be4:	4604      	mov	r4, r0
 8007be6:	b100      	cbz	r0, 8007bea <pbuf_cat+0xa>
 8007be8:	b961      	cbnz	r1, 8007c04 <pbuf_cat+0x24>
 8007bea:	4b15      	ldr	r3, [pc, #84]	@ (8007c40 <pbuf_cat+0x60>)
 8007bec:	f240 3259 	movw	r2, #857	@ 0x359
 8007bf0:	4914      	ldr	r1, [pc, #80]	@ (8007c44 <pbuf_cat+0x64>)
 8007bf2:	4815      	ldr	r0, [pc, #84]	@ (8007c48 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007bf8:	f005 bca8 	b.w	800d54c <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007bfc:	8929      	ldrh	r1, [r5, #8]
 8007bfe:	440b      	add	r3, r1
 8007c00:	8123      	strh	r3, [r4, #8]
 8007c02:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8007c04:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c06:	8923      	ldrh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007c08:	2a00      	cmp	r2, #0
 8007c0a:	d1f7      	bne.n	8007bfc <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007c0c:	8962      	ldrh	r2, [r4, #10]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d00f      	beq.n	8007c32 <pbuf_cat+0x52>
 8007c12:	4b0b      	ldr	r3, [pc, #44]	@ (8007c40 <pbuf_cat+0x60>)
 8007c14:	f240 3262 	movw	r2, #866	@ 0x362
 8007c18:	490c      	ldr	r1, [pc, #48]	@ (8007c4c <pbuf_cat+0x6c>)
 8007c1a:	480b      	ldr	r0, [pc, #44]	@ (8007c48 <pbuf_cat+0x68>)
 8007c1c:	f005 fc96 	bl	800d54c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	b133      	cbz	r3, 8007c32 <pbuf_cat+0x52>
 8007c24:	4b06      	ldr	r3, [pc, #24]	@ (8007c40 <pbuf_cat+0x60>)
 8007c26:	f240 3263 	movw	r2, #867	@ 0x363
 8007c2a:	4909      	ldr	r1, [pc, #36]	@ (8007c50 <pbuf_cat+0x70>)
 8007c2c:	4806      	ldr	r0, [pc, #24]	@ (8007c48 <pbuf_cat+0x68>)
 8007c2e:	f005 fc8d 	bl	800d54c <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c32:	892a      	ldrh	r2, [r5, #8]
 8007c34:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8007c36:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c38:	4413      	add	r3, r2
 8007c3a:	8123      	strh	r3, [r4, #8]
}
 8007c3c:	bd70      	pop	{r4, r5, r6, pc}
 8007c3e:	bf00      	nop
 8007c40:	0800f203 	.word	0x0800f203
 8007c44:	0800f325 	.word	0x0800f325
 8007c48:	0800e45a 	.word	0x0800e45a
 8007c4c:	0800f35a 	.word	0x0800f35a
 8007c50:	0800f387 	.word	0x0800f387

08007c54 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007c54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c58:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	b120      	cbz	r0, 8007c68 <pbuf_copy+0x14>
 8007c5e:	b119      	cbz	r1, 8007c68 <pbuf_copy+0x14>
 8007c60:	8902      	ldrh	r2, [r0, #8]
 8007c62:	890b      	ldrh	r3, [r1, #8]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d20a      	bcs.n	8007c7e <pbuf_copy+0x2a>
 8007c68:	4b34      	ldr	r3, [pc, #208]	@ (8007d3c <pbuf_copy+0xe8>)
 8007c6a:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007c6e:	4934      	ldr	r1, [pc, #208]	@ (8007d40 <pbuf_copy+0xec>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007c70:	4834      	ldr	r0, [pc, #208]	@ (8007d44 <pbuf_copy+0xf0>)
 8007c72:	f005 fc6b 	bl	800d54c <iprintf>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007c76:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8007c7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 8007c7e:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007c80:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 8007d3c <pbuf_copy+0xe8>
 8007c84:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 8007d54 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 8007c88:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007c8a:	f8df a0b8 	ldr.w	sl, [pc, #184]	@ 8007d44 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007c8e:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 8007c92:	8963      	ldrh	r3, [r4, #10]
 8007c94:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007c98:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007c9a:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007c9c:	6861      	ldr	r1, [r4, #4]
 8007c9e:	4438      	add	r0, r7
 8007ca0:	4598      	cmp	r8, r3
 8007ca2:	4431      	add	r1, r6
 8007ca4:	bf28      	it	cs
 8007ca6:	4698      	movcs	r8, r3
 8007ca8:	4642      	mov	r2, r8
    offset_to += len;
 8007caa:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007cac:	f005 fd7f 	bl	800d7ae <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007cb0:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8007cb2:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007cb4:	42bb      	cmp	r3, r7
 8007cb6:	d206      	bcs.n	8007cc6 <pbuf_copy+0x72>
 8007cb8:	464b      	mov	r3, r9
 8007cba:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007cbe:	4659      	mov	r1, fp
 8007cc0:	4650      	mov	r0, sl
 8007cc2:	f005 fc43 	bl	800d54c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007cc6:	8963      	ldrh	r3, [r4, #10]
 8007cc8:	42b3      	cmp	r3, r6
 8007cca:	d206      	bcs.n	8007cda <pbuf_copy+0x86>
 8007ccc:	464b      	mov	r3, r9
 8007cce:	f240 32da 	movw	r2, #986	@ 0x3da
 8007cd2:	491d      	ldr	r1, [pc, #116]	@ (8007d48 <pbuf_copy+0xf4>)
 8007cd4:	4650      	mov	r0, sl
 8007cd6:	f005 fc39 	bl	800d54c <iprintf>
    if (offset_from >= p_from->len) {
 8007cda:	8963      	ldrh	r3, [r4, #10]
 8007cdc:	42b3      	cmp	r3, r6
    if (offset_to == p_to->len) {
 8007cde:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8007ce0:	bf9c      	itt	ls
 8007ce2:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8007ce4:	2600      	movls	r6, #0
    if (offset_to == p_to->len) {
 8007ce6:	42bb      	cmp	r3, r7
 8007ce8:	d108      	bne.n	8007cfc <pbuf_copy+0xa8>
      p_to = p_to->next;
 8007cea:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007cec:	b92d      	cbnz	r5, 8007cfa <pbuf_copy+0xa6>
 8007cee:	b314      	cbz	r4, 8007d36 <pbuf_copy+0xe2>
 8007cf0:	4b12      	ldr	r3, [pc, #72]	@ (8007d3c <pbuf_copy+0xe8>)
 8007cf2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007cf6:	4915      	ldr	r1, [pc, #84]	@ (8007d4c <pbuf_copy+0xf8>)
 8007cf8:	e7ba      	b.n	8007c70 <pbuf_copy+0x1c>
      offset_to = 0;
 8007cfa:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007cfc:	b17c      	cbz	r4, 8007d1e <pbuf_copy+0xca>
 8007cfe:	8962      	ldrh	r2, [r4, #10]
 8007d00:	8923      	ldrh	r3, [r4, #8]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d10b      	bne.n	8007d1e <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	b14b      	cbz	r3, 8007d1e <pbuf_copy+0xca>
 8007d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d3c <pbuf_copy+0xe8>)
 8007d0c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007d10:	490f      	ldr	r1, [pc, #60]	@ (8007d50 <pbuf_copy+0xfc>)
 8007d12:	480c      	ldr	r0, [pc, #48]	@ (8007d44 <pbuf_copy+0xf0>)
 8007d14:	f005 fc1a 	bl	800d54c <iprintf>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007d18:	f06f 0005 	mvn.w	r0, #5
 8007d1c:	e7ad      	b.n	8007c7a <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007d1e:	896a      	ldrh	r2, [r5, #10]
 8007d20:	892b      	ldrh	r3, [r5, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d105      	bne.n	8007d32 <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007d26:	682b      	ldr	r3, [r5, #0]
 8007d28:	b11b      	cbz	r3, 8007d32 <pbuf_copy+0xde>
 8007d2a:	4b04      	ldr	r3, [pc, #16]	@ (8007d3c <pbuf_copy+0xe8>)
 8007d2c:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007d30:	e7ee      	b.n	8007d10 <pbuf_copy+0xbc>
  } while (p_from);
 8007d32:	2c00      	cmp	r4, #0
 8007d34:	d1ab      	bne.n	8007c8e <pbuf_copy+0x3a>
  return ERR_OK;
 8007d36:	4620      	mov	r0, r4
 8007d38:	e79f      	b.n	8007c7a <pbuf_copy+0x26>
 8007d3a:	bf00      	nop
 8007d3c:	0800f203 	.word	0x0800f203
 8007d40:	0800f397 	.word	0x0800f397
 8007d44:	0800e45a 	.word	0x0800e45a
 8007d48:	0800f3de 	.word	0x0800f3de
 8007d4c:	0800f3f9 	.word	0x0800f3f9
 8007d50:	0800f406 	.word	0x0800f406
 8007d54:	0800f3c7 	.word	0x0800f3c7

08007d58 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5c:	460f      	mov	r7, r1
 8007d5e:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007d60:	4605      	mov	r5, r0
 8007d62:	b950      	cbnz	r0, 8007d7a <pbuf_copy_partial+0x22>
 8007d64:	4b19      	ldr	r3, [pc, #100]	@ (8007dcc <pbuf_copy_partial+0x74>)
 8007d66:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007d6a:	4919      	ldr	r1, [pc, #100]	@ (8007dd0 <pbuf_copy_partial+0x78>)
 8007d6c:	2600      	movs	r6, #0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007d6e:	4819      	ldr	r0, [pc, #100]	@ (8007dd4 <pbuf_copy_partial+0x7c>)
 8007d70:	f005 fbec 	bl	800d54c <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 8007d74:	4630      	mov	r0, r6
 8007d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007d7a:	bb21      	cbnz	r1, 8007dc6 <pbuf_copy_partial+0x6e>
 8007d7c:	4b13      	ldr	r3, [pc, #76]	@ (8007dcc <pbuf_copy_partial+0x74>)
 8007d7e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007d82:	4915      	ldr	r1, [pc, #84]	@ (8007dd8 <pbuf_copy_partial+0x80>)
 8007d84:	e7f2      	b.n	8007d6c <pbuf_copy_partial+0x14>
    if ((offset != 0) && (offset >= p->len)) {
 8007d86:	896c      	ldrh	r4, [r5, #10]
 8007d88:	b153      	cbz	r3, 8007da0 <pbuf_copy_partial+0x48>
 8007d8a:	429c      	cmp	r4, r3
 8007d8c:	d808      	bhi.n	8007da0 <pbuf_copy_partial+0x48>
      offset = (u16_t)(offset - p->len);
 8007d8e:	1b1b      	subs	r3, r3, r4
 8007d90:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007d92:	682d      	ldr	r5, [r5, #0]
 8007d94:	f1b8 0f00 	cmp.w	r8, #0
 8007d98:	d0ec      	beq.n	8007d74 <pbuf_copy_partial+0x1c>
 8007d9a:	2d00      	cmp	r5, #0
 8007d9c:	d1f3      	bne.n	8007d86 <pbuf_copy_partial+0x2e>
 8007d9e:	e7e9      	b.n	8007d74 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 8007da0:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007da2:	6869      	ldr	r1, [r5, #4]
 8007da4:	19b8      	adds	r0, r7, r6
 8007da6:	b2a4      	uxth	r4, r4
 8007da8:	4419      	add	r1, r3
 8007daa:	4544      	cmp	r4, r8
 8007dac:	bf28      	it	cs
 8007dae:	4644      	movcs	r4, r8
 8007db0:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007db2:	4426      	add	r6, r4
      len = (u16_t)(len - buf_copy_len);
 8007db4:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007db8:	f005 fcf9 	bl	800d7ae <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007dbc:	b2b6      	uxth	r6, r6
      offset = 0;
 8007dbe:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8007dc0:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8007dc4:	e7e5      	b.n	8007d92 <pbuf_copy_partial+0x3a>
  u16_t left = 0;
 8007dc6:	2600      	movs	r6, #0
 8007dc8:	e7e4      	b.n	8007d94 <pbuf_copy_partial+0x3c>
 8007dca:	bf00      	nop
 8007dcc:	0800f203 	.word	0x0800f203
 8007dd0:	0800f430 	.word	0x0800f430
 8007dd4:	0800e45a 	.word	0x0800e45a
 8007dd8:	0800f44f 	.word	0x0800f44f

08007ddc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007de0:	460a      	mov	r2, r1
 8007de2:	8929      	ldrh	r1, [r5, #8]
 8007de4:	f7ff fdee 	bl	80079c4 <pbuf_alloc>
  if (q == NULL) {
 8007de8:	4604      	mov	r4, r0
 8007dea:	b150      	cbz	r0, 8007e02 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8007dec:	4629      	mov	r1, r5
 8007dee:	f7ff ff31 	bl	8007c54 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007df2:	b130      	cbz	r0, 8007e02 <pbuf_clone+0x26>
 8007df4:	4b04      	ldr	r3, [pc, #16]	@ (8007e08 <pbuf_clone+0x2c>)
 8007df6:	f240 5224 	movw	r2, #1316	@ 0x524
 8007dfa:	4904      	ldr	r1, [pc, #16]	@ (8007e0c <pbuf_clone+0x30>)
 8007dfc:	4804      	ldr	r0, [pc, #16]	@ (8007e10 <pbuf_clone+0x34>)
 8007dfe:	f005 fba5 	bl	800d54c <iprintf>
  return q;
}
 8007e02:	4620      	mov	r0, r4
 8007e04:	bd38      	pop	{r3, r4, r5, pc}
 8007e06:	bf00      	nop
 8007e08:	0800f203 	.word	0x0800f203
 8007e0c:	0800f472 	.word	0x0800f472
 8007e10:	0800e45a 	.word	0x0800e45a

08007e14 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e16:	4c11      	ldr	r4, [pc, #68]	@ (8007e5c <tcp_new_port+0x48>)
 8007e18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007e1c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8007e20:	8823      	ldrh	r3, [r4, #0]
  tcp_port++;
 8007e22:	3301      	adds	r3, #1
 8007e24:	4d0e      	ldr	r5, [pc, #56]	@ (8007e60 <tcp_new_port+0x4c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007e26:	2200      	movs	r2, #0
  tcp_port++;
 8007e28:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007e2a:	42b3      	cmp	r3, r6
 8007e2c:	bf08      	it	eq
 8007e2e:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007e32:	f855 1b04 	ldr.w	r1, [r5], #4
 8007e36:	6809      	ldr	r1, [r1, #0]
 8007e38:	b929      	cbnz	r1, 8007e46 <tcp_new_port+0x32>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007e3a:	3201      	adds	r2, #1
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	2a04      	cmp	r2, #4
 8007e40:	d1f7      	bne.n	8007e32 <tcp_new_port+0x1e>
 8007e42:	4618      	mov	r0, r3
 8007e44:	e006      	b.n	8007e54 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 8007e46:	8acf      	ldrh	r7, [r1, #22]
 8007e48:	429f      	cmp	r7, r3
 8007e4a:	d105      	bne.n	8007e58 <tcp_new_port+0x44>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007e4c:	3801      	subs	r0, #1
 8007e4e:	b280      	uxth	r0, r0
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d1e6      	bne.n	8007e22 <tcp_new_port+0xe>
 8007e54:	8023      	strh	r3, [r4, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8007e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007e58:	68c9      	ldr	r1, [r1, #12]
 8007e5a:	e7ed      	b.n	8007e38 <tcp_new_port+0x24>
 8007e5c:	2000002c 	.word	0x2000002c
 8007e60:	0800faa8 	.word	0x0800faa8

08007e64 <tcp_close_shutdown_fin>:
{
 8007e64:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007e66:	4604      	mov	r4, r0
 8007e68:	b930      	cbnz	r0, 8007e78 <tcp_close_shutdown_fin+0x14>
 8007e6a:	4b13      	ldr	r3, [pc, #76]	@ (8007eb8 <tcp_close_shutdown_fin+0x54>)
 8007e6c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007e70:	4912      	ldr	r1, [pc, #72]	@ (8007ebc <tcp_close_shutdown_fin+0x58>)
 8007e72:	4813      	ldr	r0, [pc, #76]	@ (8007ec0 <tcp_close_shutdown_fin+0x5c>)
 8007e74:	f005 fb6a 	bl	800d54c <iprintf>
  switch (pcb->state) {
 8007e78:	7d23      	ldrb	r3, [r4, #20]
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	d003      	beq.n	8007e86 <tcp_close_shutdown_fin+0x22>
 8007e7e:	2b07      	cmp	r3, #7
 8007e80:	d00c      	beq.n	8007e9c <tcp_close_shutdown_fin+0x38>
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d108      	bne.n	8007e98 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8007e86:	4620      	mov	r0, r4
 8007e88:	f003 f8ba 	bl	800b000 <tcp_send_fin>
      if (err == ERR_OK) {
 8007e8c:	b960      	cbnz	r0, 8007ea8 <tcp_close_shutdown_fin+0x44>
  if (err == ERR_OK) {
 8007e8e:	2305      	movs	r3, #5
    tcp_output(pcb);
 8007e90:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 8007e92:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8007e94:	f003 fa14 	bl	800b2c0 <tcp_output>
      return ERR_OK;
 8007e98:	2000      	movs	r0, #0
}
 8007e9a:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f003 f8af 	bl	800b000 <tcp_send_fin>
      if (err == ERR_OK) {
 8007ea2:	b908      	cbnz	r0, 8007ea8 <tcp_close_shutdown_fin+0x44>
 8007ea4:	2309      	movs	r3, #9
 8007ea6:	e7f3      	b.n	8007e90 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d1f6      	bne.n	8007e9a <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007eac:	8b63      	ldrh	r3, [r4, #26]
 8007eae:	f043 0308 	orr.w	r3, r3, #8
 8007eb2:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8007eb4:	e7f0      	b.n	8007e98 <tcp_close_shutdown_fin+0x34>
 8007eb6:	bf00      	nop
 8007eb8:	0800f483 	.word	0x0800f483
 8007ebc:	0800f4b2 	.word	0x0800f4b2
 8007ec0:	0800e45a 	.word	0x0800e45a

08007ec4 <tcp_init>:
{
 8007ec4:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007ec6:	f005 fa41 	bl	800d34c <rand>
 8007eca:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8007ece:	4b02      	ldr	r3, [pc, #8]	@ (8007ed8 <tcp_init+0x14>)
 8007ed0:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8007ed4:	8018      	strh	r0, [r3, #0]
}
 8007ed6:	bd08      	pop	{r3, pc}
 8007ed8:	2000002c 	.word	0x2000002c

08007edc <tcp_free>:
{
 8007edc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007ede:	7d03      	ldrb	r3, [r0, #20]
{
 8007ee0:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d105      	bne.n	8007ef2 <tcp_free+0x16>
 8007ee6:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <tcp_free+0x24>)
 8007ee8:	22d4      	movs	r2, #212	@ 0xd4
 8007eea:	4906      	ldr	r1, [pc, #24]	@ (8007f04 <tcp_free+0x28>)
 8007eec:	4806      	ldr	r0, [pc, #24]	@ (8007f08 <tcp_free+0x2c>)
 8007eee:	f005 fb2d 	bl	800d54c <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	2001      	movs	r0, #1
}
 8007ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8007efa:	f7ff ba95 	b.w	8007428 <memp_free>
 8007efe:	bf00      	nop
 8007f00:	0800f483 	.word	0x0800f483
 8007f04:	0800f4be 	.word	0x0800f4be
 8007f08:	0800e45a 	.word	0x0800e45a

08007f0c <tcp_bind>:
{
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8007f0e:	4b23      	ldr	r3, [pc, #140]	@ (8007f9c <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f10:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8007f12:	2900      	cmp	r1, #0
 8007f14:	bf14      	ite	ne
 8007f16:	460d      	movne	r5, r1
 8007f18:	461d      	moveq	r5, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f1a:	b948      	cbnz	r0, 8007f30 <tcp_bind+0x24>
 8007f1c:	4b20      	ldr	r3, [pc, #128]	@ (8007fa0 <tcp_bind+0x94>)
 8007f1e:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8007f22:	4920      	ldr	r1, [pc, #128]	@ (8007fa4 <tcp_bind+0x98>)
 8007f24:	4820      	ldr	r0, [pc, #128]	@ (8007fa8 <tcp_bind+0x9c>)
 8007f26:	f005 fb11 	bl	800d54c <iprintf>
 8007f2a:	f06f 000f 	mvn.w	r0, #15
}
 8007f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007f30:	7d03      	ldrb	r3, [r0, #20]
 8007f32:	b14b      	cbz	r3, 8007f48 <tcp_bind+0x3c>
 8007f34:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa0 <tcp_bind+0x94>)
 8007f36:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8007f3a:	491c      	ldr	r1, [pc, #112]	@ (8007fac <tcp_bind+0xa0>)
 8007f3c:	481a      	ldr	r0, [pc, #104]	@ (8007fa8 <tcp_bind+0x9c>)
 8007f3e:	f005 fb05 	bl	800d54c <iprintf>
 8007f42:	f06f 0005 	mvn.w	r0, #5
 8007f46:	e7f2      	b.n	8007f2e <tcp_bind+0x22>
  if (port == 0) {
 8007f48:	b932      	cbnz	r2, 8007f58 <tcp_bind+0x4c>
    port = tcp_new_port();
 8007f4a:	f7ff ff63 	bl	8007e14 <tcp_new_port>
    if (port == 0) {
 8007f4e:	4602      	mov	r2, r0
 8007f50:	b950      	cbnz	r0, 8007f68 <tcp_bind+0x5c>
      return ERR_BUF;
 8007f52:	f06f 0001 	mvn.w	r0, #1
 8007f56:	e7ea      	b.n	8007f2e <tcp_bind+0x22>
 8007f58:	4815      	ldr	r0, [pc, #84]	@ (8007fb0 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007f5a:	f850 1b04 	ldr.w	r1, [r0], #4
 8007f5e:	6809      	ldr	r1, [r1, #0]
 8007f60:	b971      	cbnz	r1, 8007f80 <tcp_bind+0x74>
    for (i = 0; i < max_pcb_list; i++) {
 8007f62:	3301      	adds	r3, #1
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d1f8      	bne.n	8007f5a <tcp_bind+0x4e>
  if (!ip_addr_isany(ipaddr)
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	b103      	cbz	r3, 8007f6e <tcp_bind+0x62>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007f6c:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007f6e:	4b11      	ldr	r3, [pc, #68]	@ (8007fb4 <tcp_bind+0xa8>)
  pcb->local_port = port;
 8007f70:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	601c      	str	r4, [r3, #0]
 8007f76:	60e2      	str	r2, [r4, #12]
 8007f78:	f003 fc78 	bl	800b86c <tcp_timer_needed>
  return ERR_OK;
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	e7d6      	b.n	8007f2e <tcp_bind+0x22>
        if (cpcb->local_port == port) {
 8007f80:	8ace      	ldrh	r6, [r1, #22]
 8007f82:	4296      	cmp	r6, r2
 8007f84:	d105      	bne.n	8007f92 <tcp_bind+0x86>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007f86:	680f      	ldr	r7, [r1, #0]
 8007f88:	b12f      	cbz	r7, 8007f96 <tcp_bind+0x8a>
                 ip_addr_isany(ipaddr) ||
 8007f8a:	682e      	ldr	r6, [r5, #0]
 8007f8c:	b11e      	cbz	r6, 8007f96 <tcp_bind+0x8a>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007f8e:	42b7      	cmp	r7, r6
 8007f90:	d001      	beq.n	8007f96 <tcp_bind+0x8a>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007f92:	68c9      	ldr	r1, [r1, #12]
 8007f94:	e7e4      	b.n	8007f60 <tcp_bind+0x54>
              return ERR_USE;
 8007f96:	f06f 0007 	mvn.w	r0, #7
 8007f9a:	e7c8      	b.n	8007f2e <tcp_bind+0x22>
 8007f9c:	080109a0 	.word	0x080109a0
 8007fa0:	0800f483 	.word	0x0800f483
 8007fa4:	0800f4cf 	.word	0x0800f4cf
 8007fa8:	0800e45a 	.word	0x0800e45a
 8007fac:	0800f4e5 	.word	0x0800f4e5
 8007fb0:	0800faa8 	.word	0x0800faa8
 8007fb4:	20037564 	.word	0x20037564

08007fb8 <tcp_listen_with_backlog_and_err>:
{
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	b968      	cbnz	r0, 8007fdc <tcp_listen_with_backlog_and_err+0x24>
 8007fc0:	4b29      	ldr	r3, [pc, #164]	@ (8008068 <tcp_listen_with_backlog_and_err+0xb0>)
 8007fc2:	f240 3259 	movw	r2, #857	@ 0x359
 8007fc6:	4929      	ldr	r1, [pc, #164]	@ (800806c <tcp_listen_with_backlog_and_err+0xb4>)
  struct tcp_pcb_listen *lpcb = NULL;
 8007fc8:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007fca:	4829      	ldr	r0, [pc, #164]	@ (8008070 <tcp_listen_with_backlog_and_err+0xb8>)
 8007fcc:	f005 fabe 	bl	800d54c <iprintf>
 8007fd0:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 8007fd4:	b106      	cbz	r6, 8007fd8 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 8007fd6:	7033      	strb	r3, [r6, #0]
}
 8007fd8:	4620      	mov	r0, r4
 8007fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007fdc:	7d07      	ldrb	r7, [r0, #20]
 8007fde:	b157      	cbz	r7, 8007ff6 <tcp_listen_with_backlog_and_err+0x3e>
 8007fe0:	4b21      	ldr	r3, [pc, #132]	@ (8008068 <tcp_listen_with_backlog_and_err+0xb0>)
 8007fe2:	f240 325a 	movw	r2, #858	@ 0x35a
 8007fe6:	4923      	ldr	r1, [pc, #140]	@ (8008074 <tcp_listen_with_backlog_and_err+0xbc>)
  struct tcp_pcb_listen *lpcb = NULL;
 8007fe8:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007fea:	4821      	ldr	r0, [pc, #132]	@ (8008070 <tcp_listen_with_backlog_and_err+0xb8>)
 8007fec:	f005 faae 	bl	800d54c <iprintf>
 8007ff0:	f06f 030e 	mvn.w	r3, #14
 8007ff4:	e7ee      	b.n	8007fd4 <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007ff6:	2002      	movs	r0, #2
 8007ff8:	f7ff f9e8 	bl	80073cc <memp_malloc>
  if (lpcb == NULL) {
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d02f      	beq.n	8008062 <tcp_listen_with_backlog_and_err+0xaa>
  lpcb->callback_arg = pcb->callback_arg;
 8008002:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 8008004:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8008006:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008008:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800800a:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800800c:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800800e:	7d6a      	ldrb	r2, [r5, #21]
 8008010:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008012:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008014:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8008016:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8008018:	7aea      	ldrb	r2, [r5, #11]
 800801a:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800801c:	7aaa      	ldrb	r2, [r5, #10]
 800801e:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008020:	682a      	ldr	r2, [r5, #0]
 8008022:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8008024:	b13b      	cbz	r3, 8008036 <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008026:	4a14      	ldr	r2, [pc, #80]	@ (8008078 <tcp_listen_with_backlog_and_err+0xc0>)
 8008028:	6813      	ldr	r3, [r2, #0]
 800802a:	42ab      	cmp	r3, r5
 800802c:	d111      	bne.n	8008052 <tcp_listen_with_backlog_and_err+0x9a>
 800802e:	68eb      	ldr	r3, [r5, #12]
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	2300      	movs	r3, #0
 8008034:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 8008036:	4628      	mov	r0, r5
 8008038:	f7ff ff50 	bl	8007edc <tcp_free>
  lpcb->accept = tcp_accept_null;
 800803c:	4b0f      	ldr	r3, [pc, #60]	@ (800807c <tcp_listen_with_backlog_and_err+0xc4>)
 800803e:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008040:	4b0f      	ldr	r3, [pc, #60]	@ (8008080 <tcp_listen_with_backlog_and_err+0xc8>)
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	601c      	str	r4, [r3, #0]
 8008046:	60e2      	str	r2, [r4, #12]
 8008048:	f003 fc10 	bl	800b86c <tcp_timer_needed>
  res = ERR_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	e7c1      	b.n	8007fd4 <tcp_listen_with_backlog_and_err+0x1c>
 8008050:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0ed      	beq.n	8008032 <tcp_listen_with_backlog_and_err+0x7a>
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	42aa      	cmp	r2, r5
 800805a:	d1f9      	bne.n	8008050 <tcp_listen_with_backlog_and_err+0x98>
 800805c:	68ea      	ldr	r2, [r5, #12]
 800805e:	60da      	str	r2, [r3, #12]
 8008060:	e7e7      	b.n	8008032 <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 8008062:	f04f 33ff 	mov.w	r3, #4294967295
 8008066:	e7b5      	b.n	8007fd4 <tcp_listen_with_backlog_and_err+0x1c>
 8008068:	0800f483 	.word	0x0800f483
 800806c:	0800f50d 	.word	0x0800f50d
 8008070:	0800e45a 	.word	0x0800e45a
 8008074:	0800f53a 	.word	0x0800f53a
 8008078:	20037564 	.word	0x20037564
 800807c:	08008595 	.word	0x08008595
 8008080:	20037560 	.word	0x20037560

08008084 <tcp_update_rcv_ann_wnd>:
{
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008086:	4604      	mov	r4, r0
 8008088:	b930      	cbnz	r0, 8008098 <tcp_update_rcv_ann_wnd+0x14>
 800808a:	4b15      	ldr	r3, [pc, #84]	@ (80080e0 <tcp_update_rcv_ann_wnd+0x5c>)
 800808c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008090:	4914      	ldr	r1, [pc, #80]	@ (80080e4 <tcp_update_rcv_ann_wnd+0x60>)
 8008092:	4815      	ldr	r0, [pc, #84]	@ (80080e8 <tcp_update_rcv_ann_wnd+0x64>)
 8008094:	f005 fa5a 	bl	800d54c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008098:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800809a:	f640 3624 	movw	r6, #2852	@ 0xb24
 800809e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80080a0:	8e67      	ldrh	r7, [r4, #50]	@ 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80080a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80080a4:	1a58      	subs	r0, r3, r1
 80080a6:	42b7      	cmp	r7, r6
 80080a8:	4410      	add	r0, r2
 80080aa:	bf94      	ite	ls
 80080ac:	1bc5      	subls	r5, r0, r7
 80080ae:	1b85      	subhi	r5, r0, r6
 80080b0:	2d00      	cmp	r5, #0
 80080b2:	da0f      	bge.n	80080d4 <tcp_update_rcv_ann_wnd+0x50>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80080b4:	1a53      	subs	r3, r2, r1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	dc0e      	bgt.n	80080d8 <tcp_update_rcv_ann_wnd+0x54>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80080ba:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80080bc:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 80080c0:	d306      	bcc.n	80080d0 <tcp_update_rcv_ann_wnd+0x4c>
 80080c2:	4b07      	ldr	r3, [pc, #28]	@ (80080e0 <tcp_update_rcv_ann_wnd+0x5c>)
 80080c4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80080c8:	4908      	ldr	r1, [pc, #32]	@ (80080ec <tcp_update_rcv_ann_wnd+0x68>)
 80080ca:	4807      	ldr	r0, [pc, #28]	@ (80080e8 <tcp_update_rcv_ann_wnd+0x64>)
 80080cc:	f005 fa3e 	bl	800d54c <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80080d0:	b2ab      	uxth	r3, r5
    return 0;
 80080d2:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80080d4:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 80080d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d8:	2300      	movs	r3, #0
    return 0;
 80080da:	4618      	mov	r0, r3
 80080dc:	e7fa      	b.n	80080d4 <tcp_update_rcv_ann_wnd+0x50>
 80080de:	bf00      	nop
 80080e0:	0800f483 	.word	0x0800f483
 80080e4:	0800f571 	.word	0x0800f571
 80080e8:	0800e45a 	.word	0x0800e45a
 80080ec:	0800f595 	.word	0x0800f595

080080f0 <tcp_recved>:
{
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80080f4:	4605      	mov	r5, r0
 80080f6:	b940      	cbnz	r0, 800810a <tcp_recved+0x1a>
 80080f8:	4b18      	ldr	r3, [pc, #96]	@ (800815c <tcp_recved+0x6c>)
 80080fa:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80080fe:	4918      	ldr	r1, [pc, #96]	@ (8008160 <tcp_recved+0x70>)
 8008100:	4818      	ldr	r0, [pc, #96]	@ (8008164 <tcp_recved+0x74>)
}
 8008102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008106:	f005 ba21 	b.w	800d54c <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800810a:	7d03      	ldrb	r3, [r0, #20]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d106      	bne.n	800811e <tcp_recved+0x2e>
 8008110:	4b12      	ldr	r3, [pc, #72]	@ (800815c <tcp_recved+0x6c>)
 8008112:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008116:	4914      	ldr	r1, [pc, #80]	@ (8008168 <tcp_recved+0x78>)
 8008118:	4812      	ldr	r0, [pc, #72]	@ (8008164 <tcp_recved+0x74>)
 800811a:	f005 fa17 	bl	800d54c <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800811e:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008120:	f241 6348 	movw	r3, #5704	@ 0x1648
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008124:	1911      	adds	r1, r2, r4
 8008126:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008128:	4299      	cmp	r1, r3
 800812a:	d813      	bhi.n	8008154 <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800812c:	428a      	cmp	r2, r1
 800812e:	bf88      	it	hi
 8008130:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008132:	4628      	mov	r0, r5
 8008134:	8529      	strh	r1, [r5, #40]	@ 0x28
 8008136:	f7ff ffa5 	bl	8008084 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800813a:	f240 5391 	movw	r3, #1425	@ 0x591
 800813e:	4298      	cmp	r0, r3
 8008140:	d90a      	bls.n	8008158 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 8008142:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8008144:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8008146:	f043 0302 	orr.w	r3, r3, #2
 800814a:	836b      	strh	r3, [r5, #26]
}
 800814c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8008150:	f003 b8b6 	b.w	800b2c0 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008154:	4619      	mov	r1, r3
 8008156:	e7ec      	b.n	8008132 <tcp_recved+0x42>
}
 8008158:	bd70      	pop	{r4, r5, r6, pc}
 800815a:	bf00      	nop
 800815c:	0800f483 	.word	0x0800f483
 8008160:	0800f5af 	.word	0x0800f5af
 8008164:	0800e45a 	.word	0x0800e45a
 8008168:	0800f5c7 	.word	0x0800f5c7

0800816c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800816c:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800816e:	4604      	mov	r4, r0
 8008170:	b148      	cbz	r0, 8008186 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8008172:	6840      	ldr	r0, [r0, #4]
 8008174:	b108      	cbz	r0, 800817a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8008176:	f7ff fbbb 	bl	80078f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800817a:	4621      	mov	r1, r4
 800817c:	2003      	movs	r0, #3
  }
}
 800817e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8008182:	f7ff b951 	b.w	8007428 <memp_free>
}
 8008186:	bd10      	pop	{r4, pc}

08008188 <tcp_segs_free>:
{
 8008188:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800818a:	b900      	cbnz	r0, 800818e <tcp_segs_free+0x6>
}
 800818c:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800818e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8008190:	f7ff ffec 	bl	800816c <tcp_seg_free>
    seg = next;
 8008194:	4620      	mov	r0, r4
 8008196:	e7f8      	b.n	800818a <tcp_segs_free+0x2>

08008198 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008198:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800819a:	4604      	mov	r4, r0
 800819c:	b930      	cbnz	r0, 80081ac <tcp_seg_copy+0x14>
 800819e:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <tcp_seg_copy+0x3c>)
 80081a0:	f240 6282 	movw	r2, #1666	@ 0x682
 80081a4:	490c      	ldr	r1, [pc, #48]	@ (80081d8 <tcp_seg_copy+0x40>)
 80081a6:	480d      	ldr	r0, [pc, #52]	@ (80081dc <tcp_seg_copy+0x44>)
 80081a8:	f005 f9d0 	bl	800d54c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80081ac:	2003      	movs	r0, #3
 80081ae:	f7ff f90d 	bl	80073cc <memp_malloc>
  if (cseg == NULL) {
 80081b2:	4605      	mov	r5, r0
 80081b4:	b160      	cbz	r0, 80081d0 <tcp_seg_copy+0x38>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80081b6:	4623      	mov	r3, r4
 80081b8:	4602      	mov	r2, r0
 80081ba:	f104 0110 	add.w	r1, r4, #16
 80081be:	f853 0b04 	ldr.w	r0, [r3], #4
 80081c2:	428b      	cmp	r3, r1
 80081c4:	f842 0b04 	str.w	r0, [r2], #4
 80081c8:	d1f9      	bne.n	80081be <tcp_seg_copy+0x26>
  pbuf_ref(cseg->p);
 80081ca:	6868      	ldr	r0, [r5, #4]
 80081cc:	f7ff fcec 	bl	8007ba8 <pbuf_ref>
  return cseg;
}
 80081d0:	4628      	mov	r0, r5
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	0800f483 	.word	0x0800f483
 80081d8:	0800f5ed 	.word	0x0800f5ed
 80081dc:	0800e45a 	.word	0x0800e45a

080081e0 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80081e0:	b100      	cbz	r0, 80081e4 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80081e2:	6101      	str	r1, [r0, #16]
  }
}
 80081e4:	4770      	bx	lr
	...

080081e8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80081ec:	4604      	mov	r4, r0
 80081ee:	b158      	cbz	r0, 8008208 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80081f0:	7d03      	ldrb	r3, [r0, #20]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d106      	bne.n	8008204 <tcp_recv+0x1c>
 80081f6:	4b05      	ldr	r3, [pc, #20]	@ (800820c <tcp_recv+0x24>)
 80081f8:	f240 72df 	movw	r2, #2015	@ 0x7df
 80081fc:	4904      	ldr	r1, [pc, #16]	@ (8008210 <tcp_recv+0x28>)
 80081fe:	4805      	ldr	r0, [pc, #20]	@ (8008214 <tcp_recv+0x2c>)
 8008200:	f005 f9a4 	bl	800d54c <iprintf>
    pcb->recv = recv;
 8008204:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
  }
}
 8008208:	bd38      	pop	{r3, r4, r5, pc}
 800820a:	bf00      	nop
 800820c:	0800f483 	.word	0x0800f483
 8008210:	0800f607 	.word	0x0800f607
 8008214:	0800e45a 	.word	0x0800e45a

08008218 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800821c:	4604      	mov	r4, r0
 800821e:	b158      	cbz	r0, 8008238 <tcp_sent+0x20>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008220:	7d03      	ldrb	r3, [r0, #20]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d106      	bne.n	8008234 <tcp_sent+0x1c>
 8008226:	4b05      	ldr	r3, [pc, #20]	@ (800823c <tcp_sent+0x24>)
 8008228:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800822c:	4904      	ldr	r1, [pc, #16]	@ (8008240 <tcp_sent+0x28>)
 800822e:	4805      	ldr	r0, [pc, #20]	@ (8008244 <tcp_sent+0x2c>)
 8008230:	f005 f98c 	bl	800d54c <iprintf>
    pcb->sent = sent;
 8008234:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
  }
}
 8008238:	bd38      	pop	{r3, r4, r5, pc}
 800823a:	bf00      	nop
 800823c:	0800f483 	.word	0x0800f483
 8008240:	0800f62e 	.word	0x0800f62e
 8008244:	0800e45a 	.word	0x0800e45a

08008248 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800824c:	4604      	mov	r4, r0
 800824e:	b158      	cbz	r0, 8008268 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008250:	7d03      	ldrb	r3, [r0, #20]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d106      	bne.n	8008264 <tcp_err+0x1c>
 8008256:	4b05      	ldr	r3, [pc, #20]	@ (800826c <tcp_err+0x24>)
 8008258:	f640 020d 	movw	r2, #2061	@ 0x80d
 800825c:	4904      	ldr	r1, [pc, #16]	@ (8008270 <tcp_err+0x28>)
 800825e:	4805      	ldr	r0, [pc, #20]	@ (8008274 <tcp_err+0x2c>)
 8008260:	f005 f974 	bl	800d54c <iprintf>
    pcb->errf = err;
 8008264:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
  }
}
 8008268:	bd38      	pop	{r3, r4, r5, pc}
 800826a:	bf00      	nop
 800826c:	0800f483 	.word	0x0800f483
 8008270:	0800f655 	.word	0x0800f655
 8008274:	0800e45a 	.word	0x0800e45a

08008278 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008278:	b118      	cbz	r0, 8008282 <tcp_accept+0xa>
 800827a:	7d03      	ldrb	r3, [r0, #20]
 800827c:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800827e:	bf08      	it	eq
 8008280:	6181      	streq	r1, [r0, #24]
  }
}
 8008282:	4770      	bx	lr

08008284 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008284:	b570      	push	{r4, r5, r6, lr}
 8008286:	460e      	mov	r6, r1
 8008288:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800828a:	4604      	mov	r4, r0
 800828c:	b940      	cbnz	r0, 80082a0 <tcp_poll+0x1c>
 800828e:	4b0b      	ldr	r3, [pc, #44]	@ (80082bc <tcp_poll+0x38>)
 8008290:	f640 023d 	movw	r2, #2109	@ 0x83d
 8008294:	490a      	ldr	r1, [pc, #40]	@ (80082c0 <tcp_poll+0x3c>)
 8008296:	480b      	ldr	r0, [pc, #44]	@ (80082c4 <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 8008298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800829c:	f005 b956 	b.w	800d54c <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80082a0:	7d03      	ldrb	r3, [r0, #20]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d106      	bne.n	80082b4 <tcp_poll+0x30>
 80082a6:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <tcp_poll+0x38>)
 80082a8:	f640 023e 	movw	r2, #2110	@ 0x83e
 80082ac:	4906      	ldr	r1, [pc, #24]	@ (80082c8 <tcp_poll+0x44>)
 80082ae:	4805      	ldr	r0, [pc, #20]	@ (80082c4 <tcp_poll+0x40>)
 80082b0:	f005 f94c 	bl	800d54c <iprintf>
  pcb->poll = poll;
 80082b4:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 80082b8:	7765      	strb	r5, [r4, #29]
}
 80082ba:	bd70      	pop	{r4, r5, r6, pc}
 80082bc:	0800f483 	.word	0x0800f483
 80082c0:	0800f67b 	.word	0x0800f67b
 80082c4:	0800e45a 	.word	0x0800e45a
 80082c8:	0800f691 	.word	0x0800f691

080082cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80082cc:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80082ce:	b930      	cbnz	r0, 80082de <tcp_next_iss+0x12>
 80082d0:	4b06      	ldr	r3, [pc, #24]	@ (80082ec <tcp_next_iss+0x20>)
 80082d2:	f640 02af 	movw	r2, #2223	@ 0x8af
 80082d6:	4906      	ldr	r1, [pc, #24]	@ (80082f0 <tcp_next_iss+0x24>)
 80082d8:	4806      	ldr	r0, [pc, #24]	@ (80082f4 <tcp_next_iss+0x28>)
 80082da:	f005 f937 	bl	800d54c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80082de:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <tcp_next_iss+0x2c>)
 80082e0:	4a06      	ldr	r2, [pc, #24]	@ (80082fc <tcp_next_iss+0x30>)
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	6812      	ldr	r2, [r2, #0]
 80082e6:	4410      	add	r0, r2
 80082e8:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 80082ea:	bd08      	pop	{r3, pc}
 80082ec:	0800f483 	.word	0x0800f483
 80082f0:	0800f6af 	.word	0x0800f6af
 80082f4:	0800e45a 	.word	0x0800e45a
 80082f8:	20000028 	.word	0x20000028
 80082fc:	20037568 	.word	0x20037568

08008300 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4604      	mov	r4, r0
 8008304:	460d      	mov	r5, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008306:	b932      	cbnz	r2, 8008316 <tcp_eff_send_mss_netif+0x16>
 8008308:	4b09      	ldr	r3, [pc, #36]	@ (8008330 <tcp_eff_send_mss_netif+0x30>)
 800830a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800830e:	4909      	ldr	r1, [pc, #36]	@ (8008334 <tcp_eff_send_mss_netif+0x34>)
 8008310:	4809      	ldr	r0, [pc, #36]	@ (8008338 <tcp_eff_send_mss_netif+0x38>)
 8008312:	f005 f91b 	bl	800d54c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008316:	b14d      	cbz	r5, 800832c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
    }
    mtu = outif->mtu;
 8008318:	8cab      	ldrh	r3, [r5, #36]	@ 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800831a:	b13b      	cbz	r3, 800832c <tcp_eff_send_mss_netif+0x2c>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800831c:	2b28      	cmp	r3, #40	@ 0x28
 800831e:	bf38      	it	cc
 8008320:	2328      	movcc	r3, #40	@ 0x28
 8008322:	3b28      	subs	r3, #40	@ 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008324:	b29b      	uxth	r3, r3
 8008326:	429c      	cmp	r4, r3
 8008328:	bf28      	it	cs
 800832a:	461c      	movcs	r4, r3
  }
  return sendmss;
}
 800832c:	4620      	mov	r0, r4
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	0800f483 	.word	0x0800f483
 8008334:	0800f6c9 	.word	0x0800f6c9
 8008338:	0800e45a 	.word	0x0800e45a

0800833c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800833c:	b510      	push	{r4, lr}
 800833e:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8008340:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8008342:	b118      	cbz	r0, 800834c <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 8008344:	f7ff ff20 	bl	8008188 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008348:	2300      	movs	r3, #0
 800834a:	6763      	str	r3, [r4, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800834c:	bd10      	pop	{r4, pc}
	...

08008350 <tcp_pcb_purge>:
{
 8008350:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008352:	4604      	mov	r4, r0
 8008354:	b940      	cbnz	r0, 8008368 <tcp_pcb_purge+0x18>
 8008356:	4b14      	ldr	r3, [pc, #80]	@ (80083a8 <tcp_pcb_purge+0x58>)
 8008358:	f640 0251 	movw	r2, #2129	@ 0x851
 800835c:	4913      	ldr	r1, [pc, #76]	@ (80083ac <tcp_pcb_purge+0x5c>)
 800835e:	4814      	ldr	r0, [pc, #80]	@ (80083b0 <tcp_pcb_purge+0x60>)
}
 8008360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008364:	f005 b8f2 	b.w	800d54c <iprintf>
  if (pcb->state != CLOSED &&
 8008368:	7d03      	ldrb	r3, [r0, #20]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d91a      	bls.n	80083a4 <tcp_pcb_purge+0x54>
 800836e:	2b0a      	cmp	r3, #10
 8008370:	d018      	beq.n	80083a4 <tcp_pcb_purge+0x54>
    if (pcb->refused_data != NULL) {
 8008372:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8008374:	b118      	cbz	r0, 800837e <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 8008376:	f7ff fabb 	bl	80078f0 <pbuf_free>
      pcb->refused_data = NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (pcb->ooseq != NULL) {
 800837e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008380:	b113      	cbz	r3, 8008388 <tcp_pcb_purge+0x38>
      tcp_free_ooseq(pcb);
 8008382:	4620      	mov	r0, r4
 8008384:	f7ff ffda 	bl	800833c <tcp_free_ooseq>
    pcb->rtime = -1;
 8008388:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tcp_segs_free(pcb->unsent);
 800838c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    pcb->rtime = -1;
 800838e:	8623      	strh	r3, [r4, #48]	@ 0x30
    tcp_segs_free(pcb->unsent);
 8008390:	f7ff fefa 	bl	8008188 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008394:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8008396:	f7ff fef7 	bl	8008188 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	e9c4 331b 	strd	r3, r3, [r4, #108]	@ 0x6c
    pcb->unsent_oversize = 0;
 80083a0:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
}
 80083a4:	bd10      	pop	{r4, pc}
 80083a6:	bf00      	nop
 80083a8:	0800f483 	.word	0x0800f483
 80083ac:	0800f6f0 	.word	0x0800f6f0
 80083b0:	0800e45a 	.word	0x0800e45a

080083b4 <tcp_pcb_remove>:
{
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80083b8:	460c      	mov	r4, r1
 80083ba:	b931      	cbnz	r1, 80083ca <tcp_pcb_remove+0x16>
 80083bc:	4b29      	ldr	r3, [pc, #164]	@ (8008464 <tcp_pcb_remove+0xb0>)
 80083be:	f640 0283 	movw	r2, #2179	@ 0x883
 80083c2:	4929      	ldr	r1, [pc, #164]	@ (8008468 <tcp_pcb_remove+0xb4>)
 80083c4:	4829      	ldr	r0, [pc, #164]	@ (800846c <tcp_pcb_remove+0xb8>)
 80083c6:	f005 f8c1 	bl	800d54c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80083ca:	b935      	cbnz	r5, 80083da <tcp_pcb_remove+0x26>
 80083cc:	4b25      	ldr	r3, [pc, #148]	@ (8008464 <tcp_pcb_remove+0xb0>)
 80083ce:	f640 0284 	movw	r2, #2180	@ 0x884
 80083d2:	4927      	ldr	r1, [pc, #156]	@ (8008470 <tcp_pcb_remove+0xbc>)
 80083d4:	4825      	ldr	r0, [pc, #148]	@ (800846c <tcp_pcb_remove+0xb8>)
 80083d6:	f005 f8b9 	bl	800d54c <iprintf>
  TCP_RMV(pcblist, pcb);
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	42a3      	cmp	r3, r4
 80083de:	d11f      	bne.n	8008420 <tcp_pcb_remove+0x6c>
 80083e0:	68e3      	ldr	r3, [r4, #12]
 80083e2:	602b      	str	r3, [r5, #0]
 80083e4:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 80083e6:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 80083e8:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 80083ea:	f7ff ffb1 	bl	8008350 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 80083ee:	7d23      	ldrb	r3, [r4, #20]
 80083f0:	2b0a      	cmp	r3, #10
 80083f2:	d11d      	bne.n	8008430 <tcp_pcb_remove+0x7c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80083f4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80083f6:	bb6b      	cbnz	r3, 8008454 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80083f8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80083fa:	b133      	cbz	r3, 800840a <tcp_pcb_remove+0x56>
 80083fc:	4b19      	ldr	r3, [pc, #100]	@ (8008464 <tcp_pcb_remove+0xb0>)
 80083fe:	f640 0294 	movw	r2, #2196	@ 0x894
 8008402:	491c      	ldr	r1, [pc, #112]	@ (8008474 <tcp_pcb_remove+0xc0>)
 8008404:	4819      	ldr	r0, [pc, #100]	@ (800846c <tcp_pcb_remove+0xb8>)
 8008406:	f005 f8a1 	bl	800d54c <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800840a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800840c:	b1f3      	cbz	r3, 800844c <tcp_pcb_remove+0x98>
 800840e:	4b15      	ldr	r3, [pc, #84]	@ (8008464 <tcp_pcb_remove+0xb0>)
 8008410:	f640 0296 	movw	r2, #2198	@ 0x896
 8008414:	4918      	ldr	r1, [pc, #96]	@ (8008478 <tcp_pcb_remove+0xc4>)
 8008416:	4815      	ldr	r0, [pc, #84]	@ (800846c <tcp_pcb_remove+0xb8>)
 8008418:	f005 f898 	bl	800d54c <iprintf>
 800841c:	e016      	b.n	800844c <tcp_pcb_remove+0x98>
 800841e:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0df      	beq.n	80083e4 <tcp_pcb_remove+0x30>
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	42a2      	cmp	r2, r4
 8008428:	d1f9      	bne.n	800841e <tcp_pcb_remove+0x6a>
 800842a:	68e2      	ldr	r2, [r4, #12]
 800842c:	60da      	str	r2, [r3, #12]
 800842e:	e7d9      	b.n	80083e4 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 8008430:	2b01      	cmp	r3, #1
 8008432:	d00b      	beq.n	800844c <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
 8008434:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8008436:	07da      	lsls	r2, r3, #31
 8008438:	d5dc      	bpl.n	80083f4 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800843a:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800843e:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8008440:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8008442:	f002 ff3d 	bl	800b2c0 <tcp_output>
  if (pcb->state != LISTEN) {
 8008446:	7d23      	ldrb	r3, [r4, #20]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d1d3      	bne.n	80083f4 <tcp_pcb_remove+0x40>
  pcb->state = CLOSED;
 800844c:	2300      	movs	r3, #0
 800844e:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8008450:	82e3      	strh	r3, [r4, #22]
}
 8008452:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008454:	4b03      	ldr	r3, [pc, #12]	@ (8008464 <tcp_pcb_remove+0xb0>)
 8008456:	f640 0293 	movw	r2, #2195	@ 0x893
 800845a:	4908      	ldr	r1, [pc, #32]	@ (800847c <tcp_pcb_remove+0xc8>)
 800845c:	4803      	ldr	r0, [pc, #12]	@ (800846c <tcp_pcb_remove+0xb8>)
 800845e:	f005 f875 	bl	800d54c <iprintf>
 8008462:	e7c9      	b.n	80083f8 <tcp_pcb_remove+0x44>
 8008464:	0800f483 	.word	0x0800f483
 8008468:	0800f70b 	.word	0x0800f70b
 800846c:	0800e45a 	.word	0x0800e45a
 8008470:	0800f727 	.word	0x0800f727
 8008474:	0800f75f 	.word	0x0800f75f
 8008478:	0800f778 	.word	0x0800f778
 800847c:	0800f747 	.word	0x0800f747

08008480 <tcp_abandon>:
{
 8008480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008486:	4604      	mov	r4, r0
 8008488:	b948      	cbnz	r0, 800849e <tcp_abandon+0x1e>
 800848a:	4b38      	ldr	r3, [pc, #224]	@ (800856c <tcp_abandon+0xec>)
 800848c:	f240 223d 	movw	r2, #573	@ 0x23d
 8008490:	4937      	ldr	r1, [pc, #220]	@ (8008570 <tcp_abandon+0xf0>)
 8008492:	4838      	ldr	r0, [pc, #224]	@ (8008574 <tcp_abandon+0xf4>)
}
 8008494:	b004      	add	sp, #16
 8008496:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800849a:	f005 b857 	b.w	800d54c <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800849e:	7d03      	ldrb	r3, [r0, #20]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d106      	bne.n	80084b2 <tcp_abandon+0x32>
 80084a4:	4b31      	ldr	r3, [pc, #196]	@ (800856c <tcp_abandon+0xec>)
 80084a6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80084aa:	4933      	ldr	r1, [pc, #204]	@ (8008578 <tcp_abandon+0xf8>)
 80084ac:	4831      	ldr	r0, [pc, #196]	@ (8008574 <tcp_abandon+0xf4>)
 80084ae:	f005 f84d 	bl	800d54c <iprintf>
  if (pcb->state == TIME_WAIT) {
 80084b2:	7d23      	ldrb	r3, [r4, #20]
 80084b4:	2b0a      	cmp	r3, #10
 80084b6:	d109      	bne.n	80084cc <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80084b8:	4621      	mov	r1, r4
 80084ba:	4830      	ldr	r0, [pc, #192]	@ (800857c <tcp_abandon+0xfc>)
 80084bc:	f7ff ff7a 	bl	80083b4 <tcp_pcb_remove>
    tcp_free(pcb);
 80084c0:	4620      	mov	r0, r4
}
 80084c2:	b004      	add	sp, #16
 80084c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 80084c8:	f7ff bd08 	b.w	8007edc <tcp_free>
    seqno = pcb->snd_nxt;
 80084cc:	f8d4 9050 	ldr.w	r9, [r4, #80]	@ 0x50
    ackno = pcb->rcv_nxt;
 80084d0:	f8d4 a024 	ldr.w	sl, [r4, #36]	@ 0x24
    errf = pcb->errf;
 80084d4:	f8d4 7090 	ldr.w	r7, [r4, #144]	@ 0x90
    errf_arg = pcb->callback_arg;
 80084d8:	f8d4 8010 	ldr.w	r8, [r4, #16]
      if (pcb->local_port != 0) {
 80084dc:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d138      	bne.n	8008554 <tcp_abandon+0xd4>
      if (pcb->local_port != 0) {
 80084e2:	bb2d      	cbnz	r5, 8008530 <tcp_abandon+0xb0>
    u16_t local_port = 0;
 80084e4:	2500      	movs	r5, #0
    int send_rst = 0;
 80084e6:	462e      	mov	r6, r5
    if (pcb->unacked != NULL) {
 80084e8:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80084ea:	b108      	cbz	r0, 80084f0 <tcp_abandon+0x70>
      tcp_segs_free(pcb->unacked);
 80084ec:	f7ff fe4c 	bl	8008188 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80084f0:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80084f2:	b108      	cbz	r0, 80084f8 <tcp_abandon+0x78>
      tcp_segs_free(pcb->unsent);
 80084f4:	f7ff fe48 	bl	8008188 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80084f8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80084fa:	b108      	cbz	r0, 8008500 <tcp_abandon+0x80>
      tcp_segs_free(pcb->ooseq);
 80084fc:	f7ff fe44 	bl	8008188 <tcp_segs_free>
    if (send_rst) {
 8008500:	b156      	cbz	r6, 8008518 <tcp_abandon+0x98>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008502:	8b23      	ldrh	r3, [r4, #24]
 8008504:	4652      	mov	r2, sl
 8008506:	4649      	mov	r1, r9
 8008508:	4620      	mov	r0, r4
 800850a:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800850e:	1d23      	adds	r3, r4, #4
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	4623      	mov	r3, r4
 8008514:	f002 fe5c 	bl	800b1d0 <tcp_rst>
    tcp_free(pcb);
 8008518:	4620      	mov	r0, r4
 800851a:	f7ff fcdf 	bl	8007edc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800851e:	b30f      	cbz	r7, 8008564 <tcp_abandon+0xe4>
 8008520:	f06f 010c 	mvn.w	r1, #12
 8008524:	4640      	mov	r0, r8
 8008526:	463b      	mov	r3, r7
}
 8008528:	b004      	add	sp, #16
 800852a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800852e:	4718      	bx	r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008530:	4a13      	ldr	r2, [pc, #76]	@ (8008580 <tcp_abandon+0x100>)
 8008532:	6813      	ldr	r3, [r2, #0]
 8008534:	42a3      	cmp	r3, r4
 8008536:	d105      	bne.n	8008544 <tcp_abandon+0xc4>
 8008538:	68e3      	ldr	r3, [r4, #12]
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	2300      	movs	r3, #0
 800853e:	60e3      	str	r3, [r4, #12]
 8008540:	e7d0      	b.n	80084e4 <tcp_abandon+0x64>
 8008542:	4613      	mov	r3, r2
 8008544:	2b00      	cmp	r3, #0
 8008546:	d0f9      	beq.n	800853c <tcp_abandon+0xbc>
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	42a2      	cmp	r2, r4
 800854c:	d1f9      	bne.n	8008542 <tcp_abandon+0xc2>
 800854e:	68e2      	ldr	r2, [r4, #12]
 8008550:	60da      	str	r2, [r3, #12]
 8008552:	e7f3      	b.n	800853c <tcp_abandon+0xbc>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008554:	4621      	mov	r1, r4
 8008556:	480b      	ldr	r0, [pc, #44]	@ (8008584 <tcp_abandon+0x104>)
 8008558:	f7ff ff2c 	bl	80083b4 <tcp_pcb_remove>
 800855c:	4b0a      	ldr	r3, [pc, #40]	@ (8008588 <tcp_abandon+0x108>)
 800855e:	2201      	movs	r2, #1
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	e7c1      	b.n	80084e8 <tcp_abandon+0x68>
}
 8008564:	b004      	add	sp, #16
 8008566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856a:	bf00      	nop
 800856c:	0800f483 	.word	0x0800f483
 8008570:	0800f78f 	.word	0x0800f78f
 8008574:	0800e45a 	.word	0x0800e45a
 8008578:	0800f7a8 	.word	0x0800f7a8
 800857c:	20037558 	.word	0x20037558
 8008580:	20037564 	.word	0x20037564
 8008584:	2003755c 	.word	0x2003755c
 8008588:	20037557 	.word	0x20037557

0800858c <tcp_abort>:
  tcp_abandon(pcb, 1);
 800858c:	2101      	movs	r1, #1
 800858e:	f7ff bf77 	b.w	8008480 <tcp_abandon>
	...

08008594 <tcp_accept_null>:
{
 8008594:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008596:	460c      	mov	r4, r1
 8008598:	b931      	cbnz	r1, 80085a8 <tcp_accept_null+0x14>
 800859a:	4b06      	ldr	r3, [pc, #24]	@ (80085b4 <tcp_accept_null+0x20>)
 800859c:	f240 320f 	movw	r2, #783	@ 0x30f
 80085a0:	4905      	ldr	r1, [pc, #20]	@ (80085b8 <tcp_accept_null+0x24>)
 80085a2:	4806      	ldr	r0, [pc, #24]	@ (80085bc <tcp_accept_null+0x28>)
 80085a4:	f004 ffd2 	bl	800d54c <iprintf>
  tcp_abort(pcb);
 80085a8:	4620      	mov	r0, r4
 80085aa:	f7ff ffef 	bl	800858c <tcp_abort>
}
 80085ae:	f06f 000c 	mvn.w	r0, #12
 80085b2:	bd10      	pop	{r4, pc}
 80085b4:	0800f483 	.word	0x0800f483
 80085b8:	0800f7d9 	.word	0x0800f7d9
 80085bc:	0800e45a 	.word	0x0800e45a

080085c0 <tcp_netif_ip_addr_changed_pcblist>:
{
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80085c4:	4605      	mov	r5, r0
 80085c6:	b930      	cbnz	r0, 80085d6 <tcp_netif_ip_addr_changed_pcblist+0x16>
 80085c8:	4b09      	ldr	r3, [pc, #36]	@ (80085f0 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 80085ca:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80085ce:	4909      	ldr	r1, [pc, #36]	@ (80085f4 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 80085d0:	4809      	ldr	r0, [pc, #36]	@ (80085f8 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 80085d2:	f004 ffbb 	bl	800d54c <iprintf>
  while (pcb != NULL) {
 80085d6:	b904      	cbnz	r4, 80085da <tcp_netif_ip_addr_changed_pcblist+0x1a>
}
 80085d8:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 80085de:	68e6      	ldr	r6, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d102      	bne.n	80085ea <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7ff ffd1 	bl	800858c <tcp_abort>
{
 80085ea:	4634      	mov	r4, r6
 80085ec:	e7f3      	b.n	80085d6 <tcp_netif_ip_addr_changed_pcblist+0x16>
 80085ee:	bf00      	nop
 80085f0:	0800f483 	.word	0x0800f483
 80085f4:	0800f7f6 	.word	0x0800f7f6
 80085f8:	0800e45a 	.word	0x0800e45a

080085fc <tcp_netif_ip_addr_changed>:
{
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	460d      	mov	r5, r1
  if (!ip_addr_isany(old_addr)) {
 8008600:	4604      	mov	r4, r0
 8008602:	b180      	cbz	r0, 8008626 <tcp_netif_ip_addr_changed+0x2a>
 8008604:	6803      	ldr	r3, [r0, #0]
 8008606:	b173      	cbz	r3, 8008626 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008608:	4b0b      	ldr	r3, [pc, #44]	@ (8008638 <tcp_netif_ip_addr_changed+0x3c>)
 800860a:	6819      	ldr	r1, [r3, #0]
 800860c:	f7ff ffd8 	bl	80085c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008610:	4b0a      	ldr	r3, [pc, #40]	@ (800863c <tcp_netif_ip_addr_changed+0x40>)
 8008612:	4620      	mov	r0, r4
 8008614:	6819      	ldr	r1, [r3, #0]
 8008616:	f7ff ffd3 	bl	80085c0 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800861a:	b125      	cbz	r5, 8008626 <tcp_netif_ip_addr_changed+0x2a>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	b113      	cbz	r3, 8008626 <tcp_netif_ip_addr_changed+0x2a>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008620:	4b07      	ldr	r3, [pc, #28]	@ (8008640 <tcp_netif_ip_addr_changed+0x44>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	b903      	cbnz	r3, 8008628 <tcp_netif_ip_addr_changed+0x2c>
}
 8008626:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008628:	6819      	ldr	r1, [r3, #0]
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800862e:	bf04      	itt	eq
 8008630:	682a      	ldreq	r2, [r5, #0]
 8008632:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	e7f5      	b.n	8008624 <tcp_netif_ip_addr_changed+0x28>
 8008638:	2003755c 	.word	0x2003755c
 800863c:	20037564 	.word	0x20037564
 8008640:	20037560 	.word	0x20037560

08008644 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008644:	4b0c      	ldr	r3, [pc, #48]	@ (8008678 <tcp_kill_state+0x34>)
  inactivity = 0;
 8008646:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008648:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800864a:	4b0c      	ldr	r3, [pc, #48]	@ (800867c <tcp_kill_state+0x38>)
{
 800864c:	b430      	push	{r4, r5}
 800864e:	4604      	mov	r4, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008650:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8008652:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008654:	b919      	cbnz	r1, 800865e <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8008656:	b168      	cbz	r0, 8008674 <tcp_kill_state+0x30>
}
 8008658:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800865a:	f7ff bf11 	b.w	8008480 <tcp_abandon>
    if (pcb->state == state) {
 800865e:	7d0b      	ldrb	r3, [r1, #20]
 8008660:	42a3      	cmp	r3, r4
 8008662:	d105      	bne.n	8008670 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008664:	6a0b      	ldr	r3, [r1, #32]
 8008666:	1aeb      	subs	r3, r5, r3
 8008668:	4293      	cmp	r3, r2
 800866a:	bf24      	itt	cs
 800866c:	461a      	movcs	r2, r3
 800866e:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008670:	68c9      	ldr	r1, [r1, #12]
 8008672:	e7ef      	b.n	8008654 <tcp_kill_state+0x10>
}
 8008674:	bc30      	pop	{r4, r5}
 8008676:	4770      	bx	lr
 8008678:	2003755c 	.word	0x2003755c
 800867c:	20037568 	.word	0x20037568

08008680 <tcp_alloc>:
{
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008684:	2001      	movs	r0, #1
 8008686:	f7fe fea1 	bl	80073cc <memp_malloc>
  if (pcb == NULL) {
 800868a:	4603      	mov	r3, r0
 800868c:	2800      	cmp	r0, #0
 800868e:	d136      	bne.n	80086fe <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008690:	4e3f      	ldr	r6, [pc, #252]	@ (8008790 <tcp_alloc+0x110>)
 8008692:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 8008694:	2800      	cmp	r0, #0
 8008696:	d157      	bne.n	8008748 <tcp_alloc+0xc8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008698:	4b3e      	ldr	r3, [pc, #248]	@ (8008794 <tcp_alloc+0x114>)
  inactivity = 0;
 800869a:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800869c:	4d3e      	ldr	r5, [pc, #248]	@ (8008798 <tcp_alloc+0x118>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800869e:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80086a0:	682f      	ldr	r7, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d15b      	bne.n	800875e <tcp_alloc+0xde>
  if (inactive != NULL) {
 80086a6:	b108      	cbz	r0, 80086ac <tcp_alloc+0x2c>
    tcp_abort(inactive);
 80086a8:	f7ff ff70 	bl	800858c <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80086ac:	2001      	movs	r0, #1
 80086ae:	f7fe fe8d 	bl	80073cc <memp_malloc>
    if (pcb == NULL) {
 80086b2:	4603      	mov	r3, r0
 80086b4:	bb18      	cbnz	r0, 80086fe <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 80086b6:	2009      	movs	r0, #9
 80086b8:	f7ff ffc4 	bl	8008644 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80086bc:	2001      	movs	r0, #1
 80086be:	f7fe fe85 	bl	80073cc <memp_malloc>
      if (pcb == NULL) {
 80086c2:	4603      	mov	r3, r0
 80086c4:	b9d8      	cbnz	r0, 80086fe <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 80086c6:	2008      	movs	r0, #8
 80086c8:	f7ff ffbc 	bl	8008644 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80086cc:	2001      	movs	r0, #1
 80086ce:	f7fe fe7d 	bl	80073cc <memp_malloc>
        if (pcb == NULL) {
 80086d2:	4603      	mov	r3, r0
 80086d4:	b998      	cbnz	r0, 80086fe <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80086d6:	0622      	lsls	r2, r4, #24
 80086d8:	d449      	bmi.n	800876e <tcp_alloc+0xee>
  if (mprio == 0) {
 80086da:	b15c      	cbz	r4, 80086f4 <tcp_alloc+0x74>
 80086dc:	4621      	mov	r1, r4
  mprio--;
 80086de:	3901      	subs	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086e0:	6832      	ldr	r2, [r6, #0]
  inactivity = 0;
 80086e2:	2000      	movs	r0, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80086e4:	682e      	ldr	r6, [r5, #0]
  mprio--;
 80086e6:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086e8:	2a00      	cmp	r2, #0
 80086ea:	d142      	bne.n	8008772 <tcp_alloc+0xf2>
  if (inactive != NULL) {
 80086ec:	b113      	cbz	r3, 80086f4 <tcp_alloc+0x74>
    tcp_abort(inactive);
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7ff ff4c 	bl	800858c <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80086f4:	2001      	movs	r0, #1
 80086f6:	f7fe fe69 	bl	80073cc <memp_malloc>
  if (pcb != NULL) {
 80086fa:	4603      	mov	r3, r0
 80086fc:	b310      	cbz	r0, 8008744 <tcp_alloc+0xc4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80086fe:	229c      	movs	r2, #156	@ 0x9c
 8008700:	4618      	mov	r0, r3
 8008702:	2100      	movs	r1, #0
 8008704:	f004 ff87 	bl	800d616 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 8008708:	f241 3288 	movw	r2, #5000	@ 0x1388
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800870c:	4603      	mov	r3, r0
    pcb->prio = prio;
 800870e:	7544      	strb	r4, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008710:	f8a0 2064 	strh.w	r2, [r0, #100]	@ 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008714:	4a21      	ldr	r2, [pc, #132]	@ (800879c <tcp_alloc+0x11c>)
 8008716:	6282      	str	r2, [r0, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8008718:	22ff      	movs	r2, #255	@ 0xff
 800871a:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800871c:	2206      	movs	r2, #6
 800871e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008722:	87c2      	strh	r2, [r0, #62]	@ 0x3e
    pcb->rtime = -1;
 8008724:	4a1e      	ldr	r2, [pc, #120]	@ (80087a0 <tcp_alloc+0x120>)
 8008726:	6302      	str	r2, [r0, #48]	@ 0x30
    pcb->tmr = tcp_ticks;
 8008728:	4a1b      	ldr	r2, [pc, #108]	@ (8008798 <tcp_alloc+0x118>)
 800872a:	6812      	ldr	r2, [r2, #0]
 800872c:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800872e:	4a1d      	ldr	r2, [pc, #116]	@ (80087a4 <tcp_alloc+0x124>)
 8008730:	7812      	ldrb	r2, [r2, #0]
 8008732:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 8008734:	4a1c      	ldr	r2, [pc, #112]	@ (80087a8 <tcp_alloc+0x128>)
 8008736:	6482      	str	r2, [r0, #72]	@ 0x48
    pcb->recv = tcp_recv_null;
 8008738:	4a1c      	ldr	r2, [pc, #112]	@ (80087ac <tcp_alloc+0x12c>)
 800873a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800873e:	4a1c      	ldr	r2, [pc, #112]	@ (80087b0 <tcp_alloc+0x130>)
 8008740:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
}
 8008744:	4618      	mov	r0, r3
 8008746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 8008748:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800874a:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800874c:	0719      	lsls	r1, r3, #28
 800874e:	d504      	bpl.n	800875a <tcp_alloc+0xda>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008750:	f023 0308 	bic.w	r3, r3, #8
 8008754:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8008756:	f7ff fb85 	bl	8007e64 <tcp_close_shutdown_fin>
{
 800875a:	4628      	mov	r0, r5
 800875c:	e79a      	b.n	8008694 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800875e:	6a1a      	ldr	r2, [r3, #32]
 8008760:	1aba      	subs	r2, r7, r2
 8008762:	428a      	cmp	r2, r1
 8008764:	bf24      	itt	cs
 8008766:	4618      	movcs	r0, r3
 8008768:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	e799      	b.n	80086a2 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800876e:	217f      	movs	r1, #127	@ 0x7f
 8008770:	e7b5      	b.n	80086de <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 8008772:	7d57      	ldrb	r7, [r2, #21]
 8008774:	428f      	cmp	r7, r1
 8008776:	d304      	bcc.n	8008782 <tcp_alloc+0x102>
 8008778:	d107      	bne.n	800878a <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800877a:	6a15      	ldr	r5, [r2, #32]
 800877c:	1b75      	subs	r5, r6, r5
 800877e:	4285      	cmp	r5, r0
 8008780:	d303      	bcc.n	800878a <tcp_alloc+0x10a>
      inactivity = tcp_ticks - pcb->tmr;
 8008782:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 8008784:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
 8008786:	4613      	mov	r3, r2
 8008788:	1a30      	subs	r0, r6, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800878a:	68d2      	ldr	r2, [r2, #12]
 800878c:	e7ac      	b.n	80086e8 <tcp_alloc+0x68>
 800878e:	bf00      	nop
 8008790:	2003755c 	.word	0x2003755c
 8008794:	20037558 	.word	0x20037558
 8008798:	20037568 	.word	0x20037568
 800879c:	16481648 	.word	0x16481648
 80087a0:	0218ffff 	.word	0x0218ffff
 80087a4:	20037555 	.word	0x20037555
 80087a8:	13880001 	.word	0x13880001
 80087ac:	0800895d 	.word	0x0800895d
 80087b0:	006ddd00 	.word	0x006ddd00

080087b4 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80087b4:	2040      	movs	r0, #64	@ 0x40
 80087b6:	f7ff bf63 	b.w	8008680 <tcp_alloc>
	...

080087bc <tcp_close_shutdown>:
{
 80087bc:	b530      	push	{r4, r5, lr}
 80087be:	460d      	mov	r5, r1
 80087c0:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80087c2:	4604      	mov	r4, r0
 80087c4:	b930      	cbnz	r0, 80087d4 <tcp_close_shutdown+0x18>
 80087c6:	4b4b      	ldr	r3, [pc, #300]	@ (80088f4 <tcp_close_shutdown+0x138>)
 80087c8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80087cc:	494a      	ldr	r1, [pc, #296]	@ (80088f8 <tcp_close_shutdown+0x13c>)
 80087ce:	484b      	ldr	r0, [pc, #300]	@ (80088fc <tcp_close_shutdown+0x140>)
 80087d0:	f004 febc 	bl	800d54c <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80087d4:	7d23      	ldrb	r3, [r4, #20]
 80087d6:	2d00      	cmp	r5, #0
 80087d8:	d040      	beq.n	800885c <tcp_close_shutdown+0xa0>
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d001      	beq.n	80087e2 <tcp_close_shutdown+0x26>
 80087de:	2b07      	cmp	r3, #7
 80087e0:	d13c      	bne.n	800885c <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80087e2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80087e4:	b922      	cbnz	r2, 80087f0 <tcp_close_shutdown+0x34>
 80087e6:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 80087e8:	f241 6248 	movw	r2, #5704	@ 0x1648
 80087ec:	4291      	cmp	r1, r2
 80087ee:	d035      	beq.n	800885c <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80087f0:	8b63      	ldrh	r3, [r4, #26]
 80087f2:	06db      	lsls	r3, r3, #27
 80087f4:	d406      	bmi.n	8008804 <tcp_close_shutdown+0x48>
 80087f6:	4b3f      	ldr	r3, [pc, #252]	@ (80088f4 <tcp_close_shutdown+0x138>)
 80087f8:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80087fc:	4940      	ldr	r1, [pc, #256]	@ (8008900 <tcp_close_shutdown+0x144>)
 80087fe:	483f      	ldr	r0, [pc, #252]	@ (80088fc <tcp_close_shutdown+0x140>)
 8008800:	f004 fea4 	bl	800d54c <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008804:	8b23      	ldrh	r3, [r4, #24]
 8008806:	4620      	mov	r0, r4
 8008808:	9302      	str	r3, [sp, #8]
 800880a:	8ae3      	ldrh	r3, [r4, #22]
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	1d23      	adds	r3, r4, #4
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	4623      	mov	r3, r4
 8008814:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008816:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8008818:	f002 fcda 	bl	800b1d0 <tcp_rst>
      tcp_pcb_purge(pcb);
 800881c:	4620      	mov	r0, r4
 800881e:	f7ff fd97 	bl	8008350 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008822:	4a38      	ldr	r2, [pc, #224]	@ (8008904 <tcp_close_shutdown+0x148>)
 8008824:	6813      	ldr	r3, [r2, #0]
 8008826:	42a3      	cmp	r3, r4
 8008828:	d110      	bne.n	800884c <tcp_close_shutdown+0x90>
 800882a:	68e3      	ldr	r3, [r4, #12]
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	2300      	movs	r3, #0
 8008830:	2201      	movs	r2, #1
 8008832:	60e3      	str	r3, [r4, #12]
 8008834:	4b34      	ldr	r3, [pc, #208]	@ (8008908 <tcp_close_shutdown+0x14c>)
 8008836:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8008838:	4b34      	ldr	r3, [pc, #208]	@ (800890c <tcp_close_shutdown+0x150>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	42a3      	cmp	r3, r4
 800883e:	d11d      	bne.n	800887c <tcp_close_shutdown+0xc0>
        tcp_trigger_input_pcb_close();
 8008840:	f001 fe6c 	bl	800a51c <tcp_trigger_input_pcb_close>
}
 8008844:	2000      	movs	r0, #0
 8008846:	b005      	add	sp, #20
 8008848:	bd30      	pop	{r4, r5, pc}
 800884a:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0ee      	beq.n	800882e <tcp_close_shutdown+0x72>
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	42a2      	cmp	r2, r4
 8008854:	d1f9      	bne.n	800884a <tcp_close_shutdown+0x8e>
 8008856:	68e2      	ldr	r2, [r4, #12]
 8008858:	60da      	str	r2, [r3, #12]
 800885a:	e7e8      	b.n	800882e <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800885c:	2b01      	cmp	r3, #1
 800885e:	d01a      	beq.n	8008896 <tcp_close_shutdown+0xda>
 8008860:	2b02      	cmp	r3, #2
 8008862:	d039      	beq.n	80088d8 <tcp_close_shutdown+0x11c>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d13f      	bne.n	80088e8 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 8008868:	8ae3      	ldrh	r3, [r4, #22]
 800886a:	b13b      	cbz	r3, 800887c <tcp_close_shutdown+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800886c:	4a28      	ldr	r2, [pc, #160]	@ (8008910 <tcp_close_shutdown+0x154>)
 800886e:	6813      	ldr	r3, [r2, #0]
 8008870:	42a3      	cmp	r3, r4
 8008872:	d108      	bne.n	8008886 <tcp_close_shutdown+0xca>
 8008874:	68e3      	ldr	r3, [r4, #12]
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	2300      	movs	r3, #0
 800887a:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800887c:	4620      	mov	r0, r4
 800887e:	f7ff fb2d 	bl	8007edc <tcp_free>
      break;
 8008882:	e7df      	b.n	8008844 <tcp_close_shutdown+0x88>
 8008884:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0f6      	beq.n	8008878 <tcp_close_shutdown+0xbc>
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	42a2      	cmp	r2, r4
 800888e:	d1f9      	bne.n	8008884 <tcp_close_shutdown+0xc8>
 8008890:	68e2      	ldr	r2, [r4, #12]
 8008892:	60da      	str	r2, [r3, #12]
 8008894:	e7f0      	b.n	8008878 <tcp_close_shutdown+0xbc>
 8008896:	491f      	ldr	r1, [pc, #124]	@ (8008914 <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 8008898:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800889a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800889e:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80088a0:	b9a2      	cbnz	r2, 80088cc <tcp_close_shutdown+0x110>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80088a2:	3301      	adds	r3, #1
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	d1f8      	bne.n	800889a <tcp_close_shutdown+0xde>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80088a8:	4621      	mov	r1, r4
 80088aa:	481b      	ldr	r0, [pc, #108]	@ (8008918 <tcp_close_shutdown+0x15c>)
 80088ac:	f7ff fd82 	bl	80083b4 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80088b0:	7d23      	ldrb	r3, [r4, #20]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d105      	bne.n	80088c2 <tcp_close_shutdown+0x106>
 80088b6:	4b0f      	ldr	r3, [pc, #60]	@ (80088f4 <tcp_close_shutdown+0x138>)
 80088b8:	22df      	movs	r2, #223	@ 0xdf
 80088ba:	4918      	ldr	r1, [pc, #96]	@ (800891c <tcp_close_shutdown+0x160>)
 80088bc:	480f      	ldr	r0, [pc, #60]	@ (80088fc <tcp_close_shutdown+0x140>)
 80088be:	f004 fe45 	bl	800d54c <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80088c2:	4621      	mov	r1, r4
 80088c4:	2002      	movs	r0, #2
 80088c6:	f7fe fdaf 	bl	8007428 <memp_free>
}
 80088ca:	e7bb      	b.n	8008844 <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 80088cc:	6fd5      	ldr	r5, [r2, #124]	@ 0x7c
 80088ce:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 80088d0:	bf08      	it	eq
 80088d2:	67d0      	streq	r0, [r2, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80088d4:	68d2      	ldr	r2, [r2, #12]
 80088d6:	e7e3      	b.n	80088a0 <tcp_close_shutdown+0xe4>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80088d8:	4621      	mov	r1, r4
 80088da:	480a      	ldr	r0, [pc, #40]	@ (8008904 <tcp_close_shutdown+0x148>)
 80088dc:	f7ff fd6a 	bl	80083b4 <tcp_pcb_remove>
 80088e0:	4b09      	ldr	r3, [pc, #36]	@ (8008908 <tcp_close_shutdown+0x14c>)
 80088e2:	2201      	movs	r2, #1
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	e7c9      	b.n	800887c <tcp_close_shutdown+0xc0>
      return tcp_close_shutdown_fin(pcb);
 80088e8:	4620      	mov	r0, r4
}
 80088ea:	b005      	add	sp, #20
 80088ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 80088f0:	f7ff bab8 	b.w	8007e64 <tcp_close_shutdown_fin>
 80088f4:	0800f483 	.word	0x0800f483
 80088f8:	0800f82a 	.word	0x0800f82a
 80088fc:	0800e45a 	.word	0x0800e45a
 8008900:	0800f84a 	.word	0x0800f84a
 8008904:	2003755c 	.word	0x2003755c
 8008908:	20037557 	.word	0x20037557
 800890c:	2003756c 	.word	0x2003756c
 8008910:	20037564 	.word	0x20037564
 8008914:	0800faa8 	.word	0x0800faa8
 8008918:	20037560 	.word	0x20037560
 800891c:	0800f863 	.word	0x0800f863

08008920 <tcp_close>:
{
 8008920:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008922:	b158      	cbz	r0, 800893c <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8008924:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8008926:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8008928:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800892a:	bf1e      	ittt	ne
 800892c:	8b43      	ldrhne	r3, [r0, #26]
 800892e:	f043 0310 	orrne.w	r3, r3, #16
 8008932:	8343      	strhne	r3, [r0, #26]
}
 8008934:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8008938:	f7ff bf40 	b.w	80087bc <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800893c:	4b04      	ldr	r3, [pc, #16]	@ (8008950 <tcp_close+0x30>)
 800893e:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008942:	4904      	ldr	r1, [pc, #16]	@ (8008954 <tcp_close+0x34>)
 8008944:	4804      	ldr	r0, [pc, #16]	@ (8008958 <tcp_close+0x38>)
 8008946:	f004 fe01 	bl	800d54c <iprintf>
}
 800894a:	f06f 000f 	mvn.w	r0, #15
 800894e:	bd08      	pop	{r3, pc}
 8008950:	0800f483 	.word	0x0800f483
 8008954:	0800f87c 	.word	0x0800f87c
 8008958:	0800e45a 	.word	0x0800e45a

0800895c <tcp_recv_null>:
{
 800895c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800895e:	4608      	mov	r0, r1
{
 8008960:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008962:	b949      	cbnz	r1, 8008978 <tcp_recv_null+0x1c>
 8008964:	4b0c      	ldr	r3, [pc, #48]	@ (8008998 <tcp_recv_null+0x3c>)
 8008966:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800896a:	490c      	ldr	r1, [pc, #48]	@ (800899c <tcp_recv_null+0x40>)
 800896c:	480c      	ldr	r0, [pc, #48]	@ (80089a0 <tcp_recv_null+0x44>)
 800896e:	f004 fded 	bl	800d54c <iprintf>
 8008972:	f06f 000f 	mvn.w	r0, #15
}
 8008976:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 8008978:	b13a      	cbz	r2, 800898a <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800897a:	8911      	ldrh	r1, [r2, #8]
 800897c:	f7ff fbb8 	bl	80080f0 <tcp_recved>
    pbuf_free(p);
 8008980:	4620      	mov	r0, r4
 8008982:	f7fe ffb5 	bl	80078f0 <pbuf_free>
  return ERR_OK;
 8008986:	2000      	movs	r0, #0
 8008988:	e7f5      	b.n	8008976 <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1fb      	bne.n	8008986 <tcp_recv_null+0x2a>
}
 800898e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8008992:	f7ff bfc5 	b.w	8008920 <tcp_close>
 8008996:	bf00      	nop
 8008998:	0800f483 	.word	0x0800f483
 800899c:	0800f893 	.word	0x0800f893
 80089a0:	0800e45a 	.word	0x0800e45a

080089a4 <tcp_process_refused_data>:
{
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80089a6:	4604      	mov	r4, r0
 80089a8:	b950      	cbnz	r0, 80089c0 <tcp_process_refused_data+0x1c>
 80089aa:	f06f 050f 	mvn.w	r5, #15
 80089ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008a24 <tcp_process_refused_data+0x80>)
 80089b0:	f240 6209 	movw	r2, #1545	@ 0x609
 80089b4:	491c      	ldr	r1, [pc, #112]	@ (8008a28 <tcp_process_refused_data+0x84>)
 80089b6:	481d      	ldr	r0, [pc, #116]	@ (8008a2c <tcp_process_refused_data+0x88>)
 80089b8:	f004 fdc8 	bl	800d54c <iprintf>
}
 80089bc:	4628      	mov	r0, r5
 80089be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 80089c0:	6f86      	ldr	r6, [r0, #120]	@ 0x78
    pcb->refused_data = NULL;
 80089c2:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80089c4:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
    u8_t refused_flags = pcb->refused_data->flags;
 80089c8:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80089ca:	6783      	str	r3, [r0, #120]	@ 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80089cc:	b1e5      	cbz	r5, 8008a08 <tcp_process_refused_data+0x64>
 80089ce:	4601      	mov	r1, r0
 80089d0:	4632      	mov	r2, r6
 80089d2:	6900      	ldr	r0, [r0, #16]
 80089d4:	47a8      	blx	r5
 80089d6:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80089d8:	b9e8      	cbnz	r0, 8008a16 <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80089da:	06bb      	lsls	r3, r7, #26
 80089dc:	d5ee      	bpl.n	80089bc <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80089de:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80089e0:	f241 6248 	movw	r2, #5704	@ 0x1648
        TCP_EVENT_CLOSED(pcb, err);
 80089e4:	f8d4 6084 	ldr.w	r6, [r4, #132]	@ 0x84
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80089e8:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 80089ea:	bf1c      	itt	ne
 80089ec:	3301      	addne	r3, #1
 80089ee:	8523      	strhne	r3, [r4, #40]	@ 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80089f0:	2e00      	cmp	r6, #0
 80089f2:	d0e3      	beq.n	80089bc <tcp_process_refused_data+0x18>
 80089f4:	2300      	movs	r3, #0
 80089f6:	4621      	mov	r1, r4
 80089f8:	6920      	ldr	r0, [r4, #16]
 80089fa:	461a      	mov	r2, r3
 80089fc:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80089fe:	300d      	adds	r0, #13
 8008a00:	d1dc      	bne.n	80089bc <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 8008a02:	f06f 050c 	mvn.w	r5, #12
 8008a06:	e7d9      	b.n	80089bc <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008a08:	4601      	mov	r1, r0
 8008a0a:	462b      	mov	r3, r5
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f7ff ffa4 	bl	800895c <tcp_recv_null>
 8008a14:	e7df      	b.n	80089d6 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 8008a16:	350d      	adds	r5, #13
 8008a18:	d0f3      	beq.n	8008a02 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 8008a1a:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 8008a1e:	67a6      	str	r6, [r4, #120]	@ 0x78
      return ERR_INPROGRESS;
 8008a20:	e7cc      	b.n	80089bc <tcp_process_refused_data+0x18>
 8008a22:	bf00      	nop
 8008a24:	0800f483 	.word	0x0800f483
 8008a28:	0800f8ae 	.word	0x0800f8ae
 8008a2c:	0800e45a 	.word	0x0800e45a

08008a30 <tcp_fasttmr>:
{
 8008a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8008a34:	4d1b      	ldr	r5, [pc, #108]	@ (8008aa4 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8008a36:	4f1c      	ldr	r7, [pc, #112]	@ (8008aa8 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8008a38:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8008a3a:	4e1c      	ldr	r6, [pc, #112]	@ (8008aac <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8008a40:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8008a42:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8008a46:	b90c      	cbnz	r4, 8008a4c <tcp_fasttmr+0x1c>
}
 8008a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8008a4c:	782b      	ldrb	r3, [r5, #0]
 8008a4e:	7fa2      	ldrb	r2, [r4, #30]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d024      	beq.n	8008a9e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8008a54:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8008a56:	8b63      	ldrh	r3, [r4, #26]
 8008a58:	07d9      	lsls	r1, r3, #31
 8008a5a:	d509      	bpl.n	8008a70 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8008a5c:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8008a60:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8008a62:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8008a64:	f002 fc2c 	bl	800b2c0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008a68:	8b63      	ldrh	r3, [r4, #26]
 8008a6a:	f023 0303 	bic.w	r3, r3, #3
 8008a6e:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8008a70:	8b63      	ldrh	r3, [r4, #26]
 8008a72:	071a      	lsls	r2, r3, #28
 8008a74:	d505      	bpl.n	8008a82 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008a76:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8008a7a:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008a7c:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8008a7e:	f7ff f9f1 	bl	8007e64 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8008a82:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
      next = pcb->next;
 8008a84:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8008a88:	b13b      	cbz	r3, 8008a9a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8008a8a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8008a8c:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8008a90:	f7ff ff88 	bl	80089a4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008a94:	7833      	ldrb	r3, [r6, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1d2      	bne.n	8008a40 <tcp_fasttmr+0x10>
      pcb = next;
 8008a9a:	464c      	mov	r4, r9
 8008a9c:	e7d3      	b.n	8008a46 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8008a9e:	68e4      	ldr	r4, [r4, #12]
 8008aa0:	e7d1      	b.n	8008a46 <tcp_fasttmr+0x16>
 8008aa2:	bf00      	nop
 8008aa4:	20037555 	.word	0x20037555
 8008aa8:	2003755c 	.word	0x2003755c
 8008aac:	20037557 	.word	0x20037557

08008ab0 <tcp_shutdown>:
{
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4615      	mov	r5, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	b948      	cbnz	r0, 8008acc <tcp_shutdown+0x1c>
 8008ab8:	4b16      	ldr	r3, [pc, #88]	@ (8008b14 <tcp_shutdown+0x64>)
 8008aba:	f240 2207 	movw	r2, #519	@ 0x207
 8008abe:	4916      	ldr	r1, [pc, #88]	@ (8008b18 <tcp_shutdown+0x68>)
 8008ac0:	4816      	ldr	r0, [pc, #88]	@ (8008b1c <tcp_shutdown+0x6c>)
 8008ac2:	f004 fd43 	bl	800d54c <iprintf>
 8008ac6:	f06f 000f 	mvn.w	r0, #15
}
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 8008acc:	7d03      	ldrb	r3, [r0, #20]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d017      	beq.n	8008b02 <tcp_shutdown+0x52>
  if (shut_rx) {
 8008ad2:	b181      	cbz	r1, 8008af6 <tcp_shutdown+0x46>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008ad4:	8b43      	ldrh	r3, [r0, #26]
 8008ad6:	f043 0310 	orr.w	r3, r3, #16
 8008ada:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 8008adc:	b122      	cbz	r2, 8008ae8 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 8008ade:	2101      	movs	r1, #1
}
 8008ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8008ae4:	f7ff be6a 	b.w	80087bc <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 8008ae8:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8008aea:	b110      	cbz	r0, 8008af2 <tcp_shutdown+0x42>
      pbuf_free(pcb->refused_data);
 8008aec:	f7fe ff00 	bl	80078f0 <pbuf_free>
      pcb->refused_data = NULL;
 8008af0:	67a5      	str	r5, [r4, #120]	@ 0x78
  return ERR_OK;
 8008af2:	2000      	movs	r0, #0
 8008af4:	e7e9      	b.n	8008aca <tcp_shutdown+0x1a>
  if (shut_tx) {
 8008af6:	2a00      	cmp	r2, #0
 8008af8:	d0fb      	beq.n	8008af2 <tcp_shutdown+0x42>
    switch (pcb->state) {
 8008afa:	2b04      	cmp	r3, #4
 8008afc:	d804      	bhi.n	8008b08 <tcp_shutdown+0x58>
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d804      	bhi.n	8008b0c <tcp_shutdown+0x5c>
 8008b02:	f06f 000a 	mvn.w	r0, #10
 8008b06:	e7e0      	b.n	8008aca <tcp_shutdown+0x1a>
 8008b08:	2b07      	cmp	r3, #7
 8008b0a:	d1fa      	bne.n	8008b02 <tcp_shutdown+0x52>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	4620      	mov	r0, r4
 8008b10:	e7e6      	b.n	8008ae0 <tcp_shutdown+0x30>
 8008b12:	bf00      	nop
 8008b14:	0800f483 	.word	0x0800f483
 8008b18:	0800f8d4 	.word	0x0800f8d4
 8008b1c:	0800e45a 	.word	0x0800e45a

08008b20 <tcp_slowtmr>:
{
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8008b24:	4dab      	ldr	r5, [pc, #684]	@ (8008dd4 <tcp_slowtmr+0x2b4>)
{
 8008b26:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 8008b28:	4aab      	ldr	r2, [pc, #684]	@ (8008dd8 <tcp_slowtmr+0x2b8>)
  ++tcp_ticks;
 8008b2a:	682b      	ldr	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8008b2c:	f8df 82dc 	ldr.w	r8, [pc, #732]	@ 8008e0c <tcp_slowtmr+0x2ec>
  ++tcp_ticks;
 8008b30:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008b32:	4eaa      	ldr	r6, [pc, #680]	@ (8008ddc <tcp_slowtmr+0x2bc>)
  ++tcp_ticks;
 8008b34:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 8008b36:	7813      	ldrb	r3, [r2, #0]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8008b3c:	f8d8 4000 	ldr.w	r4, [r8]
  prev = NULL;
 8008b40:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008b42:	f8df 92b0 	ldr.w	r9, [pc, #688]	@ 8008df4 <tcp_slowtmr+0x2d4>
  while (pcb != NULL) {
 8008b46:	b96c      	cbnz	r4, 8008b64 <tcp_slowtmr+0x44>
  pcb = tcp_tw_pcbs;
 8008b48:	4fa5      	ldr	r7, [pc, #660]	@ (8008de0 <tcp_slowtmr+0x2c0>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008b4a:	f8df 8290 	ldr.w	r8, [pc, #656]	@ 8008ddc <tcp_slowtmr+0x2bc>
  pcb = tcp_tw_pcbs;
 8008b4e:	683e      	ldr	r6, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008b50:	f8df 92bc 	ldr.w	r9, [pc, #700]	@ 8008e10 <tcp_slowtmr+0x2f0>
 8008b54:	f8df a29c 	ldr.w	sl, [pc, #668]	@ 8008df4 <tcp_slowtmr+0x2d4>
  while (pcb != NULL) {
 8008b58:	2e00      	cmp	r6, #0
 8008b5a:	f040 81be 	bne.w	8008eda <tcp_slowtmr+0x3ba>
}
 8008b5e:	b007      	add	sp, #28
 8008b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008b64:	7d23      	ldrb	r3, [r4, #20]
 8008b66:	b933      	cbnz	r3, 8008b76 <tcp_slowtmr+0x56>
 8008b68:	4633      	mov	r3, r6
 8008b6a:	f240 42be 	movw	r2, #1214	@ 0x4be
 8008b6e:	499d      	ldr	r1, [pc, #628]	@ (8008de4 <tcp_slowtmr+0x2c4>)
 8008b70:	4648      	mov	r0, r9
 8008b72:	f004 fceb 	bl	800d54c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008b76:	7d23      	ldrb	r3, [r4, #20]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d106      	bne.n	8008b8a <tcp_slowtmr+0x6a>
 8008b7c:	4633      	mov	r3, r6
 8008b7e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8008b82:	4999      	ldr	r1, [pc, #612]	@ (8008de8 <tcp_slowtmr+0x2c8>)
 8008b84:	4648      	mov	r0, r9
 8008b86:	f004 fce1 	bl	800d54c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008b8a:	7d23      	ldrb	r3, [r4, #20]
 8008b8c:	2b0a      	cmp	r3, #10
 8008b8e:	d106      	bne.n	8008b9e <tcp_slowtmr+0x7e>
 8008b90:	4633      	mov	r3, r6
 8008b92:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8008b96:	4995      	ldr	r1, [pc, #596]	@ (8008dec <tcp_slowtmr+0x2cc>)
 8008b98:	4648      	mov	r0, r9
 8008b9a:	f004 fcd7 	bl	800d54c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008b9e:	4b8e      	ldr	r3, [pc, #568]	@ (8008dd8 <tcp_slowtmr+0x2b8>)
 8008ba0:	7fa2      	ldrb	r2, [r4, #30]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d104      	bne.n	8008bb2 <tcp_slowtmr+0x92>
      pcb = pcb->next;
 8008ba8:	f8d4 a00c 	ldr.w	sl, [r4, #12]
        ++pcb_reset;
 8008bac:	4627      	mov	r7, r4
 8008bae:	4654      	mov	r4, sl
 8008bb0:	e7c9      	b.n	8008b46 <tcp_slowtmr+0x26>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008bb2:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8008bb4:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008bb6:	2a02      	cmp	r2, #2
 8008bb8:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8008bbc:	d174      	bne.n	8008ca8 <tcp_slowtmr+0x188>
 8008bbe:	2b05      	cmp	r3, #5
 8008bc0:	d974      	bls.n	8008cac <tcp_slowtmr+0x18c>
      ++pcb_remove;
 8008bc2:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 8008bc6:	7d23      	ldrb	r3, [r4, #20]
 8008bc8:	2b06      	cmp	r3, #6
 8008bca:	d10b      	bne.n	8008be4 <tcp_slowtmr+0xc4>
      if (pcb->flags & TF_RXCLOSED) {
 8008bcc:	8b62      	ldrh	r2, [r4, #26]
 8008bce:	06d1      	lsls	r1, r2, #27
 8008bd0:	d508      	bpl.n	8008be4 <tcp_slowtmr+0xc4>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bd2:	682a      	ldr	r2, [r5, #0]
 8008bd4:	6a21      	ldr	r1, [r4, #32]
 8008bd6:	1a52      	subs	r2, r2, r1
 8008bd8:	2a28      	cmp	r2, #40	@ 0x28
          ++pcb_remove;
 8008bda:	bf84      	itt	hi
 8008bdc:	f10b 0b01 	addhi.w	fp, fp, #1
 8008be0:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008be4:	7a62      	ldrb	r2, [r4, #9]
 8008be6:	0712      	lsls	r2, r2, #28
 8008be8:	d505      	bpl.n	8008bf6 <tcp_slowtmr+0xd6>
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	f000 8112 	beq.w	8008e14 <tcp_slowtmr+0x2f4>
        ((pcb->state == ESTABLISHED) ||
 8008bf0:	2b07      	cmp	r3, #7
 8008bf2:	f000 810f 	beq.w	8008e14 <tcp_slowtmr+0x2f4>
    pcb_reset = 0;
 8008bf6:	f04f 0a00 	mov.w	sl, #0
    if (pcb->ooseq != NULL &&
 8008bfa:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008bfc:	b163      	cbz	r3, 8008c18 <tcp_slowtmr+0xf8>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008bfe:	682b      	ldr	r3, [r5, #0]
 8008c00:	6a22      	ldr	r2, [r4, #32]
 8008c02:	1a9a      	subs	r2, r3, r2
 8008c04:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8008c08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8008c0c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8008c10:	d302      	bcc.n	8008c18 <tcp_slowtmr+0xf8>
      tcp_free_ooseq(pcb);
 8008c12:	4620      	mov	r0, r4
 8008c14:	f7ff fb92 	bl	800833c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008c18:	7d23      	ldrb	r3, [r4, #20]
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	f040 8127 	bne.w	8008e6e <tcp_slowtmr+0x34e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	6a22      	ldr	r2, [r4, #32]
 8008c24:	1a9b      	subs	r3, r3, r2
 8008c26:	2b28      	cmp	r3, #40	@ 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c28:	d803      	bhi.n	8008c32 <tcp_slowtmr+0x112>
    if (pcb_remove) {
 8008c2a:	f1bb 0f00 	cmp.w	fp, #0
 8008c2e:	f000 8133 	beq.w	8008e98 <tcp_slowtmr+0x378>
      tcp_pcb_purge(pcb);
 8008c32:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8008c34:	f8d4 b090 	ldr.w	fp, [r4, #144]	@ 0x90
      tcp_pcb_purge(pcb);
 8008c38:	f7ff fb8a 	bl	8008350 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c3c:	f8d8 3000 	ldr.w	r3, [r8]
      if (prev != NULL) {
 8008c40:	2f00      	cmp	r7, #0
 8008c42:	f000 811c 	beq.w	8008e7e <tcp_slowtmr+0x35e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c46:	42a3      	cmp	r3, r4
 8008c48:	d106      	bne.n	8008c58 <tcp_slowtmr+0x138>
 8008c4a:	4b64      	ldr	r3, [pc, #400]	@ (8008ddc <tcp_slowtmr+0x2bc>)
 8008c4c:	f240 526d 	movw	r2, #1389	@ 0x56d
 8008c50:	4967      	ldr	r1, [pc, #412]	@ (8008df0 <tcp_slowtmr+0x2d0>)
 8008c52:	4868      	ldr	r0, [pc, #416]	@ (8008df4 <tcp_slowtmr+0x2d4>)
 8008c54:	f004 fc7a 	bl	800d54c <iprintf>
        prev->next = pcb->next;
 8008c58:	68e3      	ldr	r3, [r4, #12]
 8008c5a:	60fb      	str	r3, [r7, #12]
      if (pcb_reset) {
 8008c5c:	f1ba 0f00 	cmp.w	sl, #0
 8008c60:	d00b      	beq.n	8008c7a <tcp_slowtmr+0x15a>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008c62:	8b23      	ldrh	r3, [r4, #24]
 8008c64:	4620      	mov	r0, r4
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	8ae3      	ldrh	r3, [r4, #22]
 8008c6a:	9301      	str	r3, [sp, #4]
 8008c6c:	1d23      	adds	r3, r4, #4
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	4623      	mov	r3, r4
 8008c72:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008c74:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8008c76:	f002 faab 	bl	800b1d0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008c7a:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 8008c7c:	4620      	mov	r0, r4
      pcb = pcb->next;
 8008c7e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      err_arg = pcb->callback_arg;
 8008c82:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 8008c84:	f7ff f92a 	bl	8007edc <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008c88:	4c5b      	ldr	r4, [pc, #364]	@ (8008df8 <tcp_slowtmr+0x2d8>)
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008c8e:	f1bb 0f00 	cmp.w	fp, #0
 8008c92:	d007      	beq.n	8008ca4 <tcp_slowtmr+0x184>
 8008c94:	f06f 010c 	mvn.w	r1, #12
 8008c98:	9805      	ldr	r0, [sp, #20]
 8008c9a:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8008c9c:	7823      	ldrb	r3, [r4, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f47f af4c 	bne.w	8008b3c <tcp_slowtmr+0x1c>
        ++pcb_reset;
 8008ca4:	463c      	mov	r4, r7
 8008ca6:	e781      	b.n	8008bac <tcp_slowtmr+0x8c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008ca8:	2b0b      	cmp	r3, #11
 8008caa:	e789      	b.n	8008bc0 <tcp_slowtmr+0xa0>
      if (pcb->persist_backoff > 0) {
 8008cac:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d045      	beq.n	8008d40 <tcp_slowtmr+0x220>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008cb4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8008cb6:	b133      	cbz	r3, 8008cc6 <tcp_slowtmr+0x1a6>
 8008cb8:	4633      	mov	r3, r6
 8008cba:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008cbe:	494f      	ldr	r1, [pc, #316]	@ (8008dfc <tcp_slowtmr+0x2dc>)
 8008cc0:	4648      	mov	r0, r9
 8008cc2:	f004 fc43 	bl	800d54c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008cc6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008cc8:	b933      	cbnz	r3, 8008cd8 <tcp_slowtmr+0x1b8>
 8008cca:	4b44      	ldr	r3, [pc, #272]	@ (8008ddc <tcp_slowtmr+0x2bc>)
 8008ccc:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008cd0:	494b      	ldr	r1, [pc, #300]	@ (8008e00 <tcp_slowtmr+0x2e0>)
 8008cd2:	4848      	ldr	r0, [pc, #288]	@ (8008df4 <tcp_slowtmr+0x2d4>)
 8008cd4:	f004 fc3a 	bl	800d54c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008cd8:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 8008cdc:	2b0b      	cmp	r3, #11
 8008cde:	f63f af70 	bhi.w	8008bc2 <tcp_slowtmr+0xa2>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008ce2:	f894 2099 	ldrb.w	r2, [r4, #153]	@ 0x99
 8008ce6:	4b47      	ldr	r3, [pc, #284]	@ (8008e04 <tcp_slowtmr+0x2e4>)
 8008ce8:	4413      	add	r3, r2
 8008cea:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 8008cee:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d30b      	bcc.n	8008d0e <tcp_slowtmr+0x1ee>
            if (pcb->snd_wnd == 0) {
 8008cf6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8008cfa:	b189      	cbz	r1, 8008d20 <tcp_slowtmr+0x200>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f002 f81f 	bl	800ad40 <tcp_split_unsent_seg>
 8008d02:	b990      	cbnz	r0, 8008d2a <tcp_slowtmr+0x20a>
                if (tcp_output(pcb) == ERR_OK) {
 8008d04:	4620      	mov	r0, r4
 8008d06:	f002 fadb 	bl	800b2c0 <tcp_output>
 8008d0a:	b130      	cbz	r0, 8008d1a <tcp_slowtmr+0x1fa>
 8008d0c:	e00d      	b.n	8008d2a <tcp_slowtmr+0x20a>
            pcb->persist_cnt++;
 8008d0e:	3301      	adds	r3, #1
 8008d10:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 8008d12:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 8008d14:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8008d18:	d2ed      	bcs.n	8008cf6 <tcp_slowtmr+0x1d6>
    pcb_remove = 0;
 8008d1a:	f04f 0b00 	mov.w	fp, #0
 8008d1e:	e752      	b.n	8008bc6 <tcp_slowtmr+0xa6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008d20:	4620      	mov	r0, r4
 8008d22:	f002 fcd5 	bl	800b6d0 <tcp_zero_window_probe>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d1f7      	bne.n	8008d1a <tcp_slowtmr+0x1fa>
              pcb->persist_cnt = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008d30:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 8008d34:	2b06      	cmp	r3, #6
 8008d36:	d8f0      	bhi.n	8008d1a <tcp_slowtmr+0x1fa>
                pcb->persist_backoff++;
 8008d38:	3301      	adds	r3, #1
 8008d3a:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
 8008d3e:	e7ec      	b.n	8008d1a <tcp_slowtmr+0x1fa>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008d40:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8008d42:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008d46:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8008d48:	bf9c      	itt	ls
 8008d4a:	3301      	addls	r3, #1
 8008d4c:	8623      	strhls	r3, [r4, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008d4e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8008d52:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	@ 0x30
 8008d56:	429a      	cmp	r2, r3
 8008d58:	dbdf      	blt.n	8008d1a <tcp_slowtmr+0x1fa>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f002 f980 	bl	800b060 <tcp_rexmit_rto_prepare>
 8008d60:	b128      	cbz	r0, 8008d6e <tcp_slowtmr+0x24e>
 8008d62:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1d8      	bne.n	8008d1a <tcp_slowtmr+0x1fa>
 8008d68:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0d5      	beq.n	8008d1a <tcp_slowtmr+0x1fa>
            if (pcb->state != SYN_SENT) {
 8008d6e:	7d23      	ldrb	r3, [r4, #20]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d014      	beq.n	8008d9e <tcp_slowtmr+0x27e>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008d74:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	@ 0x3c
 8008d78:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 8008d7c:	4922      	ldr	r1, [pc, #136]	@ (8008e08 <tcp_slowtmr+0x2e8>)
 8008d7e:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008d82:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008d86:	2a0c      	cmp	r2, #12
 8008d88:	bf28      	it	cs
 8008d8a:	220c      	movcs	r2, #12
 8008d8c:	5c8a      	ldrb	r2, [r1, r2]
 8008d8e:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008d90:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008d94:	4293      	cmp	r3, r2
 8008d96:	bfa8      	it	ge
 8008d98:	4613      	movge	r3, r2
 8008d9a:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008d9e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	@ 0x48
            pcb->rtime = 0;
 8008da2:	2200      	movs	r2, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008da4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008da8:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
            pcb->ssthresh = eff_wnd >> 1;
 8008daa:	4283      	cmp	r3, r0
            pcb->rtime = 0;
 8008dac:	8622      	strh	r2, [r4, #48]	@ 0x30
            pcb->cwnd = pcb->mss;
 8008dae:	f8a4 1048 	strh.w	r1, [r4, #72]	@ 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8008db2:	bf28      	it	cs
 8008db4:	4603      	movcs	r3, r0
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008db6:	0048      	lsls	r0, r1, #1
            pcb->bytes_acked = 0;
 8008db8:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
 8008dbc:	085b      	lsrs	r3, r3, #1
 8008dbe:	b280      	uxth	r0, r0
 8008dc0:	4283      	cmp	r3, r0
 8008dc2:	bf38      	it	cc
 8008dc4:	4603      	movcc	r3, r0
            tcp_rexmit_rto_commit(pcb);
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8008dcc:	f002 fc22 	bl	800b614 <tcp_rexmit_rto_commit>
 8008dd0:	e7a3      	b.n	8008d1a <tcp_slowtmr+0x1fa>
 8008dd2:	bf00      	nop
 8008dd4:	20037568 	.word	0x20037568
 8008dd8:	20037555 	.word	0x20037555
 8008ddc:	0800f483 	.word	0x0800f483
 8008de0:	20037558 	.word	0x20037558
 8008de4:	0800f8ee 	.word	0x0800f8ee
 8008de8:	0800f918 	.word	0x0800f918
 8008dec:	0800f942 	.word	0x0800f942
 8008df0:	0800f9d6 	.word	0x0800f9d6
 8008df4:	0800e45a 	.word	0x0800e45a
 8008df8:	20037557 	.word	0x20037557
 8008dfc:	0800f96f 	.word	0x0800f96f
 8008e00:	0800f9a1 	.word	0x0800f9a1
 8008e04:	0800fab8 	.word	0x0800fab8
 8008e08:	0800fabf 	.word	0x0800fabf
 8008e0c:	2003755c 	.word	0x2003755c
 8008e10:	0800fa2b 	.word	0x0800fa2b
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e14:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008e16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e1a:	6829      	ldr	r1, [r5, #0]
 8008e1c:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008e1e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8008e22:	f503 2224 	add.w	r2, r3, #671744	@ 0xa4000
 8008e26:	f602 42b8 	addw	r2, r2, #3256	@ 0xcb8
 8008e2a:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e2e:	4291      	cmp	r1, r2
 8008e30:	d906      	bls.n	8008e40 <tcp_slowtmr+0x320>
        ++pcb_remove;
 8008e32:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 8008e36:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 8008e3a:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 8008e3e:	e6dc      	b.n	8008bfa <tcp_slowtmr+0xda>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008e40:	f894 209b 	ldrb.w	r2, [r4, #155]	@ 0x9b
 8008e44:	f8df c118 	ldr.w	ip, [pc, #280]	@ 8008f60 <tcp_slowtmr+0x440>
 8008e48:	fb0c 3302 	mla	r3, ip, r2, r3
                 / TCP_SLOW_INTERVAL) {
 8008e4c:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e50:	4299      	cmp	r1, r3
 8008e52:	f67f aed0 	bls.w	8008bf6 <tcp_slowtmr+0xd6>
        err = tcp_keepalive(pcb);
 8008e56:	4620      	mov	r0, r4
 8008e58:	f002 fc12 	bl	800b680 <tcp_keepalive>
        if (err == ERR_OK) {
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	f47f aeca 	bne.w	8008bf6 <tcp_slowtmr+0xd6>
          pcb->keep_cnt_sent++;
 8008e62:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 8008e66:	3301      	adds	r3, #1
 8008e68:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
 8008e6c:	e6c3      	b.n	8008bf6 <tcp_slowtmr+0xd6>
    if (pcb->state == LAST_ACK) {
 8008e6e:	2b09      	cmp	r3, #9
 8008e70:	f47f aedb 	bne.w	8008c2a <tcp_slowtmr+0x10a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	6a22      	ldr	r2, [r4, #32]
 8008e78:	1a9b      	subs	r3, r3, r2
 8008e7a:	2bf0      	cmp	r3, #240	@ 0xf0
 8008e7c:	e6d4      	b.n	8008c28 <tcp_slowtmr+0x108>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008e7e:	42a3      	cmp	r3, r4
 8008e80:	d006      	beq.n	8008e90 <tcp_slowtmr+0x370>
 8008e82:	4633      	mov	r3, r6
 8008e84:	f240 5271 	movw	r2, #1393	@ 0x571
 8008e88:	492f      	ldr	r1, [pc, #188]	@ (8008f48 <tcp_slowtmr+0x428>)
 8008e8a:	4830      	ldr	r0, [pc, #192]	@ (8008f4c <tcp_slowtmr+0x42c>)
 8008e8c:	f004 fb5e 	bl	800d54c <iprintf>
        tcp_active_pcbs = pcb->next;
 8008e90:	68e3      	ldr	r3, [r4, #12]
 8008e92:	f8c8 3000 	str.w	r3, [r8]
 8008e96:	e6e1      	b.n	8008c5c <tcp_slowtmr+0x13c>
      ++prev->polltmr;
 8008e98:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008e9a:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8008e9c:	3301      	adds	r3, #1
      pcb = pcb->next;
 8008e9e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      ++prev->polltmr;
 8008ea2:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8008ea4:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8008ea6:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008ea8:	f63f ae80 	bhi.w	8008bac <tcp_slowtmr+0x8c>
        tcp_active_pcbs_changed = 0;
 8008eac:	4f28      	ldr	r7, [pc, #160]	@ (8008f50 <tcp_slowtmr+0x430>)
        TCP_EVENT_POLL(prev, err);
 8008eae:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
        prev->polltmr = 0;
 8008eb2:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8008eb6:	f887 b000 	strb.w	fp, [r7]
        TCP_EVENT_POLL(prev, err);
 8008eba:	b91b      	cbnz	r3, 8008ec4 <tcp_slowtmr+0x3a4>
          tcp_output(prev);
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f002 f9ff 	bl	800b2c0 <tcp_output>
 8008ec2:	e673      	b.n	8008bac <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	6920      	ldr	r0, [r4, #16]
 8008ec8:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8008eca:	783b      	ldrb	r3, [r7, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f47f ae35 	bne.w	8008b3c <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	f47f ae6a 	bne.w	8008bac <tcp_slowtmr+0x8c>
 8008ed8:	e7f0      	b.n	8008ebc <tcp_slowtmr+0x39c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008eda:	7d33      	ldrb	r3, [r6, #20]
 8008edc:	2b0a      	cmp	r3, #10
 8008ede:	d006      	beq.n	8008eee <tcp_slowtmr+0x3ce>
 8008ee0:	4643      	mov	r3, r8
 8008ee2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4650      	mov	r0, sl
 8008eea:	f004 fb2f 	bl	800d54c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	6a32      	ldr	r2, [r6, #32]
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	2bf0      	cmp	r3, #240	@ 0xf0
 8008ef6:	d910      	bls.n	8008f1a <tcp_slowtmr+0x3fa>
      tcp_pcb_purge(pcb);
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff fa29 	bl	8008350 <tcp_pcb_purge>
      if (prev != NULL) {
 8008efe:	b97c      	cbnz	r4, 8008f20 <tcp_slowtmr+0x400>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	42b3      	cmp	r3, r6
 8008f04:	d006      	beq.n	8008f14 <tcp_slowtmr+0x3f4>
 8008f06:	4b13      	ldr	r3, [pc, #76]	@ (8008f54 <tcp_slowtmr+0x434>)
 8008f08:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008f0c:	4912      	ldr	r1, [pc, #72]	@ (8008f58 <tcp_slowtmr+0x438>)
 8008f0e:	480f      	ldr	r0, [pc, #60]	@ (8008f4c <tcp_slowtmr+0x42c>)
 8008f10:	f004 fb1c 	bl	800d54c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008f14:	68f3      	ldr	r3, [r6, #12]
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	e00e      	b.n	8008f38 <tcp_slowtmr+0x418>
      pcb = pcb->next;
 8008f1a:	4634      	mov	r4, r6
 8008f1c:	68f6      	ldr	r6, [r6, #12]
 8008f1e:	e61b      	b.n	8008b58 <tcp_slowtmr+0x38>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	42b3      	cmp	r3, r6
 8008f24:	d106      	bne.n	8008f34 <tcp_slowtmr+0x414>
 8008f26:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <tcp_slowtmr+0x434>)
 8008f28:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008f2c:	490b      	ldr	r1, [pc, #44]	@ (8008f5c <tcp_slowtmr+0x43c>)
 8008f2e:	4807      	ldr	r0, [pc, #28]	@ (8008f4c <tcp_slowtmr+0x42c>)
 8008f30:	f004 fb0c 	bl	800d54c <iprintf>
        prev->next = pcb->next;
 8008f34:	68f3      	ldr	r3, [r6, #12]
 8008f36:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8008f38:	f8d6 b00c 	ldr.w	fp, [r6, #12]
      tcp_free(pcb2);
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7fe ffcd 	bl	8007edc <tcp_free>
      pcb = pcb->next;
 8008f42:	465e      	mov	r6, fp
 8008f44:	e608      	b.n	8008b58 <tcp_slowtmr+0x38>
 8008f46:	bf00      	nop
 8008f48:	0800fa01 	.word	0x0800fa01
 8008f4c:	0800e45a 	.word	0x0800e45a
 8008f50:	20037557 	.word	0x20037557
 8008f54:	0800f483 	.word	0x0800f483
 8008f58:	0800fa81 	.word	0x0800fa81
 8008f5c:	0800fa5a 	.word	0x0800fa5a
 8008f60:	000124f8 	.word	0x000124f8

08008f64 <tcp_tmr>:
{
 8008f64:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8008f66:	f7ff fd63 	bl	8008a30 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8008f6a:	4a06      	ldr	r2, [pc, #24]	@ (8008f84 <tcp_tmr+0x20>)
 8008f6c:	7813      	ldrb	r3, [r2, #0]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	7013      	strb	r3, [r2, #0]
 8008f74:	07db      	lsls	r3, r3, #31
 8008f76:	d503      	bpl.n	8008f80 <tcp_tmr+0x1c>
}
 8008f78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8008f7c:	f7ff bdd0 	b.w	8008b20 <tcp_slowtmr>
}
 8008f80:	bd08      	pop	{r3, pc}
 8008f82:	bf00      	nop
 8008f84:	20037556 	.word	0x20037556

08008f88 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8008f88:	4a09      	ldr	r2, [pc, #36]	@ (8008fb0 <tcp_get_next_optbyte+0x28>)
 8008f8a:	8813      	ldrh	r3, [r2, #0]
 8008f8c:	1c59      	adds	r1, r3, #1
 8008f8e:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008f90:	4a08      	ldr	r2, [pc, #32]	@ (8008fb4 <tcp_get_next_optbyte+0x2c>)
 8008f92:	6812      	ldr	r2, [r2, #0]
 8008f94:	b11a      	cbz	r2, 8008f9e <tcp_get_next_optbyte+0x16>
 8008f96:	4908      	ldr	r1, [pc, #32]	@ (8008fb8 <tcp_get_next_optbyte+0x30>)
 8008f98:	8809      	ldrh	r1, [r1, #0]
 8008f9a:	428b      	cmp	r3, r1
 8008f9c:	d204      	bcs.n	8008fa8 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 8008f9e:	4a07      	ldr	r2, [pc, #28]	@ (8008fbc <tcp_get_next_optbyte+0x34>)
 8008fa0:	6812      	ldr	r2, [r2, #0]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	7d18      	ldrb	r0, [r3, #20]
 8008fa6:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008fa8:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 8008fae:	4770      	bx	lr
 8008fb0:	20037584 	.word	0x20037584
 8008fb4:	20037588 	.word	0x20037588
 8008fb8:	2003758c 	.word	0x2003758c
 8008fbc:	20037590 	.word	0x20037590

08008fc0 <tcp_oos_insert_segment>:
{
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	b930      	cbnz	r0, 8008fd6 <tcp_oos_insert_segment+0x16>
 8008fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8009040 <tcp_oos_insert_segment+0x80>)
 8008fca:	f240 421f 	movw	r2, #1055	@ 0x41f
 8008fce:	491d      	ldr	r1, [pc, #116]	@ (8009044 <tcp_oos_insert_segment+0x84>)
 8008fd0:	481d      	ldr	r0, [pc, #116]	@ (8009048 <tcp_oos_insert_segment+0x88>)
 8008fd2:	f004 fabb 	bl	800d54c <iprintf>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008fd6:	68e3      	ldr	r3, [r4, #12]
 8008fd8:	8998      	ldrh	r0, [r3, #12]
 8008fda:	f7fd fef9 	bl	8006dd0 <lwip_htons>
 8008fde:	07c2      	lsls	r2, r0, #31
 8008fe0:	d413      	bmi.n	800900a <tcp_oos_insert_segment+0x4a>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008fe2:	4e1a      	ldr	r6, [pc, #104]	@ (800904c <tcp_oos_insert_segment+0x8c>)
 8008fe4:	68ef      	ldr	r7, [r5, #12]
 8008fe6:	8923      	ldrh	r3, [r4, #8]
 8008fe8:	6830      	ldr	r0, [r6, #0]
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	4403      	add	r3, r0
 8008fee:	892a      	ldrh	r2, [r5, #8]
 8008ff0:	1a5b      	subs	r3, r3, r1
 8008ff2:	1a9a      	subs	r2, r3, r2
    while (next &&
 8008ff4:	2a00      	cmp	r2, #0
 8008ff6:	da0e      	bge.n	8009016 <tcp_oos_insert_segment+0x56>
    if (next &&
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dd0a      	ble.n	8009012 <tcp_oos_insert_segment+0x52>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008ffc:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 8008ffe:	6860      	ldr	r0, [r4, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009000:	b289      	uxth	r1, r1
 8009002:	8121      	strh	r1, [r4, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009004:	f7fe fd70 	bl	8007ae8 <pbuf_realloc>
 8009008:	e003      	b.n	8009012 <tcp_oos_insert_segment+0x52>
    tcp_segs_free(next);
 800900a:	4628      	mov	r0, r5
 800900c:	f7ff f8bc 	bl	8008188 <tcp_segs_free>
    next = NULL;
 8009010:	2500      	movs	r5, #0
  cseg->next = next;
 8009012:	6025      	str	r5, [r4, #0]
}
 8009014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009016:	89b8      	ldrh	r0, [r7, #12]
 8009018:	f7fd feda 	bl	8006dd0 <lwip_htons>
 800901c:	07c3      	lsls	r3, r0, #31
 800901e:	d507      	bpl.n	8009030 <tcp_oos_insert_segment+0x70>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009020:	68e3      	ldr	r3, [r4, #12]
 8009022:	2001      	movs	r0, #1
 8009024:	899f      	ldrh	r7, [r3, #12]
 8009026:	f7fd fed3 	bl	8006dd0 <lwip_htons>
 800902a:	68e3      	ldr	r3, [r4, #12]
 800902c:	4307      	orrs	r7, r0
 800902e:	819f      	strh	r7, [r3, #12]
      next = next->next;
 8009030:	682f      	ldr	r7, [r5, #0]
      tcp_seg_free(old_seg);
 8009032:	4628      	mov	r0, r5
 8009034:	f7ff f89a 	bl	800816c <tcp_seg_free>
    while (next &&
 8009038:	2f00      	cmp	r7, #0
 800903a:	d0e9      	beq.n	8009010 <tcp_oos_insert_segment+0x50>
      next = next->next;
 800903c:	463d      	mov	r5, r7
 800903e:	e7d1      	b.n	8008fe4 <tcp_oos_insert_segment+0x24>
 8009040:	0800facc 	.word	0x0800facc
 8009044:	0800fafe 	.word	0x0800fafe
 8009048:	0800e45a 	.word	0x0800e45a
 800904c:	20037580 	.word	0x20037580

08009050 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009052:	4605      	mov	r5, r0
 8009054:	b930      	cbnz	r0, 8009064 <tcp_parseopt+0x14>
 8009056:	4b1e      	ldr	r3, [pc, #120]	@ (80090d0 <tcp_parseopt+0x80>)
 8009058:	f240 727d 	movw	r2, #1917	@ 0x77d
 800905c:	491d      	ldr	r1, [pc, #116]	@ (80090d4 <tcp_parseopt+0x84>)
 800905e:	481e      	ldr	r0, [pc, #120]	@ (80090d8 <tcp_parseopt+0x88>)
 8009060:	f004 fa74 	bl	800d54c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009064:	4b1d      	ldr	r3, [pc, #116]	@ (80090dc <tcp_parseopt+0x8c>)
 8009066:	881e      	ldrh	r6, [r3, #0]
 8009068:	b346      	cbz	r6, 80090bc <tcp_parseopt+0x6c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800906a:	4c1d      	ldr	r4, [pc, #116]	@ (80090e0 <tcp_parseopt+0x90>)
 800906c:	2300      	movs	r3, #0
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800906e:	8023      	strh	r3, [r4, #0]
 8009070:	e01a      	b.n	80090a8 <tcp_parseopt+0x58>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009072:	f7ff ff89 	bl	8008f88 <tcp_get_next_optbyte>
 8009076:	2804      	cmp	r0, #4
 8009078:	d120      	bne.n	80090bc <tcp_parseopt+0x6c>
 800907a:	8823      	ldrh	r3, [r4, #0]
 800907c:	3301      	adds	r3, #1
 800907e:	42b3      	cmp	r3, r6
 8009080:	da1c      	bge.n	80090bc <tcp_parseopt+0x6c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009082:	f7ff ff81 	bl	8008f88 <tcp_get_next_optbyte>
 8009086:	0207      	lsls	r7, r0, #8
          mss |= tcp_get_next_optbyte();
 8009088:	f7ff ff7e 	bl	8008f88 <tcp_get_next_optbyte>
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800908c:	f240 5192 	movw	r1, #1426	@ 0x592
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009090:	b2bf      	uxth	r7, r7
          mss |= tcp_get_next_optbyte();
 8009092:	ea40 0307 	orr.w	r3, r0, r7
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009096:	f240 5091 	movw	r0, #1425	@ 0x591
          mss |= tcp_get_next_optbyte();
 800909a:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800909c:	1e5a      	subs	r2, r3, #1
 800909e:	b292      	uxth	r2, r2
 80090a0:	4282      	cmp	r2, r0
 80090a2:	bf88      	it	hi
 80090a4:	460b      	movhi	r3, r1
 80090a6:	866b      	strh	r3, [r5, #50]	@ 0x32
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80090a8:	8823      	ldrh	r3, [r4, #0]
 80090aa:	42b3      	cmp	r3, r6
 80090ac:	d206      	bcs.n	80090bc <tcp_parseopt+0x6c>
      u8_t opt = tcp_get_next_optbyte();
 80090ae:	f7ff ff6b 	bl	8008f88 <tcp_get_next_optbyte>
      switch (opt) {
 80090b2:	2801      	cmp	r0, #1
 80090b4:	d0f8      	beq.n	80090a8 <tcp_parseopt+0x58>
 80090b6:	2802      	cmp	r0, #2
 80090b8:	d0db      	beq.n	8009072 <tcp_parseopt+0x22>
 80090ba:	b900      	cbnz	r0, 80090be <tcp_parseopt+0x6e>
      }
    }
  }
}
 80090bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          data = tcp_get_next_optbyte();
 80090be:	f7ff ff63 	bl	8008f88 <tcp_get_next_optbyte>
          if (data < 2) {
 80090c2:	2801      	cmp	r0, #1
 80090c4:	d9fa      	bls.n	80090bc <tcp_parseopt+0x6c>
          tcp_optidx += data - 2;
 80090c6:	8823      	ldrh	r3, [r4, #0]
 80090c8:	3b02      	subs	r3, #2
 80090ca:	4403      	add	r3, r0
 80090cc:	e7cf      	b.n	800906e <tcp_parseopt+0x1e>
 80090ce:	bf00      	nop
 80090d0:	0800facc 	.word	0x0800facc
 80090d4:	0800fb23 	.word	0x0800fb23
 80090d8:	0800e45a 	.word	0x0800e45a
 80090dc:	2003758e 	.word	0x2003758e
 80090e0:	20037584 	.word	0x20037584

080090e4 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 80090e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009118 <tcp_input_delayed_close+0x34>)
{
 80090e6:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 80090e8:	781b      	ldrb	r3, [r3, #0]
{
 80090ea:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 80090ec:	f013 0010 	ands.w	r0, r3, #16
 80090f0:	d011      	beq.n	8009116 <tcp_input_delayed_close+0x32>
    if (!(pcb->flags & TF_RXCLOSED)) {
 80090f2:	8b63      	ldrh	r3, [r4, #26]
 80090f4:	06db      	lsls	r3, r3, #27
 80090f6:	d406      	bmi.n	8009106 <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80090f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80090fc:	b11b      	cbz	r3, 8009106 <tcp_input_delayed_close+0x22>
 80090fe:	f06f 010e 	mvn.w	r1, #14
 8009102:	6920      	ldr	r0, [r4, #16]
 8009104:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009106:	4621      	mov	r1, r4
 8009108:	4804      	ldr	r0, [pc, #16]	@ (800911c <tcp_input_delayed_close+0x38>)
 800910a:	f7ff f953 	bl	80083b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800910e:	4620      	mov	r0, r4
 8009110:	f7fe fee4 	bl	8007edc <tcp_free>
 8009114:	2001      	movs	r0, #1
}
 8009116:	bd10      	pop	{r4, pc}
 8009118:	20037574 	.word	0x20037574
 800911c:	2003755c 	.word	0x2003755c

08009120 <tcp_free_acked_segments.constprop.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8009120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	4607      	mov	r7, r0
 8009126:	460c      	mov	r4, r1
 8009128:	4690      	mov	r8, r2
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800912a:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 80091d8 <tcp_free_acked_segments.constprop.0+0xb8>
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800912e:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 80091dc <tcp_free_acked_segments.constprop.0+0xbc>
  while (seg_list != NULL &&
 8009132:	2c00      	cmp	r4, #0
 8009134:	d044      	beq.n	80091c0 <tcp_free_acked_segments.constprop.0+0xa0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009136:	68e3      	ldr	r3, [r4, #12]
 8009138:	4626      	mov	r6, r4
 800913a:	6858      	ldr	r0, [r3, #4]
 800913c:	f7fd fe4b 	bl	8006dd6 <lwip_htonl>
 8009140:	68e3      	ldr	r3, [r4, #12]
 8009142:	4683      	mov	fp, r0
 8009144:	8925      	ldrh	r5, [r4, #8]
 8009146:	8998      	ldrh	r0, [r3, #12]
 8009148:	f7fd fe42 	bl	8006dd0 <lwip_htons>
 800914c:	f8da 3000 	ldr.w	r3, [sl]
 8009150:	f010 0003 	ands.w	r0, r0, #3
 8009154:	eba5 0503 	sub.w	r5, r5, r3
 8009158:	bf18      	it	ne
 800915a:	2001      	movne	r0, #1
 800915c:	445d      	add	r5, fp
 800915e:	4405      	add	r5, r0
  while (seg_list != NULL &&
 8009160:	2d00      	cmp	r5, #0
 8009162:	dc2e      	bgt.n	80091c2 <tcp_free_acked_segments.constprop.0+0xa2>
    clen = pbuf_clen(next->p);
 8009164:	6870      	ldr	r0, [r6, #4]
    seg_list = seg_list->next;
 8009166:	6824      	ldr	r4, [r4, #0]
    clen = pbuf_clen(next->p);
 8009168:	f7fe fd16 	bl	8007b98 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800916c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
    clen = pbuf_clen(next->p);
 8009170:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009172:	4283      	cmp	r3, r0
 8009174:	d206      	bcs.n	8009184 <tcp_free_acked_segments.constprop.0+0x64>
 8009176:	4b14      	ldr	r3, [pc, #80]	@ (80091c8 <tcp_free_acked_segments.constprop.0+0xa8>)
 8009178:	f240 4257 	movw	r2, #1111	@ 0x457
 800917c:	4913      	ldr	r1, [pc, #76]	@ (80091cc <tcp_free_acked_segments.constprop.0+0xac>)
 800917e:	4814      	ldr	r0, [pc, #80]	@ (80091d0 <tcp_free_acked_segments.constprop.0+0xb0>)
 8009180:	f004 f9e4 	bl	800d54c <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009184:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
    tcp_seg_free(next);
 8009188:	4630      	mov	r0, r6
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800918a:	f8b9 2000 	ldrh.w	r2, [r9]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800918e:	1b5b      	subs	r3, r3, r5
 8009190:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009194:	8933      	ldrh	r3, [r6, #8]
 8009196:	4413      	add	r3, r2
 8009198:	f8a9 3000 	strh.w	r3, [r9]
    tcp_seg_free(next);
 800919c:	f7fe ffe6 	bl	800816c <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 80091a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0c4      	beq.n	8009132 <tcp_free_acked_segments.constprop.0+0x12>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80091a8:	2c00      	cmp	r4, #0
 80091aa:	d1c4      	bne.n	8009136 <tcp_free_acked_segments.constprop.0+0x16>
 80091ac:	f1b8 0f00 	cmp.w	r8, #0
 80091b0:	d106      	bne.n	80091c0 <tcp_free_acked_segments.constprop.0+0xa0>
 80091b2:	4b05      	ldr	r3, [pc, #20]	@ (80091c8 <tcp_free_acked_segments.constprop.0+0xa8>)
 80091b4:	f240 4261 	movw	r2, #1121	@ 0x461
 80091b8:	4906      	ldr	r1, [pc, #24]	@ (80091d4 <tcp_free_acked_segments.constprop.0+0xb4>)
 80091ba:	4805      	ldr	r0, [pc, #20]	@ (80091d0 <tcp_free_acked_segments.constprop.0+0xb0>)
 80091bc:	f004 f9c6 	bl	800d54c <iprintf>
    seg_list = seg_list->next;
 80091c0:	2600      	movs	r6, #0
}
 80091c2:	4630      	mov	r0, r6
 80091c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	0800facc 	.word	0x0800facc
 80091cc:	0800fb3d 	.word	0x0800fb3d
 80091d0:	0800e45a 	.word	0x0800e45a
 80091d4:	0800fb65 	.word	0x0800fb65
 80091d8:	2003757c 	.word	0x2003757c
 80091dc:	20037578 	.word	0x20037578

080091e0 <tcp_receive>:
{
 80091e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80091e4:	7d03      	ldrb	r3, [r0, #20]
{
 80091e6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d806      	bhi.n	80091fa <tcp_receive+0x1a>
 80091ec:	4b35      	ldr	r3, [pc, #212]	@ (80092c4 <tcp_receive+0xe4>)
 80091ee:	f240 427c 	movw	r2, #1148	@ 0x47c
 80091f2:	4935      	ldr	r1, [pc, #212]	@ (80092c8 <tcp_receive+0xe8>)
 80091f4:	4835      	ldr	r0, [pc, #212]	@ (80092cc <tcp_receive+0xec>)
 80091f6:	f004 f9a9 	bl	800d54c <iprintf>
  if (flags & TCP_ACK) {
 80091fa:	4a35      	ldr	r2, [pc, #212]	@ (80092d0 <tcp_receive+0xf0>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80091fc:	4e35      	ldr	r6, [pc, #212]	@ (80092d4 <tcp_receive+0xf4>)
  if (flags & TCP_ACK) {
 80091fe:	7812      	ldrb	r2, [r2, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009200:	6833      	ldr	r3, [r6, #0]
  if (flags & TCP_ACK) {
 8009202:	f012 0f10 	tst.w	r2, #16
 8009206:	4f34      	ldr	r7, [pc, #208]	@ (80092d8 <tcp_receive+0xf8>)
 8009208:	f000 8097 	beq.w	800933a <tcp_receive+0x15a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800920c:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 80092e0 <tcp_receive+0x100>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009210:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009214:	f8d9 2000 	ldr.w	r2, [r9]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009218:	e9d4 0c15 	ldrd	r0, ip, [r4, #84]	@ 0x54
 800921c:	eba0 0e03 	sub.w	lr, r0, r3
 8009220:	f1be 0f00 	cmp.w	lr, #0
 8009224:	db0c      	blt.n	8009240 <tcp_receive+0x60>
 8009226:	4298      	cmp	r0, r3
 8009228:	d103      	bne.n	8009232 <tcp_receive+0x52>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800922a:	ebac 0002 	sub.w	r0, ip, r2
 800922e:	2800      	cmp	r0, #0
 8009230:	db06      	blt.n	8009240 <tcp_receive+0x60>
 8009232:	4594      	cmp	ip, r2
 8009234:	d113      	bne.n	800925e <tcp_receive+0x7e>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009236:	4829      	ldr	r0, [pc, #164]	@ (80092dc <tcp_receive+0xfc>)
 8009238:	6800      	ldr	r0, [r0, #0]
 800923a:	89c0      	ldrh	r0, [r0, #14]
 800923c:	4288      	cmp	r0, r1
 800923e:	d90e      	bls.n	800925e <tcp_receive+0x7e>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009240:	4826      	ldr	r0, [pc, #152]	@ (80092dc <tcp_receive+0xfc>)
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009242:	f8b4 8062 	ldrh.w	r8, [r4, #98]	@ 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009246:	6800      	ldr	r0, [r0, #0]
 8009248:	89c0      	ldrh	r0, [r0, #14]
 800924a:	fa1f fe80 	uxth.w	lr, r0
 800924e:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009252:	45f0      	cmp	r8, lr
      pcb->snd_wl2 = ackno;
 8009254:	e9c4 3215 	strd	r3, r2, [r4, #84]	@ 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009258:	bf38      	it	cc
 800925a:	f8a4 0062 	strhcc.w	r0, [r4, #98]	@ 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800925e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009260:	1a13      	subs	r3, r2, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	f300 8175 	bgt.w	8009552 <tcp_receive+0x372>
      if (tcplen == 0) {
 8009268:	883b      	ldrh	r3, [r7, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f040 816d 	bne.w	800954a <tcp_receive+0x36a>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009270:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009274:	4461      	add	r1, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009276:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8009278:	442b      	add	r3, r5
 800927a:	428b      	cmp	r3, r1
 800927c:	f040 8165 	bne.w	800954a <tcp_receive+0x36a>
          if (pcb->rtime >= 0) {
 8009280:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 8009284:	2b00      	cmp	r3, #0
 8009286:	f2c0 8160 	blt.w	800954a <tcp_receive+0x36a>
            if (pcb->lastack == ackno) {
 800928a:	4290      	cmp	r0, r2
 800928c:	f040 815d 	bne.w	800954a <tcp_receive+0x36a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009294:	2bff      	cmp	r3, #255	@ 0xff
                ++pcb->dupacks;
 8009296:	bf1c      	itt	ne
 8009298:	3301      	addne	r3, #1
 800929a:	f884 3043 	strbne.w	r3, [r4, #67]	@ 0x43
              if (pcb->dupacks > 3) {
 800929e:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d91e      	bls.n	80092e4 <tcp_receive+0x104>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80092a6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 80092aa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80092ac:	4413      	add	r3, r2
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	429a      	cmp	r2, r3
 80092b2:	bf88      	it	hi
 80092b4:	f64f 73ff 	movwhi	r3, #65535	@ 0xffff
 80092b8:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                tcp_rexmit_fast(pcb);
 80092bc:	4620      	mov	r0, r4
 80092be:	f001 ff53 	bl	800b168 <tcp_rexmit_fast>
      if (!found_dupack) {
 80092c2:	e010      	b.n	80092e6 <tcp_receive+0x106>
 80092c4:	0800facc 	.word	0x0800facc
 80092c8:	0800fb85 	.word	0x0800fb85
 80092cc:	0800e45a 	.word	0x0800e45a
 80092d0:	20037575 	.word	0x20037575
 80092d4:	20037580 	.word	0x20037580
 80092d8:	20037576 	.word	0x20037576
 80092dc:	20037590 	.word	0x20037590
 80092e0:	2003757c 	.word	0x2003757c
              if (pcb->dupacks >= 3) {
 80092e4:	d0ea      	beq.n	80092bc <tcp_receive+0xdc>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80092e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092e8:	b33b      	cbz	r3, 800933a <tcp_receive+0x15a>
 80092ea:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80092ec:	f8d9 1000 	ldr.w	r1, [r9]
 80092f0:	1a52      	subs	r2, r2, r1
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	da21      	bge.n	800933a <tcp_receive+0x15a>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80092f6:	4ab6      	ldr	r2, [pc, #728]	@ (80095d0 <tcp_receive+0x3f0>)
 80092f8:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 80092fa:	f9b4 c03c 	ldrsh.w	ip, [r4, #60]	@ 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80092fe:	8815      	ldrh	r5, [r2, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 8009300:	f3cc 01cf 	ubfx	r1, ip, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009304:	1aea      	subs	r2, r5, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 8009306:	1a52      	subs	r2, r2, r1
 8009308:	b210      	sxth	r0, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800930a:	fa1c f282 	uxtah	r2, ip, r2
      if (m < 0) {
 800930e:	2800      	cmp	r0, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 8009310:	b212      	sxth	r2, r2
        m = (s16_t) - m;
 8009312:	bfb8      	it	lt
 8009314:	1b5b      	sublt	r3, r3, r5
      pcb->sa = (s16_t)(pcb->sa + m);
 8009316:	87a2      	strh	r2, [r4, #60]	@ 0x3c
        m = (s16_t) - m;
 8009318:	bfb8      	it	lt
 800931a:	18c9      	addlt	r1, r1, r3
      m = (s16_t)(m - (pcb->sv >> 2));
 800931c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
        m = (s16_t) - m;
 8009320:	bfb8      	it	lt
 8009322:	b208      	sxthlt	r0, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 8009324:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
 8009328:	4403      	add	r3, r0
 800932a:	b29b      	uxth	r3, r3
 800932c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800932e:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 8009332:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
      pcb->rttest = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	6363      	str	r3, [r4, #52]	@ 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800933a:	8838      	ldrh	r0, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800933c:	6833      	ldr	r3, [r6, #0]
 800933e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009340:	2800      	cmp	r0, #0
 8009342:	f000 835c 	beq.w	80099fe <tcp_receive+0x81e>
 8009346:	7d21      	ldrb	r1, [r4, #20]
 8009348:	2906      	cmp	r1, #6
 800934a:	f200 8358 	bhi.w	80099fe <tcp_receive+0x81e>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800934e:	1ad5      	subs	r5, r2, r3
 8009350:	2d01      	cmp	r5, #1
 8009352:	f100 81a9 	bmi.w	80096a8 <tcp_receive+0x4c8>
 8009356:	f1c3 0101 	rsb	r1, r3, #1
 800935a:	1a09      	subs	r1, r1, r0
 800935c:	4411      	add	r1, r2
 800935e:	2900      	cmp	r1, #0
 8009360:	f300 81a2 	bgt.w	80096a8 <tcp_receive+0x4c8>
      struct pbuf *p = inseg.p;
 8009364:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 80095e8 <tcp_receive+0x408>
 8009368:	f8d9 8004 	ldr.w	r8, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800936c:	f1b8 0f00 	cmp.w	r8, #0
 8009370:	d106      	bne.n	8009380 <tcp_receive+0x1a0>
 8009372:	4b98      	ldr	r3, [pc, #608]	@ (80095d4 <tcp_receive+0x3f4>)
 8009374:	f240 5294 	movw	r2, #1428	@ 0x594
 8009378:	4997      	ldr	r1, [pc, #604]	@ (80095d8 <tcp_receive+0x3f8>)
 800937a:	4898      	ldr	r0, [pc, #608]	@ (80095dc <tcp_receive+0x3fc>)
 800937c:	f004 f8e6 	bl	800d54c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009380:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8009384:	429d      	cmp	r5, r3
 8009386:	d906      	bls.n	8009396 <tcp_receive+0x1b6>
 8009388:	4b92      	ldr	r3, [pc, #584]	@ (80095d4 <tcp_receive+0x3f4>)
 800938a:	f240 5295 	movw	r2, #1429	@ 0x595
 800938e:	4994      	ldr	r1, [pc, #592]	@ (80095e0 <tcp_receive+0x400>)
 8009390:	4892      	ldr	r0, [pc, #584]	@ (80095dc <tcp_receive+0x3fc>)
 8009392:	f004 f8db 	bl	800d54c <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009396:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800939a:	b2ad      	uxth	r5, r5
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800939c:	891b      	ldrh	r3, [r3, #8]
 800939e:	42ab      	cmp	r3, r5
 80093a0:	d206      	bcs.n	80093b0 <tcp_receive+0x1d0>
 80093a2:	4b8c      	ldr	r3, [pc, #560]	@ (80095d4 <tcp_receive+0x3f4>)
 80093a4:	f240 5297 	movw	r2, #1431	@ 0x597
 80093a8:	498e      	ldr	r1, [pc, #568]	@ (80095e4 <tcp_receive+0x404>)
 80093aa:	488c      	ldr	r0, [pc, #560]	@ (80095dc <tcp_receive+0x3fc>)
 80093ac:	f004 f8ce 	bl	800d54c <iprintf>
      inseg.len -= off;
 80093b0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
        p->len = 0;
 80093b4:	2100      	movs	r1, #0
      inseg.len -= off;
 80093b6:	1b5b      	subs	r3, r3, r5
 80093b8:	f8a9 3008 	strh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80093bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80093c0:	891b      	ldrh	r3, [r3, #8]
 80093c2:	1b5b      	subs	r3, r3, r5
 80093c4:	b29b      	uxth	r3, r3
      while (p->len < off) {
 80093c6:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 80093ca:	42aa      	cmp	r2, r5
 80093cc:	f0c0 8163 	bcc.w	8009696 <tcp_receive+0x4b6>
      pbuf_remove_header(p, off);
 80093d0:	4629      	mov	r1, r5
 80093d2:	4640      	mov	r0, r8
 80093d4:	f7fe fa58 	bl	8007888 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80093d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80093da:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80093de:	6033      	str	r3, [r6, #0]
 80093e0:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80093e2:	6833      	ldr	r3, [r6, #0]
 80093e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80093e6:	1a99      	subs	r1, r3, r2
 80093e8:	2900      	cmp	r1, #0
 80093ea:	f2c0 8232 	blt.w	8009852 <tcp_receive+0x672>
 80093ee:	1c58      	adds	r0, r3, #1
 80093f0:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
 80093f2:	1a81      	subs	r1, r0, r2
 80093f4:	1b49      	subs	r1, r1, r5
 80093f6:	2900      	cmp	r1, #0
 80093f8:	f300 822b 	bgt.w	8009852 <tcp_receive+0x672>
      if (pcb->rcv_nxt == seqno) {
 80093fc:	4293      	cmp	r3, r2
 80093fe:	f040 8222 	bne.w	8009846 <tcp_receive+0x666>
        tcplen = TCP_TCPLEN(&inseg);
 8009402:	4d79      	ldr	r5, [pc, #484]	@ (80095e8 <tcp_receive+0x408>)
 8009404:	68eb      	ldr	r3, [r5, #12]
 8009406:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800940a:	8998      	ldrh	r0, [r3, #12]
 800940c:	f7fd fce0 	bl	8006dd0 <lwip_htons>
 8009410:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8009414:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8009416:	bf18      	it	ne
 8009418:	2001      	movne	r0, #1
 800941a:	eb08 0300 	add.w	r3, r8, r0
 800941e:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 8009420:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8009422:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8009424:	d241      	bcs.n	80094aa <tcp_receive+0x2ca>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009426:	68eb      	ldr	r3, [r5, #12]
 8009428:	8998      	ldrh	r0, [r3, #12]
 800942a:	f7fd fcd1 	bl	8006dd0 <lwip_htons>
 800942e:	07c2      	lsls	r2, r0, #31
 8009430:	d50f      	bpl.n	8009452 <tcp_receive+0x272>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009432:	68eb      	ldr	r3, [r5, #12]
 8009434:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8009438:	4640      	mov	r0, r8
 800943a:	f428 587c 	bic.w	r8, r8, #16128	@ 0x3f00
 800943e:	f7fd fcc7 	bl	8006dd0 <lwip_htons>
 8009442:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 8009446:	f7fd fcc3 	bl	8006dd0 <lwip_htons>
 800944a:	68eb      	ldr	r3, [r5, #12]
 800944c:	ea40 0008 	orr.w	r0, r0, r8
 8009450:	8198      	strh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009452:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8009454:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009456:	68eb      	ldr	r3, [r5, #12]
 8009458:	8998      	ldrh	r0, [r3, #12]
 800945a:	f7fd fcb9 	bl	8006dd0 <lwip_htons>
 800945e:	0783      	lsls	r3, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 8009460:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8009462:	bf42      	ittt	mi
 8009464:	892b      	ldrhmi	r3, [r5, #8]
 8009466:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800946a:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800946c:	8929      	ldrh	r1, [r5, #8]
 800946e:	f7fe fb3b 	bl	8007ae8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009472:	68eb      	ldr	r3, [r5, #12]
 8009474:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8009478:	8998      	ldrh	r0, [r3, #12]
 800947a:	f7fd fca9 	bl	8006dd0 <lwip_htons>
 800947e:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009482:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8009484:	bf18      	it	ne
 8009486:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009488:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800948a:	eb08 0300 	add.w	r3, r8, r0
 800948e:	b29b      	uxth	r3, r3
 8009490:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009492:	4413      	add	r3, r2
 8009494:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8009496:	440a      	add	r2, r1
 8009498:	4293      	cmp	r3, r2
 800949a:	d006      	beq.n	80094aa <tcp_receive+0x2ca>
 800949c:	4b4d      	ldr	r3, [pc, #308]	@ (80095d4 <tcp_receive+0x3f4>)
 800949e:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80094a2:	4952      	ldr	r1, [pc, #328]	@ (80095ec <tcp_receive+0x40c>)
 80094a4:	484d      	ldr	r0, [pc, #308]	@ (80095dc <tcp_receive+0x3fc>)
 80094a6:	f004 f851 	bl	800d54c <iprintf>
        if (pcb->ooseq != NULL) {
 80094aa:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 810a 	beq.w	80096c6 <tcp_receive+0x4e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80094b2:	68eb      	ldr	r3, [r5, #12]
 80094b4:	8998      	ldrh	r0, [r3, #12]
 80094b6:	f7fd fc8b 	bl	8006dd0 <lwip_htons>
 80094ba:	07c0      	lsls	r0, r0, #31
 80094bc:	f100 8100 	bmi.w	80096c0 <tcp_receive+0x4e0>
            struct tcp_seg *next = pcb->ooseq;
 80094c0:	f8d4 8074 	ldr.w	r8, [r4, #116]	@ 0x74
                   TCP_SEQ_GEQ(seqno + tcplen,
 80094c4:	6830      	ldr	r0, [r6, #0]
 80094c6:	883b      	ldrh	r3, [r7, #0]
 80094c8:	4403      	add	r3, r0
            while (next &&
 80094ca:	f1b8 0f00 	cmp.w	r8, #0
 80094ce:	d039      	beq.n	8009544 <tcp_receive+0x364>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80094d0:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80094d4:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 80094d8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80094dc:	4411      	add	r1, r2
 80094de:	1a59      	subs	r1, r3, r1
            while (next &&
 80094e0:	2900      	cmp	r1, #0
 80094e2:	f280 811d 	bge.w	8009720 <tcp_receive+0x540>
                TCP_SEQ_GT(seqno + tcplen,
 80094e6:	1a9b      	subs	r3, r3, r2
            if (next &&
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	dd2b      	ble.n	8009544 <tcp_receive+0x364>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80094ec:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80094ee:	1a12      	subs	r2, r2, r0
 80094f0:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80094f2:	8998      	ldrh	r0, [r3, #12]
 80094f4:	f7fd fc6c 	bl	8006dd0 <lwip_htons>
 80094f8:	0783      	lsls	r3, r0, #30
              pbuf_realloc(inseg.p, inseg.len);
 80094fa:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 80094fc:	bf42      	ittt	mi
 80094fe:	892b      	ldrhmi	r3, [r5, #8]
 8009500:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8009504:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8009506:	8929      	ldrh	r1, [r5, #8]
 8009508:	f7fe faee 	bl	8007ae8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800950c:	68eb      	ldr	r3, [r5, #12]
 800950e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8009512:	8998      	ldrh	r0, [r3, #12]
 8009514:	f7fd fc5c 	bl	8006dd0 <lwip_htons>
 8009518:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800951c:	6832      	ldr	r2, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 800951e:	bf18      	it	ne
 8009520:	2001      	movne	r0, #1
 8009522:	eb09 0300 	add.w	r3, r9, r0
 8009526:	b29b      	uxth	r3, r3
 8009528:	803b      	strh	r3, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800952a:	4413      	add	r3, r2
 800952c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8009530:	6852      	ldr	r2, [r2, #4]
 8009532:	4293      	cmp	r3, r2
 8009534:	d006      	beq.n	8009544 <tcp_receive+0x364>
 8009536:	4b27      	ldr	r3, [pc, #156]	@ (80095d4 <tcp_receive+0x3f4>)
 8009538:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800953c:	492c      	ldr	r1, [pc, #176]	@ (80095f0 <tcp_receive+0x410>)
 800953e:	4827      	ldr	r0, [pc, #156]	@ (80095dc <tcp_receive+0x3fc>)
 8009540:	f004 f804 	bl	800d54c <iprintf>
            pcb->ooseq = next;
 8009544:	f8c4 8074 	str.w	r8, [r4, #116]	@ 0x74
 8009548:	e0bd      	b.n	80096c6 <tcp_receive+0x4e6>
        pcb->dupacks = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009550:	e6c9      	b.n	80092e6 <tcp_receive+0x106>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009552:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8009554:	1a51      	subs	r1, r2, r1
 8009556:	2900      	cmp	r1, #0
 8009558:	f300 8099 	bgt.w	800968e <tcp_receive+0x4ae>
      if (pcb->flags & TF_INFR) {
 800955c:	8b61      	ldrh	r1, [r4, #26]
 800955e:	0748      	lsls	r0, r1, #29
 8009560:	d509      	bpl.n	8009576 <tcp_receive+0x396>
        tcp_clear_flags(pcb, TF_INFR);
 8009562:	f021 0104 	bic.w	r1, r1, #4
 8009566:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8009568:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 800956c:	f8a4 1048 	strh.w	r1, [r4, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009570:	2100      	movs	r1, #0
 8009572:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009576:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	@ 0x3c
 800957a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
      pcb->lastack = ackno;
 800957c:	6462      	str	r2, [r4, #68]	@ 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800957e:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8009582:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009584:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
      if (pcb->state >= ESTABLISHED) {
 8009588:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800958a:	f04f 0100 	mov.w	r1, #0
 800958e:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
      if (pcb->state >= ESTABLISHED) {
 8009592:	d939      	bls.n	8009608 <tcp_receive+0x428>
        if (pcb->cwnd < pcb->ssthresh) {
 8009594:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009598:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800959a:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 800959e:	4291      	cmp	r1, r2
 80095a0:	d928      	bls.n	80095f4 <tcp_receive+0x414>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80095a2:	8b61      	ldrh	r1, [r4, #26]
 80095a4:	f411 6f00 	tst.w	r1, #2048	@ 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80095a8:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80095aa:	bf0c      	ite	eq
 80095ac:	2002      	moveq	r0, #2
 80095ae:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80095b0:	fb11 f100 	smulbb	r1, r1, r0
 80095b4:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 80095b6:	4299      	cmp	r1, r3
 80095b8:	bf94      	ite	ls
 80095ba:	1850      	addls	r0, r2, r1
 80095bc:	18d0      	addhi	r0, r2, r3
 80095be:	b283      	uxth	r3, r0
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d901      	bls.n	80095c8 <tcp_receive+0x3e8>
          TCP_WND_INC(pcb->cwnd, increase);
 80095c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80095c8:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 80095cc:	e01c      	b.n	8009608 <tcp_receive+0x428>
 80095ce:	bf00      	nop
 80095d0:	20037568 	.word	0x20037568
 80095d4:	0800facc 	.word	0x0800facc
 80095d8:	0800fb9e 	.word	0x0800fb9e
 80095dc:	0800e45a 	.word	0x0800e45a
 80095e0:	0800fbae 	.word	0x0800fbae
 80095e4:	0800fbbd 	.word	0x0800fbbd
 80095e8:	20037594 	.word	0x20037594
 80095ec:	0800fbcd 	.word	0x0800fbcd
 80095f0:	0800fc04 	.word	0x0800fc04
          TCP_WND_INC(pcb->bytes_acked, acked);
 80095f4:	f8b4 106a 	ldrh.w	r1, [r4, #106]	@ 0x6a
 80095f8:	440b      	add	r3, r1
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	4299      	cmp	r1, r3
 80095fe:	d82c      	bhi.n	800965a <tcp_receive+0x47a>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009600:	429a      	cmp	r2, r3
 8009602:	d92c      	bls.n	800965e <tcp_receive+0x47e>
 8009604:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009608:	4620      	mov	r0, r4
 800960a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	@ 0x6c
 800960e:	f7ff fd87 	bl	8009120 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009612:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009614:	4602      	mov	r2, r0
 8009616:	6720      	str	r0, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009618:	4620      	mov	r0, r4
 800961a:	f7ff fd81 	bl	8009120 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800961e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009620:	66e0      	str	r0, [r4, #108]	@ 0x6c
      if (pcb->unacked == NULL) {
 8009622:	fab2 f382 	clz	r3, r2
 8009626:	095b      	lsrs	r3, r3, #5
 8009628:	425b      	negs	r3, r3
 800962a:	8623      	strh	r3, [r4, #48]	@ 0x30
      pcb->polltmr = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8009630:	b908      	cbnz	r0, 8009636 <tcp_receive+0x456>
        pcb->unsent_oversize = 0;
 8009632:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009636:	49a0      	ldr	r1, [pc, #640]	@ (80098b8 <tcp_receive+0x6d8>)
 8009638:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800963c:	8809      	ldrh	r1, [r1, #0]
 800963e:	440b      	add	r3, r1
 8009640:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
      if (pcb->flags & TF_RTO) {
 8009644:	8b63      	ldrh	r3, [r4, #26]
 8009646:	0519      	lsls	r1, r3, #20
 8009648:	f57f ae4d 	bpl.w	80092e6 <tcp_receive+0x106>
        if (pcb->unacked == NULL) {
 800964c:	b9da      	cbnz	r2, 8009686 <tcp_receive+0x4a6>
          if ((pcb->unsent == NULL) ||
 800964e:	b968      	cbnz	r0, 800966c <tcp_receive+0x48c>
          tcp_clear_flags(pcb, TF_RTO);
 8009650:	8b63      	ldrh	r3, [r4, #26]
 8009652:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009656:	8363      	strh	r3, [r4, #26]
 8009658:	e645      	b.n	80092e6 <tcp_receive+0x106>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800965a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800965e:	1a9b      	subs	r3, r3, r2
 8009660:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009664:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8009666:	4413      	add	r3, r2
 8009668:	b29b      	uxth	r3, r3
 800966a:	e7a9      	b.n	80095c0 <tcp_receive+0x3e0>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800966c:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8009670:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009672:	6858      	ldr	r0, [r3, #4]
 8009674:	f7fd fbaf 	bl	8006dd6 <lwip_htonl>
 8009678:	eba8 0800 	sub.w	r8, r8, r0
 800967c:	f1b8 0f00 	cmp.w	r8, #0
 8009680:	f73f ae31 	bgt.w	80092e6 <tcp_receive+0x106>
 8009684:	e7e4      	b.n	8009650 <tcp_receive+0x470>
 8009686:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 800968a:	68d3      	ldr	r3, [r2, #12]
 800968c:	e7f1      	b.n	8009672 <tcp_receive+0x492>
      tcp_send_empty_ack(pcb);
 800968e:	4620      	mov	r0, r4
 8009690:	f001 fde4 	bl	800b25c <tcp_send_empty_ack>
 8009694:	e627      	b.n	80092e6 <tcp_receive+0x106>
        off -= p->len;
 8009696:	1aaa      	subs	r2, r5, r2
        p->tot_len = new_tot_len;
 8009698:	f8a8 3008 	strh.w	r3, [r8, #8]
        p->len = 0;
 800969c:	f8a8 100a 	strh.w	r1, [r8, #10]
        off -= p->len;
 80096a0:	b295      	uxth	r5, r2
        p = p->next;
 80096a2:	f8d8 8000 	ldr.w	r8, [r8]
 80096a6:	e68e      	b.n	80093c6 <tcp_receive+0x1e6>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80096a8:	1a9b      	subs	r3, r3, r2
 80096aa:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 80096ac:	bfbe      	ittt	lt
 80096ae:	8b63      	ldrhlt	r3, [r4, #26]
 80096b0:	f043 0302 	orrlt.w	r3, r3, #2
 80096b4:	8363      	strhlt	r3, [r4, #26]
 80096b6:	e694      	b.n	80093e2 <tcp_receive+0x202>
              pcb->ooseq = pcb->ooseq->next;
 80096b8:	6803      	ldr	r3, [r0, #0]
 80096ba:	6763      	str	r3, [r4, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80096bc:	f7fe fd56 	bl	800816c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80096c0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d1f8      	bne.n	80096b8 <tcp_receive+0x4d8>
        pcb->rcv_nxt = seqno + tcplen;
 80096c6:	883a      	ldrh	r2, [r7, #0]
 80096c8:	6833      	ldr	r3, [r6, #0]
 80096ca:	4413      	add	r3, r2
 80096cc:	6263      	str	r3, [r4, #36]	@ 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80096ce:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d206      	bcs.n	80096e2 <tcp_receive+0x502>
 80096d4:	4b79      	ldr	r3, [pc, #484]	@ (80098bc <tcp_receive+0x6dc>)
 80096d6:	f240 6207 	movw	r2, #1543	@ 0x607
 80096da:	4979      	ldr	r1, [pc, #484]	@ (80098c0 <tcp_receive+0x6e0>)
 80096dc:	4879      	ldr	r0, [pc, #484]	@ (80098c4 <tcp_receive+0x6e4>)
 80096de:	f003 ff35 	bl	800d54c <iprintf>
        pcb->rcv_wnd -= tcplen;
 80096e2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 80096e4:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 80096e6:	883a      	ldrh	r2, [r7, #0]
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	8523      	strh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 80096ec:	f7fe fcca 	bl	8008084 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 80096f0:	686b      	ldr	r3, [r5, #4]
 80096f2:	891a      	ldrh	r2, [r3, #8]
 80096f4:	b11a      	cbz	r2, 80096fe <tcp_receive+0x51e>
          recv_data = inseg.p;
 80096f6:	4a74      	ldr	r2, [pc, #464]	@ (80098c8 <tcp_receive+0x6e8>)
 80096f8:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 80096fa:	2300      	movs	r3, #0
 80096fc:	606b      	str	r3, [r5, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80096fe:	68eb      	ldr	r3, [r5, #12]
 8009700:	8998      	ldrh	r0, [r3, #12]
 8009702:	f7fd fb65 	bl	8006dd0 <lwip_htons>
 8009706:	07c5      	lsls	r5, r0, #31
 8009708:	d504      	bpl.n	8009714 <tcp_receive+0x534>
          recv_flags |= TF_GOT_FIN;
 800970a:	4a70      	ldr	r2, [pc, #448]	@ (80098cc <tcp_receive+0x6ec>)
 800970c:	7813      	ldrb	r3, [r2, #0]
 800970e:	f043 0320 	orr.w	r3, r3, #32
 8009712:	7013      	strb	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009714:	4f69      	ldr	r7, [pc, #420]	@ (80098bc <tcp_receive+0x6dc>)
 8009716:	f8df 81bc 	ldr.w	r8, [pc, #444]	@ 80098d4 <tcp_receive+0x6f4>
 800971a:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 80098c4 <tcp_receive+0x6e4>
 800971e:	e07c      	b.n	800981a <tcp_receive+0x63a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009720:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8009724:	f7fd fb54 	bl	8006dd0 <lwip_htons>
 8009728:	07c1      	lsls	r1, r0, #31
 800972a:	d51b      	bpl.n	8009764 <tcp_receive+0x584>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800972c:	68eb      	ldr	r3, [r5, #12]
 800972e:	8998      	ldrh	r0, [r3, #12]
 8009730:	f7fd fb4e 	bl	8006dd0 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009734:	0782      	lsls	r2, r0, #30
 8009736:	d415      	bmi.n	8009764 <tcp_receive+0x584>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009738:	68eb      	ldr	r3, [r5, #12]
 800973a:	2001      	movs	r0, #1
 800973c:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8009740:	f7fd fb46 	bl	8006dd0 <lwip_htons>
 8009744:	68eb      	ldr	r3, [r5, #12]
 8009746:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 800974a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800974e:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009750:	b280      	uxth	r0, r0
 8009752:	f7fd fb3d 	bl	8006dd0 <lwip_htons>
 8009756:	f010 0003 	ands.w	r0, r0, #3
 800975a:	bf18      	it	ne
 800975c:	2001      	movne	r0, #1
 800975e:	4481      	add	r9, r0
 8009760:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8009764:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(tmp);
 8009768:	4640      	mov	r0, r8
 800976a:	f7fe fcff 	bl	800816c <tcp_seg_free>
              next = next->next;
 800976e:	46c8      	mov	r8, r9
 8009770:	e6a8      	b.n	80094c4 <tcp_receive+0x2e4>
          seqno = pcb->ooseq->tcphdr->seqno;
 8009772:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009774:	8990      	ldrh	r0, [r2, #12]
 8009776:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800977a:	f7fd fb29 	bl	8006dd0 <lwip_htons>
 800977e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009780:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009784:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009788:	bf18      	it	ne
 800978a:	2001      	movne	r0, #1
 800978c:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800978e:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009790:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009792:	f8b4 a028 	ldrh.w	sl, [r4, #40]	@ 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009796:	6260      	str	r0, [r4, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009798:	8998      	ldrh	r0, [r3, #12]
 800979a:	f7fd fb19 	bl	8006dd0 <lwip_htons>
 800979e:	f010 0003 	ands.w	r0, r0, #3
 80097a2:	bf18      	it	ne
 80097a4:	2001      	movne	r0, #1
 80097a6:	4458      	add	r0, fp
 80097a8:	4582      	cmp	sl, r0
 80097aa:	d206      	bcs.n	80097ba <tcp_receive+0x5da>
 80097ac:	463b      	mov	r3, r7
 80097ae:	f240 622b 	movw	r2, #1579	@ 0x62b
 80097b2:	4641      	mov	r1, r8
 80097b4:	4648      	mov	r0, r9
 80097b6:	f003 fec9 	bl	800d54c <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80097ba:	68eb      	ldr	r3, [r5, #12]
 80097bc:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80097c0:	8998      	ldrh	r0, [r3, #12]
 80097c2:	f7fd fb05 	bl	8006dd0 <lwip_htons>
 80097c6:	f010 0003 	ands.w	r0, r0, #3
 80097ca:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80097cc:	bf18      	it	ne
 80097ce:	2001      	movne	r0, #1
 80097d0:	4450      	add	r0, sl
 80097d2:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 80097d4:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80097d6:	8523      	strh	r3, [r4, #40]	@ 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80097d8:	f7fe fc54 	bl	8008084 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80097dc:	6869      	ldr	r1, [r5, #4]
 80097de:	890b      	ldrh	r3, [r1, #8]
 80097e0:	b133      	cbz	r3, 80097f0 <tcp_receive+0x610>
            if (recv_data) {
 80097e2:	4b39      	ldr	r3, [pc, #228]	@ (80098c8 <tcp_receive+0x6e8>)
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	b338      	cbz	r0, 8009838 <tcp_receive+0x658>
              pbuf_cat(recv_data, cseg->p);
 80097e8:	f7fe f9fa 	bl	8007be0 <pbuf_cat>
            cseg->p = NULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80097f0:	68eb      	ldr	r3, [r5, #12]
 80097f2:	8998      	ldrh	r0, [r3, #12]
 80097f4:	f7fd faec 	bl	8006dd0 <lwip_htons>
 80097f8:	07c0      	lsls	r0, r0, #31
 80097fa:	d509      	bpl.n	8009810 <tcp_receive+0x630>
            recv_flags |= TF_GOT_FIN;
 80097fc:	4a33      	ldr	r2, [pc, #204]	@ (80098cc <tcp_receive+0x6ec>)
 80097fe:	7813      	ldrb	r3, [r2, #0]
 8009800:	f043 0320 	orr.w	r3, r3, #32
 8009804:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009806:	7d23      	ldrb	r3, [r4, #20]
 8009808:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800980a:	bf04      	itt	eq
 800980c:	2307      	moveq	r3, #7
 800980e:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8009810:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8009812:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8009814:	6763      	str	r3, [r4, #116]	@ 0x74
          tcp_seg_free(cseg);
 8009816:	f7fe fca9 	bl	800816c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800981a:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800981c:	b125      	cbz	r5, 8009828 <tcp_receive+0x648>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800981e:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8009820:	6a61      	ldr	r1, [r4, #36]	@ 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009822:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8009824:	428b      	cmp	r3, r1
 8009826:	d0a4      	beq.n	8009772 <tcp_receive+0x592>
        tcp_ack(pcb);
 8009828:	8b63      	ldrh	r3, [r4, #26]
 800982a:	07d9      	lsls	r1, r3, #31
 800982c:	d506      	bpl.n	800983c <tcp_receive+0x65c>
 800982e:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 8009832:	f043 0302 	orr.w	r3, r3, #2
 8009836:	e003      	b.n	8009840 <tcp_receive+0x660>
              recv_data = cseg->p;
 8009838:	6019      	str	r1, [r3, #0]
 800983a:	e7d7      	b.n	80097ec <tcp_receive+0x60c>
        tcp_ack(pcb);
 800983c:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 8009840:	8363      	strh	r3, [r4, #26]
}
 8009842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pcb->ooseq == NULL) {
 8009846:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 8009848:	b945      	cbnz	r5, 800985c <tcp_receive+0x67c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800984a:	4821      	ldr	r0, [pc, #132]	@ (80098d0 <tcp_receive+0x6f0>)
 800984c:	f7fe fca4 	bl	8008198 <tcp_seg_copy>
 8009850:	6760      	str	r0, [r4, #116]	@ 0x74
        tcp_send_empty_ack(pcb);
 8009852:	4620      	mov	r0, r4
}
 8009854:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 8009858:	f001 bd00 	b.w	800b25c <tcp_send_empty_ack>
          struct tcp_seg *next, *prev = NULL;
 800985c:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009860:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 8009864:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8009868:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800986c:	4293      	cmp	r3, r2
 800986e:	d115      	bne.n	800989c <tcp_receive+0x6bc>
              if (inseg.len > next->len) {
 8009870:	4817      	ldr	r0, [pc, #92]	@ (80098d0 <tcp_receive+0x6f0>)
 8009872:	892b      	ldrh	r3, [r5, #8]
 8009874:	8902      	ldrh	r2, [r0, #8]
 8009876:	429a      	cmp	r2, r3
 8009878:	d9eb      	bls.n	8009852 <tcp_receive+0x672>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800987a:	f7fe fc8d 	bl	8008198 <tcp_seg_copy>
                if (cseg != NULL) {
 800987e:	2800      	cmp	r0, #0
 8009880:	d0e7      	beq.n	8009852 <tcp_receive+0x672>
                  if (prev != NULL) {
 8009882:	f1b8 0f00 	cmp.w	r8, #0
 8009886:	d007      	beq.n	8009898 <tcp_receive+0x6b8>
                    prev->next = cseg;
 8009888:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800988c:	4629      	mov	r1, r5
 800988e:	f7ff fb97 	bl	8008fc0 <tcp_oos_insert_segment>
 8009892:	e7de      	b.n	8009852 <tcp_receive+0x672>
 8009894:	460d      	mov	r5, r1
 8009896:	e7e5      	b.n	8009864 <tcp_receive+0x684>
                    pcb->ooseq = cseg;
 8009898:	6760      	str	r0, [r4, #116]	@ 0x74
                  tcp_oos_insert_segment(cseg, next);
 800989a:	e7f7      	b.n	800988c <tcp_receive+0x6ac>
              if (prev == NULL) {
 800989c:	f1b8 0f00 	cmp.w	r8, #0
 80098a0:	d11a      	bne.n	80098d8 <tcp_receive+0x6f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80098a2:	1a99      	subs	r1, r3, r2
 80098a4:	2900      	cmp	r1, #0
 80098a6:	da3e      	bge.n	8009926 <tcp_receive+0x746>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80098a8:	4809      	ldr	r0, [pc, #36]	@ (80098d0 <tcp_receive+0x6f0>)
 80098aa:	f7fe fc75 	bl	8008198 <tcp_seg_copy>
                  if (cseg != NULL) {
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d0cf      	beq.n	8009852 <tcp_receive+0x672>
                    pcb->ooseq = cseg;
 80098b2:	6760      	str	r0, [r4, #116]	@ 0x74
 80098b4:	e7ea      	b.n	800988c <tcp_receive+0x6ac>
 80098b6:	bf00      	nop
 80098b8:	20037578 	.word	0x20037578
 80098bc:	0800facc 	.word	0x0800facc
 80098c0:	0800fc3f 	.word	0x0800fc3f
 80098c4:	0800e45a 	.word	0x0800e45a
 80098c8:	20037570 	.word	0x20037570
 80098cc:	20037574 	.word	0x20037574
 80098d0:	20037594 	.word	0x20037594
 80098d4:	0800fc5e 	.word	0x0800fc5e
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80098d8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80098dc:	6849      	ldr	r1, [r1, #4]
 80098de:	ebae 0101 	sub.w	r1, lr, r1
 80098e2:	2900      	cmp	r1, #0
 80098e4:	db1f      	blt.n	8009926 <tcp_receive+0x746>
 80098e6:	1a81      	subs	r1, r0, r2
 80098e8:	2900      	cmp	r1, #0
 80098ea:	dc1c      	bgt.n	8009926 <tcp_receive+0x746>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80098ec:	484a      	ldr	r0, [pc, #296]	@ (8009a18 <tcp_receive+0x838>)
 80098ee:	f7fe fc53 	bl	8008198 <tcp_seg_copy>
                  if (cseg != NULL) {
 80098f2:	4607      	mov	r7, r0
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d0ac      	beq.n	8009852 <tcp_receive+0x672>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80098f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098fc:	6831      	ldr	r1, [r6, #0]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8009904:	4413      	add	r3, r2
 8009906:	1a5b      	subs	r3, r3, r1
 8009908:	2b00      	cmp	r3, #0
 800990a:	dd07      	ble.n	800991c <tcp_receive+0x73c>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800990c:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 800990e:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009912:	b289      	uxth	r1, r1
 8009914:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009918:	f7fe f8e6 	bl	8007ae8 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800991c:	4629      	mov	r1, r5
 800991e:	4638      	mov	r0, r7
                    prev->next = cseg;
 8009920:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8009924:	e7b3      	b.n	800988e <tcp_receive+0x6ae>
              if (next->next == NULL &&
 8009926:	6829      	ldr	r1, [r5, #0]
 8009928:	46a8      	mov	r8, r5
 800992a:	2900      	cmp	r1, #0
 800992c:	d1b2      	bne.n	8009894 <tcp_receive+0x6b4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800992e:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8009930:	2b00      	cmp	r3, #0
 8009932:	dd8e      	ble.n	8009852 <tcp_receive+0x672>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009934:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8009938:	f7fd fa4a 	bl	8006dd0 <lwip_htons>
 800993c:	07c2      	lsls	r2, r0, #31
 800993e:	d488      	bmi.n	8009852 <tcp_receive+0x672>
                next->next = tcp_seg_copy(&inseg);
 8009940:	4835      	ldr	r0, [pc, #212]	@ (8009a18 <tcp_receive+0x838>)
 8009942:	f7fe fc29 	bl	8008198 <tcp_seg_copy>
 8009946:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8009948:	2800      	cmp	r0, #0
 800994a:	d082      	beq.n	8009852 <tcp_receive+0x672>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800994c:	68eb      	ldr	r3, [r5, #12]
 800994e:	6831      	ldr	r1, [r6, #0]
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	892b      	ldrh	r3, [r5, #8]
 8009954:	4413      	add	r3, r2
 8009956:	1a5b      	subs	r3, r3, r1
 8009958:	2b00      	cmp	r3, #0
 800995a:	dd05      	ble.n	8009968 <tcp_receive+0x788>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800995c:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 800995e:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009960:	b289      	uxth	r1, r1
 8009962:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8009964:	f7fe f8c0 	bl	8007ae8 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009968:	6832      	ldr	r2, [r6, #0]
 800996a:	883b      	ldrh	r3, [r7, #0]
 800996c:	4413      	add	r3, r2
 800996e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009970:	1a9b      	subs	r3, r3, r2
 8009972:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8009974:	1a9b      	subs	r3, r3, r2
 8009976:	2b00      	cmp	r3, #0
 8009978:	f77f af6b 	ble.w	8009852 <tcp_receive+0x672>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	8998      	ldrh	r0, [r3, #12]
 8009982:	f7fd fa25 	bl	8006dd0 <lwip_htons>
 8009986:	07c3      	lsls	r3, r0, #31
 8009988:	d511      	bpl.n	80099ae <tcp_receive+0x7ce>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800998a:	682b      	ldr	r3, [r5, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8009992:	4640      	mov	r0, r8
 8009994:	f428 587c 	bic.w	r8, r8, #16128	@ 0x3f00
 8009998:	f7fd fa1a 	bl	8006dd0 <lwip_htons>
 800999c:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 80099a0:	f7fd fa16 	bl	8006dd0 <lwip_htons>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	ea40 0008 	orr.w	r0, r0, r8
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	8198      	strh	r0, [r3, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80099ae:	6832      	ldr	r2, [r6, #0]
 80099b0:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 80099b2:	682b      	ldr	r3, [r5, #0]
 80099b4:	1a89      	subs	r1, r1, r2
 80099b6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 80099b8:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80099ba:	4411      	add	r1, r2
 80099bc:	b289      	uxth	r1, r1
 80099be:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80099c0:	f7fe f892 	bl	8007ae8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	891d      	ldrh	r5, [r3, #8]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	8998      	ldrh	r0, [r3, #12]
 80099cc:	f7fd fa00 	bl	8006dd0 <lwip_htons>
 80099d0:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80099d4:	6832      	ldr	r2, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 80099d6:	bf18      	it	ne
 80099d8:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80099da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
                    tcplen = TCP_TCPLEN(next->next);
 80099dc:	182b      	adds	r3, r5, r0
 80099de:	b29b      	uxth	r3, r3
 80099e0:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80099e2:	4413      	add	r3, r2
 80099e4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80099e6:	440a      	add	r2, r1
 80099e8:	4293      	cmp	r3, r2
 80099ea:	f43f af32 	beq.w	8009852 <tcp_receive+0x672>
 80099ee:	4b0b      	ldr	r3, [pc, #44]	@ (8009a1c <tcp_receive+0x83c>)
 80099f0:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80099f4:	490a      	ldr	r1, [pc, #40]	@ (8009a20 <tcp_receive+0x840>)
 80099f6:	480b      	ldr	r0, [pc, #44]	@ (8009a24 <tcp_receive+0x844>)
 80099f8:	f003 fda8 	bl	800d54c <iprintf>
 80099fc:	e729      	b.n	8009852 <tcp_receive+0x672>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80099fe:	1a99      	subs	r1, r3, r2
 8009a00:	2900      	cmp	r1, #0
 8009a02:	db06      	blt.n	8009a12 <tcp_receive+0x832>
 8009a04:	3301      	adds	r3, #1
 8009a06:	1a9b      	subs	r3, r3, r2
 8009a08:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8009a0a:	1a9b      	subs	r3, r3, r2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f77f af18 	ble.w	8009842 <tcp_receive+0x662>
      tcp_ack_now(pcb);
 8009a12:	8b63      	ldrh	r3, [r4, #26]
 8009a14:	e70d      	b.n	8009832 <tcp_receive+0x652>
 8009a16:	bf00      	nop
 8009a18:	20037594 	.word	0x20037594
 8009a1c:	0800facc 	.word	0x0800facc
 8009a20:	0800fbcd 	.word	0x0800fbcd
 8009a24:	0800e45a 	.word	0x0800e45a

08009a28 <tcp_input>:
{
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009a2c:	4605      	mov	r5, r0
{
 8009a2e:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009a30:	b928      	cbnz	r0, 8009a3e <tcp_input+0x16>
 8009a32:	4b72      	ldr	r3, [pc, #456]	@ (8009bfc <tcp_input+0x1d4>)
 8009a34:	2283      	movs	r2, #131	@ 0x83
 8009a36:	4972      	ldr	r1, [pc, #456]	@ (8009c00 <tcp_input+0x1d8>)
 8009a38:	4872      	ldr	r0, [pc, #456]	@ (8009c04 <tcp_input+0x1dc>)
 8009a3a:	f003 fd87 	bl	800d54c <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 8009a3e:	686b      	ldr	r3, [r5, #4]
 8009a40:	4e71      	ldr	r6, [pc, #452]	@ (8009c08 <tcp_input+0x1e0>)
 8009a42:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8009a44:	896b      	ldrh	r3, [r5, #10]
 8009a46:	2b13      	cmp	r3, #19
 8009a48:	f240 80d2 	bls.w	8009bf0 <tcp_input+0x1c8>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009a4c:	f8df 81e4 	ldr.w	r8, [pc, #484]	@ 8009c34 <tcp_input+0x20c>
 8009a50:	f8d8 1000 	ldr.w	r1, [r8]
 8009a54:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8009a58:	f002 ff3f 	bl	800c8da <ip4_addr_isbroadcast_u32>
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	f040 80c6 	bne.w	8009bf0 <tcp_input+0x1c8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009a64:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009a6c:	2be0      	cmp	r3, #224	@ 0xe0
 8009a6e:	f000 80bf 	beq.w	8009bf0 <tcp_input+0x1c8>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009a72:	6833      	ldr	r3, [r6, #0]
 8009a74:	8998      	ldrh	r0, [r3, #12]
 8009a76:	f7fd f9ab 	bl	8006dd0 <lwip_htons>
 8009a7a:	0a81      	lsrs	r1, r0, #10
 8009a7c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009a80:	2913      	cmp	r1, #19
 8009a82:	f240 80b5 	bls.w	8009bf0 <tcp_input+0x1c8>
 8009a86:	892b      	ldrh	r3, [r5, #8]
 8009a88:	428b      	cmp	r3, r1
 8009a8a:	f0c0 80b1 	bcc.w	8009bf0 <tcp_input+0x1c8>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009a8e:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 8009a92:	896a      	ldrh	r2, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009a94:	4f5d      	ldr	r7, [pc, #372]	@ (8009c0c <tcp_input+0x1e4>)
 8009a96:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 8009a98:	f8df a19c 	ldr.w	sl, [pc, #412]	@ 8009c38 <tcp_input+0x210>
  if (p->len >= hdrlen_bytes) {
 8009a9c:	428a      	cmp	r2, r1
 8009a9e:	f8df 919c 	ldr.w	r9, [pc, #412]	@ 8009c3c <tcp_input+0x214>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009aa2:	803b      	strh	r3, [r7, #0]
  tcphdr_opt2 = NULL;
 8009aa4:	f8ca 4000 	str.w	r4, [sl]
  if (p->len >= hdrlen_bytes) {
 8009aa8:	d360      	bcc.n	8009b6c <tcp_input+0x144>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009aaa:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8009aac:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009ab0:	f7fd feea 	bl	8007888 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009ab4:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009ab6:	f8df b188 	ldr.w	fp, [pc, #392]	@ 8009c40 <tcp_input+0x218>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009aba:	8820      	ldrh	r0, [r4, #0]
 8009abc:	f7fd f988 	bl	8006dd0 <lwip_htons>
 8009ac0:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009ac2:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009ac4:	f8df a17c 	ldr.w	sl, [pc, #380]	@ 8009c44 <tcp_input+0x21c>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009ac8:	8860      	ldrh	r0, [r4, #2]
 8009aca:	f7fd f981 	bl	8006dd0 <lwip_htons>
 8009ace:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009ad0:	6834      	ldr	r4, [r6, #0]
 8009ad2:	6860      	ldr	r0, [r4, #4]
 8009ad4:	f7fd f97f 	bl	8006dd6 <lwip_htonl>
 8009ad8:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009ada:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009adc:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009ae0:	68a0      	ldr	r0, [r4, #8]
 8009ae2:	f7fd f978 	bl	8006dd6 <lwip_htonl>
 8009ae6:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009ae8:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009aea:	f8ca 0000 	str.w	r0, [sl]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009aee:	89e0      	ldrh	r0, [r4, #14]
 8009af0:	f7fd f96e 	bl	8006dd0 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8009af4:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009af6:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8009af8:	8998      	ldrh	r0, [r3, #12]
 8009afa:	f7fd f969 	bl	8006dd0 <lwip_htons>
 8009afe:	4a44      	ldr	r2, [pc, #272]	@ (8009c10 <tcp_input+0x1e8>)
 8009b00:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
 8009b04:	7013      	strb	r3, [r2, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009b06:	0783      	lsls	r3, r0, #30
  tcplen = p->tot_len;
 8009b08:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009b0a:	d16b      	bne.n	8009be4 <tcp_input+0x1bc>
  tcplen = p->tot_len;
 8009b0c:	4b41      	ldr	r3, [pc, #260]	@ (8009c14 <tcp_input+0x1ec>)
 8009b0e:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b10:	4f41      	ldr	r7, [pc, #260]	@ (8009c18 <tcp_input+0x1f0>)
  prev = NULL;
 8009b12:	f04f 0900 	mov.w	r9, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b16:	683c      	ldr	r4, [r7, #0]
 8009b18:	2c00      	cmp	r4, #0
 8009b1a:	f040 8095 	bne.w	8009c48 <tcp_input+0x220>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8009c1c <tcp_input+0x1f4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009b20:	4c38      	ldr	r4, [pc, #224]	@ (8009c04 <tcp_input+0x1dc>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b22:	f8d3 9000 	ldr.w	r9, [r3]
 8009b26:	f1b9 0f00 	cmp.w	r9, #0
 8009b2a:	f040 8124 	bne.w	8009d76 <tcp_input+0x34e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8009c20 <tcp_input+0x1f8>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009b30:	f8d8 c004 	ldr.w	ip, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009b34:	681a      	ldr	r2, [r3, #0]
      if (lpcb->local_port == tcphdr->dest) {
 8009b36:	6831      	ldr	r1, [r6, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009b38:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009b3c:	4614      	mov	r4, r2
 8009b3e:	2c00      	cmp	r4, #0
 8009b40:	f040 817c 	bne.w	8009e3c <tcp_input+0x414>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009b44:	8988      	ldrh	r0, [r1, #12]
 8009b46:	f7fd f943 	bl	8006dd0 <lwip_htons>
 8009b4a:	0743      	lsls	r3, r0, #29
 8009b4c:	d450      	bmi.n	8009bf0 <tcp_input+0x1c8>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b4e:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b50:	4a30      	ldr	r2, [pc, #192]	@ (8009c14 <tcp_input+0x1ec>)
 8009b52:	8818      	ldrh	r0, [r3, #0]
 8009b54:	8811      	ldrh	r1, [r2, #0]
 8009b56:	f8db 2000 	ldr.w	r2, [fp]
 8009b5a:	9002      	str	r0, [sp, #8]
 8009b5c:	885b      	ldrh	r3, [r3, #2]
 8009b5e:	440a      	add	r2, r1
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	4b30      	ldr	r3, [pc, #192]	@ (8009c24 <tcp_input+0x1fc>)
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	3304      	adds	r3, #4
 8009b68:	f000 bccc 	b.w	800a504 <tcp_input+0xadc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	b92b      	cbnz	r3, 8009b7c <tcp_input+0x154>
 8009b70:	4b22      	ldr	r3, [pc, #136]	@ (8009bfc <tcp_input+0x1d4>)
 8009b72:	22c2      	movs	r2, #194	@ 0xc2
 8009b74:	492c      	ldr	r1, [pc, #176]	@ (8009c28 <tcp_input+0x200>)
 8009b76:	4823      	ldr	r0, [pc, #140]	@ (8009c04 <tcp_input+0x1dc>)
 8009b78:	f003 fce8 	bl	800d54c <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 8009b7c:	2114      	movs	r1, #20
 8009b7e:	4628      	mov	r0, r5
 8009b80:	f7fd fe82 	bl	8007888 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 8009b84:	896c      	ldrh	r4, [r5, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 8009b86:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8009b88:	f8a9 4000 	strh.w	r4, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 8009b8c:	4621      	mov	r1, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009b8e:	f8b7 9000 	ldrh.w	r9, [r7]
    pbuf_remove_header(p, tcphdr_opt1len);
 8009b92:	f7fd fe79 	bl	8007888 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 8009b96:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009b98:	eba9 0704 	sub.w	r7, r9, r4
    if (opt2len > p->next->len) {
 8009b9c:	8943      	ldrh	r3, [r0, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009b9e:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 8009ba0:	42bb      	cmp	r3, r7
 8009ba2:	d325      	bcc.n	8009bf0 <tcp_input+0x1c8>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009ba4:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 8009ba6:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009ba8:	f8ca 3000 	str.w	r3, [sl]
    pbuf_remove_header(p->next, opt2len);
 8009bac:	f7fd fe6c 	bl	8007888 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009bb0:	892b      	ldrh	r3, [r5, #8]
 8009bb2:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009bb4:	896b      	ldrh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009bb6:	eba4 0409 	sub.w	r4, r4, r9
 8009bba:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009bbc:	b12b      	cbz	r3, 8009bca <tcp_input+0x1a2>
 8009bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8009bfc <tcp_input+0x1d4>)
 8009bc0:	22df      	movs	r2, #223	@ 0xdf
 8009bc2:	491a      	ldr	r1, [pc, #104]	@ (8009c2c <tcp_input+0x204>)
 8009bc4:	480f      	ldr	r0, [pc, #60]	@ (8009c04 <tcp_input+0x1dc>)
 8009bc6:	f003 fcc1 	bl	800d54c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009bca:	682b      	ldr	r3, [r5, #0]
 8009bcc:	892a      	ldrh	r2, [r5, #8]
 8009bce:	891b      	ldrh	r3, [r3, #8]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	f43f af6f 	beq.w	8009ab4 <tcp_input+0x8c>
 8009bd6:	4b09      	ldr	r3, [pc, #36]	@ (8009bfc <tcp_input+0x1d4>)
 8009bd8:	22e0      	movs	r2, #224	@ 0xe0
 8009bda:	4915      	ldr	r1, [pc, #84]	@ (8009c30 <tcp_input+0x208>)
 8009bdc:	4809      	ldr	r0, [pc, #36]	@ (8009c04 <tcp_input+0x1dc>)
 8009bde:	f003 fcb5 	bl	800d54c <iprintf>
 8009be2:	e767      	b.n	8009ab4 <tcp_input+0x8c>
    tcplen++;
 8009be4:	1c53      	adds	r3, r2, #1
 8009be6:	490b      	ldr	r1, [pc, #44]	@ (8009c14 <tcp_input+0x1ec>)
 8009be8:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 8009bea:	429a      	cmp	r2, r3
    tcplen++;
 8009bec:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 8009bee:	d98f      	bls.n	8009b10 <tcp_input+0xe8>
  pbuf_free(p);
 8009bf0:	4628      	mov	r0, r5
}
 8009bf2:	b005      	add	sp, #20
 8009bf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8009bf8:	f7fd be7a 	b.w	80078f0 <pbuf_free>
 8009bfc:	0800facc 	.word	0x0800facc
 8009c00:	0800fc83 	.word	0x0800fc83
 8009c04:	0800e45a 	.word	0x0800e45a
 8009c08:	20037590 	.word	0x20037590
 8009c0c:	2003758e 	.word	0x2003758e
 8009c10:	20037575 	.word	0x20037575
 8009c14:	20037576 	.word	0x20037576
 8009c18:	2003755c 	.word	0x2003755c
 8009c1c:	20037558 	.word	0x20037558
 8009c20:	20037560 	.word	0x20037560
 8009c24:	2002ed64 	.word	0x2002ed64
 8009c28:	0800fc9b 	.word	0x0800fc9b
 8009c2c:	0800fcab 	.word	0x0800fcab
 8009c30:	0800fcb7 	.word	0x0800fcb7
 8009c34:	2002ed54 	.word	0x2002ed54
 8009c38:	20037588 	.word	0x20037588
 8009c3c:	2003758c 	.word	0x2003758c
 8009c40:	20037580 	.word	0x20037580
 8009c44:	2003757c 	.word	0x2003757c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009c48:	7d23      	ldrb	r3, [r4, #20]
 8009c4a:	b92b      	cbnz	r3, 8009c58 <tcp_input+0x230>
 8009c4c:	4b8f      	ldr	r3, [pc, #572]	@ (8009e8c <tcp_input+0x464>)
 8009c4e:	22fb      	movs	r2, #251	@ 0xfb
 8009c50:	498f      	ldr	r1, [pc, #572]	@ (8009e90 <tcp_input+0x468>)
 8009c52:	4890      	ldr	r0, [pc, #576]	@ (8009e94 <tcp_input+0x46c>)
 8009c54:	f003 fc7a 	bl	800d54c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009c58:	7d23      	ldrb	r3, [r4, #20]
 8009c5a:	2b0a      	cmp	r3, #10
 8009c5c:	d105      	bne.n	8009c6a <tcp_input+0x242>
 8009c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8009e8c <tcp_input+0x464>)
 8009c60:	22fc      	movs	r2, #252	@ 0xfc
 8009c62:	498d      	ldr	r1, [pc, #564]	@ (8009e98 <tcp_input+0x470>)
 8009c64:	488b      	ldr	r0, [pc, #556]	@ (8009e94 <tcp_input+0x46c>)
 8009c66:	f003 fc71 	bl	800d54c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009c6a:	7d23      	ldrb	r3, [r4, #20]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d105      	bne.n	8009c7c <tcp_input+0x254>
 8009c70:	4b86      	ldr	r3, [pc, #536]	@ (8009e8c <tcp_input+0x464>)
 8009c72:	22fd      	movs	r2, #253	@ 0xfd
 8009c74:	4989      	ldr	r1, [pc, #548]	@ (8009e9c <tcp_input+0x474>)
 8009c76:	4887      	ldr	r0, [pc, #540]	@ (8009e94 <tcp_input+0x46c>)
 8009c78:	f003 fc68 	bl	800d54c <iprintf>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c7c:	7a21      	ldrb	r1, [r4, #8]
 8009c7e:	68e2      	ldr	r2, [r4, #12]
 8009c80:	b139      	cbz	r1, 8009c92 <tcp_input+0x26a>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c8a:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	4299      	cmp	r1, r3
 8009c90:	d16e      	bne.n	8009d70 <tcp_input+0x348>
    if (pcb->remote_port == tcphdr->src &&
 8009c92:	6833      	ldr	r3, [r6, #0]
 8009c94:	8b20      	ldrh	r0, [r4, #24]
 8009c96:	8819      	ldrh	r1, [r3, #0]
 8009c98:	4288      	cmp	r0, r1
 8009c9a:	d169      	bne.n	8009d70 <tcp_input+0x348>
 8009c9c:	8ae1      	ldrh	r1, [r4, #22]
 8009c9e:	885b      	ldrh	r3, [r3, #2]
 8009ca0:	4299      	cmp	r1, r3
 8009ca2:	d165      	bne.n	8009d70 <tcp_input+0x348>
        pcb->local_port == tcphdr->dest &&
 8009ca4:	6861      	ldr	r1, [r4, #4]
 8009ca6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009caa:	4299      	cmp	r1, r3
 8009cac:	d160      	bne.n	8009d70 <tcp_input+0x348>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009cae:	6821      	ldr	r1, [r4, #0]
 8009cb0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009cb4:	4299      	cmp	r1, r3
 8009cb6:	d15b      	bne.n	8009d70 <tcp_input+0x348>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009cb8:	42a2      	cmp	r2, r4
 8009cba:	f040 8400 	bne.w	800a4be <tcp_input+0xa96>
 8009cbe:	4b73      	ldr	r3, [pc, #460]	@ (8009e8c <tcp_input+0x464>)
 8009cc0:	f240 120d 	movw	r2, #269	@ 0x10d
 8009cc4:	4976      	ldr	r1, [pc, #472]	@ (8009ea0 <tcp_input+0x478>)
 8009cc6:	4873      	ldr	r0, [pc, #460]	@ (8009e94 <tcp_input+0x46c>)
 8009cc8:	f003 fc40 	bl	800d54c <iprintf>
      if (prev != NULL) {
 8009ccc:	f1b9 0f00 	cmp.w	r9, #0
 8009cd0:	d005      	beq.n	8009cde <tcp_input+0x2b6>
        prev->next = pcb->next;
 8009cd2:	68e3      	ldr	r3, [r4, #12]
 8009cd4:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 8009cd8:	683b      	ldr	r3, [r7, #0]
        tcp_active_pcbs = pcb;
 8009cda:	603c      	str	r4, [r7, #0]
        pcb->next = tcp_active_pcbs;
 8009cdc:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009cde:	68e3      	ldr	r3, [r4, #12]
 8009ce0:	42a3      	cmp	r3, r4
 8009ce2:	d106      	bne.n	8009cf2 <tcp_input+0x2ca>
 8009ce4:	4b69      	ldr	r3, [pc, #420]	@ (8009e8c <tcp_input+0x464>)
 8009ce6:	f240 1215 	movw	r2, #277	@ 0x115
 8009cea:	496e      	ldr	r1, [pc, #440]	@ (8009ea4 <tcp_input+0x47c>)
 8009cec:	4869      	ldr	r0, [pc, #420]	@ (8009e94 <tcp_input+0x46c>)
 8009cee:	f003 fc2d 	bl	800d54c <iprintf>
    inseg.next = NULL;
 8009cf2:	496d      	ldr	r1, [pc, #436]	@ (8009ea8 <tcp_input+0x480>)
 8009cf4:	2300      	movs	r3, #0
    inseg.len = p->tot_len;
 8009cf6:	892a      	ldrh	r2, [r5, #8]
    recv_data = NULL;
 8009cf8:	f8df 91cc 	ldr.w	r9, [pc, #460]	@ 8009ec8 <tcp_input+0x4a0>
    inseg.len = p->tot_len;
 8009cfc:	810a      	strh	r2, [r1, #8]
    inseg.tcphdr = tcphdr;
 8009cfe:	6832      	ldr	r2, [r6, #0]
    recv_flags = 0;
 8009d00:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 8009ecc <tcp_input+0x4a4>
    inseg.tcphdr = tcphdr;
 8009d04:	60ca      	str	r2, [r1, #12]
    recv_acked = 0;
 8009d06:	4a69      	ldr	r2, [pc, #420]	@ (8009eac <tcp_input+0x484>)
    inseg.next = NULL;
 8009d08:	600b      	str	r3, [r1, #0]
    recv_data = NULL;
 8009d0a:	f8c9 3000 	str.w	r3, [r9]
    recv_flags = 0;
 8009d0e:	f888 3000 	strb.w	r3, [r8]
    recv_acked = 0;
 8009d12:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 8009d14:	4b66      	ldr	r3, [pc, #408]	@ (8009eb0 <tcp_input+0x488>)
    inseg.p = p;
 8009d16:	604d      	str	r5, [r1, #4]
    if (flags & TCP_PSH) {
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	0718      	lsls	r0, r3, #28
      p->flags |= PBUF_FLAG_PUSH;
 8009d1c:	bf42      	ittt	mi
 8009d1e:	7b6b      	ldrbmi	r3, [r5, #13]
 8009d20:	f043 0301 	orrmi.w	r3, r3, #1
 8009d24:	736b      	strbmi	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8009d26:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8009d28:	4d62      	ldr	r5, [pc, #392]	@ (8009eb4 <tcp_input+0x48c>)
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 812e 	beq.w	8009f8c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d30:	4620      	mov	r0, r4
 8009d32:	f7fe fe37 	bl	80089a4 <tcp_process_refused_data>
 8009d36:	300d      	adds	r0, #13
 8009d38:	d008      	beq.n	8009d4c <tcp_input+0x324>
 8009d3a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 8125 	beq.w	8009f8c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d42:	4b5d      	ldr	r3, [pc, #372]	@ (8009eb8 <tcp_input+0x490>)
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f000 8120 	beq.w	8009f8c <tcp_input+0x564>
        if (pcb->rcv_ann_wnd == 0) {
 8009d4c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009d4e:	b913      	cbnz	r3, 8009d56 <tcp_input+0x32e>
          tcp_send_empty_ack(pcb);
 8009d50:	4620      	mov	r0, r4
 8009d52:	f001 fa83 	bl	800b25c <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 8009d56:	2400      	movs	r4, #0
 8009d58:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL) {
 8009d5a:	4d53      	ldr	r5, [pc, #332]	@ (8009ea8 <tcp_input+0x480>)
    recv_data = NULL;
 8009d5c:	f8c9 4000 	str.w	r4, [r9]
    if (inseg.p != NULL) {
 8009d60:	6868      	ldr	r0, [r5, #4]
 8009d62:	b110      	cbz	r0, 8009d6a <tcp_input+0x342>
      pbuf_free(inseg.p);
 8009d64:	f7fd fdc4 	bl	80078f0 <pbuf_free>
      inseg.p = NULL;
 8009d68:	606c      	str	r4, [r5, #4]
}
 8009d6a:	b005      	add	sp, #20
 8009d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d70:	46a1      	mov	r9, r4
 8009d72:	4614      	mov	r4, r2
 8009d74:	e6d0      	b.n	8009b18 <tcp_input+0xf0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009d76:	f899 3014 	ldrb.w	r3, [r9, #20]
 8009d7a:	2b0a      	cmp	r3, #10
 8009d7c:	d006      	beq.n	8009d8c <tcp_input+0x364>
 8009d7e:	4b43      	ldr	r3, [pc, #268]	@ (8009e8c <tcp_input+0x464>)
 8009d80:	f240 121f 	movw	r2, #287	@ 0x11f
 8009d84:	494d      	ldr	r1, [pc, #308]	@ (8009ebc <tcp_input+0x494>)
 8009d86:	4620      	mov	r0, r4
 8009d88:	f003 fbe0 	bl	800d54c <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d8c:	f899 2008 	ldrb.w	r2, [r9, #8]
 8009d90:	b13a      	cbz	r2, 8009da2 <tcp_input+0x37a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009d92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d9a:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d149      	bne.n	8009e36 <tcp_input+0x40e>
      if (pcb->remote_port == tcphdr->src &&
 8009da2:	6833      	ldr	r3, [r6, #0]
 8009da4:	f8b9 1018 	ldrh.w	r1, [r9, #24]
 8009da8:	881a      	ldrh	r2, [r3, #0]
 8009daa:	4291      	cmp	r1, r2
 8009dac:	d143      	bne.n	8009e36 <tcp_input+0x40e>
          pcb->local_port == tcphdr->dest &&
 8009dae:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8009db0:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d13e      	bne.n	8009e36 <tcp_input+0x40e>
          pcb->local_port == tcphdr->dest &&
 8009db8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8009dbc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009dc0:	4290      	cmp	r0, r2
 8009dc2:	d138      	bne.n	8009e36 <tcp_input+0x40e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009dc4:	f8d9 0000 	ldr.w	r0, [r9]
 8009dc8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8009dcc:	4290      	cmp	r0, r2
 8009dce:	d132      	bne.n	8009e36 <tcp_input+0x40e>
  if (flags & TCP_RST) {
 8009dd0:	4a37      	ldr	r2, [pc, #220]	@ (8009eb0 <tcp_input+0x488>)
 8009dd2:	7810      	ldrb	r0, [r2, #0]
 8009dd4:	0747      	lsls	r7, r0, #29
 8009dd6:	f53f af0b 	bmi.w	8009bf0 <tcp_input+0x1c8>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009dda:	4a37      	ldr	r2, [pc, #220]	@ (8009eb8 <tcp_input+0x490>)
  if (flags & TCP_SYN) {
 8009ddc:	0786      	lsls	r6, r0, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009dde:	8814      	ldrh	r4, [r2, #0]
  if (flags & TCP_SYN) {
 8009de0:	d516      	bpl.n	8009e10 <tcp_input+0x3e8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009de2:	f8db 2000 	ldr.w	r2, [fp]
 8009de6:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8009dea:	1a10      	subs	r0, r2, r0
 8009dec:	d416      	bmi.n	8009e1c <tcp_input+0x3f4>
 8009dee:	f8b9 6028 	ldrh.w	r6, [r9, #40]	@ 0x28
 8009df2:	1b80      	subs	r0, r0, r6
 8009df4:	2800      	cmp	r0, #0
 8009df6:	dc11      	bgt.n	8009e1c <tcp_input+0x3f4>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009df8:	4422      	add	r2, r4
 8009dfa:	4648      	mov	r0, r9
 8009dfc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009e00:	4b2f      	ldr	r3, [pc, #188]	@ (8009ec0 <tcp_input+0x498>)
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	3304      	adds	r3, #4
 8009e06:	f8da 1000 	ldr.w	r1, [sl]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e0a:	f001 f9e1 	bl	800b1d0 <tcp_rst>
 8009e0e:	e6ef      	b.n	8009bf0 <tcp_input+0x1c8>
  } else if (flags & TCP_FIN) {
 8009e10:	07c1      	lsls	r1, r0, #31
    pcb->tmr = tcp_ticks;
 8009e12:	bf42      	ittt	mi
 8009e14:	4b2b      	ldrmi	r3, [pc, #172]	@ (8009ec4 <tcp_input+0x49c>)
 8009e16:	681b      	ldrmi	r3, [r3, #0]
 8009e18:	f8c9 3020 	strmi.w	r3, [r9, #32]
  if ((tcplen > 0)) {
 8009e1c:	2c00      	cmp	r4, #0
 8009e1e:	f43f aee7 	beq.w	8009bf0 <tcp_input+0x1c8>
    tcp_ack_now(pcb);
 8009e22:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    tcp_output(pcb);
 8009e26:	4648      	mov	r0, r9
    tcp_ack_now(pcb);
 8009e28:	f043 0302 	orr.w	r3, r3, #2
 8009e2c:	f8a9 301a 	strh.w	r3, [r9, #26]
    tcp_output(pcb);
 8009e30:	f001 fa46 	bl	800b2c0 <tcp_output>
        pbuf_free(p);
 8009e34:	e6dc      	b.n	8009bf0 <tcp_input+0x1c8>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e36:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8009e3a:	e674      	b.n	8009b26 <tcp_input+0xfe>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009e3c:	7a20      	ldrb	r0, [r4, #8]
 8009e3e:	b128      	cbz	r0, 8009e4c <tcp_input+0x424>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009e40:	f89c 3030 	ldrb.w	r3, [ip, #48]	@ 0x30
 8009e44:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	4298      	cmp	r0, r3
 8009e4a:	d10a      	bne.n	8009e62 <tcp_input+0x43a>
      if (lpcb->local_port == tcphdr->dest) {
 8009e4c:	8ae0      	ldrh	r0, [r4, #22]
 8009e4e:	884b      	ldrh	r3, [r1, #2]
 8009e50:	4298      	cmp	r0, r3
 8009e52:	d106      	bne.n	8009e62 <tcp_input+0x43a>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	4573      	cmp	r3, lr
 8009e58:	f000 8336 	beq.w	800a4c8 <tcp_input+0xaa0>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 8333 	beq.w	800a4c8 <tcp_input+0xaa0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e62:	46a1      	mov	r9, r4
 8009e64:	68e4      	ldr	r4, [r4, #12]
 8009e66:	e66a      	b.n	8009b3e <tcp_input+0x116>
  } else if (flags & TCP_SYN) {
 8009e68:	079b      	lsls	r3, r3, #30
 8009e6a:	f57f aec1 	bpl.w	8009bf0 <tcp_input+0x1c8>
    npcb = tcp_alloc(pcb->prio);
 8009e6e:	7d60      	ldrb	r0, [r4, #21]
 8009e70:	f7fe fc06 	bl	8008680 <tcp_alloc>
    if (npcb == NULL) {
 8009e74:	4682      	mov	sl, r0
 8009e76:	bb58      	cbnz	r0, 8009ed0 <tcp_input+0x4a8>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009e78:	69a3      	ldr	r3, [r4, #24]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f43f aeb8 	beq.w	8009bf0 <tcp_input+0x1c8>
 8009e80:	4601      	mov	r1, r0
 8009e82:	f04f 32ff 	mov.w	r2, #4294967295
 8009e86:	6920      	ldr	r0, [r4, #16]
 8009e88:	4798      	blx	r3
 8009e8a:	e6b1      	b.n	8009bf0 <tcp_input+0x1c8>
 8009e8c:	0800facc 	.word	0x0800facc
 8009e90:	0800fcd6 	.word	0x0800fcd6
 8009e94:	0800e45a 	.word	0x0800e45a
 8009e98:	0800fcfd 	.word	0x0800fcfd
 8009e9c:	0800fd27 	.word	0x0800fd27
 8009ea0:	0800fd4e 	.word	0x0800fd4e
 8009ea4:	0800fd79 	.word	0x0800fd79
 8009ea8:	20037594 	.word	0x20037594
 8009eac:	20037578 	.word	0x20037578
 8009eb0:	20037575 	.word	0x20037575
 8009eb4:	2003756c 	.word	0x2003756c
 8009eb8:	20037576 	.word	0x20037576
 8009ebc:	0800fda3 	.word	0x0800fda3
 8009ec0:	2002ed64 	.word	0x2002ed64
 8009ec4:	20037568 	.word	0x20037568
 8009ec8:	20037570 	.word	0x20037570
 8009ecc:	20037574 	.word	0x20037574
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009ed0:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8009ed4:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009ed6:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009ed8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009edc:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8009ede:	8ae3      	ldrh	r3, [r4, #22]
 8009ee0:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8009ee2:	7813      	ldrb	r3, [r2, #0]
 8009ee4:	7852      	ldrb	r2, [r2, #1]
 8009ee6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009eea:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8009eec:	2303      	movs	r3, #3
 8009eee:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8009ef0:	f8db 3000 	ldr.w	r3, [fp]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	6243      	str	r3, [r0, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009ef8:	62c3      	str	r3, [r0, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8009efa:	f7fe f9e7 	bl	80082cc <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009efe:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 8009f02:	f8ca 0058 	str.w	r0, [sl, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009f06:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 8009f08:	f8ca 0050 	str.w	r0, [sl, #80]	@ 0x50
    npcb->lastack = iss;
 8009f0c:	f8ca 0044 	str.w	r0, [sl, #68]	@ 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009f10:	f8ca 3054 	str.w	r3, [sl, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009f14:	6923      	ldr	r3, [r4, #16]
    npcb->snd_lbb = iss;
 8009f16:	f8ca 005c 	str.w	r0, [sl, #92]	@ 0x5c
    npcb->listener = pcb;
 8009f1a:	f8ca 407c 	str.w	r4, [sl, #124]	@ 0x7c
    npcb->callback_arg = pcb->callback_arg;
 8009f1e:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009f22:	7a63      	ldrb	r3, [r4, #9]
 8009f24:	f003 030c 	and.w	r3, r3, #12
 8009f28:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009f2c:	7a23      	ldrb	r3, [r4, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009f2e:	f10a 0404 	add.w	r4, sl, #4
    npcb->netif_idx = pcb->netif_idx;
 8009f32:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	f8c7 a000 	str.w	sl, [r7]
 8009f3c:	f8ca 300c 	str.w	r3, [sl, #12]
 8009f40:	f001 fc94 	bl	800b86c <tcp_timer_needed>
 8009f44:	2201      	movs	r2, #1
 8009f46:	4ba3      	ldr	r3, [pc, #652]	@ (800a1d4 <tcp_input+0x7ac>)
    tcp_parseopt(npcb);
 8009f48:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 8009f4a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009f4c:	f7ff f880 	bl	8009050 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009f50:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009f52:	4620      	mov	r0, r4
 8009f54:	f8ba 6032 	ldrh.w	r6, [sl, #50]	@ 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8009f58:	89db      	ldrh	r3, [r3, #14]
 8009f5a:	f8aa 3060 	strh.w	r3, [sl, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009f5e:	f8aa 3062 	strh.w	r3, [sl, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009f62:	f002 fb49 	bl	800c5f8 <ip4_route>
 8009f66:	4622      	mov	r2, r4
 8009f68:	4601      	mov	r1, r0
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7fe f9c8 	bl	8008300 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009f70:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009f72:	f8aa 0032 	strh.w	r0, [sl, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009f76:	4650      	mov	r0, sl
 8009f78:	f000 ffae 	bl	800aed8 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8009f7c:	b120      	cbz	r0, 8009f88 <tcp_input+0x560>
      tcp_abandon(npcb, 0);
 8009f7e:	4649      	mov	r1, r9
 8009f80:	4650      	mov	r0, sl
 8009f82:	f7fe fa7d 	bl	8008480 <tcp_abandon>
      return;
 8009f86:	e633      	b.n	8009bf0 <tcp_input+0x1c8>
    tcp_output(npcb);
 8009f88:	4650      	mov	r0, sl
 8009f8a:	e751      	b.n	8009e30 <tcp_input+0x408>
  if (flags & TCP_RST) {
 8009f8c:	4b92      	ldr	r3, [pc, #584]	@ (800a1d8 <tcp_input+0x7b0>)
    tcp_input_pcb = pcb;
 8009f8e:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8009f90:	781a      	ldrb	r2, [r3, #0]
 8009f92:	0751      	lsls	r1, r2, #29
 8009f94:	d53c      	bpl.n	800a010 <tcp_input+0x5e8>
    if (pcb->state == SYN_SENT) {
 8009f96:	7d21      	ldrb	r1, [r4, #20]
 8009f98:	2902      	cmp	r1, #2
 8009f9a:	d122      	bne.n	8009fe2 <tcp_input+0x5ba>
      if (ackno == pcb->snd_nxt) {
 8009f9c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8009f9e:	f8da 3000 	ldr.w	r3, [sl]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d109      	bne.n	8009fba <tcp_input+0x592>
      recv_flags |= TF_RESET;
 8009fa6:	f898 3000 	ldrb.w	r3, [r8]
 8009faa:	f043 0308 	orr.w	r3, r3, #8
 8009fae:	f888 3000 	strb.w	r3, [r8]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009fb2:	8b63      	ldrh	r3, [r4, #26]
 8009fb4:	f023 0301 	bic.w	r3, r3, #1
 8009fb8:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8009fba:	f898 3000 	ldrb.w	r3, [r8]
 8009fbe:	0719      	lsls	r1, r3, #28
 8009fc0:	f140 8203 	bpl.w	800a3ca <tcp_input+0x9a2>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009fc4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009fc8:	b11b      	cbz	r3, 8009fd2 <tcp_input+0x5aa>
 8009fca:	f06f 010d 	mvn.w	r1, #13
 8009fce:	6920      	ldr	r0, [r4, #16]
 8009fd0:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	4881      	ldr	r0, [pc, #516]	@ (800a1dc <tcp_input+0x7b4>)
 8009fd6:	f7fe f9ed 	bl	80083b4 <tcp_pcb_remove>
        tcp_free(pcb);
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f7fd ff7e 	bl	8007edc <tcp_free>
 8009fe0:	e6b9      	b.n	8009d56 <tcp_input+0x32e>
      if (seqno == pcb->rcv_nxt) {
 8009fe2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009fe4:	f8db 3000 	ldr.w	r3, [fp]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d007      	beq.n	8009ffc <tcp_input+0x5d4>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009fec:	1a9b      	subs	r3, r3, r2
 8009fee:	d4e4      	bmi.n	8009fba <tcp_input+0x592>
 8009ff0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8009ff2:	1a9b      	subs	r3, r3, r2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dce0      	bgt.n	8009fba <tcp_input+0x592>
        tcp_ack_now(pcb);
 8009ff8:	8b63      	ldrh	r3, [r4, #26]
 8009ffa:	e010      	b.n	800a01e <tcp_input+0x5f6>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	d1d2      	bne.n	8009fa6 <tcp_input+0x57e>
 800a000:	4b77      	ldr	r3, [pc, #476]	@ (800a1e0 <tcp_input+0x7b8>)
 800a002:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a006:	4977      	ldr	r1, [pc, #476]	@ (800a1e4 <tcp_input+0x7bc>)
 800a008:	4877      	ldr	r0, [pc, #476]	@ (800a1e8 <tcp_input+0x7c0>)
 800a00a:	f003 fa9f 	bl	800d54c <iprintf>
 800a00e:	e7ca      	b.n	8009fa6 <tcp_input+0x57e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a010:	0792      	lsls	r2, r2, #30
        tcp_ack_now(pcb);
 800a012:	8b63      	ldrh	r3, [r4, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a014:	d506      	bpl.n	800a024 <tcp_input+0x5fc>
 800a016:	7d22      	ldrb	r2, [r4, #20]
 800a018:	3a02      	subs	r2, #2
 800a01a:	2a01      	cmp	r2, #1
 800a01c:	d902      	bls.n	800a024 <tcp_input+0x5fc>
        tcp_ack_now(pcb);
 800a01e:	f043 0302 	orr.w	r3, r3, #2
 800a022:	e7c9      	b.n	8009fb8 <tcp_input+0x590>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a024:	06d8      	lsls	r0, r3, #27
  tcp_parseopt(pcb);
 800a026:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800a028:	bf5e      	ittt	pl
 800a02a:	4b70      	ldrpl	r3, [pc, #448]	@ (800a1ec <tcp_input+0x7c4>)
 800a02c:	681b      	ldrpl	r3, [r3, #0]
 800a02e:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800a030:	2300      	movs	r3, #0
 800a032:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
  tcp_parseopt(pcb);
 800a036:	f7ff f80b 	bl	8009050 <tcp_parseopt>
  switch (pcb->state) {
 800a03a:	7d23      	ldrb	r3, [r4, #20]
 800a03c:	3b02      	subs	r3, #2
 800a03e:	2b07      	cmp	r3, #7
 800a040:	d8bb      	bhi.n	8009fba <tcp_input+0x592>
 800a042:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a046:	0008      	.short	0x0008
 800a048:	0125009a 	.word	0x0125009a
 800a04c:	01710129 	.word	0x01710129
 800a050:	018a0125 	.word	0x018a0125
 800a054:	01a9      	.short	0x01a9
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a056:	4b60      	ldr	r3, [pc, #384]	@ (800a1d8 <tcp_input+0x7b0>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	f003 0212 	and.w	r2, r3, #18
 800a05e:	2a12      	cmp	r2, #18
 800a060:	d16b      	bne.n	800a13a <tcp_input+0x712>
          && (ackno == pcb->lastack + 1)) {
 800a062:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a064:	f8da 1000 	ldr.w	r1, [sl]
 800a068:	3201      	adds	r2, #1
 800a06a:	428a      	cmp	r2, r1
 800a06c:	d165      	bne.n	800a13a <tcp_input+0x712>
        pcb->rcv_nxt = seqno + 1;
 800a06e:	f8db 3000 	ldr.w	r3, [fp]
        pcb->lastack = ackno;
 800a072:	6462      	str	r2, [r4, #68]	@ 0x44
        pcb->rcv_nxt = seqno + 1;
 800a074:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800a076:	6832      	ldr	r2, [r6, #0]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a078:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a07a:	8e67      	ldrh	r7, [r4, #50]	@ 0x32
        pcb->rcv_nxt = seqno + 1;
 800a07c:	6261      	str	r1, [r4, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a07e:	62e1      	str	r1, [r4, #44]	@ 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800a080:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a082:	6563      	str	r3, [r4, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a084:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800a086:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a08a:	18e6      	adds	r6, r4, r3
        pcb->state = ESTABLISHED;
 800a08c:	7523      	strb	r3, [r4, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a08e:	f8a4 2062 	strh.w	r2, [r4, #98]	@ 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a092:	4630      	mov	r0, r6
 800a094:	f002 fab0 	bl	800c5f8 <ip4_route>
 800a098:	4632      	mov	r2, r6
 800a09a:	4601      	mov	r1, r0
 800a09c:	4638      	mov	r0, r7
 800a09e:	f7fe f92f 	bl	8008300 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a0a2:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a0a6:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a0a8:	8660      	strh	r0, [r4, #50]	@ 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a0aa:	0081      	lsls	r1, r0, #2
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	4616      	mov	r6, r2
 800a0b0:	bf38      	it	cc
 800a0b2:	461e      	movcc	r6, r3
 800a0b4:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800a0b8:	d933      	bls.n	800a122 <tcp_input+0x6fa>
 800a0ba:	b28b      	uxth	r3, r1
 800a0bc:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a0c0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800a0c4:	b933      	cbnz	r3, 800a0d4 <tcp_input+0x6ac>
 800a0c6:	4b46      	ldr	r3, [pc, #280]	@ (800a1e0 <tcp_input+0x7b8>)
 800a0c8:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a0cc:	4948      	ldr	r1, [pc, #288]	@ (800a1f0 <tcp_input+0x7c8>)
 800a0ce:	4846      	ldr	r0, [pc, #280]	@ (800a1e8 <tcp_input+0x7c0>)
 800a0d0:	f003 fa3c 	bl	800d54c <iprintf>
        --pcb->snd_queuelen;
 800a0d4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
        rseg = pcb->unacked;
 800a0d8:	6f26      	ldr	r6, [r4, #112]	@ 0x70
        --pcb->snd_queuelen;
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
        if (rseg == NULL) {
 800a0e0:	bb1e      	cbnz	r6, 800a12a <tcp_input+0x702>
          rseg = pcb->unsent;
 800a0e2:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a0e4:	b936      	cbnz	r6, 800a0f4 <tcp_input+0x6cc>
 800a0e6:	4b3e      	ldr	r3, [pc, #248]	@ (800a1e0 <tcp_input+0x7b8>)
 800a0e8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a0ec:	4941      	ldr	r1, [pc, #260]	@ (800a1f4 <tcp_input+0x7cc>)
 800a0ee:	483e      	ldr	r0, [pc, #248]	@ (800a1e8 <tcp_input+0x7c0>)
 800a0f0:	f003 fa2c 	bl	800d54c <iprintf>
          pcb->unsent = rseg->next;
 800a0f4:	6833      	ldr	r3, [r6, #0]
 800a0f6:	66e3      	str	r3, [r4, #108]	@ 0x6c
        tcp_seg_free(rseg);
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7fe f837 	bl	800816c <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800a0fe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a100:	b9b3      	cbnz	r3, 800a130 <tcp_input+0x708>
          pcb->rtime = -1;
 800a102:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a106:	8623      	strh	r3, [r4, #48]	@ 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a108:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f43f af73 	beq.w	8009ff8 <tcp_input+0x5d0>
 800a112:	2200      	movs	r2, #0
 800a114:	4621      	mov	r1, r4
 800a116:	6920      	ldr	r0, [r4, #16]
 800a118:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800a11a:	300d      	adds	r0, #13
 800a11c:	f47f af6c 	bne.w	8009ff8 <tcp_input+0x5d0>
 800a120:	e619      	b.n	8009d56 <tcp_input+0x32e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a122:	429a      	cmp	r2, r3
 800a124:	bf88      	it	hi
 800a126:	b293      	uxthhi	r3, r2
 800a128:	e7c8      	b.n	800a0bc <tcp_input+0x694>
          pcb->unacked = rseg->next;
 800a12a:	6833      	ldr	r3, [r6, #0]
 800a12c:	6723      	str	r3, [r4, #112]	@ 0x70
 800a12e:	e7e3      	b.n	800a0f8 <tcp_input+0x6d0>
          pcb->rtime = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	8623      	strh	r3, [r4, #48]	@ 0x30
          pcb->nrtx = 0;
 800a134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a138:	e7e6      	b.n	800a108 <tcp_input+0x6e0>
      else if (flags & TCP_ACK) {
 800a13a:	06d9      	lsls	r1, r3, #27
 800a13c:	f57f af3d 	bpl.w	8009fba <tcp_input+0x592>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a140:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a142:	4a2d      	ldr	r2, [pc, #180]	@ (800a1f8 <tcp_input+0x7d0>)
 800a144:	8818      	ldrh	r0, [r3, #0]
 800a146:	8811      	ldrh	r1, [r2, #0]
 800a148:	f8db 2000 	ldr.w	r2, [fp]
 800a14c:	9002      	str	r0, [sp, #8]
 800a14e:	4620      	mov	r0, r4
 800a150:	885b      	ldrh	r3, [r3, #2]
 800a152:	440a      	add	r2, r1
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	4b29      	ldr	r3, [pc, #164]	@ (800a1fc <tcp_input+0x7d4>)
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	3304      	adds	r3, #4
 800a15c:	f8da 1000 	ldr.w	r1, [sl]
 800a160:	f001 f836 	bl	800b1d0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a164:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800a168:	2b05      	cmp	r3, #5
 800a16a:	f63f af26 	bhi.w	8009fba <tcp_input+0x592>
          pcb->rtime = 0;
 800a16e:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800a170:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800a172:	8623      	strh	r3, [r4, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a174:	f001 fa6a 	bl	800b64c <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800a178:	e71f      	b.n	8009fba <tcp_input+0x592>
      if (flags & TCP_ACK) {
 800a17a:	4b17      	ldr	r3, [pc, #92]	@ (800a1d8 <tcp_input+0x7b0>)
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	06da      	lsls	r2, r3, #27
 800a180:	d578      	bpl.n	800a274 <tcp_input+0x84c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a182:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a184:	f8da 1000 	ldr.w	r1, [sl]
 800a188:	43db      	mvns	r3, r3
 800a18a:	42cb      	cmn	r3, r1
 800a18c:	d461      	bmi.n	800a252 <tcp_input+0x82a>
 800a18e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a190:	1acb      	subs	r3, r1, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	dc5d      	bgt.n	800a252 <tcp_input+0x82a>
          pcb->state = ESTABLISHED;
 800a196:	2304      	movs	r3, #4
 800a198:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800a19a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800a19c:	b91b      	cbnz	r3, 800a1a6 <tcp_input+0x77e>
            tcp_abort(pcb);
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f7fe f9f4 	bl	800858c <tcp_abort>
            goto aborted;
 800a1a4:	e5d7      	b.n	8009d56 <tcp_input+0x32e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	b933      	cbnz	r3, 800a1b8 <tcp_input+0x790>
 800a1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e0 <tcp_input+0x7b8>)
 800a1ac:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a1b0:	4913      	ldr	r1, [pc, #76]	@ (800a200 <tcp_input+0x7d8>)
 800a1b2:	480d      	ldr	r0, [pc, #52]	@ (800a1e8 <tcp_input+0x7c0>)
 800a1b4:	f003 f9ca 	bl	800d54c <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a1b8:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d0ee      	beq.n	800a19e <tcp_input+0x776>
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	6920      	ldr	r0, [r4, #16]
 800a1c6:	4798      	blx	r3
          if (err != ERR_OK) {
 800a1c8:	b1e0      	cbz	r0, 800a204 <tcp_input+0x7dc>
            if (err != ERR_ABRT) {
 800a1ca:	300d      	adds	r0, #13
 800a1cc:	f43f adc3 	beq.w	8009d56 <tcp_input+0x32e>
 800a1d0:	e7e5      	b.n	800a19e <tcp_input+0x776>
 800a1d2:	bf00      	nop
 800a1d4:	20037557 	.word	0x20037557
 800a1d8:	20037575 	.word	0x20037575
 800a1dc:	2003755c 	.word	0x2003755c
 800a1e0:	0800facc 	.word	0x0800facc
 800a1e4:	0800fdd0 	.word	0x0800fdd0
 800a1e8:	0800e45a 	.word	0x0800e45a
 800a1ec:	20037568 	.word	0x20037568
 800a1f0:	0800fdf0 	.word	0x0800fdf0
 800a1f4:	0800fe06 	.word	0x0800fe06
 800a1f8:	20037576 	.word	0x20037576
 800a1fc:	2002ed64 	.word	0x2002ed64
 800a200:	0800fe19 	.word	0x0800fe19
          tcp_receive(pcb);
 800a204:	4620      	mov	r0, r4
 800a206:	f7fe ffeb 	bl	80091e0 <tcp_receive>
          if (recv_acked != 0) {
 800a20a:	4a9a      	ldr	r2, [pc, #616]	@ (800a474 <tcp_input+0xa4c>)
 800a20c:	8813      	ldrh	r3, [r2, #0]
 800a20e:	b10b      	cbz	r3, 800a214 <tcp_input+0x7ec>
            recv_acked--;
 800a210:	3b01      	subs	r3, #1
 800a212:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a214:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 800a216:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a21a:	004a      	lsls	r2, r1, #1
 800a21c:	0088      	lsls	r0, r1, #2
 800a21e:	429a      	cmp	r2, r3
 800a220:	4616      	mov	r6, r2
 800a222:	bf38      	it	cc
 800a224:	461e      	movcc	r6, r3
 800a226:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800a22a:	d90e      	bls.n	800a24a <tcp_input+0x822>
 800a22c:	b283      	uxth	r3, r0
 800a22e:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a232:	f898 3000 	ldrb.w	r3, [r8]
 800a236:	069e      	lsls	r6, r3, #26
 800a238:	f57f aebf 	bpl.w	8009fba <tcp_input+0x592>
        tcp_ack_now(pcb);
 800a23c:	8b63      	ldrh	r3, [r4, #26]
 800a23e:	f043 0302 	orr.w	r3, r3, #2
 800a242:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800a244:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800a246:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800a248:	e6b7      	b.n	8009fba <tcp_input+0x592>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a24a:	429a      	cmp	r2, r3
 800a24c:	bf88      	it	hi
 800a24e:	b293      	uxthhi	r3, r2
 800a250:	e7ed      	b.n	800a22e <tcp_input+0x806>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a252:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a254:	4a88      	ldr	r2, [pc, #544]	@ (800a478 <tcp_input+0xa50>)
 800a256:	881e      	ldrh	r6, [r3, #0]
 800a258:	8810      	ldrh	r0, [r2, #0]
 800a25a:	f8db 2000 	ldr.w	r2, [fp]
 800a25e:	9602      	str	r6, [sp, #8]
 800a260:	885b      	ldrh	r3, [r3, #2]
 800a262:	4402      	add	r2, r0
 800a264:	4620      	mov	r0, r4
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	4b84      	ldr	r3, [pc, #528]	@ (800a47c <tcp_input+0xa54>)
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	3304      	adds	r3, #4
 800a26e:	f000 ffaf 	bl	800b1d0 <tcp_rst>
    if (err != ERR_ABRT) {
 800a272:	e6a2      	b.n	8009fba <tcp_input+0x592>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a274:	079f      	lsls	r7, r3, #30
 800a276:	f57f aea0 	bpl.w	8009fba <tcp_input+0x592>
 800a27a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a27c:	f8db 2000 	ldr.w	r2, [fp]
 800a280:	3b01      	subs	r3, #1
 800a282:	4293      	cmp	r3, r2
 800a284:	f47f ae99 	bne.w	8009fba <tcp_input+0x592>
        tcp_rexmit(pcb);
 800a288:	4620      	mov	r0, r4
 800a28a:	f000 ff2d 	bl	800b0e8 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800a28e:	e694      	b.n	8009fba <tcp_input+0x592>
      tcp_receive(pcb);
 800a290:	4620      	mov	r0, r4
 800a292:	f7fe ffa5 	bl	80091e0 <tcp_receive>
 800a296:	e7cc      	b.n	800a232 <tcp_input+0x80a>
      tcp_receive(pcb);
 800a298:	4620      	mov	r0, r4
 800a29a:	f7fe ffa1 	bl	80091e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a29e:	f898 3000 	ldrb.w	r3, [r8]
 800a2a2:	0698      	lsls	r0, r3, #26
 800a2a4:	d52f      	bpl.n	800a306 <tcp_input+0x8de>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a2a6:	4a76      	ldr	r2, [pc, #472]	@ (800a480 <tcp_input+0xa58>)
          tcp_ack_now(pcb);
 800a2a8:	8b63      	ldrh	r3, [r4, #26]
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a2aa:	7812      	ldrb	r2, [r2, #0]
          tcp_ack_now(pcb);
 800a2ac:	f043 0302 	orr.w	r3, r3, #2
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a2b0:	06d1      	lsls	r1, r2, #27
 800a2b2:	d525      	bpl.n	800a300 <tcp_input+0x8d8>
 800a2b4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800a2b6:	f8da 2000 	ldr.w	r2, [sl]
 800a2ba:	4291      	cmp	r1, r2
 800a2bc:	d120      	bne.n	800a300 <tcp_input+0x8d8>
 800a2be:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800a2c0:	b9f2      	cbnz	r2, 800a300 <tcp_input+0x8d8>
          tcp_ack_now(pcb);
 800a2c2:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f7fe f843 	bl	8008350 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	429c      	cmp	r4, r3
 800a2ce:	d109      	bne.n	800a2e4 <tcp_input+0x8bc>
        TCP_RMV_ACTIVE(pcb);
 800a2d0:	68e3      	ldr	r3, [r4, #12]
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	e008      	b.n	800a2e8 <tcp_input+0x8c0>
          TCP_RMV_ACTIVE(pcb);
 800a2d6:	68da      	ldr	r2, [r3, #12]
 800a2d8:	4294      	cmp	r4, r2
 800a2da:	d102      	bne.n	800a2e2 <tcp_input+0x8ba>
        TCP_RMV_ACTIVE(pcb);
 800a2dc:	68e2      	ldr	r2, [r4, #12]
 800a2de:	60da      	str	r2, [r3, #12]
 800a2e0:	e002      	b.n	800a2e8 <tcp_input+0x8c0>
 800a2e2:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1f6      	bne.n	800a2d6 <tcp_input+0x8ae>
        TCP_RMV_ACTIVE(pcb);
 800a2e8:	4b66      	ldr	r3, [pc, #408]	@ (800a484 <tcp_input+0xa5c>)
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a2ee:	230a      	movs	r3, #10
 800a2f0:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a2f2:	4b65      	ldr	r3, [pc, #404]	@ (800a488 <tcp_input+0xa60>)
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	601c      	str	r4, [r3, #0]
 800a2f8:	60e2      	str	r2, [r4, #12]
 800a2fa:	f001 fab7 	bl	800b86c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800a2fe:	e65c      	b.n	8009fba <tcp_input+0x592>
          tcp_ack_now(pcb);
 800a300:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800a302:	2308      	movs	r3, #8
 800a304:	e79f      	b.n	800a246 <tcp_input+0x81e>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a306:	4b5e      	ldr	r3, [pc, #376]	@ (800a480 <tcp_input+0xa58>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	06da      	lsls	r2, r3, #27
 800a30c:	f57f ae55 	bpl.w	8009fba <tcp_input+0x592>
 800a310:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800a312:	f8da 3000 	ldr.w	r3, [sl]
 800a316:	429a      	cmp	r2, r3
 800a318:	f47f ae4f 	bne.w	8009fba <tcp_input+0x592>
 800a31c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f47f ae4b 	bne.w	8009fba <tcp_input+0x592>
        pcb->state = FIN_WAIT_2;
 800a324:	2306      	movs	r3, #6
 800a326:	e78e      	b.n	800a246 <tcp_input+0x81e>
      tcp_receive(pcb);
 800a328:	4620      	mov	r0, r4
 800a32a:	f7fe ff59 	bl	80091e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a32e:	f898 3000 	ldrb.w	r3, [r8]
 800a332:	069b      	lsls	r3, r3, #26
 800a334:	f57f ae41 	bpl.w	8009fba <tcp_input+0x592>
        tcp_ack_now(pcb);
 800a338:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800a33a:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800a33c:	f043 0302 	orr.w	r3, r3, #2
 800a340:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800a342:	f7fe f805 	bl	8008350 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	429c      	cmp	r4, r3
 800a34a:	d0c1      	beq.n	800a2d0 <tcp_input+0x8a8>
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d0cb      	beq.n	800a2e8 <tcp_input+0x8c0>
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	4294      	cmp	r4, r2
 800a354:	d0c2      	beq.n	800a2dc <tcp_input+0x8b4>
 800a356:	4613      	mov	r3, r2
 800a358:	e7f8      	b.n	800a34c <tcp_input+0x924>
      tcp_receive(pcb);
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7fe ff40 	bl	80091e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a360:	4b47      	ldr	r3, [pc, #284]	@ (800a480 <tcp_input+0xa58>)
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	06de      	lsls	r6, r3, #27
 800a366:	f57f ae28 	bpl.w	8009fba <tcp_input+0x592>
 800a36a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800a36c:	f8da 3000 	ldr.w	r3, [sl]
 800a370:	429a      	cmp	r2, r3
 800a372:	f47f ae22 	bne.w	8009fba <tcp_input+0x592>
 800a376:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f47f ae1e 	bne.w	8009fba <tcp_input+0x592>
        tcp_pcb_purge(pcb);
 800a37e:	4620      	mov	r0, r4
 800a380:	f7fd ffe6 	bl	8008350 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	429c      	cmp	r4, r3
 800a388:	d0a2      	beq.n	800a2d0 <tcp_input+0x8a8>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0ac      	beq.n	800a2e8 <tcp_input+0x8c0>
 800a38e:	68da      	ldr	r2, [r3, #12]
 800a390:	4294      	cmp	r4, r2
 800a392:	d0a3      	beq.n	800a2dc <tcp_input+0x8b4>
 800a394:	4613      	mov	r3, r2
 800a396:	e7f8      	b.n	800a38a <tcp_input+0x962>
      tcp_receive(pcb);
 800a398:	4620      	mov	r0, r4
 800a39a:	f7fe ff21 	bl	80091e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a39e:	4b38      	ldr	r3, [pc, #224]	@ (800a480 <tcp_input+0xa58>)
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	06d8      	lsls	r0, r3, #27
 800a3a4:	f57f ae09 	bpl.w	8009fba <tcp_input+0x592>
 800a3a8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800a3aa:	f8da 2000 	ldr.w	r2, [sl]
        recv_flags |= TF_CLOSED;
 800a3ae:	f898 3000 	ldrb.w	r3, [r8]
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a3b2:	4291      	cmp	r1, r2
 800a3b4:	f47f ae01 	bne.w	8009fba <tcp_input+0x592>
 800a3b8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800a3ba:	2a00      	cmp	r2, #0
 800a3bc:	f47f adfd 	bne.w	8009fba <tcp_input+0x592>
        recv_flags |= TF_CLOSED;
 800a3c0:	f043 0310 	orr.w	r3, r3, #16
 800a3c4:	f888 3000 	strb.w	r3, [r8]
    if (err != ERR_ABRT) {
 800a3c8:	e5f7      	b.n	8009fba <tcp_input+0x592>
        if (recv_acked > 0) {
 800a3ca:	4b2a      	ldr	r3, [pc, #168]	@ (800a474 <tcp_input+0xa4c>)
 800a3cc:	881a      	ldrh	r2, [r3, #0]
 800a3ce:	b12a      	cbz	r2, 800a3dc <tcp_input+0x9b4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a3d0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a3d4:	b9f3      	cbnz	r3, 800a414 <tcp_input+0x9ec>
          recv_acked = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	4a26      	ldr	r2, [pc, #152]	@ (800a474 <tcp_input+0xa4c>)
 800a3da:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f7fe fe81 	bl	80090e4 <tcp_input_delayed_close>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	f47f acb7 	bne.w	8009d56 <tcp_input+0x32e>
        if (recv_data != NULL) {
 800a3e8:	f8d9 3000 	ldr.w	r3, [r9]
 800a3ec:	b333      	cbz	r3, 800a43c <tcp_input+0xa14>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a3ee:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800a3f0:	b133      	cbz	r3, 800a400 <tcp_input+0x9d8>
 800a3f2:	4b26      	ldr	r3, [pc, #152]	@ (800a48c <tcp_input+0xa64>)
 800a3f4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a3f8:	4925      	ldr	r1, [pc, #148]	@ (800a490 <tcp_input+0xa68>)
 800a3fa:	4826      	ldr	r0, [pc, #152]	@ (800a494 <tcp_input+0xa6c>)
 800a3fc:	f003 f8a6 	bl	800d54c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a400:	8b63      	ldrh	r3, [r4, #26]
            pbuf_free(recv_data);
 800a402:	f8d9 2000 	ldr.w	r2, [r9]
          if (pcb->flags & TF_RXCLOSED) {
 800a406:	f013 0310 	ands.w	r3, r3, #16
 800a40a:	d009      	beq.n	800a420 <tcp_input+0x9f8>
            pbuf_free(recv_data);
 800a40c:	4610      	mov	r0, r2
 800a40e:	f7fd fa6f 	bl	80078f0 <pbuf_free>
 800a412:	e6c4      	b.n	800a19e <tcp_input+0x776>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a414:	4621      	mov	r1, r4
 800a416:	6920      	ldr	r0, [r4, #16]
 800a418:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800a41a:	300d      	adds	r0, #13
 800a41c:	d1db      	bne.n	800a3d6 <tcp_input+0x9ae>
 800a41e:	e49a      	b.n	8009d56 <tcp_input+0x32e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a420:	f8d4 6084 	ldr.w	r6, [r4, #132]	@ 0x84
 800a424:	b306      	cbz	r6, 800a468 <tcp_input+0xa40>
 800a426:	4621      	mov	r1, r4
 800a428:	6920      	ldr	r0, [r4, #16]
 800a42a:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800a42c:	f110 0f0d 	cmn.w	r0, #13
 800a430:	f43f ac91 	beq.w	8009d56 <tcp_input+0x32e>
          if (err != ERR_OK) {
 800a434:	b110      	cbz	r0, 800a43c <tcp_input+0xa14>
            pcb->refused_data = recv_data;
 800a436:	f8d9 3000 	ldr.w	r3, [r9]
 800a43a:	67a3      	str	r3, [r4, #120]	@ 0x78
        if (recv_flags & TF_GOT_FIN) {
 800a43c:	f898 3000 	ldrb.w	r3, [r8]
 800a440:	069a      	lsls	r2, r3, #26
 800a442:	d505      	bpl.n	800a450 <tcp_input+0xa28>
          if (pcb->refused_data != NULL) {
 800a444:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800a446:	b33b      	cbz	r3, 800a498 <tcp_input+0xa70>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a448:	7b5a      	ldrb	r2, [r3, #13]
 800a44a:	f042 0220 	orr.w	r2, r2, #32
 800a44e:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800a450:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800a452:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800a454:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a456:	f7fe fe45 	bl	80090e4 <tcp_input_delayed_close>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	f47f ac7b 	bne.w	8009d56 <tcp_input+0x32e>
        tcp_output(pcb);
 800a460:	4620      	mov	r0, r4
 800a462:	f000 ff2d 	bl	800b2c0 <tcp_output>
 800a466:	e476      	b.n	8009d56 <tcp_input+0x32e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a468:	4633      	mov	r3, r6
 800a46a:	4621      	mov	r1, r4
 800a46c:	4630      	mov	r0, r6
 800a46e:	f7fe fa75 	bl	800895c <tcp_recv_null>
 800a472:	e7db      	b.n	800a42c <tcp_input+0xa04>
 800a474:	20037578 	.word	0x20037578
 800a478:	20037576 	.word	0x20037576
 800a47c:	2002ed64 	.word	0x2002ed64
 800a480:	20037575 	.word	0x20037575
 800a484:	20037557 	.word	0x20037557
 800a488:	20037558 	.word	0x20037558
 800a48c:	0800facc 	.word	0x0800facc
 800a490:	0800fe37 	.word	0x0800fe37
 800a494:	0800e45a 	.word	0x0800e45a
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a498:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800a49a:	f241 6248 	movw	r2, #5704	@ 0x1648
            TCP_EVENT_CLOSED(pcb, err);
 800a49e:	f8d4 6084 	ldr.w	r6, [r4, #132]	@ 0x84
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a4a2:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800a4a4:	bf1c      	itt	ne
 800a4a6:	3301      	addne	r3, #1
 800a4a8:	8523      	strhne	r3, [r4, #40]	@ 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800a4aa:	2e00      	cmp	r6, #0
 800a4ac:	d0d0      	beq.n	800a450 <tcp_input+0xa28>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	6920      	ldr	r0, [r4, #16]
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800a4b8:	300d      	adds	r0, #13
 800a4ba:	d1c9      	bne.n	800a450 <tcp_input+0xa28>
 800a4bc:	e44b      	b.n	8009d56 <tcp_input+0x32e>
      if (prev != NULL) {
 800a4be:	f1b9 0f00 	cmp.w	r9, #0
 800a4c2:	f47f ac06 	bne.w	8009cd2 <tcp_input+0x2aa>
 800a4c6:	e414      	b.n	8009cf2 <tcp_input+0x2ca>
      if (prev != NULL) {
 800a4c8:	f1b9 0f00 	cmp.w	r9, #0
 800a4cc:	d005      	beq.n	800a4da <tcp_input+0xab2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a4ce:	68e3      	ldr	r3, [r4, #12]
 800a4d0:	f8c9 300c 	str.w	r3, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a4d4:	4b0d      	ldr	r3, [pc, #52]	@ (800a50c <tcp_input+0xae4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a4d6:	60e2      	str	r2, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a4d8:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800a4da:	4b0d      	ldr	r3, [pc, #52]	@ (800a510 <tcp_input+0xae8>)
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	075a      	lsls	r2, r3, #29
 800a4e0:	f53f ab86 	bmi.w	8009bf0 <tcp_input+0x1c8>
  if (flags & TCP_ACK) {
 800a4e4:	f013 0910 	ands.w	r9, r3, #16
 800a4e8:	f43f acbe 	beq.w	8009e68 <tcp_input+0x440>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4ec:	4b09      	ldr	r3, [pc, #36]	@ (800a514 <tcp_input+0xaec>)
 800a4ee:	f8db 2000 	ldr.w	r2, [fp]
 800a4f2:	8818      	ldrh	r0, [r3, #0]
 800a4f4:	880b      	ldrh	r3, [r1, #0]
 800a4f6:	4402      	add	r2, r0
 800a4f8:	9302      	str	r3, [sp, #8]
 800a4fa:	884b      	ldrh	r3, [r1, #2]
 800a4fc:	9301      	str	r3, [sp, #4]
 800a4fe:	4b06      	ldr	r3, [pc, #24]	@ (800a518 <tcp_input+0xaf0>)
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	3304      	adds	r3, #4
 800a504:	f8da 1000 	ldr.w	r1, [sl]
 800a508:	4620      	mov	r0, r4
 800a50a:	e47e      	b.n	8009e0a <tcp_input+0x3e2>
 800a50c:	20037560 	.word	0x20037560
 800a510:	20037575 	.word	0x20037575
 800a514:	20037576 	.word	0x20037576
 800a518:	2002ed64 	.word	0x2002ed64

0800a51c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800a51c:	4a02      	ldr	r2, [pc, #8]	@ (800a528 <tcp_trigger_input_pcb_close+0xc>)
 800a51e:	7813      	ldrb	r3, [r2, #0]
 800a520:	f043 0310 	orr.w	r3, r3, #16
 800a524:	7013      	strb	r3, [r2, #0]
}
 800a526:	4770      	bx	lr
 800a528:	20037574 	.word	0x20037574

0800a52c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a52c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a52e:	4604      	mov	r4, r0
 800a530:	b930      	cbnz	r0, 800a540 <tcp_output_segment_busy+0x14>
 800a532:	4b06      	ldr	r3, [pc, #24]	@ (800a54c <tcp_output_segment_busy+0x20>)
 800a534:	f240 529a 	movw	r2, #1434	@ 0x59a
 800a538:	4905      	ldr	r1, [pc, #20]	@ (800a550 <tcp_output_segment_busy+0x24>)
 800a53a:	4806      	ldr	r0, [pc, #24]	@ (800a554 <tcp_output_segment_busy+0x28>)
 800a53c:	f003 f806 	bl	800d54c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a540:	6863      	ldr	r3, [r4, #4]
 800a542:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800a544:	3801      	subs	r0, #1
 800a546:	bf18      	it	ne
 800a548:	2001      	movne	r0, #1
 800a54a:	bd10      	pop	{r4, pc}
 800a54c:	0800fe51 	.word	0x0800fe51
 800a550:	0800fe84 	.word	0x0800fe84
 800a554:	0800e45a 	.word	0x0800e45a

0800a558 <tcp_pbuf_prealloc>:
{
 800a558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a55c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a560:	4607      	mov	r7, r0
 800a562:	460c      	mov	r4, r1
 800a564:	4615      	mov	r5, r2
 800a566:	461e      	mov	r6, r3
 800a568:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a56c:	f1b8 0f00 	cmp.w	r8, #0
 800a570:	d105      	bne.n	800a57e <tcp_pbuf_prealloc+0x26>
 800a572:	4b1d      	ldr	r3, [pc, #116]	@ (800a5e8 <tcp_pbuf_prealloc+0x90>)
 800a574:	22e9      	movs	r2, #233	@ 0xe9
 800a576:	491d      	ldr	r1, [pc, #116]	@ (800a5ec <tcp_pbuf_prealloc+0x94>)
 800a578:	481d      	ldr	r0, [pc, #116]	@ (800a5f0 <tcp_pbuf_prealloc+0x98>)
 800a57a:	f002 ffe7 	bl	800d54c <iprintf>
  if (length < max_length) {
 800a57e:	42ac      	cmp	r4, r5
 800a580:	d230      	bcs.n	800a5e4 <tcp_pbuf_prealloc+0x8c>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a582:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a586:	079a      	lsls	r2, r3, #30
 800a588:	d40c      	bmi.n	800a5a4 <tcp_pbuf_prealloc+0x4c>
 800a58a:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800a58e:	065b      	lsls	r3, r3, #25
 800a590:	d428      	bmi.n	800a5e4 <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
 800a592:	f1b9 0f00 	cmp.w	r9, #0
 800a596:	d005      	beq.n	800a5a4 <tcp_pbuf_prealloc+0x4c>
         (!first_seg ||
 800a598:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800a59c:	b913      	cbnz	r3, 800a5a4 <tcp_pbuf_prealloc+0x4c>
          pcb->unsent != NULL ||
 800a59e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a5a2:	b1fb      	cbz	r3, 800a5e4 <tcp_pbuf_prealloc+0x8c>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a5a4:	f204 5195 	addw	r1, r4, #1429	@ 0x595
 800a5a8:	f021 0103 	bic.w	r1, r1, #3
 800a5ac:	42a9      	cmp	r1, r5
 800a5ae:	bf28      	it	cs
 800a5b0:	4629      	movcs	r1, r5
 800a5b2:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a5b4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	f7fd fa03 	bl	80079c4 <pbuf_alloc>
  if (p == NULL) {
 800a5be:	4605      	mov	r5, r0
 800a5c0:	b168      	cbz	r0, 800a5de <tcp_pbuf_prealloc+0x86>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a5c2:	6803      	ldr	r3, [r0, #0]
 800a5c4:	b133      	cbz	r3, 800a5d4 <tcp_pbuf_prealloc+0x7c>
 800a5c6:	4b08      	ldr	r3, [pc, #32]	@ (800a5e8 <tcp_pbuf_prealloc+0x90>)
 800a5c8:	f240 120b 	movw	r2, #267	@ 0x10b
 800a5cc:	4909      	ldr	r1, [pc, #36]	@ (800a5f4 <tcp_pbuf_prealloc+0x9c>)
 800a5ce:	4808      	ldr	r0, [pc, #32]	@ (800a5f0 <tcp_pbuf_prealloc+0x98>)
 800a5d0:	f002 ffbc 	bl	800d54c <iprintf>
  *oversize = p->len - length;
 800a5d4:	896b      	ldrh	r3, [r5, #10]
 800a5d6:	1b1b      	subs	r3, r3, r4
 800a5d8:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800a5da:	812c      	strh	r4, [r5, #8]
 800a5dc:	816c      	strh	r4, [r5, #10]
}
 800a5de:	4628      	mov	r0, r5
 800a5e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	e7e5      	b.n	800a5b4 <tcp_pbuf_prealloc+0x5c>
 800a5e8:	0800fe51 	.word	0x0800fe51
 800a5ec:	0800fea9 	.word	0x0800fea9
 800a5f0:	0800e45a 	.word	0x0800e45a
 800a5f4:	0800fec8 	.word	0x0800fec8

0800a5f8 <tcp_create_segment>:
{
 800a5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5fc:	460e      	mov	r6, r1
 800a5fe:	4690      	mov	r8, r2
 800a600:	4699      	mov	r9, r3
 800a602:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a606:	4607      	mov	r7, r0
 800a608:	b928      	cbnz	r0, 800a616 <tcp_create_segment+0x1e>
 800a60a:	4b2d      	ldr	r3, [pc, #180]	@ (800a6c0 <tcp_create_segment+0xc8>)
 800a60c:	22a3      	movs	r2, #163	@ 0xa3
 800a60e:	492d      	ldr	r1, [pc, #180]	@ (800a6c4 <tcp_create_segment+0xcc>)
 800a610:	482d      	ldr	r0, [pc, #180]	@ (800a6c8 <tcp_create_segment+0xd0>)
 800a612:	f002 ff9b 	bl	800d54c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a616:	b92e      	cbnz	r6, 800a624 <tcp_create_segment+0x2c>
 800a618:	4b29      	ldr	r3, [pc, #164]	@ (800a6c0 <tcp_create_segment+0xc8>)
 800a61a:	22a4      	movs	r2, #164	@ 0xa4
 800a61c:	492b      	ldr	r1, [pc, #172]	@ (800a6cc <tcp_create_segment+0xd4>)
 800a61e:	482a      	ldr	r0, [pc, #168]	@ (800a6c8 <tcp_create_segment+0xd0>)
 800a620:	f002 ff94 	bl	800d54c <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a624:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a628:	2003      	movs	r0, #3
 800a62a:	f7fc fecf 	bl	80073cc <memp_malloc>
 800a62e:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a630:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a634:	b930      	cbnz	r0, 800a644 <tcp_create_segment+0x4c>
    pbuf_free(p);
 800a636:	4630      	mov	r0, r6
 800a638:	f7fd f95a 	bl	80078f0 <pbuf_free>
    return NULL;
 800a63c:	2400      	movs	r4, #0
}
 800a63e:	4620      	mov	r0, r4
 800a640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800a644:	2300      	movs	r3, #0
  seg->flags = optflags;
 800a646:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->p = p;
 800a64a:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a64e:	8933      	ldrh	r3, [r6, #8]
 800a650:	42ab      	cmp	r3, r5
 800a652:	d205      	bcs.n	800a660 <tcp_create_segment+0x68>
 800a654:	4b1a      	ldr	r3, [pc, #104]	@ (800a6c0 <tcp_create_segment+0xc8>)
 800a656:	22b0      	movs	r2, #176	@ 0xb0
 800a658:	491d      	ldr	r1, [pc, #116]	@ (800a6d0 <tcp_create_segment+0xd8>)
 800a65a:	481b      	ldr	r0, [pc, #108]	@ (800a6c8 <tcp_create_segment+0xd0>)
 800a65c:	f002 ff76 	bl	800d54c <iprintf>
  seg->len = p->tot_len - optlen;
 800a660:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a662:	4630      	mov	r0, r6
 800a664:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800a666:	1b5b      	subs	r3, r3, r5
 800a668:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a66a:	f7fd f909 	bl	8007880 <pbuf_add_header>
 800a66e:	4606      	mov	r6, r0
 800a670:	b118      	cbz	r0, 800a67a <tcp_create_segment+0x82>
    tcp_seg_free(seg);
 800a672:	4620      	mov	r0, r4
 800a674:	f7fd fd7a 	bl	800816c <tcp_seg_free>
    return NULL;
 800a678:	e7e0      	b.n	800a63c <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a67a:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a67c:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a67e:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a680:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a684:	f505 45a0 	add.w	r5, r5, #20480	@ 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a688:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a68c:	f7fc fba0 	bl	8006dd0 <lwip_htons>
 800a690:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a694:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800a698:	8b38      	ldrh	r0, [r7, #24]
 800a69a:	f7fc fb99 	bl	8006dd0 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a69e:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a6a0:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a6a4:	4648      	mov	r0, r9
 800a6a6:	f7fc fb96 	bl	8006dd6 <lwip_htonl>
 800a6aa:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a6ac:	ea48 0005 	orr.w	r0, r8, r5
 800a6b0:	68e7      	ldr	r7, [r4, #12]
 800a6b2:	f7fc fb8d 	bl	8006dd0 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800a6b6:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a6b8:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800a6ba:	749e      	strb	r6, [r3, #18]
 800a6bc:	74de      	strb	r6, [r3, #19]
  return seg;
 800a6be:	e7be      	b.n	800a63e <tcp_create_segment+0x46>
 800a6c0:	0800fe51 	.word	0x0800fe51
 800a6c4:	0800fedc 	.word	0x0800fedc
 800a6c8:	0800e45a 	.word	0x0800e45a
 800a6cc:	0800fefc 	.word	0x0800fefc
 800a6d0:	0800ff1d 	.word	0x0800ff1d

0800a6d4 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a6d4:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800a6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a6da:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800a6dc:	4606      	mov	r6, r0
 800a6de:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a6e0:	2022      	movs	r0, #34	@ 0x22
 800a6e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800a6e6:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a6e8:	f7fd f96c 	bl	80079c4 <pbuf_alloc>
  if (p != NULL) {
 800a6ec:	4605      	mov	r5, r0
 800a6ee:	b348      	cbz	r0, 800a744 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a6f0:	8943      	ldrh	r3, [r0, #10]
 800a6f2:	2b13      	cmp	r3, #19
 800a6f4:	d806      	bhi.n	800a704 <tcp_output_alloc_header_common.constprop.0+0x30>
 800a6f6:	4b15      	ldr	r3, [pc, #84]	@ (800a74c <tcp_output_alloc_header_common.constprop.0+0x78>)
 800a6f8:	f240 7223 	movw	r2, #1827	@ 0x723
 800a6fc:	4914      	ldr	r1, [pc, #80]	@ (800a750 <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800a6fe:	4815      	ldr	r0, [pc, #84]	@ (800a754 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800a700:	f002 ff24 	bl	800d54c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a704:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800a706:	4640      	mov	r0, r8
 800a708:	f7fc fb62 	bl	8006dd0 <lwip_htons>
 800a70c:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a70e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800a712:	f7fc fb5d 	bl	8006dd0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800a716:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800a718:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800a71a:	4630      	mov	r0, r6
 800a71c:	f7fc fb5b 	bl	8006dd6 <lwip_htonl>
 800a720:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a722:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800a726:	f440 40a0 	orr.w	r0, r0, #20480	@ 0x5000
 800a72a:	f7fc fb51 	bl	8006dd0 <lwip_htons>
 800a72e:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a730:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800a734:	f7fc fb4c 	bl	8006dd0 <lwip_htons>
    tcphdr->chksum = 0;
 800a738:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800a73a:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800a73c:	7423      	strb	r3, [r4, #16]
 800a73e:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800a740:	74a3      	strb	r3, [r4, #18]
 800a742:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800a744:	4628      	mov	r0, r5
 800a746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a74a:	bf00      	nop
 800a74c:	0800fe51 	.word	0x0800fe51
 800a750:	0800ff32 	.word	0x0800ff32
 800a754:	0800e45a 	.word	0x0800e45a

0800a758 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800a758:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a75a:	460d      	mov	r5, r1
 800a75c:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a75e:	4604      	mov	r4, r0
 800a760:	b930      	cbnz	r0, 800a770 <tcp_output_alloc_header.constprop.0+0x18>
 800a762:	4b0d      	ldr	r3, [pc, #52]	@ (800a798 <tcp_output_alloc_header.constprop.0+0x40>)
 800a764:	f240 7242 	movw	r2, #1858	@ 0x742
 800a768:	490c      	ldr	r1, [pc, #48]	@ (800a79c <tcp_output_alloc_header.constprop.0+0x44>)
 800a76a:	480d      	ldr	r0, [pc, #52]	@ (800a7a0 <tcp_output_alloc_header.constprop.0+0x48>)
 800a76c:	f002 feee 	bl	800d54c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a770:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a772:	4632      	mov	r2, r6
 800a774:	4629      	mov	r1, r5
 800a776:	9302      	str	r3, [sp, #8]
 800a778:	2310      	movs	r3, #16
 800a77a:	9301      	str	r3, [sp, #4]
 800a77c:	8b23      	ldrh	r3, [r4, #24]
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	8ae3      	ldrh	r3, [r4, #22]
 800a782:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a784:	f7ff ffa6 	bl	800a6d4 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a788:	b118      	cbz	r0, 800a792 <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a78a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800a78c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a78e:	4413      	add	r3, r2
 800a790:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  return p;
}
 800a792:	b004      	add	sp, #16
 800a794:	bd70      	pop	{r4, r5, r6, pc}
 800a796:	bf00      	nop
 800a798:	0800fe51 	.word	0x0800fe51
 800a79c:	0800ff60 	.word	0x0800ff60
 800a7a0:	0800e45a 	.word	0x0800e45a

0800a7a4 <tcp_output_fill_options.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a7a4:	b930      	cbnz	r0, 800a7b4 <tcp_output_fill_options.constprop.0+0x10>
 800a7a6:	4b04      	ldr	r3, [pc, #16]	@ (800a7b8 <tcp_output_fill_options.constprop.0+0x14>)
 800a7a8:	f240 7256 	movw	r2, #1878	@ 0x756
 800a7ac:	4903      	ldr	r1, [pc, #12]	@ (800a7bc <tcp_output_fill_options.constprop.0+0x18>)
 800a7ae:	4804      	ldr	r0, [pc, #16]	@ (800a7c0 <tcp_output_fill_options.constprop.0+0x1c>)
 800a7b0:	f002 becc 	b.w	800d54c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	0800fe51 	.word	0x0800fe51
 800a7bc:	0800ff85 	.word	0x0800ff85
 800a7c0:	0800e45a 	.word	0x0800e45a

0800a7c4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	b085      	sub	sp, #20
 800a7ca:	4617      	mov	r7, r2
 800a7cc:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a7ce:	460d      	mov	r5, r1
 800a7d0:	b931      	cbnz	r1, 800a7e0 <tcp_output_control_segment+0x1c>
 800a7d2:	4b15      	ldr	r3, [pc, #84]	@ (800a828 <tcp_output_control_segment+0x64>)
 800a7d4:	f240 7287 	movw	r2, #1927	@ 0x787
 800a7d8:	4914      	ldr	r1, [pc, #80]	@ (800a82c <tcp_output_control_segment+0x68>)
 800a7da:	4815      	ldr	r0, [pc, #84]	@ (800a830 <tcp_output_control_segment+0x6c>)
 800a7dc:	f002 feb6 	bl	800d54c <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a7e0:	b164      	cbz	r4, 800a7fc <tcp_output_control_segment+0x38>
 800a7e2:	7a20      	ldrb	r0, [r4, #8]
 800a7e4:	b150      	cbz	r0, 800a7fc <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800a7e6:	f7fc ffaf 	bl	8007748 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800a7ea:	b968      	cbnz	r0, 800a808 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800a7ec:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f7fd f87d 	bl	80078f0 <pbuf_free>
  return err;
}
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	b005      	add	sp, #20
 800a7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f001 fefb 	bl	800c5f8 <ip4_route>
  if (netif == NULL) {
 800a802:	2800      	cmp	r0, #0
 800a804:	d0f2      	beq.n	800a7ec <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800a806:	b164      	cbz	r4, 800a822 <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800a808:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800a80a:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a80c:	2206      	movs	r2, #6
 800a80e:	9002      	str	r0, [sp, #8]
 800a810:	4639      	mov	r1, r7
 800a812:	4628      	mov	r0, r5
 800a814:	e9cd 4200 	strd	r4, r2, [sp]
 800a818:	4632      	mov	r2, r6
 800a81a:	f002 f84d 	bl	800c8b8 <ip4_output_if>
 800a81e:	4604      	mov	r4, r0
 800a820:	e7e6      	b.n	800a7f0 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800a822:	23ff      	movs	r3, #255	@ 0xff
 800a824:	e7f2      	b.n	800a80c <tcp_output_control_segment+0x48>
 800a826:	bf00      	nop
 800a828:	0800fe51 	.word	0x0800fe51
 800a82c:	0800ffab 	.word	0x0800ffab
 800a830:	0800e45a 	.word	0x0800e45a

0800a834 <tcp_write>:
{
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	b091      	sub	sp, #68	@ 0x44
 800a83a:	4692      	mov	sl, r2
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a83c:	4604      	mov	r4, r0
{
 800a83e:	930a      	str	r3, [sp, #40]	@ 0x28
  u16_t oversize = 0;
 800a840:	2300      	movs	r3, #0
{
 800a842:	9108      	str	r1, [sp, #32]
  u16_t oversize = 0;
 800a844:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a848:	b958      	cbnz	r0, 800a862 <tcp_write+0x2e>
 800a84a:	4ba8      	ldr	r3, [pc, #672]	@ (800aaec <tcp_write+0x2b8>)
 800a84c:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800a850:	49a7      	ldr	r1, [pc, #668]	@ (800aaf0 <tcp_write+0x2bc>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a852:	48a8      	ldr	r0, [pc, #672]	@ (800aaf4 <tcp_write+0x2c0>)
 800a854:	f002 fe7a 	bl	800d54c <iprintf>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a858:	f06f 000f 	mvn.w	r0, #15
}
 800a85c:	b011      	add	sp, #68	@ 0x44
 800a85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a862:	f8b0 3062 	ldrh.w	r3, [r0, #98]	@ 0x62
 800a866:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 800a868:	085b      	lsrs	r3, r3, #1
 800a86a:	4293      	cmp	r3, r2
 800a86c:	bf28      	it	cs
 800a86e:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800a870:	2b00      	cmp	r3, #0
 800a872:	bf08      	it	eq
 800a874:	4613      	moveq	r3, r2
 800a876:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a878:	9b08      	ldr	r3, [sp, #32]
 800a87a:	b923      	cbnz	r3, 800a886 <tcp_write+0x52>
 800a87c:	4b9b      	ldr	r3, [pc, #620]	@ (800aaec <tcp_write+0x2b8>)
 800a87e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800a882:	499d      	ldr	r1, [pc, #628]	@ (800aaf8 <tcp_write+0x2c4>)
 800a884:	e7e5      	b.n	800a852 <tcp_write+0x1e>
  if ((pcb->state != ESTABLISHED) &&
 800a886:	7d03      	ldrb	r3, [r0, #20]
 800a888:	1e9a      	subs	r2, r3, #2
 800a88a:	2a02      	cmp	r2, #2
 800a88c:	d902      	bls.n	800a894 <tcp_write+0x60>
 800a88e:	2b07      	cmp	r3, #7
 800a890:	f040 8241 	bne.w	800ad16 <tcp_write+0x4e2>
  } else if (len == 0) {
 800a894:	f1ba 0f00 	cmp.w	sl, #0
 800a898:	d01a      	beq.n	800a8d0 <tcp_write+0x9c>
  if (len > pcb->snd_buf) {
 800a89a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800a89e:	4553      	cmp	r3, sl
 800a8a0:	d206      	bcs.n	800a8b0 <tcp_write+0x7c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a8a2:	8b63      	ldrh	r3, [r4, #26]
 800a8a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8a8:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800a8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ae:	e7d5      	b.n	800a85c <tcp_write+0x28>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a8b0:	f8b4 2066 	ldrh.w	r2, [r4, #102]	@ 0x66
 800a8b4:	2a0e      	cmp	r2, #14
 800a8b6:	d8f4      	bhi.n	800a8a2 <tcp_write+0x6e>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a8b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  if (pcb->snd_queuelen != 0) {
 800a8ba:	b302      	cbz	r2, 800a8fe <tcp_write+0xca>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a8bc:	b943      	cbnz	r3, 800a8d0 <tcp_write+0x9c>
 800a8be:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a8c0:	b933      	cbnz	r3, 800a8d0 <tcp_write+0x9c>
 800a8c2:	4b8a      	ldr	r3, [pc, #552]	@ (800aaec <tcp_write+0x2b8>)
 800a8c4:	f240 1255 	movw	r2, #341	@ 0x155
 800a8c8:	498c      	ldr	r1, [pc, #560]	@ (800aafc <tcp_write+0x2c8>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a8ca:	488a      	ldr	r0, [pc, #552]	@ (800aaf4 <tcp_write+0x2c0>)
 800a8cc:	f002 fe3e 	bl	800d54c <iprintf>
  queuelen = pcb->snd_queuelen;
 800a8d0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800a8d4:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800a8d6:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800a8d8:	b9dd      	cbnz	r5, 800a912 <tcp_write+0xde>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a8da:	f8b4 6068 	ldrh.w	r6, [r4, #104]	@ 0x68
 800a8de:	2e00      	cmp	r6, #0
 800a8e0:	f000 81b2 	beq.w	800ac48 <tcp_write+0x414>
 800a8e4:	4b81      	ldr	r3, [pc, #516]	@ (800aaec <tcp_write+0x2b8>)
 800a8e6:	f240 224a 	movw	r2, #586	@ 0x24a
 800a8ea:	4985      	ldr	r1, [pc, #532]	@ (800ab00 <tcp_write+0x2cc>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a8ec:	46a8      	mov	r8, r5
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a8ee:	4881      	ldr	r0, [pc, #516]	@ (800aaf4 <tcp_write+0x2c0>)
  u16_t extendlen = 0;
 800a8f0:	46a9      	mov	r9, r5
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a8f2:	f002 fe2b 	bl	800d54c <iprintf>
  u16_t oversize_used = 0;
 800a8f6:	462f      	mov	r7, r5
  u16_t pos = 0; /* position in 'arg' data */
 800a8f8:	462e      	mov	r6, r5
  struct pbuf *concat_p = NULL;
 800a8fa:	9505      	str	r5, [sp, #20]
 800a8fc:	e0a0      	b.n	800aa40 <tcp_write+0x20c>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a8fe:	b913      	cbnz	r3, 800a906 <tcp_write+0xd2>
 800a900:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d0e4      	beq.n	800a8d0 <tcp_write+0x9c>
 800a906:	4b79      	ldr	r3, [pc, #484]	@ (800aaec <tcp_write+0x2b8>)
 800a908:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800a90c:	497d      	ldr	r1, [pc, #500]	@ (800ab04 <tcp_write+0x2d0>)
 800a90e:	e7dc      	b.n	800a8ca <tcp_write+0x96>
 800a910:	9d05      	ldr	r5, [sp, #20]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a912:	682b      	ldr	r3, [r5, #0]
 800a914:	46a8      	mov	r8, r5
 800a916:	9305      	str	r3, [sp, #20]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1f9      	bne.n	800a910 <tcp_write+0xdc>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a91c:	7aaf      	ldrb	r7, [r5, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a91e:	892b      	ldrh	r3, [r5, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a920:	00bf      	lsls	r7, r7, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a922:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a924:	f007 0704 	and.w	r7, r7, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a928:	443b      	add	r3, r7
 800a92a:	429a      	cmp	r2, r3
 800a92c:	da06      	bge.n	800a93c <tcp_write+0x108>
 800a92e:	4b6f      	ldr	r3, [pc, #444]	@ (800aaec <tcp_write+0x2b8>)
 800a930:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a934:	4974      	ldr	r1, [pc, #464]	@ (800ab08 <tcp_write+0x2d4>)
 800a936:	486f      	ldr	r0, [pc, #444]	@ (800aaf4 <tcp_write+0x2c0>)
 800a938:	f002 fe08 	bl	800d54c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a93c:	892e      	ldrh	r6, [r5, #8]
 800a93e:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 800a940:	f8b4 9068 	ldrh.w	r9, [r4, #104]	@ 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a944:	1b9e      	subs	r6, r3, r6
    oversize = pcb->unsent_oversize;
 800a946:	f8ad 903e 	strh.w	r9, [sp, #62]	@ 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a94a:	1bf6      	subs	r6, r6, r7
 800a94c:	b2b6      	uxth	r6, r6
    if (oversize > 0) {
 800a94e:	f1b9 0f00 	cmp.w	r9, #0
 800a952:	d05a      	beq.n	800aa0a <tcp_write+0x1d6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a954:	45b1      	cmp	r9, r6
 800a956:	d906      	bls.n	800a966 <tcp_write+0x132>
 800a958:	4b64      	ldr	r3, [pc, #400]	@ (800aaec <tcp_write+0x2b8>)
 800a95a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800a95e:	496b      	ldr	r1, [pc, #428]	@ (800ab0c <tcp_write+0x2d8>)
 800a960:	4864      	ldr	r0, [pc, #400]	@ (800aaf4 <tcp_write+0x2c0>)
 800a962:	f002 fdf3 	bl	800d54c <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a966:	45d1      	cmp	r9, sl
 800a968:	464f      	mov	r7, r9
 800a96a:	bf28      	it	cs
 800a96c:	4657      	movcs	r7, sl
 800a96e:	42b7      	cmp	r7, r6
 800a970:	bf28      	it	cs
 800a972:	4637      	movcs	r7, r6
      oversize -= oversize_used;
 800a974:	eba9 0907 	sub.w	r9, r9, r7
 800a978:	fa1f f389 	uxth.w	r3, r9
 800a97c:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a980:	2b00      	cmp	r3, #0
 800a982:	d137      	bne.n	800a9f4 <tcp_write+0x1c0>
      space -= oversize_used;
 800a984:	1bf6      	subs	r6, r6, r7
 800a986:	b2b6      	uxth	r6, r6
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a988:	4557      	cmp	r7, sl
 800a98a:	f080 81c7 	bcs.w	800ad1c <tcp_write+0x4e8>
 800a98e:	2e00      	cmp	r6, #0
 800a990:	f000 8157 	beq.w	800ac42 <tcp_write+0x40e>
 800a994:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800a998:	f1b9 0f00 	cmp.w	r9, #0
 800a99c:	f000 8152 	beq.w	800ac44 <tcp_write+0x410>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a9a0:	ebaa 0907 	sub.w	r9, sl, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a9a6:	45b1      	cmp	r9, r6
 800a9a8:	bfa8      	it	ge
 800a9aa:	46b1      	movge	r9, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a9ac:	07d9      	lsls	r1, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a9ae:	fa1f f589 	uxth.w	r5, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a9b2:	d52d      	bpl.n	800aa10 <tcp_write+0x1dc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	4632      	mov	r2, r6
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	9302      	str	r3, [sp, #8]
 800a9be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9c0:	e9cd 4300 	strd	r4, r3, [sp]
 800a9c4:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800a9c8:	f7ff fdc6 	bl	800a558 <tcp_pbuf_prealloc>
 800a9cc:	4683      	mov	fp, r0
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	f000 819e 	beq.w	800ad10 <tcp_write+0x4dc>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a9d4:	9b08      	ldr	r3, [sp, #32]
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	6840      	ldr	r0, [r0, #4]
 800a9da:	19d9      	adds	r1, r3, r7
 800a9dc:	f002 fee7 	bl	800d7ae <memcpy>
        queuelen += pbuf_clen(concat_p);
 800a9e0:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800a9e2:	f7fd f8d9 	bl	8007b98 <pbuf_clen>
 800a9e6:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 800a9e8:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800a9ec:	4403      	add	r3, r0
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	9306      	str	r3, [sp, #24]
 800a9f2:	e020      	b.n	800aa36 <tcp_write+0x202>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a9f4:	45ba      	cmp	sl, r7
 800a9f6:	f000 8191 	beq.w	800ad1c <tcp_write+0x4e8>
 800a9fa:	4b3c      	ldr	r3, [pc, #240]	@ (800aaec <tcp_write+0x2b8>)
 800a9fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa00:	4943      	ldr	r1, [pc, #268]	@ (800ab10 <tcp_write+0x2dc>)
 800aa02:	483c      	ldr	r0, [pc, #240]	@ (800aaf4 <tcp_write+0x2c0>)
 800aa04:	f002 fda2 	bl	800d54c <iprintf>
 800aa08:	e7bc      	b.n	800a984 <tcp_write+0x150>
  u16_t pos = 0; /* position in 'arg' data */
 800aa0a:	464d      	mov	r5, r9
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800aa0c:	464f      	mov	r7, r9
 800aa0e:	e7bb      	b.n	800a988 <tcp_write+0x154>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800aa10:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800aa14:	465b      	mov	r3, fp
 800aa16:	f8db b000 	ldr.w	fp, [fp]
 800aa1a:	f1bb 0f00 	cmp.w	fp, #0
 800aa1e:	d1f9      	bne.n	800aa14 <tcp_write+0x1e0>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800aa20:	7b1a      	ldrb	r2, [r3, #12]
 800aa22:	2a3f      	cmp	r2, #63	@ 0x3f
 800aa24:	d81d      	bhi.n	800aa62 <tcp_write+0x22e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800aa26:	895a      	ldrh	r2, [r3, #10]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800aa2c:	9a08      	ldr	r2, [sp, #32]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d117      	bne.n	800aa62 <tcp_write+0x22e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800aa32:	b977      	cbnz	r7, 800aa52 <tcp_write+0x21e>
          extendlen = seglen;
 800aa34:	46a9      	mov	r9, r5
      pos += seglen;
 800aa36:	197e      	adds	r6, r7, r5
 800aa38:	4645      	mov	r5, r8
 800aa3a:	f8cd b014 	str.w	fp, [sp, #20]
 800aa3e:	b2b6      	uxth	r6, r6
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800aa40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa42:	f04f 0b00 	mov.w	fp, #0
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 800aa4e:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa50:	e0c9      	b.n	800abe6 <tcp_write+0x3b2>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800aa52:	4b26      	ldr	r3, [pc, #152]	@ (800aaec <tcp_write+0x2b8>)
 800aa54:	f240 2231 	movw	r2, #561	@ 0x231
 800aa58:	492e      	ldr	r1, [pc, #184]	@ (800ab14 <tcp_write+0x2e0>)
 800aa5a:	4826      	ldr	r0, [pc, #152]	@ (800aaf4 <tcp_write+0x2c0>)
 800aa5c:	f002 fd76 	bl	800d54c <iprintf>
 800aa60:	e7e8      	b.n	800aa34 <tcp_write+0x200>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800aa62:	2201      	movs	r2, #1
 800aa64:	4629      	mov	r1, r5
 800aa66:	2000      	movs	r0, #0
 800aa68:	f7fc ffac 	bl	80079c4 <pbuf_alloc>
 800aa6c:	4683      	mov	fp, r0
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	f000 814e 	beq.w	800ad10 <tcp_write+0x4dc>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800aa74:	9b08      	ldr	r3, [sp, #32]
 800aa76:	443b      	add	r3, r7
 800aa78:	6043      	str	r3, [r0, #4]
 800aa7a:	e7b2      	b.n	800a9e2 <tcp_write+0x1ae>
    u16_t left = len - pos;
 800aa7c:	ebaa 0306 	sub.w	r3, sl, r6
    u16_t seglen = LWIP_MIN(left, max_len);
 800aa80:	9a07      	ldr	r2, [sp, #28]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	4293      	cmp	r3, r2
 800aa86:	bf28      	it	cs
 800aa88:	4613      	movcs	r3, r2
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800aa8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d043      	beq.n	800ab1c <tcp_write+0x2e8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800aa94:	fabb f38b 	clz	r3, fp
 800aa98:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa9a:	2036      	movs	r0, #54	@ 0x36
 800aa9c:	095b      	lsrs	r3, r3, #5
 800aa9e:	9302      	str	r3, [sp, #8]
 800aaa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaa2:	e9cd 4300 	strd	r4, r3, [sp]
 800aaa6:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800aaaa:	f7ff fd55 	bl	800a558 <tcp_pbuf_prealloc>
 800aaae:	4605      	mov	r5, r0
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d053      	beq.n	800ab5c <tcp_write+0x328>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800aab4:	8943      	ldrh	r3, [r0, #10]
 800aab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d206      	bcs.n	800aaca <tcp_write+0x296>
 800aabc:	4b0b      	ldr	r3, [pc, #44]	@ (800aaec <tcp_write+0x2b8>)
 800aabe:	f240 2266 	movw	r2, #614	@ 0x266
 800aac2:	4915      	ldr	r1, [pc, #84]	@ (800ab18 <tcp_write+0x2e4>)
 800aac4:	480b      	ldr	r0, [pc, #44]	@ (800aaf4 <tcp_write+0x2c0>)
 800aac6:	f002 fd41 	bl	800d54c <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800aaca:	6868      	ldr	r0, [r5, #4]
 800aacc:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800aad0:	1999      	adds	r1, r3, r6
 800aad2:	f002 fe6c 	bl	800d7ae <memcpy>
    queuelen += pbuf_clen(p);
 800aad6:	4628      	mov	r0, r5
 800aad8:	f7fd f85e 	bl	8007b98 <pbuf_clen>
 800aadc:	9b06      	ldr	r3, [sp, #24]
 800aade:	4403      	add	r3, r0
 800aae0:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800aae2:	2b0f      	cmp	r3, #15
    queuelen += pbuf_clen(p);
 800aae4:	9306      	str	r3, [sp, #24]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800aae6:	d961      	bls.n	800abac <tcp_write+0x378>
      pbuf_free(p);
 800aae8:	4628      	mov	r0, r5
 800aaea:	e035      	b.n	800ab58 <tcp_write+0x324>
 800aaec:	0800fe51 	.word	0x0800fe51
 800aaf0:	0800ffd4 	.word	0x0800ffd4
 800aaf4:	0800e45a 	.word	0x0800e45a
 800aaf8:	0800ffeb 	.word	0x0800ffeb
 800aafc:	0801001c 	.word	0x0801001c
 800ab00:	08010106 	.word	0x08010106
 800ab04:	08010056 	.word	0x08010056
 800ab08:	08010088 	.word	0x08010088
 800ab0c:	0801009f 	.word	0x0801009f
 800ab10:	080100bf 	.word	0x080100bf
 800ab14:	080100dd 	.word	0x080100dd
 800ab18:	08010135 	.word	0x08010135
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ab1c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800ab20:	b133      	cbz	r3, 800ab30 <tcp_write+0x2fc>
 800ab22:	4b80      	ldr	r3, [pc, #512]	@ (800ad24 <tcp_write+0x4f0>)
 800ab24:	f240 2271 	movw	r2, #625	@ 0x271
 800ab28:	497f      	ldr	r1, [pc, #508]	@ (800ad28 <tcp_write+0x4f4>)
 800ab2a:	4880      	ldr	r0, [pc, #512]	@ (800ad2c <tcp_write+0x4f8>)
 800ab2c:	f002 fd0e 	bl	800d54c <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800ab30:	2201      	movs	r2, #1
 800ab32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab34:	2036      	movs	r0, #54	@ 0x36
 800ab36:	f7fc ff45 	bl	80079c4 <pbuf_alloc>
 800ab3a:	b178      	cbz	r0, 800ab5c <tcp_write+0x328>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ab3c:	9a08      	ldr	r2, [sp, #32]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ab3e:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ab40:	900d      	str	r0, [sp, #52]	@ 0x34
 800ab42:	4432      	add	r2, r6
 800ab44:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ab46:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ab4a:	2036      	movs	r0, #54	@ 0x36
 800ab4c:	f7fc ff3a 	bl	80079c4 <pbuf_alloc>
 800ab50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab52:	4605      	mov	r5, r0
 800ab54:	bb30      	cbnz	r0, 800aba4 <tcp_write+0x370>
        pbuf_free(p2);
 800ab56:	4618      	mov	r0, r3
      pbuf_free(p);
 800ab58:	f7fc feca 	bl	80078f0 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab5c:	8b63      	ldrh	r3, [r4, #26]
 800ab5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab62:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800ab64:	9b05      	ldr	r3, [sp, #20]
 800ab66:	b113      	cbz	r3, 800ab6e <tcp_write+0x33a>
    pbuf_free(concat_p);
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fc fec1 	bl	80078f0 <pbuf_free>
  if (queue != NULL) {
 800ab6e:	f1bb 0f00 	cmp.w	fp, #0
 800ab72:	d002      	beq.n	800ab7a <tcp_write+0x346>
    tcp_segs_free(queue);
 800ab74:	4658      	mov	r0, fp
 800ab76:	f7fd fb07 	bl	8008188 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800ab7a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f43f ae93 	beq.w	800a8aa <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ab84:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f47f ae8f 	bne.w	800a8aa <tcp_write+0x76>
 800ab8c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f47f ae8b 	bne.w	800a8aa <tcp_write+0x76>
 800ab94:	4b63      	ldr	r3, [pc, #396]	@ (800ad24 <tcp_write+0x4f0>)
 800ab96:	f240 3227 	movw	r2, #807	@ 0x327
 800ab9a:	4965      	ldr	r1, [pc, #404]	@ (800ad30 <tcp_write+0x4fc>)
 800ab9c:	4863      	ldr	r0, [pc, #396]	@ (800ad2c <tcp_write+0x4f8>)
 800ab9e:	f002 fcd5 	bl	800d54c <iprintf>
 800aba2:	e682      	b.n	800a8aa <tcp_write+0x76>
      pbuf_cat(p/*header*/, p2/*data*/);
 800aba4:	4619      	mov	r1, r3
 800aba6:	f7fd f81b 	bl	8007be0 <pbuf_cat>
 800abaa:	e794      	b.n	800aad6 <tcp_write+0x2a2>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800abac:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800abae:	2200      	movs	r2, #0
 800abb0:	4629      	mov	r1, r5
 800abb2:	4620      	mov	r0, r4
 800abb4:	4433      	add	r3, r6
 800abb6:	9200      	str	r2, [sp, #0]
 800abb8:	f7ff fd1e 	bl	800a5f8 <tcp_create_segment>
 800abbc:	4605      	mov	r5, r0
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d0cc      	beq.n	800ab5c <tcp_write+0x328>
    if (queue == NULL) {
 800abc2:	f1bb 0f00 	cmp.w	fp, #0
 800abc6:	d03a      	beq.n	800ac3e <tcp_write+0x40a>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800abc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abca:	b933      	cbnz	r3, 800abda <tcp_write+0x3a6>
 800abcc:	4b55      	ldr	r3, [pc, #340]	@ (800ad24 <tcp_write+0x4f0>)
 800abce:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800abd2:	4958      	ldr	r1, [pc, #352]	@ (800ad34 <tcp_write+0x500>)
 800abd4:	4855      	ldr	r0, [pc, #340]	@ (800ad2c <tcp_write+0x4f8>)
 800abd6:	f002 fcb9 	bl	800d54c <iprintf>
      prev_seg->next = seg;
 800abda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abdc:	601d      	str	r5, [r3, #0]
    pos += seglen;
 800abde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe0:	950b      	str	r5, [sp, #44]	@ 0x2c
 800abe2:	4433      	add	r3, r6
 800abe4:	b29e      	uxth	r6, r3
  while (pos < len) {
 800abe6:	4556      	cmp	r6, sl
 800abe8:	f4ff af48 	bcc.w	800aa7c <tcp_write+0x248>
  if (oversize_used > 0) {
 800abec:	b13f      	cbz	r7, 800abfe <tcp_write+0x3ca>
    for (p = last_unsent->p; p; p = p->next) {
 800abee:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800abf2:	bb76      	cbnz	r6, 800ac52 <tcp_write+0x41e>
    last_unsent->len += oversize_used;
 800abf4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800abf8:	443b      	add	r3, r7
 800abfa:	f8a8 3008 	strh.w	r3, [r8, #8]
  pcb->unsent_oversize = oversize;
 800abfe:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800ac02:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if (concat_p != NULL) {
 800ac06:	9b05      	ldr	r3, [sp, #20]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d033      	beq.n	800ac74 <tcp_write+0x440>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ac0c:	f1b8 0f00 	cmp.w	r8, #0
 800ac10:	d106      	bne.n	800ac20 <tcp_write+0x3ec>
 800ac12:	4b44      	ldr	r3, [pc, #272]	@ (800ad24 <tcp_write+0x4f0>)
 800ac14:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800ac18:	4947      	ldr	r1, [pc, #284]	@ (800ad38 <tcp_write+0x504>)
 800ac1a:	4844      	ldr	r0, [pc, #272]	@ (800ad2c <tcp_write+0x4f8>)
 800ac1c:	f002 fc96 	bl	800d54c <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800ac20:	9905      	ldr	r1, [sp, #20]
 800ac22:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ac26:	f7fc ffdb 	bl	8007be0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ac2a:	9a05      	ldr	r2, [sp, #20]
 800ac2c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800ac30:	8912      	ldrh	r2, [r2, #8]
 800ac32:	4413      	add	r3, r2
    last_unsent->len += extendlen;
 800ac34:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800ac38:	f8c8 b000 	str.w	fp, [r8]
 800ac3c:	e040      	b.n	800acc0 <tcp_write+0x48c>
 800ac3e:	4683      	mov	fp, r0
 800ac40:	e7cd      	b.n	800abde <tcp_write+0x3aa>
  u16_t extendlen = 0;
 800ac42:	46b1      	mov	r9, r6
 800ac44:	463e      	mov	r6, r7
 800ac46:	e6fb      	b.n	800aa40 <tcp_write+0x20c>
 800ac48:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800ac4a:	4637      	mov	r7, r6
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ac4c:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 800ac4e:	9605      	str	r6, [sp, #20]
 800ac50:	e6f6      	b.n	800aa40 <tcp_write+0x20c>
      p->tot_len += oversize_used;
 800ac52:	8933      	ldrh	r3, [r6, #8]
 800ac54:	443b      	add	r3, r7
 800ac56:	8133      	strh	r3, [r6, #8]
      if (p->next == NULL) {
 800ac58:	6833      	ldr	r3, [r6, #0]
 800ac5a:	b94b      	cbnz	r3, 800ac70 <tcp_write+0x43c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ac5c:	6873      	ldr	r3, [r6, #4]
 800ac5e:	463a      	mov	r2, r7
 800ac60:	8970      	ldrh	r0, [r6, #10]
 800ac62:	9908      	ldr	r1, [sp, #32]
 800ac64:	4418      	add	r0, r3
 800ac66:	f002 fda2 	bl	800d7ae <memcpy>
        p->len += oversize_used;
 800ac6a:	8973      	ldrh	r3, [r6, #10]
 800ac6c:	443b      	add	r3, r7
 800ac6e:	8173      	strh	r3, [r6, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ac70:	6836      	ldr	r6, [r6, #0]
 800ac72:	e7be      	b.n	800abf2 <tcp_write+0x3be>
  } else if (extendlen > 0) {
 800ac74:	f1b9 0f00 	cmp.w	r9, #0
 800ac78:	d01d      	beq.n	800acb6 <tcp_write+0x482>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ac7a:	f1b8 0f00 	cmp.w	r8, #0
 800ac7e:	d002      	beq.n	800ac86 <tcp_write+0x452>
 800ac80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac84:	b933      	cbnz	r3, 800ac94 <tcp_write+0x460>
 800ac86:	4b27      	ldr	r3, [pc, #156]	@ (800ad24 <tcp_write+0x4f0>)
 800ac88:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800ac8c:	492b      	ldr	r1, [pc, #172]	@ (800ad3c <tcp_write+0x508>)
 800ac8e:	4827      	ldr	r0, [pc, #156]	@ (800ad2c <tcp_write+0x4f8>)
 800ac90:	f002 fc5c 	bl	800d54c <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ac94:	f8d8 3004 	ldr.w	r3, [r8, #4]
      p->tot_len += extendlen;
 800ac98:	891a      	ldrh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ac9a:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800ac9c:	444a      	add	r2, r9
 800ac9e:	b292      	uxth	r2, r2
 800aca0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800aca2:	b931      	cbnz	r1, 800acb2 <tcp_write+0x47e>
    p->len += extendlen;
 800aca4:	895a      	ldrh	r2, [r3, #10]
 800aca6:	444a      	add	r2, r9
 800aca8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800acaa:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800acae:	444b      	add	r3, r9
 800acb0:	e7c0      	b.n	800ac34 <tcp_write+0x400>
      p->tot_len += extendlen;
 800acb2:	460b      	mov	r3, r1
 800acb4:	e7f0      	b.n	800ac98 <tcp_write+0x464>
  if (last_unsent == NULL) {
 800acb6:	f1b8 0f00 	cmp.w	r8, #0
 800acba:	d1bd      	bne.n	800ac38 <tcp_write+0x404>
    pcb->unsent = queue;
 800acbc:	f8c4 b06c 	str.w	fp, [r4, #108]	@ 0x6c
  pcb->snd_lbb += len;
 800acc0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800acc2:	4453      	add	r3, sl
 800acc4:	65e3      	str	r3, [r4, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800acc6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800acca:	eba3 030a 	sub.w	r3, r3, sl
 800acce:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800acd2:	9b06      	ldr	r3, [sp, #24]
 800acd4:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 800acd8:	b153      	cbz	r3, 800acf0 <tcp_write+0x4bc>
    LWIP_ASSERT("tcp_write: valid queue length",
 800acda:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800acdc:	b943      	cbnz	r3, 800acf0 <tcp_write+0x4bc>
 800acde:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ace0:	b933      	cbnz	r3, 800acf0 <tcp_write+0x4bc>
 800ace2:	4b10      	ldr	r3, [pc, #64]	@ (800ad24 <tcp_write+0x4f0>)
 800ace4:	f240 3212 	movw	r2, #786	@ 0x312
 800ace8:	4911      	ldr	r1, [pc, #68]	@ (800ad30 <tcp_write+0x4fc>)
 800acea:	4810      	ldr	r0, [pc, #64]	@ (800ad2c <tcp_write+0x4f8>)
 800acec:	f002 fc2e 	bl	800d54c <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800acf0:	b10d      	cbz	r5, 800acf6 <tcp_write+0x4c2>
 800acf2:	68eb      	ldr	r3, [r5, #12]
 800acf4:	b90b      	cbnz	r3, 800acfa <tcp_write+0x4c6>
  return ERR_OK;
 800acf6:	2000      	movs	r0, #0
 800acf8:	e5b0      	b.n	800a85c <tcp_write+0x28>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800acfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acfc:	0792      	lsls	r2, r2, #30
 800acfe:	d4fa      	bmi.n	800acf6 <tcp_write+0x4c2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ad00:	899c      	ldrh	r4, [r3, #12]
 800ad02:	2008      	movs	r0, #8
 800ad04:	f7fc f864 	bl	8006dd0 <lwip_htons>
 800ad08:	68eb      	ldr	r3, [r5, #12]
 800ad0a:	4304      	orrs	r4, r0
 800ad0c:	819c      	strh	r4, [r3, #12]
 800ad0e:	e7f2      	b.n	800acf6 <tcp_write+0x4c2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ad10:	f04f 0b00 	mov.w	fp, #0
 800ad14:	e722      	b.n	800ab5c <tcp_write+0x328>
    return ERR_CONN;
 800ad16:	f06f 000a 	mvn.w	r0, #10
 800ad1a:	e59f      	b.n	800a85c <tcp_write+0x28>
    pos += seglen;
 800ad1c:	f04f 0b00 	mov.w	fp, #0
 800ad20:	46d9      	mov	r9, fp
 800ad22:	e763      	b.n	800abec <tcp_write+0x3b8>
 800ad24:	0800fe51 	.word	0x0800fe51
 800ad28:	08010173 	.word	0x08010173
 800ad2c:	0800e45a 	.word	0x0800e45a
 800ad30:	080101ff 	.word	0x080101ff
 800ad34:	08010181 	.word	0x08010181
 800ad38:	08010192 	.word	0x08010192
 800ad3c:	080101ca 	.word	0x080101ca

0800ad40 <tcp_split_unsent_seg>:
{
 800ad40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ad46:	4606      	mov	r6, r0
 800ad48:	b930      	cbnz	r0, 800ad58 <tcp_split_unsent_seg+0x18>
 800ad4a:	4b5d      	ldr	r3, [pc, #372]	@ (800aec0 <tcp_split_unsent_seg+0x180>)
 800ad4c:	f240 324b 	movw	r2, #843	@ 0x34b
 800ad50:	495c      	ldr	r1, [pc, #368]	@ (800aec4 <tcp_split_unsent_seg+0x184>)
 800ad52:	485d      	ldr	r0, [pc, #372]	@ (800aec8 <tcp_split_unsent_seg+0x188>)
 800ad54:	f002 fbfa 	bl	800d54c <iprintf>
  useg = pcb->unsent;
 800ad58:	6ef4      	ldr	r4, [r6, #108]	@ 0x6c
  if (useg == NULL) {
 800ad5a:	2c00      	cmp	r4, #0
 800ad5c:	f000 80ac 	beq.w	800aeb8 <tcp_split_unsent_seg+0x178>
  if (split == 0) {
 800ad60:	b95d      	cbnz	r5, 800ad7a <tcp_split_unsent_seg+0x3a>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ad62:	4b57      	ldr	r3, [pc, #348]	@ (800aec0 <tcp_split_unsent_seg+0x180>)
 800ad64:	f240 3253 	movw	r2, #851	@ 0x353
 800ad68:	4958      	ldr	r1, [pc, #352]	@ (800aecc <tcp_split_unsent_seg+0x18c>)
 800ad6a:	4857      	ldr	r0, [pc, #348]	@ (800aec8 <tcp_split_unsent_seg+0x188>)
 800ad6c:	f002 fbee 	bl	800d54c <iprintf>
    return ERR_VAL;
 800ad70:	f06f 0005 	mvn.w	r0, #5
}
 800ad74:	b003      	add	sp, #12
 800ad76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800ad7a:	8923      	ldrh	r3, [r4, #8]
 800ad7c:	42ab      	cmp	r3, r5
 800ad7e:	f240 8096 	bls.w	800aeae <tcp_split_unsent_seg+0x16e>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ad82:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 800ad84:	42ab      	cmp	r3, r5
 800ad86:	d20f      	bcs.n	800ada8 <tcp_split_unsent_seg+0x68>
 800ad88:	4b4d      	ldr	r3, [pc, #308]	@ (800aec0 <tcp_split_unsent_seg+0x180>)
 800ad8a:	f240 325b 	movw	r2, #859	@ 0x35b
 800ad8e:	4950      	ldr	r1, [pc, #320]	@ (800aed0 <tcp_split_unsent_seg+0x190>)
 800ad90:	484d      	ldr	r0, [pc, #308]	@ (800aec8 <tcp_split_unsent_seg+0x188>)
 800ad92:	f002 fbdb 	bl	800d54c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ad96:	8923      	ldrh	r3, [r4, #8]
 800ad98:	b933      	cbnz	r3, 800ada8 <tcp_split_unsent_seg+0x68>
 800ad9a:	4b49      	ldr	r3, [pc, #292]	@ (800aec0 <tcp_split_unsent_seg+0x180>)
 800ad9c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800ada0:	494c      	ldr	r1, [pc, #304]	@ (800aed4 <tcp_split_unsent_seg+0x194>)
 800ada2:	4849      	ldr	r0, [pc, #292]	@ (800aec8 <tcp_split_unsent_seg+0x188>)
 800ada4:	f002 fbd2 	bl	800d54c <iprintf>
  optflags = useg->flags;
 800ada8:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800adac:	f44f 7220 	mov.w	r2, #640	@ 0x280
  remainder = useg->len - split;
 800adb0:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800adb4:	2036      	movs	r0, #54	@ 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800adb6:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800adba:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800adbe:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800adc2:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800adc6:	fa17 f181 	uxtah	r1, r7, r1
 800adca:	b289      	uxth	r1, r1
 800adcc:	f7fc fdfa 	bl	80079c4 <pbuf_alloc>
  if (p == NULL) {
 800add0:	4681      	mov	r9, r0
 800add2:	2800      	cmp	r0, #0
 800add4:	d070      	beq.n	800aeb8 <tcp_split_unsent_seg+0x178>
  offset = useg->p->tot_len - useg->len + split;
 800add6:	6860      	ldr	r0, [r4, #4]
 800add8:	8922      	ldrh	r2, [r4, #8]
 800adda:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800addc:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800ade0:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ade2:	4642      	mov	r2, r8
 800ade4:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800ade6:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ade8:	b29b      	uxth	r3, r3
 800adea:	f7fc ffb5 	bl	8007d58 <pbuf_copy_partial>
 800adee:	4540      	cmp	r0, r8
 800adf0:	d15f      	bne.n	800aeb2 <tcp_split_unsent_seg+0x172>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800adf2:	68e3      	ldr	r3, [r4, #12]
 800adf4:	8998      	ldrh	r0, [r3, #12]
 800adf6:	f7fb ffeb 	bl	8006dd0 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800adfa:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800adfe:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800ae00:	bf16      	itet	ne
 800ae02:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ae06:	f007 073f 	andeq.w	r7, r7, #63	@ 0x3f
    split_flags &= ~TCP_PSH;
 800ae0a:	f007 0737 	andne.w	r7, r7, #55	@ 0x37
  if (split_flags & TCP_FIN) {
 800ae0e:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ae10:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800ae12:	bf48      	it	mi
 800ae14:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ae18:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800ae1a:	bf48      	it	mi
 800ae1c:	f007 07fe 	andmi.w	r7, r7, #254	@ 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ae20:	f7fb ffd9 	bl	8006dd6 <lwip_htonl>
 800ae24:	4642      	mov	r2, r8
 800ae26:	182b      	adds	r3, r5, r0
 800ae28:	4649      	mov	r1, r9
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	f8cd b000 	str.w	fp, [sp]
 800ae30:	f7ff fbe2 	bl	800a5f8 <tcp_create_segment>
  if (seg == NULL) {
 800ae34:	4680      	mov	r8, r0
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d03b      	beq.n	800aeb2 <tcp_split_unsent_seg+0x172>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ae3a:	6860      	ldr	r0, [r4, #4]
 800ae3c:	eba5 050a 	sub.w	r5, r5, sl
 800ae40:	f7fc feaa 	bl	8007b98 <pbuf_clen>
 800ae44:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800ae48:	fa1f f985 	uxth.w	r9, r5
 800ae4c:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ae4e:	6860      	ldr	r0, [r4, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ae50:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ae54:	8903      	ldrh	r3, [r0, #8]
 800ae56:	fa13 f585 	uxtah	r5, r3, r5
 800ae5a:	b2a9      	uxth	r1, r5
 800ae5c:	f7fc fe44 	bl	8007ae8 <pbuf_realloc>
  useg->len -= remainder;
 800ae60:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ae62:	4638      	mov	r0, r7
  useg->len -= remainder;
 800ae64:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ae66:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800ae68:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ae6c:	899d      	ldrh	r5, [r3, #12]
 800ae6e:	f7fb ffaf 	bl	8006dd0 <lwip_htons>
 800ae72:	68e3      	ldr	r3, [r4, #12]
 800ae74:	4305      	orrs	r5, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ae76:	6860      	ldr	r0, [r4, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ae78:	819d      	strh	r5, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ae7a:	f7fc fe8d 	bl	8007b98 <pbuf_clen>
 800ae7e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800ae82:	4418      	add	r0, r3
 800ae84:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ae88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ae8c:	f7fc fe84 	bl	8007b98 <pbuf_clen>
 800ae90:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800ae94:	4418      	add	r0, r3
  seg->next = useg->next;
 800ae96:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ae98:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  seg->next = useg->next;
 800ae9c:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800aea0:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800aea4:	f8d8 3000 	ldr.w	r3, [r8]
 800aea8:	b90b      	cbnz	r3, 800aeae <tcp_split_unsent_seg+0x16e>
    pcb->unsent_oversize = 0;
 800aeaa:	f8a6 3068 	strh.w	r3, [r6, #104]	@ 0x68
    return ERR_OK;
 800aeae:	2000      	movs	r0, #0
 800aeb0:	e760      	b.n	800ad74 <tcp_split_unsent_seg+0x34>
    pbuf_free(p);
 800aeb2:	4648      	mov	r0, r9
 800aeb4:	f7fc fd1c 	bl	80078f0 <pbuf_free>
    return ERR_MEM;
 800aeb8:	f04f 30ff 	mov.w	r0, #4294967295
 800aebc:	e75a      	b.n	800ad74 <tcp_split_unsent_seg+0x34>
 800aebe:	bf00      	nop
 800aec0:	0800fe51 	.word	0x0800fe51
 800aec4:	0801021d 	.word	0x0801021d
 800aec8:	0800e45a 	.word	0x0800e45a
 800aecc:	0801023f 	.word	0x0801023f
 800aed0:	08010261 	.word	0x08010261
 800aed4:	0801026e 	.word	0x0801026e

0800aed8 <tcp_enqueue_flags>:
{
 800aed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aedc:	f011 0803 	ands.w	r8, r1, #3
{
 800aee0:	4604      	mov	r4, r0
 800aee2:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aee4:	d106      	bne.n	800aef4 <tcp_enqueue_flags+0x1c>
 800aee6:	4b3e      	ldr	r3, [pc, #248]	@ (800afe0 <tcp_enqueue_flags+0x108>)
 800aee8:	f240 4211 	movw	r2, #1041	@ 0x411
 800aeec:	493d      	ldr	r1, [pc, #244]	@ (800afe4 <tcp_enqueue_flags+0x10c>)
 800aeee:	483e      	ldr	r0, [pc, #248]	@ (800afe8 <tcp_enqueue_flags+0x110>)
 800aef0:	f002 fb2c 	bl	800d54c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800aef4:	b934      	cbnz	r4, 800af04 <tcp_enqueue_flags+0x2c>
 800aef6:	4b3a      	ldr	r3, [pc, #232]	@ (800afe0 <tcp_enqueue_flags+0x108>)
 800aef8:	f240 4213 	movw	r2, #1043	@ 0x413
 800aefc:	493b      	ldr	r1, [pc, #236]	@ (800afec <tcp_enqueue_flags+0x114>)
 800aefe:	483a      	ldr	r0, [pc, #232]	@ (800afe8 <tcp_enqueue_flags+0x110>)
 800af00:	f002 fb24 	bl	800d54c <iprintf>
  if (flags & TCP_SYN) {
 800af04:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800af08:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800af0c:	2036      	movs	r0, #54	@ 0x36
 800af0e:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800af12:	4649      	mov	r1, r9
 800af14:	f7fc fd56 	bl	80079c4 <pbuf_alloc>
 800af18:	4605      	mov	r5, r0
 800af1a:	b940      	cbnz	r0, 800af2e <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800af1c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800af1e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800af22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af26:	8363      	strh	r3, [r4, #26]
}
 800af28:	b003      	add	sp, #12
 800af2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800af2e:	8943      	ldrh	r3, [r0, #10]
 800af30:	454b      	cmp	r3, r9
 800af32:	d206      	bcs.n	800af42 <tcp_enqueue_flags+0x6a>
 800af34:	4b2a      	ldr	r3, [pc, #168]	@ (800afe0 <tcp_enqueue_flags+0x108>)
 800af36:	f240 4239 	movw	r2, #1081	@ 0x439
 800af3a:	492d      	ldr	r1, [pc, #180]	@ (800aff0 <tcp_enqueue_flags+0x118>)
 800af3c:	482a      	ldr	r0, [pc, #168]	@ (800afe8 <tcp_enqueue_flags+0x110>)
 800af3e:	f002 fb05 	bl	800d54c <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800af42:	4629      	mov	r1, r5
 800af44:	9700      	str	r7, [sp, #0]
 800af46:	4632      	mov	r2, r6
 800af48:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800af4a:	4620      	mov	r0, r4
 800af4c:	f7ff fb54 	bl	800a5f8 <tcp_create_segment>
 800af50:	4605      	mov	r5, r0
 800af52:	2800      	cmp	r0, #0
 800af54:	d0e2      	beq.n	800af1c <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800af56:	68c3      	ldr	r3, [r0, #12]
 800af58:	079a      	lsls	r2, r3, #30
 800af5a:	d006      	beq.n	800af6a <tcp_enqueue_flags+0x92>
 800af5c:	4b20      	ldr	r3, [pc, #128]	@ (800afe0 <tcp_enqueue_flags+0x108>)
 800af5e:	f240 4242 	movw	r2, #1090	@ 0x442
 800af62:	4924      	ldr	r1, [pc, #144]	@ (800aff4 <tcp_enqueue_flags+0x11c>)
 800af64:	4820      	ldr	r0, [pc, #128]	@ (800afe8 <tcp_enqueue_flags+0x110>)
 800af66:	f002 faf1 	bl	800d54c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800af6a:	892b      	ldrh	r3, [r5, #8]
 800af6c:	b133      	cbz	r3, 800af7c <tcp_enqueue_flags+0xa4>
 800af6e:	4b1c      	ldr	r3, [pc, #112]	@ (800afe0 <tcp_enqueue_flags+0x108>)
 800af70:	f240 4243 	movw	r2, #1091	@ 0x443
 800af74:	4920      	ldr	r1, [pc, #128]	@ (800aff8 <tcp_enqueue_flags+0x120>)
 800af76:	481c      	ldr	r0, [pc, #112]	@ (800afe8 <tcp_enqueue_flags+0x110>)
 800af78:	f002 fae8 	bl	800d54c <iprintf>
  if (pcb->unsent == NULL) {
 800af7c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800af7e:	b9db      	cbnz	r3, 800afb8 <tcp_enqueue_flags+0xe0>
    pcb->unsent = seg;
 800af80:	66e5      	str	r5, [r4, #108]	@ 0x6c
  pcb->unsent_oversize = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800af88:	f1b8 0f00 	cmp.w	r8, #0
 800af8c:	d002      	beq.n	800af94 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800af8e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800af90:	3301      	adds	r3, #1
 800af92:	65e3      	str	r3, [r4, #92]	@ 0x5c
  if (flags & TCP_FIN) {
 800af94:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800af96:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800af98:	bf42      	ittt	mi
 800af9a:	8b63      	ldrhmi	r3, [r4, #26]
 800af9c:	f043 0320 	orrmi.w	r3, r3, #32
 800afa0:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800afa2:	f7fc fdf9 	bl	8007b98 <pbuf_clen>
 800afa6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800afaa:	4418      	add	r0, r3
 800afac:	b280      	uxth	r0, r0
 800afae:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 800afb2:	b938      	cbnz	r0, 800afc4 <tcp_enqueue_flags+0xec>
  return ERR_OK;
 800afb4:	2000      	movs	r0, #0
 800afb6:	e7b7      	b.n	800af28 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800afb8:	461a      	mov	r2, r3
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1fb      	bne.n	800afb8 <tcp_enqueue_flags+0xe0>
    useg->next = seg;
 800afc0:	6015      	str	r5, [r2, #0]
 800afc2:	e7de      	b.n	800af82 <tcp_enqueue_flags+0xaa>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800afc4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1f4      	bne.n	800afb4 <tcp_enqueue_flags+0xdc>
 800afca:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1f1      	bne.n	800afb4 <tcp_enqueue_flags+0xdc>
 800afd0:	4b03      	ldr	r3, [pc, #12]	@ (800afe0 <tcp_enqueue_flags+0x108>)
 800afd2:	f240 4265 	movw	r2, #1125	@ 0x465
 800afd6:	4909      	ldr	r1, [pc, #36]	@ (800affc <tcp_enqueue_flags+0x124>)
 800afd8:	4803      	ldr	r0, [pc, #12]	@ (800afe8 <tcp_enqueue_flags+0x110>)
 800afda:	f002 fab7 	bl	800d54c <iprintf>
 800afde:	e7e9      	b.n	800afb4 <tcp_enqueue_flags+0xdc>
 800afe0:	0800fe51 	.word	0x0800fe51
 800afe4:	0801027c 	.word	0x0801027c
 800afe8:	0800e45a 	.word	0x0800e45a
 800afec:	080102d1 	.word	0x080102d1
 800aff0:	080102f0 	.word	0x080102f0
 800aff4:	08010329 	.word	0x08010329
 800aff8:	08010341 	.word	0x08010341
 800affc:	0801036b 	.word	0x0801036b

0800b000 <tcp_send_fin>:
{
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b002:	4604      	mov	r4, r0
 800b004:	b930      	cbnz	r0, 800b014 <tcp_send_fin+0x14>
 800b006:	4b13      	ldr	r3, [pc, #76]	@ (800b054 <tcp_send_fin+0x54>)
 800b008:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b00c:	4912      	ldr	r1, [pc, #72]	@ (800b058 <tcp_send_fin+0x58>)
 800b00e:	4813      	ldr	r0, [pc, #76]	@ (800b05c <tcp_send_fin+0x5c>)
 800b010:	f002 fa9c 	bl	800d54c <iprintf>
  if (pcb->unsent != NULL) {
 800b014:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800b016:	b14d      	cbz	r5, 800b02c <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b018:	462f      	mov	r7, r5
 800b01a:	682d      	ldr	r5, [r5, #0]
 800b01c:	2d00      	cmp	r5, #0
 800b01e:	d1fb      	bne.n	800b018 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	8998      	ldrh	r0, [r3, #12]
 800b024:	f7fb fed4 	bl	8006dd0 <lwip_htons>
 800b028:	0743      	lsls	r3, r0, #29
 800b02a:	d005      	beq.n	800b038 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b02c:	4620      	mov	r0, r4
 800b02e:	2101      	movs	r1, #1
}
 800b030:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b034:	f7ff bf50 	b.w	800aed8 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2001      	movs	r0, #1
 800b03c:	899e      	ldrh	r6, [r3, #12]
 800b03e:	f7fb fec7 	bl	8006dd0 <lwip_htons>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	4306      	orrs	r6, r0
}
 800b046:	4628      	mov	r0, r5
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b048:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b04a:	8b63      	ldrh	r3, [r4, #26]
 800b04c:	f043 0320 	orr.w	r3, r3, #32
 800b050:	8363      	strh	r3, [r4, #26]
}
 800b052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b054:	0800fe51 	.word	0x0800fe51
 800b058:	08010393 	.word	0x08010393
 800b05c:	0800e45a 	.word	0x0800e45a

0800b060 <tcp_rexmit_rto_prepare>:
{
 800b060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b064:	4604      	mov	r4, r0
 800b066:	b930      	cbnz	r0, 800b076 <tcp_rexmit_rto_prepare+0x16>
 800b068:	4b1c      	ldr	r3, [pc, #112]	@ (800b0dc <tcp_rexmit_rto_prepare+0x7c>)
 800b06a:	f240 6263 	movw	r2, #1635	@ 0x663
 800b06e:	491c      	ldr	r1, [pc, #112]	@ (800b0e0 <tcp_rexmit_rto_prepare+0x80>)
 800b070:	481c      	ldr	r0, [pc, #112]	@ (800b0e4 <tcp_rexmit_rto_prepare+0x84>)
 800b072:	f002 fa6b 	bl	800d54c <iprintf>
  if (pcb->unacked == NULL) {
 800b076:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 800b078:	b945      	cbnz	r5, 800b08c <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800b07a:	f06f 0005 	mvn.w	r0, #5
}
 800b07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800b082:	f7ff fa53 	bl	800a52c <tcp_output_segment_busy>
 800b086:	2800      	cmp	r0, #0
 800b088:	d1f7      	bne.n	800b07a <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b08a:	682d      	ldr	r5, [r5, #0]
 800b08c:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800b08e:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1f6      	bne.n	800b082 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800b094:	f7ff fa4a 	bl	800a52c <tcp_output_segment_busy>
 800b098:	4606      	mov	r6, r0
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d1ed      	bne.n	800b07a <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800b09e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b0a0:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800b0a2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  pcb->unacked = NULL;
 800b0a4:	e9c4 301b 	strd	r3, r0, [r4, #108]	@ 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800b0a8:	8b63      	ldrh	r3, [r4, #26]
 800b0aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b0ae:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b0b0:	68eb      	ldr	r3, [r5, #12]
 800b0b2:	6858      	ldr	r0, [r3, #4]
 800b0b4:	f7fb fe8f 	bl	8006dd6 <lwip_htonl>
 800b0b8:	68eb      	ldr	r3, [r5, #12]
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800b0c0:	8998      	ldrh	r0, [r3, #12]
 800b0c2:	f7fb fe85 	bl	8006dd0 <lwip_htons>
 800b0c6:	f010 0303 	ands.w	r3, r0, #3
 800b0ca:	4447      	add	r7, r8
  return ERR_OK;
 800b0cc:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b0ce:	bf18      	it	ne
 800b0d0:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800b0d2:	6366      	str	r6, [r4, #52]	@ 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b0d4:	443b      	add	r3, r7
 800b0d6:	64e3      	str	r3, [r4, #76]	@ 0x4c
  return ERR_OK;
 800b0d8:	e7d1      	b.n	800b07e <tcp_rexmit_rto_prepare+0x1e>
 800b0da:	bf00      	nop
 800b0dc:	0800fe51 	.word	0x0800fe51
 800b0e0:	080103ad 	.word	0x080103ad
 800b0e4:	0800e45a 	.word	0x0800e45a

0800b0e8 <tcp_rexmit>:
{
 800b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	b930      	cbnz	r0, 800b0fc <tcp_rexmit+0x14>
 800b0ee:	4b1b      	ldr	r3, [pc, #108]	@ (800b15c <tcp_rexmit+0x74>)
 800b0f0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800b0f4:	491a      	ldr	r1, [pc, #104]	@ (800b160 <tcp_rexmit+0x78>)
 800b0f6:	481b      	ldr	r0, [pc, #108]	@ (800b164 <tcp_rexmit+0x7c>)
 800b0f8:	f002 fa28 	bl	800d54c <iprintf>
  if (pcb->unacked == NULL) {
 800b0fc:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 800b0fe:	b915      	cbnz	r5, 800b106 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800b100:	f06f 0005 	mvn.w	r0, #5
}
 800b104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800b106:	4628      	mov	r0, r5
 800b108:	f7ff fa10 	bl	800a52c <tcp_output_segment_busy>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d1f7      	bne.n	800b100 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800b110:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800b112:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
  pcb->unacked = seg->next;
 800b116:	6723      	str	r3, [r4, #112]	@ 0x70
  while (*cur_seg &&
 800b118:	6833      	ldr	r3, [r6, #0]
 800b11a:	b983      	cbnz	r3, 800b13e <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800b11c:	6833      	ldr	r3, [r6, #0]
 800b11e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800b120:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800b122:	682b      	ldr	r3, [r5, #0]
 800b124:	b90b      	cbnz	r3, 800b12a <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800b126:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if (pcb->nrtx < 0xFF) {
 800b12a:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
  pcb->rttest = 0;
 800b12e:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800b130:	2bff      	cmp	r3, #255	@ 0xff
  pcb->rttest = 0;
 800b132:	6360      	str	r0, [r4, #52]	@ 0x34
    ++pcb->nrtx;
 800b134:	bf1c      	itt	ne
 800b136:	3301      	addne	r3, #1
 800b138:	f884 3042 	strbne.w	r3, [r4, #66]	@ 0x42
  return ERR_OK;
 800b13c:	e7e2      	b.n	800b104 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	6858      	ldr	r0, [r3, #4]
 800b142:	f7fb fe48 	bl	8006dd6 <lwip_htonl>
 800b146:	68eb      	ldr	r3, [r5, #12]
 800b148:	4607      	mov	r7, r0
 800b14a:	6858      	ldr	r0, [r3, #4]
 800b14c:	f7fb fe43 	bl	8006dd6 <lwip_htonl>
 800b150:	1a3f      	subs	r7, r7, r0
  while (*cur_seg &&
 800b152:	2f00      	cmp	r7, #0
 800b154:	dae2      	bge.n	800b11c <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800b156:	6836      	ldr	r6, [r6, #0]
 800b158:	e7de      	b.n	800b118 <tcp_rexmit+0x30>
 800b15a:	bf00      	nop
 800b15c:	0800fe51 	.word	0x0800fe51
 800b160:	080103d1 	.word	0x080103d1
 800b164:	0800e45a 	.word	0x0800e45a

0800b168 <tcp_rexmit_fast>:
{
 800b168:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b16a:	4604      	mov	r4, r0
 800b16c:	b930      	cbnz	r0, 800b17c <tcp_rexmit_fast+0x14>
 800b16e:	4b15      	ldr	r3, [pc, #84]	@ (800b1c4 <tcp_rexmit_fast+0x5c>)
 800b170:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800b174:	4914      	ldr	r1, [pc, #80]	@ (800b1c8 <tcp_rexmit_fast+0x60>)
 800b176:	4815      	ldr	r0, [pc, #84]	@ (800b1cc <tcp_rexmit_fast+0x64>)
 800b178:	f002 f9e8 	bl	800d54c <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b17c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b17e:	b1fb      	cbz	r3, 800b1c0 <tcp_rexmit_fast+0x58>
 800b180:	8b63      	ldrh	r3, [r4, #26]
 800b182:	075b      	lsls	r3, r3, #29
 800b184:	d41c      	bmi.n	800b1c0 <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b186:	4620      	mov	r0, r4
 800b188:	f7ff ffae 	bl	800b0e8 <tcp_rexmit>
 800b18c:	b9c0      	cbnz	r0, 800b1c0 <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b18e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800b192:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      pcb->rtime = 0;
 800b196:	8620      	strh	r0, [r4, #48]	@ 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b198:	4299      	cmp	r1, r3
 800b19a:	bf28      	it	cs
 800b19c:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b19e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800b1a0:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b1a2:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800b1a4:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b1a8:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800b1aa:	bf88      	it	hi
 800b1ac:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b1ae:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800b1b0:	f8a4 204a 	strh.w	r2, [r4, #74]	@ 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b1b4:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b1b8:	8b63      	ldrh	r3, [r4, #26]
 800b1ba:	f043 0304 	orr.w	r3, r3, #4
 800b1be:	8363      	strh	r3, [r4, #26]
}
 800b1c0:	bd38      	pop	{r3, r4, r5, pc}
 800b1c2:	bf00      	nop
 800b1c4:	0800fe51 	.word	0x0800fe51
 800b1c8:	080103e9 	.word	0x080103e9
 800b1cc:	0800e45a 	.word	0x0800e45a

0800b1d0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d4:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800b1d8:	4606      	mov	r6, r0
 800b1da:	460f      	mov	r7, r1
 800b1dc:	4614      	mov	r4, r2
 800b1de:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b1e2:	461d      	mov	r5, r3
{
 800b1e4:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b1e8:	b933      	cbnz	r3, 800b1f8 <tcp_rst+0x28>
 800b1ea:	4b18      	ldr	r3, [pc, #96]	@ (800b24c <tcp_rst+0x7c>)
 800b1ec:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800b1f0:	4917      	ldr	r1, [pc, #92]	@ (800b250 <tcp_rst+0x80>)
 800b1f2:	4818      	ldr	r0, [pc, #96]	@ (800b254 <tcp_rst+0x84>)
 800b1f4:	f002 f9aa 	bl	800d54c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b1f8:	f1b8 0f00 	cmp.w	r8, #0
 800b1fc:	d106      	bne.n	800b20c <tcp_rst+0x3c>
 800b1fe:	4b13      	ldr	r3, [pc, #76]	@ (800b24c <tcp_rst+0x7c>)
 800b200:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800b204:	4914      	ldr	r1, [pc, #80]	@ (800b258 <tcp_rst+0x88>)
 800b206:	4813      	ldr	r0, [pc, #76]	@ (800b254 <tcp_rst+0x84>)
 800b208:	f002 f9a0 	bl	800d54c <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b20c:	4638      	mov	r0, r7
 800b20e:	f7fb fde2 	bl	8006dd6 <lwip_htonl>
 800b212:	2314      	movs	r3, #20
 800b214:	f644 0116 	movw	r1, #18454	@ 0x4816
 800b218:	4602      	mov	r2, r0
 800b21a:	f8cd a000 	str.w	sl, [sp]
 800b21e:	4620      	mov	r0, r4
 800b220:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b224:	464b      	mov	r3, r9
 800b226:	2100      	movs	r1, #0
 800b228:	f7ff fa54 	bl	800a6d4 <tcp_output_alloc_header_common.constprop.0>
 800b22c:	4604      	mov	r4, r0
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b22e:	b150      	cbz	r0, 800b246 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b230:	f7ff fab8 	bl	800a7a4 <tcp_output_fill_options.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b234:	4643      	mov	r3, r8
 800b236:	462a      	mov	r2, r5
 800b238:	4621      	mov	r1, r4
 800b23a:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b23c:	b004      	add	sp, #16
 800b23e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b242:	f7ff babf 	b.w	800a7c4 <tcp_output_control_segment>
}
 800b246:	b004      	add	sp, #16
 800b248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b24c:	0800fe51 	.word	0x0800fe51
 800b250:	08010406 	.word	0x08010406
 800b254:	0800e45a 	.word	0x0800e45a
 800b258:	08010420 	.word	0x08010420

0800b25c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b25c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b25e:	4604      	mov	r4, r0
 800b260:	b930      	cbnz	r0, 800b270 <tcp_send_empty_ack+0x14>
 800b262:	4b14      	ldr	r3, [pc, #80]	@ (800b2b4 <tcp_send_empty_ack+0x58>)
 800b264:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800b268:	4913      	ldr	r1, [pc, #76]	@ (800b2b8 <tcp_send_empty_ack+0x5c>)
 800b26a:	4814      	ldr	r0, [pc, #80]	@ (800b2bc <tcp_send_empty_ack+0x60>)
 800b26c:	f002 f96e 	bl	800d54c <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b270:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800b272:	f7fb fdb0 	bl	8006dd6 <lwip_htonl>
 800b276:	2100      	movs	r1, #0
 800b278:	4602      	mov	r2, r0
 800b27a:	4620      	mov	r0, r4
 800b27c:	f7ff fa6c 	bl	800a758 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800b280:	4605      	mov	r5, r0
 800b282:	b930      	cbnz	r0, 800b292 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b284:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b286:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b28a:	f043 0303 	orr.w	r3, r3, #3
 800b28e:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800b290:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b292:	f7ff fa87 	bl	800a7a4 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b296:	1d23      	adds	r3, r4, #4
 800b298:	4622      	mov	r2, r4
 800b29a:	4629      	mov	r1, r5
 800b29c:	4620      	mov	r0, r4
 800b29e:	f7ff fa91 	bl	800a7c4 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800b2a2:	8b63      	ldrh	r3, [r4, #26]
 800b2a4:	b118      	cbz	r0, 800b2ae <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b2a6:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	e7ef      	b.n	800b28e <tcp_send_empty_ack+0x32>
 800b2ae:	f023 0303 	bic.w	r3, r3, #3
 800b2b2:	e7fa      	b.n	800b2aa <tcp_send_empty_ack+0x4e>
 800b2b4:	0800fe51 	.word	0x0800fe51
 800b2b8:	0801043b 	.word	0x0801043b
 800b2bc:	0800e45a 	.word	0x0800e45a

0800b2c0 <tcp_output>:
{
 800b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b2c4:	4604      	mov	r4, r0
{
 800b2c6:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b2c8:	b930      	cbnz	r0, 800b2d8 <tcp_output+0x18>
 800b2ca:	4b8f      	ldr	r3, [pc, #572]	@ (800b508 <tcp_output+0x248>)
 800b2cc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b2d0:	498e      	ldr	r1, [pc, #568]	@ (800b50c <tcp_output+0x24c>)
 800b2d2:	488f      	ldr	r0, [pc, #572]	@ (800b510 <tcp_output+0x250>)
 800b2d4:	f002 f93a 	bl	800d54c <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b2d8:	7d23      	ldrb	r3, [r4, #20]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d106      	bne.n	800b2ec <tcp_output+0x2c>
 800b2de:	4b8a      	ldr	r3, [pc, #552]	@ (800b508 <tcp_output+0x248>)
 800b2e0:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b2e4:	498b      	ldr	r1, [pc, #556]	@ (800b514 <tcp_output+0x254>)
 800b2e6:	488a      	ldr	r0, [pc, #552]	@ (800b510 <tcp_output+0x250>)
 800b2e8:	f002 f930 	bl	800d54c <iprintf>
  if (tcp_input_pcb == pcb) {
 800b2ec:	4b8a      	ldr	r3, [pc, #552]	@ (800b518 <tcp_output+0x258>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	42a3      	cmp	r3, r4
 800b2f2:	f000 8171 	beq.w	800b5d8 <tcp_output+0x318>
  seg = pcb->unsent;
 800b2f6:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b2f8:	f8b4 8048 	ldrh.w	r8, [r4, #72]	@ 0x48
 800b2fc:	f8b4 6060 	ldrh.w	r6, [r4, #96]	@ 0x60
  if (seg == NULL) {
 800b300:	b94d      	cbnz	r5, 800b316 <tcp_output+0x56>
    if (pcb->flags & TF_ACK_NOW) {
 800b302:	8b63      	ldrh	r3, [r4, #26]
 800b304:	0798      	lsls	r0, r3, #30
 800b306:	f140 8163 	bpl.w	800b5d0 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800b30a:	4620      	mov	r0, r4
}
 800b30c:	b007      	add	sp, #28
 800b30e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800b312:	f7ff bfa3 	b.w	800b25c <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b316:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b318:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b31c:	b340      	cbz	r0, 800b370 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800b31e:	f7fc fa13 	bl	8007748 <netif_get_by_index>
    return ip_route(src, dst);
 800b322:	4607      	mov	r7, r0
  if (netif == NULL) {
 800b324:	2800      	cmp	r0, #0
 800b326:	f000 8170 	beq.w	800b60a <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	b90b      	cbnz	r3, 800b332 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b32e:	6843      	ldr	r3, [r0, #4]
 800b330:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b332:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b334:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b336:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b338:	bf28      	it	cs
 800b33a:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b33c:	f7fb fd4b 	bl	8006dd6 <lwip_htonl>
 800b340:	892b      	ldrh	r3, [r5, #8]
 800b342:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800b344:	1a9b      	subs	r3, r3, r2
 800b346:	4403      	add	r3, r0
 800b348:	4543      	cmp	r3, r8
 800b34a:	d915      	bls.n	800b378 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b34c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 800b350:	4543      	cmp	r3, r8
 800b352:	d1d6      	bne.n	800b302 <tcp_output+0x42>
 800b354:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1d3      	bne.n	800b302 <tcp_output+0x42>
 800b35a:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1cf      	bne.n	800b302 <tcp_output+0x42>
      pcb->persist_cnt = 0;
 800b362:	f44f 7280 	mov.w	r2, #256	@ 0x100
      pcb->persist_probe = 0;
 800b366:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
      pcb->persist_cnt = 0;
 800b36a:	f8a4 2098 	strh.w	r2, [r4, #152]	@ 0x98
 800b36e:	e7c8      	b.n	800b302 <tcp_output+0x42>
    return ip_route(src, dst);
 800b370:	4648      	mov	r0, r9
 800b372:	f001 f941 	bl	800c5f8 <ip4_route>
 800b376:	e7d4      	b.n	800b322 <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800b378:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800b37a:	6f26      	ldr	r6, [r4, #112]	@ 0x70
  pcb->persist_backoff = 0;
 800b37c:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
  if (useg != NULL) {
 800b380:	b126      	cbz	r6, 800b38c <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800b382:	4633      	mov	r3, r6
 800b384:	6836      	ldr	r6, [r6, #0]
 800b386:	2e00      	cmp	r6, #0
 800b388:	d1fb      	bne.n	800b382 <tcp_output+0xc2>
 800b38a:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800b38c:	f8df a178 	ldr.w	sl, [pc, #376]	@ 800b508 <tcp_output+0x248>
 800b390:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b510 <tcp_output+0x250>
 800b394:	e0de      	b.n	800b554 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800b396:	7d23      	ldrb	r3, [r4, #20]
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d009      	beq.n	800b3b0 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b39c:	68eb      	ldr	r3, [r5, #12]
 800b39e:	2010      	movs	r0, #16
 800b3a0:	899b      	ldrh	r3, [r3, #12]
 800b3a2:	9304      	str	r3, [sp, #16]
 800b3a4:	f7fb fd14 	bl	8006dd0 <lwip_htons>
 800b3a8:	9b04      	ldr	r3, [sp, #16]
 800b3aa:	68ea      	ldr	r2, [r5, #12]
 800b3ac:	4303      	orrs	r3, r0
 800b3ae:	8193      	strh	r3, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	f7ff f8bb 	bl	800a52c <tcp_output_segment_busy>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d170      	bne.n	800b49c <tcp_output+0x1dc>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b3ba:	68eb      	ldr	r3, [r5, #12]
 800b3bc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b3be:	9304      	str	r3, [sp, #16]
 800b3c0:	f7fb fd09 	bl	8006dd6 <lwip_htonl>
 800b3c4:	9b04      	ldr	r3, [sp, #16]
 800b3c6:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b3c8:	68eb      	ldr	r3, [r5, #12]
 800b3ca:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 800b3cc:	9304      	str	r3, [sp, #16]
 800b3ce:	f7fb fcff 	bl	8006dd0 <lwip_htons>
 800b3d2:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b3d4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b3d6:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b3d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b3da:	4413      	add	r3, r2
 800b3dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b3de:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b3e0:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b3e2:	07d2      	lsls	r2, r2, #31
 800b3e4:	d44a      	bmi.n	800b47c <tcp_output+0x1bc>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b3e6:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800b3ea:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800b3ee:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800b3f0:	bfbc      	itt	lt
 800b3f2:	2300      	movlt	r3, #0
 800b3f4:	8623      	strhlt	r3, [r4, #48]	@ 0x30
  if (pcb->rttest == 0) {
 800b3f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3f8:	b94b      	cbnz	r3, 800b40e <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800b3fa:	4948      	ldr	r1, [pc, #288]	@ (800b51c <tcp_output+0x25c>)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b3fc:	68eb      	ldr	r3, [r5, #12]
    pcb->rttest = tcp_ticks;
 800b3fe:	6809      	ldr	r1, [r1, #0]
 800b400:	9204      	str	r2, [sp, #16]
 800b402:	6361      	str	r1, [r4, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b404:	6858      	ldr	r0, [r3, #4]
 800b406:	f7fb fce6 	bl	8006dd6 <lwip_htonl>
 800b40a:	9a04      	ldr	r2, [sp, #16]
 800b40c:	63a0      	str	r0, [r4, #56]	@ 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b40e:	6869      	ldr	r1, [r5, #4]
 800b410:	68eb      	ldr	r3, [r5, #12]
 800b412:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800b414:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b418:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800b41a:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b41c:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800b41e:	ebac 0c00 	sub.w	ip, ip, r0
 800b422:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800b426:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800b42a:	ebac 0000 	sub.w	r0, ip, r0
 800b42e:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800b430:	2100      	movs	r1, #0
 800b432:	7419      	strb	r1, [r3, #16]
 800b434:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b436:	7aa9      	ldrb	r1, [r5, #10]
 800b438:	f011 0f01 	tst.w	r1, #1
 800b43c:	bf0c      	ite	eq
 800b43e:	2114      	moveq	r1, #20
 800b440:	2118      	movne	r1, #24
 800b442:	440b      	add	r3, r1
 800b444:	429a      	cmp	r2, r3
 800b446:	d006      	beq.n	800b456 <tcp_output+0x196>
 800b448:	4653      	mov	r3, sl
 800b44a:	f240 621c 	movw	r2, #1564	@ 0x61c
 800b44e:	4934      	ldr	r1, [pc, #208]	@ (800b520 <tcp_output+0x260>)
 800b450:	4658      	mov	r0, fp
 800b452:	f002 f87b 	bl	800d54c <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b456:	2306      	movs	r3, #6
 800b458:	9702      	str	r7, [sp, #8]
 800b45a:	464a      	mov	r2, r9
 800b45c:	4621      	mov	r1, r4
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	7aa3      	ldrb	r3, [r4, #10]
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	7ae3      	ldrb	r3, [r4, #11]
 800b466:	6868      	ldr	r0, [r5, #4]
 800b468:	f001 fa26 	bl	800c8b8 <ip4_output_if>
    if (err != ERR_OK) {
 800b46c:	b1b0      	cbz	r0, 800b49c <tcp_output+0x1dc>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b46e:	8b63      	ldrh	r3, [r4, #26]
 800b470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b474:	8363      	strh	r3, [r4, #26]
}
 800b476:	b007      	add	sp, #28
 800b478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b47c:	464a      	mov	r2, r9
 800b47e:	4639      	mov	r1, r7
 800b480:	f240 5092 	movw	r0, #1426	@ 0x592
 800b484:	9304      	str	r3, [sp, #16]
 800b486:	f7fc ff3b 	bl	8008300 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b48a:	f040 7001 	orr.w	r0, r0, #33816576	@ 0x2040000
 800b48e:	f7fb fca2 	bl	8006dd6 <lwip_htonl>
 800b492:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800b494:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b498:	6158      	str	r0, [r3, #20]
    opts += 1;
 800b49a:	e7a6      	b.n	800b3ea <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800b49c:	682b      	ldr	r3, [r5, #0]
 800b49e:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b4a0:	7d23      	ldrb	r3, [r4, #20]
 800b4a2:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b4a4:	bf1e      	ittt	ne
 800b4a6:	8b63      	ldrhne	r3, [r4, #26]
 800b4a8:	f023 0303 	bicne.w	r3, r3, #3
 800b4ac:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b4ae:	68eb      	ldr	r3, [r5, #12]
 800b4b0:	6858      	ldr	r0, [r3, #4]
 800b4b2:	f7fb fc90 	bl	8006dd6 <lwip_htonl>
 800b4b6:	8929      	ldrh	r1, [r5, #8]
 800b4b8:	68eb      	ldr	r3, [r5, #12]
 800b4ba:	9104      	str	r1, [sp, #16]
 800b4bc:	9005      	str	r0, [sp, #20]
 800b4be:	8998      	ldrh	r0, [r3, #12]
 800b4c0:	f7fb fc86 	bl	8006dd0 <lwip_htons>
 800b4c4:	f010 0303 	ands.w	r3, r0, #3
 800b4c8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800b4cc:	bf18      	it	ne
 800b4ce:	2301      	movne	r3, #1
 800b4d0:	440a      	add	r2, r1
 800b4d2:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b4d4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800b4d6:	1ad2      	subs	r2, r2, r3
 800b4d8:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800b4da:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800b4dc:	bfb8      	it	lt
 800b4de:	6523      	strlt	r3, [r4, #80]	@ 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800b4e0:	892b      	ldrh	r3, [r5, #8]
 800b4e2:	9304      	str	r3, [sp, #16]
 800b4e4:	8990      	ldrh	r0, [r2, #12]
 800b4e6:	f7fb fc73 	bl	8006dd0 <lwip_htons>
 800b4ea:	f010 0003 	ands.w	r0, r0, #3
 800b4ee:	9b04      	ldr	r3, [sp, #16]
 800b4f0:	bf18      	it	ne
 800b4f2:	2001      	movne	r0, #1
 800b4f4:	42d8      	cmn	r0, r3
 800b4f6:	f000 8084 	beq.w	800b602 <tcp_output+0x342>
      seg->next = NULL;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800b4fe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b500:	b983      	cbnz	r3, 800b524 <tcp_output+0x264>
        pcb->unacked = seg;
 800b502:	6725      	str	r5, [r4, #112]	@ 0x70
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b504:	462e      	mov	r6, r5
 800b506:	e022      	b.n	800b54e <tcp_output+0x28e>
 800b508:	0800fe51 	.word	0x0800fe51
 800b50c:	0801045b 	.word	0x0801045b
 800b510:	0800e45a 	.word	0x0800e45a
 800b514:	08010473 	.word	0x08010473
 800b518:	2003756c 	.word	0x2003756c
 800b51c:	20037568 	.word	0x20037568
 800b520:	080104b0 	.word	0x080104b0
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b524:	68eb      	ldr	r3, [r5, #12]
 800b526:	6858      	ldr	r0, [r3, #4]
 800b528:	f7fb fc55 	bl	8006dd6 <lwip_htonl>
 800b52c:	68f2      	ldr	r2, [r6, #12]
 800b52e:	9004      	str	r0, [sp, #16]
 800b530:	6850      	ldr	r0, [r2, #4]
 800b532:	f7fb fc50 	bl	8006dd6 <lwip_htonl>
 800b536:	9b04      	ldr	r3, [sp, #16]
 800b538:	1a1b      	subs	r3, r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	da5f      	bge.n	800b5fe <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b53e:	f104 0370 	add.w	r3, r4, #112	@ 0x70
          while (*cur_seg &&
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	2a00      	cmp	r2, #0
 800b546:	d149      	bne.n	800b5dc <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800b54c:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800b54e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  while (seg != NULL &&
 800b550:	2d00      	cmp	r5, #0
 800b552:	d03a      	beq.n	800b5ca <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b554:	68eb      	ldr	r3, [r5, #12]
 800b556:	6858      	ldr	r0, [r3, #4]
 800b558:	f7fb fc3d 	bl	8006dd6 <lwip_htonl>
 800b55c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b55e:	1ac0      	subs	r0, r0, r3
 800b560:	892b      	ldrh	r3, [r5, #8]
 800b562:	4418      	add	r0, r3
  while (seg != NULL &&
 800b564:	4540      	cmp	r0, r8
 800b566:	d82e      	bhi.n	800b5c6 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800b568:	68eb      	ldr	r3, [r5, #12]
 800b56a:	8998      	ldrh	r0, [r3, #12]
 800b56c:	f7fb fc30 	bl	8006dd0 <lwip_htons>
 800b570:	0741      	lsls	r1, r0, #29
 800b572:	d506      	bpl.n	800b582 <tcp_output+0x2c2>
 800b574:	4653      	mov	r3, sl
 800b576:	f240 5236 	movw	r2, #1334	@ 0x536
 800b57a:	4925      	ldr	r1, [pc, #148]	@ (800b610 <tcp_output+0x350>)
 800b57c:	4658      	mov	r0, fp
 800b57e:	f001 ffe5 	bl	800d54c <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b582:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b584:	2b00      	cmp	r3, #0
 800b586:	f43f af06 	beq.w	800b396 <tcp_output+0xd6>
 800b58a:	8b62      	ldrh	r2, [r4, #26]
 800b58c:	f012 0f44 	tst.w	r2, #68	@ 0x44
 800b590:	f47f af01 	bne.w	800b396 <tcp_output+0xd6>
 800b594:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b596:	b143      	cbz	r3, 800b5aa <tcp_output+0x2ea>
 800b598:	6819      	ldr	r1, [r3, #0]
 800b59a:	2900      	cmp	r1, #0
 800b59c:	f47f aefb 	bne.w	800b396 <tcp_output+0xd6>
 800b5a0:	8919      	ldrh	r1, [r3, #8]
 800b5a2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800b5a4:	4299      	cmp	r1, r3
 800b5a6:	f4bf aef6 	bcs.w	800b396 <tcp_output+0xd6>
 800b5aa:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f43f aef1 	beq.w	800b396 <tcp_output+0xd6>
 800b5b4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800b5b8:	2b0e      	cmp	r3, #14
 800b5ba:	f63f aeec 	bhi.w	800b396 <tcp_output+0xd6>
 800b5be:	f012 0fa0 	tst.w	r2, #160	@ 0xa0
 800b5c2:	f47f aee8 	bne.w	800b396 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800b5c6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b5c8:	b913      	cbnz	r3, 800b5d0 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b5d0:	8b63      	ldrh	r3, [r4, #26]
 800b5d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5d6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800b5d8:	2000      	movs	r0, #0
 800b5da:	e74c      	b.n	800b476 <tcp_output+0x1b6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b5dc:	68d2      	ldr	r2, [r2, #12]
 800b5de:	9305      	str	r3, [sp, #20]
 800b5e0:	6850      	ldr	r0, [r2, #4]
 800b5e2:	f7fb fbf8 	bl	8006dd6 <lwip_htonl>
 800b5e6:	68e9      	ldr	r1, [r5, #12]
 800b5e8:	9004      	str	r0, [sp, #16]
 800b5ea:	6848      	ldr	r0, [r1, #4]
 800b5ec:	f7fb fbf3 	bl	8006dd6 <lwip_htonl>
 800b5f0:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800b5f2:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b5f4:	1a12      	subs	r2, r2, r0
          while (*cur_seg &&
 800b5f6:	2a00      	cmp	r2, #0
 800b5f8:	daa6      	bge.n	800b548 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	e7a1      	b.n	800b542 <tcp_output+0x282>
          useg->next = seg;
 800b5fe:	6035      	str	r5, [r6, #0]
          useg = useg->next;
 800b600:	e780      	b.n	800b504 <tcp_output+0x244>
      tcp_seg_free(seg);
 800b602:	4628      	mov	r0, r5
 800b604:	f7fc fdb2 	bl	800816c <tcp_seg_free>
 800b608:	e7a1      	b.n	800b54e <tcp_output+0x28e>
    return ERR_RTE;
 800b60a:	f06f 0003 	mvn.w	r0, #3
 800b60e:	e732      	b.n	800b476 <tcp_output+0x1b6>
 800b610:	08010499 	.word	0x08010499

0800b614 <tcp_rexmit_rto_commit>:
{
 800b614:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b616:	4604      	mov	r4, r0
 800b618:	b930      	cbnz	r0, 800b628 <tcp_rexmit_rto_commit+0x14>
 800b61a:	4b09      	ldr	r3, [pc, #36]	@ (800b640 <tcp_rexmit_rto_commit+0x2c>)
 800b61c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b620:	4908      	ldr	r1, [pc, #32]	@ (800b644 <tcp_rexmit_rto_commit+0x30>)
 800b622:	4809      	ldr	r0, [pc, #36]	@ (800b648 <tcp_rexmit_rto_commit+0x34>)
 800b624:	f001 ff92 	bl	800d54c <iprintf>
  if (pcb->nrtx < 0xFF) {
 800b628:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 800b62c:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800b62e:	2bff      	cmp	r3, #255	@ 0xff
    ++pcb->nrtx;
 800b630:	bf1c      	itt	ne
 800b632:	3301      	addne	r3, #1
 800b634:	f884 3042 	strbne.w	r3, [r4, #66]	@ 0x42
}
 800b638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800b63c:	f7ff be40 	b.w	800b2c0 <tcp_output>
 800b640:	0800fe51 	.word	0x0800fe51
 800b644:	080104c3 	.word	0x080104c3
 800b648:	0800e45a 	.word	0x0800e45a

0800b64c <tcp_rexmit_rto>:
{
 800b64c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b64e:	4604      	mov	r4, r0
 800b650:	b930      	cbnz	r0, 800b660 <tcp_rexmit_rto+0x14>
 800b652:	4b08      	ldr	r3, [pc, #32]	@ (800b674 <tcp_rexmit_rto+0x28>)
 800b654:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800b658:	4907      	ldr	r1, [pc, #28]	@ (800b678 <tcp_rexmit_rto+0x2c>)
 800b65a:	4808      	ldr	r0, [pc, #32]	@ (800b67c <tcp_rexmit_rto+0x30>)
 800b65c:	f001 ff76 	bl	800d54c <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b660:	4620      	mov	r0, r4
 800b662:	f7ff fcfd 	bl	800b060 <tcp_rexmit_rto_prepare>
 800b666:	b920      	cbnz	r0, 800b672 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800b668:	4620      	mov	r0, r4
}
 800b66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800b66e:	f7ff bfd1 	b.w	800b614 <tcp_rexmit_rto_commit>
}
 800b672:	bd10      	pop	{r4, pc}
 800b674:	0800fe51 	.word	0x0800fe51
 800b678:	080104e6 	.word	0x080104e6
 800b67c:	0800e45a 	.word	0x0800e45a

0800b680 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b680:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b682:	4604      	mov	r4, r0
 800b684:	b930      	cbnz	r0, 800b694 <tcp_keepalive+0x14>
 800b686:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c4 <tcp_keepalive+0x44>)
 800b688:	f640 0224 	movw	r2, #2084	@ 0x824
 800b68c:	490e      	ldr	r1, [pc, #56]	@ (800b6c8 <tcp_keepalive+0x48>)
 800b68e:	480f      	ldr	r0, [pc, #60]	@ (800b6cc <tcp_keepalive+0x4c>)
 800b690:	f001 ff5c 	bl	800d54c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b694:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800b696:	3801      	subs	r0, #1
 800b698:	f7fb fb9d 	bl	8006dd6 <lwip_htonl>
 800b69c:	2100      	movs	r1, #0
 800b69e:	4602      	mov	r2, r0
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7ff f859 	bl	800a758 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	b148      	cbz	r0, 800b6be <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b6aa:	f7ff f87b 	bl	800a7a4 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b6ae:	1d23      	adds	r3, r4, #4
 800b6b0:	4622      	mov	r2, r4
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800b6b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b6ba:	f7ff b883 	b.w	800a7c4 <tcp_output_control_segment>
}
 800b6be:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c2:	bd70      	pop	{r4, r5, r6, pc}
 800b6c4:	0800fe51 	.word	0x0800fe51
 800b6c8:	08010502 	.word	0x08010502
 800b6cc:	0800e45a 	.word	0x0800e45a

0800b6d0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	b930      	cbnz	r0, 800b6e6 <tcp_zero_window_probe+0x16>
 800b6d8:	4b2c      	ldr	r3, [pc, #176]	@ (800b78c <tcp_zero_window_probe+0xbc>)
 800b6da:	f640 024f 	movw	r2, #2127	@ 0x84f
 800b6de:	492c      	ldr	r1, [pc, #176]	@ (800b790 <tcp_zero_window_probe+0xc0>)
 800b6e0:	482c      	ldr	r0, [pc, #176]	@ (800b794 <tcp_zero_window_probe+0xc4>)
 800b6e2:	f001 ff33 	bl	800d54c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b6e6:	6ef5      	ldr	r5, [r6, #108]	@ 0x6c
  if (seg == NULL) {
 800b6e8:	2d00      	cmp	r5, #0
 800b6ea:	d049      	beq.n	800b780 <tcp_zero_window_probe+0xb0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b6ec:	f896 309a 	ldrb.w	r3, [r6, #154]	@ 0x9a
 800b6f0:	2bff      	cmp	r3, #255	@ 0xff
    ++pcb->persist_probe;
 800b6f2:	bf1c      	itt	ne
 800b6f4:	3301      	addne	r3, #1
 800b6f6:	f886 309a 	strbne.w	r3, [r6, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b6fa:	68eb      	ldr	r3, [r5, #12]
 800b6fc:	8998      	ldrh	r0, [r3, #12]
 800b6fe:	f7fb fb67 	bl	8006dd0 <lwip_htons>
 800b702:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b706:	68eb      	ldr	r3, [r5, #12]
 800b708:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b70a:	bf18      	it	ne
 800b70c:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b70e:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b710:	bf1c      	itt	ne
 800b712:	fab4 f484 	clzne	r4, r4
 800b716:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b718:	f084 0101 	eor.w	r1, r4, #1
 800b71c:	f7ff f81c 	bl	800a758 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800b720:	4607      	mov	r7, r0
 800b722:	b380      	cbz	r0, 800b786 <tcp_zero_window_probe+0xb6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b724:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800b728:	b1fc      	cbz	r4, 800b76a <tcp_zero_window_probe+0x9a>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b72a:	f8b8 400c 	ldrh.w	r4, [r8, #12]
 800b72e:	2011      	movs	r0, #17
 800b730:	f7fb fb4e 	bl	8006dd0 <lwip_htons>
 800b734:	f424 547c 	bic.w	r4, r4, #16128	@ 0x3f00
 800b738:	b2a4      	uxth	r4, r4
 800b73a:	4320      	orrs	r0, r4
 800b73c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b740:	68eb      	ldr	r3, [r5, #12]
 800b742:	6858      	ldr	r0, [r3, #4]
 800b744:	f7fb fb47 	bl	8006dd6 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b748:	6d33      	ldr	r3, [r6, #80]	@ 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b74a:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b74c:	1a1b      	subs	r3, r3, r0
 800b74e:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800b750:	bfb8      	it	lt
 800b752:	6530      	strlt	r0, [r6, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b754:	4638      	mov	r0, r7
 800b756:	f7ff f825 	bl	800a7a4 <tcp_output_fill_options.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b75a:	1d33      	adds	r3, r6, #4
 800b75c:	4632      	mov	r2, r6
 800b75e:	4639      	mov	r1, r7
 800b760:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800b762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b766:	f7ff b82d 	b.w	800a7c4 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b76a:	6868      	ldr	r0, [r5, #4]
 800b76c:	f108 0114 	add.w	r1, r8, #20
 800b770:	892a      	ldrh	r2, [r5, #8]
 800b772:	8903      	ldrh	r3, [r0, #8]
 800b774:	1a9b      	subs	r3, r3, r2
 800b776:	2201      	movs	r2, #1
 800b778:	b29b      	uxth	r3, r3
 800b77a:	f7fc faed 	bl	8007d58 <pbuf_copy_partial>
 800b77e:	e7df      	b.n	800b740 <tcp_zero_window_probe+0x70>
    return ERR_OK;
 800b780:	4628      	mov	r0, r5
}
 800b782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800b786:	f04f 30ff 	mov.w	r0, #4294967295
 800b78a:	e7fa      	b.n	800b782 <tcp_zero_window_probe+0xb2>
 800b78c:	0800fe51 	.word	0x0800fe51
 800b790:	0801051d 	.word	0x0801051d
 800b794:	0800e45a 	.word	0x0800e45a

0800b798 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b798:	b570      	push	{r4, r5, r6, lr}
 800b79a:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b79c:	200a      	movs	r0, #10
{
 800b79e:	460e      	mov	r6, r1
 800b7a0:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b7a2:	f7fb fe13 	bl	80073cc <memp_malloc>
  if (timeout == NULL) {
 800b7a6:	b938      	cbnz	r0, 800b7b8 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b7a8:	4b10      	ldr	r3, [pc, #64]	@ (800b7ec <sys_timeout_abs+0x54>)
 800b7aa:	22be      	movs	r2, #190	@ 0xbe
 800b7ac:	4910      	ldr	r1, [pc, #64]	@ (800b7f0 <sys_timeout_abs+0x58>)
 800b7ae:	4811      	ldr	r0, [pc, #68]	@ (800b7f4 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800b7b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b7b4:	f001 beca 	b.w	800d54c <iprintf>
  timeout->next = NULL;
 800b7b8:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800b7ba:	4a0f      	ldr	r2, [pc, #60]	@ (800b7f8 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800b7bc:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800b7be:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800b7c0:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800b7c2:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800b7c6:	b90b      	cbnz	r3, 800b7cc <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800b7c8:	6010      	str	r0, [r2, #0]
}
 800b7ca:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b7cc:	6859      	ldr	r1, [r3, #4]
 800b7ce:	1a61      	subs	r1, r4, r1
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	da01      	bge.n	800b7d8 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800b7d4:	6003      	str	r3, [r0, #0]
 800b7d6:	e7f7      	b.n	800b7c8 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b7d8:	4619      	mov	r1, r3
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	b11b      	cbz	r3, 800b7e6 <sys_timeout_abs+0x4e>
 800b7de:	685a      	ldr	r2, [r3, #4]
 800b7e0:	1aa2      	subs	r2, r4, r2
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	daf8      	bge.n	800b7d8 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800b7e6:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800b7e8:	6008      	str	r0, [r1, #0]
        break;
 800b7ea:	e7ee      	b.n	800b7ca <sys_timeout_abs+0x32>
 800b7ec:	08010540 	.word	0x08010540
 800b7f0:	08010574 	.word	0x08010574
 800b7f4:	0800e45a 	.word	0x0800e45a
 800b7f8:	200375ac 	.word	0x200375ac

0800b7fc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b7fc:	b570      	push	{r4, r5, r6, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b7fe:	6843      	ldr	r3, [r0, #4]
{
 800b800:	4604      	mov	r4, r0
  cyclic->handler();
 800b802:	4798      	blx	r3

  now = sys_now();
 800b804:	f7f7 fa78 	bl	8002cf8 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b808:	4b07      	ldr	r3, [pc, #28]	@ (800b828 <lwip_cyclic_timer+0x2c>)
  now = sys_now();
 800b80a:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b80c:	6826      	ldr	r6, [r4, #0]
 800b80e:	6818      	ldr	r0, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b810:	4622      	mov	r2, r4
 800b812:	4906      	ldr	r1, [pc, #24]	@ (800b82c <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b814:	4430      	add	r0, r6
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b816:	1b43      	subs	r3, r0, r5
 800b818:	2b00      	cmp	r3, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b81a:	bfb8      	it	lt
 800b81c:	1970      	addlt	r0, r6, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b81e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b822:	f7ff bfb9 	b.w	800b798 <sys_timeout_abs>
 800b826:	bf00      	nop
 800b828:	200375a8 	.word	0x200375a8
 800b82c:	0800b7fd 	.word	0x0800b7fd

0800b830 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b830:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
{
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	4604      	mov	r4, r0
 800b838:	460d      	mov	r5, r1
 800b83a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b83c:	d306      	bcc.n	800b84c <sys_timeout+0x1c>
 800b83e:	4b08      	ldr	r3, [pc, #32]	@ (800b860 <sys_timeout+0x30>)
 800b840:	f240 1229 	movw	r2, #297	@ 0x129
 800b844:	4907      	ldr	r1, [pc, #28]	@ (800b864 <sys_timeout+0x34>)
 800b846:	4808      	ldr	r0, [pc, #32]	@ (800b868 <sys_timeout+0x38>)
 800b848:	f001 fe80 	bl	800d54c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b84c:	f7f7 fa54 	bl	8002cf8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b850:	4632      	mov	r2, r6
 800b852:	4629      	mov	r1, r5
 800b854:	4420      	add	r0, r4
#endif
}
 800b856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b85a:	f7ff bf9d 	b.w	800b798 <sys_timeout_abs>
 800b85e:	bf00      	nop
 800b860:	08010540 	.word	0x08010540
 800b864:	080105b1 	.word	0x080105b1
 800b868:	0800e45a 	.word	0x0800e45a

0800b86c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b86c:	4b08      	ldr	r3, [pc, #32]	@ (800b890 <tcp_timer_needed+0x24>)
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	b962      	cbnz	r2, 800b88c <tcp_timer_needed+0x20>
 800b872:	4a08      	ldr	r2, [pc, #32]	@ (800b894 <tcp_timer_needed+0x28>)
 800b874:	6812      	ldr	r2, [r2, #0]
 800b876:	b912      	cbnz	r2, 800b87e <tcp_timer_needed+0x12>
 800b878:	4a07      	ldr	r2, [pc, #28]	@ (800b898 <tcp_timer_needed+0x2c>)
 800b87a:	6812      	ldr	r2, [r2, #0]
 800b87c:	b132      	cbz	r2, 800b88c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800b87e:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b880:	4906      	ldr	r1, [pc, #24]	@ (800b89c <tcp_timer_needed+0x30>)
 800b882:	20fa      	movs	r0, #250	@ 0xfa
    tcpip_tcp_timer_active = 1;
 800b884:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b886:	2200      	movs	r2, #0
 800b888:	f7ff bfd2 	b.w	800b830 <sys_timeout>
}
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	200375a4 	.word	0x200375a4
 800b894:	2003755c 	.word	0x2003755c
 800b898:	20037558 	.word	0x20037558
 800b89c:	0800b8a1 	.word	0x0800b8a1

0800b8a0 <tcpip_tcp_timer>:
{
 800b8a0:	b508      	push	{r3, lr}
  tcp_tmr();
 800b8a2:	f7fd fb5f 	bl	8008f64 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b8a6:	4b08      	ldr	r3, [pc, #32]	@ (800b8c8 <tcpip_tcp_timer+0x28>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	b913      	cbnz	r3, 800b8b2 <tcpip_tcp_timer+0x12>
 800b8ac:	4b07      	ldr	r3, [pc, #28]	@ (800b8cc <tcpip_tcp_timer+0x2c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	b133      	cbz	r3, 800b8c0 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	4906      	ldr	r1, [pc, #24]	@ (800b8d0 <tcpip_tcp_timer+0x30>)
 800b8b6:	20fa      	movs	r0, #250	@ 0xfa
}
 800b8b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b8bc:	f7ff bfb8 	b.w	800b830 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800b8c0:	4a04      	ldr	r2, [pc, #16]	@ (800b8d4 <tcpip_tcp_timer+0x34>)
 800b8c2:	6013      	str	r3, [r2, #0]
}
 800b8c4:	bd08      	pop	{r3, pc}
 800b8c6:	bf00      	nop
 800b8c8:	2003755c 	.word	0x2003755c
 800b8cc:	20037558 	.word	0x20037558
 800b8d0:	0800b8a1 	.word	0x0800b8a1
 800b8d4:	200375a4 	.word	0x200375a4

0800b8d8 <sys_timeouts_init>:
{
 800b8d8:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b8da:	4d08      	ldr	r5, [pc, #32]	@ (800b8fc <sys_timeouts_init+0x24>)
 800b8dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b8e0:	4c07      	ldr	r4, [pc, #28]	@ (800b900 <sys_timeouts_init+0x28>)
 800b8e2:	462a      	mov	r2, r5
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	f7ff ffa3 	bl	800b830 <sys_timeout>
 800b8ea:	f105 0208 	add.w	r2, r5, #8
 800b8ee:	4621      	mov	r1, r4
 800b8f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
}
 800b8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b8f8:	f7ff bf9a 	b.w	800b830 <sys_timeout>
 800b8fc:	080105f0 	.word	0x080105f0
 800b900:	0800b7fd 	.word	0x0800b7fd

0800b904 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b908:	f7f7 f9f6 	bl	8002cf8 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800b90c:	4e0c      	ldr	r6, [pc, #48]	@ (800b940 <sys_check_timeouts+0x3c>)
  now = sys_now();
 800b90e:	4604      	mov	r4, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800b910:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 800b944 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 800b914:	6831      	ldr	r1, [r6, #0]
    if (tmptimeout == NULL) {
 800b916:	b189      	cbz	r1, 800b93c <sys_check_timeouts+0x38>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b918:	684b      	ldr	r3, [r1, #4]
 800b91a:	1ae2      	subs	r2, r4, r3
 800b91c:	2a00      	cmp	r2, #0
 800b91e:	db0d      	blt.n	800b93c <sys_check_timeouts+0x38>
    next_timeout = tmptimeout->next;
 800b920:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b922:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800b924:	f8c8 3000 	str.w	r3, [r8]
    next_timeout = tmptimeout->next;
 800b928:	6032      	str	r2, [r6, #0]
    arg = tmptimeout->arg;
 800b92a:	e9d1 5702 	ldrd	r5, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b92e:	f7fb fd7b 	bl	8007428 <memp_free>
    if (handler != NULL) {
 800b932:	2d00      	cmp	r5, #0
 800b934:	d0ee      	beq.n	800b914 <sys_check_timeouts+0x10>
      handler(arg);
 800b936:	4638      	mov	r0, r7
 800b938:	47a8      	blx	r5
 800b93a:	e7eb      	b.n	800b914 <sys_check_timeouts+0x10>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b940:	200375ac 	.word	0x200375ac
 800b944:	200375a8 	.word	0x200375a8

0800b948 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800b948:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800b94a:	4c07      	ldr	r4, [pc, #28]	@ (800b968 <sys_timeouts_sleeptime+0x20>)
 800b94c:	6823      	ldr	r3, [r4, #0]
 800b94e:	b13b      	cbz	r3, 800b960 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800b950:	f7f7 f9d2 	bl	8002cf8 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
    return 0;
 800b958:	1a18      	subs	r0, r3, r0
 800b95a:	bf48      	it	mi
 800b95c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800b95e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800b960:	f04f 30ff 	mov.w	r0, #4294967295
 800b964:	e7fb      	b.n	800b95e <sys_timeouts_sleeptime+0x16>
 800b966:	bf00      	nop
 800b968:	200375ac 	.word	0x200375ac

0800b96c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b96c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b96e:	f001 fced 	bl	800d34c <rand>
 800b972:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800b976:	4b02      	ldr	r3, [pc, #8]	@ (800b980 <udp_init+0x14>)
 800b978:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800b97c:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800b97e:	bd08      	pop	{r3, pc}
 800b980:	2000002e 	.word	0x2000002e

0800b984 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b988:	4688      	mov	r8, r1
 800b98a:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b98c:	4605      	mov	r5, r0
 800b98e:	b928      	cbnz	r0, 800b99c <udp_input+0x18>
 800b990:	4b5e      	ldr	r3, [pc, #376]	@ (800bb0c <udp_input+0x188>)
 800b992:	22cf      	movs	r2, #207	@ 0xcf
 800b994:	495e      	ldr	r1, [pc, #376]	@ (800bb10 <udp_input+0x18c>)
 800b996:	485f      	ldr	r0, [pc, #380]	@ (800bb14 <udp_input+0x190>)
 800b998:	f001 fdd8 	bl	800d54c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b99c:	f1b8 0f00 	cmp.w	r8, #0
 800b9a0:	d105      	bne.n	800b9ae <udp_input+0x2a>
 800b9a2:	4b5a      	ldr	r3, [pc, #360]	@ (800bb0c <udp_input+0x188>)
 800b9a4:	22d0      	movs	r2, #208	@ 0xd0
 800b9a6:	495c      	ldr	r1, [pc, #368]	@ (800bb18 <udp_input+0x194>)
 800b9a8:	485a      	ldr	r0, [pc, #360]	@ (800bb14 <udp_input+0x190>)
 800b9aa:	f001 fdcf 	bl	800d54c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b9ae:	896b      	ldrh	r3, [r5, #10]
 800b9b0:	2b07      	cmp	r3, #7
 800b9b2:	d805      	bhi.n	800b9c0 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b9b4:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b9b6:	b005      	add	sp, #20
 800b9b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800b9bc:	f7fb bf98 	b.w	80078f0 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b9c0:	4f56      	ldr	r7, [pc, #344]	@ (800bb1c <udp_input+0x198>)
  uncon_pcb = NULL;
 800b9c2:	2600      	movs	r6, #0
  udphdr = (struct udp_hdr *)p->payload;
 800b9c4:	686c      	ldr	r4, [r5, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b9c6:	6839      	ldr	r1, [r7, #0]
  prev = NULL;
 800b9c8:	46b2      	mov	sl, r6
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b9ca:	6978      	ldr	r0, [r7, #20]
 800b9cc:	f000 ff85 	bl	800c8da <ip4_addr_isbroadcast_u32>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9d0:	f8df b158 	ldr.w	fp, [pc, #344]	@ 800bb2c <udp_input+0x1a8>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b9d4:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800b9d6:	8820      	ldrh	r0, [r4, #0]
 800b9d8:	f7fb f9fa 	bl	8006dd0 <lwip_htons>
 800b9dc:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800b9de:	8860      	ldrh	r0, [r4, #2]
 800b9e0:	f7fb f9f6 	bl	8006dd0 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9e4:	f8db 4000 	ldr.w	r4, [fp]
  dest = lwip_ntohs(udphdr->dest);
 800b9e8:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9ea:	b93c      	cbnz	r4, 800b9fc <udp_input+0x78>
  if (pcb != NULL) {
 800b9ec:	2e00      	cmp	r6, #0
 800b9ee:	d148      	bne.n	800ba82 <udp_input+0xfe>
  if (for_us) {
 800b9f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d043      	beq.n	800ba82 <udp_input+0xfe>
 800b9fa:	e7db      	b.n	800b9b4 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800b9fc:	8a63      	ldrh	r3, [r4, #18]
 800b9fe:	9a03      	ldr	r2, [sp, #12]
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d150      	bne.n	800baa6 <udp_input+0x122>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ba04:	f1b8 0f00 	cmp.w	r8, #0
 800ba08:	d105      	bne.n	800ba16 <udp_input+0x92>
 800ba0a:	4b40      	ldr	r3, [pc, #256]	@ (800bb0c <udp_input+0x188>)
 800ba0c:	2288      	movs	r2, #136	@ 0x88
 800ba0e:	4944      	ldr	r1, [pc, #272]	@ (800bb20 <udp_input+0x19c>)
 800ba10:	4840      	ldr	r0, [pc, #256]	@ (800bb14 <udp_input+0x190>)
 800ba12:	f001 fd9b 	bl	800d54c <iprintf>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba16:	7a22      	ldrb	r2, [r4, #8]
 800ba18:	b132      	cbz	r2, 800ba28 <udp_input+0xa4>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba20:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d13e      	bne.n	800baa6 <udp_input+0x122>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ba28:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 800ba2a:	f1b9 0f00 	cmp.w	r9, #0
 800ba2e:	d035      	beq.n	800ba9c <udp_input+0x118>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ba30:	b13b      	cbz	r3, 800ba42 <udp_input+0xbe>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ba32:	697a      	ldr	r2, [r7, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ba34:	1c51      	adds	r1, r2, #1
 800ba36:	d004      	beq.n	800ba42 <udp_input+0xbe>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ba38:	405a      	eors	r2, r3
 800ba3a:	f8d8 1008 	ldr.w	r1, [r8, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ba3e:	420a      	tst	r2, r1
 800ba40:	d131      	bne.n	800baa6 <udp_input+0x122>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ba42:	7c22      	ldrb	r2, [r4, #16]
 800ba44:	0752      	lsls	r2, r2, #29
 800ba46:	d40f      	bmi.n	800ba68 <udp_input+0xe4>
        if (uncon_pcb == NULL) {
 800ba48:	2e00      	cmp	r6, #0
 800ba4a:	d02f      	beq.n	800baac <udp_input+0x128>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ba4c:	f1b9 0f00 	cmp.w	r9, #0
 800ba50:	d00a      	beq.n	800ba68 <udp_input+0xe4>
 800ba52:	697a      	ldr	r2, [r7, #20]
 800ba54:	3201      	adds	r2, #1
 800ba56:	d107      	bne.n	800ba68 <udp_input+0xe4>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ba58:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ba5c:	6831      	ldr	r1, [r6, #0]
 800ba5e:	4291      	cmp	r1, r2
 800ba60:	d002      	beq.n	800ba68 <udp_input+0xe4>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ba62:	429a      	cmp	r2, r3
 800ba64:	bf08      	it	eq
 800ba66:	4626      	moveq	r6, r4
      if ((pcb->remote_port == src) &&
 800ba68:	8aa3      	ldrh	r3, [r4, #20]
 800ba6a:	9a02      	ldr	r2, [sp, #8]
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d11a      	bne.n	800baa6 <udp_input+0x122>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ba70:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800ba72:	b113      	cbz	r3, 800ba7a <udp_input+0xf6>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d115      	bne.n	800baa6 <udp_input+0x122>
        if (prev != NULL) {
 800ba7a:	f1ba 0f00 	cmp.w	sl, #0
 800ba7e:	d117      	bne.n	800bab0 <udp_input+0x12c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba80:	4626      	mov	r6, r4
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ba82:	2108      	movs	r1, #8
 800ba84:	4628      	mov	r0, r5
 800ba86:	f7fb feff 	bl	8007888 <pbuf_remove_header>
 800ba8a:	b1d0      	cbz	r0, 800bac2 <udp_input+0x13e>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ba8c:	4b1f      	ldr	r3, [pc, #124]	@ (800bb0c <udp_input+0x188>)
 800ba8e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800ba92:	4924      	ldr	r1, [pc, #144]	@ (800bb24 <udp_input+0x1a0>)
 800ba94:	481f      	ldr	r0, [pc, #124]	@ (800bb14 <udp_input+0x190>)
 800ba96:	f001 fd59 	bl	800d54c <iprintf>
 800ba9a:	e78b      	b.n	800b9b4 <udp_input+0x30>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d0d0      	beq.n	800ba42 <udp_input+0xbe>
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d0cd      	beq.n	800ba42 <udp_input+0xbe>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800baa6:	46a2      	mov	sl, r4
 800baa8:	68e4      	ldr	r4, [r4, #12]
 800baaa:	e79e      	b.n	800b9ea <udp_input+0x66>
 800baac:	4626      	mov	r6, r4
 800baae:	e7db      	b.n	800ba68 <udp_input+0xe4>
          prev->next = pcb->next;
 800bab0:	68e3      	ldr	r3, [r4, #12]
 800bab2:	f8ca 300c 	str.w	r3, [sl, #12]
          pcb->next = udp_pcbs;
 800bab6:	f8db 3000 	ldr.w	r3, [fp]
          udp_pcbs = pcb;
 800baba:	f8cb 4000 	str.w	r4, [fp]
          pcb->next = udp_pcbs;
 800babe:	60e3      	str	r3, [r4, #12]
  if (pcb != NULL) {
 800bac0:	e7de      	b.n	800ba80 <udp_input+0xfc>
    if (pcb != NULL) {
 800bac2:	b16e      	cbz	r6, 800bae0 <udp_input+0x15c>
      if (pcb->recv != NULL) {
 800bac4:	69b4      	ldr	r4, [r6, #24]
 800bac6:	2c00      	cmp	r4, #0
 800bac8:	f43f af74 	beq.w	800b9b4 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bacc:	9b02      	ldr	r3, [sp, #8]
 800bace:	462a      	mov	r2, r5
 800bad0:	4631      	mov	r1, r6
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	4b14      	ldr	r3, [pc, #80]	@ (800bb28 <udp_input+0x1a4>)
 800bad6:	69f0      	ldr	r0, [r6, #28]
 800bad8:	47a0      	blx	r4
}
 800bada:	b005      	add	sp, #20
 800badc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bae0:	f1b9 0f00 	cmp.w	r9, #0
 800bae4:	f47f af66 	bne.w	800b9b4 <udp_input+0x30>
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800baee:	2be0      	cmp	r3, #224	@ 0xe0
 800baf0:	f43f af60 	beq.w	800b9b4 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800baf4:	89b9      	ldrh	r1, [r7, #12]
 800baf6:	4628      	mov	r0, r5
 800baf8:	3108      	adds	r1, #8
 800bafa:	b209      	sxth	r1, r1
 800bafc:	f7fb fef0 	bl	80078e0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bb00:	2103      	movs	r1, #3
 800bb02:	4628      	mov	r0, r5
 800bb04:	f000 fd56 	bl	800c5b4 <icmp_dest_unreach>
 800bb08:	e754      	b.n	800b9b4 <udp_input+0x30>
 800bb0a:	bf00      	nop
 800bb0c:	08010600 	.word	0x08010600
 800bb10:	0801062f 	.word	0x0801062f
 800bb14:	0800e45a 	.word	0x0800e45a
 800bb18:	08010647 	.word	0x08010647
 800bb1c:	2002ed54 	.word	0x2002ed54
 800bb20:	08010660 	.word	0x08010660
 800bb24:	08010685 	.word	0x08010685
 800bb28:	2002ed64 	.word	0x2002ed64
 800bb2c:	200375b0 	.word	0x200375b0

0800bb30 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800bb30:	4b2f      	ldr	r3, [pc, #188]	@ (800bbf0 <udp_bind+0xc0>)
{
 800bb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800bb36:	2900      	cmp	r1, #0
 800bb38:	bf14      	ite	ne
 800bb3a:	460f      	movne	r7, r1
 800bb3c:	461f      	moveq	r7, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb3e:	b950      	cbnz	r0, 800bb56 <udp_bind+0x26>
 800bb40:	4b2c      	ldr	r3, [pc, #176]	@ (800bbf4 <udp_bind+0xc4>)
 800bb42:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800bb46:	492c      	ldr	r1, [pc, #176]	@ (800bbf8 <udp_bind+0xc8>)
 800bb48:	482c      	ldr	r0, [pc, #176]	@ (800bbfc <udp_bind+0xcc>)
 800bb4a:	f001 fcff 	bl	800d54c <iprintf>
 800bb4e:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800bb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bb56:	4e2a      	ldr	r6, [pc, #168]	@ (800bc00 <udp_bind+0xd0>)
 800bb58:	6834      	ldr	r4, [r6, #0]
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	b951      	cbnz	r1, 800bb74 <udp_bind+0x44>
  if (port == 0) {
 800bb5e:	b17a      	cbz	r2, 800bb80 <udp_bind+0x50>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bb60:	683d      	ldr	r5, [r7, #0]
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bb62:	4623      	mov	r3, r4
 800bb64:	bb7b      	cbnz	r3, 800bbc6 <udp_bind+0x96>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bb66:	683b      	ldr	r3, [r7, #0]
  pcb->local_port = port;
 800bb68:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bb6a:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800bb6c:	2900      	cmp	r1, #0
 800bb6e:	d03b      	beq.n	800bbe8 <udp_bind+0xb8>
  return ERR_OK;
 800bb70:	2000      	movs	r0, #0
 800bb72:	e7ee      	b.n	800bb52 <udp_bind+0x22>
    if (pcb == ipcb) {
 800bb74:	4281      	cmp	r1, r0
 800bb76:	d001      	beq.n	800bb7c <udp_bind+0x4c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bb78:	68c9      	ldr	r1, [r1, #12]
 800bb7a:	e7ef      	b.n	800bb5c <udp_bind+0x2c>
      rebind = 1;
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	e7ee      	b.n	800bb5e <udp_bind+0x2e>
 800bb80:	f8df c080 	ldr.w	ip, [pc, #128]	@ 800bc04 <udp_bind+0xd4>
  if (port == 0) {
 800bb84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bb88:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 800bb8c:	f8bc 3000 	ldrh.w	r3, [ip]
 800bb90:	4573      	cmp	r3, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb92:	4625      	mov	r5, r4
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bb94:	bf16      	itet	ne
 800bb96:	3301      	addne	r3, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800bb98:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bb9c:	b29b      	uxthne	r3, r3
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb9e:	b90d      	cbnz	r5, 800bba4 <udp_bind+0x74>
 800bba0:	461a      	mov	r2, r3
 800bba2:	e007      	b.n	800bbb4 <udp_bind+0x84>
    if (pcb->local_port == udp_port) {
 800bba4:	f8b5 8012 	ldrh.w	r8, [r5, #18]
 800bba8:	4598      	cmp	r8, r3
 800bbaa:	d10a      	bne.n	800bbc2 <udp_bind+0x92>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800bbac:	3a01      	subs	r2, #1
 800bbae:	b292      	uxth	r2, r2
 800bbb0:	2a00      	cmp	r2, #0
 800bbb2:	d1ed      	bne.n	800bb90 <udp_bind+0x60>
 800bbb4:	f8ac 3000 	strh.w	r3, [ip]
    if (port == 0) {
 800bbb8:	2a00      	cmp	r2, #0
 800bbba:	d1d4      	bne.n	800bb66 <udp_bind+0x36>
      return ERR_USE;
 800bbbc:	f06f 0007 	mvn.w	r0, #7
 800bbc0:	e7c7      	b.n	800bb52 <udp_bind+0x22>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbc2:	68ed      	ldr	r5, [r5, #12]
 800bbc4:	e7eb      	b.n	800bb9e <udp_bind+0x6e>
      if (pcb != ipcb) {
 800bbc6:	4283      	cmp	r3, r0
 800bbc8:	d00c      	beq.n	800bbe4 <udp_bind+0xb4>
          if ((ipcb->local_port == port) &&
 800bbca:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 800bbce:	4594      	cmp	ip, r2
 800bbd0:	d108      	bne.n	800bbe4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bbd2:	f8d3 c000 	ldr.w	ip, [r3]
          if ((ipcb->local_port == port) &&
 800bbd6:	45ac      	cmp	ip, r5
 800bbd8:	d0f0      	beq.n	800bbbc <udp_bind+0x8c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bbda:	2d00      	cmp	r5, #0
 800bbdc:	d0ee      	beq.n	800bbbc <udp_bind+0x8c>
              ip_addr_isany(&ipcb->local_ip))) {
 800bbde:	f1bc 0f00 	cmp.w	ip, #0
 800bbe2:	d0eb      	beq.n	800bbbc <udp_bind+0x8c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	e7bd      	b.n	800bb64 <udp_bind+0x34>
    pcb->next = udp_pcbs;
 800bbe8:	60c4      	str	r4, [r0, #12]
    udp_pcbs = pcb;
 800bbea:	6030      	str	r0, [r6, #0]
 800bbec:	e7c0      	b.n	800bb70 <udp_bind+0x40>
 800bbee:	bf00      	nop
 800bbf0:	080109a0 	.word	0x080109a0
 800bbf4:	08010600 	.word	0x08010600
 800bbf8:	080106a0 	.word	0x080106a0
 800bbfc:	0800e45a 	.word	0x0800e45a
 800bc00:	200375b0 	.word	0x200375b0
 800bc04:	2000002e 	.word	0x2000002e

0800bc08 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800bc08:	b930      	cbnz	r0, 800bc18 <udp_recv+0x10>
 800bc0a:	4b05      	ldr	r3, [pc, #20]	@ (800bc20 <udp_recv+0x18>)
 800bc0c:	f240 428a 	movw	r2, #1162	@ 0x48a
 800bc10:	4904      	ldr	r1, [pc, #16]	@ (800bc24 <udp_recv+0x1c>)
 800bc12:	4805      	ldr	r0, [pc, #20]	@ (800bc28 <udp_recv+0x20>)
 800bc14:	f001 bc9a 	b.w	800d54c <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800bc18:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	08010600 	.word	0x08010600
 800bc24:	080106b6 	.word	0x080106b6
 800bc28:	0800e45a 	.word	0x0800e45a

0800bc2c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800bc2c:	4601      	mov	r1, r0
 800bc2e:	b930      	cbnz	r0, 800bc3e <udp_remove+0x12>
 800bc30:	4b0d      	ldr	r3, [pc, #52]	@ (800bc68 <udp_remove+0x3c>)
 800bc32:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800bc36:	490d      	ldr	r1, [pc, #52]	@ (800bc6c <udp_remove+0x40>)
 800bc38:	480d      	ldr	r0, [pc, #52]	@ (800bc70 <udp_remove+0x44>)
 800bc3a:	f001 bc87 	b.w	800d54c <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800bc3e:	4a0d      	ldr	r2, [pc, #52]	@ (800bc74 <udp_remove+0x48>)
 800bc40:	6813      	ldr	r3, [r2, #0]
 800bc42:	4283      	cmp	r3, r0
 800bc44:	d104      	bne.n	800bc50 <udp_remove+0x24>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800bc46:	68c3      	ldr	r3, [r0, #12]
 800bc48:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	f7fb bbec 	b.w	8007428 <memp_free>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d0fa      	beq.n	800bc4a <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800bc54:	461a      	mov	r2, r3
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d0f6      	beq.n	800bc4a <udp_remove+0x1e>
 800bc5c:	428b      	cmp	r3, r1
 800bc5e:	d1f9      	bne.n	800bc54 <udp_remove+0x28>
        pcb2->next = pcb->next;
 800bc60:	68cb      	ldr	r3, [r1, #12]
 800bc62:	60d3      	str	r3, [r2, #12]
        break;
 800bc64:	e7f1      	b.n	800bc4a <udp_remove+0x1e>
 800bc66:	bf00      	nop
 800bc68:	08010600 	.word	0x08010600
 800bc6c:	080106cc 	.word	0x080106cc
 800bc70:	0800e45a 	.word	0x0800e45a
 800bc74:	200375b0 	.word	0x200375b0

0800bc78 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bc78:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	f7fb fba6 	bl	80073cc <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bc80:	4604      	mov	r4, r0
 800bc82:	b128      	cbz	r0, 800bc90 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bc84:	2220      	movs	r2, #32
 800bc86:	2100      	movs	r1, #0
 800bc88:	f001 fcc5 	bl	800d616 <memset>
    pcb->ttl = UDP_TTL;
 800bc8c:	23ff      	movs	r3, #255	@ 0xff
 800bc8e:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800bc90:	4620      	mov	r0, r4
 800bc92:	bd10      	pop	{r4, pc}

0800bc94 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800bc94:	f7ff bff0 	b.w	800bc78 <udp_new>

0800bc98 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bc98:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bc9a:	b138      	cbz	r0, 800bcac <udp_netif_ip_addr_changed+0x14>
 800bc9c:	6803      	ldr	r3, [r0, #0]
 800bc9e:	b12b      	cbz	r3, 800bcac <udp_netif_ip_addr_changed+0x14>
 800bca0:	b121      	cbz	r1, 800bcac <udp_netif_ip_addr_changed+0x14>
 800bca2:	680b      	ldr	r3, [r1, #0]
 800bca4:	b113      	cbz	r3, 800bcac <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bca6:	4b06      	ldr	r3, [pc, #24]	@ (800bcc0 <udp_netif_ip_addr_changed+0x28>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	b903      	cbnz	r3, 800bcae <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800bcac:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bcae:	681c      	ldr	r4, [r3, #0]
 800bcb0:	6802      	ldr	r2, [r0, #0]
 800bcb2:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bcb4:	bf04      	itt	eq
 800bcb6:	680a      	ldreq	r2, [r1, #0]
 800bcb8:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	e7f5      	b.n	800bcaa <udp_netif_ip_addr_changed+0x12>
 800bcbe:	bf00      	nop
 800bcc0:	200375b0 	.word	0x200375b0

0800bcc4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bcc4:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bcc6:	2618      	movs	r6, #24
 800bcc8:	4c07      	ldr	r4, [pc, #28]	@ (800bce8 <etharp_free_entry+0x24>)
{
 800bcca:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 800bccc:	4346      	muls	r6, r0
 800bcce:	59a0      	ldr	r0, [r4, r6]
 800bcd0:	b118      	cbz	r0, 800bcda <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bcd2:	f7fb fe0d 	bl	80078f0 <pbuf_free>
    arp_table[i].q = NULL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bcda:	2318      	movs	r3, #24
 800bcdc:	fb03 4405 	mla	r4, r3, r5, r4
 800bce0:	2300      	movs	r3, #0
 800bce2:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bce4:	bd70      	pop	{r4, r5, r6, pc}
 800bce6:	bf00      	nop
 800bce8:	200375b8 	.word	0x200375b8

0800bcec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf0:	f04f 0c00 	mov.w	ip, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bcf4:	f04f 0e0a 	mov.w	lr, #10
 800bcf8:	4b41      	ldr	r3, [pc, #260]	@ (800be00 <etharp_find_entry+0x114>)
{
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	4617      	mov	r7, r2
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bd00:	46e3      	mov	fp, ip
  s16_t empty = ARP_TABLE_SIZE;
 800bd02:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bd04:	46f0      	mov	r8, lr
 800bd06:	46f1      	mov	r9, lr
 800bd08:	461d      	mov	r5, r3
{
 800bd0a:	9103      	str	r1, [sp, #12]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bd0c:	e9cd cc01 	strd	ip, ip, [sp, #4]
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bd10:	2c0a      	cmp	r4, #10
 800bd12:	fa0f f08c 	sxth.w	r0, ip
    u8_t state = arp_table[i].state;
 800bd16:	f893 a014 	ldrb.w	sl, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bd1a:	d119      	bne.n	800bd50 <etharp_find_entry+0x64>
 800bd1c:	f1ba 0f00 	cmp.w	sl, #0
 800bd20:	d060      	beq.n	800bde4 <etharp_find_entry+0xf8>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bd22:	b146      	cbz	r6, 800bd36 <etharp_find_entry+0x4a>
 800bd24:	6831      	ldr	r1, [r6, #0]
 800bd26:	685a      	ldr	r2, [r3, #4]
 800bd28:	4291      	cmp	r1, r2
 800bd2a:	d104      	bne.n	800bd36 <etharp_find_entry+0x4a>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bd2c:	2f00      	cmp	r7, #0
 800bd2e:	d04b      	beq.n	800bdc8 <etharp_find_entry+0xdc>
 800bd30:	6899      	ldr	r1, [r3, #8]
 800bd32:	42b9      	cmp	r1, r7
 800bd34:	d048      	beq.n	800bdc8 <etharp_find_entry+0xdc>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bd36:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 800bd3a:	8a59      	ldrh	r1, [r3, #18]
      if (state == ETHARP_STATE_PENDING) {
 800bd3c:	d14d      	bne.n	800bdda <etharp_find_entry+0xee>
        if (arp_table[i].q != NULL) {
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	2a00      	cmp	r2, #0
 800bd42:	d044      	beq.n	800bdce <etharp_find_entry+0xe2>
          if (arp_table[i].ctime >= age_queue) {
 800bd44:	9a01      	ldr	r2, [sp, #4]
 800bd46:	428a      	cmp	r2, r1
 800bd48:	d805      	bhi.n	800bd56 <etharp_find_entry+0x6a>
 800bd4a:	4686      	mov	lr, r0
 800bd4c:	9101      	str	r1, [sp, #4]
 800bd4e:	e002      	b.n	800bd56 <etharp_find_entry+0x6a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bd50:	f1ba 0f00 	cmp.w	sl, #0
 800bd54:	d1e5      	bne.n	800bd22 <etharp_find_entry+0x36>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd56:	f10c 0c01 	add.w	ip, ip, #1
 800bd5a:	3318      	adds	r3, #24
 800bd5c:	f1bc 0f0a 	cmp.w	ip, #10
 800bd60:	d1d6      	bne.n	800bd10 <etharp_find_entry+0x24>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bd62:	9b03      	ldr	r3, [sp, #12]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d147      	bne.n	800bdf8 <etharp_find_entry+0x10c>
 800bd68:	2c0a      	cmp	r4, #10
 800bd6a:	d113      	bne.n	800bd94 <etharp_find_entry+0xa8>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bd6c:	f1b8 0f0a 	cmp.w	r8, #10
 800bd70:	d03a      	beq.n	800bde8 <etharp_find_entry+0xfc>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bd72:	2318      	movs	r3, #24
 800bd74:	fb03 f308 	mul.w	r3, r3, r8
 800bd78:	58eb      	ldr	r3, [r5, r3]
 800bd7a:	b133      	cbz	r3, 800bd8a <etharp_find_entry+0x9e>
 800bd7c:	4b21      	ldr	r3, [pc, #132]	@ (800be04 <etharp_find_entry+0x118>)
 800bd7e:	f240 126d 	movw	r2, #365	@ 0x16d
 800bd82:	4921      	ldr	r1, [pc, #132]	@ (800be08 <etharp_find_entry+0x11c>)
 800bd84:	4821      	ldr	r0, [pc, #132]	@ (800be0c <etharp_find_entry+0x120>)
 800bd86:	f001 fbe1 	bl	800d54c <iprintf>
          if (arp_table[i].ctime >= age_queue) {
 800bd8a:	46c1      	mov	r9, r8
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 800bd8c:	464c      	mov	r4, r9
 800bd8e:	4648      	mov	r0, r9
 800bd90:	f7ff ff98 	bl	800bcc4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bd94:	2318      	movs	r3, #24
 800bd96:	fb03 5304 	mla	r3, r3, r4, r5
 800bd9a:	7d1b      	ldrb	r3, [r3, #20]
 800bd9c:	b133      	cbz	r3, 800bdac <etharp_find_entry+0xc0>
 800bd9e:	4b19      	ldr	r3, [pc, #100]	@ (800be04 <etharp_find_entry+0x118>)
 800bda0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800bda4:	491a      	ldr	r1, [pc, #104]	@ (800be10 <etharp_find_entry+0x124>)
 800bda6:	4819      	ldr	r0, [pc, #100]	@ (800be0c <etharp_find_entry+0x120>)
 800bda8:	f001 fbd0 	bl	800d54c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bdac:	b12e      	cbz	r6, 800bdba <etharp_find_entry+0xce>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bdae:	4b14      	ldr	r3, [pc, #80]	@ (800be00 <etharp_find_entry+0x114>)
 800bdb0:	2118      	movs	r1, #24
 800bdb2:	6832      	ldr	r2, [r6, #0]
 800bdb4:	fb01 3304 	mla	r3, r1, r4, r3
 800bdb8:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800bdba:	2318      	movs	r3, #24
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800bdbc:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 800bdbe:	fb03 5504 	mla	r5, r3, r4, r5
 800bdc2:	2300      	movs	r3, #0
  arp_table[i].netif = netif;
 800bdc4:	60af      	str	r7, [r5, #8]
  arp_table[i].ctime = 0;
 800bdc6:	826b      	strh	r3, [r5, #18]
}
 800bdc8:	b005      	add	sp, #20
 800bdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 800bdce:	9a02      	ldr	r2, [sp, #8]
 800bdd0:	428a      	cmp	r2, r1
 800bdd2:	d8c0      	bhi.n	800bd56 <etharp_find_entry+0x6a>
 800bdd4:	4681      	mov	r9, r0
 800bdd6:	9102      	str	r1, [sp, #8]
 800bdd8:	e7bd      	b.n	800bd56 <etharp_find_entry+0x6a>
          if (arp_table[i].ctime >= age_stable) {
 800bdda:	4559      	cmp	r1, fp
 800bddc:	d3bb      	bcc.n	800bd56 <etharp_find_entry+0x6a>
 800bdde:	468b      	mov	fp, r1
 800bde0:	4680      	mov	r8, r0
 800bde2:	e7b8      	b.n	800bd56 <etharp_find_entry+0x6a>
 800bde4:	4604      	mov	r4, r0
 800bde6:	e7b6      	b.n	800bd56 <etharp_find_entry+0x6a>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bde8:	f1b9 0f0a 	cmp.w	r9, #10
 800bdec:	d1ce      	bne.n	800bd8c <etharp_find_entry+0xa0>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bdee:	f1be 0f0a 	cmp.w	lr, #10
 800bdf2:	d001      	beq.n	800bdf8 <etharp_find_entry+0x10c>
 800bdf4:	46f1      	mov	r9, lr
 800bdf6:	e7c9      	b.n	800bd8c <etharp_find_entry+0xa0>
    return (s16_t)ERR_MEM;
 800bdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdfc:	e7e4      	b.n	800bdc8 <etharp_find_entry+0xdc>
 800bdfe:	bf00      	nop
 800be00:	200375b8 	.word	0x200375b8
 800be04:	080106e4 	.word	0x080106e4
 800be08:	0801071b 	.word	0x0801071b
 800be0c:	0800e45a 	.word	0x0800e45a
 800be10:	08010732 	.word	0x08010732

0800be14 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800be14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800be18:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800be1c:	4688      	mov	r8, r1
 800be1e:	4691      	mov	r9, r2
 800be20:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800be22:	4607      	mov	r7, r0
 800be24:	b930      	cbnz	r0, 800be34 <etharp_raw+0x20>
 800be26:	4b2d      	ldr	r3, [pc, #180]	@ (800bedc <etharp_raw+0xc8>)
 800be28:	f240 4257 	movw	r2, #1111	@ 0x457
 800be2c:	492c      	ldr	r1, [pc, #176]	@ (800bee0 <etharp_raw+0xcc>)
 800be2e:	482d      	ldr	r0, [pc, #180]	@ (800bee4 <etharp_raw+0xd0>)
 800be30:	f001 fb8c 	bl	800d54c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800be34:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800be38:	211c      	movs	r1, #28
 800be3a:	200e      	movs	r0, #14
 800be3c:	f7fb fdc2 	bl	80079c4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800be40:	4605      	mov	r5, r0
 800be42:	2800      	cmp	r0, #0
 800be44:	d047      	beq.n	800bed6 <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800be46:	8943      	ldrh	r3, [r0, #10]
 800be48:	2b1b      	cmp	r3, #27
 800be4a:	d806      	bhi.n	800be5a <etharp_raw+0x46>
 800be4c:	4b23      	ldr	r3, [pc, #140]	@ (800bedc <etharp_raw+0xc8>)
 800be4e:	f240 4262 	movw	r2, #1122	@ 0x462
 800be52:	4925      	ldr	r1, [pc, #148]	@ (800bee8 <etharp_raw+0xd4>)
 800be54:	4823      	ldr	r0, [pc, #140]	@ (800bee4 <etharp_raw+0xd0>)
 800be56:	f001 fb79 	bl	800d54c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800be5a:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800be5c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800be60:	f7fa ffb6 	bl	8006dd0 <lwip_htons>
 800be64:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800be66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800be6a:	2b06      	cmp	r3, #6
 800be6c:	d006      	beq.n	800be7c <etharp_raw+0x68>
 800be6e:	4b1b      	ldr	r3, [pc, #108]	@ (800bedc <etharp_raw+0xc8>)
 800be70:	f240 4269 	movw	r2, #1129	@ 0x469
 800be74:	491d      	ldr	r1, [pc, #116]	@ (800beec <etharp_raw+0xd8>)
 800be76:	481b      	ldr	r0, [pc, #108]	@ (800bee4 <etharp_raw+0xd0>)
 800be78:	f001 fb68 	bl	800d54c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800be7c:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800be7e:	4642      	mov	r2, r8
 800be80:	4629      	mov	r1, r5
 800be82:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800be84:	60a3      	str	r3, [r4, #8]
 800be86:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800be88:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800be8a:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800be8c:	f8da 3000 	ldr.w	r3, [sl]
 800be90:	f8c4 3012 	str.w	r3, [r4, #18]
 800be94:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800be98:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800be9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800bea2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bea4:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800bea6:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800bea8:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800beaa:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800beac:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800beae:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800beb0:	2308      	movs	r3, #8
 800beb2:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800beb4:	2306      	movs	r3, #6
 800beb6:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800beb8:	2304      	movs	r3, #4
 800beba:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800bebc:	f640 0306 	movw	r3, #2054	@ 0x806
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	464b      	mov	r3, r9
 800bec4:	f001 f930 	bl	800d128 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800bec8:	4628      	mov	r0, r5
 800beca:	f7fb fd11 	bl	80078f0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800bece:	4630      	mov	r0, r6
}
 800bed0:	b002      	add	sp, #8
 800bed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 800bed6:	f04f 30ff 	mov.w	r0, #4294967295
 800beda:	e7f9      	b.n	800bed0 <etharp_raw+0xbc>
 800bedc:	080106e4 	.word	0x080106e4
 800bee0:	0800e51c 	.word	0x0800e51c
 800bee4:	0800e45a 	.word	0x0800e45a
 800bee8:	0801075b 	.word	0x0801075b
 800beec:	0801078c 	.word	0x0801078c

0800bef0 <etharp_cleanup_netif>:
{
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	4606      	mov	r6, r0
 800bef4:	4d07      	ldr	r5, [pc, #28]	@ (800bf14 <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bef6:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800bef8:	7d2b      	ldrb	r3, [r5, #20]
 800befa:	b12b      	cbz	r3, 800bf08 <etharp_cleanup_netif+0x18>
 800befc:	68ab      	ldr	r3, [r5, #8]
 800befe:	42b3      	cmp	r3, r6
 800bf00:	d102      	bne.n	800bf08 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 800bf02:	4620      	mov	r0, r4
 800bf04:	f7ff fede 	bl	800bcc4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf08:	3401      	adds	r4, #1
 800bf0a:	3518      	adds	r5, #24
 800bf0c:	2c0a      	cmp	r4, #10
 800bf0e:	d1f3      	bne.n	800bef8 <etharp_cleanup_netif+0x8>
}
 800bf10:	bd70      	pop	{r4, r5, r6, pc}
 800bf12:	bf00      	nop
 800bf14:	200375b8 	.word	0x200375b8

0800bf18 <etharp_input>:
{
 800bf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	4607      	mov	r7, r0
 800bf1e:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bf20:	460c      	mov	r4, r1
 800bf22:	b949      	cbnz	r1, 800bf38 <etharp_input+0x20>
 800bf24:	4b49      	ldr	r3, [pc, #292]	@ (800c04c <etharp_input+0x134>)
 800bf26:	f240 228a 	movw	r2, #650	@ 0x28a
 800bf2a:	4949      	ldr	r1, [pc, #292]	@ (800c050 <etharp_input+0x138>)
 800bf2c:	4849      	ldr	r0, [pc, #292]	@ (800c054 <etharp_input+0x13c>)
}
 800bf2e:	b007      	add	sp, #28
 800bf30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bf34:	f001 bb0a 	b.w	800d54c <iprintf>
  hdr = (struct etharp_hdr *)p->payload;
 800bf38:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800bf3a:	882b      	ldrh	r3, [r5, #0]
 800bf3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf40:	d108      	bne.n	800bf54 <etharp_input+0x3c>
 800bf42:	792b      	ldrb	r3, [r5, #4]
 800bf44:	2b06      	cmp	r3, #6
 800bf46:	d105      	bne.n	800bf54 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bf48:	796b      	ldrb	r3, [r5, #5]
 800bf4a:	2b04      	cmp	r3, #4
 800bf4c:	d102      	bne.n	800bf54 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bf4e:	886b      	ldrh	r3, [r5, #2]
 800bf50:	2b08      	cmp	r3, #8
 800bf52:	d005      	beq.n	800bf60 <etharp_input+0x48>
  pbuf_free(p);
 800bf54:	4638      	mov	r0, r7
}
 800bf56:	b007      	add	sp, #28
 800bf58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800bf5c:	f7fb bcc8 	b.w	80078f0 <pbuf_free>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800bf60:	f8d5 a00e 	ldr.w	sl, [r5, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bf64:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bf68:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800bf6a:	69ab      	ldr	r3, [r5, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800bf6c:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bf70:	2e00      	cmp	r6, #0
 800bf72:	d067      	beq.n	800c044 <etharp_input+0x12c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bf74:	429e      	cmp	r6, r3
 800bf76:	d164      	bne.n	800c042 <etharp_input+0x12a>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bf78:	2601      	movs	r6, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bf7a:	46b3      	mov	fp, r6
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bf7c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800bf80:	2b06      	cmp	r3, #6
 800bf82:	d006      	beq.n	800bf92 <etharp_input+0x7a>
 800bf84:	4b31      	ldr	r3, [pc, #196]	@ (800c04c <etharp_input+0x134>)
 800bf86:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800bf8a:	4933      	ldr	r1, [pc, #204]	@ (800c058 <etharp_input+0x140>)
 800bf8c:	4831      	ldr	r0, [pc, #196]	@ (800c054 <etharp_input+0x13c>)
 800bf8e:	f001 fadd 	bl	800d54c <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800bf92:	f1ba 0f00 	cmp.w	sl, #0
 800bf96:	d03f      	beq.n	800c018 <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bf98:	4621      	mov	r1, r4
 800bf9a:	4650      	mov	r0, sl
 800bf9c:	f000 fc9d 	bl	800c8da <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800bfa0:	4681      	mov	r9, r0
 800bfa2:	bbc8      	cbnz	r0, 800c018 <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 800bfa4:	f00a 0af0 	and.w	sl, sl, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bfa8:	f1ba 0fe0 	cmp.w	sl, #224	@ 0xe0
 800bfac:	d034      	beq.n	800c018 <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 800bfae:	4622      	mov	r2, r4
 800bfb0:	4659      	mov	r1, fp
 800bfb2:	a805      	add	r0, sp, #20
 800bfb4:	f7ff fe9a 	bl	800bcec <etharp_find_entry>
  if (i < 0) {
 800bfb8:	1e03      	subs	r3, r0, #0
 800bfba:	db2d      	blt.n	800c018 <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bfbc:	2018      	movs	r0, #24
 800bfbe:	4a27      	ldr	r2, [pc, #156]	@ (800c05c <etharp_input+0x144>)
 800bfc0:	f04f 0e02 	mov.w	lr, #2
 800bfc4:	fb00 f103 	mul.w	r1, r0, r3
 800bfc8:	eb02 0c01 	add.w	ip, r2, r1
 800bfcc:	f88c e014 	strb.w	lr, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800bfd0:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 800bfd4:	f8cc 4008 	str.w	r4, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800bfd8:	fb13 e300 	smlabb	r3, r3, r0, lr
 800bfdc:	68a8      	ldr	r0, [r5, #8]
 800bfde:	eb03 0e02 	add.w	lr, r3, r2
 800bfe2:	50d0      	str	r0, [r2, r3]
 800bfe4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800bfe8:	f8ae 3004 	strh.w	r3, [lr, #4]
  if (arp_table[i].q != NULL) {
 800bfec:	f852 a001 	ldr.w	sl, [r2, r1]
  arp_table[i].ctime = 0;
 800bff0:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800bff4:	f1ba 0f00 	cmp.w	sl, #0
 800bff8:	d00e      	beq.n	800c018 <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bffa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    arp_table[i].q = NULL;
 800bffe:	f842 9001 	str.w	r9, [r2, r1]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c002:	4620      	mov	r0, r4
 800c004:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	4651      	mov	r1, sl
 800c00c:	4643      	mov	r3, r8
 800c00e:	f001 f88b 	bl	800d128 <ethernet_output>
    pbuf_free(p);
 800c012:	4650      	mov	r0, sl
 800c014:	f7fb fc6c 	bl	80078f0 <pbuf_free>
  switch (hdr->opcode) {
 800c018:	88eb      	ldrh	r3, [r5, #6]
 800c01a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c01e:	d199      	bne.n	800bf54 <etharp_input+0x3c>
      if (for_us) {
 800c020:	2e00      	cmp	r6, #0
 800c022:	d097      	beq.n	800bf54 <etharp_input+0x3c>
        etharp_raw(netif,
 800c024:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c026:	f104 0326 	add.w	r3, r4, #38	@ 0x26
        etharp_raw(netif,
 800c02a:	4620      	mov	r0, r4
 800c02c:	9203      	str	r2, [sp, #12]
 800c02e:	aa05      	add	r2, sp, #20
 800c030:	4619      	mov	r1, r3
 800c032:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c036:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 800c038:	9200      	str	r2, [sp, #0]
 800c03a:	4642      	mov	r2, r8
 800c03c:	f7ff feea 	bl	800be14 <etharp_raw>
 800c040:	e788      	b.n	800bf54 <etharp_input+0x3c>
 800c042:	2600      	movs	r6, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c044:	f04f 0b02 	mov.w	fp, #2
 800c048:	e798      	b.n	800bf7c <etharp_input+0x64>
 800c04a:	bf00      	nop
 800c04c:	080106e4 	.word	0x080106e4
 800c050:	0800e51c 	.word	0x0800e51c
 800c054:	0800e45a 	.word	0x0800e45a
 800c058:	080107ec 	.word	0x080107ec
 800c05c:	200375b8 	.word	0x200375b8

0800c060 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c062:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c064:	2401      	movs	r4, #1
 800c066:	f100 0326 	add.w	r3, r0, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c06a:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c06c:	e9cd 1402 	strd	r1, r4, [sp, #8]
 800c070:	4904      	ldr	r1, [pc, #16]	@ (800c084 <etharp_request+0x24>)
 800c072:	9200      	str	r2, [sp, #0]
 800c074:	9101      	str	r1, [sp, #4]
 800c076:	4619      	mov	r1, r3
 800c078:	4a03      	ldr	r2, [pc, #12]	@ (800c088 <etharp_request+0x28>)
 800c07a:	f7ff fecb 	bl	800be14 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800c07e:	b004      	add	sp, #16
 800c080:	bd10      	pop	{r4, pc}
 800c082:	bf00      	nop
 800c084:	08010bce 	.word	0x08010bce
 800c088:	08010bd4 	.word	0x08010bd4

0800c08c <etharp_tmr>:
{
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	4c12      	ldr	r4, [pc, #72]	@ (800c0d8 <etharp_tmr+0x4c>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c090:	2500      	movs	r5, #0
    u8_t state = arp_table[i].state;
 800c092:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 800c094:	b16a      	cbz	r2, 800c0b2 <etharp_tmr+0x26>
      arp_table[i].ctime++;
 800c096:	8a63      	ldrh	r3, [r4, #18]
 800c098:	3301      	adds	r3, #1
 800c09a:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c09c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
      arp_table[i].ctime++;
 800c0a0:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c0a2:	d203      	bcs.n	800c0ac <etharp_tmr+0x20>
 800c0a4:	2a01      	cmp	r2, #1
 800c0a6:	d109      	bne.n	800c0bc <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c0a8:	2b04      	cmp	r3, #4
 800c0aa:	d90c      	bls.n	800c0c6 <etharp_tmr+0x3a>
        etharp_free_entry(i);
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f7ff fe09 	bl	800bcc4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c0b2:	3501      	adds	r5, #1
 800c0b4:	3418      	adds	r4, #24
 800c0b6:	2d0a      	cmp	r5, #10
 800c0b8:	d1eb      	bne.n	800c092 <etharp_tmr+0x6>
}
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c0bc:	2a03      	cmp	r2, #3
 800c0be:	d107      	bne.n	800c0d0 <etharp_tmr+0x44>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c0c0:	2304      	movs	r3, #4
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c0c2:	7523      	strb	r3, [r4, #20]
 800c0c4:	e7f5      	b.n	800c0b2 <etharp_tmr+0x26>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c0c6:	1d21      	adds	r1, r4, #4
 800c0c8:	68a0      	ldr	r0, [r4, #8]
 800c0ca:	f7ff ffc9 	bl	800c060 <etharp_request>
 800c0ce:	e7f0      	b.n	800c0b2 <etharp_tmr+0x26>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c0d0:	2a04      	cmp	r2, #4
 800c0d2:	d1ee      	bne.n	800c0b2 <etharp_tmr+0x26>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	e7f4      	b.n	800c0c2 <etharp_tmr+0x36>
 800c0d8:	200375b8 	.word	0x200375b8

0800c0dc <etharp_output_to_arp_index>:
{
 800c0dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c0e0:	4f24      	ldr	r7, [pc, #144]	@ (800c174 <etharp_output_to_arp_index+0x98>)
 800c0e2:	2318      	movs	r3, #24
{
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c0e8:	fb03 7302 	mla	r3, r3, r2, r7
{
 800c0ec:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c0ee:	7d1b      	ldrb	r3, [r3, #20]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d806      	bhi.n	800c102 <etharp_output_to_arp_index+0x26>
 800c0f4:	4b20      	ldr	r3, [pc, #128]	@ (800c178 <etharp_output_to_arp_index+0x9c>)
 800c0f6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c0fa:	4920      	ldr	r1, [pc, #128]	@ (800c17c <etharp_output_to_arp_index+0xa0>)
 800c0fc:	4820      	ldr	r0, [pc, #128]	@ (800c180 <etharp_output_to_arp_index+0xa4>)
 800c0fe:	f001 fa25 	bl	800d54c <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c102:	2318      	movs	r3, #24
 800c104:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c108:	f106 0a26 	add.w	sl, r6, #38	@ 0x26
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c10c:	fb03 7404 	mla	r4, r3, r4, r7
 800c110:	00ed      	lsls	r5, r5, #3
 800c112:	7d23      	ldrb	r3, [r4, #20]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c114:	f105 080c 	add.w	r8, r5, #12
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c118:	2b02      	cmp	r3, #2
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c11a:	44b8      	add	r8, r7
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c11c:	d10b      	bne.n	800c136 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c11e:	8a63      	ldrh	r3, [r4, #18]
 800c120:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800c124:	d913      	bls.n	800c14e <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c126:	1d29      	adds	r1, r5, #4
 800c128:	4630      	mov	r0, r6
 800c12a:	4439      	add	r1, r7
 800c12c:	f7ff ff98 	bl	800c060 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c130:	b908      	cbnz	r0, 800c136 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c132:	2303      	movs	r3, #3
 800c134:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c136:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c13a:	4652      	mov	r2, sl
 800c13c:	4649      	mov	r1, r9
 800c13e:	4630      	mov	r0, r6
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	4643      	mov	r3, r8
 800c144:	f000 fff0 	bl	800d128 <ethernet_output>
}
 800c148:	b004      	add	sp, #16
 800c14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c14e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800c152:	d3f0      	bcc.n	800c136 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c154:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c156:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c158:	4642      	mov	r2, r8
 800c15a:	4651      	mov	r1, sl
 800c15c:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c15e:	442f      	add	r7, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c160:	4b08      	ldr	r3, [pc, #32]	@ (800c184 <etharp_output_to_arp_index+0xa8>)
 800c162:	4630      	mov	r0, r6
 800c164:	9702      	str	r7, [sp, #8]
 800c166:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c168:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	4653      	mov	r3, sl
 800c16e:	f7ff fe51 	bl	800be14 <etharp_raw>
 800c172:	e7dd      	b.n	800c130 <etharp_output_to_arp_index+0x54>
 800c174:	200375b8 	.word	0x200375b8
 800c178:	080106e4 	.word	0x080106e4
 800c17c:	08010810 	.word	0x08010810
 800c180:	0800e45a 	.word	0x0800e45a
 800c184:	08010bce 	.word	0x08010bce

0800c188 <etharp_query>:
{
 800c188:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c18c:	4688      	mov	r8, r1
 800c18e:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c190:	4601      	mov	r1, r0
{
 800c192:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c194:	f8d8 0000 	ldr.w	r0, [r8]
 800c198:	f000 fb9f 	bl	800c8da <ip4_addr_isbroadcast_u32>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d161      	bne.n	800c264 <etharp_query+0xdc>
      ip4_addr_ismulticast(ipaddr) ||
 800c1a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c1a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c1a8:	2ae0      	cmp	r2, #224	@ 0xe0
 800c1aa:	d05b      	beq.n	800c264 <etharp_query+0xdc>
      ip4_addr_isany(ipaddr)) {
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d059      	beq.n	800c264 <etharp_query+0xdc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c1b0:	4632      	mov	r2, r6
 800c1b2:	2101      	movs	r1, #1
 800c1b4:	4640      	mov	r0, r8
 800c1b6:	f7ff fd99 	bl	800bcec <etharp_find_entry>
  if (i_err < 0) {
 800c1ba:	1e07      	subs	r7, r0, #0
 800c1bc:	da03      	bge.n	800c1c6 <etharp_query+0x3e>
    return (err_t)i_err;
 800c1be:	b278      	sxtb	r0, r7
}
 800c1c0:	b002      	add	sp, #8
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c1c6:	2f7e      	cmp	r7, #126	@ 0x7e
 800c1c8:	dd06      	ble.n	800c1d8 <etharp_query+0x50>
 800c1ca:	4b37      	ldr	r3, [pc, #220]	@ (800c2a8 <etharp_query+0x120>)
 800c1cc:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800c1d0:	4936      	ldr	r1, [pc, #216]	@ (800c2ac <etharp_query+0x124>)
 800c1d2:	4837      	ldr	r0, [pc, #220]	@ (800c2b0 <etharp_query+0x128>)
 800c1d4:	f001 f9ba 	bl	800d54c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c1d8:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c1da:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 800c2b8 <etharp_query+0x130>
 800c1de:	2318      	movs	r3, #24
 800c1e0:	fb03 9307 	mla	r3, r3, r7, r9
 800c1e4:	7d1a      	ldrb	r2, [r3, #20]
 800c1e6:	2a00      	cmp	r2, #0
 800c1e8:	d142      	bne.n	800c270 <etharp_query+0xe8>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c1ea:	2201      	movs	r2, #1
    arp_table[i].netif = netif;
 800c1ec:	609e      	str	r6, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c1ee:	751a      	strb	r2, [r3, #20]
    result = etharp_request(netif, ipaddr);
 800c1f0:	4641      	mov	r1, r8
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f7ff ff34 	bl	800c060 <etharp_request>
    if (q == NULL) {
 800c1f8:	2d00      	cmp	r5, #0
 800c1fa:	d0e1      	beq.n	800c1c0 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c1fc:	2318      	movs	r3, #24
 800c1fe:	fb03 9207 	mla	r2, r3, r7, r9
 800c202:	7d12      	ldrb	r2, [r2, #20]
 800c204:	2a01      	cmp	r2, #1
 800c206:	d90e      	bls.n	800c226 <etharp_query+0x9e>
    ETHARP_SET_ADDRHINT(netif, i);
 800c208:	4a2a      	ldr	r2, [pc, #168]	@ (800c2b4 <etharp_query+0x12c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c20a:	fb03 9307 	mla	r3, r3, r7, r9
 800c20e:	4629      	mov	r1, r5
 800c210:	4630      	mov	r0, r6
    ETHARP_SET_ADDRHINT(netif, i);
 800c212:	7017      	strb	r7, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c214:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c218:	330c      	adds	r3, #12
 800c21a:	9200      	str	r2, [sp, #0]
 800c21c:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 800c220:	f000 ff82 	bl	800d128 <ethernet_output>
 800c224:	e7cc      	b.n	800c1c0 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c226:	d1cb      	bne.n	800c1c0 <etharp_query+0x38>
 800c228:	462c      	mov	r4, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c22a:	4e1f      	ldr	r6, [pc, #124]	@ (800c2a8 <etharp_query+0x120>)
 800c22c:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 800c2bc <etharp_query+0x134>
 800c230:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800c2b0 <etharp_query+0x128>
 800c234:	e010      	b.n	800c258 <etharp_query+0xd0>
 800c236:	8962      	ldrh	r2, [r4, #10]
 800c238:	8923      	ldrh	r3, [r4, #8]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d108      	bne.n	800c250 <etharp_query+0xc8>
 800c23e:	6823      	ldr	r3, [r4, #0]
 800c240:	b133      	cbz	r3, 800c250 <etharp_query+0xc8>
 800c242:	4633      	mov	r3, r6
 800c244:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800c248:	4641      	mov	r1, r8
 800c24a:	4650      	mov	r0, sl
 800c24c:	f001 f97e 	bl	800d54c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c250:	7b23      	ldrb	r3, [r4, #12]
 800c252:	065b      	lsls	r3, r3, #25
 800c254:	d411      	bmi.n	800c27a <etharp_query+0xf2>
      p = p->next;
 800c256:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800c258:	2c00      	cmp	r4, #0
 800c25a:	d1ec      	bne.n	800c236 <etharp_query+0xae>
      pbuf_ref(p);
 800c25c:	4628      	mov	r0, r5
 800c25e:	f7fb fca3 	bl	8007ba8 <pbuf_ref>
 800c262:	e011      	b.n	800c288 <etharp_query+0x100>
    return ERR_ARG;
 800c264:	f06f 000f 	mvn.w	r0, #15
 800c268:	e7aa      	b.n	800c1c0 <etharp_query+0x38>
      result = ERR_MEM;
 800c26a:	f04f 30ff 	mov.w	r0, #4294967295
 800c26e:	e7a7      	b.n	800c1c0 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 800c270:	2d00      	cmp	r5, #0
 800c272:	d0bd      	beq.n	800c1f0 <etharp_query+0x68>
  err_t result = ERR_MEM;
 800c274:	f04f 30ff 	mov.w	r0, #4294967295
 800c278:	e7c0      	b.n	800c1fc <etharp_query+0x74>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c27a:	462a      	mov	r2, r5
 800c27c:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800c280:	200e      	movs	r0, #14
 800c282:	f7fb fdab 	bl	8007ddc <pbuf_clone>
 800c286:	4605      	mov	r5, r0
    if (p != NULL) {
 800c288:	2d00      	cmp	r5, #0
 800c28a:	d0ee      	beq.n	800c26a <etharp_query+0xe2>
      if (arp_table[i].q != NULL) {
 800c28c:	2418      	movs	r4, #24
 800c28e:	fb04 f307 	mul.w	r3, r4, r7
 800c292:	f859 0003 	ldr.w	r0, [r9, r3]
 800c296:	b108      	cbz	r0, 800c29c <etharp_query+0x114>
        pbuf_free(arp_table[i].q);
 800c298:	f7fb fb2a 	bl	80078f0 <pbuf_free>
      arp_table[i].q = p;
 800c29c:	437c      	muls	r4, r7
      result = ERR_OK;
 800c29e:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800c2a0:	f849 5004 	str.w	r5, [r9, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 800c2a4:	e78c      	b.n	800c1c0 <etharp_query+0x38>
 800c2a6:	bf00      	nop
 800c2a8:	080106e4 	.word	0x080106e4
 800c2ac:	08010840 	.word	0x08010840
 800c2b0:	0800e45a 	.word	0x0800e45a
 800c2b4:	200375b4 	.word	0x200375b4
 800c2b8:	200375b8 	.word	0x200375b8
 800c2bc:	0801084e 	.word	0x0801084e

0800c2c0 <etharp_output>:
{
 800c2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2c2:	460e      	mov	r6, r1
 800c2c4:	b085      	sub	sp, #20
 800c2c6:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c2c8:	4604      	mov	r4, r0
 800c2ca:	b930      	cbnz	r0, 800c2da <etharp_output+0x1a>
 800c2cc:	4b42      	ldr	r3, [pc, #264]	@ (800c3d8 <etharp_output+0x118>)
 800c2ce:	f240 321e 	movw	r2, #798	@ 0x31e
 800c2d2:	4942      	ldr	r1, [pc, #264]	@ (800c3dc <etharp_output+0x11c>)
 800c2d4:	4842      	ldr	r0, [pc, #264]	@ (800c3e0 <etharp_output+0x120>)
 800c2d6:	f001 f939 	bl	800d54c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c2da:	b936      	cbnz	r6, 800c2ea <etharp_output+0x2a>
 800c2dc:	4b3e      	ldr	r3, [pc, #248]	@ (800c3d8 <etharp_output+0x118>)
 800c2de:	f240 321f 	movw	r2, #799	@ 0x31f
 800c2e2:	4940      	ldr	r1, [pc, #256]	@ (800c3e4 <etharp_output+0x124>)
 800c2e4:	483e      	ldr	r0, [pc, #248]	@ (800c3e0 <etharp_output+0x120>)
 800c2e6:	f001 f931 	bl	800d54c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c2ea:	b935      	cbnz	r5, 800c2fa <etharp_output+0x3a>
 800c2ec:	4b3a      	ldr	r3, [pc, #232]	@ (800c3d8 <etharp_output+0x118>)
 800c2ee:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c2f2:	493d      	ldr	r1, [pc, #244]	@ (800c3e8 <etharp_output+0x128>)
 800c2f4:	483a      	ldr	r0, [pc, #232]	@ (800c3e0 <etharp_output+0x120>)
 800c2f6:	f001 f929 	bl	800d54c <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	6828      	ldr	r0, [r5, #0]
 800c2fe:	f000 faec 	bl	800c8da <ip4_addr_isbroadcast_u32>
 800c302:	2800      	cmp	r0, #0
 800c304:	d162      	bne.n	800c3cc <etharp_output+0x10c>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c306:	682b      	ldr	r3, [r5, #0]
 800c308:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800c30c:	2ae0      	cmp	r2, #224	@ 0xe0
 800c30e:	d11c      	bne.n	800c34a <etharp_output+0x8a>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c310:	2301      	movs	r3, #1
 800c312:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c316:	235e      	movs	r3, #94	@ 0x5e
 800c318:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c31c:	786b      	ldrb	r3, [r5, #1]
 800c31e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c322:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c326:	78ab      	ldrb	r3, [r5, #2]
 800c328:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c32c:	78eb      	ldrb	r3, [r5, #3]
 800c32e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800c332:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c334:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c338:	4631      	mov	r1, r6
 800c33a:	4620      	mov	r0, r4
 800c33c:	9200      	str	r2, [sp, #0]
 800c33e:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 800c342:	f000 fef1 	bl	800d128 <ethernet_output>
}
 800c346:	b005      	add	sp, #20
 800c348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c34a:	6862      	ldr	r2, [r4, #4]
 800c34c:	68a1      	ldr	r1, [r4, #8]
 800c34e:	405a      	eors	r2, r3
 800c350:	420a      	tst	r2, r1
 800c352:	d009      	beq.n	800c368 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 800c354:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c356:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d004      	beq.n	800c368 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c35e:	68e3      	ldr	r3, [r4, #12]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d035      	beq.n	800c3d0 <etharp_output+0x110>
            dst_addr = netif_ip4_gw(netif);
 800c364:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c368:	4920      	ldr	r1, [pc, #128]	@ (800c3ec <etharp_output+0x12c>)
 800c36a:	2018      	movs	r0, #24
 800c36c:	4b20      	ldr	r3, [pc, #128]	@ (800c3f0 <etharp_output+0x130>)
 800c36e:	780a      	ldrb	r2, [r1, #0]
 800c370:	fb00 3302 	mla	r3, r0, r2, r3
 800c374:	7d18      	ldrb	r0, [r3, #20]
 800c376:	2801      	cmp	r0, #1
 800c378:	d90d      	bls.n	800c396 <etharp_output+0xd6>
 800c37a:	6898      	ldr	r0, [r3, #8]
 800c37c:	42a0      	cmp	r0, r4
 800c37e:	d10a      	bne.n	800c396 <etharp_output+0xd6>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c380:	6828      	ldr	r0, [r5, #0]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	4298      	cmp	r0, r3
 800c386:	d106      	bne.n	800c396 <etharp_output+0xd6>
        return etharp_output_to_arp_index(netif, q, i);
 800c388:	4631      	mov	r1, r6
 800c38a:	4620      	mov	r0, r4
}
 800c38c:	b005      	add	sp, #20
 800c38e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800c392:	f7ff bea3 	b.w	800c0dc <etharp_output_to_arp_index>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c396:	4b16      	ldr	r3, [pc, #88]	@ (800c3f0 <etharp_output+0x130>)
{
 800c398:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c39a:	7d18      	ldrb	r0, [r3, #20]
 800c39c:	2801      	cmp	r0, #1
 800c39e:	d909      	bls.n	800c3b4 <etharp_output+0xf4>
 800c3a0:	6898      	ldr	r0, [r3, #8]
 800c3a2:	42a0      	cmp	r0, r4
 800c3a4:	d106      	bne.n	800c3b4 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 800c3a6:	682f      	ldr	r7, [r5, #0]
 800c3a8:	6858      	ldr	r0, [r3, #4]
 800c3aa:	4287      	cmp	r7, r0
 800c3ac:	d102      	bne.n	800c3b4 <etharp_output+0xf4>
 800c3ae:	b2d2      	uxtb	r2, r2
        ETHARP_SET_ADDRHINT(netif, i);
 800c3b0:	700a      	strb	r2, [r1, #0]
 800c3b2:	e7e9      	b.n	800c388 <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c3b4:	3201      	adds	r2, #1
 800c3b6:	3318      	adds	r3, #24
 800c3b8:	2a0a      	cmp	r2, #10
 800c3ba:	d1ee      	bne.n	800c39a <etharp_output+0xda>
    return etharp_query(netif, dst_addr, q);
 800c3bc:	4632      	mov	r2, r6
 800c3be:	4629      	mov	r1, r5
 800c3c0:	4620      	mov	r0, r4
}
 800c3c2:	b005      	add	sp, #20
 800c3c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800c3c8:	f7ff bede 	b.w	800c188 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800c3cc:	4b09      	ldr	r3, [pc, #36]	@ (800c3f4 <etharp_output+0x134>)
 800c3ce:	e7b1      	b.n	800c334 <etharp_output+0x74>
            return ERR_RTE;
 800c3d0:	f06f 0003 	mvn.w	r0, #3
 800c3d4:	e7b7      	b.n	800c346 <etharp_output+0x86>
 800c3d6:	bf00      	nop
 800c3d8:	080106e4 	.word	0x080106e4
 800c3dc:	0800e51c 	.word	0x0800e51c
 800c3e0:	0800e45a 	.word	0x0800e45a
 800c3e4:	0800f2ed 	.word	0x0800f2ed
 800c3e8:	080107cd 	.word	0x080107cd
 800c3ec:	200375b4 	.word	0x200375b4
 800c3f0:	200375b8 	.word	0x200375b8
 800c3f4:	08010bd4 	.word	0x08010bd4

0800c3f8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	b087      	sub	sp, #28
 800c3fe:	460f      	mov	r7, r1
 800c400:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c402:	2124      	movs	r1, #36	@ 0x24
 800c404:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c408:	2022      	movs	r0, #34	@ 0x22
 800c40a:	f7fb fadb 	bl	80079c4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800c40e:	4605      	mov	r5, r0
 800c410:	b390      	cbz	r0, 800c478 <icmp_send_response+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c412:	8943      	ldrh	r3, [r0, #10]
 800c414:	2b23      	cmp	r3, #35	@ 0x23
 800c416:	d806      	bhi.n	800c426 <icmp_send_response+0x2e>
 800c418:	4b18      	ldr	r3, [pc, #96]	@ (800c47c <icmp_send_response+0x84>)
 800c41a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800c41e:	4918      	ldr	r1, [pc, #96]	@ (800c480 <icmp_send_response+0x88>)
 800c420:	4818      	ldr	r0, [pc, #96]	@ (800c484 <icmp_send_response+0x8c>)
 800c422:	f001 f893 	bl	800d54c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c426:	6860      	ldr	r0, [r4, #4]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800c428:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c42a:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c42c:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 800c430:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c432:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 800c436:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800c438:	71a3      	strb	r3, [r4, #6]
 800c43a:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c43c:	4603      	mov	r3, r0
  icmphdr->type = type;
 800c43e:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 800c440:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c442:	f853 6b04 	ldr.w	r6, [r3], #4
 800c446:	428b      	cmp	r3, r1
 800c448:	f842 6b04 	str.w	r6, [r2], #4
 800c44c:	d1f9      	bne.n	800c442 <icmp_send_response+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c44e:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c450:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 800c452:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800c454:	f000 f8d0 	bl	800c5f8 <ip4_route>
#endif
  if (netif != NULL) {
 800c458:	b158      	cbz	r0, 800c472 <icmp_send_response+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c45a:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c45c:	2301      	movs	r3, #1
 800c45e:	aa05      	add	r2, sp, #20
    icmphdr->chksum = 0;
 800c460:	70a1      	strb	r1, [r4, #2]
 800c462:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c464:	9002      	str	r0, [sp, #8]
 800c466:	4628      	mov	r0, r5
 800c468:	e9cd 1300 	strd	r1, r3, [sp]
 800c46c:	23ff      	movs	r3, #255	@ 0xff
 800c46e:	f000 fa23 	bl	800c8b8 <ip4_output_if>
  }
  pbuf_free(q);
 800c472:	4628      	mov	r0, r5
 800c474:	f7fb fa3c 	bl	80078f0 <pbuf_free>
}
 800c478:	b007      	add	sp, #28
 800c47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c47c:	08010868 	.word	0x08010868
 800c480:	0801089d 	.word	0x0801089d
 800c484:	0800e45a 	.word	0x0800e45a

0800c488 <icmp_input>:
{
 800c488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800c48c:	4f43      	ldr	r7, [pc, #268]	@ (800c59c <icmp_input+0x114>)
{
 800c48e:	b085      	sub	sp, #20
 800c490:	4604      	mov	r4, r0
 800c492:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 800c494:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800c498:	f899 5000 	ldrb.w	r5, [r9]
 800c49c:	f005 050f 	and.w	r5, r5, #15
 800c4a0:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 800c4a2:	2d13      	cmp	r5, #19
 800c4a4:	d92e      	bls.n	800c504 <icmp_input+0x7c>
  if (p->len < sizeof(u16_t) * 2) {
 800c4a6:	8943      	ldrh	r3, [r0, #10]
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	d92b      	bls.n	800c504 <icmp_input+0x7c>
  type = *((u8_t *)p->payload);
 800c4ac:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	2b08      	cmp	r3, #8
 800c4b2:	d127      	bne.n	800c504 <icmp_input+0x7c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c4b4:	6978      	ldr	r0, [r7, #20]
 800c4b6:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 800c4ba:	2be0      	cmp	r3, #224	@ 0xe0
 800c4bc:	d022      	beq.n	800c504 <icmp_input+0x7c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	f000 fa0b 	bl	800c8da <ip4_addr_isbroadcast_u32>
 800c4c4:	b9f0      	cbnz	r0, 800c504 <icmp_input+0x7c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c4c6:	8923      	ldrh	r3, [r4, #8]
 800c4c8:	2b07      	cmp	r3, #7
 800c4ca:	d91b      	bls.n	800c504 <icmp_input+0x7c>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c4cc:	f105 060e 	add.w	r6, r5, #14
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	4631      	mov	r1, r6
 800c4d4:	f7fb f9d4 	bl	8007880 <pbuf_add_header>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d052      	beq.n	800c582 <icmp_input+0xfa>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c4dc:	8923      	ldrh	r3, [r4, #8]
 800c4de:	18e9      	adds	r1, r5, r3
 800c4e0:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800c4e2:	428b      	cmp	r3, r1
 800c4e4:	d80e      	bhi.n	800c504 <icmp_input+0x7c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c4e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c4ea:	200e      	movs	r0, #14
 800c4ec:	f7fb fa6a 	bl	80079c4 <pbuf_alloc>
        if (r == NULL) {
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	b138      	cbz	r0, 800c504 <icmp_input+0x7c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c4f4:	8942      	ldrh	r2, [r0, #10]
 800c4f6:	f105 0308 	add.w	r3, r5, #8
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d208      	bcs.n	800c510 <icmp_input+0x88>
          pbuf_free(r);
 800c4fe:	4630      	mov	r0, r6
 800c500:	f7fb f9f6 	bl	80078f0 <pbuf_free>
  pbuf_free(p);
 800c504:	4620      	mov	r0, r4
}
 800c506:	b005      	add	sp, #20
 800c508:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800c50c:	f7fb b9f0 	b.w	80078f0 <pbuf_free>
        MEMCPY(r->payload, iphdr_in, hlen);
 800c510:	4649      	mov	r1, r9
 800c512:	462a      	mov	r2, r5
 800c514:	6840      	ldr	r0, [r0, #4]
 800c516:	f001 f94a 	bl	800d7ae <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800c51a:	4629      	mov	r1, r5
 800c51c:	4630      	mov	r0, r6
 800c51e:	f7fb f9b3 	bl	8007888 <pbuf_remove_header>
 800c522:	b130      	cbz	r0, 800c532 <icmp_input+0xaa>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c524:	4b1e      	ldr	r3, [pc, #120]	@ (800c5a0 <icmp_input+0x118>)
 800c526:	22b6      	movs	r2, #182	@ 0xb6
 800c528:	491e      	ldr	r1, [pc, #120]	@ (800c5a4 <icmp_input+0x11c>)
 800c52a:	481f      	ldr	r0, [pc, #124]	@ (800c5a8 <icmp_input+0x120>)
 800c52c:	f001 f80e 	bl	800d54c <iprintf>
          pbuf_free(r);
 800c530:	e7e5      	b.n	800c4fe <icmp_input+0x76>
        if (pbuf_copy(r, p) != ERR_OK) {
 800c532:	4621      	mov	r1, r4
 800c534:	4630      	mov	r0, r6
 800c536:	f7fb fb8d 	bl	8007c54 <pbuf_copy>
 800c53a:	2800      	cmp	r0, #0
 800c53c:	d1df      	bne.n	800c4fe <icmp_input+0x76>
        pbuf_free(p);
 800c53e:	4620      	mov	r0, r4
 800c540:	4634      	mov	r4, r6
 800c542:	f7fb f9d5 	bl	80078f0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800c546:	4629      	mov	r1, r5
 800c548:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c54a:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 800c54c:	f7fb f998 	bl	8007880 <pbuf_add_header>
 800c550:	4602      	mov	r2, r0
 800c552:	2800      	cmp	r0, #0
 800c554:	d1d6      	bne.n	800c504 <icmp_input+0x7c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c556:	6860      	ldr	r0, [r4, #4]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c558:	2101      	movs	r1, #1
        ip4_addr_copy(iphdr->src, *src);
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	6103      	str	r3, [r0, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c562:	23ff      	movs	r3, #255	@ 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c564:	7032      	strb	r2, [r6, #0]
        iecho->chksum = 0;
 800c566:	70b2      	strb	r2, [r6, #2]
 800c568:	70f2      	strb	r2, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c56a:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c56c:	7282      	strb	r2, [r0, #10]
 800c56e:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c570:	4620      	mov	r0, r4
 800c572:	f8cd 8008 	str.w	r8, [sp, #8]
 800c576:	e9cd 2100 	strd	r2, r1, [sp]
 800c57a:	490c      	ldr	r1, [pc, #48]	@ (800c5ac <icmp_input+0x124>)
 800c57c:	f000 f99c 	bl	800c8b8 <ip4_output_if>
  pbuf_free(p);
 800c580:	e7c0      	b.n	800c504 <icmp_input+0x7c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c582:	4631      	mov	r1, r6
 800c584:	4620      	mov	r0, r4
 800c586:	f7fb f97f 	bl	8007888 <pbuf_remove_header>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d0db      	beq.n	800c546 <icmp_input+0xbe>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c58e:	4b04      	ldr	r3, [pc, #16]	@ (800c5a0 <icmp_input+0x118>)
 800c590:	22c7      	movs	r2, #199	@ 0xc7
 800c592:	4907      	ldr	r1, [pc, #28]	@ (800c5b0 <icmp_input+0x128>)
 800c594:	4804      	ldr	r0, [pc, #16]	@ (800c5a8 <icmp_input+0x120>)
 800c596:	f000 ffd9 	bl	800d54c <iprintf>
          goto icmperr;
 800c59a:	e7b3      	b.n	800c504 <icmp_input+0x7c>
 800c59c:	2002ed54 	.word	0x2002ed54
 800c5a0:	08010868 	.word	0x08010868
 800c5a4:	080108c9 	.word	0x080108c9
 800c5a8:	0800e45a 	.word	0x0800e45a
 800c5ac:	2002ed68 	.word	0x2002ed68
 800c5b0:	080108fe 	.word	0x080108fe

0800c5b4 <icmp_dest_unreach>:
{
 800c5b4:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800c5b6:	2103      	movs	r1, #3
 800c5b8:	f7ff bf1e 	b.w	800c3f8 <icmp_send_response>

0800c5bc <icmp_time_exceeded>:
{
 800c5bc:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800c5be:	210b      	movs	r1, #11
 800c5c0:	f7ff bf1a 	b.w	800c3f8 <icmp_send_response>

0800c5c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c5c4:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c5c6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
{
 800c5ca:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c5cc:	f013 0001 	ands.w	r0, r3, #1
 800c5d0:	d00a      	beq.n	800c5e8 <ip4_input_accept+0x24>
 800c5d2:	684b      	ldr	r3, [r1, #4]
 800c5d4:	b14b      	cbz	r3, 800c5ea <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c5d6:	4a07      	ldr	r2, [pc, #28]	@ (800c5f4 <ip4_input_accept+0x30>)
 800c5d8:	6950      	ldr	r0, [r2, #20]
 800c5da:	4283      	cmp	r3, r0
 800c5dc:	d007      	beq.n	800c5ee <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c5de:	f000 f97c 	bl	800c8da <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c5e2:	3800      	subs	r0, #0
 800c5e4:	bf18      	it	ne
 800c5e6:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 800c5e8:	bd08      	pop	{r3, pc}
  return 0;
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	e7fc      	b.n	800c5e8 <ip4_input_accept+0x24>
      return 1;
 800c5ee:	2001      	movs	r0, #1
 800c5f0:	e7fa      	b.n	800c5e8 <ip4_input_accept+0x24>
 800c5f2:	bf00      	nop
 800c5f4:	2002ed54 	.word	0x2002ed54

0800c5f8 <ip4_route>:
  NETIF_FOREACH(netif) {
 800c5f8:	4b14      	ldr	r3, [pc, #80]	@ (800c64c <ip4_route+0x54>)
{
 800c5fa:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 800c5fc:	6818      	ldr	r0, [r3, #0]
{
 800c5fe:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 800c600:	b978      	cbnz	r0, 800c622 <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c602:	4b13      	ldr	r3, [pc, #76]	@ (800c650 <ip4_route+0x58>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	b15b      	cbz	r3, 800c620 <ip4_route+0x28>
 800c608:	f893 102d 	ldrb.w	r1, [r3, #45]	@ 0x2d
 800c60c:	f001 0105 	and.w	r1, r1, #5
 800c610:	2905      	cmp	r1, #5
 800c612:	d105      	bne.n	800c620 <ip4_route+0x28>
 800c614:	6859      	ldr	r1, [r3, #4]
 800c616:	b119      	cbz	r1, 800c620 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c618:	7812      	ldrb	r2, [r2, #0]
 800c61a:	2a7f      	cmp	r2, #127	@ 0x7f
 800c61c:	bf18      	it	ne
 800c61e:	4618      	movne	r0, r3
}
 800c620:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c622:	f890 102d 	ldrb.w	r1, [r0, #45]	@ 0x2d
 800c626:	07cd      	lsls	r5, r1, #31
 800c628:	d50d      	bpl.n	800c646 <ip4_route+0x4e>
 800c62a:	074c      	lsls	r4, r1, #29
 800c62c:	d50b      	bpl.n	800c646 <ip4_route+0x4e>
 800c62e:	6843      	ldr	r3, [r0, #4]
 800c630:	b14b      	cbz	r3, 800c646 <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c632:	6814      	ldr	r4, [r2, #0]
 800c634:	6885      	ldr	r5, [r0, #8]
 800c636:	4063      	eors	r3, r4
 800c638:	422b      	tst	r3, r5
 800c63a:	d0f1      	beq.n	800c620 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c63c:	078b      	lsls	r3, r1, #30
 800c63e:	d402      	bmi.n	800c646 <ip4_route+0x4e>
 800c640:	68c3      	ldr	r3, [r0, #12]
 800c642:	429c      	cmp	r4, r3
 800c644:	d0ec      	beq.n	800c620 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 800c646:	6800      	ldr	r0, [r0, #0]
 800c648:	e7da      	b.n	800c600 <ip4_route+0x8>
 800c64a:	bf00      	nop
 800c64c:	20037550 	.word	0x20037550
 800c650:	2003754c 	.word	0x2003754c

0800c654 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c658:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 800c65c:	4604      	mov	r4, r0
 800c65e:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 800c660:	f899 8000 	ldrb.w	r8, [r9]
 800c664:	ea4f 1318 	mov.w	r3, r8, lsr #4
 800c668:	2b04      	cmp	r3, #4
 800c66a:	d005      	beq.n	800c678 <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c66c:	4620      	mov	r0, r4
 800c66e:	f7fb f93f 	bl	80078f0 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800c672:	2000      	movs	r0, #0
 800c674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c678:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c67c:	f008 080f 	and.w	r8, r8, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c680:	f7fa fba6 	bl	8006dd0 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800c684:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c686:	ea4f 0888 	mov.w	r8, r8, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c68a:	4605      	mov	r5, r0
  if (iphdr_len < p->tot_len) {
 800c68c:	4283      	cmp	r3, r0
 800c68e:	d903      	bls.n	800c698 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 800c690:	4601      	mov	r1, r0
 800c692:	4620      	mov	r0, r4
 800c694:	f7fb fa28 	bl	8007ae8 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c698:	8963      	ldrh	r3, [r4, #10]
 800c69a:	4543      	cmp	r3, r8
 800c69c:	d3e6      	bcc.n	800c66c <ip4_input+0x18>
 800c69e:	8923      	ldrh	r3, [r4, #8]
 800c6a0:	42ab      	cmp	r3, r5
 800c6a2:	d3e3      	bcc.n	800c66c <ip4_input+0x18>
 800c6a4:	f1b8 0f13 	cmp.w	r8, #19
 800c6a8:	d9e0      	bls.n	800c66c <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c6aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6ae:	4d42      	ldr	r5, [pc, #264]	@ (800c7b8 <ip4_input+0x164>)
 800c6b0:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c6b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c6b6:	f8d9 200c 	ldr.w	r2, [r9, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c6ba:	2be0      	cmp	r3, #224	@ 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c6bc:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c6be:	d13c      	bne.n	800c73a <ip4_input+0xe6>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c6c0:	f896 302d 	ldrb.w	r3, [r6, #45]	@ 0x2d
 800c6c4:	07db      	lsls	r3, r3, #31
 800c6c6:	d543      	bpl.n	800c750 <ip4_input+0xfc>
 800c6c8:	6873      	ldr	r3, [r6, #4]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d040      	beq.n	800c750 <ip4_input+0xfc>
      netif = NULL;
 800c6ce:	4637      	mov	r7, r6
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c6d0:	4631      	mov	r1, r6
 800c6d2:	6928      	ldr	r0, [r5, #16]
 800c6d4:	f000 f901 	bl	800c8da <ip4_addr_isbroadcast_u32>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d1c7      	bne.n	800c66c <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c6dc:	692b      	ldr	r3, [r5, #16]
 800c6de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c6e2:	2be0      	cmp	r3, #224	@ 0xe0
 800c6e4:	d0c2      	beq.n	800c66c <ip4_input+0x18>
  if (netif == NULL) {
 800c6e6:	2f00      	cmp	r7, #0
 800c6e8:	d0c0      	beq.n	800c66c <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c6ea:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 800c6ee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c6f2:	b13b      	cbz	r3, 800c704 <ip4_input+0xb0>
    p = ip4_reass(p);
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f000 fa0d 	bl	800cb14 <ip4_reass>
    if (p == NULL) {
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d0b8      	beq.n	800c672 <ip4_input+0x1e>
    iphdr = (const struct ip_hdr *)p->payload;
 800c700:	f8d0 9004 	ldr.w	r9, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800c704:	f8c5 9008 	str.w	r9, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c708:	4641      	mov	r1, r8
 800c70a:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800c70c:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c710:	f899 3000 	ldrb.w	r3, [r9]
 800c714:	f003 030f 	and.w	r3, r3, #15
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c71c:	f7fb f8b4 	bl	8007888 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800c720:	f899 3009 	ldrb.w	r3, [r9, #9]
 800c724:	2b06      	cmp	r3, #6
 800c726:	d02b      	beq.n	800c780 <ip4_input+0x12c>
 800c728:	2b11      	cmp	r3, #17
 800c72a:	d01d      	beq.n	800c768 <ip4_input+0x114>
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d12c      	bne.n	800c78a <ip4_input+0x136>
        icmp_input(p, inp);
 800c730:	4631      	mov	r1, r6
 800c732:	4620      	mov	r0, r4
 800c734:	f7ff fea8 	bl	800c488 <icmp_input>
        break;
 800c738:	e01a      	b.n	800c770 <ip4_input+0x11c>
    if (ip4_input_accept(inp)) {
 800c73a:	4630      	mov	r0, r6
 800c73c:	f7ff ff42 	bl	800c5c4 <ip4_input_accept>
 800c740:	2800      	cmp	r0, #0
 800c742:	d1c4      	bne.n	800c6ce <ip4_input+0x7a>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c744:	7d2b      	ldrb	r3, [r5, #20]
 800c746:	2b7f      	cmp	r3, #127	@ 0x7f
 800c748:	d002      	beq.n	800c750 <ip4_input+0xfc>
        NETIF_FOREACH(netif) {
 800c74a:	4b1c      	ldr	r3, [pc, #112]	@ (800c7bc <ip4_input+0x168>)
 800c74c:	681f      	ldr	r7, [r3, #0]
 800c74e:	b90f      	cbnz	r7, 800c754 <ip4_input+0x100>
      netif = NULL;
 800c750:	2700      	movs	r7, #0
 800c752:	e7bd      	b.n	800c6d0 <ip4_input+0x7c>
          if (netif == inp) {
 800c754:	42b7      	cmp	r7, r6
 800c756:	d101      	bne.n	800c75c <ip4_input+0x108>
        NETIF_FOREACH(netif) {
 800c758:	683f      	ldr	r7, [r7, #0]
 800c75a:	e7f8      	b.n	800c74e <ip4_input+0xfa>
          if (ip4_input_accept(netif)) {
 800c75c:	4638      	mov	r0, r7
 800c75e:	f7ff ff31 	bl	800c5c4 <ip4_input_accept>
 800c762:	2800      	cmp	r0, #0
 800c764:	d0f8      	beq.n	800c758 <ip4_input+0x104>
 800c766:	e7b3      	b.n	800c6d0 <ip4_input+0x7c>
        udp_input(p, inp);
 800c768:	4631      	mov	r1, r6
 800c76a:	4620      	mov	r0, r4
 800c76c:	f7ff f90a 	bl	800b984 <udp_input>
  ip_data.current_netif = NULL;
 800c770:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800c772:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 800c776:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c778:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c77a:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 800c77e:	e778      	b.n	800c672 <ip4_input+0x1e>
        tcp_input(p, inp);
 800c780:	4631      	mov	r1, r6
 800c782:	4620      	mov	r0, r4
 800c784:	f7fd f950 	bl	8009a28 <tcp_input>
        break;
 800c788:	e7f2      	b.n	800c770 <ip4_input+0x11c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c78a:	4639      	mov	r1, r7
 800c78c:	6968      	ldr	r0, [r5, #20]
 800c78e:	f000 f8a4 	bl	800c8da <ip4_addr_isbroadcast_u32>
 800c792:	b960      	cbnz	r0, 800c7ae <ip4_input+0x15a>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c794:	696b      	ldr	r3, [r5, #20]
 800c796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c79a:	2be0      	cmp	r3, #224	@ 0xe0
 800c79c:	d007      	beq.n	800c7ae <ip4_input+0x15a>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c79e:	4641      	mov	r1, r8
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f7fb f89d 	bl	80078e0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c7a6:	2102      	movs	r1, #2
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f7ff ff03 	bl	800c5b4 <icmp_dest_unreach>
        pbuf_free(p);
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f7fb f89e 	bl	80078f0 <pbuf_free>
        break;
 800c7b4:	e7dc      	b.n	800c770 <ip4_input+0x11c>
 800c7b6:	bf00      	nop
 800c7b8:	2002ed54 	.word	0x2002ed54
 800c7bc:	20037550 	.word	0x20037550

0800c7c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c7c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c4:	4698      	mov	r8, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c7c6:	7b83      	ldrb	r3, [r0, #14]
{
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c7cc:	2b01      	cmp	r3, #1
{
 800c7ce:	4616      	mov	r6, r2
 800c7d0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c7d2:	d006      	beq.n	800c7e2 <ip4_output_if_src+0x22>
 800c7d4:	4b32      	ldr	r3, [pc, #200]	@ (800c8a0 <ip4_output_if_src+0xe0>)
 800c7d6:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800c7da:	4932      	ldr	r1, [pc, #200]	@ (800c8a4 <ip4_output_if_src+0xe4>)
 800c7dc:	4832      	ldr	r0, [pc, #200]	@ (800c8a8 <ip4_output_if_src+0xe8>)
 800c7de:	f000 feb5 	bl	800d54c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c7e2:	2e00      	cmp	r6, #0
 800c7e4:	d04e      	beq.n	800c884 <ip4_output_if_src+0xc4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c7e6:	2114      	movs	r1, #20
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f7fb f849 	bl	8007880 <pbuf_add_header>
 800c7ee:	b120      	cbz	r0, 800c7fa <ip4_output_if_src+0x3a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c7f0:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800c7f4:	b002      	add	sp, #8
 800c7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c7fa:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800c7fc:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c7fe:	2b13      	cmp	r3, #19
 800c800:	d806      	bhi.n	800c810 <ip4_output_if_src+0x50>
 800c802:	4b27      	ldr	r3, [pc, #156]	@ (800c8a0 <ip4_output_if_src+0xe0>)
 800c804:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800c808:	4928      	ldr	r1, [pc, #160]	@ (800c8ac <ip4_output_if_src+0xec>)
 800c80a:	4827      	ldr	r0, [pc, #156]	@ (800c8a8 <ip4_output_if_src+0xe8>)
 800c80c:	f000 fe9e 	bl	800d54c <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 800c810:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800c814:	f885 8008 	strb.w	r8, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 800c818:	f04f 0800 	mov.w	r8, #0
    IPH_PROTO_SET(iphdr, proto);
 800c81c:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800c81e:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c820:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800c8b4 <ip4_output_if_src+0xf4>
    ip4_addr_copy(iphdr->dest, *dest);
 800c824:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c826:	2345      	movs	r3, #69	@ 0x45
 800c828:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800c82a:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800c82e:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c830:	8920      	ldrh	r0, [r4, #8]
 800c832:	f7fa facd 	bl	8006dd0 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800c836:	f885 8006 	strb.w	r8, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c83a:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800c83c:	f885 8007 	strb.w	r8, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c840:	f8ba 0000 	ldrh.w	r0, [sl]
 800c844:	f7fa fac4 	bl	8006dd0 <lwip_htons>
    ++ip_id;
 800c848:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c84c:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800c84e:	3301      	adds	r3, #1
 800c850:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 800c854:	f1b9 0f00 	cmp.w	r9, #0
 800c858:	d111      	bne.n	800c87e <ip4_output_if_src+0xbe>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c85a:	4b15      	ldr	r3, [pc, #84]	@ (800c8b0 <ip4_output_if_src+0xf0>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800c860:	f885 800a 	strb.w	r8, [r5, #10]
 800c864:	f885 800b 	strb.w	r8, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c868:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c86a:	b19b      	cbz	r3, 800c894 <ip4_output_if_src+0xd4>
 800c86c:	8922      	ldrh	r2, [r4, #8]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d910      	bls.n	800c894 <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 800c872:	4632      	mov	r2, r6
 800c874:	4639      	mov	r1, r7
 800c876:	4620      	mov	r0, r4
 800c878:	f000 fb20 	bl	800cebc <ip4_frag>
 800c87c:	e7ba      	b.n	800c7f4 <ip4_output_if_src+0x34>
      ip4_addr_copy(iphdr->src, *src);
 800c87e:	f8d9 3000 	ldr.w	r3, [r9]
 800c882:	e7ec      	b.n	800c85e <ip4_output_if_src+0x9e>
    if (p->len < IP_HLEN) {
 800c884:	8963      	ldrh	r3, [r4, #10]
 800c886:	2b13      	cmp	r3, #19
 800c888:	d9b2      	bls.n	800c7f0 <ip4_output_if_src+0x30>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c88a:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800c88c:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800c892:	e7e9      	b.n	800c868 <ip4_output_if_src+0xa8>
  return netif->output(netif, p, dest);
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	4632      	mov	r2, r6
 800c898:	4621      	mov	r1, r4
 800c89a:	4638      	mov	r0, r7
 800c89c:	4798      	blx	r3
 800c89e:	e7a9      	b.n	800c7f4 <ip4_output_if_src+0x34>
 800c8a0:	08010930 	.word	0x08010930
 800c8a4:	08010964 	.word	0x08010964
 800c8a8:	0800e45a 	.word	0x0800e45a
 800c8ac:	08010970 	.word	0x08010970
 800c8b0:	080109a0 	.word	0x080109a0
 800c8b4:	200376a8 	.word	0x200376a8

0800c8b8 <ip4_output_if>:
{
 800c8b8:	b4f0      	push	{r4, r5, r6, r7}
 800c8ba:	9c06      	ldr	r4, [sp, #24]
 800c8bc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800c8c0:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c8c4:	b11a      	cbz	r2, 800c8ce <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800c8c6:	b109      	cbz	r1, 800c8cc <ip4_output_if+0x14>
 800c8c8:	680f      	ldr	r7, [r1, #0]
 800c8ca:	b907      	cbnz	r7, 800c8ce <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800c8cc:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c8ce:	9504      	str	r5, [sp, #16]
 800c8d0:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800c8d4:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c8d6:	f7ff bf73 	b.w	800c7c0 <ip4_output_if_src>

0800c8da <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c8da:	1e43      	subs	r3, r0, #1
{
 800c8dc:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 800c8de:	3303      	adds	r3, #3
 800c8e0:	d812      	bhi.n	800c908 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c8e2:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 800c8e6:	f013 0002 	ands.w	r0, r3, #2
 800c8ea:	d010      	beq.n	800c90e <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c8ec:	684b      	ldr	r3, [r1, #4]
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d00c      	beq.n	800c90c <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c8f2:	6889      	ldr	r1, [r1, #8]
 800c8f4:	4053      	eors	r3, r2
 800c8f6:	420b      	tst	r3, r1
 800c8f8:	d108      	bne.n	800c90c <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c8fa:	43cb      	mvns	r3, r1
 800c8fc:	ea22 0201 	bic.w	r2, r2, r1
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	4258      	negs	r0, r3
 800c904:	4158      	adcs	r0, r3
 800c906:	4770      	bx	lr
    return 1;
 800c908:	2001      	movs	r0, #1
 800c90a:	4770      	bx	lr
    return 0;
 800c90c:	2000      	movs	r0, #0
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 800c90e:	4770      	bx	lr

0800c910 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c910:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c912:	4b0c      	ldr	r3, [pc, #48]	@ (800c944 <ip_reass_dequeue_datagram+0x34>)
{
 800c914:	4604      	mov	r4, r0
 800c916:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	4282      	cmp	r2, r0
 800c91c:	d107      	bne.n	800c92e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c91e:	6802      	ldr	r2, [r0, #0]
 800c920:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c922:	4621      	mov	r1, r4
 800c924:	2004      	movs	r0, #4
}
 800c926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800c92a:	f7fa bd7d 	b.w	8007428 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c92e:	b931      	cbnz	r1, 800c93e <ip_reass_dequeue_datagram+0x2e>
 800c930:	4b05      	ldr	r3, [pc, #20]	@ (800c948 <ip_reass_dequeue_datagram+0x38>)
 800c932:	f240 1245 	movw	r2, #325	@ 0x145
 800c936:	4905      	ldr	r1, [pc, #20]	@ (800c94c <ip_reass_dequeue_datagram+0x3c>)
 800c938:	4805      	ldr	r0, [pc, #20]	@ (800c950 <ip_reass_dequeue_datagram+0x40>)
 800c93a:	f000 fe07 	bl	800d54c <iprintf>
    prev->next = ipr->next;
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	602b      	str	r3, [r5, #0]
 800c942:	e7ee      	b.n	800c922 <ip_reass_dequeue_datagram+0x12>
 800c944:	200376ac 	.word	0x200376ac
 800c948:	080109a4 	.word	0x080109a4
 800c94c:	080109dd 	.word	0x080109dd
 800c950:	0800e45a 	.word	0x0800e45a

0800c954 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c954:	4281      	cmp	r1, r0
{
 800c956:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95a:	4604      	mov	r4, r0
 800c95c:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c95e:	d105      	bne.n	800c96c <ip_reass_free_complete_datagram+0x18>
 800c960:	4b2f      	ldr	r3, [pc, #188]	@ (800ca20 <ip_reass_free_complete_datagram+0xcc>)
 800c962:	22ab      	movs	r2, #171	@ 0xab
 800c964:	492f      	ldr	r1, [pc, #188]	@ (800ca24 <ip_reass_free_complete_datagram+0xd0>)
 800c966:	4830      	ldr	r0, [pc, #192]	@ (800ca28 <ip_reass_free_complete_datagram+0xd4>)
 800c968:	f000 fdf0 	bl	800d54c <iprintf>
  if (prev != NULL) {
 800c96c:	b146      	cbz	r6, 800c980 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c96e:	6833      	ldr	r3, [r6, #0]
 800c970:	42a3      	cmp	r3, r4
 800c972:	d005      	beq.n	800c980 <ip_reass_free_complete_datagram+0x2c>
 800c974:	4b2a      	ldr	r3, [pc, #168]	@ (800ca20 <ip_reass_free_complete_datagram+0xcc>)
 800c976:	22ad      	movs	r2, #173	@ 0xad
 800c978:	492c      	ldr	r1, [pc, #176]	@ (800ca2c <ip_reass_free_complete_datagram+0xd8>)
 800c97a:	482b      	ldr	r0, [pc, #172]	@ (800ca28 <ip_reass_free_complete_datagram+0xd4>)
 800c97c:	f000 fde6 	bl	800d54c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c980:	6867      	ldr	r7, [r4, #4]
 800c982:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 800c984:	889a      	ldrh	r2, [r3, #4]
 800c986:	bb92      	cbnz	r2, 800c9ee <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 800c988:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c98a:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 800c98e:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c990:	f104 0208 	add.w	r2, r4, #8
 800c994:	f852 0b04 	ldr.w	r0, [r2], #4
 800c998:	428a      	cmp	r2, r1
 800c99a:	f843 0b04 	str.w	r0, [r3], #4
 800c99e:	d1f9      	bne.n	800c994 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c9a0:	2101      	movs	r1, #1
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	f7ff fe0a 	bl	800c5bc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	f7fb f8f5 	bl	8007b98 <pbuf_clen>
 800c9ae:	4605      	mov	r5, r0
    pbuf_free(p);
 800c9b0:	4638      	mov	r0, r7
 800c9b2:	f7fa ff9d 	bl	80078f0 <pbuf_free>
  p = ipr->p;
 800c9b6:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c9b8:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 800ca20 <ip_reass_free_complete_datagram+0xcc>
 800c9bc:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800ca38 <ip_reass_free_complete_datagram+0xe4>
 800c9c0:	f8df a064 	ldr.w	sl, [pc, #100]	@ 800ca28 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 800c9c4:	b9af      	cbnz	r7, 800c9f2 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800c9c6:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c9c8:	4c19      	ldr	r4, [pc, #100]	@ (800ca30 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	f7ff ffa0 	bl	800c910 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c9d0:	8823      	ldrh	r3, [r4, #0]
 800c9d2:	42ab      	cmp	r3, r5
 800c9d4:	d205      	bcs.n	800c9e2 <ip_reass_free_complete_datagram+0x8e>
 800c9d6:	4b12      	ldr	r3, [pc, #72]	@ (800ca20 <ip_reass_free_complete_datagram+0xcc>)
 800c9d8:	22d2      	movs	r2, #210	@ 0xd2
 800c9da:	4916      	ldr	r1, [pc, #88]	@ (800ca34 <ip_reass_free_complete_datagram+0xe0>)
 800c9dc:	4812      	ldr	r0, [pc, #72]	@ (800ca28 <ip_reass_free_complete_datagram+0xd4>)
 800c9de:	f000 fdb5 	bl	800d54c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c9e2:	8823      	ldrh	r3, [r4, #0]
}
 800c9e4:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c9e6:	1b5b      	subs	r3, r3, r5
 800c9e8:	8023      	strh	r3, [r4, #0]
}
 800c9ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800c9ee:	2500      	movs	r5, #0
 800c9f0:	e7e1      	b.n	800c9b6 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800c9f2:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 800c9f4:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 800c9f6:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800c9fa:	f7fb f8cd 	bl	8007b98 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c9fe:	4405      	add	r5, r0
 800ca00:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800ca04:	db05      	blt.n	800ca12 <ip_reass_free_complete_datagram+0xbe>
 800ca06:	4643      	mov	r3, r8
 800ca08:	22cc      	movs	r2, #204	@ 0xcc
 800ca0a:	4649      	mov	r1, r9
 800ca0c:	4650      	mov	r0, sl
 800ca0e:	f000 fd9d 	bl	800d54c <iprintf>
    pbuf_free(pcur);
 800ca12:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ca14:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 800ca16:	465f      	mov	r7, fp
    pbuf_free(pcur);
 800ca18:	f7fa ff6a 	bl	80078f0 <pbuf_free>
 800ca1c:	e7d2      	b.n	800c9c4 <ip_reass_free_complete_datagram+0x70>
 800ca1e:	bf00      	nop
 800ca20:	080109a4 	.word	0x080109a4
 800ca24:	080109f6 	.word	0x080109f6
 800ca28:	0800e45a 	.word	0x0800e45a
 800ca2c:	08010a02 	.word	0x08010a02
 800ca30:	200376aa 	.word	0x200376aa
 800ca34:	08010a31 	.word	0x08010a31
 800ca38:	08010a14 	.word	0x08010a14

0800ca3c <ip_reass_remove_oldest_datagram>:
{
 800ca3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca40:	4605      	mov	r5, r0
 800ca42:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800ca44:	2600      	movs	r6, #0
    r = reassdatagrams;
 800ca46:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 800cab0 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 800ca4a:	2400      	movs	r4, #0
    r = reassdatagrams;
 800ca4c:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800ca50:	4621      	mov	r1, r4
    prev = NULL;
 800ca52:	46a4      	mov	ip, r4
    oldest = NULL;
 800ca54:	4620      	mov	r0, r4
    while (r != NULL) {
 800ca56:	b953      	cbnz	r3, 800ca6e <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800ca58:	b110      	cbz	r0, 800ca60 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ca5a:	f7ff ff7b 	bl	800c954 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800ca5e:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ca60:	42be      	cmp	r6, r7
 800ca62:	da01      	bge.n	800ca68 <ip_reass_remove_oldest_datagram+0x2c>
 800ca64:	2c01      	cmp	r4, #1
 800ca66:	dcf0      	bgt.n	800ca4a <ip_reass_remove_oldest_datagram+0xe>
}
 800ca68:	4630      	mov	r0, r6
 800ca6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ca6e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800ca72:	695a      	ldr	r2, [r3, #20]
 800ca74:	4572      	cmp	r2, lr
 800ca76:	d109      	bne.n	800ca8c <ip_reass_remove_oldest_datagram+0x50>
 800ca78:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800ca7c:	699a      	ldr	r2, [r3, #24]
 800ca7e:	4572      	cmp	r2, lr
 800ca80:	d104      	bne.n	800ca8c <ip_reass_remove_oldest_datagram+0x50>
 800ca82:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 800ca86:	88aa      	ldrh	r2, [r5, #4]
 800ca88:	4596      	cmp	lr, r2
 800ca8a:	d008      	beq.n	800ca9e <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 800ca8c:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800ca8e:	b160      	cbz	r0, 800caaa <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800ca90:	7fc2      	ldrb	r2, [r0, #31]
 800ca92:	f893 e01f 	ldrb.w	lr, [r3, #31]
 800ca96:	4596      	cmp	lr, r2
 800ca98:	bf9c      	itt	ls
 800ca9a:	4661      	movls	r1, ip
 800ca9c:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	2a00      	cmp	r2, #0
 800caa2:	bf18      	it	ne
 800caa4:	469c      	movne	ip, r3
 800caa6:	4613      	mov	r3, r2
 800caa8:	e7d5      	b.n	800ca56 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800caaa:	4661      	mov	r1, ip
 800caac:	4618      	mov	r0, r3
 800caae:	e7f6      	b.n	800ca9e <ip_reass_remove_oldest_datagram+0x62>
 800cab0:	200376ac 	.word	0x200376ac

0800cab4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800cab4:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800cab6:	4604      	mov	r4, r0
 800cab8:	b930      	cbnz	r0, 800cac8 <ipfrag_free_pbuf_custom+0x14>
 800caba:	4b08      	ldr	r3, [pc, #32]	@ (800cadc <ipfrag_free_pbuf_custom+0x28>)
 800cabc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800cac0:	4907      	ldr	r1, [pc, #28]	@ (800cae0 <ipfrag_free_pbuf_custom+0x2c>)
 800cac2:	4808      	ldr	r0, [pc, #32]	@ (800cae4 <ipfrag_free_pbuf_custom+0x30>)
 800cac4:	f000 fd42 	bl	800d54c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800cac8:	6960      	ldr	r0, [r4, #20]
 800caca:	b108      	cbz	r0, 800cad0 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800cacc:	f7fa ff10 	bl	80078f0 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800cad0:	4621      	mov	r1, r4
 800cad2:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800cad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800cad8:	f7fa bca6 	b.w	8007428 <memp_free>
 800cadc:	080109a4 	.word	0x080109a4
 800cae0:	08010a53 	.word	0x08010a53
 800cae4:	0800e45a 	.word	0x0800e45a

0800cae8 <ip_reass_tmr>:
{
 800cae8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800caea:	4b09      	ldr	r3, [pc, #36]	@ (800cb10 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 800caec:	2400      	movs	r4, #0
  r = reassdatagrams;
 800caee:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800caf0:	b900      	cbnz	r0, 800caf4 <ip_reass_tmr+0xc>
}
 800caf2:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800caf4:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 800caf6:	6805      	ldr	r5, [r0, #0]
    if (r->timer > 0) {
 800caf8:	b123      	cbz	r3, 800cb04 <ip_reass_tmr+0x1c>
      r->timer--;
 800cafa:	3b01      	subs	r3, #1
 800cafc:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 800cafe:	4604      	mov	r4, r0
 800cb00:	4628      	mov	r0, r5
 800cb02:	e7f5      	b.n	800caf0 <ip_reass_tmr+0x8>
 800cb04:	4621      	mov	r1, r4
 800cb06:	f7ff ff25 	bl	800c954 <ip_reass_free_complete_datagram>
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	e7f7      	b.n	800cafe <ip_reass_tmr+0x16>
 800cb0e:	bf00      	nop
 800cb10:	200376ac 	.word	0x200376ac

0800cb14 <ip4_reass>:
{
 800cb14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800cb18:	6845      	ldr	r5, [r0, #4]
{
 800cb1a:	4607      	mov	r7, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800cb1c:	782b      	ldrb	r3, [r5, #0]
 800cb1e:	f003 030f 	and.w	r3, r3, #15
 800cb22:	2b05      	cmp	r3, #5
 800cb24:	f040 80a9 	bne.w	800cc7a <ip4_reass+0x166>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800cb28:	88e8      	ldrh	r0, [r5, #6]
 800cb2a:	f7fa f951 	bl	8006dd0 <lwip_htons>
 800cb2e:	4680      	mov	r8, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800cb30:	8868      	ldrh	r0, [r5, #2]
 800cb32:	f7fa f94d 	bl	8006dd0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800cb36:	782b      	ldrb	r3, [r5, #0]
 800cb38:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800cb3c:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800cb40:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800cb44:	f0c0 8099 	bcc.w	800cc7a <ip4_reass+0x166>
  len = (u16_t)(len - hlen);
 800cb48:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800cb4a:	4caf      	ldr	r4, [pc, #700]	@ (800ce08 <ip4_reass+0x2f4>)
  clen = pbuf_clen(p);
 800cb4c:	4638      	mov	r0, r7
  len = (u16_t)(len - hlen);
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800cb52:	f7fb f821 	bl	8007b98 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800cb56:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 800cb58:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800cb5a:	4403      	add	r3, r0
 800cb5c:	2b0a      	cmp	r3, #10
 800cb5e:	f300 8082 	bgt.w	800cc66 <ip4_reass+0x152>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cb62:	4eaa      	ldr	r6, [pc, #680]	@ (800ce0c <ip4_reass+0x2f8>)
 800cb64:	6834      	ldr	r4, [r6, #0]
 800cb66:	2c00      	cmp	r4, #0
 800cb68:	f040 808c 	bne.w	800cc84 <ip4_reass+0x170>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cb6c:	2004      	movs	r0, #4
 800cb6e:	f7fa fc2d 	bl	80073cc <memp_malloc>
  if (ipr == NULL) {
 800cb72:	4604      	mov	r4, r0
 800cb74:	b958      	cbnz	r0, 800cb8e <ip4_reass+0x7a>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cb76:	4651      	mov	r1, sl
 800cb78:	4628      	mov	r0, r5
 800cb7a:	f7ff ff5f 	bl	800ca3c <ip_reass_remove_oldest_datagram>
 800cb7e:	4582      	cmp	sl, r0
 800cb80:	dc7b      	bgt.n	800cc7a <ip4_reass+0x166>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cb82:	2004      	movs	r0, #4
 800cb84:	f7fa fc22 	bl	80073cc <memp_malloc>
    if (ipr == NULL)
 800cb88:	4604      	mov	r4, r0
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d075      	beq.n	800cc7a <ip4_reass+0x166>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cb8e:	221c      	movs	r2, #28
 800cb90:	2100      	movs	r1, #0
 800cb92:	1d20      	adds	r0, r4, #4
 800cb94:	f000 fd3f 	bl	800d616 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cb98:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cb9a:	f104 0208 	add.w	r2, r4, #8
 800cb9e:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800cba2:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800cba4:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800cba6:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 800cba8:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cbaa:	462b      	mov	r3, r5
 800cbac:	f853 0b04 	ldr.w	r0, [r3], #4
 800cbb0:	428b      	cmp	r3, r1
 800cbb2:	f842 0b04 	str.w	r0, [r2], #4
 800cbb6:	d1f9      	bne.n	800cbac <ip4_reass+0x98>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800cbb8:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800cbbc:	f3c8 080c 	ubfx	r8, r8, #0, #13
  if (is_last) {
 800cbc0:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800cbc4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  if (is_last) {
 800cbc8:	d10a      	bne.n	800cbe0 <ip4_reass+0xcc>
    u16_t datagram_len = (u16_t)(offset + len);
 800cbca:	9b01      	ldr	r3, [sp, #4]
 800cbcc:	4443      	add	r3, r8
 800cbce:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800cbd0:	4598      	cmp	r8, r3
 800cbd2:	f200 813a 	bhi.w	800ce4a <ip4_reass+0x336>
 800cbd6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	f200 8135 	bhi.w	800ce4a <ip4_reass+0x336>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800cbe0:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800cbe2:	8868      	ldrh	r0, [r5, #2]
 800cbe4:	f7fa f8f4 	bl	8006dd0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800cbe8:	782b      	ldrb	r3, [r5, #0]
 800cbea:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800cbee:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800cbf2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800cbf6:	f0c0 8128 	bcc.w	800ce4a <ip4_reass+0x336>
  len = (u16_t)(len - hlen);
 800cbfa:	1a80      	subs	r0, r0, r2
 800cbfc:	fa1f f980 	uxth.w	r9, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800cc00:	88e8      	ldrh	r0, [r5, #6]
 800cc02:	f7fa f8e5 	bl	8006dd0 <lwip_htons>
 800cc06:	f3c0 030c 	ubfx	r3, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 800cc0a:	687e      	ldr	r6, [r7, #4]
  iprh->next_pbuf = NULL;
 800cc0c:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800cc0e:	00db      	lsls	r3, r3, #3
  iprh->next_pbuf = NULL;
 800cc10:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 800cc12:	eb09 0003 	add.w	r0, r9, r3
  iprh->next_pbuf = NULL;
 800cc16:	7075      	strb	r5, [r6, #1]
 800cc18:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 800cc1a:	fa1f fc80 	uxth.w	ip, r0
  iprh->next_pbuf = NULL;
 800cc1e:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800cc20:	80b3      	strh	r3, [r6, #4]
  if (iprh->end < offset) {
 800cc22:	4563      	cmp	r3, ip
  iprh->end = (u16_t)(offset + len);
 800cc24:	80f0      	strh	r0, [r6, #6]
  if (iprh->end < offset) {
 800cc26:	f200 8110 	bhi.w	800ce4a <ip4_reass+0x336>
  for (q = ipr->p; q != NULL;) {
 800cc2a:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 800cc2e:	f04f 0901 	mov.w	r9, #1
  for (q = ipr->p; q != NULL;) {
 800cc32:	4670      	mov	r0, lr
 800cc34:	bba8      	cbnz	r0, 800cca2 <ip4_reass+0x18e>
    if (iprh_prev != NULL) {
 800cc36:	2d00      	cmp	r5, #0
 800cc38:	f000 80b2 	beq.w	800cda0 <ip4_reass+0x28c>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800cc3c:	88ea      	ldrh	r2, [r5, #6]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d906      	bls.n	800cc50 <ip4_reass+0x13c>
 800cc42:	4b73      	ldr	r3, [pc, #460]	@ (800ce10 <ip4_reass+0x2fc>)
 800cc44:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800cc48:	4972      	ldr	r1, [pc, #456]	@ (800ce14 <ip4_reass+0x300>)
 800cc4a:	4873      	ldr	r0, [pc, #460]	@ (800ce18 <ip4_reass+0x304>)
 800cc4c:	f000 fc7e 	bl	800d54c <iprintf>
      if (iprh_prev->end != iprh->start) {
 800cc50:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 800cc52:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800cc54:	88b3      	ldrh	r3, [r6, #4]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d036      	beq.n	800ccc8 <ip4_reass+0x1b4>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800cc5a:	f1bb 0f00 	cmp.w	fp, #0
 800cc5e:	d03e      	beq.n	800ccde <ip4_reass+0x1ca>
        valid = 0;
 800cc60:	f04f 0900 	mov.w	r9, #0
 800cc64:	e033      	b.n	800ccce <ip4_reass+0x1ba>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cc66:	4601      	mov	r1, r0
 800cc68:	4628      	mov	r0, r5
 800cc6a:	f7ff fee7 	bl	800ca3c <ip_reass_remove_oldest_datagram>
 800cc6e:	b120      	cbz	r0, 800cc7a <ip4_reass+0x166>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800cc70:	8823      	ldrh	r3, [r4, #0]
 800cc72:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cc74:	2b0a      	cmp	r3, #10
 800cc76:	f77f af74 	ble.w	800cb62 <ip4_reass+0x4e>
  pbuf_free(p);
 800cc7a:	4638      	mov	r0, r7
 800cc7c:	f7fa fe38 	bl	80078f0 <pbuf_free>
  return NULL;
 800cc80:	2700      	movs	r7, #0
 800cc82:	e078      	b.n	800cd76 <ip4_reass+0x262>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800cc84:	68eb      	ldr	r3, [r5, #12]
 800cc86:	6962      	ldr	r2, [r4, #20]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d108      	bne.n	800cc9e <ip4_reass+0x18a>
 800cc8c:	692b      	ldr	r3, [r5, #16]
 800cc8e:	69a2      	ldr	r2, [r4, #24]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d104      	bne.n	800cc9e <ip4_reass+0x18a>
 800cc94:	89a2      	ldrh	r2, [r4, #12]
 800cc96:	88ab      	ldrh	r3, [r5, #4]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	f000 80ea 	beq.w	800ce72 <ip4_reass+0x35e>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cc9e:	6824      	ldr	r4, [r4, #0]
 800cca0:	e761      	b.n	800cb66 <ip4_reass+0x52>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800cca2:	6842      	ldr	r2, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 800cca4:	8891      	ldrh	r1, [r2, #4]
 800cca6:	428b      	cmp	r3, r1
 800cca8:	d26d      	bcs.n	800cd86 <ip4_reass+0x272>
      iprh->next_pbuf = q;
 800ccaa:	6030      	str	r0, [r6, #0]
      if (iprh_prev != NULL) {
 800ccac:	2d00      	cmp	r5, #0
 800ccae:	d066      	beq.n	800cd7e <ip4_reass+0x26a>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ccb0:	88ea      	ldrh	r2, [r5, #6]
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	f0c0 80c9 	bcc.w	800ce4a <ip4_reass+0x336>
 800ccb8:	458c      	cmp	ip, r1
 800ccba:	f200 80c6 	bhi.w	800ce4a <ip4_reass+0x336>
          valid = 0;
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	bf18      	it	ne
 800ccc2:	f04f 0900 	movne.w	r9, #0
        iprh_prev->next_pbuf = new_p;
 800ccc6:	602f      	str	r7, [r5, #0]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ccc8:	f1bb 0f00 	cmp.w	fp, #0
 800cccc:	d004      	beq.n	800ccd8 <ip4_reass+0x1c4>
 800ccce:	7fa3      	ldrb	r3, [r4, #30]
 800ccd0:	f013 0301 	ands.w	r3, r3, #1
 800ccd4:	f000 8095 	beq.w	800ce02 <ip4_reass+0x2ee>
    if (valid) {
 800ccd8:	f1b9 0f00 	cmp.w	r9, #0
 800ccdc:	d16b      	bne.n	800cdb6 <ip4_reass+0x2a2>
          iprh = (struct ip_reass_helper *)q->payload;
 800ccde:	f04f 0900 	mov.w	r9, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800cce2:	4e49      	ldr	r6, [pc, #292]	@ (800ce08 <ip4_reass+0x2f4>)
 800cce4:	8833      	ldrh	r3, [r6, #0]
 800cce6:	4453      	add	r3, sl
 800cce8:	8033      	strh	r3, [r6, #0]
  if (is_last) {
 800ccea:	f1bb 0f00 	cmp.w	fp, #0
 800ccee:	d107      	bne.n	800cd00 <ip4_reass+0x1ec>
    u16_t datagram_len = (u16_t)(offset + len);
 800ccf0:	9b01      	ldr	r3, [sp, #4]
 800ccf2:	4498      	add	r8, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ccf4:	7fa3      	ldrb	r3, [r4, #30]
 800ccf6:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 800ccfa:	f8a4 801c 	strh.w	r8, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ccfe:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800cd00:	f1b9 0f01 	cmp.w	r9, #1
 800cd04:	d1bc      	bne.n	800cc80 <ip4_reass+0x16c>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800cd06:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cd08:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800cd0c:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800cd0e:	685f      	ldr	r7, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cd10:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800cd14:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800cd16:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cd18:	463a      	mov	r2, r7
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800cd1a:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cd1c:	f853 cb04 	ldr.w	ip, [r3], #4
 800cd20:	428b      	cmp	r3, r1
 800cd22:	f842 cb04 	str.w	ip, [r2], #4
 800cd26:	d1f9      	bne.n	800cd1c <ip4_reass+0x208>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800cd28:	f7fa f852 	bl	8006dd0 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800cd2c:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800cd2e:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800cd30:	71bb      	strb	r3, [r7, #6]
 800cd32:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800cd34:	72bb      	strb	r3, [r7, #10]
 800cd36:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 800cd38:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 800cd3a:	2d00      	cmp	r5, #0
 800cd3c:	d176      	bne.n	800ce2c <ip4_reass+0x318>
    if (ipr == reassdatagrams) {
 800cd3e:	4b33      	ldr	r3, [pc, #204]	@ (800ce0c <ip4_reass+0x2f8>)
 800cd40:	681b      	ldr	r3, [r3, #0]
        if (ipr_prev->next == ipr) {
 800cd42:	42a3      	cmp	r3, r4
 800cd44:	d002      	beq.n	800cd4c <ip4_reass+0x238>
 800cd46:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d17c      	bne.n	800ce46 <ip4_reass+0x332>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	4629      	mov	r1, r5
 800cd50:	f7ff fdde 	bl	800c910 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800cd54:	4638      	mov	r0, r7
 800cd56:	f7fa ff1f 	bl	8007b98 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800cd5a:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(p);
 800cd5c:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800cd5e:	4283      	cmp	r3, r0
 800cd60:	d206      	bcs.n	800cd70 <ip4_reass+0x25c>
 800cd62:	4b2b      	ldr	r3, [pc, #172]	@ (800ce10 <ip4_reass+0x2fc>)
 800cd64:	f240 229b 	movw	r2, #667	@ 0x29b
 800cd68:	492c      	ldr	r1, [pc, #176]	@ (800ce1c <ip4_reass+0x308>)
 800cd6a:	482b      	ldr	r0, [pc, #172]	@ (800ce18 <ip4_reass+0x304>)
 800cd6c:	f000 fbee 	bl	800d54c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800cd70:	8833      	ldrh	r3, [r6, #0]
 800cd72:	1b1b      	subs	r3, r3, r4
 800cd74:	8033      	strh	r3, [r6, #0]
}
 800cd76:	4638      	mov	r0, r7
 800cd78:	b003      	add	sp, #12
 800cd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 800cd7e:	458c      	cmp	ip, r1
 800cd80:	d863      	bhi.n	800ce4a <ip4_reass+0x336>
      ipr->p = new_p;
 800cd82:	6067      	str	r7, [r4, #4]
 800cd84:	e7a0      	b.n	800ccc8 <ip4_reass+0x1b4>
    } else if (iprh->start == iprh_tmp->start) {
 800cd86:	d060      	beq.n	800ce4a <ip4_reass+0x336>
    } else if (iprh->start < iprh_tmp->end) {
 800cd88:	88d0      	ldrh	r0, [r2, #6]
 800cd8a:	4298      	cmp	r0, r3
 800cd8c:	d85d      	bhi.n	800ce4a <ip4_reass+0x336>
      if (iprh_prev != NULL) {
 800cd8e:	b125      	cbz	r5, 800cd9a <ip4_reass+0x286>
        if (iprh_prev->end != iprh_tmp->start) {
 800cd90:	88e8      	ldrh	r0, [r5, #6]
          valid = 0;
 800cd92:	4288      	cmp	r0, r1
 800cd94:	bf18      	it	ne
 800cd96:	f04f 0900 	movne.w	r9, #0
    q = iprh_tmp->next_pbuf;
 800cd9a:	6810      	ldr	r0, [r2, #0]
 800cd9c:	4615      	mov	r5, r2
 800cd9e:	e749      	b.n	800cc34 <ip4_reass+0x120>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800cda0:	f1be 0f00 	cmp.w	lr, #0
 800cda4:	d0ed      	beq.n	800cd82 <ip4_reass+0x26e>
 800cda6:	4b1a      	ldr	r3, [pc, #104]	@ (800ce10 <ip4_reass+0x2fc>)
 800cda8:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800cdac:	491c      	ldr	r1, [pc, #112]	@ (800ce20 <ip4_reass+0x30c>)
 800cdae:	481a      	ldr	r0, [pc, #104]	@ (800ce18 <ip4_reass+0x304>)
 800cdb0:	f000 fbcc 	bl	800d54c <iprintf>
 800cdb4:	e7e5      	b.n	800cd82 <ip4_reass+0x26e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800cdb6:	6863      	ldr	r3, [r4, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d090      	beq.n	800ccde <ip4_reass+0x1ca>
 800cdbc:	6859      	ldr	r1, [r3, #4]
 800cdbe:	888b      	ldrh	r3, [r1, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d18c      	bne.n	800ccde <ip4_reass+0x1ca>
        q = iprh->next_pbuf;
 800cdc4:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800cdc6:	b99b      	cbnz	r3, 800cdf0 <ip4_reass+0x2dc>
          LWIP_ASSERT("sanity check",
 800cdc8:	42b1      	cmp	r1, r6
 800cdca:	d106      	bne.n	800cdda <ip4_reass+0x2c6>
 800cdcc:	4b10      	ldr	r3, [pc, #64]	@ (800ce10 <ip4_reass+0x2fc>)
 800cdce:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800cdd2:	4914      	ldr	r1, [pc, #80]	@ (800ce24 <ip4_reass+0x310>)
 800cdd4:	4810      	ldr	r0, [pc, #64]	@ (800ce18 <ip4_reass+0x304>)
 800cdd6:	f000 fbb9 	bl	800d54c <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800cdda:	6833      	ldr	r3, [r6, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d080      	beq.n	800cce2 <ip4_reass+0x1ce>
 800cde0:	4b0b      	ldr	r3, [pc, #44]	@ (800ce10 <ip4_reass+0x2fc>)
 800cde2:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800cde6:	4910      	ldr	r1, [pc, #64]	@ (800ce28 <ip4_reass+0x314>)
 800cde8:	480b      	ldr	r0, [pc, #44]	@ (800ce18 <ip4_reass+0x304>)
 800cdea:	f000 fbaf 	bl	800d54c <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800cdee:	e778      	b.n	800cce2 <ip4_reass+0x1ce>
          iprh = (struct ip_reass_helper *)q->payload;
 800cdf0:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800cdf2:	88f0      	ldrh	r0, [r6, #6]
 800cdf4:	8893      	ldrh	r3, [r2, #4]
 800cdf6:	4298      	cmp	r0, r3
 800cdf8:	f47f af71 	bne.w	800ccde <ip4_reass+0x1ca>
          q = iprh->next_pbuf;
 800cdfc:	6813      	ldr	r3, [r2, #0]
          iprh = (struct ip_reass_helper *)q->payload;
 800cdfe:	4616      	mov	r6, r2
 800ce00:	e7e1      	b.n	800cdc6 <ip4_reass+0x2b2>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ce02:	4699      	mov	r9, r3
 800ce04:	e76d      	b.n	800cce2 <ip4_reass+0x1ce>
 800ce06:	bf00      	nop
 800ce08:	200376aa 	.word	0x200376aa
 800ce0c:	200376ac 	.word	0x200376ac
 800ce10:	080109a4 	.word	0x080109a4
 800ce14:	08010a5f 	.word	0x08010a5f
 800ce18:	0800e45a 	.word	0x0800e45a
 800ce1c:	08010ae3 	.word	0x08010ae3
 800ce20:	08010a7d 	.word	0x08010a7d
 800ce24:	08010ab4 	.word	0x08010ab4
 800ce28:	08010ac1 	.word	0x08010ac1
      iprh = (struct ip_reass_helper *)r->payload;
 800ce2c:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800ce30:	2114      	movs	r1, #20
 800ce32:	4628      	mov	r0, r5
 800ce34:	f7fa fd28 	bl	8007888 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ce38:	4629      	mov	r1, r5
 800ce3a:	4638      	mov	r0, r7
 800ce3c:	f7fa fed0 	bl	8007be0 <pbuf_cat>
      r = iprh->next_pbuf;
 800ce40:	f8d8 5000 	ldr.w	r5, [r8]
 800ce44:	e779      	b.n	800cd3a <ip4_reass+0x226>
        if (ipr_prev->next == ipr) {
 800ce46:	682b      	ldr	r3, [r5, #0]
 800ce48:	e77b      	b.n	800cd42 <ip4_reass+0x22e>
  if (ipr->p == NULL) {
 800ce4a:	6863      	ldr	r3, [r4, #4]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f47f af14 	bne.w	800cc7a <ip4_reass+0x166>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ce52:	4b16      	ldr	r3, [pc, #88]	@ (800ceac <ip4_reass+0x398>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	42a3      	cmp	r3, r4
 800ce58:	d006      	beq.n	800ce68 <ip4_reass+0x354>
 800ce5a:	4b15      	ldr	r3, [pc, #84]	@ (800ceb0 <ip4_reass+0x39c>)
 800ce5c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ce60:	4914      	ldr	r1, [pc, #80]	@ (800ceb4 <ip4_reass+0x3a0>)
 800ce62:	4815      	ldr	r0, [pc, #84]	@ (800ceb8 <ip4_reass+0x3a4>)
 800ce64:	f000 fb72 	bl	800d54c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ce68:	2100      	movs	r1, #0
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f7ff fd50 	bl	800c910 <ip_reass_dequeue_datagram>
 800ce70:	e703      	b.n	800cc7a <ip4_reass+0x166>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ce72:	88e8      	ldrh	r0, [r5, #6]
 800ce74:	f7f9 ffac 	bl	8006dd0 <lwip_htons>
 800ce78:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	f47f ae9b 	bne.w	800cbb8 <ip4_reass+0xa4>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ce82:	89e0      	ldrh	r0, [r4, #14]
 800ce84:	f7f9 ffa4 	bl	8006dd0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ce88:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	f43f ae93 	beq.w	800cbb8 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ce92:	462b      	mov	r3, r5
 800ce94:	f104 0208 	add.w	r2, r4, #8
 800ce98:	f105 0114 	add.w	r1, r5, #20
 800ce9c:	f853 0b04 	ldr.w	r0, [r3], #4
 800cea0:	428b      	cmp	r3, r1
 800cea2:	f842 0b04 	str.w	r0, [r2], #4
 800cea6:	d1f9      	bne.n	800ce9c <ip4_reass+0x388>
 800cea8:	e686      	b.n	800cbb8 <ip4_reass+0xa4>
 800ceaa:	bf00      	nop
 800ceac:	200376ac 	.word	0x200376ac
 800ceb0:	080109a4 	.word	0x080109a4
 800ceb4:	08010afe 	.word	0x08010afe
 800ceb8:	0800e45a 	.word	0x0800e45a

0800cebc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800cebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800cec0:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
{
 800cec2:	b08d      	sub	sp, #52	@ 0x34
 800cec4:	4605      	mov	r5, r0
 800cec6:	468a      	mov	sl, r1
 800cec8:	9209      	str	r2, [sp, #36]	@ 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ceca:	f1b3 0214 	subs.w	r2, r3, #20
 800cece:	bf48      	it	mi
 800ced0:	f1a3 020d 	submi.w	r2, r3, #13
 800ced4:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 800ced8:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ceda:	6843      	ldr	r3, [r0, #4]
 800cedc:	9303      	str	r3, [sp, #12]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	f003 030f 	and.w	r3, r3, #15
 800cee4:	2b05      	cmp	r3, #5
 800cee6:	ea4f 0783 	mov.w	r7, r3, lsl #2
 800ceea:	d109      	bne.n	800cf00 <ip4_frag+0x44>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ceec:	8943      	ldrh	r3, [r0, #10]
 800ceee:	2b13      	cmp	r3, #19
 800cef0:	d80b      	bhi.n	800cf0a <ip4_frag+0x4e>
 800cef2:	4b5f      	ldr	r3, [pc, #380]	@ (800d070 <ip4_frag+0x1b4>)
 800cef4:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800cef8:	495e      	ldr	r1, [pc, #376]	@ (800d074 <ip4_frag+0x1b8>)
 800cefa:	485f      	ldr	r0, [pc, #380]	@ (800d078 <ip4_frag+0x1bc>)
 800cefc:	f000 fb26 	bl	800d54c <iprintf>
    return ERR_VAL;
 800cf00:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800cf04:	b00d      	add	sp, #52	@ 0x34
 800cf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cf0a:	9b03      	ldr	r3, [sp, #12]
  u16_t newpbuflen = 0;
 800cf0c:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cf0e:	88d8      	ldrh	r0, [r3, #6]
 800cf10:	f7f9 ff5e 	bl	8006dd0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800cf14:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 800cf18:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 800cf1a:	9304      	str	r3, [sp, #16]
  mf_set = tmp & IP_MF;
 800cf1c:	f400 5300 	and.w	r3, r0, #8192	@ 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800cf20:	3c14      	subs	r4, #20
 800cf22:	9308      	str	r3, [sp, #32]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800cf24:	9b06      	ldr	r3, [sp, #24]
  left = (u16_t)(p->tot_len - IP_HLEN);
 800cf26:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800cf28:	00db      	lsls	r3, r3, #3
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	9307      	str	r3, [sp, #28]
  while (left) {
 800cf2e:	b90c      	cbnz	r4, 800cf34 <ip4_frag+0x78>
  return ERR_OK;
 800cf30:	4620      	mov	r0, r4
 800cf32:	e7e7      	b.n	800cf04 <ip4_frag+0x48>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800cf34:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cf36:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cf3a:	2114      	movs	r1, #20
 800cf3c:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800cf3e:	42a3      	cmp	r3, r4
 800cf40:	bf28      	it	cs
 800cf42:	4623      	movcs	r3, r4
 800cf44:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cf46:	f7fa fd3d 	bl	80079c4 <pbuf_alloc>
    if (rambuf == NULL) {
 800cf4a:	4680      	mov	r8, r0
 800cf4c:	b910      	cbnz	r0, 800cf54 <ip4_frag+0x98>
  return ERR_MEM;
 800cf4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf52:	e7d7      	b.n	800cf04 <ip4_frag+0x48>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800cf54:	8943      	ldrh	r3, [r0, #10]
 800cf56:	2b13      	cmp	r3, #19
 800cf58:	d806      	bhi.n	800cf68 <ip4_frag+0xac>
 800cf5a:	4b45      	ldr	r3, [pc, #276]	@ (800d070 <ip4_frag+0x1b4>)
 800cf5c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800cf60:	4946      	ldr	r1, [pc, #280]	@ (800d07c <ip4_frag+0x1c0>)
 800cf62:	4845      	ldr	r0, [pc, #276]	@ (800d078 <ip4_frag+0x1bc>)
 800cf64:	f000 faf2 	bl	800d54c <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800cf68:	9b03      	ldr	r3, [sp, #12]
 800cf6a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	3114      	adds	r1, #20
 800cf72:	f853 0b04 	ldr.w	r0, [r3], #4
 800cf76:	428b      	cmp	r3, r1
 800cf78:	f842 0b04 	str.w	r0, [r2], #4
 800cf7c:	d1f9      	bne.n	800cf72 <ip4_frag+0xb6>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800cf7e:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 800cf82:	f8dd 9014 	ldr.w	r9, [sp, #20]
    while (left_to_copy) {
 800cf86:	f1b9 0f00 	cmp.w	r9, #0
 800cf8a:	d040      	beq.n	800d00e <ip4_frag+0x152>
      u16_t plen = (u16_t)(p->len - poff);
 800cf8c:	896b      	ldrh	r3, [r5, #10]
 800cf8e:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800cf90:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 800cf92:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800cf94:	d206      	bcs.n	800cfa4 <ip4_frag+0xe8>
 800cf96:	4b36      	ldr	r3, [pc, #216]	@ (800d070 <ip4_frag+0x1b4>)
 800cf98:	f240 322d 	movw	r2, #813	@ 0x32d
 800cf9c:	4938      	ldr	r1, [pc, #224]	@ (800d080 <ip4_frag+0x1c4>)
 800cf9e:	4836      	ldr	r0, [pc, #216]	@ (800d078 <ip4_frag+0x1bc>)
 800cfa0:	f000 fad4 	bl	800d54c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800cfa4:	454e      	cmp	r6, r9
 800cfa6:	bf28      	it	cs
 800cfa8:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 800cfaa:	b916      	cbnz	r6, 800cfb2 <ip4_frag+0xf6>
        p = p->next;
 800cfac:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 800cfae:	2700      	movs	r7, #0
 800cfb0:	e7e9      	b.n	800cf86 <ip4_frag+0xca>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800cfb2:	2005      	movs	r0, #5
 800cfb4:	f7fa fa0a 	bl	80073cc <memp_malloc>
      if (pcr == NULL) {
 800cfb8:	4603      	mov	r3, r0
 800cfba:	b918      	cbnz	r0, 800cfc4 <ip4_frag+0x108>
        pbuf_free(rambuf);
 800cfbc:	4640      	mov	r0, r8
 800cfbe:	f7fa fc97 	bl	80078f0 <pbuf_free>
        goto memerr;
 800cfc2:	e7c4      	b.n	800cf4e <ip4_frag+0x92>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cfc4:	9601      	str	r6, [sp, #4]
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	686a      	ldr	r2, [r5, #4]
 800cfca:	900a      	str	r0, [sp, #40]	@ 0x28
 800cfcc:	2000      	movs	r0, #0
 800cfce:	443a      	add	r2, r7
 800cfd0:	9200      	str	r2, [sp, #0]
 800cfd2:	2241      	movs	r2, #65	@ 0x41
 800cfd4:	f7fa fc3a 	bl	800784c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800cfd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfda:	b920      	cbnz	r0, 800cfe6 <ip4_frag+0x12a>
  memp_free(MEMP_FRAG_PBUF, p);
 800cfdc:	4619      	mov	r1, r3
 800cfde:	2005      	movs	r0, #5
 800cfe0:	f7fa fa22 	bl	8007428 <memp_free>
 800cfe4:	e7ea      	b.n	800cfbc <ip4_frag+0x100>
 800cfe6:	e9cd 030a 	strd	r0, r3, [sp, #40]	@ 0x28
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800cfea:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 800cfee:	4628      	mov	r0, r5
 800cff0:	f7fa fdda 	bl	8007ba8 <pbuf_ref>
      pcr->original = p;
 800cff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cff6:	4a23      	ldr	r2, [pc, #140]	@ (800d084 <ip4_frag+0x1c8>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800cff8:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 800cffc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cffe:	4640      	mov	r0, r8
      pcr->original = p;
 800d000:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d002:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 800d004:	f7fa fdec 	bl	8007be0 <pbuf_cat>
      if (left_to_copy) {
 800d008:	f1b9 0f00 	cmp.w	r9, #0
 800d00c:	d1ce      	bne.n	800cfac <ip4_frag+0xf0>
    tmp = (IP_OFFMASK & (ofo));
 800d00e:	9b04      	ldr	r3, [sp, #16]
    poff = (u16_t)(poff + newpbuflen);
 800d010:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 800d012:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800d016:	f8ba 3024 	ldrh.w	r3, [sl, #36]	@ 0x24
    poff = (u16_t)(poff + newpbuflen);
 800d01a:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 800d01c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800d01e:	42a3      	cmp	r3, r4
 800d020:	dd01      	ble.n	800d026 <ip4_frag+0x16a>
 800d022:	9b08      	ldr	r3, [sp, #32]
 800d024:	b10b      	cbz	r3, 800d02a <ip4_frag+0x16e>
      tmp = tmp | IP_MF;
 800d026:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d02a:	f7f9 fed1 	bl	8006dd0 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d02e:	9b05      	ldr	r3, [sp, #20]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d030:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d034:	f103 0014 	add.w	r0, r3, #20
 800d038:	b280      	uxth	r0, r0
 800d03a:	f7f9 fec9 	bl	8006dd0 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800d03e:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 800d040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d042:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d044:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 800d048:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 800d04a:	f88b 300a 	strb.w	r3, [fp, #10]
 800d04e:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 800d052:	f8da 3014 	ldr.w	r3, [sl, #20]
 800d056:	4798      	blx	r3
    pbuf_free(rambuf);
 800d058:	4640      	mov	r0, r8
 800d05a:	f7fa fc49 	bl	80078f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d05e:	9b05      	ldr	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 800d060:	9a06      	ldr	r2, [sp, #24]
    left = (u16_t)(left - fragsize);
 800d062:	1ae3      	subs	r3, r4, r3
 800d064:	b29c      	uxth	r4, r3
    ofo = (u16_t)(ofo + nfb);
 800d066:	9b04      	ldr	r3, [sp, #16]
 800d068:	4413      	add	r3, r2
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	9304      	str	r3, [sp, #16]
 800d06e:	e75e      	b.n	800cf2e <ip4_frag+0x72>
 800d070:	080109a4 	.word	0x080109a4
 800d074:	08010b1e 	.word	0x08010b1e
 800d078:	0800e45a 	.word	0x0800e45a
 800d07c:	08010b39 	.word	0x08010b39
 800d080:	08010b59 	.word	0x08010b59
 800d084:	0800cab5 	.word	0x0800cab5

0800d088 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d088:	8943      	ldrh	r3, [r0, #10]
 800d08a:	2b0e      	cmp	r3, #14
{
 800d08c:	b570      	push	{r4, r5, r6, lr}
 800d08e:	4604      	mov	r4, r0
 800d090:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800d092:	d91a      	bls.n	800d0ca <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d094:	7bc3      	ldrb	r3, [r0, #15]
 800d096:	b91b      	cbnz	r3, 800d0a0 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800d098:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 800d09c:	3301      	adds	r3, #1
 800d09e:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d0a0:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d0a2:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800d0a4:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800d0a6:	07d9      	lsls	r1, r3, #31
 800d0a8:	d50a      	bpl.n	800d0c0 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d111      	bne.n	800d0d2 <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d0ae:	7843      	ldrb	r3, [r0, #1]
 800d0b0:	b933      	cbnz	r3, 800d0c0 <ethernet_input+0x38>
 800d0b2:	7883      	ldrb	r3, [r0, #2]
 800d0b4:	2b5e      	cmp	r3, #94	@ 0x5e
 800d0b6:	d103      	bne.n	800d0c0 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d0b8:	7b63      	ldrb	r3, [r4, #13]
 800d0ba:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d0be:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800d0c0:	2e08      	cmp	r6, #8
 800d0c2:	d010      	beq.n	800d0e6 <ethernet_input+0x5e>
 800d0c4:	f5b6 6fc1 	cmp.w	r6, #1544	@ 0x608
 800d0c8:	d01d      	beq.n	800d106 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f7fa fc10 	bl	80078f0 <pbuf_free>
  return ERR_OK;
 800d0d0:	e017      	b.n	800d102 <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d0d2:	2206      	movs	r2, #6
 800d0d4:	4913      	ldr	r1, [pc, #76]	@ (800d124 <ethernet_input+0x9c>)
 800d0d6:	f000 fa8e 	bl	800d5f6 <memcmp>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	d1f0      	bne.n	800d0c0 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800d0de:	7b63      	ldrb	r3, [r4, #13]
 800d0e0:	f043 0308 	orr.w	r3, r3, #8
 800d0e4:	e7eb      	b.n	800d0be <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d0e6:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 800d0ea:	071a      	lsls	r2, r3, #28
 800d0ec:	d5ed      	bpl.n	800d0ca <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d0ee:	210e      	movs	r1, #14
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f7fa fbc9 	bl	8007888 <pbuf_remove_header>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	d1e7      	bne.n	800d0ca <ethernet_input+0x42>
        ip4_input(p, netif);
 800d0fa:	4629      	mov	r1, r5
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f7ff faa9 	bl	800c654 <ip4_input>
}
 800d102:	2000      	movs	r0, #0
 800d104:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d106:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 800d10a:	071b      	lsls	r3, r3, #28
 800d10c:	d5dd      	bpl.n	800d0ca <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d10e:	210e      	movs	r1, #14
 800d110:	4620      	mov	r0, r4
 800d112:	f7fa fbb9 	bl	8007888 <pbuf_remove_header>
 800d116:	2800      	cmp	r0, #0
 800d118:	d1d7      	bne.n	800d0ca <ethernet_input+0x42>
        etharp_input(p, netif);
 800d11a:	4629      	mov	r1, r5
 800d11c:	4620      	mov	r0, r4
 800d11e:	f7fe fefb 	bl	800bf18 <etharp_input>
      break;
 800d122:	e7ee      	b.n	800d102 <ethernet_input+0x7a>
 800d124:	08010bd4 	.word	0x08010bd4

0800d128 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d12c:	460d      	mov	r5, r1
 800d12e:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d130:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800d134:	4616      	mov	r6, r2
 800d136:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800d138:	f7f9 fe4a 	bl	8006dd0 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d13c:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800d13e:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d140:	4628      	mov	r0, r5
 800d142:	f7fa fb9d 	bl	8007880 <pbuf_add_header>
 800d146:	b9e0      	cbnz	r0, 800d182 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d148:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800d14a:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	600b      	str	r3, [r1, #0]
 800d152:	88bb      	ldrh	r3, [r7, #4]
 800d154:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d156:	6833      	ldr	r3, [r6, #0]
 800d158:	f8c1 3006 	str.w	r3, [r1, #6]
 800d15c:	88b3      	ldrh	r3, [r6, #4]
 800d15e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d160:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d164:	2b06      	cmp	r3, #6
 800d166:	d006      	beq.n	800d176 <ethernet_output+0x4e>
 800d168:	4b08      	ldr	r3, [pc, #32]	@ (800d18c <ethernet_output+0x64>)
 800d16a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800d16e:	4908      	ldr	r1, [pc, #32]	@ (800d190 <ethernet_output+0x68>)
 800d170:	4808      	ldr	r0, [pc, #32]	@ (800d194 <ethernet_output+0x6c>)
 800d172:	f000 f9eb 	bl	800d54c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d176:	69a3      	ldr	r3, [r4, #24]
 800d178:	4629      	mov	r1, r5
 800d17a:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800d17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800d180:	4718      	bx	r3
}
 800d182:	f06f 0001 	mvn.w	r0, #1
 800d186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d18a:	bf00      	nop
 800d18c:	08010b68 	.word	0x08010b68
 800d190:	08010b9d 	.word	0x08010b9d
 800d194:	0800e45a 	.word	0x0800e45a

0800d198 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800d198:	b510      	push	{r4, lr}
 800d19a:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800d19c:	2200      	movs	r2, #0
{
 800d19e:	4608      	mov	r0, r1
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800d1a0:	2104      	movs	r1, #4
 800d1a2:	f7f6 f91f 	bl	80033e4 <osMessageQueueNew>
 800d1a6:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800d1a8:	fab0 f080 	clz	r0, r0
 800d1ac:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800d1ae:	4240      	negs	r0, r0
 800d1b0:	bd10      	pop	{r4, pc}

0800d1b2 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800d1b2:	b510      	push	{r4, lr}
 800d1b4:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 800d1b6:	6800      	ldr	r0, [r0, #0]
 800d1b8:	f7f6 f9dc 	bl	8003574 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 800d1bc:	6820      	ldr	r0, [r4, #0]
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800d1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageQueueDelete(*mbox);
 800d1c2:	f7f6 b9d9 	b.w	8003578 <osMessageQueueDelete>

0800d1c6 <sys_mbox_trypost>:
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800d1c6:	2300      	movs	r3, #0
{
 800d1c8:	b507      	push	{r0, r1, r2, lr}
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800d1ca:	461a      	mov	r2, r3
{
 800d1cc:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800d1ce:	6800      	ldr	r0, [r0, #0]
 800d1d0:	a901      	add	r1, sp, #4
 800d1d2:	f7f6 f94d 	bl	8003470 <osMessageQueuePut>
 800d1d6:	3800      	subs	r0, #0
 800d1d8:	bf18      	it	ne
 800d1da:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800d1dc:	4240      	negs	r0, r0
 800d1de:	b003      	add	sp, #12
 800d1e0:	f85d fb04 	ldr.w	pc, [sp], #4

0800d1e4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800d1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1e6:	4615      	mov	r5, r2
 800d1e8:	4606      	mov	r6, r0
 800d1ea:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800d1ec:	f7f5 feda 	bl	8002fa4 <osKernelGetTickCount>
 800d1f0:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 800d1f2:	b155      	cbz	r5, 800d20a <sys_arch_mbox_fetch+0x26>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800d1f4:	462b      	mov	r3, r5
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	4639      	mov	r1, r7
 800d1fa:	6830      	ldr	r0, [r6, #0]
 800d1fc:	f7f6 f97a 	bl	80034f4 <osMessageQueueGet>
    if (status == osOK)
 800d200:	b958      	cbnz	r0, 800d21a <sys_arch_mbox_fetch+0x36>
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
 800d202:	f7f5 fecf 	bl	8002fa4 <osKernelGetTickCount>
 800d206:	1b00      	subs	r0, r0, r4
#endif
  }
}
 800d208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800d20a:	f04f 33ff 	mov.w	r3, #4294967295
 800d20e:	462a      	mov	r2, r5
 800d210:	4639      	mov	r1, r7
 800d212:	6830      	ldr	r0, [r6, #0]
 800d214:	f7f6 f96e 	bl	80034f4 <osMessageQueueGet>
 800d218:	e7f3      	b.n	800d202 <sys_arch_mbox_fetch+0x1e>
      return SYS_ARCH_TIMEOUT;
 800d21a:	f04f 30ff 	mov.w	r0, #4294967295
 800d21e:	e7f3      	b.n	800d208 <sys_arch_mbox_fetch+0x24>

0800d220 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800d220:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 800d222:	2300      	movs	r3, #0
 800d224:	6800      	ldr	r0, [r0, #0]
 800d226:	461a      	mov	r2, r3
 800d228:	f7f6 f964 	bl	80034f4 <osMessageQueueGet>
 800d22c:	3800      	subs	r0, #0
 800d22e:	bf18      	it	ne
 800d230:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 800d232:	4240      	negs	r0, r0
 800d234:	bd08      	pop	{r3, pc}

0800d236 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
 800d236:	6800      	ldr	r0, [r0, #0]
 800d238:	3800      	subs	r0, #0
 800d23a:	bf18      	it	ne
 800d23c:	2001      	movne	r0, #1
 800d23e:	4770      	bx	lr

0800d240 <sys_mbox_set_invalid>:
    return 0;
  else
    return 1;
}
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
 800d240:	2300      	movs	r3, #0
 800d242:	6003      	str	r3, [r0, #0]
 800d244:	4770      	bx	lr

0800d246 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800d246:	b538      	push	{r3, r4, r5, lr}
 800d248:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 800d24a:	2200      	movs	r2, #0
 800d24c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
{
 800d250:	460c      	mov	r4, r1
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 800d252:	f7f5 ffc5 	bl	80031e0 <osSemaphoreNew>
 800d256:	6028      	str	r0, [r5, #0]
#endif

  if(*sem == NULL)
 800d258:	b130      	cbz	r0, 800d268 <sys_sem_new+0x22>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800d25a:	b10c      	cbz	r4, 800d260 <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800d25c:	2000      	movs	r0, #0
}
 800d25e:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 800d260:	4621      	mov	r1, r4
 800d262:	f7f6 f815 	bl	8003290 <osSemaphoreAcquire>
 800d266:	e7f9      	b.n	800d25c <sys_sem_new+0x16>
    return ERR_MEM;
 800d268:	f04f 30ff 	mov.w	r0, #4294967295
 800d26c:	e7f7      	b.n	800d25e <sys_sem_new+0x18>

0800d26e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800d26e:	b570      	push	{r4, r5, r6, lr}
 800d270:	460e      	mov	r6, r1
 800d272:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 800d274:	f7f5 fe96 	bl	8002fa4 <osKernelGetTickCount>
 800d278:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 800d27a:	b146      	cbz	r6, 800d28e <sys_arch_sem_wait+0x20>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 800d27c:	4631      	mov	r1, r6
 800d27e:	6828      	ldr	r0, [r5, #0]
 800d280:	f7f6 f806 	bl	8003290 <osSemaphoreAcquire>
 800d284:	b958      	cbnz	r0, 800d29e <sys_arch_sem_wait+0x30>
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
 800d286:	f7f5 fe8d 	bl	8002fa4 <osKernelGetTickCount>
 800d28a:	1b00      	subs	r0, r0, r4
#endif
  }
}
 800d28c:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 800d28e:	f04f 31ff 	mov.w	r1, #4294967295
 800d292:	6828      	ldr	r0, [r5, #0]
 800d294:	f7f5 fffc 	bl	8003290 <osSemaphoreAcquire>
 800d298:	2800      	cmp	r0, #0
 800d29a:	d1f8      	bne.n	800d28e <sys_arch_sem_wait+0x20>
 800d29c:	e7f3      	b.n	800d286 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800d29e:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a2:	e7f3      	b.n	800d28c <sys_arch_sem_wait+0x1e>

0800d2a4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800d2a4:	6800      	ldr	r0, [r0, #0]
 800d2a6:	f7f6 b82f 	b.w	8003308 <osSemaphoreRelease>

0800d2aa <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800d2aa:	6800      	ldr	r0, [r0, #0]
 800d2ac:	f7f6 b87a 	b.w	80033a4 <osSemaphoreDelete>

0800d2b0 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800d2b0:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800d2b2:	3800      	subs	r0, #0
 800d2b4:	bf18      	it	ne
 800d2b6:	2001      	movne	r0, #1
 800d2b8:	4770      	bx	lr

0800d2ba <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	6003      	str	r3, [r0, #0]
}
 800d2be:	4770      	bx	lr

0800d2c0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800d2c0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800d2c2:	2000      	movs	r0, #0
 800d2c4:	f7f5 feee 	bl	80030a4 <osMutexNew>
 800d2c8:	4b01      	ldr	r3, [pc, #4]	@ (800d2d0 <sys_init+0x10>)
 800d2ca:	6018      	str	r0, [r3, #0]
#endif
}
 800d2cc:	bd08      	pop	{r3, pc}
 800d2ce:	bf00      	nop
 800d2d0:	200376b0 	.word	0x200376b0

0800d2d4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800d2d4:	b510      	push	{r4, lr}
 800d2d6:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800d2d8:	2000      	movs	r0, #0
 800d2da:	f7f5 fee3 	bl	80030a4 <osMutexNew>
 800d2de:	6020      	str	r0, [r4, #0]
#endif

  if(*mutex == NULL)
 800d2e0:	fab0 f080 	clz	r0, r0
 800d2e4:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800d2e6:	4240      	negs	r0, r0
 800d2e8:	bd10      	pop	{r4, pc}

0800d2ea <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800d2ea:	f04f 31ff 	mov.w	r1, #4294967295
 800d2ee:	6800      	ldr	r0, [r0, #0]
 800d2f0:	f7f5 bf1a 	b.w	8003128 <osMutexAcquire>

0800d2f4 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800d2f4:	6800      	ldr	r0, [r0, #0]
 800d2f6:	f7f5 bf47 	b.w	8003188 <osMutexRelease>

0800d2fa <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800d2fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2fc:	b08b      	sub	sp, #44	@ 0x2c
 800d2fe:	4615      	mov	r5, r2
 800d300:	4607      	mov	r7, r0
 800d302:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800d304:	2220      	movs	r2, #32
 800d306:	2100      	movs	r1, #0
 800d308:	a802      	add	r0, sp, #8
{
 800d30a:	461e      	mov	r6, r3
  const osThreadAttr_t attributes = {
 800d30c:	f000 f983 	bl	800d616 <memset>
 800d310:	9b10      	ldr	r3, [sp, #64]	@ 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800d312:	aa01      	add	r2, sp, #4
 800d314:	4629      	mov	r1, r5
 800d316:	4620      	mov	r0, r4
  const osThreadAttr_t attributes = {
 800d318:	9701      	str	r7, [sp, #4]
 800d31a:	9606      	str	r6, [sp, #24]
 800d31c:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 800d31e:	f7f5 fe55 	bl	8002fcc <osThreadNew>
#endif
}
 800d322:	b00b      	add	sp, #44	@ 0x2c
 800d324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d328 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800d328:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800d32a:	4b04      	ldr	r3, [pc, #16]	@ (800d33c <sys_arch_protect+0x14>)
 800d32c:	f04f 31ff 	mov.w	r1, #4294967295
 800d330:	6818      	ldr	r0, [r3, #0]
 800d332:	f7f5 fef9 	bl	8003128 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800d336:	2001      	movs	r0, #1
 800d338:	bd08      	pop	{r3, pc}
 800d33a:	bf00      	nop
 800d33c:	200376b0 	.word	0x200376b0

0800d340 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800d340:	4b01      	ldr	r3, [pc, #4]	@ (800d348 <sys_arch_unprotect+0x8>)
 800d342:	6818      	ldr	r0, [r3, #0]
 800d344:	f7f5 bf20 	b.w	8003188 <osMutexRelease>
 800d348:	200376b0 	.word	0x200376b0

0800d34c <rand>:
 800d34c:	4b16      	ldr	r3, [pc, #88]	@ (800d3a8 <rand+0x5c>)
 800d34e:	b510      	push	{r4, lr}
 800d350:	681c      	ldr	r4, [r3, #0]
 800d352:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d354:	b9b3      	cbnz	r3, 800d384 <rand+0x38>
 800d356:	2018      	movs	r0, #24
 800d358:	f000 faa0 	bl	800d89c <malloc>
 800d35c:	4602      	mov	r2, r0
 800d35e:	6320      	str	r0, [r4, #48]	@ 0x30
 800d360:	b920      	cbnz	r0, 800d36c <rand+0x20>
 800d362:	4b12      	ldr	r3, [pc, #72]	@ (800d3ac <rand+0x60>)
 800d364:	4812      	ldr	r0, [pc, #72]	@ (800d3b0 <rand+0x64>)
 800d366:	2152      	movs	r1, #82	@ 0x52
 800d368:	f000 fa30 	bl	800d7cc <__assert_func>
 800d36c:	4911      	ldr	r1, [pc, #68]	@ (800d3b4 <rand+0x68>)
 800d36e:	4b12      	ldr	r3, [pc, #72]	@ (800d3b8 <rand+0x6c>)
 800d370:	e9c0 1300 	strd	r1, r3, [r0]
 800d374:	4b11      	ldr	r3, [pc, #68]	@ (800d3bc <rand+0x70>)
 800d376:	6083      	str	r3, [r0, #8]
 800d378:	230b      	movs	r3, #11
 800d37a:	8183      	strh	r3, [r0, #12]
 800d37c:	2100      	movs	r1, #0
 800d37e:	2001      	movs	r0, #1
 800d380:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d384:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d386:	480e      	ldr	r0, [pc, #56]	@ (800d3c0 <rand+0x74>)
 800d388:	690b      	ldr	r3, [r1, #16]
 800d38a:	694c      	ldr	r4, [r1, #20]
 800d38c:	4a0d      	ldr	r2, [pc, #52]	@ (800d3c4 <rand+0x78>)
 800d38e:	4358      	muls	r0, r3
 800d390:	fb02 0004 	mla	r0, r2, r4, r0
 800d394:	fba3 3202 	umull	r3, r2, r3, r2
 800d398:	3301      	adds	r3, #1
 800d39a:	eb40 0002 	adc.w	r0, r0, r2
 800d39e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d3a2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d3a6:	bd10      	pop	{r4, pc}
 800d3a8:	2000003c 	.word	0x2000003c
 800d3ac:	08010bda 	.word	0x08010bda
 800d3b0:	08010bf1 	.word	0x08010bf1
 800d3b4:	abcd330e 	.word	0xabcd330e
 800d3b8:	e66d1234 	.word	0xe66d1234
 800d3bc:	0005deec 	.word	0x0005deec
 800d3c0:	5851f42d 	.word	0x5851f42d
 800d3c4:	4c957f2d 	.word	0x4c957f2d

0800d3c8 <std>:
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	b510      	push	{r4, lr}
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	e9c0 3300 	strd	r3, r3, [r0]
 800d3d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3d6:	6083      	str	r3, [r0, #8]
 800d3d8:	8181      	strh	r1, [r0, #12]
 800d3da:	6643      	str	r3, [r0, #100]	@ 0x64
 800d3dc:	81c2      	strh	r2, [r0, #14]
 800d3de:	6183      	str	r3, [r0, #24]
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	2208      	movs	r2, #8
 800d3e4:	305c      	adds	r0, #92	@ 0x5c
 800d3e6:	f000 f916 	bl	800d616 <memset>
 800d3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d420 <std+0x58>)
 800d3ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800d3ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d424 <std+0x5c>)
 800d3f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d428 <std+0x60>)
 800d3f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d42c <std+0x64>)
 800d3f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d430 <std+0x68>)
 800d3fc:	6224      	str	r4, [r4, #32]
 800d3fe:	429c      	cmp	r4, r3
 800d400:	d006      	beq.n	800d410 <std+0x48>
 800d402:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d406:	4294      	cmp	r4, r2
 800d408:	d002      	beq.n	800d410 <std+0x48>
 800d40a:	33d0      	adds	r3, #208	@ 0xd0
 800d40c:	429c      	cmp	r4, r3
 800d40e:	d105      	bne.n	800d41c <std+0x54>
 800d410:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d418:	f000 b9c6 	b.w	800d7a8 <__retarget_lock_init_recursive>
 800d41c:	bd10      	pop	{r4, pc}
 800d41e:	bf00      	nop
 800d420:	0800d571 	.word	0x0800d571
 800d424:	0800d593 	.word	0x0800d593
 800d428:	0800d5cb 	.word	0x0800d5cb
 800d42c:	0800d5ef 	.word	0x0800d5ef
 800d430:	200376b4 	.word	0x200376b4

0800d434 <stdio_exit_handler>:
 800d434:	4a02      	ldr	r2, [pc, #8]	@ (800d440 <stdio_exit_handler+0xc>)
 800d436:	4903      	ldr	r1, [pc, #12]	@ (800d444 <stdio_exit_handler+0x10>)
 800d438:	4803      	ldr	r0, [pc, #12]	@ (800d448 <stdio_exit_handler+0x14>)
 800d43a:	f000 b869 	b.w	800d510 <_fwalk_sglue>
 800d43e:	bf00      	nop
 800d440:	20000030 	.word	0x20000030
 800d444:	0800e0b1 	.word	0x0800e0b1
 800d448:	20000040 	.word	0x20000040

0800d44c <cleanup_stdio>:
 800d44c:	6841      	ldr	r1, [r0, #4]
 800d44e:	4b0c      	ldr	r3, [pc, #48]	@ (800d480 <cleanup_stdio+0x34>)
 800d450:	4299      	cmp	r1, r3
 800d452:	b510      	push	{r4, lr}
 800d454:	4604      	mov	r4, r0
 800d456:	d001      	beq.n	800d45c <cleanup_stdio+0x10>
 800d458:	f000 fe2a 	bl	800e0b0 <_fflush_r>
 800d45c:	68a1      	ldr	r1, [r4, #8]
 800d45e:	4b09      	ldr	r3, [pc, #36]	@ (800d484 <cleanup_stdio+0x38>)
 800d460:	4299      	cmp	r1, r3
 800d462:	d002      	beq.n	800d46a <cleanup_stdio+0x1e>
 800d464:	4620      	mov	r0, r4
 800d466:	f000 fe23 	bl	800e0b0 <_fflush_r>
 800d46a:	68e1      	ldr	r1, [r4, #12]
 800d46c:	4b06      	ldr	r3, [pc, #24]	@ (800d488 <cleanup_stdio+0x3c>)
 800d46e:	4299      	cmp	r1, r3
 800d470:	d004      	beq.n	800d47c <cleanup_stdio+0x30>
 800d472:	4620      	mov	r0, r4
 800d474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d478:	f000 be1a 	b.w	800e0b0 <_fflush_r>
 800d47c:	bd10      	pop	{r4, pc}
 800d47e:	bf00      	nop
 800d480:	200376b4 	.word	0x200376b4
 800d484:	2003771c 	.word	0x2003771c
 800d488:	20037784 	.word	0x20037784

0800d48c <global_stdio_init.part.0>:
 800d48c:	b510      	push	{r4, lr}
 800d48e:	4b0b      	ldr	r3, [pc, #44]	@ (800d4bc <global_stdio_init.part.0+0x30>)
 800d490:	4c0b      	ldr	r4, [pc, #44]	@ (800d4c0 <global_stdio_init.part.0+0x34>)
 800d492:	4a0c      	ldr	r2, [pc, #48]	@ (800d4c4 <global_stdio_init.part.0+0x38>)
 800d494:	601a      	str	r2, [r3, #0]
 800d496:	4620      	mov	r0, r4
 800d498:	2200      	movs	r2, #0
 800d49a:	2104      	movs	r1, #4
 800d49c:	f7ff ff94 	bl	800d3c8 <std>
 800d4a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	2109      	movs	r1, #9
 800d4a8:	f7ff ff8e 	bl	800d3c8 <std>
 800d4ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d4b0:	2202      	movs	r2, #2
 800d4b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4b6:	2112      	movs	r1, #18
 800d4b8:	f7ff bf86 	b.w	800d3c8 <std>
 800d4bc:	200377ec 	.word	0x200377ec
 800d4c0:	200376b4 	.word	0x200376b4
 800d4c4:	0800d435 	.word	0x0800d435

0800d4c8 <__sfp_lock_acquire>:
 800d4c8:	4801      	ldr	r0, [pc, #4]	@ (800d4d0 <__sfp_lock_acquire+0x8>)
 800d4ca:	f000 b96e 	b.w	800d7aa <__retarget_lock_acquire_recursive>
 800d4ce:	bf00      	nop
 800d4d0:	200377f5 	.word	0x200377f5

0800d4d4 <__sfp_lock_release>:
 800d4d4:	4801      	ldr	r0, [pc, #4]	@ (800d4dc <__sfp_lock_release+0x8>)
 800d4d6:	f000 b969 	b.w	800d7ac <__retarget_lock_release_recursive>
 800d4da:	bf00      	nop
 800d4dc:	200377f5 	.word	0x200377f5

0800d4e0 <__sinit>:
 800d4e0:	b510      	push	{r4, lr}
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	f7ff fff0 	bl	800d4c8 <__sfp_lock_acquire>
 800d4e8:	6a23      	ldr	r3, [r4, #32]
 800d4ea:	b11b      	cbz	r3, 800d4f4 <__sinit+0x14>
 800d4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4f0:	f7ff bff0 	b.w	800d4d4 <__sfp_lock_release>
 800d4f4:	4b04      	ldr	r3, [pc, #16]	@ (800d508 <__sinit+0x28>)
 800d4f6:	6223      	str	r3, [r4, #32]
 800d4f8:	4b04      	ldr	r3, [pc, #16]	@ (800d50c <__sinit+0x2c>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1f5      	bne.n	800d4ec <__sinit+0xc>
 800d500:	f7ff ffc4 	bl	800d48c <global_stdio_init.part.0>
 800d504:	e7f2      	b.n	800d4ec <__sinit+0xc>
 800d506:	bf00      	nop
 800d508:	0800d44d 	.word	0x0800d44d
 800d50c:	200377ec 	.word	0x200377ec

0800d510 <_fwalk_sglue>:
 800d510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d514:	4607      	mov	r7, r0
 800d516:	4688      	mov	r8, r1
 800d518:	4614      	mov	r4, r2
 800d51a:	2600      	movs	r6, #0
 800d51c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d520:	f1b9 0901 	subs.w	r9, r9, #1
 800d524:	d505      	bpl.n	800d532 <_fwalk_sglue+0x22>
 800d526:	6824      	ldr	r4, [r4, #0]
 800d528:	2c00      	cmp	r4, #0
 800d52a:	d1f7      	bne.n	800d51c <_fwalk_sglue+0xc>
 800d52c:	4630      	mov	r0, r6
 800d52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d532:	89ab      	ldrh	r3, [r5, #12]
 800d534:	2b01      	cmp	r3, #1
 800d536:	d907      	bls.n	800d548 <_fwalk_sglue+0x38>
 800d538:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d53c:	3301      	adds	r3, #1
 800d53e:	d003      	beq.n	800d548 <_fwalk_sglue+0x38>
 800d540:	4629      	mov	r1, r5
 800d542:	4638      	mov	r0, r7
 800d544:	47c0      	blx	r8
 800d546:	4306      	orrs	r6, r0
 800d548:	3568      	adds	r5, #104	@ 0x68
 800d54a:	e7e9      	b.n	800d520 <_fwalk_sglue+0x10>

0800d54c <iprintf>:
 800d54c:	b40f      	push	{r0, r1, r2, r3}
 800d54e:	b507      	push	{r0, r1, r2, lr}
 800d550:	4906      	ldr	r1, [pc, #24]	@ (800d56c <iprintf+0x20>)
 800d552:	ab04      	add	r3, sp, #16
 800d554:	6808      	ldr	r0, [r1, #0]
 800d556:	f853 2b04 	ldr.w	r2, [r3], #4
 800d55a:	6881      	ldr	r1, [r0, #8]
 800d55c:	9301      	str	r3, [sp, #4]
 800d55e:	f000 fa7d 	bl	800da5c <_vfiprintf_r>
 800d562:	b003      	add	sp, #12
 800d564:	f85d eb04 	ldr.w	lr, [sp], #4
 800d568:	b004      	add	sp, #16
 800d56a:	4770      	bx	lr
 800d56c:	2000003c 	.word	0x2000003c

0800d570 <__sread>:
 800d570:	b510      	push	{r4, lr}
 800d572:	460c      	mov	r4, r1
 800d574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d578:	f000 f8ce 	bl	800d718 <_read_r>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	bfab      	itete	ge
 800d580:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d582:	89a3      	ldrhlt	r3, [r4, #12]
 800d584:	181b      	addge	r3, r3, r0
 800d586:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d58a:	bfac      	ite	ge
 800d58c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d58e:	81a3      	strhlt	r3, [r4, #12]
 800d590:	bd10      	pop	{r4, pc}

0800d592 <__swrite>:
 800d592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d596:	461f      	mov	r7, r3
 800d598:	898b      	ldrh	r3, [r1, #12]
 800d59a:	05db      	lsls	r3, r3, #23
 800d59c:	4605      	mov	r5, r0
 800d59e:	460c      	mov	r4, r1
 800d5a0:	4616      	mov	r6, r2
 800d5a2:	d505      	bpl.n	800d5b0 <__swrite+0x1e>
 800d5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a8:	2302      	movs	r3, #2
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f000 f8a2 	bl	800d6f4 <_lseek_r>
 800d5b0:	89a3      	ldrh	r3, [r4, #12]
 800d5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d5ba:	81a3      	strh	r3, [r4, #12]
 800d5bc:	4632      	mov	r2, r6
 800d5be:	463b      	mov	r3, r7
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c6:	f000 b8b9 	b.w	800d73c <_write_r>

0800d5ca <__sseek>:
 800d5ca:	b510      	push	{r4, lr}
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d2:	f000 f88f 	bl	800d6f4 <_lseek_r>
 800d5d6:	1c43      	adds	r3, r0, #1
 800d5d8:	89a3      	ldrh	r3, [r4, #12]
 800d5da:	bf15      	itete	ne
 800d5dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d5de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d5e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d5e6:	81a3      	strheq	r3, [r4, #12]
 800d5e8:	bf18      	it	ne
 800d5ea:	81a3      	strhne	r3, [r4, #12]
 800d5ec:	bd10      	pop	{r4, pc}

0800d5ee <__sclose>:
 800d5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5f2:	f000 b819 	b.w	800d628 <_close_r>

0800d5f6 <memcmp>:
 800d5f6:	b510      	push	{r4, lr}
 800d5f8:	3901      	subs	r1, #1
 800d5fa:	4402      	add	r2, r0
 800d5fc:	4290      	cmp	r0, r2
 800d5fe:	d101      	bne.n	800d604 <memcmp+0xe>
 800d600:	2000      	movs	r0, #0
 800d602:	e005      	b.n	800d610 <memcmp+0x1a>
 800d604:	7803      	ldrb	r3, [r0, #0]
 800d606:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d60a:	42a3      	cmp	r3, r4
 800d60c:	d001      	beq.n	800d612 <memcmp+0x1c>
 800d60e:	1b18      	subs	r0, r3, r4
 800d610:	bd10      	pop	{r4, pc}
 800d612:	3001      	adds	r0, #1
 800d614:	e7f2      	b.n	800d5fc <memcmp+0x6>

0800d616 <memset>:
 800d616:	4402      	add	r2, r0
 800d618:	4603      	mov	r3, r0
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d100      	bne.n	800d620 <memset+0xa>
 800d61e:	4770      	bx	lr
 800d620:	f803 1b01 	strb.w	r1, [r3], #1
 800d624:	e7f9      	b.n	800d61a <memset+0x4>
	...

0800d628 <_close_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	4d06      	ldr	r5, [pc, #24]	@ (800d644 <_close_r+0x1c>)
 800d62c:	2300      	movs	r3, #0
 800d62e:	4604      	mov	r4, r0
 800d630:	4608      	mov	r0, r1
 800d632:	602b      	str	r3, [r5, #0]
 800d634:	f7f3 fca8 	bl	8000f88 <_close>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	d102      	bne.n	800d642 <_close_r+0x1a>
 800d63c:	682b      	ldr	r3, [r5, #0]
 800d63e:	b103      	cbz	r3, 800d642 <_close_r+0x1a>
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	bd38      	pop	{r3, r4, r5, pc}
 800d644:	200377f0 	.word	0x200377f0

0800d648 <_reclaim_reent>:
 800d648:	4b29      	ldr	r3, [pc, #164]	@ (800d6f0 <_reclaim_reent+0xa8>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4283      	cmp	r3, r0
 800d64e:	b570      	push	{r4, r5, r6, lr}
 800d650:	4604      	mov	r4, r0
 800d652:	d04b      	beq.n	800d6ec <_reclaim_reent+0xa4>
 800d654:	69c3      	ldr	r3, [r0, #28]
 800d656:	b1ab      	cbz	r3, 800d684 <_reclaim_reent+0x3c>
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	b16b      	cbz	r3, 800d678 <_reclaim_reent+0x30>
 800d65c:	2500      	movs	r5, #0
 800d65e:	69e3      	ldr	r3, [r4, #28]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	5959      	ldr	r1, [r3, r5]
 800d664:	2900      	cmp	r1, #0
 800d666:	d13b      	bne.n	800d6e0 <_reclaim_reent+0x98>
 800d668:	3504      	adds	r5, #4
 800d66a:	2d80      	cmp	r5, #128	@ 0x80
 800d66c:	d1f7      	bne.n	800d65e <_reclaim_reent+0x16>
 800d66e:	69e3      	ldr	r3, [r4, #28]
 800d670:	4620      	mov	r0, r4
 800d672:	68d9      	ldr	r1, [r3, #12]
 800d674:	f000 f8c8 	bl	800d808 <_free_r>
 800d678:	69e3      	ldr	r3, [r4, #28]
 800d67a:	6819      	ldr	r1, [r3, #0]
 800d67c:	b111      	cbz	r1, 800d684 <_reclaim_reent+0x3c>
 800d67e:	4620      	mov	r0, r4
 800d680:	f000 f8c2 	bl	800d808 <_free_r>
 800d684:	6961      	ldr	r1, [r4, #20]
 800d686:	b111      	cbz	r1, 800d68e <_reclaim_reent+0x46>
 800d688:	4620      	mov	r0, r4
 800d68a:	f000 f8bd 	bl	800d808 <_free_r>
 800d68e:	69e1      	ldr	r1, [r4, #28]
 800d690:	b111      	cbz	r1, 800d698 <_reclaim_reent+0x50>
 800d692:	4620      	mov	r0, r4
 800d694:	f000 f8b8 	bl	800d808 <_free_r>
 800d698:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d69a:	b111      	cbz	r1, 800d6a2 <_reclaim_reent+0x5a>
 800d69c:	4620      	mov	r0, r4
 800d69e:	f000 f8b3 	bl	800d808 <_free_r>
 800d6a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6a4:	b111      	cbz	r1, 800d6ac <_reclaim_reent+0x64>
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f000 f8ae 	bl	800d808 <_free_r>
 800d6ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d6ae:	b111      	cbz	r1, 800d6b6 <_reclaim_reent+0x6e>
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f000 f8a9 	bl	800d808 <_free_r>
 800d6b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d6b8:	b111      	cbz	r1, 800d6c0 <_reclaim_reent+0x78>
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f000 f8a4 	bl	800d808 <_free_r>
 800d6c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d6c2:	b111      	cbz	r1, 800d6ca <_reclaim_reent+0x82>
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f000 f89f 	bl	800d808 <_free_r>
 800d6ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d6cc:	b111      	cbz	r1, 800d6d4 <_reclaim_reent+0x8c>
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f000 f89a 	bl	800d808 <_free_r>
 800d6d4:	6a23      	ldr	r3, [r4, #32]
 800d6d6:	b14b      	cbz	r3, 800d6ec <_reclaim_reent+0xa4>
 800d6d8:	4620      	mov	r0, r4
 800d6da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6de:	4718      	bx	r3
 800d6e0:	680e      	ldr	r6, [r1, #0]
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f000 f890 	bl	800d808 <_free_r>
 800d6e8:	4631      	mov	r1, r6
 800d6ea:	e7bb      	b.n	800d664 <_reclaim_reent+0x1c>
 800d6ec:	bd70      	pop	{r4, r5, r6, pc}
 800d6ee:	bf00      	nop
 800d6f0:	2000003c 	.word	0x2000003c

0800d6f4 <_lseek_r>:
 800d6f4:	b538      	push	{r3, r4, r5, lr}
 800d6f6:	4d07      	ldr	r5, [pc, #28]	@ (800d714 <_lseek_r+0x20>)
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	4608      	mov	r0, r1
 800d6fc:	4611      	mov	r1, r2
 800d6fe:	2200      	movs	r2, #0
 800d700:	602a      	str	r2, [r5, #0]
 800d702:	461a      	mov	r2, r3
 800d704:	f7f3 fc4a 	bl	8000f9c <_lseek>
 800d708:	1c43      	adds	r3, r0, #1
 800d70a:	d102      	bne.n	800d712 <_lseek_r+0x1e>
 800d70c:	682b      	ldr	r3, [r5, #0]
 800d70e:	b103      	cbz	r3, 800d712 <_lseek_r+0x1e>
 800d710:	6023      	str	r3, [r4, #0]
 800d712:	bd38      	pop	{r3, r4, r5, pc}
 800d714:	200377f0 	.word	0x200377f0

0800d718 <_read_r>:
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	4d07      	ldr	r5, [pc, #28]	@ (800d738 <_read_r+0x20>)
 800d71c:	4604      	mov	r4, r0
 800d71e:	4608      	mov	r0, r1
 800d720:	4611      	mov	r1, r2
 800d722:	2200      	movs	r2, #0
 800d724:	602a      	str	r2, [r5, #0]
 800d726:	461a      	mov	r2, r3
 800d728:	f7f3 fc12 	bl	8000f50 <_read>
 800d72c:	1c43      	adds	r3, r0, #1
 800d72e:	d102      	bne.n	800d736 <_read_r+0x1e>
 800d730:	682b      	ldr	r3, [r5, #0]
 800d732:	b103      	cbz	r3, 800d736 <_read_r+0x1e>
 800d734:	6023      	str	r3, [r4, #0]
 800d736:	bd38      	pop	{r3, r4, r5, pc}
 800d738:	200377f0 	.word	0x200377f0

0800d73c <_write_r>:
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	4d07      	ldr	r5, [pc, #28]	@ (800d75c <_write_r+0x20>)
 800d740:	4604      	mov	r4, r0
 800d742:	4608      	mov	r0, r1
 800d744:	4611      	mov	r1, r2
 800d746:	2200      	movs	r2, #0
 800d748:	602a      	str	r2, [r5, #0]
 800d74a:	461a      	mov	r2, r3
 800d74c:	f7f3 fc0e 	bl	8000f6c <_write>
 800d750:	1c43      	adds	r3, r0, #1
 800d752:	d102      	bne.n	800d75a <_write_r+0x1e>
 800d754:	682b      	ldr	r3, [r5, #0]
 800d756:	b103      	cbz	r3, 800d75a <_write_r+0x1e>
 800d758:	6023      	str	r3, [r4, #0]
 800d75a:	bd38      	pop	{r3, r4, r5, pc}
 800d75c:	200377f0 	.word	0x200377f0

0800d760 <__libc_init_array>:
 800d760:	b570      	push	{r4, r5, r6, lr}
 800d762:	4d0d      	ldr	r5, [pc, #52]	@ (800d798 <__libc_init_array+0x38>)
 800d764:	4c0d      	ldr	r4, [pc, #52]	@ (800d79c <__libc_init_array+0x3c>)
 800d766:	1b64      	subs	r4, r4, r5
 800d768:	10a4      	asrs	r4, r4, #2
 800d76a:	2600      	movs	r6, #0
 800d76c:	42a6      	cmp	r6, r4
 800d76e:	d109      	bne.n	800d784 <__libc_init_array+0x24>
 800d770:	4d0b      	ldr	r5, [pc, #44]	@ (800d7a0 <__libc_init_array+0x40>)
 800d772:	4c0c      	ldr	r4, [pc, #48]	@ (800d7a4 <__libc_init_array+0x44>)
 800d774:	f000 fe4a 	bl	800e40c <_init>
 800d778:	1b64      	subs	r4, r4, r5
 800d77a:	10a4      	asrs	r4, r4, #2
 800d77c:	2600      	movs	r6, #0
 800d77e:	42a6      	cmp	r6, r4
 800d780:	d105      	bne.n	800d78e <__libc_init_array+0x2e>
 800d782:	bd70      	pop	{r4, r5, r6, pc}
 800d784:	f855 3b04 	ldr.w	r3, [r5], #4
 800d788:	4798      	blx	r3
 800d78a:	3601      	adds	r6, #1
 800d78c:	e7ee      	b.n	800d76c <__libc_init_array+0xc>
 800d78e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d792:	4798      	blx	r3
 800d794:	3601      	adds	r6, #1
 800d796:	e7f2      	b.n	800d77e <__libc_init_array+0x1e>
 800d798:	08010cc0 	.word	0x08010cc0
 800d79c:	08010cc0 	.word	0x08010cc0
 800d7a0:	08010cc0 	.word	0x08010cc0
 800d7a4:	08010cc4 	.word	0x08010cc4

0800d7a8 <__retarget_lock_init_recursive>:
 800d7a8:	4770      	bx	lr

0800d7aa <__retarget_lock_acquire_recursive>:
 800d7aa:	4770      	bx	lr

0800d7ac <__retarget_lock_release_recursive>:
 800d7ac:	4770      	bx	lr

0800d7ae <memcpy>:
 800d7ae:	440a      	add	r2, r1
 800d7b0:	4291      	cmp	r1, r2
 800d7b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7b6:	d100      	bne.n	800d7ba <memcpy+0xc>
 800d7b8:	4770      	bx	lr
 800d7ba:	b510      	push	{r4, lr}
 800d7bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7c4:	4291      	cmp	r1, r2
 800d7c6:	d1f9      	bne.n	800d7bc <memcpy+0xe>
 800d7c8:	bd10      	pop	{r4, pc}
	...

0800d7cc <__assert_func>:
 800d7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7ce:	4614      	mov	r4, r2
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	4b09      	ldr	r3, [pc, #36]	@ (800d7f8 <__assert_func+0x2c>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	68d8      	ldr	r0, [r3, #12]
 800d7da:	b954      	cbnz	r4, 800d7f2 <__assert_func+0x26>
 800d7dc:	4b07      	ldr	r3, [pc, #28]	@ (800d7fc <__assert_func+0x30>)
 800d7de:	461c      	mov	r4, r3
 800d7e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7e4:	9100      	str	r1, [sp, #0]
 800d7e6:	462b      	mov	r3, r5
 800d7e8:	4905      	ldr	r1, [pc, #20]	@ (800d800 <__assert_func+0x34>)
 800d7ea:	f000 fc89 	bl	800e100 <fiprintf>
 800d7ee:	f000 fd3d 	bl	800e26c <abort>
 800d7f2:	4b04      	ldr	r3, [pc, #16]	@ (800d804 <__assert_func+0x38>)
 800d7f4:	e7f4      	b.n	800d7e0 <__assert_func+0x14>
 800d7f6:	bf00      	nop
 800d7f8:	2000003c 	.word	0x2000003c
 800d7fc:	0800f917 	.word	0x0800f917
 800d800:	08010c56 	.word	0x08010c56
 800d804:	08010c49 	.word	0x08010c49

0800d808 <_free_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	4605      	mov	r5, r0
 800d80c:	2900      	cmp	r1, #0
 800d80e:	d041      	beq.n	800d894 <_free_r+0x8c>
 800d810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d814:	1f0c      	subs	r4, r1, #4
 800d816:	2b00      	cmp	r3, #0
 800d818:	bfb8      	it	lt
 800d81a:	18e4      	addlt	r4, r4, r3
 800d81c:	f000 f8e8 	bl	800d9f0 <__malloc_lock>
 800d820:	4a1d      	ldr	r2, [pc, #116]	@ (800d898 <_free_r+0x90>)
 800d822:	6813      	ldr	r3, [r2, #0]
 800d824:	b933      	cbnz	r3, 800d834 <_free_r+0x2c>
 800d826:	6063      	str	r3, [r4, #4]
 800d828:	6014      	str	r4, [r2, #0]
 800d82a:	4628      	mov	r0, r5
 800d82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d830:	f000 b8e4 	b.w	800d9fc <__malloc_unlock>
 800d834:	42a3      	cmp	r3, r4
 800d836:	d908      	bls.n	800d84a <_free_r+0x42>
 800d838:	6820      	ldr	r0, [r4, #0]
 800d83a:	1821      	adds	r1, r4, r0
 800d83c:	428b      	cmp	r3, r1
 800d83e:	bf01      	itttt	eq
 800d840:	6819      	ldreq	r1, [r3, #0]
 800d842:	685b      	ldreq	r3, [r3, #4]
 800d844:	1809      	addeq	r1, r1, r0
 800d846:	6021      	streq	r1, [r4, #0]
 800d848:	e7ed      	b.n	800d826 <_free_r+0x1e>
 800d84a:	461a      	mov	r2, r3
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	b10b      	cbz	r3, 800d854 <_free_r+0x4c>
 800d850:	42a3      	cmp	r3, r4
 800d852:	d9fa      	bls.n	800d84a <_free_r+0x42>
 800d854:	6811      	ldr	r1, [r2, #0]
 800d856:	1850      	adds	r0, r2, r1
 800d858:	42a0      	cmp	r0, r4
 800d85a:	d10b      	bne.n	800d874 <_free_r+0x6c>
 800d85c:	6820      	ldr	r0, [r4, #0]
 800d85e:	4401      	add	r1, r0
 800d860:	1850      	adds	r0, r2, r1
 800d862:	4283      	cmp	r3, r0
 800d864:	6011      	str	r1, [r2, #0]
 800d866:	d1e0      	bne.n	800d82a <_free_r+0x22>
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	6053      	str	r3, [r2, #4]
 800d86e:	4408      	add	r0, r1
 800d870:	6010      	str	r0, [r2, #0]
 800d872:	e7da      	b.n	800d82a <_free_r+0x22>
 800d874:	d902      	bls.n	800d87c <_free_r+0x74>
 800d876:	230c      	movs	r3, #12
 800d878:	602b      	str	r3, [r5, #0]
 800d87a:	e7d6      	b.n	800d82a <_free_r+0x22>
 800d87c:	6820      	ldr	r0, [r4, #0]
 800d87e:	1821      	adds	r1, r4, r0
 800d880:	428b      	cmp	r3, r1
 800d882:	bf04      	itt	eq
 800d884:	6819      	ldreq	r1, [r3, #0]
 800d886:	685b      	ldreq	r3, [r3, #4]
 800d888:	6063      	str	r3, [r4, #4]
 800d88a:	bf04      	itt	eq
 800d88c:	1809      	addeq	r1, r1, r0
 800d88e:	6021      	streq	r1, [r4, #0]
 800d890:	6054      	str	r4, [r2, #4]
 800d892:	e7ca      	b.n	800d82a <_free_r+0x22>
 800d894:	bd38      	pop	{r3, r4, r5, pc}
 800d896:	bf00      	nop
 800d898:	200377fc 	.word	0x200377fc

0800d89c <malloc>:
 800d89c:	4b02      	ldr	r3, [pc, #8]	@ (800d8a8 <malloc+0xc>)
 800d89e:	4601      	mov	r1, r0
 800d8a0:	6818      	ldr	r0, [r3, #0]
 800d8a2:	f000 b825 	b.w	800d8f0 <_malloc_r>
 800d8a6:	bf00      	nop
 800d8a8:	2000003c 	.word	0x2000003c

0800d8ac <sbrk_aligned>:
 800d8ac:	b570      	push	{r4, r5, r6, lr}
 800d8ae:	4e0f      	ldr	r6, [pc, #60]	@ (800d8ec <sbrk_aligned+0x40>)
 800d8b0:	460c      	mov	r4, r1
 800d8b2:	6831      	ldr	r1, [r6, #0]
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	b911      	cbnz	r1, 800d8be <sbrk_aligned+0x12>
 800d8b8:	f000 fcc8 	bl	800e24c <_sbrk_r>
 800d8bc:	6030      	str	r0, [r6, #0]
 800d8be:	4621      	mov	r1, r4
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	f000 fcc3 	bl	800e24c <_sbrk_r>
 800d8c6:	1c43      	adds	r3, r0, #1
 800d8c8:	d103      	bne.n	800d8d2 <sbrk_aligned+0x26>
 800d8ca:	f04f 34ff 	mov.w	r4, #4294967295
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	bd70      	pop	{r4, r5, r6, pc}
 800d8d2:	1cc4      	adds	r4, r0, #3
 800d8d4:	f024 0403 	bic.w	r4, r4, #3
 800d8d8:	42a0      	cmp	r0, r4
 800d8da:	d0f8      	beq.n	800d8ce <sbrk_aligned+0x22>
 800d8dc:	1a21      	subs	r1, r4, r0
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f000 fcb4 	bl	800e24c <_sbrk_r>
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	d1f2      	bne.n	800d8ce <sbrk_aligned+0x22>
 800d8e8:	e7ef      	b.n	800d8ca <sbrk_aligned+0x1e>
 800d8ea:	bf00      	nop
 800d8ec:	200377f8 	.word	0x200377f8

0800d8f0 <_malloc_r>:
 800d8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f4:	1ccd      	adds	r5, r1, #3
 800d8f6:	f025 0503 	bic.w	r5, r5, #3
 800d8fa:	3508      	adds	r5, #8
 800d8fc:	2d0c      	cmp	r5, #12
 800d8fe:	bf38      	it	cc
 800d900:	250c      	movcc	r5, #12
 800d902:	2d00      	cmp	r5, #0
 800d904:	4606      	mov	r6, r0
 800d906:	db01      	blt.n	800d90c <_malloc_r+0x1c>
 800d908:	42a9      	cmp	r1, r5
 800d90a:	d904      	bls.n	800d916 <_malloc_r+0x26>
 800d90c:	230c      	movs	r3, #12
 800d90e:	6033      	str	r3, [r6, #0]
 800d910:	2000      	movs	r0, #0
 800d912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d9ec <_malloc_r+0xfc>
 800d91a:	f000 f869 	bl	800d9f0 <__malloc_lock>
 800d91e:	f8d8 3000 	ldr.w	r3, [r8]
 800d922:	461c      	mov	r4, r3
 800d924:	bb44      	cbnz	r4, 800d978 <_malloc_r+0x88>
 800d926:	4629      	mov	r1, r5
 800d928:	4630      	mov	r0, r6
 800d92a:	f7ff ffbf 	bl	800d8ac <sbrk_aligned>
 800d92e:	1c43      	adds	r3, r0, #1
 800d930:	4604      	mov	r4, r0
 800d932:	d158      	bne.n	800d9e6 <_malloc_r+0xf6>
 800d934:	f8d8 4000 	ldr.w	r4, [r8]
 800d938:	4627      	mov	r7, r4
 800d93a:	2f00      	cmp	r7, #0
 800d93c:	d143      	bne.n	800d9c6 <_malloc_r+0xd6>
 800d93e:	2c00      	cmp	r4, #0
 800d940:	d04b      	beq.n	800d9da <_malloc_r+0xea>
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	4639      	mov	r1, r7
 800d946:	4630      	mov	r0, r6
 800d948:	eb04 0903 	add.w	r9, r4, r3
 800d94c:	f000 fc7e 	bl	800e24c <_sbrk_r>
 800d950:	4581      	cmp	r9, r0
 800d952:	d142      	bne.n	800d9da <_malloc_r+0xea>
 800d954:	6821      	ldr	r1, [r4, #0]
 800d956:	1a6d      	subs	r5, r5, r1
 800d958:	4629      	mov	r1, r5
 800d95a:	4630      	mov	r0, r6
 800d95c:	f7ff ffa6 	bl	800d8ac <sbrk_aligned>
 800d960:	3001      	adds	r0, #1
 800d962:	d03a      	beq.n	800d9da <_malloc_r+0xea>
 800d964:	6823      	ldr	r3, [r4, #0]
 800d966:	442b      	add	r3, r5
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	f8d8 3000 	ldr.w	r3, [r8]
 800d96e:	685a      	ldr	r2, [r3, #4]
 800d970:	bb62      	cbnz	r2, 800d9cc <_malloc_r+0xdc>
 800d972:	f8c8 7000 	str.w	r7, [r8]
 800d976:	e00f      	b.n	800d998 <_malloc_r+0xa8>
 800d978:	6822      	ldr	r2, [r4, #0]
 800d97a:	1b52      	subs	r2, r2, r5
 800d97c:	d420      	bmi.n	800d9c0 <_malloc_r+0xd0>
 800d97e:	2a0b      	cmp	r2, #11
 800d980:	d917      	bls.n	800d9b2 <_malloc_r+0xc2>
 800d982:	1961      	adds	r1, r4, r5
 800d984:	42a3      	cmp	r3, r4
 800d986:	6025      	str	r5, [r4, #0]
 800d988:	bf18      	it	ne
 800d98a:	6059      	strne	r1, [r3, #4]
 800d98c:	6863      	ldr	r3, [r4, #4]
 800d98e:	bf08      	it	eq
 800d990:	f8c8 1000 	streq.w	r1, [r8]
 800d994:	5162      	str	r2, [r4, r5]
 800d996:	604b      	str	r3, [r1, #4]
 800d998:	4630      	mov	r0, r6
 800d99a:	f000 f82f 	bl	800d9fc <__malloc_unlock>
 800d99e:	f104 000b 	add.w	r0, r4, #11
 800d9a2:	1d23      	adds	r3, r4, #4
 800d9a4:	f020 0007 	bic.w	r0, r0, #7
 800d9a8:	1ac2      	subs	r2, r0, r3
 800d9aa:	bf1c      	itt	ne
 800d9ac:	1a1b      	subne	r3, r3, r0
 800d9ae:	50a3      	strne	r3, [r4, r2]
 800d9b0:	e7af      	b.n	800d912 <_malloc_r+0x22>
 800d9b2:	6862      	ldr	r2, [r4, #4]
 800d9b4:	42a3      	cmp	r3, r4
 800d9b6:	bf0c      	ite	eq
 800d9b8:	f8c8 2000 	streq.w	r2, [r8]
 800d9bc:	605a      	strne	r2, [r3, #4]
 800d9be:	e7eb      	b.n	800d998 <_malloc_r+0xa8>
 800d9c0:	4623      	mov	r3, r4
 800d9c2:	6864      	ldr	r4, [r4, #4]
 800d9c4:	e7ae      	b.n	800d924 <_malloc_r+0x34>
 800d9c6:	463c      	mov	r4, r7
 800d9c8:	687f      	ldr	r7, [r7, #4]
 800d9ca:	e7b6      	b.n	800d93a <_malloc_r+0x4a>
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	42a3      	cmp	r3, r4
 800d9d2:	d1fb      	bne.n	800d9cc <_malloc_r+0xdc>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	6053      	str	r3, [r2, #4]
 800d9d8:	e7de      	b.n	800d998 <_malloc_r+0xa8>
 800d9da:	230c      	movs	r3, #12
 800d9dc:	6033      	str	r3, [r6, #0]
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f000 f80c 	bl	800d9fc <__malloc_unlock>
 800d9e4:	e794      	b.n	800d910 <_malloc_r+0x20>
 800d9e6:	6005      	str	r5, [r0, #0]
 800d9e8:	e7d6      	b.n	800d998 <_malloc_r+0xa8>
 800d9ea:	bf00      	nop
 800d9ec:	200377fc 	.word	0x200377fc

0800d9f0 <__malloc_lock>:
 800d9f0:	4801      	ldr	r0, [pc, #4]	@ (800d9f8 <__malloc_lock+0x8>)
 800d9f2:	f7ff beda 	b.w	800d7aa <__retarget_lock_acquire_recursive>
 800d9f6:	bf00      	nop
 800d9f8:	200377f4 	.word	0x200377f4

0800d9fc <__malloc_unlock>:
 800d9fc:	4801      	ldr	r0, [pc, #4]	@ (800da04 <__malloc_unlock+0x8>)
 800d9fe:	f7ff bed5 	b.w	800d7ac <__retarget_lock_release_recursive>
 800da02:	bf00      	nop
 800da04:	200377f4 	.word	0x200377f4

0800da08 <__sfputc_r>:
 800da08:	6893      	ldr	r3, [r2, #8]
 800da0a:	3b01      	subs	r3, #1
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	b410      	push	{r4}
 800da10:	6093      	str	r3, [r2, #8]
 800da12:	da08      	bge.n	800da26 <__sfputc_r+0x1e>
 800da14:	6994      	ldr	r4, [r2, #24]
 800da16:	42a3      	cmp	r3, r4
 800da18:	db01      	blt.n	800da1e <__sfputc_r+0x16>
 800da1a:	290a      	cmp	r1, #10
 800da1c:	d103      	bne.n	800da26 <__sfputc_r+0x1e>
 800da1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da22:	f000 bb7f 	b.w	800e124 <__swbuf_r>
 800da26:	6813      	ldr	r3, [r2, #0]
 800da28:	1c58      	adds	r0, r3, #1
 800da2a:	6010      	str	r0, [r2, #0]
 800da2c:	7019      	strb	r1, [r3, #0]
 800da2e:	4608      	mov	r0, r1
 800da30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <__sfputs_r>:
 800da36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da38:	4606      	mov	r6, r0
 800da3a:	460f      	mov	r7, r1
 800da3c:	4614      	mov	r4, r2
 800da3e:	18d5      	adds	r5, r2, r3
 800da40:	42ac      	cmp	r4, r5
 800da42:	d101      	bne.n	800da48 <__sfputs_r+0x12>
 800da44:	2000      	movs	r0, #0
 800da46:	e007      	b.n	800da58 <__sfputs_r+0x22>
 800da48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da4c:	463a      	mov	r2, r7
 800da4e:	4630      	mov	r0, r6
 800da50:	f7ff ffda 	bl	800da08 <__sfputc_r>
 800da54:	1c43      	adds	r3, r0, #1
 800da56:	d1f3      	bne.n	800da40 <__sfputs_r+0xa>
 800da58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da5c <_vfiprintf_r>:
 800da5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da60:	460d      	mov	r5, r1
 800da62:	b09d      	sub	sp, #116	@ 0x74
 800da64:	4614      	mov	r4, r2
 800da66:	4698      	mov	r8, r3
 800da68:	4606      	mov	r6, r0
 800da6a:	b118      	cbz	r0, 800da74 <_vfiprintf_r+0x18>
 800da6c:	6a03      	ldr	r3, [r0, #32]
 800da6e:	b90b      	cbnz	r3, 800da74 <_vfiprintf_r+0x18>
 800da70:	f7ff fd36 	bl	800d4e0 <__sinit>
 800da74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da76:	07d9      	lsls	r1, r3, #31
 800da78:	d405      	bmi.n	800da86 <_vfiprintf_r+0x2a>
 800da7a:	89ab      	ldrh	r3, [r5, #12]
 800da7c:	059a      	lsls	r2, r3, #22
 800da7e:	d402      	bmi.n	800da86 <_vfiprintf_r+0x2a>
 800da80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da82:	f7ff fe92 	bl	800d7aa <__retarget_lock_acquire_recursive>
 800da86:	89ab      	ldrh	r3, [r5, #12]
 800da88:	071b      	lsls	r3, r3, #28
 800da8a:	d501      	bpl.n	800da90 <_vfiprintf_r+0x34>
 800da8c:	692b      	ldr	r3, [r5, #16]
 800da8e:	b99b      	cbnz	r3, 800dab8 <_vfiprintf_r+0x5c>
 800da90:	4629      	mov	r1, r5
 800da92:	4630      	mov	r0, r6
 800da94:	f000 fb84 	bl	800e1a0 <__swsetup_r>
 800da98:	b170      	cbz	r0, 800dab8 <_vfiprintf_r+0x5c>
 800da9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da9c:	07dc      	lsls	r4, r3, #31
 800da9e:	d504      	bpl.n	800daaa <_vfiprintf_r+0x4e>
 800daa0:	f04f 30ff 	mov.w	r0, #4294967295
 800daa4:	b01d      	add	sp, #116	@ 0x74
 800daa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daaa:	89ab      	ldrh	r3, [r5, #12]
 800daac:	0598      	lsls	r0, r3, #22
 800daae:	d4f7      	bmi.n	800daa0 <_vfiprintf_r+0x44>
 800dab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dab2:	f7ff fe7b 	bl	800d7ac <__retarget_lock_release_recursive>
 800dab6:	e7f3      	b.n	800daa0 <_vfiprintf_r+0x44>
 800dab8:	2300      	movs	r3, #0
 800daba:	9309      	str	r3, [sp, #36]	@ 0x24
 800dabc:	2320      	movs	r3, #32
 800dabe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dac2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dac6:	2330      	movs	r3, #48	@ 0x30
 800dac8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dc78 <_vfiprintf_r+0x21c>
 800dacc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dad0:	f04f 0901 	mov.w	r9, #1
 800dad4:	4623      	mov	r3, r4
 800dad6:	469a      	mov	sl, r3
 800dad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dadc:	b10a      	cbz	r2, 800dae2 <_vfiprintf_r+0x86>
 800dade:	2a25      	cmp	r2, #37	@ 0x25
 800dae0:	d1f9      	bne.n	800dad6 <_vfiprintf_r+0x7a>
 800dae2:	ebba 0b04 	subs.w	fp, sl, r4
 800dae6:	d00b      	beq.n	800db00 <_vfiprintf_r+0xa4>
 800dae8:	465b      	mov	r3, fp
 800daea:	4622      	mov	r2, r4
 800daec:	4629      	mov	r1, r5
 800daee:	4630      	mov	r0, r6
 800daf0:	f7ff ffa1 	bl	800da36 <__sfputs_r>
 800daf4:	3001      	adds	r0, #1
 800daf6:	f000 80a7 	beq.w	800dc48 <_vfiprintf_r+0x1ec>
 800dafa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dafc:	445a      	add	r2, fp
 800dafe:	9209      	str	r2, [sp, #36]	@ 0x24
 800db00:	f89a 3000 	ldrb.w	r3, [sl]
 800db04:	2b00      	cmp	r3, #0
 800db06:	f000 809f 	beq.w	800dc48 <_vfiprintf_r+0x1ec>
 800db0a:	2300      	movs	r3, #0
 800db0c:	f04f 32ff 	mov.w	r2, #4294967295
 800db10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db14:	f10a 0a01 	add.w	sl, sl, #1
 800db18:	9304      	str	r3, [sp, #16]
 800db1a:	9307      	str	r3, [sp, #28]
 800db1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db20:	931a      	str	r3, [sp, #104]	@ 0x68
 800db22:	4654      	mov	r4, sl
 800db24:	2205      	movs	r2, #5
 800db26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db2a:	4853      	ldr	r0, [pc, #332]	@ (800dc78 <_vfiprintf_r+0x21c>)
 800db2c:	f7f2 fb70 	bl	8000210 <memchr>
 800db30:	9a04      	ldr	r2, [sp, #16]
 800db32:	b9d8      	cbnz	r0, 800db6c <_vfiprintf_r+0x110>
 800db34:	06d1      	lsls	r1, r2, #27
 800db36:	bf44      	itt	mi
 800db38:	2320      	movmi	r3, #32
 800db3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db3e:	0713      	lsls	r3, r2, #28
 800db40:	bf44      	itt	mi
 800db42:	232b      	movmi	r3, #43	@ 0x2b
 800db44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db48:	f89a 3000 	ldrb.w	r3, [sl]
 800db4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800db4e:	d015      	beq.n	800db7c <_vfiprintf_r+0x120>
 800db50:	9a07      	ldr	r2, [sp, #28]
 800db52:	4654      	mov	r4, sl
 800db54:	2000      	movs	r0, #0
 800db56:	f04f 0c0a 	mov.w	ip, #10
 800db5a:	4621      	mov	r1, r4
 800db5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db60:	3b30      	subs	r3, #48	@ 0x30
 800db62:	2b09      	cmp	r3, #9
 800db64:	d94b      	bls.n	800dbfe <_vfiprintf_r+0x1a2>
 800db66:	b1b0      	cbz	r0, 800db96 <_vfiprintf_r+0x13a>
 800db68:	9207      	str	r2, [sp, #28]
 800db6a:	e014      	b.n	800db96 <_vfiprintf_r+0x13a>
 800db6c:	eba0 0308 	sub.w	r3, r0, r8
 800db70:	fa09 f303 	lsl.w	r3, r9, r3
 800db74:	4313      	orrs	r3, r2
 800db76:	9304      	str	r3, [sp, #16]
 800db78:	46a2      	mov	sl, r4
 800db7a:	e7d2      	b.n	800db22 <_vfiprintf_r+0xc6>
 800db7c:	9b03      	ldr	r3, [sp, #12]
 800db7e:	1d19      	adds	r1, r3, #4
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	9103      	str	r1, [sp, #12]
 800db84:	2b00      	cmp	r3, #0
 800db86:	bfbb      	ittet	lt
 800db88:	425b      	neglt	r3, r3
 800db8a:	f042 0202 	orrlt.w	r2, r2, #2
 800db8e:	9307      	strge	r3, [sp, #28]
 800db90:	9307      	strlt	r3, [sp, #28]
 800db92:	bfb8      	it	lt
 800db94:	9204      	strlt	r2, [sp, #16]
 800db96:	7823      	ldrb	r3, [r4, #0]
 800db98:	2b2e      	cmp	r3, #46	@ 0x2e
 800db9a:	d10a      	bne.n	800dbb2 <_vfiprintf_r+0x156>
 800db9c:	7863      	ldrb	r3, [r4, #1]
 800db9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dba0:	d132      	bne.n	800dc08 <_vfiprintf_r+0x1ac>
 800dba2:	9b03      	ldr	r3, [sp, #12]
 800dba4:	1d1a      	adds	r2, r3, #4
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	9203      	str	r2, [sp, #12]
 800dbaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbae:	3402      	adds	r4, #2
 800dbb0:	9305      	str	r3, [sp, #20]
 800dbb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dc88 <_vfiprintf_r+0x22c>
 800dbb6:	7821      	ldrb	r1, [r4, #0]
 800dbb8:	2203      	movs	r2, #3
 800dbba:	4650      	mov	r0, sl
 800dbbc:	f7f2 fb28 	bl	8000210 <memchr>
 800dbc0:	b138      	cbz	r0, 800dbd2 <_vfiprintf_r+0x176>
 800dbc2:	9b04      	ldr	r3, [sp, #16]
 800dbc4:	eba0 000a 	sub.w	r0, r0, sl
 800dbc8:	2240      	movs	r2, #64	@ 0x40
 800dbca:	4082      	lsls	r2, r0
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	3401      	adds	r4, #1
 800dbd0:	9304      	str	r3, [sp, #16]
 800dbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd6:	4829      	ldr	r0, [pc, #164]	@ (800dc7c <_vfiprintf_r+0x220>)
 800dbd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbdc:	2206      	movs	r2, #6
 800dbde:	f7f2 fb17 	bl	8000210 <memchr>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d03f      	beq.n	800dc66 <_vfiprintf_r+0x20a>
 800dbe6:	4b26      	ldr	r3, [pc, #152]	@ (800dc80 <_vfiprintf_r+0x224>)
 800dbe8:	bb1b      	cbnz	r3, 800dc32 <_vfiprintf_r+0x1d6>
 800dbea:	9b03      	ldr	r3, [sp, #12]
 800dbec:	3307      	adds	r3, #7
 800dbee:	f023 0307 	bic.w	r3, r3, #7
 800dbf2:	3308      	adds	r3, #8
 800dbf4:	9303      	str	r3, [sp, #12]
 800dbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbf8:	443b      	add	r3, r7
 800dbfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbfc:	e76a      	b.n	800dad4 <_vfiprintf_r+0x78>
 800dbfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc02:	460c      	mov	r4, r1
 800dc04:	2001      	movs	r0, #1
 800dc06:	e7a8      	b.n	800db5a <_vfiprintf_r+0xfe>
 800dc08:	2300      	movs	r3, #0
 800dc0a:	3401      	adds	r4, #1
 800dc0c:	9305      	str	r3, [sp, #20]
 800dc0e:	4619      	mov	r1, r3
 800dc10:	f04f 0c0a 	mov.w	ip, #10
 800dc14:	4620      	mov	r0, r4
 800dc16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc1a:	3a30      	subs	r2, #48	@ 0x30
 800dc1c:	2a09      	cmp	r2, #9
 800dc1e:	d903      	bls.n	800dc28 <_vfiprintf_r+0x1cc>
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d0c6      	beq.n	800dbb2 <_vfiprintf_r+0x156>
 800dc24:	9105      	str	r1, [sp, #20]
 800dc26:	e7c4      	b.n	800dbb2 <_vfiprintf_r+0x156>
 800dc28:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e7f0      	b.n	800dc14 <_vfiprintf_r+0x1b8>
 800dc32:	ab03      	add	r3, sp, #12
 800dc34:	9300      	str	r3, [sp, #0]
 800dc36:	462a      	mov	r2, r5
 800dc38:	4b12      	ldr	r3, [pc, #72]	@ (800dc84 <_vfiprintf_r+0x228>)
 800dc3a:	a904      	add	r1, sp, #16
 800dc3c:	4630      	mov	r0, r6
 800dc3e:	f3af 8000 	nop.w
 800dc42:	4607      	mov	r7, r0
 800dc44:	1c78      	adds	r0, r7, #1
 800dc46:	d1d6      	bne.n	800dbf6 <_vfiprintf_r+0x19a>
 800dc48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc4a:	07d9      	lsls	r1, r3, #31
 800dc4c:	d405      	bmi.n	800dc5a <_vfiprintf_r+0x1fe>
 800dc4e:	89ab      	ldrh	r3, [r5, #12]
 800dc50:	059a      	lsls	r2, r3, #22
 800dc52:	d402      	bmi.n	800dc5a <_vfiprintf_r+0x1fe>
 800dc54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc56:	f7ff fda9 	bl	800d7ac <__retarget_lock_release_recursive>
 800dc5a:	89ab      	ldrh	r3, [r5, #12]
 800dc5c:	065b      	lsls	r3, r3, #25
 800dc5e:	f53f af1f 	bmi.w	800daa0 <_vfiprintf_r+0x44>
 800dc62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc64:	e71e      	b.n	800daa4 <_vfiprintf_r+0x48>
 800dc66:	ab03      	add	r3, sp, #12
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	462a      	mov	r2, r5
 800dc6c:	4b05      	ldr	r3, [pc, #20]	@ (800dc84 <_vfiprintf_r+0x228>)
 800dc6e:	a904      	add	r1, sp, #16
 800dc70:	4630      	mov	r0, r6
 800dc72:	f000 f879 	bl	800dd68 <_printf_i>
 800dc76:	e7e4      	b.n	800dc42 <_vfiprintf_r+0x1e6>
 800dc78:	08010c85 	.word	0x08010c85
 800dc7c:	08010c8f 	.word	0x08010c8f
 800dc80:	00000000 	.word	0x00000000
 800dc84:	0800da37 	.word	0x0800da37
 800dc88:	08010c8b 	.word	0x08010c8b

0800dc8c <_printf_common>:
 800dc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc90:	4616      	mov	r6, r2
 800dc92:	4698      	mov	r8, r3
 800dc94:	688a      	ldr	r2, [r1, #8]
 800dc96:	690b      	ldr	r3, [r1, #16]
 800dc98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	bfb8      	it	lt
 800dca0:	4613      	movlt	r3, r2
 800dca2:	6033      	str	r3, [r6, #0]
 800dca4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dca8:	4607      	mov	r7, r0
 800dcaa:	460c      	mov	r4, r1
 800dcac:	b10a      	cbz	r2, 800dcb2 <_printf_common+0x26>
 800dcae:	3301      	adds	r3, #1
 800dcb0:	6033      	str	r3, [r6, #0]
 800dcb2:	6823      	ldr	r3, [r4, #0]
 800dcb4:	0699      	lsls	r1, r3, #26
 800dcb6:	bf42      	ittt	mi
 800dcb8:	6833      	ldrmi	r3, [r6, #0]
 800dcba:	3302      	addmi	r3, #2
 800dcbc:	6033      	strmi	r3, [r6, #0]
 800dcbe:	6825      	ldr	r5, [r4, #0]
 800dcc0:	f015 0506 	ands.w	r5, r5, #6
 800dcc4:	d106      	bne.n	800dcd4 <_printf_common+0x48>
 800dcc6:	f104 0a19 	add.w	sl, r4, #25
 800dcca:	68e3      	ldr	r3, [r4, #12]
 800dccc:	6832      	ldr	r2, [r6, #0]
 800dcce:	1a9b      	subs	r3, r3, r2
 800dcd0:	42ab      	cmp	r3, r5
 800dcd2:	dc26      	bgt.n	800dd22 <_printf_common+0x96>
 800dcd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dcd8:	6822      	ldr	r2, [r4, #0]
 800dcda:	3b00      	subs	r3, #0
 800dcdc:	bf18      	it	ne
 800dcde:	2301      	movne	r3, #1
 800dce0:	0692      	lsls	r2, r2, #26
 800dce2:	d42b      	bmi.n	800dd3c <_printf_common+0xb0>
 800dce4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dce8:	4641      	mov	r1, r8
 800dcea:	4638      	mov	r0, r7
 800dcec:	47c8      	blx	r9
 800dcee:	3001      	adds	r0, #1
 800dcf0:	d01e      	beq.n	800dd30 <_printf_common+0xa4>
 800dcf2:	6823      	ldr	r3, [r4, #0]
 800dcf4:	6922      	ldr	r2, [r4, #16]
 800dcf6:	f003 0306 	and.w	r3, r3, #6
 800dcfa:	2b04      	cmp	r3, #4
 800dcfc:	bf02      	ittt	eq
 800dcfe:	68e5      	ldreq	r5, [r4, #12]
 800dd00:	6833      	ldreq	r3, [r6, #0]
 800dd02:	1aed      	subeq	r5, r5, r3
 800dd04:	68a3      	ldr	r3, [r4, #8]
 800dd06:	bf0c      	ite	eq
 800dd08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd0c:	2500      	movne	r5, #0
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	bfc4      	itt	gt
 800dd12:	1a9b      	subgt	r3, r3, r2
 800dd14:	18ed      	addgt	r5, r5, r3
 800dd16:	2600      	movs	r6, #0
 800dd18:	341a      	adds	r4, #26
 800dd1a:	42b5      	cmp	r5, r6
 800dd1c:	d11a      	bne.n	800dd54 <_printf_common+0xc8>
 800dd1e:	2000      	movs	r0, #0
 800dd20:	e008      	b.n	800dd34 <_printf_common+0xa8>
 800dd22:	2301      	movs	r3, #1
 800dd24:	4652      	mov	r2, sl
 800dd26:	4641      	mov	r1, r8
 800dd28:	4638      	mov	r0, r7
 800dd2a:	47c8      	blx	r9
 800dd2c:	3001      	adds	r0, #1
 800dd2e:	d103      	bne.n	800dd38 <_printf_common+0xac>
 800dd30:	f04f 30ff 	mov.w	r0, #4294967295
 800dd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd38:	3501      	adds	r5, #1
 800dd3a:	e7c6      	b.n	800dcca <_printf_common+0x3e>
 800dd3c:	18e1      	adds	r1, r4, r3
 800dd3e:	1c5a      	adds	r2, r3, #1
 800dd40:	2030      	movs	r0, #48	@ 0x30
 800dd42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dd46:	4422      	add	r2, r4
 800dd48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dd4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dd50:	3302      	adds	r3, #2
 800dd52:	e7c7      	b.n	800dce4 <_printf_common+0x58>
 800dd54:	2301      	movs	r3, #1
 800dd56:	4622      	mov	r2, r4
 800dd58:	4641      	mov	r1, r8
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	47c8      	blx	r9
 800dd5e:	3001      	adds	r0, #1
 800dd60:	d0e6      	beq.n	800dd30 <_printf_common+0xa4>
 800dd62:	3601      	adds	r6, #1
 800dd64:	e7d9      	b.n	800dd1a <_printf_common+0x8e>
	...

0800dd68 <_printf_i>:
 800dd68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd6c:	7e0f      	ldrb	r7, [r1, #24]
 800dd6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dd70:	2f78      	cmp	r7, #120	@ 0x78
 800dd72:	4691      	mov	r9, r2
 800dd74:	4680      	mov	r8, r0
 800dd76:	460c      	mov	r4, r1
 800dd78:	469a      	mov	sl, r3
 800dd7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dd7e:	d807      	bhi.n	800dd90 <_printf_i+0x28>
 800dd80:	2f62      	cmp	r7, #98	@ 0x62
 800dd82:	d80a      	bhi.n	800dd9a <_printf_i+0x32>
 800dd84:	2f00      	cmp	r7, #0
 800dd86:	f000 80d2 	beq.w	800df2e <_printf_i+0x1c6>
 800dd8a:	2f58      	cmp	r7, #88	@ 0x58
 800dd8c:	f000 80b9 	beq.w	800df02 <_printf_i+0x19a>
 800dd90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dd98:	e03a      	b.n	800de10 <_printf_i+0xa8>
 800dd9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dd9e:	2b15      	cmp	r3, #21
 800dda0:	d8f6      	bhi.n	800dd90 <_printf_i+0x28>
 800dda2:	a101      	add	r1, pc, #4	@ (adr r1, 800dda8 <_printf_i+0x40>)
 800dda4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dda8:	0800de01 	.word	0x0800de01
 800ddac:	0800de15 	.word	0x0800de15
 800ddb0:	0800dd91 	.word	0x0800dd91
 800ddb4:	0800dd91 	.word	0x0800dd91
 800ddb8:	0800dd91 	.word	0x0800dd91
 800ddbc:	0800dd91 	.word	0x0800dd91
 800ddc0:	0800de15 	.word	0x0800de15
 800ddc4:	0800dd91 	.word	0x0800dd91
 800ddc8:	0800dd91 	.word	0x0800dd91
 800ddcc:	0800dd91 	.word	0x0800dd91
 800ddd0:	0800dd91 	.word	0x0800dd91
 800ddd4:	0800df15 	.word	0x0800df15
 800ddd8:	0800de3f 	.word	0x0800de3f
 800dddc:	0800decf 	.word	0x0800decf
 800dde0:	0800dd91 	.word	0x0800dd91
 800dde4:	0800dd91 	.word	0x0800dd91
 800dde8:	0800df37 	.word	0x0800df37
 800ddec:	0800dd91 	.word	0x0800dd91
 800ddf0:	0800de3f 	.word	0x0800de3f
 800ddf4:	0800dd91 	.word	0x0800dd91
 800ddf8:	0800dd91 	.word	0x0800dd91
 800ddfc:	0800ded7 	.word	0x0800ded7
 800de00:	6833      	ldr	r3, [r6, #0]
 800de02:	1d1a      	adds	r2, r3, #4
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	6032      	str	r2, [r6, #0]
 800de08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800de10:	2301      	movs	r3, #1
 800de12:	e09d      	b.n	800df50 <_printf_i+0x1e8>
 800de14:	6833      	ldr	r3, [r6, #0]
 800de16:	6820      	ldr	r0, [r4, #0]
 800de18:	1d19      	adds	r1, r3, #4
 800de1a:	6031      	str	r1, [r6, #0]
 800de1c:	0606      	lsls	r6, r0, #24
 800de1e:	d501      	bpl.n	800de24 <_printf_i+0xbc>
 800de20:	681d      	ldr	r5, [r3, #0]
 800de22:	e003      	b.n	800de2c <_printf_i+0xc4>
 800de24:	0645      	lsls	r5, r0, #25
 800de26:	d5fb      	bpl.n	800de20 <_printf_i+0xb8>
 800de28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800de2c:	2d00      	cmp	r5, #0
 800de2e:	da03      	bge.n	800de38 <_printf_i+0xd0>
 800de30:	232d      	movs	r3, #45	@ 0x2d
 800de32:	426d      	negs	r5, r5
 800de34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de38:	4859      	ldr	r0, [pc, #356]	@ (800dfa0 <_printf_i+0x238>)
 800de3a:	230a      	movs	r3, #10
 800de3c:	e011      	b.n	800de62 <_printf_i+0xfa>
 800de3e:	6821      	ldr	r1, [r4, #0]
 800de40:	6833      	ldr	r3, [r6, #0]
 800de42:	0608      	lsls	r0, r1, #24
 800de44:	f853 5b04 	ldr.w	r5, [r3], #4
 800de48:	d402      	bmi.n	800de50 <_printf_i+0xe8>
 800de4a:	0649      	lsls	r1, r1, #25
 800de4c:	bf48      	it	mi
 800de4e:	b2ad      	uxthmi	r5, r5
 800de50:	2f6f      	cmp	r7, #111	@ 0x6f
 800de52:	4853      	ldr	r0, [pc, #332]	@ (800dfa0 <_printf_i+0x238>)
 800de54:	6033      	str	r3, [r6, #0]
 800de56:	bf14      	ite	ne
 800de58:	230a      	movne	r3, #10
 800de5a:	2308      	moveq	r3, #8
 800de5c:	2100      	movs	r1, #0
 800de5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800de62:	6866      	ldr	r6, [r4, #4]
 800de64:	60a6      	str	r6, [r4, #8]
 800de66:	2e00      	cmp	r6, #0
 800de68:	bfa2      	ittt	ge
 800de6a:	6821      	ldrge	r1, [r4, #0]
 800de6c:	f021 0104 	bicge.w	r1, r1, #4
 800de70:	6021      	strge	r1, [r4, #0]
 800de72:	b90d      	cbnz	r5, 800de78 <_printf_i+0x110>
 800de74:	2e00      	cmp	r6, #0
 800de76:	d04b      	beq.n	800df10 <_printf_i+0x1a8>
 800de78:	4616      	mov	r6, r2
 800de7a:	fbb5 f1f3 	udiv	r1, r5, r3
 800de7e:	fb03 5711 	mls	r7, r3, r1, r5
 800de82:	5dc7      	ldrb	r7, [r0, r7]
 800de84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de88:	462f      	mov	r7, r5
 800de8a:	42bb      	cmp	r3, r7
 800de8c:	460d      	mov	r5, r1
 800de8e:	d9f4      	bls.n	800de7a <_printf_i+0x112>
 800de90:	2b08      	cmp	r3, #8
 800de92:	d10b      	bne.n	800deac <_printf_i+0x144>
 800de94:	6823      	ldr	r3, [r4, #0]
 800de96:	07df      	lsls	r7, r3, #31
 800de98:	d508      	bpl.n	800deac <_printf_i+0x144>
 800de9a:	6923      	ldr	r3, [r4, #16]
 800de9c:	6861      	ldr	r1, [r4, #4]
 800de9e:	4299      	cmp	r1, r3
 800dea0:	bfde      	ittt	le
 800dea2:	2330      	movle	r3, #48	@ 0x30
 800dea4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dea8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800deac:	1b92      	subs	r2, r2, r6
 800deae:	6122      	str	r2, [r4, #16]
 800deb0:	f8cd a000 	str.w	sl, [sp]
 800deb4:	464b      	mov	r3, r9
 800deb6:	aa03      	add	r2, sp, #12
 800deb8:	4621      	mov	r1, r4
 800deba:	4640      	mov	r0, r8
 800debc:	f7ff fee6 	bl	800dc8c <_printf_common>
 800dec0:	3001      	adds	r0, #1
 800dec2:	d14a      	bne.n	800df5a <_printf_i+0x1f2>
 800dec4:	f04f 30ff 	mov.w	r0, #4294967295
 800dec8:	b004      	add	sp, #16
 800deca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dece:	6823      	ldr	r3, [r4, #0]
 800ded0:	f043 0320 	orr.w	r3, r3, #32
 800ded4:	6023      	str	r3, [r4, #0]
 800ded6:	4833      	ldr	r0, [pc, #204]	@ (800dfa4 <_printf_i+0x23c>)
 800ded8:	2778      	movs	r7, #120	@ 0x78
 800deda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dede:	6823      	ldr	r3, [r4, #0]
 800dee0:	6831      	ldr	r1, [r6, #0]
 800dee2:	061f      	lsls	r7, r3, #24
 800dee4:	f851 5b04 	ldr.w	r5, [r1], #4
 800dee8:	d402      	bmi.n	800def0 <_printf_i+0x188>
 800deea:	065f      	lsls	r7, r3, #25
 800deec:	bf48      	it	mi
 800deee:	b2ad      	uxthmi	r5, r5
 800def0:	6031      	str	r1, [r6, #0]
 800def2:	07d9      	lsls	r1, r3, #31
 800def4:	bf44      	itt	mi
 800def6:	f043 0320 	orrmi.w	r3, r3, #32
 800defa:	6023      	strmi	r3, [r4, #0]
 800defc:	b11d      	cbz	r5, 800df06 <_printf_i+0x19e>
 800defe:	2310      	movs	r3, #16
 800df00:	e7ac      	b.n	800de5c <_printf_i+0xf4>
 800df02:	4827      	ldr	r0, [pc, #156]	@ (800dfa0 <_printf_i+0x238>)
 800df04:	e7e9      	b.n	800deda <_printf_i+0x172>
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	f023 0320 	bic.w	r3, r3, #32
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	e7f6      	b.n	800defe <_printf_i+0x196>
 800df10:	4616      	mov	r6, r2
 800df12:	e7bd      	b.n	800de90 <_printf_i+0x128>
 800df14:	6833      	ldr	r3, [r6, #0]
 800df16:	6825      	ldr	r5, [r4, #0]
 800df18:	6961      	ldr	r1, [r4, #20]
 800df1a:	1d18      	adds	r0, r3, #4
 800df1c:	6030      	str	r0, [r6, #0]
 800df1e:	062e      	lsls	r6, r5, #24
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	d501      	bpl.n	800df28 <_printf_i+0x1c0>
 800df24:	6019      	str	r1, [r3, #0]
 800df26:	e002      	b.n	800df2e <_printf_i+0x1c6>
 800df28:	0668      	lsls	r0, r5, #25
 800df2a:	d5fb      	bpl.n	800df24 <_printf_i+0x1bc>
 800df2c:	8019      	strh	r1, [r3, #0]
 800df2e:	2300      	movs	r3, #0
 800df30:	6123      	str	r3, [r4, #16]
 800df32:	4616      	mov	r6, r2
 800df34:	e7bc      	b.n	800deb0 <_printf_i+0x148>
 800df36:	6833      	ldr	r3, [r6, #0]
 800df38:	1d1a      	adds	r2, r3, #4
 800df3a:	6032      	str	r2, [r6, #0]
 800df3c:	681e      	ldr	r6, [r3, #0]
 800df3e:	6862      	ldr	r2, [r4, #4]
 800df40:	2100      	movs	r1, #0
 800df42:	4630      	mov	r0, r6
 800df44:	f7f2 f964 	bl	8000210 <memchr>
 800df48:	b108      	cbz	r0, 800df4e <_printf_i+0x1e6>
 800df4a:	1b80      	subs	r0, r0, r6
 800df4c:	6060      	str	r0, [r4, #4]
 800df4e:	6863      	ldr	r3, [r4, #4]
 800df50:	6123      	str	r3, [r4, #16]
 800df52:	2300      	movs	r3, #0
 800df54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df58:	e7aa      	b.n	800deb0 <_printf_i+0x148>
 800df5a:	6923      	ldr	r3, [r4, #16]
 800df5c:	4632      	mov	r2, r6
 800df5e:	4649      	mov	r1, r9
 800df60:	4640      	mov	r0, r8
 800df62:	47d0      	blx	sl
 800df64:	3001      	adds	r0, #1
 800df66:	d0ad      	beq.n	800dec4 <_printf_i+0x15c>
 800df68:	6823      	ldr	r3, [r4, #0]
 800df6a:	079b      	lsls	r3, r3, #30
 800df6c:	d413      	bmi.n	800df96 <_printf_i+0x22e>
 800df6e:	68e0      	ldr	r0, [r4, #12]
 800df70:	9b03      	ldr	r3, [sp, #12]
 800df72:	4298      	cmp	r0, r3
 800df74:	bfb8      	it	lt
 800df76:	4618      	movlt	r0, r3
 800df78:	e7a6      	b.n	800dec8 <_printf_i+0x160>
 800df7a:	2301      	movs	r3, #1
 800df7c:	4632      	mov	r2, r6
 800df7e:	4649      	mov	r1, r9
 800df80:	4640      	mov	r0, r8
 800df82:	47d0      	blx	sl
 800df84:	3001      	adds	r0, #1
 800df86:	d09d      	beq.n	800dec4 <_printf_i+0x15c>
 800df88:	3501      	adds	r5, #1
 800df8a:	68e3      	ldr	r3, [r4, #12]
 800df8c:	9903      	ldr	r1, [sp, #12]
 800df8e:	1a5b      	subs	r3, r3, r1
 800df90:	42ab      	cmp	r3, r5
 800df92:	dcf2      	bgt.n	800df7a <_printf_i+0x212>
 800df94:	e7eb      	b.n	800df6e <_printf_i+0x206>
 800df96:	2500      	movs	r5, #0
 800df98:	f104 0619 	add.w	r6, r4, #25
 800df9c:	e7f5      	b.n	800df8a <_printf_i+0x222>
 800df9e:	bf00      	nop
 800dfa0:	08010c96 	.word	0x08010c96
 800dfa4:	08010ca7 	.word	0x08010ca7

0800dfa8 <__sflush_r>:
 800dfa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfb0:	0716      	lsls	r6, r2, #28
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	460c      	mov	r4, r1
 800dfb6:	d454      	bmi.n	800e062 <__sflush_r+0xba>
 800dfb8:	684b      	ldr	r3, [r1, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	dc02      	bgt.n	800dfc4 <__sflush_r+0x1c>
 800dfbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	dd48      	ble.n	800e056 <__sflush_r+0xae>
 800dfc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dfc6:	2e00      	cmp	r6, #0
 800dfc8:	d045      	beq.n	800e056 <__sflush_r+0xae>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dfd0:	682f      	ldr	r7, [r5, #0]
 800dfd2:	6a21      	ldr	r1, [r4, #32]
 800dfd4:	602b      	str	r3, [r5, #0]
 800dfd6:	d030      	beq.n	800e03a <__sflush_r+0x92>
 800dfd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dfda:	89a3      	ldrh	r3, [r4, #12]
 800dfdc:	0759      	lsls	r1, r3, #29
 800dfde:	d505      	bpl.n	800dfec <__sflush_r+0x44>
 800dfe0:	6863      	ldr	r3, [r4, #4]
 800dfe2:	1ad2      	subs	r2, r2, r3
 800dfe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dfe6:	b10b      	cbz	r3, 800dfec <__sflush_r+0x44>
 800dfe8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dfea:	1ad2      	subs	r2, r2, r3
 800dfec:	2300      	movs	r3, #0
 800dfee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dff0:	6a21      	ldr	r1, [r4, #32]
 800dff2:	4628      	mov	r0, r5
 800dff4:	47b0      	blx	r6
 800dff6:	1c43      	adds	r3, r0, #1
 800dff8:	89a3      	ldrh	r3, [r4, #12]
 800dffa:	d106      	bne.n	800e00a <__sflush_r+0x62>
 800dffc:	6829      	ldr	r1, [r5, #0]
 800dffe:	291d      	cmp	r1, #29
 800e000:	d82b      	bhi.n	800e05a <__sflush_r+0xb2>
 800e002:	4a2a      	ldr	r2, [pc, #168]	@ (800e0ac <__sflush_r+0x104>)
 800e004:	410a      	asrs	r2, r1
 800e006:	07d6      	lsls	r6, r2, #31
 800e008:	d427      	bmi.n	800e05a <__sflush_r+0xb2>
 800e00a:	2200      	movs	r2, #0
 800e00c:	6062      	str	r2, [r4, #4]
 800e00e:	04d9      	lsls	r1, r3, #19
 800e010:	6922      	ldr	r2, [r4, #16]
 800e012:	6022      	str	r2, [r4, #0]
 800e014:	d504      	bpl.n	800e020 <__sflush_r+0x78>
 800e016:	1c42      	adds	r2, r0, #1
 800e018:	d101      	bne.n	800e01e <__sflush_r+0x76>
 800e01a:	682b      	ldr	r3, [r5, #0]
 800e01c:	b903      	cbnz	r3, 800e020 <__sflush_r+0x78>
 800e01e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e022:	602f      	str	r7, [r5, #0]
 800e024:	b1b9      	cbz	r1, 800e056 <__sflush_r+0xae>
 800e026:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e02a:	4299      	cmp	r1, r3
 800e02c:	d002      	beq.n	800e034 <__sflush_r+0x8c>
 800e02e:	4628      	mov	r0, r5
 800e030:	f7ff fbea 	bl	800d808 <_free_r>
 800e034:	2300      	movs	r3, #0
 800e036:	6363      	str	r3, [r4, #52]	@ 0x34
 800e038:	e00d      	b.n	800e056 <__sflush_r+0xae>
 800e03a:	2301      	movs	r3, #1
 800e03c:	4628      	mov	r0, r5
 800e03e:	47b0      	blx	r6
 800e040:	4602      	mov	r2, r0
 800e042:	1c50      	adds	r0, r2, #1
 800e044:	d1c9      	bne.n	800dfda <__sflush_r+0x32>
 800e046:	682b      	ldr	r3, [r5, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d0c6      	beq.n	800dfda <__sflush_r+0x32>
 800e04c:	2b1d      	cmp	r3, #29
 800e04e:	d001      	beq.n	800e054 <__sflush_r+0xac>
 800e050:	2b16      	cmp	r3, #22
 800e052:	d11e      	bne.n	800e092 <__sflush_r+0xea>
 800e054:	602f      	str	r7, [r5, #0]
 800e056:	2000      	movs	r0, #0
 800e058:	e022      	b.n	800e0a0 <__sflush_r+0xf8>
 800e05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e05e:	b21b      	sxth	r3, r3
 800e060:	e01b      	b.n	800e09a <__sflush_r+0xf2>
 800e062:	690f      	ldr	r7, [r1, #16]
 800e064:	2f00      	cmp	r7, #0
 800e066:	d0f6      	beq.n	800e056 <__sflush_r+0xae>
 800e068:	0793      	lsls	r3, r2, #30
 800e06a:	680e      	ldr	r6, [r1, #0]
 800e06c:	bf08      	it	eq
 800e06e:	694b      	ldreq	r3, [r1, #20]
 800e070:	600f      	str	r7, [r1, #0]
 800e072:	bf18      	it	ne
 800e074:	2300      	movne	r3, #0
 800e076:	eba6 0807 	sub.w	r8, r6, r7
 800e07a:	608b      	str	r3, [r1, #8]
 800e07c:	f1b8 0f00 	cmp.w	r8, #0
 800e080:	dde9      	ble.n	800e056 <__sflush_r+0xae>
 800e082:	6a21      	ldr	r1, [r4, #32]
 800e084:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e086:	4643      	mov	r3, r8
 800e088:	463a      	mov	r2, r7
 800e08a:	4628      	mov	r0, r5
 800e08c:	47b0      	blx	r6
 800e08e:	2800      	cmp	r0, #0
 800e090:	dc08      	bgt.n	800e0a4 <__sflush_r+0xfc>
 800e092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e09a:	81a3      	strh	r3, [r4, #12]
 800e09c:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a4:	4407      	add	r7, r0
 800e0a6:	eba8 0800 	sub.w	r8, r8, r0
 800e0aa:	e7e7      	b.n	800e07c <__sflush_r+0xd4>
 800e0ac:	dfbffffe 	.word	0xdfbffffe

0800e0b0 <_fflush_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	690b      	ldr	r3, [r1, #16]
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	460c      	mov	r4, r1
 800e0b8:	b913      	cbnz	r3, 800e0c0 <_fflush_r+0x10>
 800e0ba:	2500      	movs	r5, #0
 800e0bc:	4628      	mov	r0, r5
 800e0be:	bd38      	pop	{r3, r4, r5, pc}
 800e0c0:	b118      	cbz	r0, 800e0ca <_fflush_r+0x1a>
 800e0c2:	6a03      	ldr	r3, [r0, #32]
 800e0c4:	b90b      	cbnz	r3, 800e0ca <_fflush_r+0x1a>
 800e0c6:	f7ff fa0b 	bl	800d4e0 <__sinit>
 800e0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d0f3      	beq.n	800e0ba <_fflush_r+0xa>
 800e0d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e0d4:	07d0      	lsls	r0, r2, #31
 800e0d6:	d404      	bmi.n	800e0e2 <_fflush_r+0x32>
 800e0d8:	0599      	lsls	r1, r3, #22
 800e0da:	d402      	bmi.n	800e0e2 <_fflush_r+0x32>
 800e0dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0de:	f7ff fb64 	bl	800d7aa <__retarget_lock_acquire_recursive>
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	4621      	mov	r1, r4
 800e0e6:	f7ff ff5f 	bl	800dfa8 <__sflush_r>
 800e0ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e0ec:	07da      	lsls	r2, r3, #31
 800e0ee:	4605      	mov	r5, r0
 800e0f0:	d4e4      	bmi.n	800e0bc <_fflush_r+0xc>
 800e0f2:	89a3      	ldrh	r3, [r4, #12]
 800e0f4:	059b      	lsls	r3, r3, #22
 800e0f6:	d4e1      	bmi.n	800e0bc <_fflush_r+0xc>
 800e0f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0fa:	f7ff fb57 	bl	800d7ac <__retarget_lock_release_recursive>
 800e0fe:	e7dd      	b.n	800e0bc <_fflush_r+0xc>

0800e100 <fiprintf>:
 800e100:	b40e      	push	{r1, r2, r3}
 800e102:	b503      	push	{r0, r1, lr}
 800e104:	4601      	mov	r1, r0
 800e106:	ab03      	add	r3, sp, #12
 800e108:	4805      	ldr	r0, [pc, #20]	@ (800e120 <fiprintf+0x20>)
 800e10a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e10e:	6800      	ldr	r0, [r0, #0]
 800e110:	9301      	str	r3, [sp, #4]
 800e112:	f7ff fca3 	bl	800da5c <_vfiprintf_r>
 800e116:	b002      	add	sp, #8
 800e118:	f85d eb04 	ldr.w	lr, [sp], #4
 800e11c:	b003      	add	sp, #12
 800e11e:	4770      	bx	lr
 800e120:	2000003c 	.word	0x2000003c

0800e124 <__swbuf_r>:
 800e124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e126:	460e      	mov	r6, r1
 800e128:	4614      	mov	r4, r2
 800e12a:	4605      	mov	r5, r0
 800e12c:	b118      	cbz	r0, 800e136 <__swbuf_r+0x12>
 800e12e:	6a03      	ldr	r3, [r0, #32]
 800e130:	b90b      	cbnz	r3, 800e136 <__swbuf_r+0x12>
 800e132:	f7ff f9d5 	bl	800d4e0 <__sinit>
 800e136:	69a3      	ldr	r3, [r4, #24]
 800e138:	60a3      	str	r3, [r4, #8]
 800e13a:	89a3      	ldrh	r3, [r4, #12]
 800e13c:	071a      	lsls	r2, r3, #28
 800e13e:	d501      	bpl.n	800e144 <__swbuf_r+0x20>
 800e140:	6923      	ldr	r3, [r4, #16]
 800e142:	b943      	cbnz	r3, 800e156 <__swbuf_r+0x32>
 800e144:	4621      	mov	r1, r4
 800e146:	4628      	mov	r0, r5
 800e148:	f000 f82a 	bl	800e1a0 <__swsetup_r>
 800e14c:	b118      	cbz	r0, 800e156 <__swbuf_r+0x32>
 800e14e:	f04f 37ff 	mov.w	r7, #4294967295
 800e152:	4638      	mov	r0, r7
 800e154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e156:	6823      	ldr	r3, [r4, #0]
 800e158:	6922      	ldr	r2, [r4, #16]
 800e15a:	1a98      	subs	r0, r3, r2
 800e15c:	6963      	ldr	r3, [r4, #20]
 800e15e:	b2f6      	uxtb	r6, r6
 800e160:	4283      	cmp	r3, r0
 800e162:	4637      	mov	r7, r6
 800e164:	dc05      	bgt.n	800e172 <__swbuf_r+0x4e>
 800e166:	4621      	mov	r1, r4
 800e168:	4628      	mov	r0, r5
 800e16a:	f7ff ffa1 	bl	800e0b0 <_fflush_r>
 800e16e:	2800      	cmp	r0, #0
 800e170:	d1ed      	bne.n	800e14e <__swbuf_r+0x2a>
 800e172:	68a3      	ldr	r3, [r4, #8]
 800e174:	3b01      	subs	r3, #1
 800e176:	60a3      	str	r3, [r4, #8]
 800e178:	6823      	ldr	r3, [r4, #0]
 800e17a:	1c5a      	adds	r2, r3, #1
 800e17c:	6022      	str	r2, [r4, #0]
 800e17e:	701e      	strb	r6, [r3, #0]
 800e180:	6962      	ldr	r2, [r4, #20]
 800e182:	1c43      	adds	r3, r0, #1
 800e184:	429a      	cmp	r2, r3
 800e186:	d004      	beq.n	800e192 <__swbuf_r+0x6e>
 800e188:	89a3      	ldrh	r3, [r4, #12]
 800e18a:	07db      	lsls	r3, r3, #31
 800e18c:	d5e1      	bpl.n	800e152 <__swbuf_r+0x2e>
 800e18e:	2e0a      	cmp	r6, #10
 800e190:	d1df      	bne.n	800e152 <__swbuf_r+0x2e>
 800e192:	4621      	mov	r1, r4
 800e194:	4628      	mov	r0, r5
 800e196:	f7ff ff8b 	bl	800e0b0 <_fflush_r>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d0d9      	beq.n	800e152 <__swbuf_r+0x2e>
 800e19e:	e7d6      	b.n	800e14e <__swbuf_r+0x2a>

0800e1a0 <__swsetup_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	4b29      	ldr	r3, [pc, #164]	@ (800e248 <__swsetup_r+0xa8>)
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	6818      	ldr	r0, [r3, #0]
 800e1a8:	460c      	mov	r4, r1
 800e1aa:	b118      	cbz	r0, 800e1b4 <__swsetup_r+0x14>
 800e1ac:	6a03      	ldr	r3, [r0, #32]
 800e1ae:	b90b      	cbnz	r3, 800e1b4 <__swsetup_r+0x14>
 800e1b0:	f7ff f996 	bl	800d4e0 <__sinit>
 800e1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1b8:	0719      	lsls	r1, r3, #28
 800e1ba:	d422      	bmi.n	800e202 <__swsetup_r+0x62>
 800e1bc:	06da      	lsls	r2, r3, #27
 800e1be:	d407      	bmi.n	800e1d0 <__swsetup_r+0x30>
 800e1c0:	2209      	movs	r2, #9
 800e1c2:	602a      	str	r2, [r5, #0]
 800e1c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1c8:	81a3      	strh	r3, [r4, #12]
 800e1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ce:	e033      	b.n	800e238 <__swsetup_r+0x98>
 800e1d0:	0758      	lsls	r0, r3, #29
 800e1d2:	d512      	bpl.n	800e1fa <__swsetup_r+0x5a>
 800e1d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e1d6:	b141      	cbz	r1, 800e1ea <__swsetup_r+0x4a>
 800e1d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e1dc:	4299      	cmp	r1, r3
 800e1de:	d002      	beq.n	800e1e6 <__swsetup_r+0x46>
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	f7ff fb11 	bl	800d808 <_free_r>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e1ea:	89a3      	ldrh	r3, [r4, #12]
 800e1ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e1f0:	81a3      	strh	r3, [r4, #12]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	6063      	str	r3, [r4, #4]
 800e1f6:	6923      	ldr	r3, [r4, #16]
 800e1f8:	6023      	str	r3, [r4, #0]
 800e1fa:	89a3      	ldrh	r3, [r4, #12]
 800e1fc:	f043 0308 	orr.w	r3, r3, #8
 800e200:	81a3      	strh	r3, [r4, #12]
 800e202:	6923      	ldr	r3, [r4, #16]
 800e204:	b94b      	cbnz	r3, 800e21a <__swsetup_r+0x7a>
 800e206:	89a3      	ldrh	r3, [r4, #12]
 800e208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e20c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e210:	d003      	beq.n	800e21a <__swsetup_r+0x7a>
 800e212:	4621      	mov	r1, r4
 800e214:	4628      	mov	r0, r5
 800e216:	f000 f856 	bl	800e2c6 <__smakebuf_r>
 800e21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e21e:	f013 0201 	ands.w	r2, r3, #1
 800e222:	d00a      	beq.n	800e23a <__swsetup_r+0x9a>
 800e224:	2200      	movs	r2, #0
 800e226:	60a2      	str	r2, [r4, #8]
 800e228:	6962      	ldr	r2, [r4, #20]
 800e22a:	4252      	negs	r2, r2
 800e22c:	61a2      	str	r2, [r4, #24]
 800e22e:	6922      	ldr	r2, [r4, #16]
 800e230:	b942      	cbnz	r2, 800e244 <__swsetup_r+0xa4>
 800e232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e236:	d1c5      	bne.n	800e1c4 <__swsetup_r+0x24>
 800e238:	bd38      	pop	{r3, r4, r5, pc}
 800e23a:	0799      	lsls	r1, r3, #30
 800e23c:	bf58      	it	pl
 800e23e:	6962      	ldrpl	r2, [r4, #20]
 800e240:	60a2      	str	r2, [r4, #8]
 800e242:	e7f4      	b.n	800e22e <__swsetup_r+0x8e>
 800e244:	2000      	movs	r0, #0
 800e246:	e7f7      	b.n	800e238 <__swsetup_r+0x98>
 800e248:	2000003c 	.word	0x2000003c

0800e24c <_sbrk_r>:
 800e24c:	b538      	push	{r3, r4, r5, lr}
 800e24e:	4d06      	ldr	r5, [pc, #24]	@ (800e268 <_sbrk_r+0x1c>)
 800e250:	2300      	movs	r3, #0
 800e252:	4604      	mov	r4, r0
 800e254:	4608      	mov	r0, r1
 800e256:	602b      	str	r3, [r5, #0]
 800e258:	f7f2 fea2 	bl	8000fa0 <_sbrk>
 800e25c:	1c43      	adds	r3, r0, #1
 800e25e:	d102      	bne.n	800e266 <_sbrk_r+0x1a>
 800e260:	682b      	ldr	r3, [r5, #0]
 800e262:	b103      	cbz	r3, 800e266 <_sbrk_r+0x1a>
 800e264:	6023      	str	r3, [r4, #0]
 800e266:	bd38      	pop	{r3, r4, r5, pc}
 800e268:	200377f0 	.word	0x200377f0

0800e26c <abort>:
 800e26c:	b508      	push	{r3, lr}
 800e26e:	2006      	movs	r0, #6
 800e270:	f000 f88e 	bl	800e390 <raise>
 800e274:	2001      	movs	r0, #1
 800e276:	f7f2 fe65 	bl	8000f44 <_exit>

0800e27a <__swhatbuf_r>:
 800e27a:	b570      	push	{r4, r5, r6, lr}
 800e27c:	460c      	mov	r4, r1
 800e27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e282:	2900      	cmp	r1, #0
 800e284:	b096      	sub	sp, #88	@ 0x58
 800e286:	4615      	mov	r5, r2
 800e288:	461e      	mov	r6, r3
 800e28a:	da0d      	bge.n	800e2a8 <__swhatbuf_r+0x2e>
 800e28c:	89a3      	ldrh	r3, [r4, #12]
 800e28e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e292:	f04f 0100 	mov.w	r1, #0
 800e296:	bf14      	ite	ne
 800e298:	2340      	movne	r3, #64	@ 0x40
 800e29a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e29e:	2000      	movs	r0, #0
 800e2a0:	6031      	str	r1, [r6, #0]
 800e2a2:	602b      	str	r3, [r5, #0]
 800e2a4:	b016      	add	sp, #88	@ 0x58
 800e2a6:	bd70      	pop	{r4, r5, r6, pc}
 800e2a8:	466a      	mov	r2, sp
 800e2aa:	f000 f879 	bl	800e3a0 <_fstat_r>
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	dbec      	blt.n	800e28c <__swhatbuf_r+0x12>
 800e2b2:	9901      	ldr	r1, [sp, #4]
 800e2b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e2b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e2bc:	4259      	negs	r1, r3
 800e2be:	4159      	adcs	r1, r3
 800e2c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2c4:	e7eb      	b.n	800e29e <__swhatbuf_r+0x24>

0800e2c6 <__smakebuf_r>:
 800e2c6:	898b      	ldrh	r3, [r1, #12]
 800e2c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2ca:	079d      	lsls	r5, r3, #30
 800e2cc:	4606      	mov	r6, r0
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	d507      	bpl.n	800e2e2 <__smakebuf_r+0x1c>
 800e2d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e2d6:	6023      	str	r3, [r4, #0]
 800e2d8:	6123      	str	r3, [r4, #16]
 800e2da:	2301      	movs	r3, #1
 800e2dc:	6163      	str	r3, [r4, #20]
 800e2de:	b003      	add	sp, #12
 800e2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2e2:	ab01      	add	r3, sp, #4
 800e2e4:	466a      	mov	r2, sp
 800e2e6:	f7ff ffc8 	bl	800e27a <__swhatbuf_r>
 800e2ea:	9f00      	ldr	r7, [sp, #0]
 800e2ec:	4605      	mov	r5, r0
 800e2ee:	4639      	mov	r1, r7
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	f7ff fafd 	bl	800d8f0 <_malloc_r>
 800e2f6:	b948      	cbnz	r0, 800e30c <__smakebuf_r+0x46>
 800e2f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2fc:	059a      	lsls	r2, r3, #22
 800e2fe:	d4ee      	bmi.n	800e2de <__smakebuf_r+0x18>
 800e300:	f023 0303 	bic.w	r3, r3, #3
 800e304:	f043 0302 	orr.w	r3, r3, #2
 800e308:	81a3      	strh	r3, [r4, #12]
 800e30a:	e7e2      	b.n	800e2d2 <__smakebuf_r+0xc>
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	6020      	str	r0, [r4, #0]
 800e310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e314:	81a3      	strh	r3, [r4, #12]
 800e316:	9b01      	ldr	r3, [sp, #4]
 800e318:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e31c:	b15b      	cbz	r3, 800e336 <__smakebuf_r+0x70>
 800e31e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e322:	4630      	mov	r0, r6
 800e324:	f000 f84e 	bl	800e3c4 <_isatty_r>
 800e328:	b128      	cbz	r0, 800e336 <__smakebuf_r+0x70>
 800e32a:	89a3      	ldrh	r3, [r4, #12]
 800e32c:	f023 0303 	bic.w	r3, r3, #3
 800e330:	f043 0301 	orr.w	r3, r3, #1
 800e334:	81a3      	strh	r3, [r4, #12]
 800e336:	89a3      	ldrh	r3, [r4, #12]
 800e338:	431d      	orrs	r5, r3
 800e33a:	81a5      	strh	r5, [r4, #12]
 800e33c:	e7cf      	b.n	800e2de <__smakebuf_r+0x18>

0800e33e <_raise_r>:
 800e33e:	291f      	cmp	r1, #31
 800e340:	b538      	push	{r3, r4, r5, lr}
 800e342:	4605      	mov	r5, r0
 800e344:	460c      	mov	r4, r1
 800e346:	d904      	bls.n	800e352 <_raise_r+0x14>
 800e348:	2316      	movs	r3, #22
 800e34a:	6003      	str	r3, [r0, #0]
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	bd38      	pop	{r3, r4, r5, pc}
 800e352:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e354:	b112      	cbz	r2, 800e35c <_raise_r+0x1e>
 800e356:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e35a:	b94b      	cbnz	r3, 800e370 <_raise_r+0x32>
 800e35c:	4628      	mov	r0, r5
 800e35e:	f000 f853 	bl	800e408 <_getpid_r>
 800e362:	4622      	mov	r2, r4
 800e364:	4601      	mov	r1, r0
 800e366:	4628      	mov	r0, r5
 800e368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e36c:	f000 b83a 	b.w	800e3e4 <_kill_r>
 800e370:	2b01      	cmp	r3, #1
 800e372:	d00a      	beq.n	800e38a <_raise_r+0x4c>
 800e374:	1c59      	adds	r1, r3, #1
 800e376:	d103      	bne.n	800e380 <_raise_r+0x42>
 800e378:	2316      	movs	r3, #22
 800e37a:	6003      	str	r3, [r0, #0]
 800e37c:	2001      	movs	r0, #1
 800e37e:	e7e7      	b.n	800e350 <_raise_r+0x12>
 800e380:	2100      	movs	r1, #0
 800e382:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e386:	4620      	mov	r0, r4
 800e388:	4798      	blx	r3
 800e38a:	2000      	movs	r0, #0
 800e38c:	e7e0      	b.n	800e350 <_raise_r+0x12>
	...

0800e390 <raise>:
 800e390:	4b02      	ldr	r3, [pc, #8]	@ (800e39c <raise+0xc>)
 800e392:	4601      	mov	r1, r0
 800e394:	6818      	ldr	r0, [r3, #0]
 800e396:	f7ff bfd2 	b.w	800e33e <_raise_r>
 800e39a:	bf00      	nop
 800e39c:	2000003c 	.word	0x2000003c

0800e3a0 <_fstat_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	4d07      	ldr	r5, [pc, #28]	@ (800e3c0 <_fstat_r+0x20>)
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	4608      	mov	r0, r1
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	602b      	str	r3, [r5, #0]
 800e3ae:	f7f2 fdee 	bl	8000f8e <_fstat>
 800e3b2:	1c43      	adds	r3, r0, #1
 800e3b4:	d102      	bne.n	800e3bc <_fstat_r+0x1c>
 800e3b6:	682b      	ldr	r3, [r5, #0]
 800e3b8:	b103      	cbz	r3, 800e3bc <_fstat_r+0x1c>
 800e3ba:	6023      	str	r3, [r4, #0]
 800e3bc:	bd38      	pop	{r3, r4, r5, pc}
 800e3be:	bf00      	nop
 800e3c0:	200377f0 	.word	0x200377f0

0800e3c4 <_isatty_r>:
 800e3c4:	b538      	push	{r3, r4, r5, lr}
 800e3c6:	4d06      	ldr	r5, [pc, #24]	@ (800e3e0 <_isatty_r+0x1c>)
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	4608      	mov	r0, r1
 800e3ce:	602b      	str	r3, [r5, #0]
 800e3d0:	f7f2 fde2 	bl	8000f98 <_isatty>
 800e3d4:	1c43      	adds	r3, r0, #1
 800e3d6:	d102      	bne.n	800e3de <_isatty_r+0x1a>
 800e3d8:	682b      	ldr	r3, [r5, #0]
 800e3da:	b103      	cbz	r3, 800e3de <_isatty_r+0x1a>
 800e3dc:	6023      	str	r3, [r4, #0]
 800e3de:	bd38      	pop	{r3, r4, r5, pc}
 800e3e0:	200377f0 	.word	0x200377f0

0800e3e4 <_kill_r>:
 800e3e4:	b538      	push	{r3, r4, r5, lr}
 800e3e6:	4d07      	ldr	r5, [pc, #28]	@ (800e404 <_kill_r+0x20>)
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	4608      	mov	r0, r1
 800e3ee:	4611      	mov	r1, r2
 800e3f0:	602b      	str	r3, [r5, #0]
 800e3f2:	f7f2 fd9f 	bl	8000f34 <_kill>
 800e3f6:	1c43      	adds	r3, r0, #1
 800e3f8:	d102      	bne.n	800e400 <_kill_r+0x1c>
 800e3fa:	682b      	ldr	r3, [r5, #0]
 800e3fc:	b103      	cbz	r3, 800e400 <_kill_r+0x1c>
 800e3fe:	6023      	str	r3, [r4, #0]
 800e400:	bd38      	pop	{r3, r4, r5, pc}
 800e402:	bf00      	nop
 800e404:	200377f0 	.word	0x200377f0

0800e408 <_getpid_r>:
 800e408:	f7f2 bd92 	b.w	8000f30 <_getpid>

0800e40c <_init>:
 800e40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40e:	bf00      	nop
 800e410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e412:	bc08      	pop	{r3}
 800e414:	469e      	mov	lr, r3
 800e416:	4770      	bx	lr

0800e418 <_fini>:
 800e418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41a:	bf00      	nop
 800e41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e41e:	bc08      	pop	{r3}
 800e420:	469e      	mov	lr, r3
 800e422:	4770      	bx	lr
