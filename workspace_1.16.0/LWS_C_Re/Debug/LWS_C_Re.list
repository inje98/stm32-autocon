
LWS_C_Re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e38  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08012030  08012030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012050  08012050  000140dc  2**0
                  CONTENTS
  4 .ARM          00000008  08012050  08012050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012058  08012058  000140dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012058  08012058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801205c  0801205c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08012060  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000185c  200000e0  0801213c  000140e0  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  2000193c  0801213c  0001493c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000140dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f548  00000000  00000000  0001410a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058e6  00000000  00000000  00043652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  00048f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001602  00000000  00000000  0004aba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fe42  00000000  00000000  0004c1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b5a2  00000000  00000000  0007bfe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120b21  00000000  00000000  000a7586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c80a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007330  00000000  00000000  001c80ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001cf41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000e0 	.word	0x200000e0
 8000214:	00000000 	.word	0x00000000
 8000218:	08012018 	.word	0x08012018

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000e4 	.word	0x200000e4
 8000234:	08012018 	.word	0x08012018

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <FUN_ADC_Init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_ADC_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	//ADC Parameter Reset
	FUN_ADC_Parameter_Reset();
 800052c:	f000 f826 	bl	800057c <FUN_ADC_Parameter_Reset>
	//시작시 ADC채널 1번으로 초기화
	ADC1_SEL0_M_LOW();
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000536:	4810      	ldr	r0, [pc, #64]	@ (8000578 <FUN_ADC_Init+0x50>)
 8000538:	f00c fcc2 	bl	800cec0 <HAL_GPIO_WritePin>
	ADC1_SEL1_M_LOW();
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000542:	480d      	ldr	r0, [pc, #52]	@ (8000578 <FUN_ADC_Init+0x50>)
 8000544:	f00c fcbc 	bl	800cec0 <HAL_GPIO_WritePin>
	ADC1_SEL2_M_LOW();
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800054e:	480a      	ldr	r0, [pc, #40]	@ (8000578 <FUN_ADC_Init+0x50>)
 8000550:	f00c fcb6 	bl	800cec0 <HAL_GPIO_WritePin>
	ADC2_SEL0_M_LOW();
 8000554:	2200      	movs	r2, #0
 8000556:	2140      	movs	r1, #64	@ 0x40
 8000558:	4807      	ldr	r0, [pc, #28]	@ (8000578 <FUN_ADC_Init+0x50>)
 800055a:	f00c fcb1 	bl	800cec0 <HAL_GPIO_WritePin>
	ADC2_SEL1_M_LOW();
 800055e:	2200      	movs	r2, #0
 8000560:	2180      	movs	r1, #128	@ 0x80
 8000562:	4805      	ldr	r0, [pc, #20]	@ (8000578 <FUN_ADC_Init+0x50>)
 8000564:	f00c fcac 	bl	800cec0 <HAL_GPIO_WritePin>
	ADC2_SEL2_M_LOW();
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800056e:	4802      	ldr	r0, [pc, #8]	@ (8000578 <FUN_ADC_Init+0x50>)
 8000570:	f00c fca6 	bl	800cec0 <HAL_GPIO_WritePin>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021c00 	.word	0x40021c00

0800057c <FUN_ADC_Parameter_Reset>:
/****************************************************************************/
/*	Overview	:	ADC Parameter Reset										*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_ADC_Parameter_Reset(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
	Adc.ADC_Channel = 0;
 8000582:	4b1a      	ldr	r3, [pc, #104]	@ (80005ec <FUN_ADC_Parameter_Reset+0x70>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
	Adc.Mux_Flag = 0;
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <FUN_ADC_Parameter_Reset+0x70>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	Adc.Adc1_ChannelSelect_Error_flag = 0;
 8000590:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <FUN_ADC_Parameter_Reset+0x70>)
 8000592:	2200      	movs	r2, #0
 8000594:	705a      	strb	r2, [r3, #1]
	Adc.Adc2_ChannelSelect_Error_flag = 0;
 8000596:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <FUN_ADC_Parameter_Reset+0x70>)
 8000598:	2200      	movs	r2, #0
 800059a:	709a      	strb	r2, [r3, #2]
	for(uint8_t i = 0; i < 8; i++)
 800059c:	2300      	movs	r3, #0
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e01a      	b.n	80005d8 <FUN_ADC_Parameter_Reset+0x5c>
	{
		Adc.Adc_Voltage_CntBuffer[i] = 0;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4a11      	ldr	r2, [pc, #68]	@ (80005ec <FUN_ADC_Parameter_Reset+0x70>)
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	4413      	add	r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	809a      	strh	r2, [r3, #4]
		Adc.Adc_Voltage_SumBuffer[i] = 0;
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4a0e      	ldr	r2, [pc, #56]	@ (80005ec <FUN_ADC_Parameter_Reset+0x70>)
 80005b2:	3304      	adds	r3, #4
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	3304      	adds	r3, #4
 80005ba:	f04f 0200 	mov.w	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
		Adc.Adc_Voltage_AvgBuffer[i] = 0;
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4a0a      	ldr	r2, [pc, #40]	@ (80005ec <FUN_ADC_Parameter_Reset+0x70>)
 80005c4:	330c      	adds	r3, #12
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	3304      	adds	r3, #4
 80005cc:	f04f 0200 	mov.w	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	3301      	adds	r3, #1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	d9e1      	bls.n	80005a2 <FUN_ADC_Parameter_Reset+0x26>
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	200000fc 	.word	0x200000fc

080005f0 <FUN_ADC_Routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_ADC_Routine(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	// 변환된 Voltage값 저장용
	float ADC_Dummy_1 = 0;
 80005f6:	f04f 0300 	mov.w	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]

	if(Adc.Mux_Flag == 0)
 80005fc:	4b80      	ldr	r3, [pc, #512]	@ (8000800 <FUN_ADC_Routine+0x210>)
 80005fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000602:	2b00      	cmp	r3, #0
 8000604:	d143      	bne.n	800068e <FUN_ADC_Routine+0x9e>
	{
		switch(Adc.ADC_Channel)
 8000606:	4b7e      	ldr	r3, [pc, #504]	@ (8000800 <FUN_ADC_Routine+0x210>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b07      	cmp	r3, #7
 800060c:	d83a      	bhi.n	8000684 <FUN_ADC_Routine+0x94>
 800060e:	a201      	add	r2, pc, #4	@ (adr r2, 8000614 <FUN_ADC_Routine+0x24>)
 8000610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000614:	08000635 	.word	0x08000635
 8000618:	0800063f 	.word	0x0800063f
 800061c:	08000649 	.word	0x08000649
 8000620:	08000653 	.word	0x08000653
 8000624:	0800065d 	.word	0x0800065d
 8000628:	08000667 	.word	0x08000667
 800062c:	08000671 	.word	0x08000671
 8000630:	0800067b 	.word	0x0800067b
		{
			case ADC_CH_SELECT_1:
				FUN_ADC_ChannelSelect(ADC1_ON,ADC_CH_SELECT_1);
 8000634:	2100      	movs	r1, #0
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f8e6 	bl	8000808 <FUN_ADC_ChannelSelect>
				break;
 800063c:	e022      	b.n	8000684 <FUN_ADC_Routine+0x94>
			case ADC_CH_SELECT_2:
				FUN_ADC_ChannelSelect(ADC1_ON,ADC_CH_SELECT_2);
 800063e:	2101      	movs	r1, #1
 8000640:	2000      	movs	r0, #0
 8000642:	f000 f8e1 	bl	8000808 <FUN_ADC_ChannelSelect>
				break;
 8000646:	e01d      	b.n	8000684 <FUN_ADC_Routine+0x94>
			case ADC_CH_SELECT_3:
				FUN_ADC_ChannelSelect(ADC1_ON,ADC_CH_SELECT_3);
 8000648:	2102      	movs	r1, #2
 800064a:	2000      	movs	r0, #0
 800064c:	f000 f8dc 	bl	8000808 <FUN_ADC_ChannelSelect>
				break;
 8000650:	e018      	b.n	8000684 <FUN_ADC_Routine+0x94>
			case ADC_CH_SELECT_4:
				FUN_ADC_ChannelSelect(ADC1_ON,ADC_CH_SELECT_4);
 8000652:	2103      	movs	r1, #3
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f8d7 	bl	8000808 <FUN_ADC_ChannelSelect>
				break;
 800065a:	e013      	b.n	8000684 <FUN_ADC_Routine+0x94>
			case ADC_CH_SELECT_5:
				FUN_ADC_ChannelSelect(ADC2_ON,ADC_CH_SELECT_5);
 800065c:	2104      	movs	r1, #4
 800065e:	2001      	movs	r0, #1
 8000660:	f000 f8d2 	bl	8000808 <FUN_ADC_ChannelSelect>
				break;
 8000664:	e00e      	b.n	8000684 <FUN_ADC_Routine+0x94>
			case ADC_CH_SELECT_6:
				FUN_ADC_ChannelSelect(ADC2_ON,ADC_CH_SELECT_6);
 8000666:	2105      	movs	r1, #5
 8000668:	2001      	movs	r0, #1
 800066a:	f000 f8cd 	bl	8000808 <FUN_ADC_ChannelSelect>
				break;
 800066e:	e009      	b.n	8000684 <FUN_ADC_Routine+0x94>
			case ADC_CH_SELECT_7:
				FUN_ADC_ChannelSelect(ADC2_ON,ADC_CH_SELECT_7);
 8000670:	2106      	movs	r1, #6
 8000672:	2001      	movs	r0, #1
 8000674:	f000 f8c8 	bl	8000808 <FUN_ADC_ChannelSelect>
				break;
 8000678:	e004      	b.n	8000684 <FUN_ADC_Routine+0x94>
			case ADC_CH_SELECT_8:
				FUN_ADC_ChannelSelect(ADC2_ON,ADC_CH_SELECT_8);
 800067a:	2107      	movs	r1, #7
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f8c3 	bl	8000808 <FUN_ADC_ChannelSelect>
				break;
 8000682:	bf00      	nop
		}
		Adc.Mux_Flag = 1;
 8000684:	4b5e      	ldr	r3, [pc, #376]	@ (8000800 <FUN_ADC_Routine+0x210>)
 8000686:	2201      	movs	r2, #1
 8000688:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

		Adc.Mux_Flag = 0;
	}


}
 800068c:	e0b3      	b.n	80007f6 <FUN_ADC_Routine+0x206>
	else if(Adc.Mux_Flag == 1)
 800068e:	4b5c      	ldr	r3, [pc, #368]	@ (8000800 <FUN_ADC_Routine+0x210>)
 8000690:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000694:	2b01      	cmp	r3, #1
 8000696:	f040 80ae 	bne.w	80007f6 <FUN_ADC_Routine+0x206>
		switch(Adc.ADC_Channel)
 800069a:	4b59      	ldr	r3, [pc, #356]	@ (8000800 <FUN_ADC_Routine+0x210>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b07      	cmp	r3, #7
 80006a0:	f200 8094 	bhi.w	80007cc <FUN_ADC_Routine+0x1dc>
 80006a4:	a201      	add	r2, pc, #4	@ (adr r2, 80006ac <FUN_ADC_Routine+0xbc>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	080006cd 	.word	0x080006cd
 80006b0:	080006ed 	.word	0x080006ed
 80006b4:	0800070d 	.word	0x0800070d
 80006b8:	0800072d 	.word	0x0800072d
 80006bc:	0800074d 	.word	0x0800074d
 80006c0:	0800076d 	.word	0x0800076d
 80006c4:	0800078d 	.word	0x0800078d
 80006c8:	080007ad 	.word	0x080007ad
				ADC_Dummy_1 = FUN_ADC_VoltageConvert(ADC1_ON, ADC_CH_SELECT_1);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 f966 	bl	80009a0 <FUN_ADC_VoltageConvert>
 80006d4:	ed87 0a01 	vstr	s0, [r7, #4]
				FUN_ADC_Average_Calculator(ADC_Dummy_1, ADC_CH_SELECT_1);
 80006d8:	2000      	movs	r0, #0
 80006da:	ed97 0a01 	vldr	s0, [r7, #4]
 80006de:	f000 faf9 	bl	8000cd4 <FUN_ADC_Average_Calculator>
				Control.Float_Data.AI_ADC_In1_Ch1_Volt = Adc.Adc_Voltage_AvgBuffer[ADC_CH_SELECT_1];
 80006e2:	4b47      	ldr	r3, [pc, #284]	@ (8000800 <FUN_ADC_Routine+0x210>)
 80006e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006e6:	4a47      	ldr	r2, [pc, #284]	@ (8000804 <FUN_ADC_Routine+0x214>)
 80006e8:	6213      	str	r3, [r2, #32]
				break;
 80006ea:	e073      	b.n	80007d4 <FUN_ADC_Routine+0x1e4>
				ADC_Dummy_1 = FUN_ADC_VoltageConvert(ADC1_ON, ADC_CH_SELECT_2);
 80006ec:	2101      	movs	r1, #1
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f956 	bl	80009a0 <FUN_ADC_VoltageConvert>
 80006f4:	ed87 0a01 	vstr	s0, [r7, #4]
				FUN_ADC_Average_Calculator(ADC_Dummy_1, ADC_CH_SELECT_2);
 80006f8:	2001      	movs	r0, #1
 80006fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80006fe:	f000 fae9 	bl	8000cd4 <FUN_ADC_Average_Calculator>
				Control.Float_Data.AI_ADC_In1_Ch2_Volt = Adc.Adc_Voltage_AvgBuffer[ADC_CH_SELECT_2];
 8000702:	4b3f      	ldr	r3, [pc, #252]	@ (8000800 <FUN_ADC_Routine+0x210>)
 8000704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000706:	4a3f      	ldr	r2, [pc, #252]	@ (8000804 <FUN_ADC_Routine+0x214>)
 8000708:	6253      	str	r3, [r2, #36]	@ 0x24
				break;
 800070a:	e063      	b.n	80007d4 <FUN_ADC_Routine+0x1e4>
				ADC_Dummy_1 = FUN_ADC_VoltageConvert(ADC1_ON, ADC_CH_SELECT_3);
 800070c:	2102      	movs	r1, #2
 800070e:	2000      	movs	r0, #0
 8000710:	f000 f946 	bl	80009a0 <FUN_ADC_VoltageConvert>
 8000714:	ed87 0a01 	vstr	s0, [r7, #4]
				FUN_ADC_Average_Calculator(ADC_Dummy_1, ADC_CH_SELECT_3);
 8000718:	2002      	movs	r0, #2
 800071a:	ed97 0a01 	vldr	s0, [r7, #4]
 800071e:	f000 fad9 	bl	8000cd4 <FUN_ADC_Average_Calculator>
				Control.Float_Data.AI_ADC_In1_Ch3_Volt = Adc.Adc_Voltage_AvgBuffer[ADC_CH_SELECT_3];
 8000722:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <FUN_ADC_Routine+0x210>)
 8000724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000726:	4a37      	ldr	r2, [pc, #220]	@ (8000804 <FUN_ADC_Routine+0x214>)
 8000728:	6293      	str	r3, [r2, #40]	@ 0x28
				break;
 800072a:	e053      	b.n	80007d4 <FUN_ADC_Routine+0x1e4>
				ADC_Dummy_1 = FUN_ADC_VoltageConvert(ADC1_ON, ADC_CH_SELECT_4);
 800072c:	2103      	movs	r1, #3
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f936 	bl	80009a0 <FUN_ADC_VoltageConvert>
 8000734:	ed87 0a01 	vstr	s0, [r7, #4]
				FUN_ADC_Average_Calculator(ADC_Dummy_1, ADC_CH_SELECT_4);
 8000738:	2003      	movs	r0, #3
 800073a:	ed97 0a01 	vldr	s0, [r7, #4]
 800073e:	f000 fac9 	bl	8000cd4 <FUN_ADC_Average_Calculator>
				Control.Float_Data.AI_ADC_In1_Ch4_Volt = Adc.Adc_Voltage_AvgBuffer[ADC_CH_SELECT_4];
 8000742:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <FUN_ADC_Routine+0x210>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000746:	4a2f      	ldr	r2, [pc, #188]	@ (8000804 <FUN_ADC_Routine+0x214>)
 8000748:	62d3      	str	r3, [r2, #44]	@ 0x2c
				break;
 800074a:	e043      	b.n	80007d4 <FUN_ADC_Routine+0x1e4>
				ADC_Dummy_1 = FUN_ADC_VoltageConvert(ADC2_ON, ADC_CH_SELECT_5);
 800074c:	2104      	movs	r1, #4
 800074e:	2001      	movs	r0, #1
 8000750:	f000 f926 	bl	80009a0 <FUN_ADC_VoltageConvert>
 8000754:	ed87 0a01 	vstr	s0, [r7, #4]
				FUN_ADC_Average_Calculator(ADC_Dummy_1, ADC_CH_SELECT_5);
 8000758:	2004      	movs	r0, #4
 800075a:	ed97 0a01 	vldr	s0, [r7, #4]
 800075e:	f000 fab9 	bl	8000cd4 <FUN_ADC_Average_Calculator>
				Control.Float_Data.AI_ADC_In2_Ch1_Volt = Adc.Adc_Voltage_AvgBuffer[ADC_CH_SELECT_5];
 8000762:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <FUN_ADC_Routine+0x210>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000766:	4a27      	ldr	r2, [pc, #156]	@ (8000804 <FUN_ADC_Routine+0x214>)
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
				break;
 800076a:	e033      	b.n	80007d4 <FUN_ADC_Routine+0x1e4>
				ADC_Dummy_1 = FUN_ADC_VoltageConvert(ADC2_ON, ADC_CH_SELECT_6);
 800076c:	2105      	movs	r1, #5
 800076e:	2001      	movs	r0, #1
 8000770:	f000 f916 	bl	80009a0 <FUN_ADC_VoltageConvert>
 8000774:	ed87 0a01 	vstr	s0, [r7, #4]
				FUN_ADC_Average_Calculator(ADC_Dummy_1, ADC_CH_SELECT_6);
 8000778:	2005      	movs	r0, #5
 800077a:	ed97 0a01 	vldr	s0, [r7, #4]
 800077e:	f000 faa9 	bl	8000cd4 <FUN_ADC_Average_Calculator>
				Control.Float_Data.AI_ADC_In2_Ch2_Volt = Adc.Adc_Voltage_AvgBuffer[ADC_CH_SELECT_6];
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <FUN_ADC_Routine+0x210>)
 8000784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000786:	4a1f      	ldr	r2, [pc, #124]	@ (8000804 <FUN_ADC_Routine+0x214>)
 8000788:	6353      	str	r3, [r2, #52]	@ 0x34
				break;
 800078a:	e023      	b.n	80007d4 <FUN_ADC_Routine+0x1e4>
				ADC_Dummy_1 = FUN_ADC_VoltageConvert(ADC2_ON, ADC_CH_SELECT_7);
 800078c:	2106      	movs	r1, #6
 800078e:	2001      	movs	r0, #1
 8000790:	f000 f906 	bl	80009a0 <FUN_ADC_VoltageConvert>
 8000794:	ed87 0a01 	vstr	s0, [r7, #4]
				FUN_ADC_Average_Calculator(ADC_Dummy_1, ADC_CH_SELECT_7);
 8000798:	2006      	movs	r0, #6
 800079a:	ed97 0a01 	vldr	s0, [r7, #4]
 800079e:	f000 fa99 	bl	8000cd4 <FUN_ADC_Average_Calculator>
				Control.Float_Data.AI_ADC_In2_Ch3_Volt = Adc.Adc_Voltage_AvgBuffer[ADC_CH_SELECT_7];
 80007a2:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <FUN_ADC_Routine+0x210>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <FUN_ADC_Routine+0x214>)
 80007a8:	6393      	str	r3, [r2, #56]	@ 0x38
				break;
 80007aa:	e013      	b.n	80007d4 <FUN_ADC_Routine+0x1e4>
				ADC_Dummy_1 = FUN_ADC_VoltageConvert(ADC2_ON, ADC_CH_SELECT_8);
 80007ac:	2107      	movs	r1, #7
 80007ae:	2001      	movs	r0, #1
 80007b0:	f000 f8f6 	bl	80009a0 <FUN_ADC_VoltageConvert>
 80007b4:	ed87 0a01 	vstr	s0, [r7, #4]
				FUN_ADC_Average_Calculator(ADC_Dummy_1, ADC_CH_SELECT_8);
 80007b8:	2007      	movs	r0, #7
 80007ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80007be:	f000 fa89 	bl	8000cd4 <FUN_ADC_Average_Calculator>
				Control.Float_Data.AI_ADC_In2_Ch4_Volt = Adc.Adc_Voltage_AvgBuffer[ADC_CH_SELECT_8];
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <FUN_ADC_Routine+0x210>)
 80007c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80007c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000804 <FUN_ADC_Routine+0x214>)
 80007c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
				break;
 80007ca:	e003      	b.n	80007d4 <FUN_ADC_Routine+0x1e4>
				Adc.ADC_Channel = 0;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <FUN_ADC_Routine+0x210>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
				break;
 80007d2:	bf00      	nop
		Adc.ADC_Channel++;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <FUN_ADC_Routine+0x210>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <FUN_ADC_Routine+0x210>)
 80007de:	701a      	strb	r2, [r3, #0]
		if(Adc.ADC_Channel >= 8)
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <FUN_ADC_Routine+0x210>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b07      	cmp	r3, #7
 80007e6:	d902      	bls.n	80007ee <FUN_ADC_Routine+0x1fe>
			Adc.ADC_Channel = 0;
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <FUN_ADC_Routine+0x210>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
		Adc.Mux_Flag = 0;
 80007ee:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <FUN_ADC_Routine+0x210>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000fc 	.word	0x200000fc
 8000804:	20000154 	.word	0x20000154

08000808 <FUN_ADC_ChannelSelect>:
//	│	1	│	0	│	1	│	6	│  //
//	│	1	│	1	│	0	│	7	│  //
//	│	1	│	1	│	1	│	8	│  //
// ------------------------------------//
void FUN_ADC_ChannelSelect(uint8_t Adc_Select_cnt, uint8_t Adc_Channel_cnt)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	460a      	mov	r2, r1
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	71bb      	strb	r3, [r7, #6]
	if(Adc_Select_cnt == ADC1_ON)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d15e      	bne.n	80008dc <FUN_ADC_ChannelSelect+0xd4>
	{
		switch(Adc_Channel_cnt)
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	2b03      	cmp	r3, #3
 8000822:	d857      	bhi.n	80008d4 <FUN_ADC_ChannelSelect+0xcc>
 8000824:	a201      	add	r2, pc, #4	@ (adr r2, 800082c <FUN_ADC_ChannelSelect+0x24>)
 8000826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082a:	bf00      	nop
 800082c:	0800083d 	.word	0x0800083d
 8000830:	08000863 	.word	0x08000863
 8000834:	08000889 	.word	0x08000889
 8000838:	080008af 	.word	0x080008af
		{
			case 0:
				// 채널 1 Set, 동력공급장치 윈치구동: 비례제어밸브
				ADC1_SEL0_M_LOW();
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000842:	4855      	ldr	r0, [pc, #340]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000844:	f00c fb3c 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC1_SEL1_M_LOW();
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800084e:	4852      	ldr	r0, [pc, #328]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000850:	f00c fb36 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC1_SEL2_M_LOW();
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800085a:	484f      	ldr	r0, [pc, #316]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 800085c:	f00c fb30 	bl	800cec0 <HAL_GPIO_WritePin>
				break;
 8000860:	e096      	b.n	8000990 <FUN_ADC_ChannelSelect+0x188>
			case 1:
				// 채널 2 Set, 윈치조립체 비상구동 : 비례제어밸브
				ADC1_SEL0_M_HIGH();
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000868:	484b      	ldr	r0, [pc, #300]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 800086a:	f00c fb29 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC1_SEL1_M_LOW();
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000874:	4848      	ldr	r0, [pc, #288]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000876:	f00c fb23 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC1_SEL2_M_LOW();
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000880:	4845      	ldr	r0, [pc, #276]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000882:	f00c fb1d 	bl	800cec0 <HAL_GPIO_WritePin>
				break;
 8000886:	e083      	b.n	8000990 <FUN_ADC_ChannelSelect+0x188>
			case 2:
				// 채널 3 Set, 윈치조립체 권성구동 : 비례제어밸브
				ADC1_SEL0_M_LOW();
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088e:	4842      	ldr	r0, [pc, #264]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000890:	f00c fb16 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC1_SEL1_M_HIGH();
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800089a:	483f      	ldr	r0, [pc, #252]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 800089c:	f00c fb10 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC1_SEL2_M_LOW();
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008a6:	483c      	ldr	r0, [pc, #240]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 80008a8:	f00c fb0a 	bl	800cec0 <HAL_GPIO_WritePin>
				break;
 80008ac:	e070      	b.n	8000990 <FUN_ADC_ChannelSelect+0x188>
			case 3:
				// 채널 4 Set, Spare
				ADC1_SEL0_M_HIGH();
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008b4:	4838      	ldr	r0, [pc, #224]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 80008b6:	f00c fb03 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC1_SEL1_M_HIGH();
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008c0:	4835      	ldr	r0, [pc, #212]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 80008c2:	f00c fafd 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC1_SEL2_M_LOW();
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008cc:	4832      	ldr	r0, [pc, #200]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 80008ce:	f00c faf7 	bl	800cec0 <HAL_GPIO_WritePin>
				break;
 80008d2:	e05d      	b.n	8000990 <FUN_ADC_ChannelSelect+0x188>
			default :
				Adc.Adc1_ChannelSelect_Error_flag = 1;
 80008d4:	4b31      	ldr	r3, [pc, #196]	@ (800099c <FUN_ADC_ChannelSelect+0x194>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	705a      	strb	r2, [r3, #1]
				break;
 80008da:	e059      	b.n	8000990 <FUN_ADC_ChannelSelect+0x188>
		}
	}
	else if(Adc_Select_cnt == ADC2_ON)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d156      	bne.n	8000990 <FUN_ADC_ChannelSelect+0x188>
	{
		switch(Adc_Channel_cnt)
 80008e2:	79bb      	ldrb	r3, [r7, #6]
 80008e4:	3b04      	subs	r3, #4
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	d84e      	bhi.n	8000988 <FUN_ADC_ChannelSelect+0x180>
 80008ea:	a201      	add	r2, pc, #4	@ (adr r2, 80008f0 <FUN_ADC_ChannelSelect+0xe8>)
 80008ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f0:	08000901 	.word	0x08000901
 80008f4:	08000923 	.word	0x08000923
 80008f8:	08000945 	.word	0x08000945
 80008fc:	08000967 	.word	0x08000967
		{
			case 4:
				// 채널 4 Set, 투인양장치 서보실린더1 : 비례제어밸브
				ADC2_SEL0_M_LOW();
 8000900:	2200      	movs	r2, #0
 8000902:	2140      	movs	r1, #64	@ 0x40
 8000904:	4824      	ldr	r0, [pc, #144]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000906:	f00c fadb 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC2_SEL1_M_LOW();
 800090a:	2200      	movs	r2, #0
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	4822      	ldr	r0, [pc, #136]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000910:	f00c fad6 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC2_SEL2_M_LOW();
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800091a:	481f      	ldr	r0, [pc, #124]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 800091c:	f00c fad0 	bl	800cec0 <HAL_GPIO_WritePin>
				break;
 8000920:	e036      	b.n	8000990 <FUN_ADC_ChannelSelect+0x188>
			case 5:
				// 채널 5 Set, 투인양장치 서보실린더2 : 비례제어밸브
				ADC2_SEL0_M_HIGH();
 8000922:	2201      	movs	r2, #1
 8000924:	2140      	movs	r1, #64	@ 0x40
 8000926:	481c      	ldr	r0, [pc, #112]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000928:	f00c faca 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC2_SEL1_M_LOW();
 800092c:	2200      	movs	r2, #0
 800092e:	2180      	movs	r1, #128	@ 0x80
 8000930:	4819      	ldr	r0, [pc, #100]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000932:	f00c fac5 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC2_SEL2_M_LOW();
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800093c:	4816      	ldr	r0, [pc, #88]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 800093e:	f00c fabf 	bl	800cec0 <HAL_GPIO_WritePin>
				break;
 8000942:	e025      	b.n	8000990 <FUN_ADC_ChannelSelect+0x188>
			case 6:
				// 채널 6 Set, 투인양장치 메인실린더1 : 비례제어밸브
				ADC2_SEL0_M_LOW();
 8000944:	2200      	movs	r2, #0
 8000946:	2140      	movs	r1, #64	@ 0x40
 8000948:	4813      	ldr	r0, [pc, #76]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 800094a:	f00c fab9 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC2_SEL1_M_HIGH();
 800094e:	2201      	movs	r2, #1
 8000950:	2180      	movs	r1, #128	@ 0x80
 8000952:	4811      	ldr	r0, [pc, #68]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000954:	f00c fab4 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC2_SEL2_M_LOW();
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800095e:	480e      	ldr	r0, [pc, #56]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000960:	f00c faae 	bl	800cec0 <HAL_GPIO_WritePin>
				break;
 8000964:	e014      	b.n	8000990 <FUN_ADC_ChannelSelect+0x188>
			case 7:
				// 채널 7 Set, 투인양장치 메인실린더2 : 비례제어밸브
				ADC2_SEL0_M_HIGH();
 8000966:	2201      	movs	r2, #1
 8000968:	2140      	movs	r1, #64	@ 0x40
 800096a:	480b      	ldr	r0, [pc, #44]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 800096c:	f00c faa8 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC2_SEL1_M_HIGH();
 8000970:	2201      	movs	r2, #1
 8000972:	2180      	movs	r1, #128	@ 0x80
 8000974:	4808      	ldr	r0, [pc, #32]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000976:	f00c faa3 	bl	800cec0 <HAL_GPIO_WritePin>
				ADC2_SEL2_M_LOW();
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <FUN_ADC_ChannelSelect+0x190>)
 8000982:	f00c fa9d 	bl	800cec0 <HAL_GPIO_WritePin>
				break;
 8000986:	e003      	b.n	8000990 <FUN_ADC_ChannelSelect+0x188>
			default :
				Adc.Adc2_ChannelSelect_Error_flag = 1;
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <FUN_ADC_ChannelSelect+0x194>)
 800098a:	2201      	movs	r2, #1
 800098c:	709a      	strb	r2, [r3, #2]
				break;
 800098e:	bf00      	nop
		}
	}
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021c00 	.word	0x40021c00
 800099c:	200000fc 	.word	0x200000fc

080009a0 <FUN_ADC_VoltageConvert>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	float													*/
/****************************************************************************/
float FUN_ADC_VoltageConvert(uint8_t Adc_Select_cnt, uint8_t Adc_Channel_cnt)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	460a      	mov	r2, r1
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	4613      	mov	r3, r2
 80009ae:	71bb      	strb	r3, [r7, #6]
	uint32_t Adc_dummy_1 = 0;		// ADC 값 저장
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
	float Adc_dummy_2 = 0;			// 저장 값 변환
 80009b4:	f04f 0300 	mov.w	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
	float Adc_Voltage = 0;			// 변환된 전압의 조정값
 80009ba:	f04f 0300 	mov.w	r3, #0
 80009be:	613b      	str	r3, [r7, #16]

	if(Adc_Select_cnt == ADC1_ON)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10b      	bne.n	80009de <FUN_ADC_VoltageConvert+0x3e>
	{
		HAL_ADC_Start(&hadc1);
 80009c6:	48bd      	ldr	r0, [pc, #756]	@ (8000cbc <FUN_ADC_VoltageConvert+0x31c>)
 80009c8:	f00a feba 	bl	800b740 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 80009cc:	210a      	movs	r1, #10
 80009ce:	48bb      	ldr	r0, [pc, #748]	@ (8000cbc <FUN_ADC_VoltageConvert+0x31c>)
 80009d0:	f00a ffb8 	bl	800b944 <HAL_ADC_PollForConversion>
		Adc_dummy_1 = HAL_ADC_GetValue(&hadc1);
 80009d4:	48b9      	ldr	r0, [pc, #740]	@ (8000cbc <FUN_ADC_VoltageConvert+0x31c>)
 80009d6:	f00b f840 	bl	800ba5a <HAL_ADC_GetValue>
 80009da:	6178      	str	r0, [r7, #20]
 80009dc:	e00d      	b.n	80009fa <FUN_ADC_VoltageConvert+0x5a>
	}
	else if(Adc_Select_cnt == ADC2_ON)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d10a      	bne.n	80009fa <FUN_ADC_VoltageConvert+0x5a>
	{
		HAL_ADC_Start(&hadc2);
 80009e4:	48b6      	ldr	r0, [pc, #728]	@ (8000cc0 <FUN_ADC_VoltageConvert+0x320>)
 80009e6:	f00a feab 	bl	800b740 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 10);
 80009ea:	210a      	movs	r1, #10
 80009ec:	48b4      	ldr	r0, [pc, #720]	@ (8000cc0 <FUN_ADC_VoltageConvert+0x320>)
 80009ee:	f00a ffa9 	bl	800b944 <HAL_ADC_PollForConversion>
		Adc_dummy_1 = HAL_ADC_GetValue(&hadc2);
 80009f2:	48b3      	ldr	r0, [pc, #716]	@ (8000cc0 <FUN_ADC_VoltageConvert+0x320>)
 80009f4:	f00b f831 	bl	800ba5a <HAL_ADC_GetValue>
 80009f8:	6178      	str	r0, [r7, #20]
	}

	Adc_dummy_2 = (((float) Adc_dummy_1 / 4095) * (20)) - 10;	// -10 ~ 10V
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	ee07 3a90 	vmov	s15, r3
 8000a00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a04:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8000cc4 <FUN_ADC_VoltageConvert+0x324>
 8000a08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a0c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a14:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a1c:	edc7 7a03 	vstr	s15, [r7, #12]

	switch(Adc_Channel_cnt)
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	2b07      	cmp	r3, #7
 8000a24:	f200 8134 	bhi.w	8000c90 <FUN_ADC_VoltageConvert+0x2f0>
 8000a28:	a201      	add	r2, pc, #4	@ (adr r2, 8000a30 <FUN_ADC_VoltageConvert+0x90>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a51 	.word	0x08000a51
 8000a34:	08000a99 	.word	0x08000a99
 8000a38:	08000ae1 	.word	0x08000ae1
 8000a3c:	08000b29 	.word	0x08000b29
 8000a40:	08000b71 	.word	0x08000b71
 8000a44:	08000bb9 	.word	0x08000bb9
 8000a48:	08000c01 	.word	0x08000c01
 8000a4c:	08000c49 	.word	0x08000c49
	{
		case 0:
			Adc_dummy_2 = Adc_dummy_2 - Offset_ADC[0];
 8000a50:	4b9d      	ldr	r3, [pc, #628]	@ (8000cc8 <FUN_ADC_VoltageConvert+0x328>)
 8000a52:	edd3 7a00 	vldr	s15, [r3]
 8000a56:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a5e:	edc7 7a03 	vstr	s15, [r7, #12]
			if(Adc_dummy_2 > 0)
 8000a62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6e:	dd09      	ble.n	8000a84 <FUN_ADC_VoltageConvert+0xe4>
			{
				// 채널 1 Set, 동력공급장치 윈치구동: 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_P[0];
 8000a70:	4b96      	ldr	r3, [pc, #600]	@ (8000ccc <FUN_ADC_VoltageConvert+0x32c>)
 8000a72:	ed93 7a00 	vldr	s14, [r3]
 8000a76:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a7e:	edc7 7a04 	vstr	s15, [r7, #16]
			{
				// 채널 1 Set, 동력공급장치 윈치구동: 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[0];
			}

			break;
 8000a82:	e106      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[0];
 8000a84:	4b92      	ldr	r3, [pc, #584]	@ (8000cd0 <FUN_ADC_VoltageConvert+0x330>)
 8000a86:	ed93 7a00 	vldr	s14, [r3]
 8000a8a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a92:	edc7 7a04 	vstr	s15, [r7, #16]
			break;
 8000a96:	e0fc      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
		case 1:
			Adc_dummy_2 = Adc_dummy_2 - Offset_ADC[1];
 8000a98:	4b8b      	ldr	r3, [pc, #556]	@ (8000cc8 <FUN_ADC_VoltageConvert+0x328>)
 8000a9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aa6:	edc7 7a03 	vstr	s15, [r7, #12]
			if(Adc_dummy_2 > 0)
 8000aaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab6:	dd09      	ble.n	8000acc <FUN_ADC_VoltageConvert+0x12c>
			{
				// 채널 2 Set, 윈치조립체 비상구동 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_P[1];
 8000ab8:	4b84      	ldr	r3, [pc, #528]	@ (8000ccc <FUN_ADC_VoltageConvert+0x32c>)
 8000aba:	ed93 7a01 	vldr	s14, [r3, #4]
 8000abe:	edd7 6a03 	vldr	s13, [r7, #12]
 8000ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ac6:	edc7 7a04 	vstr	s15, [r7, #16]
			else
			{
				// 채널 2 Set, 윈치조립체 비상구동 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[1];
			}
			break;
 8000aca:	e0e2      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[1];
 8000acc:	4b80      	ldr	r3, [pc, #512]	@ (8000cd0 <FUN_ADC_VoltageConvert+0x330>)
 8000ace:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ad2:	edd7 6a03 	vldr	s13, [r7, #12]
 8000ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ada:	edc7 7a04 	vstr	s15, [r7, #16]
			break;
 8000ade:	e0d8      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
		case 2:
			Adc_dummy_2 = Adc_dummy_2 - Offset_ADC[2];
 8000ae0:	4b79      	ldr	r3, [pc, #484]	@ (8000cc8 <FUN_ADC_VoltageConvert+0x328>)
 8000ae2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ae6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aee:	edc7 7a03 	vstr	s15, [r7, #12]
			if(Adc_dummy_2 > 0)
 8000af2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afe:	dd09      	ble.n	8000b14 <FUN_ADC_VoltageConvert+0x174>
			{
				// 채널 3 Set, 윈치조립체 권성구동 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_P[2];
 8000b00:	4b72      	ldr	r3, [pc, #456]	@ (8000ccc <FUN_ADC_VoltageConvert+0x32c>)
 8000b02:	ed93 7a02 	vldr	s14, [r3, #8]
 8000b06:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b0e:	edc7 7a04 	vstr	s15, [r7, #16]
			else
			{
				// 채널 3 Set, 윈치조립체 권성구동 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[2];
			}
			break;
 8000b12:	e0be      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[2];
 8000b14:	4b6e      	ldr	r3, [pc, #440]	@ (8000cd0 <FUN_ADC_VoltageConvert+0x330>)
 8000b16:	ed93 7a02 	vldr	s14, [r3, #8]
 8000b1a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b22:	edc7 7a04 	vstr	s15, [r7, #16]
			break;
 8000b26:	e0b4      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
		case 3:
			Adc_dummy_2 = Adc_dummy_2 - Offset_ADC[3];
 8000b28:	4b67      	ldr	r3, [pc, #412]	@ (8000cc8 <FUN_ADC_VoltageConvert+0x328>)
 8000b2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b36:	edc7 7a03 	vstr	s15, [r7, #12]
			if(Adc_dummy_2 > 0)
 8000b3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b46:	dd09      	ble.n	8000b5c <FUN_ADC_VoltageConvert+0x1bc>
			{
				// 채널 4 Set, Spare
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_P[3];
 8000b48:	4b60      	ldr	r3, [pc, #384]	@ (8000ccc <FUN_ADC_VoltageConvert+0x32c>)
 8000b4a:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b4e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b56:	edc7 7a04 	vstr	s15, [r7, #16]
			else
			{
				// 채널 4 Set, Spare
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[3];
			}
			break;
 8000b5a:	e09a      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[3];
 8000b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8000cd0 <FUN_ADC_VoltageConvert+0x330>)
 8000b5e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b62:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b6a:	edc7 7a04 	vstr	s15, [r7, #16]
			break;
 8000b6e:	e090      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
		case 4:
			Adc_dummy_2 = Adc_dummy_2 - Offset_ADC[4];
 8000b70:	4b55      	ldr	r3, [pc, #340]	@ (8000cc8 <FUN_ADC_VoltageConvert+0x328>)
 8000b72:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b76:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b7e:	edc7 7a03 	vstr	s15, [r7, #12]
			if(Adc_dummy_2 > 0)
 8000b82:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8e:	dd09      	ble.n	8000ba4 <FUN_ADC_VoltageConvert+0x204>
			{
				// 채널 5 Set, 투인양장치 서보실린더1 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_P[4];
 8000b90:	4b4e      	ldr	r3, [pc, #312]	@ (8000ccc <FUN_ADC_VoltageConvert+0x32c>)
 8000b92:	ed93 7a04 	vldr	s14, [r3, #16]
 8000b96:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b9e:	edc7 7a04 	vstr	s15, [r7, #16]
			else
			{
				// 채널 5 Set, 투인양장치 서보실린더1 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[4];
			}
			break;
 8000ba2:	e076      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[4];
 8000ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8000cd0 <FUN_ADC_VoltageConvert+0x330>)
 8000ba6:	ed93 7a04 	vldr	s14, [r3, #16]
 8000baa:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb2:	edc7 7a04 	vstr	s15, [r7, #16]
			break;
 8000bb6:	e06c      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
		case 5:
			Adc_dummy_2 = Adc_dummy_2 - Offset_ADC[5];
 8000bb8:	4b43      	ldr	r3, [pc, #268]	@ (8000cc8 <FUN_ADC_VoltageConvert+0x328>)
 8000bba:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bc6:	edc7 7a03 	vstr	s15, [r7, #12]
			if(Adc_dummy_2 > 0)
 8000bca:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd6:	dd09      	ble.n	8000bec <FUN_ADC_VoltageConvert+0x24c>
			{
				// 채널 6 Set, 투인양장치 서보실린더2 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_P[5];
 8000bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8000ccc <FUN_ADC_VoltageConvert+0x32c>)
 8000bda:	ed93 7a05 	vldr	s14, [r3, #20]
 8000bde:	edd7 6a03 	vldr	s13, [r7, #12]
 8000be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000be6:	edc7 7a04 	vstr	s15, [r7, #16]
			else
			{
				// 채널 6 Set, 투인양장치 서보실린더2 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[5];
			}
			break;
 8000bea:	e052      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[5];
 8000bec:	4b38      	ldr	r3, [pc, #224]	@ (8000cd0 <FUN_ADC_VoltageConvert+0x330>)
 8000bee:	ed93 7a05 	vldr	s14, [r3, #20]
 8000bf2:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bfa:	edc7 7a04 	vstr	s15, [r7, #16]
			break;
 8000bfe:	e048      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
		case 6:
			Adc_dummy_2 = Adc_dummy_2 - Offset_ADC[6];
 8000c00:	4b31      	ldr	r3, [pc, #196]	@ (8000cc8 <FUN_ADC_VoltageConvert+0x328>)
 8000c02:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c06:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c0e:	edc7 7a03 	vstr	s15, [r7, #12]
			if(Adc_dummy_2 > 0)
 8000c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1e:	dd09      	ble.n	8000c34 <FUN_ADC_VoltageConvert+0x294>
			{
				// 채널 7 Set, 투인양장치 메인실린더1 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_P[6];
 8000c20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ccc <FUN_ADC_VoltageConvert+0x32c>)
 8000c22:	ed93 7a06 	vldr	s14, [r3, #24]
 8000c26:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c2e:	edc7 7a04 	vstr	s15, [r7, #16]
			else
			{
				// 채널 7 Set, 투인양장치 메인실린더1 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[6];
			}
			break;
 8000c32:	e02e      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[6];
 8000c34:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <FUN_ADC_VoltageConvert+0x330>)
 8000c36:	ed93 7a06 	vldr	s14, [r3, #24]
 8000c3a:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c42:	edc7 7a04 	vstr	s15, [r7, #16]
			break;
 8000c46:	e024      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
		case 7:
			Adc_dummy_2 = Adc_dummy_2 - Offset_ADC[7];
 8000c48:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <FUN_ADC_VoltageConvert+0x328>)
 8000c4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000c4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c56:	edc7 7a03 	vstr	s15, [r7, #12]
			if(Adc_dummy_2 > 0)
 8000c5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c66:	dd09      	ble.n	8000c7c <FUN_ADC_VoltageConvert+0x2dc>
			{
				// 채널 8 Set, 투인양장치 메인실린더2 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_P[7];
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <FUN_ADC_VoltageConvert+0x32c>)
 8000c6a:	ed93 7a07 	vldr	s14, [r3, #28]
 8000c6e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c76:	edc7 7a04 	vstr	s15, [r7, #16]
			else
			{
				// 채널 8 Set, 투인양장치 메인실린더2 : 비례제어밸브
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[7];
			}
			break;
 8000c7a:	e00a      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
				Adc_Voltage = Adc_dummy_2 / Gain_ADC_N[7];
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <FUN_ADC_VoltageConvert+0x330>)
 8000c7e:	ed93 7a07 	vldr	s14, [r3, #28]
 8000c82:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c8a:	edc7 7a04 	vstr	s15, [r7, #16]
			break;
 8000c8e:	e000      	b.n	8000c92 <FUN_ADC_VoltageConvert+0x2f2>
		default :
			break;
 8000c90:	bf00      	nop
	}

	if(Adc_Select_cnt == ADC1_ON)
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d103      	bne.n	8000ca0 <FUN_ADC_VoltageConvert+0x300>
	{
		HAL_ADC_Stop(&hadc1);
 8000c98:	4808      	ldr	r0, [pc, #32]	@ (8000cbc <FUN_ADC_VoltageConvert+0x31c>)
 8000c9a:	f00a fe1f 	bl	800b8dc <HAL_ADC_Stop>
 8000c9e:	e005      	b.n	8000cac <FUN_ADC_VoltageConvert+0x30c>
	}
	else if(Adc_Select_cnt == ADC2_ON)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d102      	bne.n	8000cac <FUN_ADC_VoltageConvert+0x30c>
	{
		HAL_ADC_Stop(&hadc2);
 8000ca6:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <FUN_ADC_VoltageConvert+0x320>)
 8000ca8:	f00a fe18 	bl	800b8dc <HAL_ADC_Stop>
	}

	return Adc_Voltage;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	ee07 3a90 	vmov	s15, r3
}
 8000cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000128c 	.word	0x2000128c
 8000cc0:	200012d4 	.word	0x200012d4
 8000cc4:	457ff000 	.word	0x457ff000
 8000cc8:	20000040 	.word	0x20000040
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000020 	.word	0x20000020

08000cd4 <FUN_ADC_Average_Calculator>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_ADC_Average_Calculator(float Adc_Voltage, uint8_t Adc_Channel_cnt)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	ed87 0a01 	vstr	s0, [r7, #4]
 8000cde:	4603      	mov	r3, r0
 8000ce0:	70fb      	strb	r3, [r7, #3]
	// Adc_Channel_cnt => 1~7 채널
	// 2000회 누적 시 리셋 후 다시 평균 값 계산
	if(Adc.Adc_Voltage_CntBuffer[Adc_Channel_cnt] >= 10)
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8000da4 <FUN_ADC_Average_Calculator+0xd0>)
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	889b      	ldrh	r3, [r3, #4]
 8000cec:	2b09      	cmp	r3, #9
 8000cee:	d917      	bls.n	8000d20 <FUN_ADC_Average_Calculator+0x4c>
	{
		Adc.Adc_Voltage_CntBuffer[Adc_Channel_cnt] = 0;
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	4a2c      	ldr	r2, [pc, #176]	@ (8000da4 <FUN_ADC_Average_Calculator+0xd0>)
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	809a      	strh	r2, [r3, #4]
		Adc.Adc_Voltage_SumBuffer[Adc_Channel_cnt] = 0;
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	4a29      	ldr	r2, [pc, #164]	@ (8000da4 <FUN_ADC_Average_Calculator+0xd0>)
 8000d00:	3304      	adds	r3, #4
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	3304      	adds	r3, #4
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
		Adc.Adc_Voltage_AvgBuffer[Adc_Channel_cnt] = 0;
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	4a24      	ldr	r2, [pc, #144]	@ (8000da4 <FUN_ADC_Average_Calculator+0xd0>)
 8000d12:	330c      	adds	r3, #12
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	3304      	adds	r3, #4
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
	}

	Adc.Adc_Voltage_CntBuffer[Adc_Channel_cnt] += 1;
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	4a20      	ldr	r2, [pc, #128]	@ (8000da4 <FUN_ADC_Average_Calculator+0xd0>)
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	889a      	ldrh	r2, [r3, #4]
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	3201      	adds	r2, #1
 8000d2e:	b291      	uxth	r1, r2
 8000d30:	4a1c      	ldr	r2, [pc, #112]	@ (8000da4 <FUN_ADC_Average_Calculator+0xd0>)
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	460a      	mov	r2, r1
 8000d38:	809a      	strh	r2, [r3, #4]

	Adc.Adc_Voltage_SumBuffer[Adc_Channel_cnt] += Adc_Voltage;
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	@ (8000da4 <FUN_ADC_Average_Calculator+0xd0>)
 8000d3e:	3304      	adds	r3, #4
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	3304      	adds	r3, #4
 8000d46:	ed93 7a00 	vldr	s14, [r3]
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d54:	4a13      	ldr	r2, [pc, #76]	@ (8000da4 <FUN_ADC_Average_Calculator+0xd0>)
 8000d56:	3304      	adds	r3, #4
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	edc3 7a00 	vstr	s15, [r3]

	Adc.Adc_Voltage_AvgBuffer[Adc_Channel_cnt] = Adc.Adc_Voltage_SumBuffer[Adc_Channel_cnt] / Adc.Adc_Voltage_CntBuffer[Adc_Channel_cnt];
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	4a0f      	ldr	r2, [pc, #60]	@ (8000da4 <FUN_ADC_Average_Calculator+0xd0>)
 8000d66:	3304      	adds	r3, #4
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	edd3 6a00 	vldr	s13, [r3]
 8000d72:	78fb      	ldrb	r3, [r7, #3]
 8000d74:	4a0b      	ldr	r2, [pc, #44]	@ (8000da4 <FUN_ADC_Average_Calculator+0xd0>)
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	889b      	ldrh	r3, [r3, #4]
 8000d7c:	ee07 3a90 	vmov	s15, r3
 8000d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8a:	4a06      	ldr	r2, [pc, #24]	@ (8000da4 <FUN_ADC_Average_Calculator+0xd0>)
 8000d8c:	330c      	adds	r3, #12
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	3304      	adds	r3, #4
 8000d94:	edc3 7a00 	vstr	s15, [r3]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	200000fc 	.word	0x200000fc

08000da8 <FUN_ADC_AvgValueReset>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_ADC_AvgValueReset(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
	for(uint8_t Adc_AvgReset_i = 0; Adc_AvgReset_i < 8; Adc_AvgReset_i++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	e01a      	b.n	8000dea <FUN_ADC_AvgValueReset+0x42>
	{
		Adc.Adc_Voltage_CntBuffer[Adc_AvgReset_i] = 0;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <FUN_ADC_AvgValueReset+0x58>)
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	809a      	strh	r2, [r3, #4]
		Adc.Adc_Voltage_SumBuffer[Adc_AvgReset_i] = 0;
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e00 <FUN_ADC_AvgValueReset+0x58>)
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	3304      	adds	r3, #4
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
		Adc.Adc_Voltage_AvgBuffer[Adc_AvgReset_i] = 0;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <FUN_ADC_AvgValueReset+0x58>)
 8000dd6:	330c      	adds	r3, #12
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	3304      	adds	r3, #4
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
	for(uint8_t Adc_AvgReset_i = 0; Adc_AvgReset_i < 8; Adc_AvgReset_i++)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3301      	adds	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	d9e1      	bls.n	8000db4 <FUN_ADC_AvgValueReset+0xc>
	}
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200000fc 	.word	0x200000fc

08000e04 <FUN_Control_Init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	FUN_TIM_Init();
 8000e08:	f008 fe4a 	bl	8009aa0 <FUN_TIM_Init>

	FUN_EEPROM_Init();
 8000e0c:	f001 fa60 	bl	80022d0 <FUN_EEPROM_Init>

	FUN_ADC_Init();
 8000e10:	f7ff fb8a 	bl	8000528 <FUN_ADC_Init>

	FUN_DAC_Init();
 8000e14:	f000 f9b2 	bl	800117c <FUN_DAC_Init>

	FUN_GPO_Init();
 8000e18:	f001 ff44 	bl	8002ca4 <FUN_GPO_Init>

	FUN_RS485_Init();
 8000e1c:	f006 ffb2 	bl	8007d84 <FUN_RS485_Init>

	FUN_Encoder_Init();
 8000e20:	f001 fb6c 	bl	80024fc <FUN_Encoder_Init>

	FUN_HILS_Init();
 8000e24:	f003 f92c 	bl	8004080 <FUN_HILS_Init>

	FUN_Control_Parameter_Reset();
 8000e28:	f000 f802 	bl	8000e30 <FUN_Control_Parameter_Reset>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <FUN_Control_Parameter_Reset>:
/****************************************************************************/
/*	Overview	:	Control Parameter Reset									*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_Parameter_Reset(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
	Control.Status_01.LWS_C_Status = 0;
 8000e36:	4b7d      	ldr	r3, [pc, #500]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
	Control.Status_02.LWS_C_Status = 0;
 8000e3c:	4b7b      	ldr	r3, [pc, #492]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]

	Control.Mode.LWS_C_Mode = 0;
 8000e42:	4b7a      	ldr	r3, [pc, #488]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	801a      	strh	r2, [r3, #0]

	Control.Error.LWS_C_Error = 0;
 8000e48:	4b78      	ldr	r3, [pc, #480]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	819a      	strh	r2, [r3, #12]

	Control.Input_ch.Input_Alldata = 0;
 8000e4e:	4b77      	ldr	r3, [pc, #476]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]

	for(uint8_t i=0; i<3; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	71fb      	strb	r3, [r7, #7]
 8000e58:	e009      	b.n	8000e6e <FUN_Control_Parameter_Reset+0x3e>
	{
		Control.Output_ch.Output_Alldata[i] = 0;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	4a73      	ldr	r2, [pc, #460]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e5e:	3304      	adds	r3, #4
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
	for(uint8_t i=0; i<3; i++)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d9f2      	bls.n	8000e5a <FUN_Control_Parameter_Reset+0x2a>
	}

	Control.Float_Data.AI_ADC_In1_Ch2_Volt = 0;
 8000e74:	4b6d      	ldr	r3, [pc, #436]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	@ 0x24
	Control.Float_Data.AI_ADC_In1_Ch3_Volt = 0;
 8000e7c:	4b6b      	ldr	r3, [pc, #428]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	@ 0x28
	Control.Float_Data.AI_ADC_In1_Ch4_Volt = 0;
 8000e84:	4b69      	ldr	r3, [pc, #420]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
	Control.Float_Data.AI_ADC_In2_Ch1_Volt = 0;
 8000e8c:	4b67      	ldr	r3, [pc, #412]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	631a      	str	r2, [r3, #48]	@ 0x30
	Control.Float_Data.AI_ADC_In2_Ch2_Volt = 0;
 8000e94:	4b65      	ldr	r3, [pc, #404]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	635a      	str	r2, [r3, #52]	@ 0x34
	Control.Float_Data.AI_ADC_In2_Ch3_Volt = 0;
 8000e9c:	4b63      	ldr	r3, [pc, #396]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	639a      	str	r2, [r3, #56]	@ 0x38
	Control.Float_Data.AI_ADC_In2_Ch4_Volt = 0;
 8000ea4:	4b61      	ldr	r3, [pc, #388]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
	Control.Float_Data.Dac3_Ch0_Volt = 0;
 8000eac:	4b5f      	ldr	r3, [pc, #380]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	655a      	str	r2, [r3, #84]	@ 0x54
	Control.Float_Data.Dac3_Ch1_Volt = 0;
 8000eb4:	4b5d      	ldr	r3, [pc, #372]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	659a      	str	r2, [r3, #88]	@ 0x58
	Control.Float_Data.Dac3_Ch2_Volt = 0;
 8000ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
	Control.Float_Data.Dac3_Ch3_Volt = 0;
 8000ec4:	4b59      	ldr	r3, [pc, #356]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	661a      	str	r2, [r3, #96]	@ 0x60
	Control.Float_Data.Dac3_Ch4_Volt = 0;
 8000ecc:	4b57      	ldr	r3, [pc, #348]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	665a      	str	r2, [r3, #100]	@ 0x64
	Control.Float_Data.Dac3_Ch5_Volt = 0;
 8000ed4:	4b55      	ldr	r3, [pc, #340]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	669a      	str	r2, [r3, #104]	@ 0x68
	Control.Float_Data.Encoder_1 = 0;
 8000edc:	4b53      	ldr	r3, [pc, #332]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	641a      	str	r2, [r3, #64]	@ 0x40
	Control.Float_Data.Encoder_2 = 0;
 8000ee4:	4b51      	ldr	r3, [pc, #324]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	@ 0x44
	Control.Float_Data.WinchDrumHydMotorASpeed = 0;
 8000eec:	4b4f      	ldr	r3, [pc, #316]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	649a      	str	r2, [r3, #72]	@ 0x48
	Control.Float_Data.WinchDrumHydMotorBSpeed = 0;
 8000ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	64da      	str	r2, [r3, #76]	@ 0x4c
	Control.Float_Data.AlignHydMotorSpeed = 0;
 8000efc:	4b4b      	ldr	r3, [pc, #300]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	651a      	str	r2, [r3, #80]	@ 0x50
	Control.Float_Data.Dac3_Ch0_Volt = 0;
 8000f04:	4b49      	ldr	r3, [pc, #292]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	655a      	str	r2, [r3, #84]	@ 0x54
	Control.Float_Data.Dac3_Ch1_Volt = 0;
 8000f0c:	4b47      	ldr	r3, [pc, #284]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	659a      	str	r2, [r3, #88]	@ 0x58
	Control.Float_Data.Dac3_Ch2_Volt = 0;
 8000f14:	4b45      	ldr	r3, [pc, #276]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
	Control.Float_Data.Dac3_Ch3_Volt = 0;
 8000f1c:	4b43      	ldr	r3, [pc, #268]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	661a      	str	r2, [r3, #96]	@ 0x60
	Control.Float_Data.Dac3_Ch4_Volt = 0;
 8000f24:	4b41      	ldr	r3, [pc, #260]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	665a      	str	r2, [r3, #100]	@ 0x64
	Control.Float_Data.Dac3_Ch5_Volt = 0;
 8000f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	669a      	str	r2, [r3, #104]	@ 0x68
	Control.Float_Data.Dac4_Ch2_Volt = 0;
 8000f34:	4b3d      	ldr	r3, [pc, #244]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	679a      	str	r2, [r3, #120]	@ 0x78
	Control.Float_Data.Dac4_Ch3_Volt = 0;
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	67da      	str	r2, [r3, #124]	@ 0x7c
	Control.Float_Data.Dac4_Ch4_Volt = 0;
 8000f44:	4b39      	ldr	r3, [pc, #228]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	Control.Float_Data.Dac4_Ch5_Volt = 0;
 8000f4e:	4b37      	ldr	r3, [pc, #220]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	Control.Float_Data.Dac4_Ch6_Volt = 0;
 8000f58:	4b34      	ldr	r3, [pc, #208]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	Control.Float_Data.Dac4_Ch7_Volt = 0;
 8000f62:	4b32      	ldr	r3, [pc, #200]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	Control.Float_Data.Dac4_Ch8_Volt = 0;
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	Control.Float_Data.Dac4_Ch9_Volt = 0;
 8000f76:	4b2d      	ldr	r3, [pc, #180]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	Control.Float_Data.Dac4_Ch10_Volt = 0;
 8000f80:	4b2a      	ldr	r3, [pc, #168]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	Control.Float_Data.Dac4_Ch11_Volt = 0;
 8000f8a:	4b28      	ldr	r3, [pc, #160]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	Control.Float_Data.Dac4_Ch12_Volt = 0;
 8000f94:	4b25      	ldr	r3, [pc, #148]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	Control.Float_Data.Dac4_Ch13_Volt = 0;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	Control.Float_Data.Dac5_Ch0_Volt = 0;
 8000fa8:	4b20      	ldr	r3, [pc, #128]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	Control.Float_Data.Dac5_Ch1_Volt = 0;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	Control.Float_Data.Dac5_Ch2_Volt = 0;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	Control.Float_Data.Dac5_Ch3_Volt = 0;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	Control.Float_Data.Dac5_Ch4_Volt = 0;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	Control.Float_Data.Dac5_Ch5_Volt = 0;
 8000fda:	4b14      	ldr	r3, [pc, #80]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	Control.Float_Data.Dac5_Ch6_Volt = 0;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	Control.Float_Data.Dac5_Ch7_Volt = 0;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	for(uint8_t i=0; i<10; i++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	71bb      	strb	r3, [r7, #6]
 8000ffc:	e00b      	b.n	8001016 <FUN_Control_Parameter_Reset+0x1e6>
	{
		Control.LWS_C_HILS[i] = 0;
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <FUN_Control_Parameter_Reset+0x1fc>)
 8001002:	3334      	adds	r3, #52	@ 0x34
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	3304      	adds	r3, #4
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<10; i++)
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	3301      	adds	r3, #1
 8001014:	71bb      	strb	r3, [r7, #6]
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	2b09      	cmp	r3, #9
 800101a:	d9f0      	bls.n	8000ffe <FUN_Control_Parameter_Reset+0x1ce>
	}
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000154 	.word	0x20000154

08001030 <FUN_Control_Routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_Routine(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	FUN_RS485_Rx_Data_Save();
 8001034:	f007 f880 	bl	8008138 <FUN_RS485_Rx_Data_Save>

	if(u1f_tim_100us_trg == 1)
 8001038:	4b29      	ldr	r3, [pc, #164]	@ (80010e0 <FUN_Control_Routine+0xb0>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d104      	bne.n	800104a <FUN_Control_Routine+0x1a>
	{
		u1f_tim_100us_trg = 0;
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <FUN_Control_Routine+0xb0>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
		FUN_Control_tim2_100us_routine();
 8001046:	f000 f85d 	bl	8001104 <FUN_Control_tim2_100us_routine>
	}

	if(u1f_tim_250us_trg == 1)
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <FUN_Control_Routine+0xb4>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d104      	bne.n	800105c <FUN_Control_Routine+0x2c>
	{
		u1f_tim_250us_trg = 0;
 8001052:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <FUN_Control_Routine+0xb4>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
		FUN_Control_tim2_250us_routine();
 8001058:	f000 f85a 	bl	8001110 <FUN_Control_tim2_250us_routine>
	}

	if(u1f_tim_500us_trg == 1)
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <FUN_Control_Routine+0xb8>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d104      	bne.n	800106e <FUN_Control_Routine+0x3e>
	{
		u1f_tim_500us_trg = 0;
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <FUN_Control_Routine+0xb8>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
		FUN_Control_tim2_500us_routine();
 800106a:	f000 f857 	bl	800111c <FUN_Control_tim2_500us_routine>
	}

	if(u1f_tim_1ms_trg == 1)
 800106e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <FUN_Control_Routine+0xbc>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d104      	bne.n	8001080 <FUN_Control_Routine+0x50>
	{
		u1f_tim_1ms_trg = 0;
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <FUN_Control_Routine+0xbc>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
		FUN_Control_tim2_1ms_routine();
 800107c:	f000 f858 	bl	8001130 <FUN_Control_tim2_1ms_routine>
	}

	if(u1f_tim_2ms_trg == 1)
 8001080:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <FUN_Control_Routine+0xc0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d104      	bne.n	8001092 <FUN_Control_Routine+0x62>
	{
		u1f_tim_1ms_trg = 0;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <FUN_Control_Routine+0xbc>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
		FUN_Control_tim2_2ms_routine();
 800108e:	f000 f855 	bl	800113c <FUN_Control_tim2_2ms_routine>
	}

	if(u1f_tim_5ms_trg == 1)
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <FUN_Control_Routine+0xc4>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d104      	bne.n	80010a4 <FUN_Control_Routine+0x74>
	{
		u1f_tim_5ms_trg = 0;
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <FUN_Control_Routine+0xc4>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
		FUN_Control_tim2_5ms_routine();
 80010a0:	f000 f853 	bl	800114a <FUN_Control_tim2_5ms_routine>
	}

	if(u1f_tim_10ms_trg == 1)
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <FUN_Control_Routine+0xc8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d104      	bne.n	80010b6 <FUN_Control_Routine+0x86>
	{
		u1f_tim_10ms_trg = 0;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <FUN_Control_Routine+0xc8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
		FUN_Control_tim2_10ms_routine();
 80010b2:	f000 f850 	bl	8001156 <FUN_Control_tim2_10ms_routine>
	}

	if(u1f_tim_100ms_trg == 1)
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <FUN_Control_Routine+0xcc>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d104      	bne.n	80010c8 <FUN_Control_Routine+0x98>
	{
		u1f_tim_100ms_trg = 0;
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <FUN_Control_Routine+0xcc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
		FUN_Control_tim2_100ms_routine();
 80010c4:	f000 f84e 	bl	8001164 <FUN_Control_tim2_100ms_routine>
	}

	if(u1f_tim_1000ms_trg == 1)
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <FUN_Control_Routine+0xd0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d104      	bne.n	80010da <FUN_Control_Routine+0xaa>
	{
		u1f_tim_1000ms_trg = 0;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <FUN_Control_Routine+0xd0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
		FUN_Control_tim2_1000ms_routine();
 80010d6:	f000 f84b 	bl	8001170 <FUN_Control_tim2_1000ms_routine>
	}
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20001264 	.word	0x20001264
 80010e4:	20001265 	.word	0x20001265
 80010e8:	20001266 	.word	0x20001266
 80010ec:	20001267 	.word	0x20001267
 80010f0:	20001268 	.word	0x20001268
 80010f4:	20001269 	.word	0x20001269
 80010f8:	2000126a 	.word	0x2000126a
 80010fc:	2000126b 	.word	0x2000126b
 8001100:	2000126c 	.word	0x2000126c

08001104 <FUN_Control_tim2_100us_routine>:
/****************************************************************************/
/*	Overview	:	10kHz													*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_tim2_100us_routine(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	FUN_Encoder_Output_Set();
 8001108:	f001 fa80 	bl	800260c <FUN_Encoder_Output_Set>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <FUN_Control_tim2_250us_routine>:
/****************************************************************************/
/*	Overview	:	4kHz													*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_tim2_250us_routine(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	FUN_HILS_Routine();
 8001114:	f002 ffba 	bl	800408c <FUN_HILS_Routine>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <FUN_Control_tim2_500us_routine>:
/****************************************************************************/
/*	Overview	:	2kHz													*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_tim2_500us_routine(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	FUN_GPI_PortCheck();		// Input Pin Status 확인
 8001120:	f001 fb9c 	bl	800285c <FUN_GPI_PortCheck>
	FUN_GPO_PortCheck();		// Output Port Status 확인
 8001124:	f001 feda 	bl	8002edc <FUN_GPO_PortCheck>
	FUN_GPO_Routine();			// Output Port 출력
 8001128:	f002 f9c0 	bl	80034ac <FUN_GPO_Routine>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <FUN_Control_tim2_1ms_routine>:
/****************************************************************************/
/*	Overview	:	1kHz													*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_tim2_1ms_routine(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	FUN_DAC_Routine();
 8001134:	f000 f82e 	bl	8001194 <FUN_DAC_Routine>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <FUN_Control_tim2_2ms_routine>:
/****************************************************************************/
/*	Overview	:	500Hz													*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_tim2_2ms_routine(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <FUN_Control_tim2_5ms_routine>:
/****************************************************************************/
/*	Overview	:	200Hz													*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_tim2_5ms_routine(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
	FUN_ADC_Routine();
 800114e:	f7ff fa4f 	bl	80005f0 <FUN_ADC_Routine>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}

08001156 <FUN_Control_tim2_10ms_routine>:
/****************************************************************************/
/*	Overview	:	100Hz													*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_tim2_10ms_routine(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FUN_Control_tim2_100ms_routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_tim2_100ms_routine(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	FUN_LED_Routine();
 8001168:	f006 fc36 	bl	80079d8 <FUN_LED_Routine>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <FUN_Control_tim2_1000ms_routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Control_tim2_1000ms_routine(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	FUN_EEPROM_Routine();
 8001174:	f001 f946 	bl	8002404 <FUN_EEPROM_Routine>

//	FUN_HILS_Frequency_Ctrl();
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <FUN_DAC_Init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_DAC_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	FUN_DAC_SPI5_Init();		// mA
 8001180:	f000 fdfe 	bl	8001d80 <FUN_DAC_SPI5_Init>
	FUN_DAC_SPI4_Init();		// mA
 8001184:	f000 ff80 	bl	8002088 <FUN_DAC_SPI4_Init>
	FUN_DAC_SPI3_Init();		// V
 8001188:	f000 fdea 	bl	8001d60 <FUN_DAC_SPI3_Init>

	DAC_Converter_4ma_Init();
 800118c:	f000 fa86 	bl	800169c <DAC_Converter_4ma_Init>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <FUN_DAC_Routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_DAC_Routine(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	//HILS 출력
	if(HILS_START == FUN_RS485_Ctrl_hils_action_U1())
 8001198:	f008 fb54 	bl	8009844 <FUN_RS485_Ctrl_hils_action_U1>
 800119c:	4603      	mov	r3, r0
 800119e:	2b01      	cmp	r3, #1
 80011a0:	f040 8148 	bne.w	8001434 <FUN_DAC_Routine+0x2a0>
	{
		Control.Float_Data.Dac4_Ch5_Volt = (HILS.HILS_Output.HILS_AO_Float[0]);
 80011a4:	4ba1      	ldr	r3, [pc, #644]	@ (800142c <FUN_DAC_Routine+0x298>)
 80011a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80011aa:	4aa1      	ldr	r2, [pc, #644]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80011ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
		Control.Float_Data.Dac4_Ch4_Volt = (HILS.HILS_Output.HILS_AO_Float[1]);
 80011b0:	4b9e      	ldr	r3, [pc, #632]	@ (800142c <FUN_DAC_Routine+0x298>)
 80011b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80011b6:	4a9e      	ldr	r2, [pc, #632]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80011b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
		Control.Float_Data.Dac4_Ch3_Volt = (HILS.HILS_Output.HILS_AO_Float[2]);
 80011bc:	4b9b      	ldr	r3, [pc, #620]	@ (800142c <FUN_DAC_Routine+0x298>)
 80011be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80011c2:	4a9b      	ldr	r2, [pc, #620]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80011c4:	67d3      	str	r3, [r2, #124]	@ 0x7c
		Control.Float_Data.Dac3_Ch1_Volt = (HILS.HILS_Output.HILS_AO_Float[3]);
 80011c6:	4b99      	ldr	r3, [pc, #612]	@ (800142c <FUN_DAC_Routine+0x298>)
 80011c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80011cc:	4a98      	ldr	r2, [pc, #608]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80011ce:	6593      	str	r3, [r2, #88]	@ 0x58
		Control.Float_Data.Dac3_Ch0_Volt = (HILS.HILS_Output.HILS_AO_Float[6]);
 80011d0:	4b96      	ldr	r3, [pc, #600]	@ (800142c <FUN_DAC_Routine+0x298>)
 80011d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80011d6:	4a96      	ldr	r2, [pc, #600]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80011d8:	6553      	str	r3, [r2, #84]	@ 0x54
		Control.Float_Data.Dac5_Ch3_Volt = (HILS.HILS_Output.HILS_AO_Float[10]);
 80011da:	4b94      	ldr	r3, [pc, #592]	@ (800142c <FUN_DAC_Routine+0x298>)
 80011dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011e0:	4a93      	ldr	r2, [pc, #588]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80011e2:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
		Control.Float_Data.Dac4_Ch7_Volt = (HILS.HILS_Output.HILS_AO_Float[11]);
 80011e6:	4b91      	ldr	r3, [pc, #580]	@ (800142c <FUN_DAC_Routine+0x298>)
 80011e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011ec:	4a90      	ldr	r2, [pc, #576]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80011ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
		Control.Float_Data.Dac4_Ch6_Volt = (HILS.HILS_Output.HILS_AO_Float[12]);
 80011f2:	4b8e      	ldr	r3, [pc, #568]	@ (800142c <FUN_DAC_Routine+0x298>)
 80011f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80011f8:	4a8d      	ldr	r2, [pc, #564]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80011fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
		Control.Float_Data.Dac5_Ch5_Volt = (HILS.HILS_Output.HILS_AO_Float[13]);
 80011fe:	4b8b      	ldr	r3, [pc, #556]	@ (800142c <FUN_DAC_Routine+0x298>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001204:	4a8a      	ldr	r2, [pc, #552]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001206:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
		Control.Float_Data.Dac3_Ch2_Volt = (HILS.HILS_Output.HILS_AO_Float[14]);
 800120a:	4b88      	ldr	r3, [pc, #544]	@ (800142c <FUN_DAC_Routine+0x298>)
 800120c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001210:	4a87      	ldr	r2, [pc, #540]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001212:	65d3      	str	r3, [r2, #92]	@ 0x5c
		Control.Float_Data.Dac4_Ch9_Volt = (HILS.HILS_Output.HILS_AO_Float[15]);
 8001214:	4b85      	ldr	r3, [pc, #532]	@ (800142c <FUN_DAC_Routine+0x298>)
 8001216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800121a:	4a85      	ldr	r2, [pc, #532]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 800121c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
		Control.Float_Data.Dac4_Ch8_Volt = (HILS.HILS_Output.HILS_AO_Float[16]);
 8001220:	4b82      	ldr	r3, [pc, #520]	@ (800142c <FUN_DAC_Routine+0x298>)
 8001222:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001226:	4a82      	ldr	r2, [pc, #520]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
		Control.Float_Data.Dac5_Ch0_Volt = (HILS.HILS_Output.HILS_AO_Float[17]);
 800122c:	4b7f      	ldr	r3, [pc, #508]	@ (800142c <FUN_DAC_Routine+0x298>)
 800122e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001232:	4a7f      	ldr	r2, [pc, #508]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001234:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
		Control.Float_Data.Dac3_Ch3_Volt = (HILS.HILS_Output.HILS_AO_Float[18]);
 8001238:	4b7c      	ldr	r3, [pc, #496]	@ (800142c <FUN_DAC_Routine+0x298>)
 800123a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800123e:	4a7c      	ldr	r2, [pc, #496]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001240:	6613      	str	r3, [r2, #96]	@ 0x60
		Control.Float_Data.Dac4_Ch11_Volt	 =	(HILS.HILS_Output.HILS_AO_Float[19]);						// 투인양장치: 서보실린더1(팽창) 압력변환기
 8001242:	4b7a      	ldr	r3, [pc, #488]	@ (800142c <FUN_DAC_Routine+0x298>)
 8001244:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8001248:	4a79      	ldr	r2, [pc, #484]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 800124a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
		Control.Float_Data.Dac4_Ch10_Volt	 =	(HILS.HILS_Output.HILS_AO_Float[20]);						// 투인양장치: 서보실린더1(수축) 압력변환기
 800124e:	4b77      	ldr	r3, [pc, #476]	@ (800142c <FUN_DAC_Routine+0x298>)
 8001250:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8001254:	4a76      	ldr	r2, [pc, #472]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001256:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
		Control.Float_Data.Dac5_Ch6_Volt	 =	(HILS.HILS_Output.HILS_AO_Float[21]);						// 투인양장치: 서보실린더1 LVDT
 800125a:	4b74      	ldr	r3, [pc, #464]	@ (800142c <FUN_DAC_Routine+0x298>)
 800125c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001260:	4a73      	ldr	r2, [pc, #460]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001262:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
		Control.Float_Data.Dac3_Ch4_Volt	 =	(HILS.HILS_Output.HILS_AO_Float[22]);						// 투인양장치 서보실린더1: 비례제어밸브 에러신호
 8001266:	4b71      	ldr	r3, [pc, #452]	@ (800142c <FUN_DAC_Routine+0x298>)
 8001268:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800126c:	4a70      	ldr	r2, [pc, #448]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 800126e:	6653      	str	r3, [r2, #100]	@ 0x64
		Control.Float_Data.Dac4_Ch13_Volt	 =	(HILS.HILS_Output.HILS_AO_Float[23]);						// 투인양장치: 서보실린더2(팽창) 압력변환기
 8001270:	4b6e      	ldr	r3, [pc, #440]	@ (800142c <FUN_DAC_Routine+0x298>)
 8001272:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001276:	4a6e      	ldr	r2, [pc, #440]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001278:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
		Control.Float_Data.Dac4_Ch12_Volt	 =	(HILS.HILS_Output.HILS_AO_Float[24]);						// 투인양장치: 서보실린더2(수축) 압력변환기
 800127c:	4b6b      	ldr	r3, [pc, #428]	@ (800142c <FUN_DAC_Routine+0x298>)
 800127e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001282:	4a6b      	ldr	r2, [pc, #428]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001284:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
		Control.Float_Data.Dac5_Ch1_Volt	 =	(HILS.HILS_Output.HILS_AO_Float[25]);						// 투인양장치: 서보실린더2 LVDT
 8001288:	4b68      	ldr	r3, [pc, #416]	@ (800142c <FUN_DAC_Routine+0x298>)
 800128a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800128e:	4a68      	ldr	r2, [pc, #416]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001290:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
		Control.Float_Data.Dac3_Ch5_Volt	 =	(HILS.HILS_Output.HILS_AO_Float[26]);						// 투인양장치 서보실린더2: 비례제어밸브 에러신호
 8001294:	4b65      	ldr	r3, [pc, #404]	@ (800142c <FUN_DAC_Routine+0x298>)
 8001296:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800129a:	4a65      	ldr	r2, [pc, #404]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 800129c:	6693      	str	r3, [r2, #104]	@ 0x68

		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH5, Control.Float_Data.Dac4_Ch5_Volt);	// 동력공급장치: 압력변환기(윈치동력)
 800129e:	4b64      	ldr	r3, [pc, #400]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80012a0:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 80012a4:	eeb0 0a67 	vmov.f32	s0, s15
 80012a8:	2105      	movs	r1, #5
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fa5a 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH4, Control.Float_Data.Dac4_Ch4_Volt);	// 동력공급장치: 압력변환기(투인양동력)
 80012b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80012b2:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	2104      	movs	r1, #4
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 fa51 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH3, Control.Float_Data.Dac4_Ch3_Volt);	// 동력공급장치: 유량계(투인양동력)
 80012c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80012c4:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 80012c8:	eeb0 0a67 	vmov.f32	s0, s15
 80012cc:	2103      	movs	r1, #3
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 fa48 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH1, Control.Float_Data.Dac3_Ch1_Volt);	// 동력공급장치 비상구동: 비례제어밸브 에러신호
 80012d4:	4b56      	ldr	r3, [pc, #344]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80012d6:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80012da:	eeb0 0a67 	vmov.f32	s0, s15
 80012de:	2101      	movs	r1, #1
 80012e0:	2000      	movs	r0, #0
 80012e2:	f000 fa3f 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH0, Control.Float_Data.Dac3_Ch0_Volt);	// 윈치조립체 권선구동 : 비례제어밸브 에러신호
 80012e6:	4b52      	ldr	r3, [pc, #328]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80012e8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	2100      	movs	r1, #0
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 fa36 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH3, Control.Float_Data.Dac5_Ch3_Volt);	// 윈치조립체 : 장력센서
 80012f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80012fa:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 80012fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001302:	2103      	movs	r1, #3
 8001304:	2002      	movs	r0, #2
 8001306:	f000 fa2d 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH7, Control.Float_Data.Dac4_Ch7_Volt);	// 투인양장치: 실린더1(팽창) 압력변환기
 800130a:	4b49      	ldr	r3, [pc, #292]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 800130c:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001310:	eeb0 0a67 	vmov.f32	s0, s15
 8001314:	2107      	movs	r1, #7
 8001316:	2001      	movs	r0, #1
 8001318:	f000 fa24 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH6, Control.Float_Data.Dac4_Ch6_Volt);	// 투인양장치: 실린더1(수축) 압력변환기
 800131c:	4b44      	ldr	r3, [pc, #272]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 800131e:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	2106      	movs	r1, #6
 8001328:	2001      	movs	r0, #1
 800132a:	f000 fa1b 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH5, Control.Float_Data.Dac5_Ch5_Volt);	// 투인양장치: 메인실린더1 LVDT
 800132e:	4b40      	ldr	r3, [pc, #256]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001330:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001334:	eeb0 0a67 	vmov.f32	s0, s15
 8001338:	2105      	movs	r1, #5
 800133a:	2002      	movs	r0, #2
 800133c:	f000 fa12 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH2, Control.Float_Data.Dac3_Ch2_Volt);	// 투인양장치 메인실린더1: 비례제어밸브 에러신호
 8001340:	4b3b      	ldr	r3, [pc, #236]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001342:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001346:	eeb0 0a67 	vmov.f32	s0, s15
 800134a:	2102      	movs	r1, #2
 800134c:	2000      	movs	r0, #0
 800134e:	f000 fa09 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH9, Control.Float_Data.Dac4_Ch9_Volt);	// 투인양장치: 실린더2(팽창) 압력변환기
 8001352:	4b37      	ldr	r3, [pc, #220]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001354:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	2109      	movs	r1, #9
 800135e:	2001      	movs	r0, #1
 8001360:	f000 fa00 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH8, Control.Float_Data.Dac4_Ch8_Volt);	// 투인양장치: 실린더2(수축) 압력변환기
 8001364:	4b32      	ldr	r3, [pc, #200]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001366:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	2108      	movs	r1, #8
 8001370:	2001      	movs	r0, #1
 8001372:	f000 f9f7 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH0, Control.Float_Data.Dac5_Ch0_Volt);	// 투인양장치: 메인실린더2 LVDT
 8001376:	4b2e      	ldr	r3, [pc, #184]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001378:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	2100      	movs	r1, #0
 8001382:	2002      	movs	r0, #2
 8001384:	f000 f9ee 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH3, Control.Float_Data.Dac3_Ch3_Volt);	// 투인양장치 메인실린더2: 비례제어밸브 에러신호
 8001388:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 800138a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800138e:	eeb0 0a67 	vmov.f32	s0, s15
 8001392:	2103      	movs	r1, #3
 8001394:	2000      	movs	r0, #0
 8001396:	f000 f9e5 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH11, Control.Float_Data.Dac4_Ch11_Volt);		// 투인양장치: 서보실린더1(팽창) 압력변환기
 800139a:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 800139c:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 80013a0:	eeb0 0a67 	vmov.f32	s0, s15
 80013a4:	210b      	movs	r1, #11
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 f9dc 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH10, Control.Float_Data.Dac4_Ch10_Volt);		// 투인양장치: 서보실린더1(수축) 압력변환기
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80013ae:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	210a      	movs	r1, #10
 80013b8:	2001      	movs	r0, #1
 80013ba:	f000 f9d3 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH6, Control.Float_Data.Dac5_Ch6_Volt);		// 투인양장치: 서보실린더1 LVDT
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80013c0:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80013c4:	eeb0 0a67 	vmov.f32	s0, s15
 80013c8:	2106      	movs	r1, #6
 80013ca:	2002      	movs	r0, #2
 80013cc:	f000 f9ca 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH4, Control.Float_Data.Dac3_Ch4_Volt);		// 투인양장치 서보실린더1: 비례제어밸브 에러신호
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80013d2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	2104      	movs	r1, #4
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 f9c1 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH13, Control.Float_Data.Dac4_Ch13_Volt);		// 투인양장치: 서보실린더2(팽창) 압력변환기
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80013e4:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 80013e8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ec:	210d      	movs	r1, #13
 80013ee:	2001      	movs	r0, #1
 80013f0:	f000 f9b8 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH12, Control.Float_Data.Dac4_Ch12_Volt);		// 투인양장치: 서보실린더2(수축) 압력변환기
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 80013f6:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	210c      	movs	r1, #12
 8001400:	2001      	movs	r0, #1
 8001402:	f000 f9af 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH1, Control.Float_Data.Dac5_Ch1_Volt);		// 투인양장치: 서보실린더2 LVDT
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 8001408:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	2101      	movs	r1, #1
 8001412:	2002      	movs	r0, #2
 8001414:	f000 f9a6 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH5, Control.Float_Data.Dac3_Ch5_Volt);		// 투인양장치 서보실린더2: 비례제어밸브 에러신호
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <FUN_DAC_Routine+0x29c>)
 800141a:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800141e:	eeb0 0a67 	vmov.f32	s0, s15
 8001422:	2105      	movs	r1, #5
 8001424:	2000      	movs	r0, #0
 8001426:	f000 f99d 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH13, Control.Float_Data.Dac4_Ch13_Volt);		// 투인양장치: 서보실린더2(팽창) 압력변환기
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH12, Control.Float_Data.Dac4_Ch12_Volt);		// 투인양장치: 서보실린더2(수축) 압력변환기
		FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH1, Control.Float_Data.Dac5_Ch1_Volt);		// 투인양장치: 서보실린더2 LVDT
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH5, Control.Float_Data.Dac3_Ch5_Volt);		// 투인양장치 서보실린더2: 비례제어밸브 에러신호
	}
}
 800142a:	e130      	b.n	800168e <FUN_DAC_Routine+0x4fa>
 800142c:	200006ac 	.word	0x200006ac
 8001430:	20000154 	.word	0x20000154
		Control.Float_Data.Dac4_Ch5_Volt	 =	RS485.HILS_UC_Output_Float[0];						// 동력공급장치: 압력변환기(윈치동력)
 8001434:	4b97      	ldr	r3, [pc, #604]	@ (8001694 <FUN_DAC_Routine+0x500>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a97      	ldr	r2, [pc, #604]	@ (8001698 <FUN_DAC_Routine+0x504>)
 800143a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
		Control.Float_Data.Dac4_Ch4_Volt	 =	RS485.HILS_UC_Output_Float[1];						// 동력공급장치: 압력변환기(투인양동력)
 800143e:	4b95      	ldr	r3, [pc, #596]	@ (8001694 <FUN_DAC_Routine+0x500>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a95      	ldr	r2, [pc, #596]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001444:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
		Control.Float_Data.Dac4_Ch3_Volt	 =	RS485.HILS_UC_Output_Float[2];						// 동력공급장치: 유량계(투인양동력)
 8001448:	4b92      	ldr	r3, [pc, #584]	@ (8001694 <FUN_DAC_Routine+0x500>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	4a92      	ldr	r2, [pc, #584]	@ (8001698 <FUN_DAC_Routine+0x504>)
 800144e:	67d3      	str	r3, [r2, #124]	@ 0x7c
		Control.Float_Data.Dac3_Ch1_Volt	 =	RS485.HILS_UC_Output_Float[3];						// 동력공급장치 비상구동: 비례제어밸브 에러신호
 8001450:	4b90      	ldr	r3, [pc, #576]	@ (8001694 <FUN_DAC_Routine+0x500>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a90      	ldr	r2, [pc, #576]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001456:	6593      	str	r3, [r2, #88]	@ 0x58
		Control.Float_Data.Dac3_Ch0_Volt	 =	RS485.HILS_UC_Output_Float[6];						// 윈치조립체 권선구동 : 비례제어밸브 에러신호
 8001458:	4b8e      	ldr	r3, [pc, #568]	@ (8001694 <FUN_DAC_Routine+0x500>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a8e      	ldr	r2, [pc, #568]	@ (8001698 <FUN_DAC_Routine+0x504>)
 800145e:	6553      	str	r3, [r2, #84]	@ 0x54
		Control.Float_Data.Dac5_Ch3_Volt	 =	RS485.HILS_UC_Output_Float[10];						// 윈치조립체 : 장력센서
 8001460:	4b8c      	ldr	r3, [pc, #560]	@ (8001694 <FUN_DAC_Routine+0x500>)
 8001462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001464:	4a8c      	ldr	r2, [pc, #560]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001466:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
		Control.Float_Data.Dac4_Ch7_Volt	 =	RS485.HILS_UC_Output_Float[11];						// 투인양장치: 실린더1(팽창) 압력변환기
 800146a:	4b8a      	ldr	r3, [pc, #552]	@ (8001694 <FUN_DAC_Routine+0x500>)
 800146c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146e:	4a8a      	ldr	r2, [pc, #552]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001470:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
		Control.Float_Data.Dac4_Ch6_Volt	 =	RS485.HILS_UC_Output_Float[12];						// 투인양장치: 실린더1(수축) 압력변환기
 8001474:	4b87      	ldr	r3, [pc, #540]	@ (8001694 <FUN_DAC_Routine+0x500>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001478:	4a87      	ldr	r2, [pc, #540]	@ (8001698 <FUN_DAC_Routine+0x504>)
 800147a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
		Control.Float_Data.Dac5_Ch5_Volt	 =	RS485.HILS_UC_Output_Float[13];						// 투인양장치: 메인실린더1 LVDT
 800147e:	4b85      	ldr	r3, [pc, #532]	@ (8001694 <FUN_DAC_Routine+0x500>)
 8001480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001482:	4a85      	ldr	r2, [pc, #532]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001484:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
		Control.Float_Data.Dac3_Ch2_Volt	 =	RS485.HILS_UC_Output_Float[14];						// 투인양장치 메인실린더1: 비례제어밸브 에러신호
 8001488:	4b82      	ldr	r3, [pc, #520]	@ (8001694 <FUN_DAC_Routine+0x500>)
 800148a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800148c:	4a82      	ldr	r2, [pc, #520]	@ (8001698 <FUN_DAC_Routine+0x504>)
 800148e:	65d3      	str	r3, [r2, #92]	@ 0x5c
		Control.Float_Data.Dac4_Ch9_Volt	 =	RS485.HILS_UC_Output_Float[15];						// 투인양장치: 실린더2(팽창) 압력변환기
 8001490:	4b80      	ldr	r3, [pc, #512]	@ (8001694 <FUN_DAC_Routine+0x500>)
 8001492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001494:	4a80      	ldr	r2, [pc, #512]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
		Control.Float_Data.Dac4_Ch8_Volt	 =	RS485.HILS_UC_Output_Float[16];						// 투인양장치: 실린더2(수축) 압력변환기
 800149a:	4b7e      	ldr	r3, [pc, #504]	@ (8001694 <FUN_DAC_Routine+0x500>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	4a7e      	ldr	r2, [pc, #504]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80014a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
		Control.Float_Data.Dac5_Ch0_Volt	 =	RS485.HILS_UC_Output_Float[17];						// 투인양장치: 메인실린더2 LVDT
 80014a4:	4b7b      	ldr	r3, [pc, #492]	@ (8001694 <FUN_DAC_Routine+0x500>)
 80014a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a8:	4a7b      	ldr	r2, [pc, #492]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80014aa:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
		Control.Float_Data.Dac3_Ch3_Volt	 =	RS485.HILS_UC_Output_Float[18];						// 투인양장치 메인실린더2: 비례제어밸브 에러신호
 80014ae:	4b79      	ldr	r3, [pc, #484]	@ (8001694 <FUN_DAC_Routine+0x500>)
 80014b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b2:	4a79      	ldr	r2, [pc, #484]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80014b4:	6613      	str	r3, [r2, #96]	@ 0x60
		Control.Float_Data.Dac4_Ch11_Volt	 =	RS485.HILS_UC_Output_Float[19];						// 투인양장치: 서보실린더1(팽창) 압력변환기
 80014b6:	4b77      	ldr	r3, [pc, #476]	@ (8001694 <FUN_DAC_Routine+0x500>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	4a77      	ldr	r2, [pc, #476]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80014bc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
		Control.Float_Data.Dac4_Ch10_Volt	 =	RS485.HILS_UC_Output_Float[20];						// 투인양장치: 서보실린더1(수축) 압력변환기
 80014c0:	4b74      	ldr	r3, [pc, #464]	@ (8001694 <FUN_DAC_Routine+0x500>)
 80014c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014c4:	4a74      	ldr	r2, [pc, #464]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80014c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
		Control.Float_Data.Dac5_Ch6_Volt	 =	RS485.HILS_UC_Output_Float[21];						// 투인양장치: 서보실린더1 LVDT
 80014ca:	4b72      	ldr	r3, [pc, #456]	@ (8001694 <FUN_DAC_Routine+0x500>)
 80014cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ce:	4a72      	ldr	r2, [pc, #456]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80014d0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
		Control.Float_Data.Dac3_Ch4_Volt	 =	RS485.HILS_UC_Output_Float[22];						// 투인양장치 서보실린더1: 비례제어밸브 에러신호
 80014d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001694 <FUN_DAC_Routine+0x500>)
 80014d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d8:	4a6f      	ldr	r2, [pc, #444]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80014da:	6653      	str	r3, [r2, #100]	@ 0x64
		Control.Float_Data.Dac4_Ch13_Volt	 =	RS485.HILS_UC_Output_Float[23];						// 투인양장치: 서보실린더2(팽창) 압력변환기
 80014dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001694 <FUN_DAC_Routine+0x500>)
 80014de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e0:	4a6d      	ldr	r2, [pc, #436]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80014e2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
		Control.Float_Data.Dac4_Ch12_Volt	 =	RS485.HILS_UC_Output_Float[24];						// 투인양장치: 서보실린더2(수축) 압력변환기
 80014e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001694 <FUN_DAC_Routine+0x500>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ea:	4a6b      	ldr	r2, [pc, #428]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80014ec:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
		Control.Float_Data.Dac5_Ch1_Volt	 =	RS485.HILS_UC_Output_Float[25];						// 투인양장치: 서보실린더2 LVDT
 80014f0:	4b68      	ldr	r3, [pc, #416]	@ (8001694 <FUN_DAC_Routine+0x500>)
 80014f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014f4:	4a68      	ldr	r2, [pc, #416]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80014f6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
		Control.Float_Data.Dac3_Ch5_Volt	 =	RS485.HILS_UC_Output_Float[26];						// 투인양장치 서보실린더2: 비례제어밸브 에러신호
 80014fa:	4b66      	ldr	r3, [pc, #408]	@ (8001694 <FUN_DAC_Routine+0x500>)
 80014fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80014fe:	4a66      	ldr	r2, [pc, #408]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001500:	6693      	str	r3, [r2, #104]	@ 0x68
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH5, Control.Float_Data.Dac4_Ch5_Volt);		// 동력공급장치: 압력변환기(윈치동력)
 8001502:	4b65      	ldr	r3, [pc, #404]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001504:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8001508:	eeb0 0a67 	vmov.f32	s0, s15
 800150c:	2105      	movs	r1, #5
 800150e:	2001      	movs	r0, #1
 8001510:	f000 f928 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH4, Control.Float_Data.Dac4_Ch4_Volt);		// 동력공급장치: 압력변환기(투인양동력)
 8001514:	4b60      	ldr	r3, [pc, #384]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001516:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 800151a:	eeb0 0a67 	vmov.f32	s0, s15
 800151e:	2104      	movs	r1, #4
 8001520:	2001      	movs	r0, #1
 8001522:	f000 f91f 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH3, Control.Float_Data.Dac4_Ch3_Volt);		// 동력공급장치: 유량계(투인양동력)
 8001526:	4b5c      	ldr	r3, [pc, #368]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001528:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 800152c:	eeb0 0a67 	vmov.f32	s0, s15
 8001530:	2103      	movs	r1, #3
 8001532:	2001      	movs	r0, #1
 8001534:	f000 f916 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH1, Control.Float_Data.Dac3_Ch1_Volt);		// 동력공급장치 비상구동: 비례제어밸브 에러신호
 8001538:	4b57      	ldr	r3, [pc, #348]	@ (8001698 <FUN_DAC_Routine+0x504>)
 800153a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800153e:	eeb0 0a67 	vmov.f32	s0, s15
 8001542:	2101      	movs	r1, #1
 8001544:	2000      	movs	r0, #0
 8001546:	f000 f90d 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH0, Control.Float_Data.Dac3_Ch0_Volt);		// 윈치조립체 권선구동 : 비례제어밸브 에러신호
 800154a:	4b53      	ldr	r3, [pc, #332]	@ (8001698 <FUN_DAC_Routine+0x504>)
 800154c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	2100      	movs	r1, #0
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f904 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH3, Control.Float_Data.Dac5_Ch3_Volt);		// 윈치조립체 : 장력센서
 800155c:	4b4e      	ldr	r3, [pc, #312]	@ (8001698 <FUN_DAC_Routine+0x504>)
 800155e:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8001562:	eeb0 0a67 	vmov.f32	s0, s15
 8001566:	2103      	movs	r1, #3
 8001568:	2002      	movs	r0, #2
 800156a:	f000 f8fb 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH7, Control.Float_Data.Dac4_Ch7_Volt);		// 투인양장치: 실린더1(팽창) 압력변환기
 800156e:	4b4a      	ldr	r3, [pc, #296]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001570:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001574:	eeb0 0a67 	vmov.f32	s0, s15
 8001578:	2107      	movs	r1, #7
 800157a:	2001      	movs	r0, #1
 800157c:	f000 f8f2 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH6, Control.Float_Data.Dac4_Ch6_Volt);		// 투인양장치: 실린더1(수축) 압력변환기
 8001580:	4b45      	ldr	r3, [pc, #276]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001582:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	2106      	movs	r1, #6
 800158c:	2001      	movs	r0, #1
 800158e:	f000 f8e9 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH5, Control.Float_Data.Dac5_Ch5_Volt);		// 투인양장치: 메인실린더1 LVDT
 8001592:	4b41      	ldr	r3, [pc, #260]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001594:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	2105      	movs	r1, #5
 800159e:	2002      	movs	r0, #2
 80015a0:	f000 f8e0 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH2, Control.Float_Data.Dac3_Ch2_Volt);		// 투인양장치 메인실린더1: 비례제어밸브 에러신호
 80015a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80015a6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80015aa:	eeb0 0a67 	vmov.f32	s0, s15
 80015ae:	2102      	movs	r1, #2
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 f8d7 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH9, Control.Float_Data.Dac4_Ch9_Volt);		// 투인양장치: 실린더2(팽창) 압력변환기
 80015b6:	4b38      	ldr	r3, [pc, #224]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80015b8:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	2109      	movs	r1, #9
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 f8ce 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH8, Control.Float_Data.Dac4_Ch8_Volt);		// 투인양장치: 실린더2(수축) 압력변환기
 80015c8:	4b33      	ldr	r3, [pc, #204]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80015ca:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80015ce:	eeb0 0a67 	vmov.f32	s0, s15
 80015d2:	2108      	movs	r1, #8
 80015d4:	2001      	movs	r0, #1
 80015d6:	f000 f8c5 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH0, Control.Float_Data.Dac5_Ch0_Volt);		// 투인양장치: 메인실린더2 LVDT
 80015da:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80015dc:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 80015e0:	eeb0 0a67 	vmov.f32	s0, s15
 80015e4:	2100      	movs	r1, #0
 80015e6:	2002      	movs	r0, #2
 80015e8:	f000 f8bc 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH3, Control.Float_Data.Dac3_Ch3_Volt);		// 투인양장치 메인실린더2: 비례제어밸브 에러신호
 80015ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001698 <FUN_DAC_Routine+0x504>)
 80015ee:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	2103      	movs	r1, #3
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 f8b3 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH11, Control.Float_Data.Dac4_Ch11_Volt);		// 투인양장치: 서보실린더1(팽창) 압력변환기
 80015fe:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001600:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 8001604:	eeb0 0a67 	vmov.f32	s0, s15
 8001608:	210b      	movs	r1, #11
 800160a:	2001      	movs	r0, #1
 800160c:	f000 f8aa 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH10, Control.Float_Data.Dac4_Ch10_Volt);		// 투인양장치: 서보실린더1(수축) 압력변환기
 8001610:	4b21      	ldr	r3, [pc, #132]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001612:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8001616:	eeb0 0a67 	vmov.f32	s0, s15
 800161a:	210a      	movs	r1, #10
 800161c:	2001      	movs	r0, #1
 800161e:	f000 f8a1 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH6, Control.Float_Data.Dac5_Ch6_Volt);		// 투인양장치: 서보실린더1 LVDT
 8001622:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001624:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8001628:	eeb0 0a67 	vmov.f32	s0, s15
 800162c:	2106      	movs	r1, #6
 800162e:	2002      	movs	r0, #2
 8001630:	f000 f898 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH4, Control.Float_Data.Dac3_Ch4_Volt);		// 투인양장치 서보실린더1: 비례제어밸브 에러신호
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001636:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800163a:	eeb0 0a67 	vmov.f32	s0, s15
 800163e:	2104      	movs	r1, #4
 8001640:	2000      	movs	r0, #0
 8001642:	f000 f88f 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH13, Control.Float_Data.Dac4_Ch13_Volt);		// 투인양장치: 서보실린더2(팽창) 압력변환기
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <FUN_DAC_Routine+0x504>)
 8001648:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 800164c:	eeb0 0a67 	vmov.f32	s0, s15
 8001650:	210d      	movs	r1, #13
 8001652:	2001      	movs	r0, #1
 8001654:	f000 f886 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH12, Control.Float_Data.Dac4_Ch12_Volt);		// 투인양장치: 서보실린더2(수축) 압력변환기
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <FUN_DAC_Routine+0x504>)
 800165a:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 800165e:	eeb0 0a67 	vmov.f32	s0, s15
 8001662:	210c      	movs	r1, #12
 8001664:	2001      	movs	r0, #1
 8001666:	f000 f87d 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH1, Control.Float_Data.Dac5_Ch1_Volt);		// 투인양장치: 서보실린더2 LVDT
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <FUN_DAC_Routine+0x504>)
 800166c:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	2101      	movs	r1, #1
 8001676:	2002      	movs	r0, #2
 8001678:	f000 f874 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
		FUN_DAC_Converter_set_dac_code(DAC3_CH_SEL, DAC3_CH5, Control.Float_Data.Dac3_Ch5_Volt);		// 투인양장치 서보실린더2: 비례제어밸브 에러신호
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <FUN_DAC_Routine+0x504>)
 800167e:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	2105      	movs	r1, #5
 8001688:	2000      	movs	r0, #0
 800168a:	f000 f86b 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000d90 	.word	0x20000d90
 8001698:	20000154 	.word	0x20000154

0800169c <DAC_Converter_4ma_Init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void DAC_Converter_4ma_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	//SPI3,5 송신을 통해 초기 DAC값을 4mA로 설정
	FUN_DAC_Converter_set_dac_code(SPI_4,		DAC4_CH5, 	mA_4);		// 동력공급장치: 압력변환기(윈치동력)
 80016a0:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80016a4:	2105      	movs	r1, #5
 80016a6:	2001      	movs	r0, #1
 80016a8:	f000 f85c 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_4,		DAC4_CH4, 	mA_4);		// 동력공급장치: 압력변환기(투인양동력)
 80016ac:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80016b0:	2104      	movs	r1, #4
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 f856 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_4,		DAC4_CH3, 	mA_4);		// 동력공급장치: 유량계(투인양동력)
 80016b8:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80016bc:	2103      	movs	r1, #3
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 f850 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_5,		DAC5_CH3, 	mA_4);		// 윈치조립체 : 장력센서
 80016c4:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80016c8:	2103      	movs	r1, #3
 80016ca:	2002      	movs	r0, #2
 80016cc:	f000 f84a 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_4,		DAC4_CH7, 	mA_4);		// 투인양장치: 실린더1(팽창) 압력변환기
 80016d0:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80016d4:	2107      	movs	r1, #7
 80016d6:	2001      	movs	r0, #1
 80016d8:	f000 f844 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_4,		DAC4_CH6, 	mA_4);		// 투인양장치: 실린더1(수축) 압력변환기
 80016dc:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80016e0:	2106      	movs	r1, #6
 80016e2:	2001      	movs	r0, #1
 80016e4:	f000 f83e 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_5,		DAC5_CH5, 	mA_4);		// 투인양장치: 메인실린더1
 80016e8:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80016ec:	2105      	movs	r1, #5
 80016ee:	2002      	movs	r0, #2
 80016f0:	f000 f838 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_4,		DAC4_CH9, 	mA_4);		// 투인양장치: 실린더2(팽창) 압력변환기
 80016f4:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80016f8:	2109      	movs	r1, #9
 80016fa:	2001      	movs	r0, #1
 80016fc:	f000 f832 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_4,		DAC4_CH8, 	mA_4);		// 투인양장치: 실린더2(수축) 압력변환기
 8001700:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001704:	2108      	movs	r1, #8
 8001706:	2001      	movs	r0, #1
 8001708:	f000 f82c 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_5,		DAC5_CH0, 	mA_4);		// 투인양장치: 메인실린더2 LVDT
 800170c:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001710:	2100      	movs	r1, #0
 8001712:	2002      	movs	r0, #2
 8001714:	f000 f826 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_4,		DAC4_CH11,	mA_4);		// 투인양장치: 서보실린더1(팽창) 압력변환기
 8001718:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800171c:	210b      	movs	r1, #11
 800171e:	2001      	movs	r0, #1
 8001720:	f000 f820 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_4,		DAC4_CH10,	mA_4);		// 투인양장치: 서보실린더1(수축) 압력변환기
 8001724:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001728:	210a      	movs	r1, #10
 800172a:	2001      	movs	r0, #1
 800172c:	f000 f81a 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_5,		DAC5_CH6, 	mA_4);		// 투인양장치: 서보실린더1 LVDT
 8001730:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001734:	2106      	movs	r1, #6
 8001736:	2002      	movs	r0, #2
 8001738:	f000 f814 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_4,		DAC4_CH13,	mA_4);		// 투인양장치: 서보실린더2(팽창) 압력변환기
 800173c:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001740:	210d      	movs	r1, #13
 8001742:	2001      	movs	r0, #1
 8001744:	f000 f80e 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_4,		DAC4_CH12,	mA_4);		// 투인양장치: 서보실린더2(수축) 압력변환기
 8001748:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800174c:	210c      	movs	r1, #12
 800174e:	2001      	movs	r0, #1
 8001750:	f000 f808 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(SPI_5,		DAC5_CH1, 	mA_4);		// 투인양장치: 서보실린더2 LVDT
 8001754:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001758:	2101      	movs	r1, #1
 800175a:	2002      	movs	r0, #2
 800175c:	f000 f802 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <FUN_DAC_Converter_set_dac_code>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_DAC_Converter_set_dac_code(uint8_t SPI_Select, uint8_t u1t_dac_address, float ft_dac_volt)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	ed87 0a00 	vstr	s0, [r7]
 8001772:	71fb      	strb	r3, [r7, #7]
 8001774:	4613      	mov	r3, r2
 8001776:	71bb      	strb	r3, [r7, #6]
	float ft_dummy = 0;
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
	float ft_convert_val = 0;
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]

	if(SPI_Select == SPI_3)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 808e 	bne.w	80018a8 <FUN_DAC_Converter_set_dac_code+0x144>
	{
//		ft_dummy = (ft_dac_volt / 13) * 10;
		ft_dummy = ft_dac_volt;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	60fb      	str	r3, [r7, #12]

		// 윈치조립체 권선구동 : 비례제어밸브 에러신호
		if(u1t_dac_address == DAC3_CH0)
 8001790:	79bb      	ldrb	r3, [r7, #6]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d110      	bne.n	80017b8 <FUN_DAC_Converter_set_dac_code+0x54>
		{
			ft_convert_val = sfun_DAC_Converter_gain_offset(ft_dummy, Offset_DAC3[0], Gain_DAC3[0]);
 8001796:	4bbe      	ldr	r3, [pc, #760]	@ (8001a90 <FUN_DAC_Converter_set_dac_code+0x32c>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	4bbd      	ldr	r3, [pc, #756]	@ (8001a94 <FUN_DAC_Converter_set_dac_code+0x330>)
 800179e:	ed93 7a00 	vldr	s14, [r3]
 80017a2:	eeb0 1a47 	vmov.f32	s2, s14
 80017a6:	eef0 0a67 	vmov.f32	s1, s15
 80017aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80017ae:	f000 fa69 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 80017b2:	ed87 0a02 	vstr	s0, [r7, #8]
 80017b6:	e06f      	b.n	8001898 <FUN_DAC_Converter_set_dac_code+0x134>

		}
		// 윈치조립체 비상구동 : 비례제어밸브 에러신호
		else if(u1t_dac_address == DAC3_CH1)
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d110      	bne.n	80017e0 <FUN_DAC_Converter_set_dac_code+0x7c>
		{
			ft_convert_val = sfun_DAC_Converter_gain_offset(ft_dummy, Offset_DAC3[1], Gain_DAC3[1]);
 80017be:	4bb4      	ldr	r3, [pc, #720]	@ (8001a90 <FUN_DAC_Converter_set_dac_code+0x32c>)
 80017c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80017c4:	4bb3      	ldr	r3, [pc, #716]	@ (8001a94 <FUN_DAC_Converter_set_dac_code+0x330>)
 80017c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80017ca:	eeb0 1a47 	vmov.f32	s2, s14
 80017ce:	eef0 0a67 	vmov.f32	s1, s15
 80017d2:	ed97 0a03 	vldr	s0, [r7, #12]
 80017d6:	f000 fa55 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 80017da:	ed87 0a02 	vstr	s0, [r7, #8]
 80017de:	e05b      	b.n	8001898 <FUN_DAC_Converter_set_dac_code+0x134>

		}
		// 투인양장치 메인실린더1 : 비례제어밸브 에러신호
		else if(u1t_dac_address == DAC3_CH2)
 80017e0:	79bb      	ldrb	r3, [r7, #6]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d110      	bne.n	8001808 <FUN_DAC_Converter_set_dac_code+0xa4>
		{

			ft_convert_val = sfun_DAC_Converter_gain_offset(ft_dummy, Offset_DAC3[2], Gain_DAC3[2]);
 80017e6:	4baa      	ldr	r3, [pc, #680]	@ (8001a90 <FUN_DAC_Converter_set_dac_code+0x32c>)
 80017e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017ec:	4ba9      	ldr	r3, [pc, #676]	@ (8001a94 <FUN_DAC_Converter_set_dac_code+0x330>)
 80017ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80017f2:	eeb0 1a47 	vmov.f32	s2, s14
 80017f6:	eef0 0a67 	vmov.f32	s1, s15
 80017fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80017fe:	f000 fa41 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001802:	ed87 0a02 	vstr	s0, [r7, #8]
 8001806:	e047      	b.n	8001898 <FUN_DAC_Converter_set_dac_code+0x134>

		}
		// 투인양장치 메인실린더2 : 비례제어밸브 에러신호
		else if(u1t_dac_address == DAC3_CH3)
 8001808:	79bb      	ldrb	r3, [r7, #6]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d110      	bne.n	8001830 <FUN_DAC_Converter_set_dac_code+0xcc>
		{
			ft_convert_val = sfun_DAC_Converter_gain_offset(ft_dummy, Offset_DAC3[3], Gain_DAC3[3]);
 800180e:	4ba0      	ldr	r3, [pc, #640]	@ (8001a90 <FUN_DAC_Converter_set_dac_code+0x32c>)
 8001810:	edd3 7a03 	vldr	s15, [r3, #12]
 8001814:	4b9f      	ldr	r3, [pc, #636]	@ (8001a94 <FUN_DAC_Converter_set_dac_code+0x330>)
 8001816:	ed93 7a03 	vldr	s14, [r3, #12]
 800181a:	eeb0 1a47 	vmov.f32	s2, s14
 800181e:	eef0 0a67 	vmov.f32	s1, s15
 8001822:	ed97 0a03 	vldr	s0, [r7, #12]
 8001826:	f000 fa2d 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 800182a:	ed87 0a02 	vstr	s0, [r7, #8]
 800182e:	e033      	b.n	8001898 <FUN_DAC_Converter_set_dac_code+0x134>

		}
		// 투인양장치 서보실린더1 : 비례제어밸브 에러신호
		else if(u1t_dac_address == DAC3_CH4)
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d110      	bne.n	8001858 <FUN_DAC_Converter_set_dac_code+0xf4>
		{
			ft_convert_val = sfun_DAC_Converter_gain_offset(ft_dummy, Offset_DAC3[4], Gain_DAC3[4]);
 8001836:	4b96      	ldr	r3, [pc, #600]	@ (8001a90 <FUN_DAC_Converter_set_dac_code+0x32c>)
 8001838:	edd3 7a04 	vldr	s15, [r3, #16]
 800183c:	4b95      	ldr	r3, [pc, #596]	@ (8001a94 <FUN_DAC_Converter_set_dac_code+0x330>)
 800183e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001842:	eeb0 1a47 	vmov.f32	s2, s14
 8001846:	eef0 0a67 	vmov.f32	s1, s15
 800184a:	ed97 0a03 	vldr	s0, [r7, #12]
 800184e:	f000 fa19 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001852:	ed87 0a02 	vstr	s0, [r7, #8]
 8001856:	e01f      	b.n	8001898 <FUN_DAC_Converter_set_dac_code+0x134>

		}
		// 투인양장치 서보실린더2 : 비례제어밸브 에러신호
		else if(u1t_dac_address == DAC3_CH5)
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	2b05      	cmp	r3, #5
 800185c:	d110      	bne.n	8001880 <FUN_DAC_Converter_set_dac_code+0x11c>
		{
			ft_convert_val = sfun_DAC_Converter_gain_offset(ft_dummy, Offset_DAC3[5], Gain_DAC3[5]);
 800185e:	4b8c      	ldr	r3, [pc, #560]	@ (8001a90 <FUN_DAC_Converter_set_dac_code+0x32c>)
 8001860:	edd3 7a05 	vldr	s15, [r3, #20]
 8001864:	4b8b      	ldr	r3, [pc, #556]	@ (8001a94 <FUN_DAC_Converter_set_dac_code+0x330>)
 8001866:	ed93 7a05 	vldr	s14, [r3, #20]
 800186a:	eeb0 1a47 	vmov.f32	s2, s14
 800186e:	eef0 0a67 	vmov.f32	s1, s15
 8001872:	ed97 0a03 	vldr	s0, [r7, #12]
 8001876:	f000 fa05 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 800187a:	ed87 0a02 	vstr	s0, [r7, #8]
 800187e:	e00b      	b.n	8001898 <FUN_DAC_Converter_set_dac_code+0x134>

		}
		// SPARE
		else
		{
			ft_convert_val = ((ft_dac_volt / 13) * 10);	// 0 ~ 13V => 0 ~ 10V
 8001880:	ed97 7a00 	vldr	s14, [r7]
 8001884:	eef2 6a0a 	vmov.f32	s13, #42	@ 0x41500000  13.0
 8001888:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001894:	edc7 7a02 	vstr	s15, [r7, #8]
		}
		FUN_DAC_LTC2666_Get_Dac_Code(SPI_3, u1t_dac_address, ft_convert_val);
 8001898:	79bb      	ldrb	r3, [r7, #6]
 800189a:	ed97 0a02 	vldr	s0, [r7, #8]
 800189e:	4619      	mov	r1, r3
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 fa7f 	bl	8001da4 <FUN_DAC_LTC2666_Get_Dac_Code>
		// 전류 부호 변환 :(-V -> +mA)로 출력
		ft_convert_val = -ft_dummy;

		FUN_DAC_LTC2666_Get_Dac_Code(SPI_5, u1t_dac_address, ft_convert_val);
	} else ;
}
 80018a6:	e1e0      	b.n	8001c6a <FUN_DAC_Converter_set_dac_code+0x506>
	else if(SPI_Select == SPI_4)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	f040 812d 	bne.w	8001b0a <FUN_DAC_Converter_set_dac_code+0x3a6>
		if(u1t_dac_address == DAC4_CH0)
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d110      	bne.n	80018d8 <FUN_DAC_Converter_set_dac_code+0x174>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[0], Gain_DAC4[0]);
 80018b6:	4b78      	ldr	r3, [pc, #480]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	4b77      	ldr	r3, [pc, #476]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 80018be:	ed93 7a00 	vldr	s14, [r3]
 80018c2:	eeb0 1a47 	vmov.f32	s2, s14
 80018c6:	eef0 0a67 	vmov.f32	s1, s15
 80018ca:	ed97 0a00 	vldr	s0, [r7]
 80018ce:	f000 f9d9 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 80018d2:	ed87 0a03 	vstr	s0, [r7, #12]
 80018d6:	e10a      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH1)
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d110      	bne.n	8001900 <FUN_DAC_Converter_set_dac_code+0x19c>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[1], Gain_DAC4[1]);
 80018de:	4b6e      	ldr	r3, [pc, #440]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 80018e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018e4:	4b6d      	ldr	r3, [pc, #436]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 80018e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80018ea:	eeb0 1a47 	vmov.f32	s2, s14
 80018ee:	eef0 0a67 	vmov.f32	s1, s15
 80018f2:	ed97 0a00 	vldr	s0, [r7]
 80018f6:	f000 f9c5 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 80018fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80018fe:	e0f6      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH2)
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d110      	bne.n	8001928 <FUN_DAC_Converter_set_dac_code+0x1c4>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[2], Gain_DAC4[2]);
 8001906:	4b64      	ldr	r3, [pc, #400]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 8001908:	edd3 7a02 	vldr	s15, [r3, #8]
 800190c:	4b63      	ldr	r3, [pc, #396]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 800190e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001912:	eeb0 1a47 	vmov.f32	s2, s14
 8001916:	eef0 0a67 	vmov.f32	s1, s15
 800191a:	ed97 0a00 	vldr	s0, [r7]
 800191e:	f000 f9b1 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001922:	ed87 0a03 	vstr	s0, [r7, #12]
 8001926:	e0e2      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH3)
 8001928:	79bb      	ldrb	r3, [r7, #6]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d110      	bne.n	8001950 <FUN_DAC_Converter_set_dac_code+0x1ec>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[3], Gain_DAC4[3]);
 800192e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 8001930:	edd3 7a03 	vldr	s15, [r3, #12]
 8001934:	4b59      	ldr	r3, [pc, #356]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 8001936:	ed93 7a03 	vldr	s14, [r3, #12]
 800193a:	eeb0 1a47 	vmov.f32	s2, s14
 800193e:	eef0 0a67 	vmov.f32	s1, s15
 8001942:	ed97 0a00 	vldr	s0, [r7]
 8001946:	f000 f99d 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 800194a:	ed87 0a03 	vstr	s0, [r7, #12]
 800194e:	e0ce      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH4)
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	2b04      	cmp	r3, #4
 8001954:	d110      	bne.n	8001978 <FUN_DAC_Converter_set_dac_code+0x214>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[4], Gain_DAC4[4]);
 8001956:	4b50      	ldr	r3, [pc, #320]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 8001958:	edd3 7a04 	vldr	s15, [r3, #16]
 800195c:	4b4f      	ldr	r3, [pc, #316]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 800195e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001962:	eeb0 1a47 	vmov.f32	s2, s14
 8001966:	eef0 0a67 	vmov.f32	s1, s15
 800196a:	ed97 0a00 	vldr	s0, [r7]
 800196e:	f000 f989 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001972:	ed87 0a03 	vstr	s0, [r7, #12]
 8001976:	e0ba      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH5)
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	2b05      	cmp	r3, #5
 800197c:	d110      	bne.n	80019a0 <FUN_DAC_Converter_set_dac_code+0x23c>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[5], Gain_DAC4[5]);
 800197e:	4b46      	ldr	r3, [pc, #280]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 8001980:	edd3 7a05 	vldr	s15, [r3, #20]
 8001984:	4b45      	ldr	r3, [pc, #276]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 8001986:	ed93 7a05 	vldr	s14, [r3, #20]
 800198a:	eeb0 1a47 	vmov.f32	s2, s14
 800198e:	eef0 0a67 	vmov.f32	s1, s15
 8001992:	ed97 0a00 	vldr	s0, [r7]
 8001996:	f000 f975 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 800199a:	ed87 0a03 	vstr	s0, [r7, #12]
 800199e:	e0a6      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH6)
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d110      	bne.n	80019c8 <FUN_DAC_Converter_set_dac_code+0x264>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[6], Gain_DAC4[6]);
 80019a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 80019a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80019ac:	4b3b      	ldr	r3, [pc, #236]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 80019ae:	ed93 7a06 	vldr	s14, [r3, #24]
 80019b2:	eeb0 1a47 	vmov.f32	s2, s14
 80019b6:	eef0 0a67 	vmov.f32	s1, s15
 80019ba:	ed97 0a00 	vldr	s0, [r7]
 80019be:	f000 f961 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 80019c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80019c6:	e092      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH7)
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	2b07      	cmp	r3, #7
 80019cc:	d110      	bne.n	80019f0 <FUN_DAC_Converter_set_dac_code+0x28c>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[7], Gain_DAC4[7]);
 80019ce:	4b32      	ldr	r3, [pc, #200]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 80019d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80019d4:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 80019d6:	ed93 7a07 	vldr	s14, [r3, #28]
 80019da:	eeb0 1a47 	vmov.f32	s2, s14
 80019de:	eef0 0a67 	vmov.f32	s1, s15
 80019e2:	ed97 0a00 	vldr	s0, [r7]
 80019e6:	f000 f94d 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 80019ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80019ee:	e07e      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH8)
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d110      	bne.n	8001a18 <FUN_DAC_Converter_set_dac_code+0x2b4>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[8], Gain_DAC4[8]);
 80019f6:	4b28      	ldr	r3, [pc, #160]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 80019f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80019fc:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 80019fe:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a02:	eeb0 1a47 	vmov.f32	s2, s14
 8001a06:	eef0 0a67 	vmov.f32	s1, s15
 8001a0a:	ed97 0a00 	vldr	s0, [r7]
 8001a0e:	f000 f939 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001a12:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a16:	e06a      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH9)
 8001a18:	79bb      	ldrb	r3, [r7, #6]
 8001a1a:	2b09      	cmp	r3, #9
 8001a1c:	d110      	bne.n	8001a40 <FUN_DAC_Converter_set_dac_code+0x2dc>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[9], Gain_DAC4[9]);
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 8001a20:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001a24:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 8001a26:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001a2a:	eeb0 1a47 	vmov.f32	s2, s14
 8001a2e:	eef0 0a67 	vmov.f32	s1, s15
 8001a32:	ed97 0a00 	vldr	s0, [r7]
 8001a36:	f000 f925 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001a3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a3e:	e056      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH10)
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	2b0a      	cmp	r3, #10
 8001a44:	d110      	bne.n	8001a68 <FUN_DAC_Converter_set_dac_code+0x304>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[10], Gain_DAC4[10]);
 8001a46:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 8001a48:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 8001a4e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001a52:	eeb0 1a47 	vmov.f32	s2, s14
 8001a56:	eef0 0a67 	vmov.f32	s1, s15
 8001a5a:	ed97 0a00 	vldr	s0, [r7]
 8001a5e:	f000 f911 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001a62:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a66:	e042      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH11)
 8001a68:	79bb      	ldrb	r3, [r7, #6]
 8001a6a:	2b0b      	cmp	r3, #11
 8001a6c:	d118      	bne.n	8001aa0 <FUN_DAC_Converter_set_dac_code+0x33c>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[11], Gain_DAC4[11]);
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <FUN_DAC_Converter_set_dac_code+0x334>)
 8001a70:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <FUN_DAC_Converter_set_dac_code+0x338>)
 8001a76:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001a7a:	eeb0 1a47 	vmov.f32	s2, s14
 8001a7e:	eef0 0a67 	vmov.f32	s1, s15
 8001a82:	ed97 0a00 	vldr	s0, [r7]
 8001a86:	f000 f8fd 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001a8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a8e:	e02e      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
 8001a90:	20000250 	.word	0x20000250
 8001a94:	200000b8 	.word	0x200000b8
 8001a98:	20000268 	.word	0x20000268
 8001a9c:	20000060 	.word	0x20000060
		else if(u1t_dac_address == DAC4_CH12)
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d110      	bne.n	8001ac8 <FUN_DAC_Converter_set_dac_code+0x364>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[12], Gain_DAC4[12]);
 8001aa6:	4b73      	ldr	r3, [pc, #460]	@ (8001c74 <FUN_DAC_Converter_set_dac_code+0x510>)
 8001aa8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001aac:	4b72      	ldr	r3, [pc, #456]	@ (8001c78 <FUN_DAC_Converter_set_dac_code+0x514>)
 8001aae:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001ab2:	eeb0 1a47 	vmov.f32	s2, s14
 8001ab6:	eef0 0a67 	vmov.f32	s1, s15
 8001aba:	ed97 0a00 	vldr	s0, [r7]
 8001abe:	f000 f8e1 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001ac2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ac6:	e012      	b.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
		else if(u1t_dac_address == DAC4_CH13)
 8001ac8:	79bb      	ldrb	r3, [r7, #6]
 8001aca:	2b0d      	cmp	r3, #13
 8001acc:	d10f      	bne.n	8001aee <FUN_DAC_Converter_set_dac_code+0x38a>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC4[13], Gain_DAC4[13]);
 8001ace:	4b69      	ldr	r3, [pc, #420]	@ (8001c74 <FUN_DAC_Converter_set_dac_code+0x510>)
 8001ad0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001ad4:	4b68      	ldr	r3, [pc, #416]	@ (8001c78 <FUN_DAC_Converter_set_dac_code+0x514>)
 8001ad6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001ada:	eeb0 1a47 	vmov.f32	s2, s14
 8001ade:	eef0 0a67 	vmov.f32	s1, s15
 8001ae2:	ed97 0a00 	vldr	s0, [r7]
 8001ae6:	f000 f8cd 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001aea:	ed87 0a03 	vstr	s0, [r7, #12]
		ft_convert_val = -ft_dummy;
 8001aee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af2:	eef1 7a67 	vneg.f32	s15, s15
 8001af6:	edc7 7a02 	vstr	s15, [r7, #8]
		FUN_DAC_LTC2668_Get_Dac_Code(SPI_4, u1t_dac_address, ft_convert_val);
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001b00:	4619      	mov	r1, r3
 8001b02:	2001      	movs	r0, #1
 8001b04:	f000 fad2 	bl	80020ac <FUN_DAC_LTC2668_Get_Dac_Code>
}
 8001b08:	e0af      	b.n	8001c6a <FUN_DAC_Converter_set_dac_code+0x506>
	else if(SPI_Select == SPI_5)
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	f040 80ac 	bne.w	8001c6a <FUN_DAC_Converter_set_dac_code+0x506>
		if(u1t_dac_address == DAC5_CH3)
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d110      	bne.n	8001b3a <FUN_DAC_Converter_set_dac_code+0x3d6>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC5[3], Gain_DAC5[3]);
 8001b18:	4b58      	ldr	r3, [pc, #352]	@ (8001c7c <FUN_DAC_Converter_set_dac_code+0x518>)
 8001b1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b1e:	4b58      	ldr	r3, [pc, #352]	@ (8001c80 <FUN_DAC_Converter_set_dac_code+0x51c>)
 8001b20:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b24:	eeb0 1a47 	vmov.f32	s2, s14
 8001b28:	eef0 0a67 	vmov.f32	s1, s15
 8001b2c:	ed97 0a00 	vldr	s0, [r7]
 8001b30:	f000 f8a8 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001b34:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b38:	e08a      	b.n	8001c50 <FUN_DAC_Converter_set_dac_code+0x4ec>
		else if(u1t_dac_address == DAC5_CH5)
 8001b3a:	79bb      	ldrb	r3, [r7, #6]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d110      	bne.n	8001b62 <FUN_DAC_Converter_set_dac_code+0x3fe>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC5[5], Gain_DAC5[5]);
 8001b40:	4b4e      	ldr	r3, [pc, #312]	@ (8001c7c <FUN_DAC_Converter_set_dac_code+0x518>)
 8001b42:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b46:	4b4e      	ldr	r3, [pc, #312]	@ (8001c80 <FUN_DAC_Converter_set_dac_code+0x51c>)
 8001b48:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b4c:	eeb0 1a47 	vmov.f32	s2, s14
 8001b50:	eef0 0a67 	vmov.f32	s1, s15
 8001b54:	ed97 0a00 	vldr	s0, [r7]
 8001b58:	f000 f894 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001b5c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b60:	e076      	b.n	8001c50 <FUN_DAC_Converter_set_dac_code+0x4ec>
		else if(u1t_dac_address == DAC5_CH0)
 8001b62:	79bb      	ldrb	r3, [r7, #6]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d110      	bne.n	8001b8a <FUN_DAC_Converter_set_dac_code+0x426>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC5[0], Gain_DAC5[0]);
 8001b68:	4b44      	ldr	r3, [pc, #272]	@ (8001c7c <FUN_DAC_Converter_set_dac_code+0x518>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	4b44      	ldr	r3, [pc, #272]	@ (8001c80 <FUN_DAC_Converter_set_dac_code+0x51c>)
 8001b70:	ed93 7a00 	vldr	s14, [r3]
 8001b74:	eeb0 1a47 	vmov.f32	s2, s14
 8001b78:	eef0 0a67 	vmov.f32	s1, s15
 8001b7c:	ed97 0a00 	vldr	s0, [r7]
 8001b80:	f000 f880 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001b84:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b88:	e062      	b.n	8001c50 <FUN_DAC_Converter_set_dac_code+0x4ec>
		else if(u1t_dac_address == DAC5_CH6)
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	2b06      	cmp	r3, #6
 8001b8e:	d110      	bne.n	8001bb2 <FUN_DAC_Converter_set_dac_code+0x44e>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC5[6], Gain_DAC5[6]);
 8001b90:	4b3a      	ldr	r3, [pc, #232]	@ (8001c7c <FUN_DAC_Converter_set_dac_code+0x518>)
 8001b92:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b96:	4b3a      	ldr	r3, [pc, #232]	@ (8001c80 <FUN_DAC_Converter_set_dac_code+0x51c>)
 8001b98:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b9c:	eeb0 1a47 	vmov.f32	s2, s14
 8001ba0:	eef0 0a67 	vmov.f32	s1, s15
 8001ba4:	ed97 0a00 	vldr	s0, [r7]
 8001ba8:	f000 f86c 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001bac:	ed87 0a03 	vstr	s0, [r7, #12]
 8001bb0:	e04e      	b.n	8001c50 <FUN_DAC_Converter_set_dac_code+0x4ec>
		else if(u1t_dac_address == DAC5_CH1)
 8001bb2:	79bb      	ldrb	r3, [r7, #6]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d110      	bne.n	8001bda <FUN_DAC_Converter_set_dac_code+0x476>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC5[1], Gain_DAC5[1]);
 8001bb8:	4b30      	ldr	r3, [pc, #192]	@ (8001c7c <FUN_DAC_Converter_set_dac_code+0x518>)
 8001bba:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bbe:	4b30      	ldr	r3, [pc, #192]	@ (8001c80 <FUN_DAC_Converter_set_dac_code+0x51c>)
 8001bc0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bc4:	eeb0 1a47 	vmov.f32	s2, s14
 8001bc8:	eef0 0a67 	vmov.f32	s1, s15
 8001bcc:	ed97 0a00 	vldr	s0, [r7]
 8001bd0:	f000 f858 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001bd4:	ed87 0a03 	vstr	s0, [r7, #12]
 8001bd8:	e03a      	b.n	8001c50 <FUN_DAC_Converter_set_dac_code+0x4ec>
		else if(u1t_dac_address == DAC5_CH7)
 8001bda:	79bb      	ldrb	r3, [r7, #6]
 8001bdc:	2b07      	cmp	r3, #7
 8001bde:	d110      	bne.n	8001c02 <FUN_DAC_Converter_set_dac_code+0x49e>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC5[7], Gain_DAC5[7]);
 8001be0:	4b26      	ldr	r3, [pc, #152]	@ (8001c7c <FUN_DAC_Converter_set_dac_code+0x518>)
 8001be2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001be6:	4b26      	ldr	r3, [pc, #152]	@ (8001c80 <FUN_DAC_Converter_set_dac_code+0x51c>)
 8001be8:	ed93 7a07 	vldr	s14, [r3, #28]
 8001bec:	eeb0 1a47 	vmov.f32	s2, s14
 8001bf0:	eef0 0a67 	vmov.f32	s1, s15
 8001bf4:	ed97 0a00 	vldr	s0, [r7]
 8001bf8:	f000 f844 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001bfc:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c00:	e026      	b.n	8001c50 <FUN_DAC_Converter_set_dac_code+0x4ec>
		else if(u1t_dac_address == DAC5_CH2)
 8001c02:	79bb      	ldrb	r3, [r7, #6]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d110      	bne.n	8001c2a <FUN_DAC_Converter_set_dac_code+0x4c6>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC5[2], Gain_DAC5[2]);
 8001c08:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <FUN_DAC_Converter_set_dac_code+0x518>)
 8001c0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <FUN_DAC_Converter_set_dac_code+0x51c>)
 8001c10:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c14:	eeb0 1a47 	vmov.f32	s2, s14
 8001c18:	eef0 0a67 	vmov.f32	s1, s15
 8001c1c:	ed97 0a00 	vldr	s0, [r7]
 8001c20:	f000 f830 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001c24:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c28:	e012      	b.n	8001c50 <FUN_DAC_Converter_set_dac_code+0x4ec>
		else if(u1t_dac_address == DAC5_CH4)
 8001c2a:	79bb      	ldrb	r3, [r7, #6]
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d10f      	bne.n	8001c50 <FUN_DAC_Converter_set_dac_code+0x4ec>
			ft_dummy = sfun_DAC_Converter_gain_offset(ft_dac_volt, Offset_DAC5[4], Gain_DAC5[4]);
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <FUN_DAC_Converter_set_dac_code+0x518>)
 8001c32:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c36:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <FUN_DAC_Converter_set_dac_code+0x51c>)
 8001c38:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c3c:	eeb0 1a47 	vmov.f32	s2, s14
 8001c40:	eef0 0a67 	vmov.f32	s1, s15
 8001c44:	ed97 0a00 	vldr	s0, [r7]
 8001c48:	f000 f81c 	bl	8001c84 <sfun_DAC_Converter_gain_offset>
 8001c4c:	ed87 0a03 	vstr	s0, [r7, #12]
		ft_convert_val = -ft_dummy;
 8001c50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c54:	eef1 7a67 	vneg.f32	s15, s15
 8001c58:	edc7 7a02 	vstr	s15, [r7, #8]
		FUN_DAC_LTC2666_Get_Dac_Code(SPI_5, u1t_dac_address, ft_convert_val);
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001c62:	4619      	mov	r1, r3
 8001c64:	2002      	movs	r0, #2
 8001c66:	f000 f89d 	bl	8001da4 <FUN_DAC_LTC2666_Get_Dac_Code>
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000268 	.word	0x20000268
 8001c78:	20000060 	.word	0x20000060
 8001c7c:	200002a0 	.word	0x200002a0
 8001c80:	20000098 	.word	0x20000098

08001c84 <sfun_DAC_Converter_gain_offset>:
/****************************************************************************/
/*	Overview	:	각 출력별 DAC Gain 조절										*/
/*	Return value:	void													*/
/****************************************************************************/
static float sfun_DAC_Converter_gain_offset(float ft_data, float ft_offset, float ft_gain)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c92:	ed87 1a01 	vstr	s2, [r7, #4]
	float ft_val = 0;
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
	ft_val = (ft_data + ft_offset) / ft_gain;	// 0 ~ 13V => 0 ~ 10V
 8001c9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca4:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001ca8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb0:	edc7 7a05 	vstr	s15, [r7, #20]

	return ft_val;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	ee07 3a90 	vmov	s15, r3
}
 8001cba:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <FUN_DAC_Converter_Gripper>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_DAC_Converter_Gripper(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	Control.Float_Data.Dac5_Ch7_Volt = RS485.Gripper_Output_Float[0];				// 투인양장치: 그립퍼 LVDT1
 8001ccc:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <FUN_DAC_Converter_Gripper+0x64>)
 8001cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cd2:	4a17      	ldr	r2, [pc, #92]	@ (8001d30 <FUN_DAC_Converter_Gripper+0x68>)
 8001cd4:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
	Control.Float_Data.Dac5_Ch2_Volt = RS485.Gripper_Output_Float[1];				// 투인양장치: 그립퍼 LVDT2
 8001cd8:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <FUN_DAC_Converter_Gripper+0x64>)
 8001cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cde:	4a14      	ldr	r2, [pc, #80]	@ (8001d30 <FUN_DAC_Converter_Gripper+0x68>)
 8001ce0:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
	Control.Float_Data.Dac5_Ch4_Volt = RS485.Gripper_Output_Float[2];				// 투인양장치: 그립퍼 LVDT3
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <FUN_DAC_Converter_Gripper+0x64>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cea:	4a11      	ldr	r2, [pc, #68]	@ (8001d30 <FUN_DAC_Converter_Gripper+0x68>)
 8001cec:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8

	FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH7, Control.Float_Data.Dac5_Ch7_Volt);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <FUN_DAC_Converter_Gripper+0x68>)
 8001cf2:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8001cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfa:	2107      	movs	r1, #7
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f7ff fd31 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH2, Control.Float_Data.Dac5_Ch2_Volt);
 8001d02:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <FUN_DAC_Converter_Gripper+0x68>)
 8001d04:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8001d08:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	2002      	movs	r0, #2
 8001d10:	f7ff fd28 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH4, Control.Float_Data.Dac5_Ch4_Volt);
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <FUN_DAC_Converter_Gripper+0x68>)
 8001d16:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	2104      	movs	r1, #4
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7ff fd1f 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000d90 	.word	0x20000d90
 8001d30:	20000154 	.word	0x20000154

08001d34 <FUN_DAC_Converter_Oil>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_DAC_Converter_Oil(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	Control.Float_Data.Dac4_Ch2_Volt = RS485.Oil_Output_Float;						// 동력공급장치: 온도센서(저유기조립체)
 8001d38:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <FUN_DAC_Converter_Oil+0x24>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d3e:	4a07      	ldr	r2, [pc, #28]	@ (8001d5c <FUN_DAC_Converter_Oil+0x28>)
 8001d40:	6793      	str	r3, [r2, #120]	@ 0x78

	FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH2, Control.Float_Data.Dac4_Ch2_Volt);
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <FUN_DAC_Converter_Oil+0x28>)
 8001d44:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8001d48:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f7ff fd08 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000d90 	.word	0x20000d90
 8001d5c:	20000154 	.word	0x20000154

08001d60 <FUN_DAC_SPI3_Init>:
/****************************************************************************/
/*	Overview	:	SPI3 초기 상태 설정											*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_DAC_SPI3_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	SPI3_LDAC_LOW();
 8001d64:	2200      	movs	r2, #0
 8001d66:	2120      	movs	r1, #32
 8001d68:	4804      	ldr	r0, [pc, #16]	@ (8001d7c <FUN_DAC_SPI3_Init+0x1c>)
 8001d6a:	f00b f8a9 	bl	800cec0 <HAL_GPIO_WritePin>
	SPI3_CLR_HIGH();
 8001d6e:	2201      	movs	r2, #1
 8001d70:	2110      	movs	r1, #16
 8001d72:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <FUN_DAC_SPI3_Init+0x1c>)
 8001d74:	f00b f8a4 	bl	800cec0 <HAL_GPIO_WritePin>
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40020000 	.word	0x40020000

08001d80 <FUN_DAC_SPI5_Init>:
/****************************************************************************/
/*	Overview	:	SPI5 초기 상태 설정											*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_DAC_SPI5_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	SPI5_LDAC_LOW();
 8001d84:	2200      	movs	r2, #0
 8001d86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d8a:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <FUN_DAC_SPI5_Init+0x20>)
 8001d8c:	f00b f898 	bl	800cec0 <HAL_GPIO_WritePin>
	SPI5_CLR_HIGH();
 8001d90:	2201      	movs	r2, #1
 8001d92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d96:	4802      	ldr	r0, [pc, #8]	@ (8001da0 <FUN_DAC_SPI5_Init+0x20>)
 8001d98:	f00b f892 	bl	800cec0 <HAL_GPIO_WritePin>
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40022000 	.word	0x40022000

08001da4 <FUN_DAC_LTC2666_Get_Dac_Code>:
/****************************************************************************/
// 입력 값 미정. uint16_t u2t_dac_volt
// 변환 값 미정. float ft_volatge
// u1t_dac_address : DAC_Converter.h - DAC Adresss n 참조
void FUN_DAC_LTC2666_Get_Dac_Code(uint8_t SPI_Select, uint8_t u1t_dac_address, float ft_dac_volt)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	460a      	mov	r2, r1
 8001dae:	ed87 0a00 	vstr	s0, [r7]
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
	uint16_t LTC2666_VoltToCode = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	81fb      	strh	r3, [r7, #14]

	// ft_volatge : 실수형이 전압값 입력.
	// MIN : 0 / MAX : 10
	// 출력 값 : u2t_dac_code 해당 전압의 code로 출력

	switch(SPI_Select)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <FUN_DAC_LTC2666_Get_Dac_Code+0x24>
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d015      	beq.n	8001df2 <FUN_DAC_LTC2666_Get_Dac_Code+0x4e>
			// DAC IC에 전송
			// command : LTC2666_CMD_WRITE_N_UPDATE_N - 해당 채널에 쓰기와 업데이트 동시 실행 명령어
			LTC2666.SPI5_ReceiveCheck_flag = LTC2666_write(SPI_5,LTC2666_CMD_WRITE_N_UPDATE_N, u1t_dac_address, LTC2666_VoltToCode);
			break;
	}
}
 8001dc6:	e029      	b.n	8001e1c <FUN_DAC_LTC2666_Get_Dac_Code+0x78>
			LTC2666_VoltToCode = LTC2666_voltage_to_code(ft_dac_volt, DAC3_MIN_OUTPUT, DAC3_MAX_OUTPUT);
 8001dc8:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8001dcc:	eefa 0a04 	vmov.f32	s1, #164	@ 0xc1200000 -10.0
 8001dd0:	ed97 0a00 	vldr	s0, [r7]
 8001dd4:	f000 f8d8 	bl	8001f88 <LTC2666_voltage_to_code>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	81fb      	strh	r3, [r7, #14]
			LTC2666.SPI3_ReceiveCheck_flag = LTC2666_write(SPI_3,LTC2666_CMD_WRITE_N_UPDATE_N, u1t_dac_address, LTC2666_VoltToCode);
 8001ddc:	89fb      	ldrh	r3, [r7, #14]
 8001dde:	79ba      	ldrb	r2, [r7, #6]
 8001de0:	2130      	movs	r1, #48	@ 0x30
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 f820 	bl	8001e28 <LTC2666_write>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <FUN_DAC_LTC2666_Get_Dac_Code+0x80>)
 8001dee:	701a      	strb	r2, [r3, #0]
			break;
 8001df0:	e014      	b.n	8001e1c <FUN_DAC_LTC2666_Get_Dac_Code+0x78>
			LTC2666_VoltToCode = LTC2666_voltage_to_code(ft_dac_volt, DAC5_MIN_OUTPUT, DAC5_MAX_OUTPUT);
 8001df2:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8001df6:	eefa 0a04 	vmov.f32	s1, #164	@ 0xc1200000 -10.0
 8001dfa:	ed97 0a00 	vldr	s0, [r7]
 8001dfe:	f000 f8c3 	bl	8001f88 <LTC2666_voltage_to_code>
 8001e02:	4603      	mov	r3, r0
 8001e04:	81fb      	strh	r3, [r7, #14]
			LTC2666.SPI5_ReceiveCheck_flag = LTC2666_write(SPI_5,LTC2666_CMD_WRITE_N_UPDATE_N, u1t_dac_address, LTC2666_VoltToCode);
 8001e06:	89fb      	ldrh	r3, [r7, #14]
 8001e08:	79ba      	ldrb	r2, [r7, #6]
 8001e0a:	2130      	movs	r1, #48	@ 0x30
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f000 f80b 	bl	8001e28 <LTC2666_write>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b03      	ldr	r3, [pc, #12]	@ (8001e24 <FUN_DAC_LTC2666_Get_Dac_Code+0x80>)
 8001e18:	705a      	strb	r2, [r3, #1]
			break;
 8001e1a:	bf00      	nop
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200002c0 	.word	0x200002c0

08001e28 <LTC2666_write>:
/*	Overview	:	SPI3, 5 송신 및 수신 체크										*/
/*	Return value:	void													*/
/****************************************************************************/
int8_t LTC2666_write(uint8_t SPI_Select, uint8_t dac_command, uint8_t dac_address, uint16_t dac_code)
// Write the 16-bit dac_code to the LTC2666
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b089      	sub	sp, #36	@ 0x24
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	4604      	mov	r4, r0
 8001e30:	4608      	mov	r0, r1
 8001e32:	4611      	mov	r1, r2
 8001e34:	461a      	mov	r2, r3
 8001e36:	4623      	mov	r3, r4
 8001e38:	71fb      	strb	r3, [r7, #7]
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71bb      	strb	r3, [r7, #6]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	717b      	strb	r3, [r7, #5]
 8001e42:	4613      	mov	r3, r2
 8001e44:	807b      	strh	r3, [r7, #2]
  uint8_t data_array[4], rx_array[4];
  int8_t ret;
  uint16_t u2t_dac_code;

  // LTC2666 SPI 통신 전송 데이터 생성
  u2t_dac_code = dac_code;                              // Copy DAC code to union
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	82bb      	strh	r3, [r7, #20]
  data_array[0] = 0;                                     // Only required for 32 byte readback transaction
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	743b      	strb	r3, [r7, #16]
  data_array[1] = dac_command | dac_address;             // Build command / address byte
 8001e4e:	79ba      	ldrb	r2, [r7, #6]
 8001e50:	797b      	ldrb	r3, [r7, #5]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	747b      	strb	r3, [r7, #17]
  data_array[2] = (uint8_t)(u2t_dac_code >> 8);          // MS Byte
 8001e58:	8abb      	ldrh	r3, [r7, #20]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	74bb      	strb	r3, [r7, #18]
  data_array[3] = (uint8_t)(u2t_dac_code & 0xFF);        // LS Byte
 8001e62:	8abb      	ldrh	r3, [r7, #20]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	74fb      	strb	r3, [r7, #19]

  switch(SPI_Select)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <LTC2666_write+0x4c>
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d039      	beq.n	8001ee6 <LTC2666_write+0xbe>
 8001e72:	e071      	b.n	8001f58 <LTC2666_write+0x130>
  {
	  case SPI_3:
		  // SPI3 Data 전송 준비
		  SPI3_NSS_Enable();
 8001e74:	2200      	movs	r2, #0
 8001e76:	2140      	movs	r1, #64	@ 0x40
 8001e78:	483c      	ldr	r0, [pc, #240]	@ (8001f6c <LTC2666_write+0x144>)
 8001e7a:	f00b f821 	bl	800cec0 <HAL_GPIO_WritePin>
		  // SPI3 Data 전송
		  HAL_SPI_TransmitReceive(&hspi3, data_array, rx_array,  (uint8_t) 4, 10);
 8001e7e:	f107 020c 	add.w	r2, r7, #12
 8001e82:	f107 0110 	add.w	r1, r7, #16
 8001e86:	230a      	movs	r3, #10
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	4838      	ldr	r0, [pc, #224]	@ (8001f70 <LTC2666_write+0x148>)
 8001e8e:	f00d f874 	bl	800ef7a <HAL_SPI_TransmitReceive>
		  // 데이터 송수신 확인
		  while(HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY)
 8001e92:	bf00      	nop
 8001e94:	4836      	ldr	r0, [pc, #216]	@ (8001f70 <LTC2666_write+0x148>)
 8001e96:	f00d fc7f 	bl	800f798 <HAL_SPI_GetState>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d1f9      	bne.n	8001e94 <LTC2666_write+0x6c>
		  {

		  }
		  // 데이터 송수신 완료 후 종료
		  SPI3_NSS_Disable();
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2140      	movs	r1, #64	@ 0x40
 8001ea4:	4831      	ldr	r0, [pc, #196]	@ (8001f6c <LTC2666_write+0x144>)
 8001ea6:	f00b f80b 	bl	800cec0 <HAL_GPIO_WritePin>

		  // Compare data read back to data that was sent the previous time this function was called
		  if ((rx_array[2] == SPI3_last_data_array[2]) && (rx_array[1] == SPI3_last_data_array[1]) && (rx_array[0] == SPI3_last_data_array[0]))
 8001eaa:	7bba      	ldrb	r2, [r7, #14]
 8001eac:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <LTC2666_write+0x14c>)
 8001eae:	789b      	ldrb	r3, [r3, #2]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d10c      	bne.n	8001ece <LTC2666_write+0xa6>
 8001eb4:	7b7a      	ldrb	r2, [r7, #13]
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f74 <LTC2666_write+0x14c>)
 8001eb8:	785b      	ldrb	r3, [r3, #1]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d107      	bne.n	8001ece <LTC2666_write+0xa6>
 8001ebe:	7b3a      	ldrb	r2, [r7, #12]
 8001ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f74 <LTC2666_write+0x14c>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d102      	bne.n	8001ece <LTC2666_write+0xa6>
		  {
			  ret = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	75fb      	strb	r3, [r7, #23]
 8001ecc:	e001      	b.n	8001ed2 <LTC2666_write+0xaa>
		  }
		  else
		  {
			  ret = 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
		  }

		  SPI3_last_data_array[0] = data_array[0]; // Copy data array to a static array to compare
 8001ed2:	7c3a      	ldrb	r2, [r7, #16]
 8001ed4:	4b27      	ldr	r3, [pc, #156]	@ (8001f74 <LTC2666_write+0x14c>)
 8001ed6:	701a      	strb	r2, [r3, #0]
		  SPI3_last_data_array[1] = data_array[1]; // the next time the function is called
 8001ed8:	7c7a      	ldrb	r2, [r7, #17]
 8001eda:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <LTC2666_write+0x14c>)
 8001edc:	705a      	strb	r2, [r3, #1]
		  SPI3_last_data_array[2] = data_array[2];
 8001ede:	7cba      	ldrb	r2, [r7, #18]
 8001ee0:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <LTC2666_write+0x14c>)
 8001ee2:	709a      	strb	r2, [r3, #2]
		  break;
 8001ee4:	e03b      	b.n	8001f5e <LTC2666_write+0x136>
	  case SPI_5:
		  // SPI5 Data 전송 준비
		  SPI5_NSS_Enable();
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2104      	movs	r1, #4
 8001eea:	4823      	ldr	r0, [pc, #140]	@ (8001f78 <LTC2666_write+0x150>)
 8001eec:	f00a ffe8 	bl	800cec0 <HAL_GPIO_WritePin>
		  // SPI5 Data 전송
		  HAL_SPI_TransmitReceive(&hspi5, data_array, rx_array,  (uint8_t) 4, 10);
 8001ef0:	f107 020c 	add.w	r2, r7, #12
 8001ef4:	f107 0110 	add.w	r1, r7, #16
 8001ef8:	230a      	movs	r3, #10
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2304      	movs	r3, #4
 8001efe:	481f      	ldr	r0, [pc, #124]	@ (8001f7c <LTC2666_write+0x154>)
 8001f00:	f00d f83b 	bl	800ef7a <HAL_SPI_TransmitReceive>
		  // 데이터 송수신 확인
		  while(HAL_SPI_GetState(&hspi5) != HAL_SPI_STATE_READY)
 8001f04:	bf00      	nop
 8001f06:	481d      	ldr	r0, [pc, #116]	@ (8001f7c <LTC2666_write+0x154>)
 8001f08:	f00d fc46 	bl	800f798 <HAL_SPI_GetState>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d1f9      	bne.n	8001f06 <LTC2666_write+0xde>
		  {

		  }
		  // 데이터 송수신 완료 후 종료
		  SPI5_NSS_Disable();
 8001f12:	2201      	movs	r2, #1
 8001f14:	2104      	movs	r1, #4
 8001f16:	4818      	ldr	r0, [pc, #96]	@ (8001f78 <LTC2666_write+0x150>)
 8001f18:	f00a ffd2 	bl	800cec0 <HAL_GPIO_WritePin>
		  // Compare data read back to data that was sent the previous time this function was called
		  if ((rx_array[2] == SPI5_last_data_array[2]) && (rx_array[1] == SPI5_last_data_array[1]) && (rx_array[0] == SPI5_last_data_array[0]))
 8001f1c:	7bba      	ldrb	r2, [r7, #14]
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <LTC2666_write+0x158>)
 8001f20:	789b      	ldrb	r3, [r3, #2]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d10c      	bne.n	8001f40 <LTC2666_write+0x118>
 8001f26:	7b7a      	ldrb	r2, [r7, #13]
 8001f28:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <LTC2666_write+0x158>)
 8001f2a:	785b      	ldrb	r3, [r3, #1]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <LTC2666_write+0x118>
 8001f30:	7b3a      	ldrb	r2, [r7, #12]
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <LTC2666_write+0x158>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d102      	bne.n	8001f40 <LTC2666_write+0x118>
		  {
			  ret = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
 8001f3e:	e001      	b.n	8001f44 <LTC2666_write+0x11c>
		  }
		  else
		  {
			  ret = 1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	75fb      	strb	r3, [r7, #23]
		  }

		  SPI5_last_data_array[0] = data_array[0]; // Copy data array to a static array to compare
 8001f44:	7c3a      	ldrb	r2, [r7, #16]
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <LTC2666_write+0x158>)
 8001f48:	701a      	strb	r2, [r3, #0]
		  SPI5_last_data_array[1] = data_array[1]; // the next time the function is called
 8001f4a:	7c7a      	ldrb	r2, [r7, #17]
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <LTC2666_write+0x158>)
 8001f4e:	705a      	strb	r2, [r3, #1]
		  SPI5_last_data_array[2] = data_array[2];
 8001f50:	7cba      	ldrb	r2, [r7, #18]
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <LTC2666_write+0x158>)
 8001f54:	709a      	strb	r2, [r3, #2]
		  break;
 8001f56:	e002      	b.n	8001f5e <LTC2666_write+0x136>
	  default:
		  ret = 1;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	75fb      	strb	r3, [r7, #23]
		  break;
 8001f5c:	bf00      	nop
  }

  // 비교 결과 리턴	0 : 정상 / 1 : 비정상
  return(ret);
 8001f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd90      	pop	{r4, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	20001438 	.word	0x20001438
 8001f74:	200002c4 	.word	0x200002c4
 8001f78:	40021400 	.word	0x40021400
 8001f7c:	20001500 	.word	0x20001500
 8001f80:	200002c8 	.word	0x200002c8
 8001f84:	00000000 	.word	0x00000000

08001f88 <LTC2666_voltage_to_code>:
// min_output = 0V
// max_output = 10V
uint16_t LTC2666_voltage_to_code(float dac_voltage, float min_output, float max_output)
// Calculate a LTC2666 DAC code given the desired output voltage and the minimum / maximum
// outputs for a given softspan range.
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	ed2d 8b02 	vpush	{d8}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f96:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f9a:	ed87 1a01 	vstr	s2, [r7, #4]
  uint16_t dac_code;
  float float_code;
  float_code = 65535.0 * (dac_voltage - min_output) / (max_output - min_output);                    // Calculate the DAC code
 8001f9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001faa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fae:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8002078 <LTC2666_voltage_to_code+0xf0>
 8001fb2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001fb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001fc6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001fca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fce:	edc7 7a05 	vstr	s15, [r7, #20]
  float_code = (float_code > (floor(float_code) + 0.5)) ? ceil(float_code) : floor(float_code);     // Round
 8001fd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fd6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001fda:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fe2:	eeb0 0b47 	vmov.f64	d0, d7
 8001fe6:	f00f ff9f 	bl	8011f28 <floor>
 8001fea:	eeb0 7b40 	vmov.f64	d7, d0
 8001fee:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001ff2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ff6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8001ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffe:	dd0a      	ble.n	8002016 <LTC2666_voltage_to_code+0x8e>
 8002000:	edd7 7a05 	vldr	s15, [r7, #20]
 8002004:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002008:	eeb0 0b47 	vmov.f64	d0, d7
 800200c:	f00f ff18 	bl	8011e40 <ceil>
 8002010:	eeb0 7b40 	vmov.f64	d7, d0
 8002014:	e009      	b.n	800202a <LTC2666_voltage_to_code+0xa2>
 8002016:	edd7 7a05 	vldr	s15, [r7, #20]
 800201a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800201e:	eeb0 0b47 	vmov.f64	d0, d7
 8002022:	f00f ff81 	bl	8011f28 <floor>
 8002026:	eeb0 7b40 	vmov.f64	d7, d0
 800202a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800202e:	edc7 7a05 	vstr	s15, [r7, #20]
  if (float_code < 0.0) float_code = 0.0;
 8002032:	edd7 7a05 	vldr	s15, [r7, #20]
 8002036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	d502      	bpl.n	8002046 <LTC2666_voltage_to_code+0xbe>
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  if (float_code > 65535.0) float_code = 65535.0;
 8002046:	edd7 7a05 	vldr	s15, [r7, #20]
 800204a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002080 <LTC2666_voltage_to_code+0xf8>
 800204e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	dd01      	ble.n	800205c <LTC2666_voltage_to_code+0xd4>
 8002058:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <LTC2666_voltage_to_code+0xfc>)
 800205a:	617b      	str	r3, [r7, #20]
  dac_code = (uint16_t) (float_code);                                                               // Convert to unsigned integer
 800205c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002064:	ee17 3a90 	vmov	r3, s15
 8002068:	827b      	strh	r3, [r7, #18]
  return (dac_code);
 800206a:	8a7b      	ldrh	r3, [r7, #18]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	ecbd 8b02 	vpop	{d8}
 8002076:	bd80      	pop	{r7, pc}
 8002078:	00000000 	.word	0x00000000
 800207c:	40efffe0 	.word	0x40efffe0
 8002080:	477fff00 	.word	0x477fff00
 8002084:	477fff00 	.word	0x477fff00

08002088 <FUN_DAC_SPI4_Init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_DAC_SPI4_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	SPI4_LDAC_LOW();
 800208c:	2200      	movs	r2, #0
 800208e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <FUN_DAC_SPI4_Init+0x20>)
 8002094:	f00a ff14 	bl	800cec0 <HAL_GPIO_WritePin>
	SPI4_CLR_HIGH();
 8002098:	2201      	movs	r2, #1
 800209a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800209e:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <FUN_DAC_SPI4_Init+0x20>)
 80020a0:	f00a ff0e 	bl	800cec0 <HAL_GPIO_WritePin>
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000

080020ac <FUN_DAC_LTC2668_Get_Dac_Code>:
/****************************************************************************/
// 입력 값 미정. uint16_t u2t_dac_volt
// 변환 값 미정. float ft_volatge
// u1t_dac_address : DAC_SPI4.h - DAC Adresss n 참조
void FUN_DAC_LTC2668_Get_Dac_Code(uint8_t SPI_Select, uint8_t u1t_dac_address, float ft_dac_volt)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	460a      	mov	r2, r1
 80020b6:	ed87 0a00 	vstr	s0, [r7]
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	4613      	mov	r3, r2
 80020be:	71bb      	strb	r3, [r7, #6]
	uint16_t LTC2668_VoltToCode = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	81fb      	strh	r3, [r7, #14]
	// dac_volt = 현재 알 수 없음.

	// ft_volatge : 실수형이 전압값 입력.
	// MIN : 0 / MAX : 5
	// 출력 값 : u2t_dac_code 해당 전압의 code로 출력
	LTC2668_VoltToCode = LTC2668_voltage_to_code(ft_dac_volt, DAC4_MIN_OUTPUT, DAC4_MAX_OUTPUT);
 80020c4:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80020c8:	eefa 0a04 	vmov.f32	s1, #164	@ 0xc1200000 -10.0
 80020cc:	ed97 0a00 	vldr	s0, [r7]
 80020d0:	f000 f87e 	bl	80021d0 <LTC2668_voltage_to_code>
 80020d4:	4603      	mov	r3, r0
 80020d6:	81fb      	strh	r3, [r7, #14]

	// DAC IC에 전송
	// command : LTC2666_CMD_WRITE_N_UPDATE_N - 해당 채널에 쓰기와 업데이트 동시 실행 명령어
	LTC2668.SPI4_ReceiveCheck_flag = LTC2668_write(SPI_4, LTC2668_CMD_WRITE_N_UPDATE_N, u1t_dac_address, LTC2668_VoltToCode);
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	79ba      	ldrb	r2, [r7, #6]
 80020dc:	2130      	movs	r1, #48	@ 0x30
 80020de:	2001      	movs	r0, #1
 80020e0:	f000 f80a 	bl	80020f8 <LTC2668_write>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b02      	ldr	r3, [pc, #8]	@ (80020f4 <FUN_DAC_LTC2668_Get_Dac_Code+0x48>)
 80020ea:	701a      	strb	r2, [r3, #0]
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200002cc 	.word	0x200002cc

080020f8 <LTC2668_write>:
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
int8_t LTC2668_write(uint8_t SPI_Select, uint8_t dac_command, uint8_t dac_address, uint16_t dac_code)
// Write the 16-bit dac_code to the LTC2668
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b089      	sub	sp, #36	@ 0x24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	4604      	mov	r4, r0
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4623      	mov	r3, r4
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	4603      	mov	r3, r0
 800210c:	71bb      	strb	r3, [r7, #6]
 800210e:	460b      	mov	r3, r1
 8002110:	717b      	strb	r3, [r7, #5]
 8002112:	4613      	mov	r3, r2
 8002114:	807b      	strh	r3, [r7, #2]
  static uint8_t SPI4_last_data_array[4];
  uint8_t data_array[4], rx_array[4];
  int8_t ret;
  uint16_t data;

  data = dac_code;                              // Copy DAC code to union
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	82bb      	strh	r3, [r7, #20]
  data_array[0] = 0;                                     // Only required for 32 byte readback transaction
 800211a:	2300      	movs	r3, #0
 800211c:	743b      	strb	r3, [r7, #16]
  data_array[1] = dac_command | dac_address;             // Build command / address byte
 800211e:	79ba      	ldrb	r2, [r7, #6]
 8002120:	797b      	ldrb	r3, [r7, #5]
 8002122:	4313      	orrs	r3, r2
 8002124:	b2db      	uxtb	r3, r3
 8002126:	747b      	strb	r3, [r7, #17]
  data_array[2] = (uint8_t)(data >> 8);          // MS Byte
 8002128:	8abb      	ldrh	r3, [r7, #20]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	b29b      	uxth	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	74bb      	strb	r3, [r7, #18]
  data_array[3] = (uint8_t)(data & 0xFF);        // LS Byte
 8002132:	8abb      	ldrh	r3, [r7, #20]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	74fb      	strb	r3, [r7, #19]

  if(SPI_Select == SPI_4)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d13a      	bne.n	80021b4 <LTC2668_write+0xbc>
  {
  	// SPI4 Data 전송 준비
	SPI4_NSS_Enable();
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002144:	481f      	ldr	r0, [pc, #124]	@ (80021c4 <LTC2668_write+0xcc>)
 8002146:	f00a febb 	bl	800cec0 <HAL_GPIO_WritePin>
	// SPI4 Data 전송
	HAL_SPI_TransmitReceive(&hspi4, data_array, rx_array,  (uint8_t) 4, 10);
 800214a:	f107 020c 	add.w	r2, r7, #12
 800214e:	f107 0110 	add.w	r1, r7, #16
 8002152:	230a      	movs	r3, #10
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2304      	movs	r3, #4
 8002158:	481b      	ldr	r0, [pc, #108]	@ (80021c8 <LTC2668_write+0xd0>)
 800215a:	f00c ff0e 	bl	800ef7a <HAL_SPI_TransmitReceive>
	// 데이터 송수신 확인
	while(HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY)
 800215e:	bf00      	nop
 8002160:	4819      	ldr	r0, [pc, #100]	@ (80021c8 <LTC2668_write+0xd0>)
 8002162:	f00d fb19 	bl	800f798 <HAL_SPI_GetState>
 8002166:	4603      	mov	r3, r0
 8002168:	2b01      	cmp	r3, #1
 800216a:	d1f9      	bne.n	8002160 <LTC2668_write+0x68>
	{

	}
	// 데이터 송수신 완료 후 종료
	SPI4_NSS_Disable();
 800216c:	2201      	movs	r2, #1
 800216e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002172:	4814      	ldr	r0, [pc, #80]	@ (80021c4 <LTC2668_write+0xcc>)
 8002174:	f00a fea4 	bl	800cec0 <HAL_GPIO_WritePin>

	// 이전 전송 데이터와 수신 데이터의 비교
	// Compare data read back to data that was sent the previous time this function was called
	if ((rx_array[2] == SPI4_last_data_array[2]) && (rx_array[1] == SPI4_last_data_array[1]) && (rx_array[0] == SPI4_last_data_array[0]))
 8002178:	7bba      	ldrb	r2, [r7, #14]
 800217a:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <LTC2668_write+0xd4>)
 800217c:	789b      	ldrb	r3, [r3, #2]
 800217e:	429a      	cmp	r2, r3
 8002180:	d10c      	bne.n	800219c <LTC2668_write+0xa4>
 8002182:	7b7a      	ldrb	r2, [r7, #13]
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <LTC2668_write+0xd4>)
 8002186:	785b      	ldrb	r3, [r3, #1]
 8002188:	429a      	cmp	r2, r3
 800218a:	d107      	bne.n	800219c <LTC2668_write+0xa4>
 800218c:	7b3a      	ldrb	r2, [r7, #12]
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <LTC2668_write+0xd4>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d102      	bne.n	800219c <LTC2668_write+0xa4>
	{
	  ret = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	75fb      	strb	r3, [r7, #23]
 800219a:	e001      	b.n	80021a0 <LTC2668_write+0xa8>
	}
	else
	{
	  ret = 1;
 800219c:	2301      	movs	r3, #1
 800219e:	75fb      	strb	r3, [r7, #23]
	}

	SPI4_last_data_array[0] = data_array[0]; // Copy data array to a static array to compare
 80021a0:	7c3a      	ldrb	r2, [r7, #16]
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <LTC2668_write+0xd4>)
 80021a4:	701a      	strb	r2, [r3, #0]
	SPI4_last_data_array[1] = data_array[1]; // the next time the function is called
 80021a6:	7c7a      	ldrb	r2, [r7, #17]
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <LTC2668_write+0xd4>)
 80021aa:	705a      	strb	r2, [r3, #1]
	SPI4_last_data_array[2] = data_array[2];
 80021ac:	7cba      	ldrb	r2, [r7, #18]
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <LTC2668_write+0xd4>)
 80021b0:	709a      	strb	r2, [r3, #2]
 80021b2:	e001      	b.n	80021b8 <LTC2668_write+0xc0>
  }
  else
  {
	  ret = 1;
 80021b4:	2301      	movs	r3, #1
 80021b6:	75fb      	strb	r3, [r7, #23]
  }

  // 비교 결과 리턴	0 : 정상 / 1 : 비정상
  return(ret);
 80021b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd90      	pop	{r4, r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	2000149c 	.word	0x2000149c
 80021cc:	200002d0 	.word	0x200002d0

080021d0 <LTC2668_voltage_to_code>:
// Calculate a LTC2666 DAC code given the desired output voltage and the minimum / maximum
// outputs for a given softspan range.
// min_output = 0V
// max_output = 5V
uint16_t LTC2668_voltage_to_code(float dac_voltage, float min_output, float max_output)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	ed2d 8b02 	vpush	{d8}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	ed87 0a03 	vstr	s0, [r7, #12]
 80021de:	edc7 0a02 	vstr	s1, [r7, #8]
 80021e2:	ed87 1a01 	vstr	s2, [r7, #4]
  uint16_t dac_code;
  float float_code;
  float_code = 65535.0 * (dac_voltage - min_output) / (max_output - min_output);                    // Calculate the DAC code
 80021e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80021ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021f6:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 80022c0 <LTC2668_voltage_to_code+0xf0>
 80021fa:	ee27 5b06 	vmul.f64	d5, d7, d6
 80021fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8002202:	edd7 7a02 	vldr	s15, [r7, #8]
 8002206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800220e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002212:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002216:	edc7 7a05 	vstr	s15, [r7, #20]
  float_code = (float_code > (floor(float_code) + 0.5)) ? ceil(float_code) : floor(float_code);     // Round
 800221a:	edd7 7a05 	vldr	s15, [r7, #20]
 800221e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002222:	edd7 7a05 	vldr	s15, [r7, #20]
 8002226:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800222a:	eeb0 0b47 	vmov.f64	d0, d7
 800222e:	f00f fe7b 	bl	8011f28 <floor>
 8002232:	eeb0 7b40 	vmov.f64	d7, d0
 8002236:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800223a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800223e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8002242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002246:	dd0a      	ble.n	800225e <LTC2668_voltage_to_code+0x8e>
 8002248:	edd7 7a05 	vldr	s15, [r7, #20]
 800224c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002250:	eeb0 0b47 	vmov.f64	d0, d7
 8002254:	f00f fdf4 	bl	8011e40 <ceil>
 8002258:	eeb0 7b40 	vmov.f64	d7, d0
 800225c:	e009      	b.n	8002272 <LTC2668_voltage_to_code+0xa2>
 800225e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002262:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002266:	eeb0 0b47 	vmov.f64	d0, d7
 800226a:	f00f fe5d 	bl	8011f28 <floor>
 800226e:	eeb0 7b40 	vmov.f64	d7, d0
 8002272:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002276:	edc7 7a05 	vstr	s15, [r7, #20]
  if (float_code < 0.0) float_code = 0.0;
 800227a:	edd7 7a05 	vldr	s15, [r7, #20]
 800227e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002286:	d502      	bpl.n	800228e <LTC2668_voltage_to_code+0xbe>
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  if (float_code > 65535.0) float_code = 65535.0;
 800228e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002292:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80022c8 <LTC2668_voltage_to_code+0xf8>
 8002296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	dd01      	ble.n	80022a4 <LTC2668_voltage_to_code+0xd4>
 80022a0:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <LTC2668_voltage_to_code+0xfc>)
 80022a2:	617b      	str	r3, [r7, #20]
  dac_code = (uint16_t) (float_code);                                                               // Convert to unsigned integer
 80022a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80022a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022ac:	ee17 3a90 	vmov	r3, s15
 80022b0:	827b      	strh	r3, [r7, #18]
  return (dac_code);
 80022b2:	8a7b      	ldrh	r3, [r7, #18]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	ecbd 8b02 	vpop	{d8}
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	00000000 	.word	0x00000000
 80022c4:	40efffe0 	.word	0x40efffe0
 80022c8:	477fff00 	.word	0x477fff00
 80022cc:	477fff00 	.word	0x477fff00

080022d0 <FUN_EEPROM_Init>:
/****************************************************************************/
/*	Overview	:	EEPROM Init												*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_EEPROM_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af04      	add	r7, sp, #16
	uint8_t ii = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c3, CAT24C256_ADDRESS_READ, 64, BYTE_ADDRESS_SIZE, &I2C_Rx_Buffer[0], 64, 1000);
 80022da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022de:	9302      	str	r3, [sp, #8]
 80022e0:	2340      	movs	r3, #64	@ 0x40
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	4b3f      	ldr	r3, [pc, #252]	@ (80023e4 <FUN_EEPROM_Init+0x114>)
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2302      	movs	r3, #2
 80022ea:	2240      	movs	r2, #64	@ 0x40
 80022ec:	21a1      	movs	r1, #161	@ 0xa1
 80022ee:	483e      	ldr	r0, [pc, #248]	@ (80023e8 <FUN_EEPROM_Init+0x118>)
 80022f0:	f00a ffbe 	bl	800d270 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c3, CAT24C256_ADDRESS_READ, 128, BYTE_ADDRESS_SIZE, &I2C_Rx_Buffer[64], 16, 1000);
 80022f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022f8:	9302      	str	r3, [sp, #8]
 80022fa:	2310      	movs	r3, #16
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	4b3b      	ldr	r3, [pc, #236]	@ (80023ec <FUN_EEPROM_Init+0x11c>)
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2302      	movs	r3, #2
 8002304:	2280      	movs	r2, #128	@ 0x80
 8002306:	21a1      	movs	r1, #161	@ 0xa1
 8002308:	4837      	ldr	r0, [pc, #220]	@ (80023e8 <FUN_EEPROM_Init+0x118>)
 800230a:	f00a ffb1 	bl	800d270 <HAL_I2C_Mem_Read>

	for(uint8_t i = 0; i < 20; i++)
 800230e:	2300      	movs	r3, #0
 8002310:	71bb      	strb	r3, [r7, #6]
 8002312:	e045      	b.n	80023a0 <FUN_EEPROM_Init+0xd0>
	{
		EEPROM.EEPROM_Save_U32_Buffer[i] = ((uint32_t)(I2C_Rx_Buffer[ii++])) << 24;
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	71fa      	strb	r2, [r7, #7]
 800231a:	461a      	mov	r2, r3
 800231c:	4b31      	ldr	r3, [pc, #196]	@ (80023e4 <FUN_EEPROM_Init+0x114>)
 800231e:	5c9b      	ldrb	r3, [r3, r2]
 8002320:	461a      	mov	r2, r3
 8002322:	79bb      	ldrb	r3, [r7, #6]
 8002324:	0612      	lsls	r2, r2, #24
 8002326:	4932      	ldr	r1, [pc, #200]	@ (80023f0 <FUN_EEPROM_Init+0x120>)
 8002328:	3328      	adds	r3, #40	@ 0x28
 800232a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EEPROM.EEPROM_Save_U32_Buffer[i] |= ((uint32_t)(I2C_Rx_Buffer[ii++])) << 16;
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	71fa      	strb	r2, [r7, #7]
 8002334:	461a      	mov	r2, r3
 8002336:	4b2b      	ldr	r3, [pc, #172]	@ (80023e4 <FUN_EEPROM_Init+0x114>)
 8002338:	5c9b      	ldrb	r3, [r3, r2]
 800233a:	0419      	lsls	r1, r3, #16
 800233c:	79bb      	ldrb	r3, [r7, #6]
 800233e:	4a2c      	ldr	r2, [pc, #176]	@ (80023f0 <FUN_EEPROM_Init+0x120>)
 8002340:	3328      	adds	r3, #40	@ 0x28
 8002342:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002346:	79bb      	ldrb	r3, [r7, #6]
 8002348:	430a      	orrs	r2, r1
 800234a:	4929      	ldr	r1, [pc, #164]	@ (80023f0 <FUN_EEPROM_Init+0x120>)
 800234c:	3328      	adds	r3, #40	@ 0x28
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EEPROM.EEPROM_Save_U32_Buffer[i] |= ((uint32_t)(I2C_Rx_Buffer[ii++])) << 8;
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	71fa      	strb	r2, [r7, #7]
 8002358:	461a      	mov	r2, r3
 800235a:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <FUN_EEPROM_Init+0x114>)
 800235c:	5c9b      	ldrb	r3, [r3, r2]
 800235e:	0219      	lsls	r1, r3, #8
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	4a23      	ldr	r2, [pc, #140]	@ (80023f0 <FUN_EEPROM_Init+0x120>)
 8002364:	3328      	adds	r3, #40	@ 0x28
 8002366:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800236a:	79bb      	ldrb	r3, [r7, #6]
 800236c:	430a      	orrs	r2, r1
 800236e:	4920      	ldr	r1, [pc, #128]	@ (80023f0 <FUN_EEPROM_Init+0x120>)
 8002370:	3328      	adds	r3, #40	@ 0x28
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EEPROM.EEPROM_Save_U32_Buffer[i] |= (uint32_t)(I2C_Rx_Buffer[ii++]);
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	71fa      	strb	r2, [r7, #7]
 800237c:	461a      	mov	r2, r3
 800237e:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <FUN_EEPROM_Init+0x114>)
 8002380:	5c9b      	ldrb	r3, [r3, r2]
 8002382:	4619      	mov	r1, r3
 8002384:	79bb      	ldrb	r3, [r7, #6]
 8002386:	4a1a      	ldr	r2, [pc, #104]	@ (80023f0 <FUN_EEPROM_Init+0x120>)
 8002388:	3328      	adds	r3, #40	@ 0x28
 800238a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800238e:	79bb      	ldrb	r3, [r7, #6]
 8002390:	430a      	orrs	r2, r1
 8002392:	4917      	ldr	r1, [pc, #92]	@ (80023f0 <FUN_EEPROM_Init+0x120>)
 8002394:	3328      	adds	r3, #40	@ 0x28
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < 20; i++)
 800239a:	79bb      	ldrb	r3, [r7, #6]
 800239c:	3301      	adds	r3, #1
 800239e:	71bb      	strb	r3, [r7, #6]
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	2b13      	cmp	r3, #19
 80023a4:	d9b6      	bls.n	8002314 <FUN_EEPROM_Init+0x44>
	}

	memcpy(&EEPROM.EEPROM_Save_Float_Buffer[0], &EEPROM.EEPROM_Save_U32_Buffer[0], 80);
 80023a6:	2250      	movs	r2, #80	@ 0x50
 80023a8:	4912      	ldr	r1, [pc, #72]	@ (80023f4 <FUN_EEPROM_Init+0x124>)
 80023aa:	4813      	ldr	r0, [pc, #76]	@ (80023f8 <FUN_EEPROM_Init+0x128>)
 80023ac:	f00f fd3a 	bl	8011e24 <memcpy>

	memcpy(&RS485.LwsA_Parameter, &EEPROM.EEPROM_Save_U32_Buffer, 80);
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <FUN_EEPROM_Init+0x12c>)
 80023b2:	4a0f      	ldr	r2, [pc, #60]	@ (80023f0 <FUN_EEPROM_Init+0x120>)
 80023b4:	f203 435c 	addw	r3, r3, #1116	@ 0x45c
 80023b8:	f102 01a0 	add.w	r1, r2, #160	@ 0xa0
 80023bc:	2250      	movs	r2, #80	@ 0x50
 80023be:	4618      	mov	r0, r3
 80023c0:	f00f fd30 	bl	8011e24 <memcpy>

	RS485.LwsA_Parameter[16] = -1;
 80023c4:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <FUN_EEPROM_Init+0x12c>)
 80023c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002400 <FUN_EEPROM_Init+0x130>)
 80023cc:	601a      	str	r2, [r3, #0]
	RS485.LwsA_Parameter[17] = 1.5;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <FUN_EEPROM_Init+0x12c>)
 80023d0:	f503 6394 	add.w	r3, r3, #1184	@ 0x4a0
 80023d4:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000648 	.word	0x20000648
 80023e8:	2000131c 	.word	0x2000131c
 80023ec:	20000688 	.word	0x20000688
 80023f0:	200002d4 	.word	0x200002d4
 80023f4:	20000374 	.word	0x20000374
 80023f8:	200004b4 	.word	0x200004b4
 80023fc:	20000d90 	.word	0x20000d90
 8002400:	bf800000 	.word	0xbf800000

08002404 <FUN_EEPROM_Routine>:
/****************************************************************************/
/*	Overview	:	EEPROM Routine											*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_EEPROM_Routine(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af04      	add	r7, sp, #16
	uint8_t i = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	71fb      	strb	r3, [r7, #7]
	if(EEPROM.EEPROM_Save_Flag == 1)
 800240e:	4b36      	ldr	r3, [pc, #216]	@ (80024e8 <FUN_EEPROM_Routine+0xe4>)
 8002410:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8002414:	2b01      	cmp	r3, #1
 8002416:	d162      	bne.n	80024de <FUN_EEPROM_Routine+0xda>
	{
		EEPROM.EEPROM_Save_Flag = 0;
 8002418:	4b33      	ldr	r3, [pc, #204]	@ (80024e8 <FUN_EEPROM_Routine+0xe4>)
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320

		memcpy(EEPROM.EEPROM_Save_U32_Buffer, RS485.LwsA_Parameter, 80);
 8002420:	4b31      	ldr	r3, [pc, #196]	@ (80024e8 <FUN_EEPROM_Routine+0xe4>)
 8002422:	4a32      	ldr	r2, [pc, #200]	@ (80024ec <FUN_EEPROM_Routine+0xe8>)
 8002424:	33a0      	adds	r3, #160	@ 0xa0
 8002426:	f202 415c 	addw	r1, r2, #1116	@ 0x45c
 800242a:	2250      	movs	r2, #80	@ 0x50
 800242c:	4618      	mov	r0, r3
 800242e:	f00f fcf9 	bl	8011e24 <memcpy>


		for(uint8_t ii = 0; ii < 20; ii++)
 8002432:	2300      	movs	r3, #0
 8002434:	71bb      	strb	r3, [r7, #6]
 8002436:	e035      	b.n	80024a4 <FUN_EEPROM_Routine+0xa0>
		{
			I2C_Tx_Buffer[i++] = (uint8_t)(EEPROM.EEPROM_Save_U32_Buffer[ii] >> 24);
 8002438:	79bb      	ldrb	r3, [r7, #6]
 800243a:	4a2b      	ldr	r2, [pc, #172]	@ (80024e8 <FUN_EEPROM_Routine+0xe4>)
 800243c:	3328      	adds	r3, #40	@ 0x28
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	0e19      	lsrs	r1, r3, #24
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	71fa      	strb	r2, [r7, #7]
 800244a:	461a      	mov	r2, r3
 800244c:	b2c9      	uxtb	r1, r1
 800244e:	4b28      	ldr	r3, [pc, #160]	@ (80024f0 <FUN_EEPROM_Routine+0xec>)
 8002450:	5499      	strb	r1, [r3, r2]
			I2C_Tx_Buffer[i++] = (uint8_t)(EEPROM.EEPROM_Save_U32_Buffer[ii] >> 16);
 8002452:	79bb      	ldrb	r3, [r7, #6]
 8002454:	4a24      	ldr	r2, [pc, #144]	@ (80024e8 <FUN_EEPROM_Routine+0xe4>)
 8002456:	3328      	adds	r3, #40	@ 0x28
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	0c19      	lsrs	r1, r3, #16
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	71fa      	strb	r2, [r7, #7]
 8002464:	461a      	mov	r2, r3
 8002466:	b2c9      	uxtb	r1, r1
 8002468:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <FUN_EEPROM_Routine+0xec>)
 800246a:	5499      	strb	r1, [r3, r2]
			I2C_Tx_Buffer[i++] = (uint8_t)(EEPROM.EEPROM_Save_U32_Buffer[ii] >> 8);
 800246c:	79bb      	ldrb	r3, [r7, #6]
 800246e:	4a1e      	ldr	r2, [pc, #120]	@ (80024e8 <FUN_EEPROM_Routine+0xe4>)
 8002470:	3328      	adds	r3, #40	@ 0x28
 8002472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002476:	0a19      	lsrs	r1, r3, #8
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	71fa      	strb	r2, [r7, #7]
 800247e:	461a      	mov	r2, r3
 8002480:	b2c9      	uxtb	r1, r1
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <FUN_EEPROM_Routine+0xec>)
 8002484:	5499      	strb	r1, [r3, r2]
			I2C_Tx_Buffer[i++] = (uint8_t)(EEPROM.EEPROM_Save_U32_Buffer[ii]);
 8002486:	79bb      	ldrb	r3, [r7, #6]
 8002488:	4a17      	ldr	r2, [pc, #92]	@ (80024e8 <FUN_EEPROM_Routine+0xe4>)
 800248a:	3328      	adds	r3, #40	@ 0x28
 800248c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	71fa      	strb	r2, [r7, #7]
 8002496:	461a      	mov	r2, r3
 8002498:	b2c9      	uxtb	r1, r1
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <FUN_EEPROM_Routine+0xec>)
 800249c:	5499      	strb	r1, [r3, r2]
		for(uint8_t ii = 0; ii < 20; ii++)
 800249e:	79bb      	ldrb	r3, [r7, #6]
 80024a0:	3301      	adds	r3, #1
 80024a2:	71bb      	strb	r3, [r7, #6]
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	2b13      	cmp	r3, #19
 80024a8:	d9c6      	bls.n	8002438 <FUN_EEPROM_Routine+0x34>
		}

		HAL_I2C_Mem_Write(&hi2c3, CAT24C256_ADDRESS_WRITE, 64, BYTE_ADDRESS_SIZE, &I2C_Tx_Buffer[0], 64, 1000);
 80024aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ae:	9302      	str	r3, [sp, #8]
 80024b0:	2340      	movs	r3, #64	@ 0x40
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <FUN_EEPROM_Routine+0xec>)
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2302      	movs	r3, #2
 80024ba:	2240      	movs	r2, #64	@ 0x40
 80024bc:	21a0      	movs	r1, #160	@ 0xa0
 80024be:	480d      	ldr	r0, [pc, #52]	@ (80024f4 <FUN_EEPROM_Routine+0xf0>)
 80024c0:	f00a fdc2 	bl	800d048 <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Write(&hi2c3, CAT24C256_ADDRESS_WRITE, 128, BYTE_ADDRESS_SIZE, &I2C_Tx_Buffer[64], 16, 1000);
 80024c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	2310      	movs	r3, #16
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <FUN_EEPROM_Routine+0xf4>)
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2302      	movs	r3, #2
 80024d4:	2280      	movs	r2, #128	@ 0x80
 80024d6:	21a0      	movs	r1, #160	@ 0xa0
 80024d8:	4806      	ldr	r0, [pc, #24]	@ (80024f4 <FUN_EEPROM_Routine+0xf0>)
 80024da:	f00a fdb5 	bl	800d048 <HAL_I2C_Mem_Write>

	}
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200002d4 	.word	0x200002d4
 80024ec:	20000d90 	.word	0x20000d90
 80024f0:	200005f8 	.word	0x200005f8
 80024f4:	2000131c 	.word	0x2000131c
 80024f8:	20000638 	.word	0x20000638

080024fc <FUN_Encoder_Init>:
/****************************************************************************/
/*	Overview	:	SPI1, 2 DMA Enable Setting								*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Encoder_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
	// 초기화
	Encoder.SPI1_Tx_Cplt_Flag = 0;
 8002502:	4b1a      	ldr	r3, [pc, #104]	@ (800256c <FUN_Encoder_Init+0x70>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
	Encoder.SPI1_Tx_Cplt_Cnt = 0;
 8002508:	4b18      	ldr	r3, [pc, #96]	@ (800256c <FUN_Encoder_Init+0x70>)
 800250a:	2200      	movs	r2, #0
 800250c:	705a      	strb	r2, [r3, #1]
	Encoder.SPI2_Tx_Cplt_Flag = 0;
 800250e:	4b17      	ldr	r3, [pc, #92]	@ (800256c <FUN_Encoder_Init+0x70>)
 8002510:	2200      	movs	r2, #0
 8002512:	709a      	strb	r2, [r3, #2]
	Encoder.SPI2_Tx_Cplt_Cnt = 0;
 8002514:	4b15      	ldr	r3, [pc, #84]	@ (800256c <FUN_Encoder_Init+0x70>)
 8002516:	2200      	movs	r2, #0
 8002518:	70da      	strb	r2, [r3, #3]
	Encoder.Encoder_1_Output_Value = 0;
 800251a:	4b14      	ldr	r3, [pc, #80]	@ (800256c <FUN_Encoder_Init+0x70>)
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
	Encoder.Encoder_2_Output_Value = 0;
 8002522:	4b12      	ldr	r3, [pc, #72]	@ (800256c <FUN_Encoder_Init+0x70>)
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
	for(uint8_t i =0; i<2; i++)
 800252a:	2300      	movs	r3, #0
 800252c:	71fb      	strb	r3, [r7, #7]
 800252e:	e00c      	b.n	800254a <FUN_Encoder_Init+0x4e>
	{
		Encoder.SPI1_Tx_Buffer[i] = 0;
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	4a0e      	ldr	r2, [pc, #56]	@ (800256c <FUN_Encoder_Init+0x70>)
 8002534:	4413      	add	r3, r2
 8002536:	2200      	movs	r2, #0
 8002538:	711a      	strb	r2, [r3, #4]
		Encoder.SPI2_Tx_Buffer[i] = 0;
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4a0b      	ldr	r2, [pc, #44]	@ (800256c <FUN_Encoder_Init+0x70>)
 800253e:	4413      	add	r3, r2
 8002540:	2200      	movs	r2, #0
 8002542:	719a      	strb	r2, [r3, #6]
	for(uint8_t i =0; i<2; i++)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	3301      	adds	r3, #1
 8002548:	71fb      	strb	r3, [r7, #7]
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d9ef      	bls.n	8002530 <FUN_Encoder_Init+0x34>
	}

	HAL_SPI_Transmit_DMA(&hspi1, Encoder.SPI2_Tx_Buffer, 1);			// 16Bit * 1
 8002550:	2201      	movs	r2, #1
 8002552:	4907      	ldr	r1, [pc, #28]	@ (8002570 <FUN_Encoder_Init+0x74>)
 8002554:	4807      	ldr	r0, [pc, #28]	@ (8002574 <FUN_Encoder_Init+0x78>)
 8002556:	f00c ff23 	bl	800f3a0 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(&hspi2, Encoder.SPI1_Tx_Buffer, 1);			// 16Bit * 1
 800255a:	2201      	movs	r2, #1
 800255c:	4906      	ldr	r1, [pc, #24]	@ (8002578 <FUN_Encoder_Init+0x7c>)
 800255e:	4807      	ldr	r0, [pc, #28]	@ (800257c <FUN_Encoder_Init+0x80>)
 8002560:	f00c ff1e 	bl	800f3a0 <HAL_SPI_Transmit_DMA>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000698 	.word	0x20000698
 8002570:	2000069e 	.word	0x2000069e
 8002574:	20001370 	.word	0x20001370
 8002578:	2000069c 	.word	0x2000069c
 800257c:	200013d4 	.word	0x200013d4

08002580 <FUN_Encoder_Routine>:
/****************************************************************************/
/*	Overview	:	SPI1, 2 Enable Routine									*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Encoder_Routine(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
	if(Encoder.SPI1_Tx_Cplt_Flag == 1)
 8002584:	4b1e      	ldr	r3, [pc, #120]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d117      	bne.n	80025bc <FUN_Encoder_Routine+0x3c>
	{
		++Encoder.SPI1_Tx_Cplt_Cnt;
 800258c:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	3301      	adds	r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 8002596:	705a      	strb	r2, [r3, #1]

		if(Encoder.SPI1_Tx_Cplt_Cnt == 3)
 8002598:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 800259a:	785b      	ldrb	r3, [r3, #1]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d10d      	bne.n	80025bc <FUN_Encoder_Routine+0x3c>
		{
			Encoder.SPI1_Tx_Cplt_Cnt = 0;
 80025a0:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	705a      	strb	r2, [r3, #1]

		Encoder.SPI1_Tx_Cplt_Flag = 0;
 80025a6:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]

		__HAL_SPI_ENABLE(&hspi1);
 80025ac:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <FUN_Encoder_Routine+0x84>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b14      	ldr	r3, [pc, #80]	@ (8002604 <FUN_Encoder_Routine+0x84>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025ba:	601a      	str	r2, [r3, #0]
		}
	}

	if(Encoder.SPI2_Tx_Cplt_Flag == 1)
 80025bc:	4b10      	ldr	r3, [pc, #64]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 80025be:	789b      	ldrb	r3, [r3, #2]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d117      	bne.n	80025f4 <FUN_Encoder_Routine+0x74>
	{
		++Encoder.SPI2_Tx_Cplt_Cnt;
 80025c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 80025c6:	78db      	ldrb	r3, [r3, #3]
 80025c8:	3301      	adds	r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 80025ce:	70da      	strb	r2, [r3, #3]

		if(Encoder.SPI2_Tx_Cplt_Cnt == 3)
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 80025d2:	78db      	ldrb	r3, [r3, #3]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d10d      	bne.n	80025f4 <FUN_Encoder_Routine+0x74>
		{
			Encoder.SPI2_Tx_Cplt_Cnt = 0;
 80025d8:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 80025da:	2200      	movs	r2, #0
 80025dc:	70da      	strb	r2, [r3, #3]

			Encoder.SPI2_Tx_Cplt_Flag = 0;
 80025de:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <FUN_Encoder_Routine+0x80>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	709a      	strb	r2, [r3, #2]

			__HAL_SPI_ENABLE(&hspi2);
 80025e4:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <FUN_Encoder_Routine+0x88>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <FUN_Encoder_Routine+0x88>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025f2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000698 	.word	0x20000698
 8002604:	20001370 	.word	0x20001370
 8002608:	200013d4 	.word	0x200013d4

0800260c <FUN_Encoder_Output_Set>:
/****************************************************************************/
/*	Overview	:	OutputBuffer Set In Control								*/
/*	Return value:	Void													*/
/****************************************************************************/
void FUN_Encoder_Output_Set(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	if(HILS_START == FUN_RS485_Ctrl_hils_action_U1())
 8002610:	f007 f918 	bl	8009844 <FUN_RS485_Ctrl_hils_action_U1>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d11a      	bne.n	8002650 <FUN_Encoder_Output_Set+0x44>
	{
		Control.Float_Data.Encoder_1 = HILS.HILS_Output.HILS_AO_Float[4];	// 윈치드럼 각도(엔코더 01)
 800261a:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <FUN_Encoder_Output_Set+0x78>)
 800261c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002620:	4a19      	ldr	r2, [pc, #100]	@ (8002688 <FUN_Encoder_Output_Set+0x7c>)
 8002622:	6413      	str	r3, [r2, #64]	@ 0x40
		Control.Float_Data.Encoder_2 = HILS.HILS_Output.HILS_AO_Float[5];	// 권선정렬 각도(엔코더 02)
 8002624:	4b17      	ldr	r3, [pc, #92]	@ (8002684 <FUN_Encoder_Output_Set+0x78>)
 8002626:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800262a:	4a17      	ldr	r2, [pc, #92]	@ (8002688 <FUN_Encoder_Output_Set+0x7c>)
 800262c:	6453      	str	r3, [r2, #68]	@ 0x44

		FUN_Encoder_OutputBuffer_Set(EncoderSelect_1, Control.Float_Data.Encoder_1); 	// 윈치드럼 각도(엔코더 01)
 800262e:	4b16      	ldr	r3, [pc, #88]	@ (8002688 <FUN_Encoder_Output_Set+0x7c>)
 8002630:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002634:	eeb0 0a67 	vmov.f32	s0, s15
 8002638:	2000      	movs	r0, #0
 800263a:	f000 f829 	bl	8002690 <FUN_Encoder_OutputBuffer_Set>
		FUN_Encoder_OutputBuffer_Set(EncoderSelect_2, Control.Float_Data.Encoder_2); 	// 권선정렬 각도(엔코더 02)
 800263e:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <FUN_Encoder_Output_Set+0x7c>)
 8002640:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002644:	eeb0 0a67 	vmov.f32	s0, s15
 8002648:	2001      	movs	r0, #1
 800264a:	f000 f821 	bl	8002690 <FUN_Encoder_OutputBuffer_Set>
		Control.Float_Data.Encoder_2 = RS485.HILS_UC_Output_Float[5];	// 권선정렬 각도(엔코더 02)

		FUN_Encoder_OutputBuffer_Set(EncoderSelect_1, Control.Float_Data.Encoder_1); 	// 윈치드럼 각도(엔코더 01)
		FUN_Encoder_OutputBuffer_Set(EncoderSelect_2, Control.Float_Data.Encoder_2); 	// 권선정렬 각도(엔코더 02)
	}
}
 800264e:	e017      	b.n	8002680 <FUN_Encoder_Output_Set+0x74>
		Control.Float_Data.Encoder_1 = RS485.HILS_UC_Output_Float[4];	// 윈치드럼 각도(엔코더 01)
 8002650:	4b0e      	ldr	r3, [pc, #56]	@ (800268c <FUN_Encoder_Output_Set+0x80>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	4a0c      	ldr	r2, [pc, #48]	@ (8002688 <FUN_Encoder_Output_Set+0x7c>)
 8002656:	6413      	str	r3, [r2, #64]	@ 0x40
		Control.Float_Data.Encoder_2 = RS485.HILS_UC_Output_Float[5];	// 권선정렬 각도(엔코더 02)
 8002658:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <FUN_Encoder_Output_Set+0x80>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <FUN_Encoder_Output_Set+0x7c>)
 800265e:	6453      	str	r3, [r2, #68]	@ 0x44
		FUN_Encoder_OutputBuffer_Set(EncoderSelect_1, Control.Float_Data.Encoder_1); 	// 윈치드럼 각도(엔코더 01)
 8002660:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <FUN_Encoder_Output_Set+0x7c>)
 8002662:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002666:	eeb0 0a67 	vmov.f32	s0, s15
 800266a:	2000      	movs	r0, #0
 800266c:	f000 f810 	bl	8002690 <FUN_Encoder_OutputBuffer_Set>
		FUN_Encoder_OutputBuffer_Set(EncoderSelect_2, Control.Float_Data.Encoder_2); 	// 권선정렬 각도(엔코더 02)
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <FUN_Encoder_Output_Set+0x7c>)
 8002672:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002676:	eeb0 0a67 	vmov.f32	s0, s15
 800267a:	2001      	movs	r0, #1
 800267c:	f000 f808 	bl	8002690 <FUN_Encoder_OutputBuffer_Set>
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200006ac 	.word	0x200006ac
 8002688:	20000154 	.word	0x20000154
 800268c:	20000d90 	.word	0x20000d90

08002690 <FUN_Encoder_OutputBuffer_Set>:
/****************************************************************************/
/*	Overview	:	Control, SPI1, 2 Buffer에 Data 저장						*/
/*	Return value:	Void													*/
/****************************************************************************/
void FUN_Encoder_OutputBuffer_Set(uint8_t Encoder_Select, float Encoder_Value)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	ed87 0a00 	vstr	s0, [r7]
 800269c:	71fb      	strb	r3, [r7, #7]
	Encoder_Value = 360 - Encoder_Value;
 800269e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80026e0 <FUN_Encoder_OutputBuffer_Set+0x50>
 80026a2:	edd7 7a00 	vldr	s15, [r7]
 80026a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026aa:	edc7 7a00 	vstr	s15, [r7]

	switch(Encoder_Select)
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <FUN_Encoder_OutputBuffer_Set+0x2a>
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d007      	beq.n	80026c8 <FUN_Encoder_OutputBuffer_Set+0x38>
		case EncoderSelect_2:
			Encoder.Encoder_2_Output_Value = Encoder_Value;
			Encoder_Degree_To_Data(EncoderSelect_2);
			break;
	}
}
 80026b8:	e00d      	b.n	80026d6 <FUN_Encoder_OutputBuffer_Set+0x46>
			Encoder.Encoder_1_Output_Value = Encoder_Value;
 80026ba:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <FUN_Encoder_OutputBuffer_Set+0x54>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	60d3      	str	r3, [r2, #12]
			Encoder_Degree_To_Data(EncoderSelect_1);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f000 f811 	bl	80026e8 <Encoder_Degree_To_Data>
			break;
 80026c6:	e006      	b.n	80026d6 <FUN_Encoder_OutputBuffer_Set+0x46>
			Encoder.Encoder_2_Output_Value = Encoder_Value;
 80026c8:	4a06      	ldr	r2, [pc, #24]	@ (80026e4 <FUN_Encoder_OutputBuffer_Set+0x54>)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6113      	str	r3, [r2, #16]
			Encoder_Degree_To_Data(EncoderSelect_2);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f000 f80a 	bl	80026e8 <Encoder_Degree_To_Data>
			break;
 80026d4:	bf00      	nop
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	43b40000 	.word	0x43b40000
 80026e4:	20000698 	.word	0x20000698

080026e8 <Encoder_Degree_To_Data>:
/****************************************************************************/
/*	Overview	:	Encoder SPI Buffer Set									*/
/*	Return value:	Void													*/
/****************************************************************************/
void Encoder_Degree_To_Data(uint8_t Encoder_Select)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
	float Encoder_Float_Dummy = 0;
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
	double Encoder_Double_Dummy = 0;
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint16_t Encoder_Buffer = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	81fb      	strh	r3, [r7, #14]

	switch(Encoder_Select)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <Encoder_Degree_To_Data+0x2c>
 800270e:	2b01      	cmp	r3, #1
 8002710:	d00e      	beq.n	8002730 <Encoder_Degree_To_Data+0x48>
 8002712:	e01b      	b.n	800274c <Encoder_Degree_To_Data+0x64>
	{
		case EncoderSelect_1:
			Encoder_Float_Dummy = Encoder.Encoder_1_Output_Value * 0x7FFF / 360;		// degree -> data
 8002714:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <Encoder_Degree_To_Data+0x100>)
 8002716:	edd3 7a03 	vldr	s15, [r3, #12]
 800271a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80027ec <Encoder_Degree_To_Data+0x104>
 800271e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002722:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80027f0 <Encoder_Degree_To_Data+0x108>
 8002726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800272a:	edc7 7a07 	vstr	s15, [r7, #28]
			break;
 800272e:	e00d      	b.n	800274c <Encoder_Degree_To_Data+0x64>
		case EncoderSelect_2:
			Encoder_Float_Dummy = Encoder.Encoder_2_Output_Value * 0x7FFF / 360;		// degree -> data
 8002730:	4b2d      	ldr	r3, [pc, #180]	@ (80027e8 <Encoder_Degree_To_Data+0x100>)
 8002732:	edd3 7a04 	vldr	s15, [r3, #16]
 8002736:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80027ec <Encoder_Degree_To_Data+0x104>
 800273a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800273e:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80027f0 <Encoder_Degree_To_Data+0x108>
 8002742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002746:	edc7 7a07 	vstr	s15, [r7, #28]
			break;
 800274a:	bf00      	nop
	}

	Encoder_Double_Dummy = (double)Encoder_Float_Dummy;							//
 800274c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002750:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002754:	ed87 7b04 	vstr	d7, [r7, #16]

	Encoder_Double_Dummy = floor(Encoder_Double_Dummy + 0.5);								// 소수점 자리 반올림
 8002758:	ed97 7b04 	vldr	d7, [r7, #16]
 800275c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8002760:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002764:	eeb0 0b47 	vmov.f64	d0, d7
 8002768:	f00f fbde 	bl	8011f28 <floor>
 800276c:	ed87 0b04 	vstr	d0, [r7, #16]

	Encoder_Float_Dummy = (float)Encoder_Double_Dummy;							// degree 값 반환 (형 변환)
 8002770:	ed97 7b04 	vldr	d7, [r7, #16]
 8002774:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002778:	edc7 7a07 	vstr	s15, [r7, #28]

	Encoder_Buffer = (uint16_t)Encoder_Float_Dummy;				// data (float) -> uint32_t
 800277c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002784:	ee17 3a90 	vmov	r3, s15
 8002788:	81fb      	strh	r3, [r7, #14]
	*	16-bit read access from data register at RxNE event:
	*	unit16_t var;
	*	var= SPI_DR var=0x040A
	*/
	// (RM0410.pdf p.1323)
	switch(Encoder_Select)
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <Encoder_Degree_To_Data+0xae>
 8002790:	2b01      	cmp	r3, #1
 8002792:	d012      	beq.n	80027ba <Encoder_Degree_To_Data+0xd2>
			Encoder.SPI2_Tx_Buffer[1] = (uint8_t)(Encoder_Buffer >> 8) & 0xFF;
			Encoder.SPI2_Tx_Buffer[1] |= 0x80;
			Encoder.SPI2_Tx_Buffer[0] = (uint8_t)Encoder_Buffer & 0xFF;
			break;
		default :
			break;
 8002794:	e023      	b.n	80027de <Encoder_Degree_To_Data+0xf6>
			Encoder.SPI1_Tx_Buffer[1] = (uint8_t)(Encoder_Buffer >> 8) & 0xFF;
 8002796:	89fb      	ldrh	r3, [r7, #14]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	b29b      	uxth	r3, r3
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <Encoder_Degree_To_Data+0x100>)
 80027a0:	715a      	strb	r2, [r3, #5]
			Encoder.SPI1_Tx_Buffer[1] |= 0x80;
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <Encoder_Degree_To_Data+0x100>)
 80027a4:	795b      	ldrb	r3, [r3, #5]
 80027a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <Encoder_Degree_To_Data+0x100>)
 80027ae:	715a      	strb	r2, [r3, #5]
			Encoder.SPI1_Tx_Buffer[0] = (uint8_t)Encoder_Buffer & 0xFF;
 80027b0:	89fb      	ldrh	r3, [r7, #14]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <Encoder_Degree_To_Data+0x100>)
 80027b6:	711a      	strb	r2, [r3, #4]
			break;
 80027b8:	e011      	b.n	80027de <Encoder_Degree_To_Data+0xf6>
			Encoder.SPI2_Tx_Buffer[1] = (uint8_t)(Encoder_Buffer >> 8) & 0xFF;
 80027ba:	89fb      	ldrh	r3, [r7, #14]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	b29b      	uxth	r3, r3
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <Encoder_Degree_To_Data+0x100>)
 80027c4:	71da      	strb	r2, [r3, #7]
			Encoder.SPI2_Tx_Buffer[1] |= 0x80;
 80027c6:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <Encoder_Degree_To_Data+0x100>)
 80027c8:	79db      	ldrb	r3, [r3, #7]
 80027ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <Encoder_Degree_To_Data+0x100>)
 80027d2:	71da      	strb	r2, [r3, #7]
			Encoder.SPI2_Tx_Buffer[0] = (uint8_t)Encoder_Buffer & 0xFF;
 80027d4:	89fb      	ldrh	r3, [r7, #14]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	4b03      	ldr	r3, [pc, #12]	@ (80027e8 <Encoder_Degree_To_Data+0x100>)
 80027da:	719a      	strb	r2, [r3, #6]
			break;
 80027dc:	bf00      	nop
	}
}
 80027de:	bf00      	nop
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000698 	.word	0x20000698
 80027ec:	46fffe00 	.word	0x46fffe00
 80027f0:	43b40000 	.word	0x43b40000

080027f4 <HAL_SPI_TxCpltCallback>:
/****************************************************************************/
/*	Overview	:	SPI1, 2 Tx Callback Check and Disable					*/
/*	Return value:	Void													*/
/****************************************************************************/
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <HAL_SPI_TxCpltCallback+0x54>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10a      	bne.n	800281c <HAL_SPI_TxCpltCallback+0x28>
	{
		__HAL_SPI_DISABLE(&hspi1);
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_SPI_TxCpltCallback+0x58>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <HAL_SPI_TxCpltCallback+0x58>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002814:	601a      	str	r2, [r3, #0]

		Encoder.SPI1_Tx_Cplt_Flag = 1;
 8002816:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <HAL_SPI_TxCpltCallback+0x5c>)
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
	}
	if(hspi->Instance == SPI2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0c      	ldr	r2, [pc, #48]	@ (8002854 <HAL_SPI_TxCpltCallback+0x60>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10a      	bne.n	800283c <HAL_SPI_TxCpltCallback+0x48>
	{
		__HAL_SPI_DISABLE(&hspi2);
 8002826:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <HAL_SPI_TxCpltCallback+0x64>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <HAL_SPI_TxCpltCallback+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002834:	601a      	str	r2, [r3, #0]

		Encoder.SPI2_Tx_Cplt_Flag = 1;
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_SPI_TxCpltCallback+0x5c>)
 8002838:	2201      	movs	r2, #1
 800283a:	709a      	strb	r2, [r3, #2]
	}
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40013000 	.word	0x40013000
 800284c:	20001370 	.word	0x20001370
 8002850:	20000698 	.word	0x20000698
 8002854:	40003800 	.word	0x40003800
 8002858:	200013d4 	.word	0x200013d4

0800285c <FUN_GPI_PortCheck>:
/****************************************************************************/
/*	Overview	:	GPI Port Inverse Read									*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_GPI_PortCheck(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
	Control.Input_ch.Bit.In_ch1 = FUN_GPI_Input(PORT_NUM_1)^1;			// 무부하밸브(윈치동력)
 8002860:	2001      	movs	r0, #1
 8002862:	f000 f8e3 	bl	8002a2c <FUN_GPI_Input>
 8002866:	4603      	mov	r3, r0
 8002868:	f083 0301 	eor.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	b2d9      	uxtb	r1, r3
 8002874:	4a6c      	ldr	r2, [pc, #432]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 8002876:	7c13      	ldrb	r3, [r2, #16]
 8002878:	f361 0300 	bfi	r3, r1, #0, #1
 800287c:	7413      	strb	r3, [r2, #16]
	Control.Input_ch.Bit.In_ch2 = FUN_GPI_Input(PORT_NUM_2)^1;			// 무부하밸브(투인양동력)
 800287e:	2002      	movs	r0, #2
 8002880:	f000 f8d4 	bl	8002a2c <FUN_GPI_Input>
 8002884:	4603      	mov	r3, r0
 8002886:	f083 0301 	eor.w	r3, r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	b2d9      	uxtb	r1, r3
 8002892:	4a65      	ldr	r2, [pc, #404]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 8002894:	7c13      	ldrb	r3, [r2, #16]
 8002896:	f361 0341 	bfi	r3, r1, #1, #1
 800289a:	7413      	strb	r3, [r2, #16]
	Control.Input_ch.Bit.In_ch3 = FUN_GPI_Input(PORT_NUM_3)^1;			// 방향전환밸브(수냉식냉각기)
 800289c:	2003      	movs	r0, #3
 800289e:	f000 f8c5 	bl	8002a2c <FUN_GPI_Input>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f083 0301 	eor.w	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	b2d9      	uxtb	r1, r3
 80028b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 80028b2:	7c13      	ldrb	r3, [r2, #16]
 80028b4:	f361 0382 	bfi	r3, r1, #2, #1
 80028b8:	7413      	strb	r3, [r2, #16]
	Control.Input_ch.Bit.In_ch4 = FUN_GPI_Input(PORT_NUM_4)^1;			// 차단밸브(수냉식냉각기)
 80028ba:	2004      	movs	r0, #4
 80028bc:	f000 f8b6 	bl	8002a2c <FUN_GPI_Input>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	b2d9      	uxtb	r1, r3
 80028ce:	4a56      	ldr	r2, [pc, #344]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 80028d0:	7c13      	ldrb	r3, [r2, #16]
 80028d2:	f361 03c3 	bfi	r3, r1, #3, #1
 80028d6:	7413      	strb	r3, [r2, #16]
	Control.Input_ch.Bit.In_ch5 = FUN_GPI_Input(PORT_NUM_5)^1;			// 차단밸브(축압기 충전)
 80028d8:	2005      	movs	r0, #5
 80028da:	f000 f8a7 	bl	8002a2c <FUN_GPI_Input>
 80028de:	4603      	mov	r3, r0
 80028e0:	f083 0301 	eor.w	r3, r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	b2d9      	uxtb	r1, r3
 80028ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 80028ee:	7c13      	ldrb	r3, [r2, #16]
 80028f0:	f361 1304 	bfi	r3, r1, #4, #1
 80028f4:	7413      	strb	r3, [r2, #16]
	Control.Input_ch.Bit.In_ch6 = FUN_GPI_Input(PORT_NUM_6)^1;			// 차단밸브(윈치동력)
 80028f6:	2006      	movs	r0, #6
 80028f8:	f000 f898 	bl	8002a2c <FUN_GPI_Input>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f083 0301 	eor.w	r3, r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	b2d9      	uxtb	r1, r3
 800290a:	4a47      	ldr	r2, [pc, #284]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 800290c:	7c13      	ldrb	r3, [r2, #16]
 800290e:	f361 1345 	bfi	r3, r1, #5, #1
 8002912:	7413      	strb	r3, [r2, #16]
	Control.Input_ch.Bit.In_ch7 = FUN_GPI_Input(PORT_NUM_7)^1;			// 윈치조립체 : 방향전환밸브(권선브레이크)
 8002914:	2007      	movs	r0, #7
 8002916:	f000 f889 	bl	8002a2c <FUN_GPI_Input>
 800291a:	4603      	mov	r3, r0
 800291c:	f083 0301 	eor.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	b2d9      	uxtb	r1, r3
 8002928:	4a3f      	ldr	r2, [pc, #252]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 800292a:	7c53      	ldrb	r3, [r2, #17]
 800292c:	f361 0300 	bfi	r3, r1, #0, #1
 8002930:	7453      	strb	r3, [r2, #17]
	Control.Input_ch.Bit.In_ch8 = FUN_GPI_Input(PORT_NUM_8)^1;			// 윈치조립체 : 방향전환밸브(보조브레이크)
 8002932:	2008      	movs	r0, #8
 8002934:	f000 f87a 	bl	8002a2c <FUN_GPI_Input>
 8002938:	4603      	mov	r3, r0
 800293a:	f083 0301 	eor.w	r3, r3, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	b2d9      	uxtb	r1, r3
 8002946:	4a38      	ldr	r2, [pc, #224]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 8002948:	7c53      	ldrb	r3, [r2, #17]
 800294a:	f361 0382 	bfi	r3, r1, #2, #1
 800294e:	7453      	strb	r3, [r2, #17]
	Control.Input_ch.Bit.In_ch9 = FUN_GPI_Input(PORT_NUM_9)^1;			// 윈치조립체 : 방향전환밸브(보조절단기)
 8002950:	2009      	movs	r0, #9
 8002952:	f000 f86b 	bl	8002a2c <FUN_GPI_Input>
 8002956:	4603      	mov	r3, r0
 8002958:	f083 0301 	eor.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	b2d9      	uxtb	r1, r3
 8002964:	4a30      	ldr	r2, [pc, #192]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 8002966:	7c53      	ldrb	r3, [r2, #17]
 8002968:	f361 1304 	bfi	r3, r1, #4, #1
 800296c:	7453      	strb	r3, [r2, #17]
	Control.Input_ch.Bit.In_ch10 = FUN_GPI_Input(PORT_NUM_10)^1;		// 윈치조립체 : 방향전환밸브(주브레이크)
 800296e:	200a      	movs	r0, #10
 8002970:	f000 f85c 	bl	8002a2c <FUN_GPI_Input>
 8002974:	4603      	mov	r3, r0
 8002976:	f083 0301 	eor.w	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	b2d9      	uxtb	r1, r3
 8002982:	4a29      	ldr	r2, [pc, #164]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 8002984:	7c53      	ldrb	r3, [r2, #17]
 8002986:	f361 0341 	bfi	r3, r1, #1, #1
 800298a:	7453      	strb	r3, [r2, #17]
	Control.Input_ch.Bit.In_ch11 = FUN_GPI_Input(PORT_NUM_11)^1;		// 윈치조립체 : 방향전환밸브(주절단기)
 800298c:	200b      	movs	r0, #11
 800298e:	f000 f84d 	bl	8002a2c <FUN_GPI_Input>
 8002992:	4603      	mov	r3, r0
 8002994:	f083 0301 	eor.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	b2d9      	uxtb	r1, r3
 80029a0:	4a21      	ldr	r2, [pc, #132]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 80029a2:	7c53      	ldrb	r3, [r2, #17]
 80029a4:	f361 03c3 	bfi	r3, r1, #3, #1
 80029a8:	7453      	strb	r3, [r2, #17]
	Control.Input_ch.Bit.In_ch12 = FUN_GPI_Input(PORT_NUM_12)^1;		// 투인양장치 : 청수잠금밸브(세척기)
 80029aa:	200c      	movs	r0, #12
 80029ac:	f000 f83e 	bl	8002a2c <FUN_GPI_Input>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f083 0301 	eor.w	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	b2d9      	uxtb	r1, r3
 80029be:	4a1a      	ldr	r2, [pc, #104]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 80029c0:	7c53      	ldrb	r3, [r2, #17]
 80029c2:	f361 1345 	bfi	r3, r1, #5, #1
 80029c6:	7453      	strb	r3, [r2, #17]
	Control.Input_ch.Bit.In_ch13 = FUN_GPI_Input(PORT_NUM_13)^1;		// 확성기
 80029c8:	200d      	movs	r0, #13
 80029ca:	f000 f82f 	bl	8002a2c <FUN_GPI_Input>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f083 0301 	eor.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	b2d9      	uxtb	r1, r3
 80029dc:	4a12      	ldr	r2, [pc, #72]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 80029de:	7c53      	ldrb	r3, [r2, #17]
 80029e0:	f361 1386 	bfi	r3, r1, #6, #1
 80029e4:	7453      	strb	r3, [r2, #17]
//	Control.Input_ch.Bit.In_ch14 = FUN_GPI_Input(PORT_NUM_14)^1;
//	Control.Input_ch.Bit.In_ch15 = FUN_GPI_Input(PORT_NUM_15)^1;
//	Control.Input_ch.Bit.In_ch16 = FUN_GPI_Input(PORT_NUM_16)^1;
	Control.Input_ch.Bit.In_ch17 = FUN_GPI_Input(PORT_NUM_17)^1;		// 동력공급장치: 냉각기 구동명령
 80029e6:	2011      	movs	r0, #17
 80029e8:	f000 f820 	bl	8002a2c <FUN_GPI_Input>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f083 0301 	eor.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	b2d9      	uxtb	r1, r3
 80029fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 80029fc:	7c13      	ldrb	r3, [r2, #16]
 80029fe:	f361 1386 	bfi	r3, r1, #6, #1
 8002a02:	7413      	strb	r3, [r2, #16]
	Control.Input_ch.Bit.In_ch18 = FUN_GPI_Input(PORT_NUM_18)^1;		// 동력공급장치: 히터 구동명령
 8002a04:	2012      	movs	r0, #18
 8002a06:	f000 f811 	bl	8002a2c <FUN_GPI_Input>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f083 0301 	eor.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	b2d9      	uxtb	r1, r3
 8002a18:	4a03      	ldr	r2, [pc, #12]	@ (8002a28 <FUN_GPI_PortCheck+0x1cc>)
 8002a1a:	7c13      	ldrb	r3, [r2, #16]
 8002a1c:	f361 13c7 	bfi	r3, r1, #7, #1
 8002a20:	7413      	strb	r3, [r2, #16]
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000154 	.word	0x20000154

08002a2c <FUN_GPI_Input>:
/*	Return value:	uint8_t													*/
/****************************************************************************/
// 입력에 포트 IN_Channel 번호를 넣음.
// 출력에 입력 표트의 정보가 출력됨.
static uint8_t FUN_GPI_Input(uint8_t u1t_inport)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
	uint8_t u1t_input_val = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
	uint8_t u1t_ret = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73bb      	strb	r3, [r7, #14]

	switch(u1t_inport)
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	2b11      	cmp	r3, #17
 8002a44:	f200 811b 	bhi.w	8002c7e <FUN_GPI_Input+0x252>
 8002a48:	a201      	add	r2, pc, #4	@ (adr r2, 8002a50 <FUN_GPI_Input+0x24>)
 8002a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4e:	bf00      	nop
 8002a50:	08002a99 	.word	0x08002a99
 8002a54:	08002ab5 	.word	0x08002ab5
 8002a58:	08002ad1 	.word	0x08002ad1
 8002a5c:	08002aed 	.word	0x08002aed
 8002a60:	08002b09 	.word	0x08002b09
 8002a64:	08002b25 	.word	0x08002b25
 8002a68:	08002b3f 	.word	0x08002b3f
 8002a6c:	08002b59 	.word	0x08002b59
 8002a70:	08002b75 	.word	0x08002b75
 8002a74:	08002b91 	.word	0x08002b91
 8002a78:	08002bad 	.word	0x08002bad
 8002a7c:	08002bc9 	.word	0x08002bc9
 8002a80:	08002be3 	.word	0x08002be3
 8002a84:	08002bfd 	.word	0x08002bfd
 8002a88:	08002c17 	.word	0x08002c17
 8002a8c:	08002c31 	.word	0x08002c31
 8002a90:	08002c4b 	.word	0x08002c4b
 8002a94:	08002c65 	.word	0x08002c65
	{
		case PORT_NUM_1:								// INPUT PORT Channel Number
			if(InputPort_HIGH == InputPort_CH_1)
 8002a98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a9c:	487c      	ldr	r0, [pc, #496]	@ (8002c90 <FUN_GPI_Input+0x264>)
 8002a9e:	f00a f9f7 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d102      	bne.n	8002aae <FUN_GPI_Input+0x82>
			{											// 입력 값 비교 		if(INPUT == HI)
				u1t_input_val = InputPort_HIGH;			// HI 저장
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;			// LO 저장
			}
		break;
 8002aac:	e0e8      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;			// LO 저장
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
		break;
 8002ab2:	e0e5      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_2:
			if(InputPort_HIGH == InputPort_CH_2)
 8002ab4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ab8:	4875      	ldr	r0, [pc, #468]	@ (8002c90 <FUN_GPI_Input+0x264>)
 8002aba:	f00a f9e9 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d102      	bne.n	8002aca <FUN_GPI_Input+0x9e>
			{
				u1t_input_val = InputPort_HIGH;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002ac8:	e0da      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
		break;
 8002ace:	e0d7      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_3:
			if(InputPort_HIGH == InputPort_CH_3)
 8002ad0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ad4:	486e      	ldr	r0, [pc, #440]	@ (8002c90 <FUN_GPI_Input+0x264>)
 8002ad6:	f00a f9db 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d102      	bne.n	8002ae6 <FUN_GPI_Input+0xba>
			{
				u1t_input_val = InputPort_HIGH;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002ae4:	e0cc      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
		break;
 8002aea:	e0c9      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_4:
			if(InputPort_HIGH == InputPort_CH_4)
 8002aec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002af0:	4867      	ldr	r0, [pc, #412]	@ (8002c90 <FUN_GPI_Input+0x264>)
 8002af2:	f00a f9cd 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d102      	bne.n	8002b02 <FUN_GPI_Input+0xd6>
			{
				u1t_input_val = InputPort_HIGH;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002b00:	e0be      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
		break;
 8002b06:	e0bb      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_5:
			if(InputPort_HIGH == InputPort_CH_5)
 8002b08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b0c:	4860      	ldr	r0, [pc, #384]	@ (8002c90 <FUN_GPI_Input+0x264>)
 8002b0e:	f00a f9bf 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <FUN_GPI_Input+0xf2>
			{
				u1t_input_val = InputPort_HIGH;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002b1c:	e0b0      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
		break;
 8002b22:	e0ad      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_6:
			if(InputPort_HIGH == InputPort_CH_6)
 8002b24:	2140      	movs	r1, #64	@ 0x40
 8002b26:	485b      	ldr	r0, [pc, #364]	@ (8002c94 <FUN_GPI_Input+0x268>)
 8002b28:	f00a f9b2 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d102      	bne.n	8002b38 <FUN_GPI_Input+0x10c>
			{
				u1t_input_val = InputPort_HIGH;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002b36:	e0a3      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	73fb      	strb	r3, [r7, #15]
		break;
 8002b3c:	e0a0      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_7:
			if(InputPort_HIGH == InputPort_CH_7)
 8002b3e:	2180      	movs	r1, #128	@ 0x80
 8002b40:	4854      	ldr	r0, [pc, #336]	@ (8002c94 <FUN_GPI_Input+0x268>)
 8002b42:	f00a f9a5 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d102      	bne.n	8002b52 <FUN_GPI_Input+0x126>
			{
				u1t_input_val = InputPort_HIGH;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002b50:	e096      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
		break;
 8002b56:	e093      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_8:
			if(InputPort_HIGH == InputPort_CH_8)
 8002b58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b5c:	484d      	ldr	r0, [pc, #308]	@ (8002c94 <FUN_GPI_Input+0x268>)
 8002b5e:	f00a f997 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d102      	bne.n	8002b6e <FUN_GPI_Input+0x142>
			{
				u1t_input_val = InputPort_HIGH;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002b6c:	e088      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]
		break;
 8002b72:	e085      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_9:
			if(InputPort_HIGH == InputPort_CH_9)
 8002b74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b78:	4846      	ldr	r0, [pc, #280]	@ (8002c94 <FUN_GPI_Input+0x268>)
 8002b7a:	f00a f989 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <FUN_GPI_Input+0x15e>
			{
				u1t_input_val = InputPort_HIGH;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002b88:	e07a      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
		break;
 8002b8e:	e077      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_10:
			if(InputPort_HIGH == InputPort_CH_10)
 8002b90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b94:	483f      	ldr	r0, [pc, #252]	@ (8002c94 <FUN_GPI_Input+0x268>)
 8002b96:	f00a f97b 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d102      	bne.n	8002ba6 <FUN_GPI_Input+0x17a>
			{
				u1t_input_val = InputPort_HIGH;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002ba4:	e06c      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
		break;
 8002baa:	e069      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_11:
			if(InputPort_HIGH == InputPort_CH_11)
 8002bac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bb0:	4838      	ldr	r0, [pc, #224]	@ (8002c94 <FUN_GPI_Input+0x268>)
 8002bb2:	f00a f96d 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d102      	bne.n	8002bc2 <FUN_GPI_Input+0x196>
			{
				u1t_input_val = InputPort_HIGH;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002bc0:	e05e      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	73fb      	strb	r3, [r7, #15]
		break;
 8002bc6:	e05b      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_12:
			if(InputPort_HIGH == InputPort_CH_12)
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4833      	ldr	r0, [pc, #204]	@ (8002c98 <FUN_GPI_Input+0x26c>)
 8002bcc:	f00a f960 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d102      	bne.n	8002bdc <FUN_GPI_Input+0x1b0>
			{
				u1t_input_val = InputPort_HIGH;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002bda:	e051      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
		break;
 8002be0:	e04e      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_13:
			if(InputPort_HIGH == InputPort_CH_13)
 8002be2:	2102      	movs	r1, #2
 8002be4:	482c      	ldr	r0, [pc, #176]	@ (8002c98 <FUN_GPI_Input+0x26c>)
 8002be6:	f00a f953 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d102      	bne.n	8002bf6 <FUN_GPI_Input+0x1ca>
			{
				u1t_input_val = InputPort_HIGH;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002bf4:	e044      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
		break;
 8002bfa:	e041      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_14:
			if(InputPort_HIGH == InputPort_CH_14){
 8002bfc:	2104      	movs	r1, #4
 8002bfe:	4826      	ldr	r0, [pc, #152]	@ (8002c98 <FUN_GPI_Input+0x26c>)
 8002c00:	f00a f946 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d102      	bne.n	8002c10 <FUN_GPI_Input+0x1e4>
				u1t_input_val = InputPort_HIGH;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
			} else {
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002c0e:	e037      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
		break;
 8002c14:	e034      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_15:
			if(InputPort_HIGH == InputPort_CH_15){
 8002c16:	2104      	movs	r1, #4
 8002c18:	4820      	ldr	r0, [pc, #128]	@ (8002c9c <FUN_GPI_Input+0x270>)
 8002c1a:	f00a f939 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d102      	bne.n	8002c2a <FUN_GPI_Input+0x1fe>
				u1t_input_val = InputPort_HIGH;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
			} else {
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002c28:	e02a      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
		break;
 8002c2e:	e027      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_16:
			if(InputPort_HIGH == InputPort_CH_16){
 8002c30:	2108      	movs	r1, #8
 8002c32:	481a      	ldr	r0, [pc, #104]	@ (8002c9c <FUN_GPI_Input+0x270>)
 8002c34:	f00a f92c 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <FUN_GPI_Input+0x218>
				u1t_input_val = InputPort_HIGH;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
			} else {
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002c42:	e01d      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]
		break;
 8002c48:	e01a      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_17:
			if(InputPort_HIGH == InputPort_CH_17)
 8002c4a:	2110      	movs	r1, #16
 8002c4c:	4814      	ldr	r0, [pc, #80]	@ (8002ca0 <FUN_GPI_Input+0x274>)
 8002c4e:	f00a f91f 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d102      	bne.n	8002c5e <FUN_GPI_Input+0x232>
			{
				u1t_input_val = InputPort_HIGH;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002c5c:	e010      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]
		break;
 8002c62:	e00d      	b.n	8002c80 <FUN_GPI_Input+0x254>

		case PORT_NUM_18:
			if(InputPort_HIGH == InputPort_CH_18)
 8002c64:	2120      	movs	r1, #32
 8002c66:	480e      	ldr	r0, [pc, #56]	@ (8002ca0 <FUN_GPI_Input+0x274>)
 8002c68:	f00a f912 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d102      	bne.n	8002c78 <FUN_GPI_Input+0x24c>
			{
				u1t_input_val = InputPort_HIGH;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				u1t_input_val = InputPort_LOW;
			}
		break;
 8002c76:	e003      	b.n	8002c80 <FUN_GPI_Input+0x254>
				u1t_input_val = InputPort_LOW;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
		break;
 8002c7c:	e000      	b.n	8002c80 <FUN_GPI_Input+0x254>

		default:
		break;
 8002c7e:	bf00      	nop
	}

	u1t_ret = u1t_input_val;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	73bb      	strb	r3, [r7, #14]

	return u1t_ret;
 8002c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	40022400 	.word	0x40022400
 8002c98:	40022800 	.word	0x40022800
 8002c9c:	40021800 	.word	0x40021800
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <FUN_GPO_Init>:
/****************************************************************************/
/*	Overview	:	출력 초기상태를 High로 설정									*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_GPO_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	OUTPUT_CH_1_HIGH();
 8002ca8:	2201      	movs	r2, #1
 8002caa:	2110      	movs	r1, #16
 8002cac:	4880      	ldr	r0, [pc, #512]	@ (8002eb0 <FUN_GPO_Init+0x20c>)
 8002cae:	f00a f907 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_2_HIGH();
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	2120      	movs	r1, #32
 8002cb6:	487e      	ldr	r0, [pc, #504]	@ (8002eb0 <FUN_GPO_Init+0x20c>)
 8002cb8:	f00a f902 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_3_HIGH();
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	2140      	movs	r1, #64	@ 0x40
 8002cc0:	487b      	ldr	r0, [pc, #492]	@ (8002eb0 <FUN_GPO_Init+0x20c>)
 8002cc2:	f00a f8fd 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_4_HIGH();
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	2180      	movs	r1, #128	@ 0x80
 8002cca:	4879      	ldr	r0, [pc, #484]	@ (8002eb0 <FUN_GPO_Init+0x20c>)
 8002ccc:	f00a f8f8 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_5_HIGH();
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cd6:	4876      	ldr	r0, [pc, #472]	@ (8002eb0 <FUN_GPO_Init+0x20c>)
 8002cd8:	f00a f8f2 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_6_HIGH();
 8002cdc:	2201      	movs	r2, #1
 8002cde:	2140      	movs	r1, #64	@ 0x40
 8002ce0:	4874      	ldr	r0, [pc, #464]	@ (8002eb4 <FUN_GPO_Init+0x210>)
 8002ce2:	f00a f8ed 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_7_HIGH();
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	2180      	movs	r1, #128	@ 0x80
 8002cea:	4872      	ldr	r0, [pc, #456]	@ (8002eb4 <FUN_GPO_Init+0x210>)
 8002cec:	f00a f8e8 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_8_HIGH();
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cf6:	486f      	ldr	r0, [pc, #444]	@ (8002eb4 <FUN_GPO_Init+0x210>)
 8002cf8:	f00a f8e2 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_9_HIGH();
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d02:	486c      	ldr	r0, [pc, #432]	@ (8002eb4 <FUN_GPO_Init+0x210>)
 8002d04:	f00a f8dc 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_10_HIGH();
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d0e:	486a      	ldr	r0, [pc, #424]	@ (8002eb8 <FUN_GPO_Init+0x214>)
 8002d10:	f00a f8d6 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_11_HIGH();
 8002d14:	2201      	movs	r2, #1
 8002d16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d1a:	4867      	ldr	r0, [pc, #412]	@ (8002eb8 <FUN_GPO_Init+0x214>)
 8002d1c:	f00a f8d0 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_12_HIGH();
 8002d20:	2201      	movs	r2, #1
 8002d22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d26:	4865      	ldr	r0, [pc, #404]	@ (8002ebc <FUN_GPO_Init+0x218>)
 8002d28:	f00a f8ca 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_13_HIGH();
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d32:	4861      	ldr	r0, [pc, #388]	@ (8002eb8 <FUN_GPO_Init+0x214>)
 8002d34:	f00a f8c4 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_14_HIGH();
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d3e:	4860      	ldr	r0, [pc, #384]	@ (8002ec0 <FUN_GPO_Init+0x21c>)
 8002d40:	f00a f8be 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_15_HIGH();
 8002d44:	2201      	movs	r2, #1
 8002d46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d4a:	485d      	ldr	r0, [pc, #372]	@ (8002ec0 <FUN_GPO_Init+0x21c>)
 8002d4c:	f00a f8b8 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_16_HIGH();
 8002d50:	2201      	movs	r2, #1
 8002d52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d56:	485a      	ldr	r0, [pc, #360]	@ (8002ec0 <FUN_GPO_Init+0x21c>)
 8002d58:	f00a f8b2 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_17_HIGH();
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4858      	ldr	r0, [pc, #352]	@ (8002ec4 <FUN_GPO_Init+0x220>)
 8002d62:	f00a f8ad 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_18_HIGH();
 8002d66:	2201      	movs	r2, #1
 8002d68:	2102      	movs	r1, #2
 8002d6a:	4856      	ldr	r0, [pc, #344]	@ (8002ec4 <FUN_GPO_Init+0x220>)
 8002d6c:	f00a f8a8 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_19_HIGH();
 8002d70:	2201      	movs	r2, #1
 8002d72:	2104      	movs	r1, #4
 8002d74:	4853      	ldr	r0, [pc, #332]	@ (8002ec4 <FUN_GPO_Init+0x220>)
 8002d76:	f00a f8a3 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_20_HIGH();
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	2108      	movs	r1, #8
 8002d7e:	4851      	ldr	r0, [pc, #324]	@ (8002ec4 <FUN_GPO_Init+0x220>)
 8002d80:	f00a f89e 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_21_HIGH();
 8002d84:	2201      	movs	r2, #1
 8002d86:	2101      	movs	r1, #1
 8002d88:	484f      	ldr	r0, [pc, #316]	@ (8002ec8 <FUN_GPO_Init+0x224>)
 8002d8a:	f00a f899 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_22_HIGH();
 8002d8e:	2201      	movs	r2, #1
 8002d90:	2102      	movs	r1, #2
 8002d92:	484d      	ldr	r0, [pc, #308]	@ (8002ec8 <FUN_GPO_Init+0x224>)
 8002d94:	f00a f894 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_23_HIGH();
 8002d98:	2201      	movs	r2, #1
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	484a      	ldr	r0, [pc, #296]	@ (8002ec8 <FUN_GPO_Init+0x224>)
 8002d9e:	f00a f88f 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_24_HIGH();
 8002da2:	2201      	movs	r2, #1
 8002da4:	2108      	movs	r1, #8
 8002da6:	4848      	ldr	r0, [pc, #288]	@ (8002ec8 <FUN_GPO_Init+0x224>)
 8002da8:	f00a f88a 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_25_HIGH();
 8002dac:	2201      	movs	r2, #1
 8002dae:	2110      	movs	r1, #16
 8002db0:	4845      	ldr	r0, [pc, #276]	@ (8002ec8 <FUN_GPO_Init+0x224>)
 8002db2:	f00a f885 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_26_HIGH();
 8002db6:	2201      	movs	r2, #1
 8002db8:	2120      	movs	r1, #32
 8002dba:	4843      	ldr	r0, [pc, #268]	@ (8002ec8 <FUN_GPO_Init+0x224>)
 8002dbc:	f00a f880 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_27_HIGH();
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	2140      	movs	r1, #64	@ 0x40
 8002dc4:	4840      	ldr	r0, [pc, #256]	@ (8002ec8 <FUN_GPO_Init+0x224>)
 8002dc6:	f00a f87b 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_28_HIGH();
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002dd0:	483e      	ldr	r0, [pc, #248]	@ (8002ecc <FUN_GPO_Init+0x228>)
 8002dd2:	f00a f875 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_29_HIGH();
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ddc:	483b      	ldr	r0, [pc, #236]	@ (8002ecc <FUN_GPO_Init+0x228>)
 8002dde:	f00a f86f 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_30_HIGH();
 8002de2:	2201      	movs	r2, #1
 8002de4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002de8:	4838      	ldr	r0, [pc, #224]	@ (8002ecc <FUN_GPO_Init+0x228>)
 8002dea:	f00a f869 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_31_HIGH();
 8002dee:	2201      	movs	r2, #1
 8002df0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002df4:	4835      	ldr	r0, [pc, #212]	@ (8002ecc <FUN_GPO_Init+0x228>)
 8002df6:	f00a f863 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_32_HIGH();
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e00:	482e      	ldr	r0, [pc, #184]	@ (8002ebc <FUN_GPO_Init+0x218>)
 8002e02:	f00a f85d 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_33_HIGH();
 8002e06:	2201      	movs	r2, #1
 8002e08:	2108      	movs	r1, #8
 8002e0a:	4831      	ldr	r0, [pc, #196]	@ (8002ed0 <FUN_GPO_Init+0x22c>)
 8002e0c:	f00a f858 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_34_HIGH();
 8002e10:	2201      	movs	r2, #1
 8002e12:	2110      	movs	r1, #16
 8002e14:	482e      	ldr	r0, [pc, #184]	@ (8002ed0 <FUN_GPO_Init+0x22c>)
 8002e16:	f00a f853 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_35_HIGH();
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2120      	movs	r1, #32
 8002e1e:	482c      	ldr	r0, [pc, #176]	@ (8002ed0 <FUN_GPO_Init+0x22c>)
 8002e20:	f00a f84e 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_36_HIGH();
 8002e24:	2201      	movs	r2, #1
 8002e26:	2140      	movs	r1, #64	@ 0x40
 8002e28:	4829      	ldr	r0, [pc, #164]	@ (8002ed0 <FUN_GPO_Init+0x22c>)
 8002e2a:	f00a f849 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_37_HIGH();
 8002e2e:	2201      	movs	r2, #1
 8002e30:	2180      	movs	r1, #128	@ 0x80
 8002e32:	4827      	ldr	r0, [pc, #156]	@ (8002ed0 <FUN_GPO_Init+0x22c>)
 8002e34:	f00a f844 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_38_HIGH();
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e3e:	481c      	ldr	r0, [pc, #112]	@ (8002eb0 <FUN_GPO_Init+0x20c>)
 8002e40:	f00a f83e 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_39_HIGH();
 8002e44:	2201      	movs	r2, #1
 8002e46:	2120      	movs	r1, #32
 8002e48:	4822      	ldr	r0, [pc, #136]	@ (8002ed4 <FUN_GPO_Init+0x230>)
 8002e4a:	f00a f839 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_40_HIGH();
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e54:	481f      	ldr	r0, [pc, #124]	@ (8002ed4 <FUN_GPO_Init+0x230>)
 8002e56:	f00a f833 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_41_HIGH();
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e60:	481c      	ldr	r0, [pc, #112]	@ (8002ed4 <FUN_GPO_Init+0x230>)
 8002e62:	f00a f82d 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_42_HIGH();
 8002e66:	2201      	movs	r2, #1
 8002e68:	2101      	movs	r1, #1
 8002e6a:	481b      	ldr	r0, [pc, #108]	@ (8002ed8 <FUN_GPO_Init+0x234>)
 8002e6c:	f00a f828 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_43_HIGH();
 8002e70:	2201      	movs	r2, #1
 8002e72:	2102      	movs	r1, #2
 8002e74:	4818      	ldr	r0, [pc, #96]	@ (8002ed8 <FUN_GPO_Init+0x234>)
 8002e76:	f00a f823 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_44_HIGH();
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	2110      	movs	r1, #16
 8002e7e:	4811      	ldr	r0, [pc, #68]	@ (8002ec4 <FUN_GPO_Init+0x220>)
 8002e80:	f00a f81e 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_45_HIGH();
 8002e84:	2201      	movs	r2, #1
 8002e86:	2120      	movs	r1, #32
 8002e88:	480e      	ldr	r0, [pc, #56]	@ (8002ec4 <FUN_GPO_Init+0x220>)
 8002e8a:	f00a f819 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_46_HIGH();
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2140      	movs	r1, #64	@ 0x40
 8002e92:	480c      	ldr	r0, [pc, #48]	@ (8002ec4 <FUN_GPO_Init+0x220>)
 8002e94:	f00a f814 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_47_HIGH();
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2180      	movs	r1, #128	@ 0x80
 8002e9c:	4809      	ldr	r0, [pc, #36]	@ (8002ec4 <FUN_GPO_Init+0x220>)
 8002e9e:	f00a f80f 	bl	800cec0 <HAL_GPIO_WritePin>
	OUTPUT_CH_48_HIGH();
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	480c      	ldr	r0, [pc, #48]	@ (8002ed8 <FUN_GPO_Init+0x234>)
 8002ea8:	f00a f80a 	bl	800cec0 <HAL_GPIO_WritePin>
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021800 	.word	0x40021800
 8002eb4:	40020800 	.word	0x40020800
 8002eb8:	40020000 	.word	0x40020000
 8002ebc:	40021400 	.word	0x40021400
 8002ec0:	40021c00 	.word	0x40021c00
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40022400 	.word	0x40022400
 8002ed0:	40022800 	.word	0x40022800
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40021000 	.word	0x40021000

08002edc <FUN_GPO_PortCheck>:
/****************************************************************************/
/*	Overview	:	GPO Port Inverse Read														*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_GPO_PortCheck(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
	// Read OUTPUT PORT State
	Control.Output_ch.Bit.Out_ch1 = OUTPUT_CH_1_READ()^1;
 8002ee0:	2110      	movs	r1, #16
 8002ee2:	48cc      	ldr	r0, [pc, #816]	@ (8003214 <FUN_GPO_PortCheck+0x338>)
 8002ee4:	f009 ffd4 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f083 0301 	eor.w	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	b2d9      	uxtb	r1, r3
 8002ef6:	4ac8      	ldr	r2, [pc, #800]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8002ef8:	7d53      	ldrb	r3, [r2, #21]
 8002efa:	f361 0382 	bfi	r3, r1, #2, #1
 8002efe:	7553      	strb	r3, [r2, #21]
	Control.Output_ch.Bit.Out_ch2 = OUTPUT_CH_2_READ()^1;
 8002f00:	2120      	movs	r1, #32
 8002f02:	48c4      	ldr	r0, [pc, #784]	@ (8003214 <FUN_GPO_PortCheck+0x338>)
 8002f04:	f009 ffc4 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f083 0301 	eor.w	r3, r3, #1
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	b2d9      	uxtb	r1, r3
 8002f16:	4ac0      	ldr	r2, [pc, #768]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8002f18:	7d53      	ldrb	r3, [r2, #21]
 8002f1a:	f361 03c3 	bfi	r3, r1, #3, #1
 8002f1e:	7553      	strb	r3, [r2, #21]
	Control.Output_ch.Bit.Out_ch3 = OUTPUT_CH_3_READ()^1;
 8002f20:	2140      	movs	r1, #64	@ 0x40
 8002f22:	48bc      	ldr	r0, [pc, #752]	@ (8003214 <FUN_GPO_PortCheck+0x338>)
 8002f24:	f009 ffb4 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f083 0301 	eor.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	b2d9      	uxtb	r1, r3
 8002f36:	4ab8      	ldr	r2, [pc, #736]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8002f38:	7d53      	ldrb	r3, [r2, #21]
 8002f3a:	f361 1304 	bfi	r3, r1, #4, #1
 8002f3e:	7553      	strb	r3, [r2, #21]
	Control.Output_ch.Bit.Out_ch4 = OUTPUT_CH_4_READ()^1;
 8002f40:	2180      	movs	r1, #128	@ 0x80
 8002f42:	48b4      	ldr	r0, [pc, #720]	@ (8003214 <FUN_GPO_PortCheck+0x338>)
 8002f44:	f009 ffa4 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f083 0301 	eor.w	r3, r3, #1
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	b2d9      	uxtb	r1, r3
 8002f56:	4ab0      	ldr	r2, [pc, #704]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8002f58:	7d93      	ldrb	r3, [r2, #22]
 8002f5a:	f361 0341 	bfi	r3, r1, #1, #1
 8002f5e:	7593      	strb	r3, [r2, #22]
	Control.Output_ch.Bit.Out_ch5 = OUTPUT_CH_5_READ()^1;
 8002f60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f64:	48ab      	ldr	r0, [pc, #684]	@ (8003214 <FUN_GPO_PortCheck+0x338>)
 8002f66:	f009 ff93 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f083 0301 	eor.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	b2d9      	uxtb	r1, r3
 8002f78:	4aa7      	ldr	r2, [pc, #668]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8002f7a:	7d13      	ldrb	r3, [r2, #20]
 8002f7c:	f361 03c3 	bfi	r3, r1, #3, #1
 8002f80:	7513      	strb	r3, [r2, #20]
	Control.Output_ch.Bit.Out_ch6 = OUTPUT_CH_6_READ()^1;
 8002f82:	2140      	movs	r1, #64	@ 0x40
 8002f84:	48a5      	ldr	r0, [pc, #660]	@ (800321c <FUN_GPO_PortCheck+0x340>)
 8002f86:	f009 ff83 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f083 0301 	eor.w	r3, r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	b2d9      	uxtb	r1, r3
 8002f98:	4a9f      	ldr	r2, [pc, #636]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8002f9a:	7d13      	ldrb	r3, [r2, #20]
 8002f9c:	f361 1345 	bfi	r3, r1, #5, #1
 8002fa0:	7513      	strb	r3, [r2, #20]
	Control.Output_ch.Bit.Out_ch7 = OUTPUT_CH_7_READ()^1;
 8002fa2:	2180      	movs	r1, #128	@ 0x80
 8002fa4:	489d      	ldr	r0, [pc, #628]	@ (800321c <FUN_GPO_PortCheck+0x340>)
 8002fa6:	f009 ff73 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f083 0301 	eor.w	r3, r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	b2d9      	uxtb	r1, r3
 8002fb8:	4a97      	ldr	r2, [pc, #604]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8002fba:	7d13      	ldrb	r3, [r2, #20]
 8002fbc:	f361 0300 	bfi	r3, r1, #0, #1
 8002fc0:	7513      	strb	r3, [r2, #20]
	Control.Output_ch.Bit.Out_ch8 = OUTPUT_CH_8_READ()^1;
 8002fc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fc6:	4895      	ldr	r0, [pc, #596]	@ (800321c <FUN_GPO_PortCheck+0x340>)
 8002fc8:	f009 ff62 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f083 0301 	eor.w	r3, r3, #1
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	b2d9      	uxtb	r1, r3
 8002fda:	4a8f      	ldr	r2, [pc, #572]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8002fdc:	7d53      	ldrb	r3, [r2, #21]
 8002fde:	f361 1345 	bfi	r3, r1, #5, #1
 8002fe2:	7553      	strb	r3, [r2, #21]
	Control.Output_ch.Bit.Out_ch9 = OUTPUT_CH_9_READ()^1;
 8002fe4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fe8:	488c      	ldr	r0, [pc, #560]	@ (800321c <FUN_GPO_PortCheck+0x340>)
 8002fea:	f009 ff51 	bl	800ce90 <HAL_GPIO_ReadPin>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f083 0301 	eor.w	r3, r3, #1
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	b2d9      	uxtb	r1, r3
 8002ffc:	4a86      	ldr	r2, [pc, #536]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8002ffe:	7d13      	ldrb	r3, [r2, #20]
 8003000:	f361 0382 	bfi	r3, r1, #2, #1
 8003004:	7513      	strb	r3, [r2, #20]
	Control.Output_ch.Bit.Out_ch10 = OUTPUT_CH_10_READ()^1;
 8003006:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800300a:	4885      	ldr	r0, [pc, #532]	@ (8003220 <FUN_GPO_PortCheck+0x344>)
 800300c:	f009 ff40 	bl	800ce90 <HAL_GPIO_ReadPin>
 8003010:	4603      	mov	r3, r0
 8003012:	f083 0301 	eor.w	r3, r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	b2d9      	uxtb	r1, r3
 800301e:	4a7e      	ldr	r2, [pc, #504]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8003020:	7d53      	ldrb	r3, [r2, #21]
 8003022:	f361 1386 	bfi	r3, r1, #6, #1
 8003026:	7553      	strb	r3, [r2, #21]
	Control.Output_ch.Bit.Out_ch11 = OUTPUT_CH_11_READ()^1;
 8003028:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800302c:	487c      	ldr	r0, [pc, #496]	@ (8003220 <FUN_GPO_PortCheck+0x344>)
 800302e:	f009 ff2f 	bl	800ce90 <HAL_GPIO_ReadPin>
 8003032:	4603      	mov	r3, r0
 8003034:	f083 0301 	eor.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	b2d9      	uxtb	r1, r3
 8003040:	4a75      	ldr	r2, [pc, #468]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8003042:	7d53      	ldrb	r3, [r2, #21]
 8003044:	f361 13c7 	bfi	r3, r1, #7, #1
 8003048:	7553      	strb	r3, [r2, #21]
	Control.Output_ch.Bit.Out_ch12 = OUTPUT_CH_12_READ()^1;
 800304a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800304e:	4875      	ldr	r0, [pc, #468]	@ (8003224 <FUN_GPO_PortCheck+0x348>)
 8003050:	f009 ff1e 	bl	800ce90 <HAL_GPIO_ReadPin>
 8003054:	4603      	mov	r3, r0
 8003056:	f083 0301 	eor.w	r3, r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	b2d9      	uxtb	r1, r3
 8003062:	4a6d      	ldr	r2, [pc, #436]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8003064:	7d93      	ldrb	r3, [r2, #22]
 8003066:	f361 0300 	bfi	r3, r1, #0, #1
 800306a:	7593      	strb	r3, [r2, #22]
	Control.Output_ch.Bit.Out_ch13 = OUTPUT_CH_13_READ()^1;
 800306c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003070:	486b      	ldr	r0, [pc, #428]	@ (8003220 <FUN_GPO_PortCheck+0x344>)
 8003072:	f009 ff0d 	bl	800ce90 <HAL_GPIO_ReadPin>
 8003076:	4603      	mov	r3, r0
 8003078:	f083 0301 	eor.w	r3, r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	b2d9      	uxtb	r1, r3
 8003084:	4a64      	ldr	r2, [pc, #400]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 8003086:	7d13      	ldrb	r3, [r2, #20]
 8003088:	f361 0341 	bfi	r3, r1, #1, #1
 800308c:	7513      	strb	r3, [r2, #20]
	Control.Output_ch.Bit.Out_ch14 = OUTPUT_CH_14_READ()^1;
 800308e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003092:	4865      	ldr	r0, [pc, #404]	@ (8003228 <FUN_GPO_PortCheck+0x34c>)
 8003094:	f009 fefc 	bl	800ce90 <HAL_GPIO_ReadPin>
 8003098:	4603      	mov	r3, r0
 800309a:	f083 0301 	eor.w	r3, r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	b2d9      	uxtb	r1, r3
 80030a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 80030a8:	7d13      	ldrb	r3, [r2, #20]
 80030aa:	f361 1304 	bfi	r3, r1, #4, #1
 80030ae:	7513      	strb	r3, [r2, #20]
	Control.Output_ch.Bit.Out_ch15 = OUTPUT_CH_15_READ()^1;
 80030b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80030b4:	485c      	ldr	r0, [pc, #368]	@ (8003228 <FUN_GPO_PortCheck+0x34c>)
 80030b6:	f009 feeb 	bl	800ce90 <HAL_GPIO_ReadPin>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f083 0301 	eor.w	r3, r3, #1
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	b2d9      	uxtb	r1, r3
 80030c8:	4a53      	ldr	r2, [pc, #332]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 80030ca:	7d13      	ldrb	r3, [r2, #20]
 80030cc:	f361 1386 	bfi	r3, r1, #6, #1
 80030d0:	7513      	strb	r3, [r2, #20]
	Control.Output_ch.Bit.Out_ch16 = OUTPUT_CH_16_READ()^1;
 80030d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030d6:	4854      	ldr	r0, [pc, #336]	@ (8003228 <FUN_GPO_PortCheck+0x34c>)
 80030d8:	f009 feda 	bl	800ce90 <HAL_GPIO_ReadPin>
 80030dc:	4603      	mov	r3, r0
 80030de:	f083 0301 	eor.w	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	b2d9      	uxtb	r1, r3
 80030ea:	4a4b      	ldr	r2, [pc, #300]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 80030ec:	7d13      	ldrb	r3, [r2, #20]
 80030ee:	f361 13c7 	bfi	r3, r1, #7, #1
 80030f2:	7513      	strb	r3, [r2, #20]
	Control.Output_ch.Bit.Out_ch17 = OUTPUT_CH_17_READ()^1;
 80030f4:	2101      	movs	r1, #1
 80030f6:	484d      	ldr	r0, [pc, #308]	@ (800322c <FUN_GPO_PortCheck+0x350>)
 80030f8:	f009 feca 	bl	800ce90 <HAL_GPIO_ReadPin>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	b2d9      	uxtb	r1, r3
 800310a:	4a43      	ldr	r2, [pc, #268]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 800310c:	7d53      	ldrb	r3, [r2, #21]
 800310e:	f361 0300 	bfi	r3, r1, #0, #1
 8003112:	7553      	strb	r3, [r2, #21]
	Control.Output_ch.Bit.Out_ch18 = OUTPUT_CH_18_READ()^1;
 8003114:	2102      	movs	r1, #2
 8003116:	4845      	ldr	r0, [pc, #276]	@ (800322c <FUN_GPO_PortCheck+0x350>)
 8003118:	f009 feba 	bl	800ce90 <HAL_GPIO_ReadPin>
 800311c:	4603      	mov	r3, r0
 800311e:	f083 0301 	eor.w	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	b2d9      	uxtb	r1, r3
 800312a:	4a3b      	ldr	r2, [pc, #236]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 800312c:	7d53      	ldrb	r3, [r2, #21]
 800312e:	f361 0341 	bfi	r3, r1, #1, #1
 8003132:	7553      	strb	r3, [r2, #21]
	Control.Output_ch.Bit.Out_ch19 = OUTPUT_CH_19_READ()^1;
 8003134:	2104      	movs	r1, #4
 8003136:	483d      	ldr	r0, [pc, #244]	@ (800322c <FUN_GPO_PortCheck+0x350>)
 8003138:	f009 feaa 	bl	800ce90 <HAL_GPIO_ReadPin>
 800313c:	4603      	mov	r3, r0
 800313e:	f083 0301 	eor.w	r3, r3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	b2d9      	uxtb	r1, r3
 800314a:	4a33      	ldr	r2, [pc, #204]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 800314c:	7e53      	ldrb	r3, [r2, #25]
 800314e:	f361 0300 	bfi	r3, r1, #0, #1
 8003152:	7653      	strb	r3, [r2, #25]
	Control.Output_ch.Bit.Out_ch20 = OUTPUT_CH_20_READ()^1;
 8003154:	2108      	movs	r1, #8
 8003156:	4835      	ldr	r0, [pc, #212]	@ (800322c <FUN_GPO_PortCheck+0x350>)
 8003158:	f009 fe9a 	bl	800ce90 <HAL_GPIO_ReadPin>
 800315c:	4603      	mov	r3, r0
 800315e:	f083 0301 	eor.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	b2d9      	uxtb	r1, r3
 800316a:	4a2b      	ldr	r2, [pc, #172]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 800316c:	7e13      	ldrb	r3, [r2, #24]
 800316e:	f361 1304 	bfi	r3, r1, #4, #1
 8003172:	7613      	strb	r3, [r2, #24]
	Control.Output_ch.Bit.Out_ch21 = OUTPUT_CH_21_READ()^1;
 8003174:	2101      	movs	r1, #1
 8003176:	482e      	ldr	r0, [pc, #184]	@ (8003230 <FUN_GPO_PortCheck+0x354>)
 8003178:	f009 fe8a 	bl	800ce90 <HAL_GPIO_ReadPin>
 800317c:	4603      	mov	r3, r0
 800317e:	f083 0301 	eor.w	r3, r3, #1
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	b2d9      	uxtb	r1, r3
 800318a:	4a23      	ldr	r2, [pc, #140]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 800318c:	7e13      	ldrb	r3, [r2, #24]
 800318e:	f361 0300 	bfi	r3, r1, #0, #1
 8003192:	7613      	strb	r3, [r2, #24]
	Control.Output_ch.Bit.Out_ch22 = OUTPUT_CH_22_READ()^1;
 8003194:	2102      	movs	r1, #2
 8003196:	4826      	ldr	r0, [pc, #152]	@ (8003230 <FUN_GPO_PortCheck+0x354>)
 8003198:	f009 fe7a 	bl	800ce90 <HAL_GPIO_ReadPin>
 800319c:	4603      	mov	r3, r0
 800319e:	f083 0301 	eor.w	r3, r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	b2d9      	uxtb	r1, r3
 80031aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 80031ac:	7e13      	ldrb	r3, [r2, #24]
 80031ae:	f361 0341 	bfi	r3, r1, #1, #1
 80031b2:	7613      	strb	r3, [r2, #24]
	Control.Output_ch.Bit.Out_ch23 = OUTPUT_CH_23_READ()^1;
 80031b4:	2104      	movs	r1, #4
 80031b6:	481e      	ldr	r0, [pc, #120]	@ (8003230 <FUN_GPO_PortCheck+0x354>)
 80031b8:	f009 fe6a 	bl	800ce90 <HAL_GPIO_ReadPin>
 80031bc:	4603      	mov	r3, r0
 80031be:	f083 0301 	eor.w	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	b2d9      	uxtb	r1, r3
 80031ca:	4a13      	ldr	r2, [pc, #76]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 80031cc:	7e13      	ldrb	r3, [r2, #24]
 80031ce:	f361 0382 	bfi	r3, r1, #2, #1
 80031d2:	7613      	strb	r3, [r2, #24]
	Control.Output_ch.Bit.Out_ch24 = OUTPUT_CH_24_READ()^1;
 80031d4:	2108      	movs	r1, #8
 80031d6:	4816      	ldr	r0, [pc, #88]	@ (8003230 <FUN_GPO_PortCheck+0x354>)
 80031d8:	f009 fe5a 	bl	800ce90 <HAL_GPIO_ReadPin>
 80031dc:	4603      	mov	r3, r0
 80031de:	f083 0301 	eor.w	r3, r3, #1
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	b2d9      	uxtb	r1, r3
 80031ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 80031ec:	7e13      	ldrb	r3, [r2, #24]
 80031ee:	f361 03c3 	bfi	r3, r1, #3, #1
 80031f2:	7613      	strb	r3, [r2, #24]
	Control.Output_ch.Bit.Out_ch25 = OUTPUT_CH_25_READ()^1;
 80031f4:	2110      	movs	r1, #16
 80031f6:	480e      	ldr	r0, [pc, #56]	@ (8003230 <FUN_GPO_PortCheck+0x354>)
 80031f8:	f009 fe4a 	bl	800ce90 <HAL_GPIO_ReadPin>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f083 0301 	eor.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	b2d9      	uxtb	r1, r3
 800320a:	4a03      	ldr	r2, [pc, #12]	@ (8003218 <FUN_GPO_PortCheck+0x33c>)
 800320c:	7e53      	ldrb	r3, [r2, #25]
 800320e:	f361 03c3 	bfi	r3, r1, #3, #1
 8003212:	e00f      	b.n	8003234 <FUN_GPO_PortCheck+0x358>
 8003214:	40021800 	.word	0x40021800
 8003218:	20000154 	.word	0x20000154
 800321c:	40020800 	.word	0x40020800
 8003220:	40020000 	.word	0x40020000
 8003224:	40021400 	.word	0x40021400
 8003228:	40021c00 	.word	0x40021c00
 800322c:	40022000 	.word	0x40022000
 8003230:	40020c00 	.word	0x40020c00
 8003234:	7653      	strb	r3, [r2, #25]
	Control.Output_ch.Bit.Out_ch26 = OUTPUT_CH_26_READ()^1;
 8003236:	2120      	movs	r1, #32
 8003238:	4894      	ldr	r0, [pc, #592]	@ (800348c <FUN_GPO_PortCheck+0x5b0>)
 800323a:	f009 fe29 	bl	800ce90 <HAL_GPIO_ReadPin>
 800323e:	4603      	mov	r3, r0
 8003240:	f083 0301 	eor.w	r3, r3, #1
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	b2d9      	uxtb	r1, r3
 800324c:	4a90      	ldr	r2, [pc, #576]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 800324e:	7e13      	ldrb	r3, [r2, #24]
 8003250:	f361 1345 	bfi	r3, r1, #5, #1
 8003254:	7613      	strb	r3, [r2, #24]
	Control.Output_ch.Bit.Out_ch27 = OUTPUT_CH_27_READ()^1;
 8003256:	2140      	movs	r1, #64	@ 0x40
 8003258:	488c      	ldr	r0, [pc, #560]	@ (800348c <FUN_GPO_PortCheck+0x5b0>)
 800325a:	f009 fe19 	bl	800ce90 <HAL_GPIO_ReadPin>
 800325e:	4603      	mov	r3, r0
 8003260:	f083 0301 	eor.w	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	b2d9      	uxtb	r1, r3
 800326c:	4a88      	ldr	r2, [pc, #544]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 800326e:	7e13      	ldrb	r3, [r2, #24]
 8003270:	f361 13c7 	bfi	r3, r1, #7, #1
 8003274:	7613      	strb	r3, [r2, #24]
	Control.Output_ch.Bit.Out_ch28 = OUTPUT_CH_28_READ()^1;
 8003276:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800327a:	4886      	ldr	r0, [pc, #536]	@ (8003494 <FUN_GPO_PortCheck+0x5b8>)
 800327c:	f009 fe08 	bl	800ce90 <HAL_GPIO_ReadPin>
 8003280:	4603      	mov	r3, r0
 8003282:	f083 0301 	eor.w	r3, r3, #1
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	b2d9      	uxtb	r1, r3
 800328e:	4a80      	ldr	r2, [pc, #512]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 8003290:	7e13      	ldrb	r3, [r2, #24]
 8003292:	f361 1386 	bfi	r3, r1, #6, #1
 8003296:	7613      	strb	r3, [r2, #24]
	Control.Output_ch.Bit.Out_ch29 = OUTPUT_CH_29_READ()^1;
 8003298:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800329c:	487d      	ldr	r0, [pc, #500]	@ (8003494 <FUN_GPO_PortCheck+0x5b8>)
 800329e:	f009 fdf7 	bl	800ce90 <HAL_GPIO_ReadPin>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f083 0301 	eor.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	b2d9      	uxtb	r1, r3
 80032b0:	4a77      	ldr	r2, [pc, #476]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 80032b2:	7e53      	ldrb	r3, [r2, #25]
 80032b4:	f361 1304 	bfi	r3, r1, #4, #1
 80032b8:	7653      	strb	r3, [r2, #25]
	Control.Output_ch.Bit.Out_ch30 = OUTPUT_CH_30_READ()^1;
 80032ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80032be:	4875      	ldr	r0, [pc, #468]	@ (8003494 <FUN_GPO_PortCheck+0x5b8>)
 80032c0:	f009 fde6 	bl	800ce90 <HAL_GPIO_ReadPin>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f083 0301 	eor.w	r3, r3, #1
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	b2d9      	uxtb	r1, r3
 80032d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 80032d4:	7e53      	ldrb	r3, [r2, #25]
 80032d6:	f361 1345 	bfi	r3, r1, #5, #1
 80032da:	7653      	strb	r3, [r2, #25]
	Control.Output_ch.Bit.Out_ch31 = OUTPUT_CH_31_READ()^1;
 80032dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032e0:	486c      	ldr	r0, [pc, #432]	@ (8003494 <FUN_GPO_PortCheck+0x5b8>)
 80032e2:	f009 fdd5 	bl	800ce90 <HAL_GPIO_ReadPin>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f083 0301 	eor.w	r3, r3, #1
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	b2d9      	uxtb	r1, r3
 80032f4:	4a66      	ldr	r2, [pc, #408]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 80032f6:	7e53      	ldrb	r3, [r2, #25]
 80032f8:	f361 1386 	bfi	r3, r1, #6, #1
 80032fc:	7653      	strb	r3, [r2, #25]
	Control.Output_ch.Bit.Out_ch32 = OUTPUT_CH_32_READ()^1;
 80032fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003302:	4865      	ldr	r0, [pc, #404]	@ (8003498 <FUN_GPO_PortCheck+0x5bc>)
 8003304:	f009 fdc4 	bl	800ce90 <HAL_GPIO_ReadPin>
 8003308:	4603      	mov	r3, r0
 800330a:	f083 0301 	eor.w	r3, r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	b2d9      	uxtb	r1, r3
 8003316:	4a5e      	ldr	r2, [pc, #376]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 8003318:	7e53      	ldrb	r3, [r2, #25]
 800331a:	f361 13c7 	bfi	r3, r1, #7, #1
 800331e:	7653      	strb	r3, [r2, #25]
	Control.Output_ch.Bit.Out_ch33 = OUTPUT_CH_33_READ()^1;
 8003320:	2108      	movs	r1, #8
 8003322:	485e      	ldr	r0, [pc, #376]	@ (800349c <FUN_GPO_PortCheck+0x5c0>)
 8003324:	f009 fdb4 	bl	800ce90 <HAL_GPIO_ReadPin>
 8003328:	4603      	mov	r3, r0
 800332a:	f083 0301 	eor.w	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	b2d9      	uxtb	r1, r3
 8003336:	4a56      	ldr	r2, [pc, #344]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 8003338:	7e93      	ldrb	r3, [r2, #26]
 800333a:	f361 0300 	bfi	r3, r1, #0, #1
 800333e:	7693      	strb	r3, [r2, #26]
	Control.Output_ch.Bit.Out_ch34 = OUTPUT_CH_34_READ()^1;
 8003340:	2110      	movs	r1, #16
 8003342:	4856      	ldr	r0, [pc, #344]	@ (800349c <FUN_GPO_PortCheck+0x5c0>)
 8003344:	f009 fda4 	bl	800ce90 <HAL_GPIO_ReadPin>
 8003348:	4603      	mov	r3, r0
 800334a:	f083 0301 	eor.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	b2d9      	uxtb	r1, r3
 8003356:	4a4e      	ldr	r2, [pc, #312]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 8003358:	7e93      	ldrb	r3, [r2, #26]
 800335a:	f361 0341 	bfi	r3, r1, #1, #1
 800335e:	7693      	strb	r3, [r2, #26]
	Control.Output_ch.Bit.Out_ch35 = OUTPUT_CH_35_READ()^1;
 8003360:	2120      	movs	r1, #32
 8003362:	484e      	ldr	r0, [pc, #312]	@ (800349c <FUN_GPO_PortCheck+0x5c0>)
 8003364:	f009 fd94 	bl	800ce90 <HAL_GPIO_ReadPin>
 8003368:	4603      	mov	r3, r0
 800336a:	f083 0301 	eor.w	r3, r3, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	b2d9      	uxtb	r1, r3
 8003376:	4a46      	ldr	r2, [pc, #280]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 8003378:	7e53      	ldrb	r3, [r2, #25]
 800337a:	f361 0341 	bfi	r3, r1, #1, #1
 800337e:	7653      	strb	r3, [r2, #25]
	Control.Output_ch.Bit.Out_ch36 = OUTPUT_CH_36_READ()^1;
 8003380:	2140      	movs	r1, #64	@ 0x40
 8003382:	4846      	ldr	r0, [pc, #280]	@ (800349c <FUN_GPO_PortCheck+0x5c0>)
 8003384:	f009 fd84 	bl	800ce90 <HAL_GPIO_ReadPin>
 8003388:	4603      	mov	r3, r0
 800338a:	f083 0301 	eor.w	r3, r3, #1
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	b2d9      	uxtb	r1, r3
 8003396:	4a3e      	ldr	r2, [pc, #248]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 8003398:	7e53      	ldrb	r3, [r2, #25]
 800339a:	f361 0382 	bfi	r3, r1, #2, #1
 800339e:	7653      	strb	r3, [r2, #25]
	Control.Output_ch.Bit.Out_ch37 = OUTPUT_CH_37_READ()^1;
 80033a0:	2180      	movs	r1, #128	@ 0x80
 80033a2:	483e      	ldr	r0, [pc, #248]	@ (800349c <FUN_GPO_PortCheck+0x5c0>)
 80033a4:	f009 fd74 	bl	800ce90 <HAL_GPIO_ReadPin>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f083 0301 	eor.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	b2d9      	uxtb	r1, r3
 80033b6:	4a36      	ldr	r2, [pc, #216]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 80033b8:	7f13      	ldrb	r3, [r2, #28]
 80033ba:	f361 0300 	bfi	r3, r1, #0, #1
 80033be:	7713      	strb	r3, [r2, #28]
	Control.Output_ch.Bit.Out_ch38 = OUTPUT_CH_38_READ()^1;
 80033c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033c4:	4836      	ldr	r0, [pc, #216]	@ (80034a0 <FUN_GPO_PortCheck+0x5c4>)
 80033c6:	f009 fd63 	bl	800ce90 <HAL_GPIO_ReadPin>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f083 0301 	eor.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	b2d9      	uxtb	r1, r3
 80033d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 80033da:	7f13      	ldrb	r3, [r2, #28]
 80033dc:	f361 0341 	bfi	r3, r1, #1, #1
 80033e0:	7713      	strb	r3, [r2, #28]
	Control.Output_ch.Bit.Out_ch39 = OUTPUT_CH_39_READ()^1;
 80033e2:	2120      	movs	r1, #32
 80033e4:	482f      	ldr	r0, [pc, #188]	@ (80034a4 <FUN_GPO_PortCheck+0x5c8>)
 80033e6:	f009 fd53 	bl	800ce90 <HAL_GPIO_ReadPin>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f083 0301 	eor.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	b2d9      	uxtb	r1, r3
 80033f8:	4a25      	ldr	r2, [pc, #148]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 80033fa:	7f13      	ldrb	r3, [r2, #28]
 80033fc:	f361 0382 	bfi	r3, r1, #2, #1
 8003400:	7713      	strb	r3, [r2, #28]
	Control.Output_ch.Bit.Out_ch40 = OUTPUT_CH_40_READ()^1;
 8003402:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003406:	4827      	ldr	r0, [pc, #156]	@ (80034a4 <FUN_GPO_PortCheck+0x5c8>)
 8003408:	f009 fd42 	bl	800ce90 <HAL_GPIO_ReadPin>
 800340c:	4603      	mov	r3, r0
 800340e:	f083 0301 	eor.w	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	b2d9      	uxtb	r1, r3
 800341a:	4a1d      	ldr	r2, [pc, #116]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 800341c:	7f13      	ldrb	r3, [r2, #28]
 800341e:	f361 03c3 	bfi	r3, r1, #3, #1
 8003422:	7713      	strb	r3, [r2, #28]
	Control.Output_ch.Bit.Out_ch41 = OUTPUT_CH_41_READ()^1;
 8003424:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003428:	481e      	ldr	r0, [pc, #120]	@ (80034a4 <FUN_GPO_PortCheck+0x5c8>)
 800342a:	f009 fd31 	bl	800ce90 <HAL_GPIO_ReadPin>
 800342e:	4603      	mov	r3, r0
 8003430:	f083 0301 	eor.w	r3, r3, #1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	b2d9      	uxtb	r1, r3
 800343c:	4a14      	ldr	r2, [pc, #80]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 800343e:	7f13      	ldrb	r3, [r2, #28]
 8003440:	f361 1304 	bfi	r3, r1, #4, #1
 8003444:	7713      	strb	r3, [r2, #28]
	Control.Output_ch.Bit.Out_ch42 = OUTPUT_CH_42_READ()^1;
 8003446:	2101      	movs	r1, #1
 8003448:	4817      	ldr	r0, [pc, #92]	@ (80034a8 <FUN_GPO_PortCheck+0x5cc>)
 800344a:	f009 fd21 	bl	800ce90 <HAL_GPIO_ReadPin>
 800344e:	4603      	mov	r3, r0
 8003450:	f083 0301 	eor.w	r3, r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	b2d9      	uxtb	r1, r3
 800345c:	4a0c      	ldr	r2, [pc, #48]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 800345e:	7f13      	ldrb	r3, [r2, #28]
 8003460:	f361 1345 	bfi	r3, r1, #5, #1
 8003464:	7713      	strb	r3, [r2, #28]
	Control.Output_ch.Bit.Out_ch43 = OUTPUT_CH_43_READ()^1;
 8003466:	2102      	movs	r1, #2
 8003468:	480f      	ldr	r0, [pc, #60]	@ (80034a8 <FUN_GPO_PortCheck+0x5cc>)
 800346a:	f009 fd11 	bl	800ce90 <HAL_GPIO_ReadPin>
 800346e:	4603      	mov	r3, r0
 8003470:	f083 0301 	eor.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	b2d9      	uxtb	r1, r3
 800347c:	4a04      	ldr	r2, [pc, #16]	@ (8003490 <FUN_GPO_PortCheck+0x5b4>)
 800347e:	7f13      	ldrb	r3, [r2, #28]
 8003480:	f361 1386 	bfi	r3, r1, #6, #1
 8003484:	7713      	strb	r3, [r2, #28]
//	Control.Output_ch.Bit.Out_ch44 = OUTPUT_CH_44_READ()^1;
//	Control.Output_ch.Bit.Out_ch45 = OUTPUT_CH_45_READ()^1;
//	Control.Output_ch.Bit.Out_ch46 = OUTPUT_CH_46_READ()^1;
//	Control.Output_ch.Bit.Out_ch47 = OUTPUT_CH_47_READ()^1;
//	Control.Output_ch.Bit.Out_ch48 = OUTPUT_CH_48_READ()^1;
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40020c00 	.word	0x40020c00
 8003490:	20000154 	.word	0x20000154
 8003494:	40022400 	.word	0x40022400
 8003498:	40021400 	.word	0x40021400
 800349c:	40022800 	.word	0x40022800
 80034a0:	40021800 	.word	0x40021800
 80034a4:	40020400 	.word	0x40020400
 80034a8:	40021000 	.word	0x40021000

080034ac <FUN_GPO_Routine>:
/****************************************************************************/
/*	Overview	:	GPO Main Routine														*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_GPO_Routine(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	// HILS 출력
	if(HILS_START == FUN_RS485_Ctrl_hils_action_U1())
 80034b0:	f006 f9c8 	bl	8009844 <FUN_RS485_Ctrl_hils_action_U1>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	f040 80bf 	bne.w	800363a <FUN_GPO_Routine+0x18e>
	{
		FUN_GPO_Output(OUTPUT_PORT_NUM_7,	HILS.HILS_Output.HILS_DO_Int[0]^1);						// 동력공급장치 : 압력스위치(부스터)
 80034bc:	4bbf      	ldr	r3, [pc, #764]	@ (80037bc <FUN_GPO_Routine+0x310>)
 80034be:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80034c2:	f083 0301 	eor.w	r3, r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	4619      	mov	r1, r3
 80034ca:	2007      	movs	r0, #7
 80034cc:	f000 f97a 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_13,	HILS.HILS_Output.HILS_DO_Int[1]^1);						// 동력공급장치 : 압력스위치(투인양동력)
 80034d0:	4bba      	ldr	r3, [pc, #744]	@ (80037bc <FUN_GPO_Routine+0x310>)
 80034d2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80034d6:	f083 0301 	eor.w	r3, r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	200d      	movs	r0, #13
 80034e0:	f000 f970 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_9,	HILS.HILS_Output.HILS_DO_Int[2]^1);						// 동력공급장치 : 압력스위치(압력초과)
 80034e4:	4bb5      	ldr	r3, [pc, #724]	@ (80037bc <FUN_GPO_Routine+0x310>)
 80034e6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80034ea:	f083 0301 	eor.w	r3, r3, #1
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	4619      	mov	r1, r3
 80034f2:	2009      	movs	r0, #9
 80034f4:	f000 f966 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_5,	HILS.HILS_Output.HILS_DO_Int[3]^1);						// 동력공급장치 : 압력스위치(감김)
 80034f8:	4bb0      	ldr	r3, [pc, #704]	@ (80037bc <FUN_GPO_Routine+0x310>)
 80034fa:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80034fe:	f083 0301 	eor.w	r3, r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	2005      	movs	r0, #5
 8003508:	f000 f95c 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_14,	HILS.HILS_Output.HILS_DO_Int[4]^1);						// 동력공급장치 : 압력스위치(풀림)
 800350c:	4bab      	ldr	r3, [pc, #684]	@ (80037bc <FUN_GPO_Routine+0x310>)
 800350e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8003512:	f083 0301 	eor.w	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	4619      	mov	r1, r3
 800351a:	200e      	movs	r0, #14
 800351c:	f000 f952 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_6,	HILS.HILS_Output.HILS_DO_Int[5]^1);						// 동력공급장치 : 압력스위치(권선)
 8003520:	4ba6      	ldr	r3, [pc, #664]	@ (80037bc <FUN_GPO_Routine+0x310>)
 8003522:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003526:	f083 0301 	eor.w	r3, r3, #1
 800352a:	b2db      	uxtb	r3, r3
 800352c:	4619      	mov	r1, r3
 800352e:	2006      	movs	r0, #6
 8003530:	f000 f948 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_15,	HILS.HILS_Output.HILS_DO_Int[6]^1);						// 동력공급장치 : 필터막힘스위치(리턴)
 8003534:	4ba1      	ldr	r3, [pc, #644]	@ (80037bc <FUN_GPO_Routine+0x310>)
 8003536:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800353a:	f083 0301 	eor.w	r3, r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	4619      	mov	r1, r3
 8003542:	200f      	movs	r0, #15
 8003544:	f000 f93e 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_16,	HILS.HILS_Output.HILS_DO_Int[7]^1);						// 동력공급장치 : 필터막힘스위치(부스터펌프)
 8003548:	4b9c      	ldr	r3, [pc, #624]	@ (80037bc <FUN_GPO_Routine+0x310>)
 800354a:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 800354e:	f083 0301 	eor.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	4619      	mov	r1, r3
 8003556:	2010      	movs	r0, #16
 8003558:	f000 f934 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_17,	HILS.HILS_Output.HILS_DO_Int[8]^1);						// 동력공급장치 : 필터막힘스위치(윈치구동) =????
 800355c:	4b97      	ldr	r3, [pc, #604]	@ (80037bc <FUN_GPO_Routine+0x310>)
 800355e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003562:	f083 0301 	eor.w	r3, r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	2011      	movs	r0, #17
 800356c:	f000 f92a 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_18,	HILS.HILS_Output.HILS_DO_Int[9]^1);						// 동력공급장치 : 필터막힘스위치(투인양)
 8003570:	4b92      	ldr	r3, [pc, #584]	@ (80037bc <FUN_GPO_Routine+0x310>)
 8003572:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003576:	f083 0301 	eor.w	r3, r3, #1
 800357a:	b2db      	uxtb	r3, r3
 800357c:	4619      	mov	r1, r3
 800357e:	2012      	movs	r0, #18
 8003580:	f000 f920 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_21,	HILS.HILS_Output.HILS_DO_Int[10]^1);					// 윈치조립체 : 근접센서(우측A)
 8003584:	4b8d      	ldr	r3, [pc, #564]	@ (80037bc <FUN_GPO_Routine+0x310>)
 8003586:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800358a:	f083 0301 	eor.w	r3, r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	4619      	mov	r1, r3
 8003592:	2015      	movs	r0, #21
 8003594:	f000 f916 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_22,	HILS.HILS_Output.HILS_DO_Int[11]^1);					// 윈치조립체 : 근접센서(우측B)
 8003598:	4b88      	ldr	r3, [pc, #544]	@ (80037bc <FUN_GPO_Routine+0x310>)
 800359a:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	4619      	mov	r1, r3
 80035a6:	2016      	movs	r0, #22
 80035a8:	f000 f90c 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_23,	HILS.HILS_Output.HILS_DO_Int[12]^1);					// 윈치조립체 : 근접센서(좌측A)
 80035ac:	4b83      	ldr	r3, [pc, #524]	@ (80037bc <FUN_GPO_Routine+0x310>)
 80035ae:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80035b2:	f083 0301 	eor.w	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	4619      	mov	r1, r3
 80035ba:	2017      	movs	r0, #23
 80035bc:	f000 f902 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_24,	HILS.HILS_Output.HILS_DO_Int[13]^1);					// 윈치조립체 : 근접센서(좌측B)
 80035c0:	4b7e      	ldr	r3, [pc, #504]	@ (80037bc <FUN_GPO_Routine+0x310>)
 80035c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80035c6:	f083 0301 	eor.w	r3, r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	4619      	mov	r1, r3
 80035ce:	2018      	movs	r0, #24
 80035d0:	f000 f8f8 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_20,	HILS.HILS_Output.HILS_DO_Int[14]^1);					// 윈치조립체 : 5회전 감지스위치
 80035d4:	4b79      	ldr	r3, [pc, #484]	@ (80037bc <FUN_GPO_Routine+0x310>)
 80035d6:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	4619      	mov	r1, r3
 80035e2:	2014      	movs	r0, #20
 80035e4:	f000 f8ee 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_26,	HILS.HILS_Output.HILS_DO_Int[15]^1);					// 윈치조립체 : 압력스위치(권선브레이크)
 80035e8:	4b74      	ldr	r3, [pc, #464]	@ (80037bc <FUN_GPO_Routine+0x310>)
 80035ea:	f893 30a7 	ldrb.w	r3, [r3, #167]	@ 0xa7
 80035ee:	f083 0301 	eor.w	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	201a      	movs	r0, #26
 80035f8:	f000 f8e4 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_28,	HILS.HILS_Output.HILS_DO_Int[16]^1);					// 윈치조립체 : 압력스위치(밴드브레이크)
 80035fc:	4b6f      	ldr	r3, [pc, #444]	@ (80037bc <FUN_GPO_Routine+0x310>)
 80035fe:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8003602:	f083 0301 	eor.w	r3, r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4619      	mov	r1, r3
 800360a:	201c      	movs	r0, #28
 800360c:	f000 f8da 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_27,	HILS.HILS_Output.HILS_DO_Int[17]^1);					// 윈치조립체 : 압력스위치(모터브레이크)
 8003610:	4b6a      	ldr	r3, [pc, #424]	@ (80037bc <FUN_GPO_Routine+0x310>)
 8003612:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8003616:	f083 0301 	eor.w	r3, r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	4619      	mov	r1, r3
 800361e:	201b      	movs	r0, #27
 8003620:	f000 f8d0 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_19,	HILS.HILS_Output.HILS_DO_Int[18]^1);					// 동력공급장치 윈치동력 : 비례제어밸브 에러신호 =????
 8003624:	4b65      	ldr	r3, [pc, #404]	@ (80037bc <FUN_GPO_Routine+0x310>)
 8003626:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 800362a:	f083 0301 	eor.w	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	4619      	mov	r1, r3
 8003632:	2013      	movs	r0, #19
 8003634:	f000 f8c6 	bl	80037c4 <FUN_GPO_Output>
//		FUN_GPO_Output(OUTPUT_PORT_NUM_26,	RS485.HILS_UC_Output_Int[15]^1);			// 윈치조립체 : 압력스위치(권선브레이크)
//		FUN_GPO_Output(OUTPUT_PORT_NUM_28,	RS485.HILS_UC_Output_Int[16]^1);			// 윈치조립체 : 압력스위치(주브레이크)
//		FUN_GPO_Output(OUTPUT_PORT_NUM_27,	RS485.HILS_UC_Output_Int[17]^1);			// 윈치조립체 : 압력스위치(보조브레이크)
//		FUN_GPO_Output(OUTPUT_PORT_NUM_19,	RS485.HILS_UC_Output_Int[18]^1);			// 동력공급장치 윈치동력 : 비례제어밸브 에러신호 =????
	}
}
 8003638:	e0bd      	b.n	80037b6 <FUN_GPO_Routine+0x30a>
		FUN_GPO_Output(OUTPUT_PORT_NUM_7,	RS485.HILS_UC_Output_Int[0]^1);				// [0]: 압력스위치(부스터)
 800363a:	4b61      	ldr	r3, [pc, #388]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 800363c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8003640:	f083 0301 	eor.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	4619      	mov	r1, r3
 8003648:	2007      	movs	r0, #7
 800364a:	f000 f8bb 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_13,	RS485.HILS_UC_Output_Int[1]^1);				// [1]: 압력스위치(투인양동력)
 800364e:	4b5c      	ldr	r3, [pc, #368]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 8003650:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8003654:	f083 0301 	eor.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	4619      	mov	r1, r3
 800365c:	200d      	movs	r0, #13
 800365e:	f000 f8b1 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_9,	RS485.HILS_UC_Output_Int[2]^1);				// [2]: 압력스위치(압력초과)
 8003662:	4b57      	ldr	r3, [pc, #348]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 8003664:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8003668:	f083 0301 	eor.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	4619      	mov	r1, r3
 8003670:	2009      	movs	r0, #9
 8003672:	f000 f8a7 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_5,	RS485.HILS_UC_Output_Int[3]^1);				// [3]: 압력스위치(감김)
 8003676:	4b52      	ldr	r3, [pc, #328]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 8003678:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 800367c:	f083 0301 	eor.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	4619      	mov	r1, r3
 8003684:	2005      	movs	r0, #5
 8003686:	f000 f89d 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_14,	RS485.HILS_UC_Output_Int[4]^1);				// [4]: 압력스위치(풀림)
 800368a:	4b4d      	ldr	r3, [pc, #308]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 800368c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003690:	f083 0301 	eor.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	4619      	mov	r1, r3
 8003698:	200e      	movs	r0, #14
 800369a:	f000 f893 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_6,	RS485.HILS_UC_Output_Int[5]^1);				// [5]: 압력스위치(권선)
 800369e:	4b48      	ldr	r3, [pc, #288]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 80036a0:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80036a4:	f083 0301 	eor.w	r3, r3, #1
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4619      	mov	r1, r3
 80036ac:	2006      	movs	r0, #6
 80036ae:	f000 f889 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_15,	RS485.HILS_UC_Output_Int[6]^1);				// [6]: 필터막힘스위치(리턴)
 80036b2:	4b43      	ldr	r3, [pc, #268]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 80036b4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80036b8:	f083 0301 	eor.w	r3, r3, #1
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	4619      	mov	r1, r3
 80036c0:	200f      	movs	r0, #15
 80036c2:	f000 f87f 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_16,	RS485.HILS_UC_Output_Int[7]^1);				// [7]: 필터막힘스위치(부스터펌프)
 80036c6:	4b3e      	ldr	r3, [pc, #248]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 80036c8:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80036cc:	f083 0301 	eor.w	r3, r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	4619      	mov	r1, r3
 80036d4:	2010      	movs	r0, #16
 80036d6:	f000 f875 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_17,	RS485.HILS_UC_Output_Int[8]^1);				// [8]: 필터막힘스위치(윈치구동)
 80036da:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 80036dc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80036e0:	f083 0301 	eor.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	4619      	mov	r1, r3
 80036e8:	2011      	movs	r0, #17
 80036ea:	f000 f86b 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_18,	RS485.HILS_UC_Output_Int[9]^1);				// [9]: 필터막힘스위치(투인양)
 80036ee:	4b34      	ldr	r3, [pc, #208]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 80036f0:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80036f4:	f083 0301 	eor.w	r3, r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	4619      	mov	r1, r3
 80036fc:	2012      	movs	r0, #18
 80036fe:	f000 f861 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_21,	RS485.HILS_UC_Output_Int[10]^1);			// [10]: 권선 근접센서(우측A)
 8003702:	4b2f      	ldr	r3, [pc, #188]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 8003704:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8003708:	f083 0301 	eor.w	r3, r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	4619      	mov	r1, r3
 8003710:	2015      	movs	r0, #21
 8003712:	f000 f857 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_22,	RS485.HILS_UC_Output_Int[11]^1);			// [11]: 권선 근접센서(우측B)
 8003716:	4b2a      	ldr	r3, [pc, #168]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 8003718:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800371c:	f083 0301 	eor.w	r3, r3, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	4619      	mov	r1, r3
 8003724:	2016      	movs	r0, #22
 8003726:	f000 f84d 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_23,	RS485.HILS_UC_Output_Int[12]^1);			// [12]: 권선 근접센서(좌측A)
 800372a:	4b25      	ldr	r3, [pc, #148]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 800372c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8003730:	f083 0301 	eor.w	r3, r3, #1
 8003734:	b2db      	uxtb	r3, r3
 8003736:	4619      	mov	r1, r3
 8003738:	2017      	movs	r0, #23
 800373a:	f000 f843 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_24,	RS485.HILS_UC_Output_Int[13]^1);			// [13]: 권선 근접센서(좌측B)
 800373e:	4b20      	ldr	r3, [pc, #128]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 8003740:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	4619      	mov	r1, r3
 800374c:	2018      	movs	r0, #24
 800374e:	f000 f839 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_20,	RS485.HILS_UC_Output_Int[14]^1);			// [14]: 5회전 감지스위치
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 8003754:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8003758:	f083 0301 	eor.w	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	4619      	mov	r1, r3
 8003760:	2014      	movs	r0, #20
 8003762:	f000 f82f 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_26,	RS485.HILS_UC_Output_Int[15]^1);			// [15]: 압력스위치(권서브레이크)
 8003766:	4b16      	ldr	r3, [pc, #88]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 8003768:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 800376c:	f083 0301 	eor.w	r3, r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	4619      	mov	r1, r3
 8003774:	201a      	movs	r0, #26
 8003776:	f000 f825 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_28,	RS485.HILS_UC_Output_Int[16]^1);			// [16]: 압력스위치(주브레이크)
 800377a:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 800377c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003780:	f083 0301 	eor.w	r3, r3, #1
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4619      	mov	r1, r3
 8003788:	201c      	movs	r0, #28
 800378a:	f000 f81b 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_27,	RS485.HILS_UC_Output_Int[17]^1);			// [17]: 압력스위치(보조브레이크)
 800378e:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 8003790:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003794:	f083 0301 	eor.w	r3, r3, #1
 8003798:	b2db      	uxtb	r3, r3
 800379a:	4619      	mov	r1, r3
 800379c:	201b      	movs	r0, #27
 800379e:	f000 f811 	bl	80037c4 <FUN_GPO_Output>
		FUN_GPO_Output(OUTPUT_PORT_NUM_19,	RS485.HILS_UC_Output_Int[18]^1);			// [18]: 비례밸브 에러(드럼구동)
 80037a2:	4b07      	ldr	r3, [pc, #28]	@ (80037c0 <FUN_GPO_Routine+0x314>)
 80037a4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80037a8:	f083 0301 	eor.w	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	2013      	movs	r0, #19
 80037b2:	f000 f807 	bl	80037c4 <FUN_GPO_Output>
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	200006ac 	.word	0x200006ac
 80037c0:	20000d90 	.word	0x20000d90

080037c4 <FUN_GPO_Output>:
/****************************************************************************/
/*	Overview	:	Return Input Port State									*/
/*	Return value:	uint8_t													*/
/****************************************************************************/
void FUN_GPO_Output(uint8_t u1t_outport, uint8_t u1t_val)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	460a      	mov	r2, r1
 80037ce:	71fb      	strb	r3, [r7, #7]
 80037d0:	4613      	mov	r3, r2
 80037d2:	71bb      	strb	r3, [r7, #6]
	switch(u1t_outport)
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80037da:	f200 8376 	bhi.w	8003eca <FUN_GPO_Output+0x706>
 80037de:	a201      	add	r2, pc, #4	@ (adr r2, 80037e4 <FUN_GPO_Output+0x20>)
 80037e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e4:	080038a5 	.word	0x080038a5
 80037e8:	080038c3 	.word	0x080038c3
 80037ec:	080038e1 	.word	0x080038e1
 80037f0:	080038ff 	.word	0x080038ff
 80037f4:	0800391d 	.word	0x0800391d
 80037f8:	0800393f 	.word	0x0800393f
 80037fc:	0800395d 	.word	0x0800395d
 8003800:	0800397b 	.word	0x0800397b
 8003804:	0800399d 	.word	0x0800399d
 8003808:	080039bf 	.word	0x080039bf
 800380c:	080039e1 	.word	0x080039e1
 8003810:	08003a03 	.word	0x08003a03
 8003814:	08003a25 	.word	0x08003a25
 8003818:	08003a47 	.word	0x08003a47
 800381c:	08003a69 	.word	0x08003a69
 8003820:	08003a8b 	.word	0x08003a8b
 8003824:	08003aad 	.word	0x08003aad
 8003828:	08003acb 	.word	0x08003acb
 800382c:	08003ae9 	.word	0x08003ae9
 8003830:	08003b07 	.word	0x08003b07
 8003834:	08003b25 	.word	0x08003b25
 8003838:	08003b43 	.word	0x08003b43
 800383c:	08003b7d 	.word	0x08003b7d
 8003840:	08003b9b 	.word	0x08003b9b
 8003844:	08003bb9 	.word	0x08003bb9
 8003848:	08003bd7 	.word	0x08003bd7
 800384c:	08003bf5 	.word	0x08003bf5
 8003850:	08003c13 	.word	0x08003c13
 8003854:	08003c35 	.word	0x08003c35
 8003858:	08003c57 	.word	0x08003c57
 800385c:	08003c79 	.word	0x08003c79
 8003860:	08003c9b 	.word	0x08003c9b
 8003864:	08003cbd 	.word	0x08003cbd
 8003868:	08003cdb 	.word	0x08003cdb
 800386c:	08003cf9 	.word	0x08003cf9
 8003870:	08003d17 	.word	0x08003d17
 8003874:	08003d35 	.word	0x08003d35
 8003878:	08003d53 	.word	0x08003d53
 800387c:	08003d75 	.word	0x08003d75
 8003880:	08003d93 	.word	0x08003d93
 8003884:	08003db5 	.word	0x08003db5
 8003888:	08003dd7 	.word	0x08003dd7
 800388c:	08003df5 	.word	0x08003df5
 8003890:	08003e13 	.word	0x08003e13
 8003894:	08003e31 	.word	0x08003e31
 8003898:	08003e71 	.word	0x08003e71
 800389c:	08003e8f 	.word	0x08003e8f
 80038a0:	08003ead 	.word	0x08003ead
	{
		case OUTPUT_PORT_NUM_1:							// OUTPUT PORT Channel Number 1
			if(OUTPUT_PORT_HIGH == u1t_val)
 80038a4:	79bb      	ldrb	r3, [r7, #6]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d105      	bne.n	80038b6 <FUN_GPO_Output+0xf2>
			{											// 출력 HI Command
				OUTPUT_CH_1_HIGH();						// HIGH 출력
 80038aa:	2201      	movs	r2, #1
 80038ac:	2110      	movs	r1, #16
 80038ae:	48ac      	ldr	r0, [pc, #688]	@ (8003b60 <FUN_GPO_Output+0x39c>)
 80038b0:	f009 fb06 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_1_LOW();						// LOW 출력
			}
		break;
 80038b4:	e30a      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_1_LOW();						// LOW 출력
 80038b6:	2200      	movs	r2, #0
 80038b8:	2110      	movs	r1, #16
 80038ba:	48a9      	ldr	r0, [pc, #676]	@ (8003b60 <FUN_GPO_Output+0x39c>)
 80038bc:	f009 fb00 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 80038c0:	e304      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_2:							// OUTPUT PORT Channel Number 2
			if(OUTPUT_PORT_HIGH == u1t_val)
 80038c2:	79bb      	ldrb	r3, [r7, #6]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d105      	bne.n	80038d4 <FUN_GPO_Output+0x110>
			{											// 출력 HI Command
				OUTPUT_CH_2_HIGH();						// HIGH 출력
 80038c8:	2201      	movs	r2, #1
 80038ca:	2120      	movs	r1, #32
 80038cc:	48a4      	ldr	r0, [pc, #656]	@ (8003b60 <FUN_GPO_Output+0x39c>)
 80038ce:	f009 faf7 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_2_LOW();						// LOW 출력
			}
		break;
 80038d2:	e2fb      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_2_LOW();						// LOW 출력
 80038d4:	2200      	movs	r2, #0
 80038d6:	2120      	movs	r1, #32
 80038d8:	48a1      	ldr	r0, [pc, #644]	@ (8003b60 <FUN_GPO_Output+0x39c>)
 80038da:	f009 faf1 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 80038de:	e2f5      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_3:							// OUTPUT PORT Channel Number 3
			if(OUTPUT_PORT_HIGH == u1t_val)
 80038e0:	79bb      	ldrb	r3, [r7, #6]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <FUN_GPO_Output+0x12e>
			{											// 출력 HI Command
				OUTPUT_CH_3_HIGH();						// HIGH 출력
 80038e6:	2201      	movs	r2, #1
 80038e8:	2140      	movs	r1, #64	@ 0x40
 80038ea:	489d      	ldr	r0, [pc, #628]	@ (8003b60 <FUN_GPO_Output+0x39c>)
 80038ec:	f009 fae8 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_3_LOW();						// LOW 출력
			}
		break;
 80038f0:	e2ec      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_3_LOW();						// LOW 출력
 80038f2:	2200      	movs	r2, #0
 80038f4:	2140      	movs	r1, #64	@ 0x40
 80038f6:	489a      	ldr	r0, [pc, #616]	@ (8003b60 <FUN_GPO_Output+0x39c>)
 80038f8:	f009 fae2 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 80038fc:	e2e6      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_4:							// OUTPUT PORT Channel Number 4
			if(OUTPUT_PORT_HIGH == u1t_val)
 80038fe:	79bb      	ldrb	r3, [r7, #6]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <FUN_GPO_Output+0x14c>
			{											// 출력 HI Command
				OUTPUT_CH_4_HIGH();						// HIGH 출력
 8003904:	2201      	movs	r2, #1
 8003906:	2180      	movs	r1, #128	@ 0x80
 8003908:	4895      	ldr	r0, [pc, #596]	@ (8003b60 <FUN_GPO_Output+0x39c>)
 800390a:	f009 fad9 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_4_LOW();						// LOW 출력
			}
		break;
 800390e:	e2dd      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_4_LOW();						// LOW 출력
 8003910:	2200      	movs	r2, #0
 8003912:	2180      	movs	r1, #128	@ 0x80
 8003914:	4892      	ldr	r0, [pc, #584]	@ (8003b60 <FUN_GPO_Output+0x39c>)
 8003916:	f009 fad3 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 800391a:	e2d7      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_5:							// OUTPUT PORT Channel Number 5
			if(OUTPUT_PORT_HIGH == u1t_val)
 800391c:	79bb      	ldrb	r3, [r7, #6]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d106      	bne.n	8003930 <FUN_GPO_Output+0x16c>
			{											// 출력 HI Command
				OUTPUT_CH_5_HIGH();						// HIGH 출력
 8003922:	2201      	movs	r2, #1
 8003924:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003928:	488d      	ldr	r0, [pc, #564]	@ (8003b60 <FUN_GPO_Output+0x39c>)
 800392a:	f009 fac9 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_5_LOW();						// LOW 출력
			}
		break;
 800392e:	e2cd      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_5_LOW();						// LOW 출력
 8003930:	2200      	movs	r2, #0
 8003932:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003936:	488a      	ldr	r0, [pc, #552]	@ (8003b60 <FUN_GPO_Output+0x39c>)
 8003938:	f009 fac2 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 800393c:	e2c6      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_6:							// OUTPUT PORT Channel Number 6
			if(OUTPUT_PORT_HIGH == u1t_val)
 800393e:	79bb      	ldrb	r3, [r7, #6]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <FUN_GPO_Output+0x18c>
			{											// 출력 HI Command
				OUTPUT_CH_6_HIGH();						// HIGH 출력
 8003944:	2201      	movs	r2, #1
 8003946:	2140      	movs	r1, #64	@ 0x40
 8003948:	4886      	ldr	r0, [pc, #536]	@ (8003b64 <FUN_GPO_Output+0x3a0>)
 800394a:	f009 fab9 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_6_LOW();						// LOW 출력
			}
		break;
 800394e:	e2bd      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_6_LOW();						// LOW 출력
 8003950:	2200      	movs	r2, #0
 8003952:	2140      	movs	r1, #64	@ 0x40
 8003954:	4883      	ldr	r0, [pc, #524]	@ (8003b64 <FUN_GPO_Output+0x3a0>)
 8003956:	f009 fab3 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 800395a:	e2b7      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_7:							// OUTPUT PORT Channel Number 7
			if(OUTPUT_PORT_HIGH == u1t_val)
 800395c:	79bb      	ldrb	r3, [r7, #6]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <FUN_GPO_Output+0x1aa>
			{											// 출력 HI Command
				OUTPUT_CH_7_HIGH();						// HIGH 출력
 8003962:	2201      	movs	r2, #1
 8003964:	2180      	movs	r1, #128	@ 0x80
 8003966:	487f      	ldr	r0, [pc, #508]	@ (8003b64 <FUN_GPO_Output+0x3a0>)
 8003968:	f009 faaa 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_7_LOW();						// LOW 출력
			}
		break;
 800396c:	e2ae      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_7_LOW();						// LOW 출력
 800396e:	2200      	movs	r2, #0
 8003970:	2180      	movs	r1, #128	@ 0x80
 8003972:	487c      	ldr	r0, [pc, #496]	@ (8003b64 <FUN_GPO_Output+0x3a0>)
 8003974:	f009 faa4 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003978:	e2a8      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_8:							// OUTPUT PORT Channel Number 8
			if(OUTPUT_PORT_HIGH == u1t_val)
 800397a:	79bb      	ldrb	r3, [r7, #6]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d106      	bne.n	800398e <FUN_GPO_Output+0x1ca>
			{											// 출력 HI Command
				OUTPUT_CH_8_HIGH();						// HIGH 출력
 8003980:	2201      	movs	r2, #1
 8003982:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003986:	4877      	ldr	r0, [pc, #476]	@ (8003b64 <FUN_GPO_Output+0x3a0>)
 8003988:	f009 fa9a 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_8_LOW();						// LOW 출력
			}
		break;
 800398c:	e29e      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_8_LOW();						// LOW 출력
 800398e:	2200      	movs	r2, #0
 8003990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003994:	4873      	ldr	r0, [pc, #460]	@ (8003b64 <FUN_GPO_Output+0x3a0>)
 8003996:	f009 fa93 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 800399a:	e297      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_9:							// OUTPUT PORT Channel Number 9
			if(OUTPUT_PORT_HIGH == u1t_val)
 800399c:	79bb      	ldrb	r3, [r7, #6]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d106      	bne.n	80039b0 <FUN_GPO_Output+0x1ec>
			{											// 출력 HI Command
				OUTPUT_CH_9_HIGH();						// HIGH 출력
 80039a2:	2201      	movs	r2, #1
 80039a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039a8:	486e      	ldr	r0, [pc, #440]	@ (8003b64 <FUN_GPO_Output+0x3a0>)
 80039aa:	f009 fa89 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_9_LOW();						// LOW 출력
			}
		break;
 80039ae:	e28d      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_9_LOW();						// LOW 출력
 80039b0:	2200      	movs	r2, #0
 80039b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039b6:	486b      	ldr	r0, [pc, #428]	@ (8003b64 <FUN_GPO_Output+0x3a0>)
 80039b8:	f009 fa82 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 80039bc:	e286      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_10:						// OUTPUT PORT Channel Number 10
			if(OUTPUT_PORT_HIGH == u1t_val)
 80039be:	79bb      	ldrb	r3, [r7, #6]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d106      	bne.n	80039d2 <FUN_GPO_Output+0x20e>
			{											// 출력 HI Command
				OUTPUT_CH_10_HIGH();					// HIGH 출력
 80039c4:	2201      	movs	r2, #1
 80039c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039ca:	4867      	ldr	r0, [pc, #412]	@ (8003b68 <FUN_GPO_Output+0x3a4>)
 80039cc:	f009 fa78 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_10_LOW();						// LOW 출력
			}
		break;
 80039d0:	e27c      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_10_LOW();						// LOW 출력
 80039d2:	2200      	movs	r2, #0
 80039d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039d8:	4863      	ldr	r0, [pc, #396]	@ (8003b68 <FUN_GPO_Output+0x3a4>)
 80039da:	f009 fa71 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 80039de:	e275      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_11:						// OUTPUT PORT Channel Number 11
			if(OUTPUT_PORT_HIGH == u1t_val)
 80039e0:	79bb      	ldrb	r3, [r7, #6]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d106      	bne.n	80039f4 <FUN_GPO_Output+0x230>
			{											// 출력 HI Command
				OUTPUT_CH_11_HIGH();					// HIGH 출력
 80039e6:	2201      	movs	r2, #1
 80039e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80039ec:	485e      	ldr	r0, [pc, #376]	@ (8003b68 <FUN_GPO_Output+0x3a4>)
 80039ee:	f009 fa67 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_11_LOW();						// LOW 출력
			}
		break;
 80039f2:	e26b      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_11_LOW();						// LOW 출력
 80039f4:	2200      	movs	r2, #0
 80039f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80039fa:	485b      	ldr	r0, [pc, #364]	@ (8003b68 <FUN_GPO_Output+0x3a4>)
 80039fc:	f009 fa60 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003a00:	e264      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_12:						// OUTPUT PORT Channel Number 12
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003a02:	79bb      	ldrb	r3, [r7, #6]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <FUN_GPO_Output+0x252>
			{											// 출력 HI Command
				OUTPUT_CH_12_HIGH();					// HIGH 출력
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a0e:	4857      	ldr	r0, [pc, #348]	@ (8003b6c <FUN_GPO_Output+0x3a8>)
 8003a10:	f009 fa56 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_12_LOW();						// LOW 출력
			}
		break;
 8003a14:	e25a      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_12_LOW();						// LOW 출력
 8003a16:	2200      	movs	r2, #0
 8003a18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a1c:	4853      	ldr	r0, [pc, #332]	@ (8003b6c <FUN_GPO_Output+0x3a8>)
 8003a1e:	f009 fa4f 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003a22:	e253      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_13:						// OUTPUT PORT Channel Number 13
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003a24:	79bb      	ldrb	r3, [r7, #6]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d106      	bne.n	8003a38 <FUN_GPO_Output+0x274>
										{				// 출력 HI Command
				OUTPUT_CH_13_HIGH();					// HIGH 출력
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a30:	484d      	ldr	r0, [pc, #308]	@ (8003b68 <FUN_GPO_Output+0x3a4>)
 8003a32:	f009 fa45 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_13_LOW();						// LOW 출력
			}
		break;
 8003a36:	e249      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_13_LOW();						// LOW 출력
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a3e:	484a      	ldr	r0, [pc, #296]	@ (8003b68 <FUN_GPO_Output+0x3a4>)
 8003a40:	f009 fa3e 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003a44:	e242      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_14:						// OUTPUT PORT Channel Number 14
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003a46:	79bb      	ldrb	r3, [r7, #6]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d106      	bne.n	8003a5a <FUN_GPO_Output+0x296>
			{											// 출력 HI Command
				OUTPUT_CH_14_HIGH();					// HIGH 출력
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a52:	4847      	ldr	r0, [pc, #284]	@ (8003b70 <FUN_GPO_Output+0x3ac>)
 8003a54:	f009 fa34 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_14_LOW();						// LOW 출력
			}
		break;
 8003a58:	e238      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_14_LOW();						// LOW 출력
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a60:	4843      	ldr	r0, [pc, #268]	@ (8003b70 <FUN_GPO_Output+0x3ac>)
 8003a62:	f009 fa2d 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003a66:	e231      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_15:						// OUTPUT PORT Channel Number 15
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003a68:	79bb      	ldrb	r3, [r7, #6]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d106      	bne.n	8003a7c <FUN_GPO_Output+0x2b8>
			{											// 출력 HI Command
				OUTPUT_CH_15_HIGH();					// HIGH 출력
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a74:	483e      	ldr	r0, [pc, #248]	@ (8003b70 <FUN_GPO_Output+0x3ac>)
 8003a76:	f009 fa23 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_15_LOW();						// LOW 출력
			}
		break;
 8003a7a:	e227      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_15_LOW();						// LOW 출력
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a82:	483b      	ldr	r0, [pc, #236]	@ (8003b70 <FUN_GPO_Output+0x3ac>)
 8003a84:	f009 fa1c 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003a88:	e220      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_16:						// OUTPUT PORT Channel Number 16
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003a8a:	79bb      	ldrb	r3, [r7, #6]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d106      	bne.n	8003a9e <FUN_GPO_Output+0x2da>
			{											// 출력 HI Command
				OUTPUT_CH_16_HIGH();					// HIGH 출력
 8003a90:	2201      	movs	r2, #1
 8003a92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a96:	4836      	ldr	r0, [pc, #216]	@ (8003b70 <FUN_GPO_Output+0x3ac>)
 8003a98:	f009 fa12 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_16_LOW();						// LOW 출력
			}
		break;
 8003a9c:	e216      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_16_LOW();						// LOW 출력
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003aa4:	4832      	ldr	r0, [pc, #200]	@ (8003b70 <FUN_GPO_Output+0x3ac>)
 8003aa6:	f009 fa0b 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003aaa:	e20f      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_17:						// OUTPUT PORT Channel Number 17
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003aac:	79bb      	ldrb	r3, [r7, #6]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d105      	bne.n	8003abe <FUN_GPO_Output+0x2fa>
			{											// 출력 HI Command
				OUTPUT_CH_17_HIGH();					// HIGH 출력
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	482f      	ldr	r0, [pc, #188]	@ (8003b74 <FUN_GPO_Output+0x3b0>)
 8003ab8:	f009 fa02 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_17_LOW();						// LOW 출력
			}
		break;
 8003abc:	e206      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_17_LOW();						// LOW 출력
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	482c      	ldr	r0, [pc, #176]	@ (8003b74 <FUN_GPO_Output+0x3b0>)
 8003ac4:	f009 f9fc 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003ac8:	e200      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_18:						// OUTPUT PORT Channel Number 18
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003aca:	79bb      	ldrb	r3, [r7, #6]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d105      	bne.n	8003adc <FUN_GPO_Output+0x318>
			{											// 출력 HI Command
				OUTPUT_CH_18_HIGH();					// HIGH 출력
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	4827      	ldr	r0, [pc, #156]	@ (8003b74 <FUN_GPO_Output+0x3b0>)
 8003ad6:	f009 f9f3 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_18_LOW();						// LOW 출력
			}
		break;
 8003ada:	e1f7      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_18_LOW();						// LOW 출력
 8003adc:	2200      	movs	r2, #0
 8003ade:	2102      	movs	r1, #2
 8003ae0:	4824      	ldr	r0, [pc, #144]	@ (8003b74 <FUN_GPO_Output+0x3b0>)
 8003ae2:	f009 f9ed 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003ae6:	e1f1      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_19:						// OUTPUT PORT Channel Number 19
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003ae8:	79bb      	ldrb	r3, [r7, #6]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <FUN_GPO_Output+0x336>
			{											// 출력 HI Command
				OUTPUT_CH_19_HIGH();					// HIGH 출력
 8003aee:	2201      	movs	r2, #1
 8003af0:	2104      	movs	r1, #4
 8003af2:	4820      	ldr	r0, [pc, #128]	@ (8003b74 <FUN_GPO_Output+0x3b0>)
 8003af4:	f009 f9e4 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_19_LOW();						// LOW 출력
			}
		break;
 8003af8:	e1e8      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_19_LOW();						// LOW 출력
 8003afa:	2200      	movs	r2, #0
 8003afc:	2104      	movs	r1, #4
 8003afe:	481d      	ldr	r0, [pc, #116]	@ (8003b74 <FUN_GPO_Output+0x3b0>)
 8003b00:	f009 f9de 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003b04:	e1e2      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_20:						// OUTPUT PORT Channel Number 20
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003b06:	79bb      	ldrb	r3, [r7, #6]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d105      	bne.n	8003b18 <FUN_GPO_Output+0x354>
			{											// 출력 HI Command
				OUTPUT_CH_20_HIGH();					// HIGH 출력
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	2108      	movs	r1, #8
 8003b10:	4818      	ldr	r0, [pc, #96]	@ (8003b74 <FUN_GPO_Output+0x3b0>)
 8003b12:	f009 f9d5 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_20_LOW();						// LOW 출력
			}
		break;
 8003b16:	e1d9      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_20_LOW();						// LOW 출력
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2108      	movs	r1, #8
 8003b1c:	4815      	ldr	r0, [pc, #84]	@ (8003b74 <FUN_GPO_Output+0x3b0>)
 8003b1e:	f009 f9cf 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003b22:	e1d3      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_21:						// OUTPUT PORT Channel Number 21
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003b24:	79bb      	ldrb	r3, [r7, #6]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d105      	bne.n	8003b36 <FUN_GPO_Output+0x372>
			{											// 출력 HI Command
				OUTPUT_CH_21_HIGH();					// HIGH 출력
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4812      	ldr	r0, [pc, #72]	@ (8003b78 <FUN_GPO_Output+0x3b4>)
 8003b30:	f009 f9c6 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_21_LOW();						// LOW 출력
			}
		break;
 8003b34:	e1ca      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_21_LOW();						// LOW 출력
 8003b36:	2200      	movs	r2, #0
 8003b38:	2101      	movs	r1, #1
 8003b3a:	480f      	ldr	r0, [pc, #60]	@ (8003b78 <FUN_GPO_Output+0x3b4>)
 8003b3c:	f009 f9c0 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003b40:	e1c4      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_22:						// OUTPUT PORT Channel Number 22
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003b42:	79bb      	ldrb	r3, [r7, #6]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <FUN_GPO_Output+0x390>
			{											// 출력 HI Command
				OUTPUT_CH_22_HIGH();					// HIGH 출력
 8003b48:	2201      	movs	r2, #1
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	480a      	ldr	r0, [pc, #40]	@ (8003b78 <FUN_GPO_Output+0x3b4>)
 8003b4e:	f009 f9b7 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_22_LOW();						// LOW 출력
			}
		break;
 8003b52:	e1bb      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_22_LOW();						// LOW 출력
 8003b54:	2200      	movs	r2, #0
 8003b56:	2102      	movs	r1, #2
 8003b58:	4807      	ldr	r0, [pc, #28]	@ (8003b78 <FUN_GPO_Output+0x3b4>)
 8003b5a:	f009 f9b1 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003b5e:	e1b5      	b.n	8003ecc <FUN_GPO_Output+0x708>
 8003b60:	40021800 	.word	0x40021800
 8003b64:	40020800 	.word	0x40020800
 8003b68:	40020000 	.word	0x40020000
 8003b6c:	40021400 	.word	0x40021400
 8003b70:	40021c00 	.word	0x40021c00
 8003b74:	40022000 	.word	0x40022000
 8003b78:	40020c00 	.word	0x40020c00

		case OUTPUT_PORT_NUM_23:						// OUTPUT PORT Channel Number 23
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003b7c:	79bb      	ldrb	r3, [r7, #6]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d105      	bne.n	8003b8e <FUN_GPO_Output+0x3ca>
			{											// 출력 HI Command
				OUTPUT_CH_23_HIGH();					// HIGH 출력
 8003b82:	2201      	movs	r2, #1
 8003b84:	2104      	movs	r1, #4
 8003b86:	48af      	ldr	r0, [pc, #700]	@ (8003e44 <FUN_GPO_Output+0x680>)
 8003b88:	f009 f99a 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_23_LOW();						// LOW 출력
			}
		break;
 8003b8c:	e19e      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_23_LOW();						// LOW 출력
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2104      	movs	r1, #4
 8003b92:	48ac      	ldr	r0, [pc, #688]	@ (8003e44 <FUN_GPO_Output+0x680>)
 8003b94:	f009 f994 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003b98:	e198      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_24:						// OUTPUT PORT Channel Number 24
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003b9a:	79bb      	ldrb	r3, [r7, #6]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d105      	bne.n	8003bac <FUN_GPO_Output+0x3e8>
			{											// 출력 HI Command
				OUTPUT_CH_24_HIGH();					// HIGH 출력
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	2108      	movs	r1, #8
 8003ba4:	48a7      	ldr	r0, [pc, #668]	@ (8003e44 <FUN_GPO_Output+0x680>)
 8003ba6:	f009 f98b 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_24_LOW();						// LOW 출력
			}
		break;
 8003baa:	e18f      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_24_LOW();						// LOW 출력
 8003bac:	2200      	movs	r2, #0
 8003bae:	2108      	movs	r1, #8
 8003bb0:	48a4      	ldr	r0, [pc, #656]	@ (8003e44 <FUN_GPO_Output+0x680>)
 8003bb2:	f009 f985 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003bb6:	e189      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_25:						// OUTPUT PORT Channel Number 25
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003bb8:	79bb      	ldrb	r3, [r7, #6]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d105      	bne.n	8003bca <FUN_GPO_Output+0x406>
			{											// 출력 HI Command
				OUTPUT_CH_25_HIGH();					// HIGH 출력
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	2110      	movs	r1, #16
 8003bc2:	48a0      	ldr	r0, [pc, #640]	@ (8003e44 <FUN_GPO_Output+0x680>)
 8003bc4:	f009 f97c 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_25_LOW();						// LOW 출력
			}
		break;
 8003bc8:	e180      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_25_LOW();						// LOW 출력
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2110      	movs	r1, #16
 8003bce:	489d      	ldr	r0, [pc, #628]	@ (8003e44 <FUN_GPO_Output+0x680>)
 8003bd0:	f009 f976 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003bd4:	e17a      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_26:						// OUTPUT PORT Channel Number 26
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003bd6:	79bb      	ldrb	r3, [r7, #6]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <FUN_GPO_Output+0x424>
			{											// 출력 HI Command
				OUTPUT_CH_26_HIGH();					// HIGH 출력
 8003bdc:	2201      	movs	r2, #1
 8003bde:	2120      	movs	r1, #32
 8003be0:	4898      	ldr	r0, [pc, #608]	@ (8003e44 <FUN_GPO_Output+0x680>)
 8003be2:	f009 f96d 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_26_LOW();						// LOW 출력
			}
		break;
 8003be6:	e171      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_26_LOW();						// LOW 출력
 8003be8:	2200      	movs	r2, #0
 8003bea:	2120      	movs	r1, #32
 8003bec:	4895      	ldr	r0, [pc, #596]	@ (8003e44 <FUN_GPO_Output+0x680>)
 8003bee:	f009 f967 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003bf2:	e16b      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_27:						// OUTPUT PORT Channel Number 27
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003bf4:	79bb      	ldrb	r3, [r7, #6]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d105      	bne.n	8003c06 <FUN_GPO_Output+0x442>
			{											// 출력 HI Command
				OUTPUT_CH_27_HIGH();					// HIGH 출력
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2140      	movs	r1, #64	@ 0x40
 8003bfe:	4891      	ldr	r0, [pc, #580]	@ (8003e44 <FUN_GPO_Output+0x680>)
 8003c00:	f009 f95e 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_27_LOW();						// LOW 출력
			}
		break;
 8003c04:	e162      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_27_LOW();						// LOW 출력
 8003c06:	2200      	movs	r2, #0
 8003c08:	2140      	movs	r1, #64	@ 0x40
 8003c0a:	488e      	ldr	r0, [pc, #568]	@ (8003e44 <FUN_GPO_Output+0x680>)
 8003c0c:	f009 f958 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003c10:	e15c      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_28:						// OUTPUT PORT Channel Number 28
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003c12:	79bb      	ldrb	r3, [r7, #6]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d106      	bne.n	8003c26 <FUN_GPO_Output+0x462>
			{											// 출력 HI Command
				OUTPUT_CH_28_HIGH();					// HIGH 출력
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c1e:	488a      	ldr	r0, [pc, #552]	@ (8003e48 <FUN_GPO_Output+0x684>)
 8003c20:	f009 f94e 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_28_LOW();						// LOW 출력
			}
		break;
 8003c24:	e152      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_28_LOW();						// LOW 출력
 8003c26:	2200      	movs	r2, #0
 8003c28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c2c:	4886      	ldr	r0, [pc, #536]	@ (8003e48 <FUN_GPO_Output+0x684>)
 8003c2e:	f009 f947 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003c32:	e14b      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_29:						// OUTPUT PORT Channel Number 29
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003c34:	79bb      	ldrb	r3, [r7, #6]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d106      	bne.n	8003c48 <FUN_GPO_Output+0x484>
			{											// 출력 HI Command
				OUTPUT_CH_29_HIGH();					// HIGH 출력
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c40:	4881      	ldr	r0, [pc, #516]	@ (8003e48 <FUN_GPO_Output+0x684>)
 8003c42:	f009 f93d 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_29_LOW();						// LOW 출력
			}
		break;
 8003c46:	e141      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_29_LOW();						// LOW 출력
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c4e:	487e      	ldr	r0, [pc, #504]	@ (8003e48 <FUN_GPO_Output+0x684>)
 8003c50:	f009 f936 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003c54:	e13a      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_30:						// OUTPUT PORT Channel Number 30
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003c56:	79bb      	ldrb	r3, [r7, #6]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d106      	bne.n	8003c6a <FUN_GPO_Output+0x4a6>
			{											// 출력 HI Command
				OUTPUT_CH_30_HIGH();					// HIGH 출력
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c62:	4879      	ldr	r0, [pc, #484]	@ (8003e48 <FUN_GPO_Output+0x684>)
 8003c64:	f009 f92c 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_30_LOW();						// LOW 출력
			}
		break;
 8003c68:	e130      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_30_LOW();						// LOW 출력
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c70:	4875      	ldr	r0, [pc, #468]	@ (8003e48 <FUN_GPO_Output+0x684>)
 8003c72:	f009 f925 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003c76:	e129      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_31:						// OUTPUT PORT Channel Number 31
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003c78:	79bb      	ldrb	r3, [r7, #6]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d106      	bne.n	8003c8c <FUN_GPO_Output+0x4c8>
			{											// 출력 HI Command
				OUTPUT_CH_31_HIGH();					// HIGH 출력
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c84:	4870      	ldr	r0, [pc, #448]	@ (8003e48 <FUN_GPO_Output+0x684>)
 8003c86:	f009 f91b 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_31_LOW();						// LOW 출력
			}
		break;
 8003c8a:	e11f      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_31_LOW();						// LOW 출력
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c92:	486d      	ldr	r0, [pc, #436]	@ (8003e48 <FUN_GPO_Output+0x684>)
 8003c94:	f009 f914 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003c98:	e118      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_32:						// OUTPUT PORT Channel Number 32
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003c9a:	79bb      	ldrb	r3, [r7, #6]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d106      	bne.n	8003cae <FUN_GPO_Output+0x4ea>
			{											// 출력 HI Command
				OUTPUT_CH_32_HIGH();					// HIGH 출력
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ca6:	4869      	ldr	r0, [pc, #420]	@ (8003e4c <FUN_GPO_Output+0x688>)
 8003ca8:	f009 f90a 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_32_LOW();						// LOW 출력
			}
		break;
 8003cac:	e10e      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_32_LOW();						// LOW 출력
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cb4:	4865      	ldr	r0, [pc, #404]	@ (8003e4c <FUN_GPO_Output+0x688>)
 8003cb6:	f009 f903 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003cba:	e107      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_33:						// OUTPUT PORT Channel Number 33
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003cbc:	79bb      	ldrb	r3, [r7, #6]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <FUN_GPO_Output+0x50a>
			{											// 출력 HI Command
				OUTPUT_CH_33_HIGH();					// HIGH 출력
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	2108      	movs	r1, #8
 8003cc6:	4862      	ldr	r0, [pc, #392]	@ (8003e50 <FUN_GPO_Output+0x68c>)
 8003cc8:	f009 f8fa 	bl	800cec0 <HAL_GPIO_WritePin>
			}else
			{											// 출력 LO Command
				OUTPUT_CH_33_LOW();						// LOW 출력
			}
		break;
 8003ccc:	e0fe      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_33_LOW();						// LOW 출력
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2108      	movs	r1, #8
 8003cd2:	485f      	ldr	r0, [pc, #380]	@ (8003e50 <FUN_GPO_Output+0x68c>)
 8003cd4:	f009 f8f4 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003cd8:	e0f8      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_34:						// OUTPUT PORT Channel Number 34
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003cda:	79bb      	ldrb	r3, [r7, #6]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d105      	bne.n	8003cec <FUN_GPO_Output+0x528>
			{											// 출력 HI Command
				OUTPUT_CH_34_HIGH();					// HIGH 출력
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	2110      	movs	r1, #16
 8003ce4:	485a      	ldr	r0, [pc, #360]	@ (8003e50 <FUN_GPO_Output+0x68c>)
 8003ce6:	f009 f8eb 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_34_LOW();						// LOW 출력
			}
		break;
 8003cea:	e0ef      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_34_LOW();						// LOW 출력
 8003cec:	2200      	movs	r2, #0
 8003cee:	2110      	movs	r1, #16
 8003cf0:	4857      	ldr	r0, [pc, #348]	@ (8003e50 <FUN_GPO_Output+0x68c>)
 8003cf2:	f009 f8e5 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003cf6:	e0e9      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_35:						// OUTPUT PORT Channel Number 35
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003cf8:	79bb      	ldrb	r3, [r7, #6]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d105      	bne.n	8003d0a <FUN_GPO_Output+0x546>
			{											// 출력 HI Command
				OUTPUT_CH_35_HIGH();					// HIGH 출력
 8003cfe:	2201      	movs	r2, #1
 8003d00:	2120      	movs	r1, #32
 8003d02:	4853      	ldr	r0, [pc, #332]	@ (8003e50 <FUN_GPO_Output+0x68c>)
 8003d04:	f009 f8dc 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_35_LOW();						// LOW 출력
			}
		break;
 8003d08:	e0e0      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_35_LOW();						// LOW 출력
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2120      	movs	r1, #32
 8003d0e:	4850      	ldr	r0, [pc, #320]	@ (8003e50 <FUN_GPO_Output+0x68c>)
 8003d10:	f009 f8d6 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003d14:	e0da      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_36:						// OUTPUT PORT Channel Number 36
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003d16:	79bb      	ldrb	r3, [r7, #6]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d105      	bne.n	8003d28 <FUN_GPO_Output+0x564>
			{											// 출력 HI Command
				OUTPUT_CH_36_HIGH();					// HIGH 출력
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	2140      	movs	r1, #64	@ 0x40
 8003d20:	484b      	ldr	r0, [pc, #300]	@ (8003e50 <FUN_GPO_Output+0x68c>)
 8003d22:	f009 f8cd 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_36_LOW();						// LOW 출력
			}
		break;
 8003d26:	e0d1      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_36_LOW();						// LOW 출력
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2140      	movs	r1, #64	@ 0x40
 8003d2c:	4848      	ldr	r0, [pc, #288]	@ (8003e50 <FUN_GPO_Output+0x68c>)
 8003d2e:	f009 f8c7 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003d32:	e0cb      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_37:						// OUTPUT PORT Channel Number 37
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003d34:	79bb      	ldrb	r3, [r7, #6]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d105      	bne.n	8003d46 <FUN_GPO_Output+0x582>
			{											// 출력 HI Command
				OUTPUT_CH_37_HIGH();					// HIGH 출력
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2180      	movs	r1, #128	@ 0x80
 8003d3e:	4844      	ldr	r0, [pc, #272]	@ (8003e50 <FUN_GPO_Output+0x68c>)
 8003d40:	f009 f8be 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_37_LOW();						// LOW 출력
			}
		break;
 8003d44:	e0c2      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_37_LOW();						// LOW 출력
 8003d46:	2200      	movs	r2, #0
 8003d48:	2180      	movs	r1, #128	@ 0x80
 8003d4a:	4841      	ldr	r0, [pc, #260]	@ (8003e50 <FUN_GPO_Output+0x68c>)
 8003d4c:	f009 f8b8 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003d50:	e0bc      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_38:						// OUTPUT PORT Channel Number 38
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003d52:	79bb      	ldrb	r3, [r7, #6]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d106      	bne.n	8003d66 <FUN_GPO_Output+0x5a2>
			{											// 출력 HI Command
				OUTPUT_CH_38_HIGH();					// HIGH 출력
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d5e:	483d      	ldr	r0, [pc, #244]	@ (8003e54 <FUN_GPO_Output+0x690>)
 8003d60:	f009 f8ae 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_38_LOW();						// LOW 출력
			}
		break;
 8003d64:	e0b2      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_38_LOW();						// LOW 출력
 8003d66:	2200      	movs	r2, #0
 8003d68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d6c:	4839      	ldr	r0, [pc, #228]	@ (8003e54 <FUN_GPO_Output+0x690>)
 8003d6e:	f009 f8a7 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003d72:	e0ab      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_39:						// OUTPUT PORT Channel Number 39
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003d74:	79bb      	ldrb	r3, [r7, #6]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <FUN_GPO_Output+0x5c2>
			{											// 출력 HI Command
				OUTPUT_CH_39_HIGH();					// HIGH 출력
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	2120      	movs	r1, #32
 8003d7e:	4836      	ldr	r0, [pc, #216]	@ (8003e58 <FUN_GPO_Output+0x694>)
 8003d80:	f009 f89e 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_39_LOW();						// LOW 출력
			}
		break;
 8003d84:	e0a2      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_39_LOW();						// LOW 출력
 8003d86:	2200      	movs	r2, #0
 8003d88:	2120      	movs	r1, #32
 8003d8a:	4833      	ldr	r0, [pc, #204]	@ (8003e58 <FUN_GPO_Output+0x694>)
 8003d8c:	f009 f898 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003d90:	e09c      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_40:						// OUTPUT PORT Channel Number 40
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003d92:	79bb      	ldrb	r3, [r7, #6]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <FUN_GPO_Output+0x5e2>
			{											// 출력 HI Command
				OUTPUT_CH_40_HIGH();					// HIGH 출력
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d9e:	482e      	ldr	r0, [pc, #184]	@ (8003e58 <FUN_GPO_Output+0x694>)
 8003da0:	f009 f88e 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_40_LOW();						// LOW 출력
			}
		break;
 8003da4:	e092      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_40_LOW();						// LOW 출력
 8003da6:	2200      	movs	r2, #0
 8003da8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003dac:	482a      	ldr	r0, [pc, #168]	@ (8003e58 <FUN_GPO_Output+0x694>)
 8003dae:	f009 f887 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003db2:	e08b      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_41:						// OUTPUT PORT Channel Number 41
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003db4:	79bb      	ldrb	r3, [r7, #6]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d106      	bne.n	8003dc8 <FUN_GPO_Output+0x604>
			{											// 출력 HI Command
				OUTPUT_CH_41_HIGH();					// HIGH 출력
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dc0:	4825      	ldr	r0, [pc, #148]	@ (8003e58 <FUN_GPO_Output+0x694>)
 8003dc2:	f009 f87d 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_41_LOW();						// LOW 출력
			}
		break;
 8003dc6:	e081      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_41_LOW();						// LOW 출력
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dce:	4822      	ldr	r0, [pc, #136]	@ (8003e58 <FUN_GPO_Output+0x694>)
 8003dd0:	f009 f876 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003dd4:	e07a      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_42:						// OUTPUT PORT Channel Number 42
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003dd6:	79bb      	ldrb	r3, [r7, #6]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d105      	bne.n	8003de8 <FUN_GPO_Output+0x624>
			{											// 출력 HI Command
				OUTPUT_CH_42_HIGH();					// HIGH 출력
 8003ddc:	2201      	movs	r2, #1
 8003dde:	2101      	movs	r1, #1
 8003de0:	481e      	ldr	r0, [pc, #120]	@ (8003e5c <FUN_GPO_Output+0x698>)
 8003de2:	f009 f86d 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_42_LOW();						// LOW 출력
			}
		break;
 8003de6:	e071      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_42_LOW();						// LOW 출력
 8003de8:	2200      	movs	r2, #0
 8003dea:	2101      	movs	r1, #1
 8003dec:	481b      	ldr	r0, [pc, #108]	@ (8003e5c <FUN_GPO_Output+0x698>)
 8003dee:	f009 f867 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003df2:	e06b      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_43:						// OUTPUT PORT Channel Number 43
			if(OUTPUT_PORT_HIGH == u1t_val)
 8003df4:	79bb      	ldrb	r3, [r7, #6]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d105      	bne.n	8003e06 <FUN_GPO_Output+0x642>
			{											// 출력 HI Command
				OUTPUT_CH_43_HIGH();					// HIGH 출력
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	4817      	ldr	r0, [pc, #92]	@ (8003e5c <FUN_GPO_Output+0x698>)
 8003e00:	f009 f85e 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{											// 출력 LO Command
				OUTPUT_CH_43_LOW();						// LOW 출력
			}
		break;
 8003e04:	e062      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_43_LOW();						// LOW 출력
 8003e06:	2200      	movs	r2, #0
 8003e08:	2102      	movs	r1, #2
 8003e0a:	4814      	ldr	r0, [pc, #80]	@ (8003e5c <FUN_GPO_Output+0x698>)
 8003e0c:	f009 f858 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003e10:	e05c      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_44:							// OUTPUT PORT Channel Number 44
			if(OUTPUT_PORT_HIGH == u1t_val){				// 출력 HI Command
 8003e12:	79bb      	ldrb	r3, [r7, #6]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d105      	bne.n	8003e24 <FUN_GPO_Output+0x660>
				OUTPUT_CH_44_HIGH();						// HIGH 출력
 8003e18:	2201      	movs	r2, #1
 8003e1a:	2110      	movs	r1, #16
 8003e1c:	4810      	ldr	r0, [pc, #64]	@ (8003e60 <FUN_GPO_Output+0x69c>)
 8003e1e:	f009 f84f 	bl	800cec0 <HAL_GPIO_WritePin>
			} else {									// 출력 LO Command
				OUTPUT_CH_44_LOW();						// LOW 출력
			}
		break;
 8003e22:	e053      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_44_LOW();						// LOW 출력
 8003e24:	2200      	movs	r2, #0
 8003e26:	2110      	movs	r1, #16
 8003e28:	480d      	ldr	r0, [pc, #52]	@ (8003e60 <FUN_GPO_Output+0x69c>)
 8003e2a:	f009 f849 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003e2e:	e04d      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_45:							// OUTPUT PORT Channel Number 45
			if(OUTPUT_PORT_HIGH == u1t_val){				// 출력 HI Command
 8003e30:	79bb      	ldrb	r3, [r7, #6]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d116      	bne.n	8003e64 <FUN_GPO_Output+0x6a0>
				OUTPUT_CH_45_HIGH();						// HIGH 출력
 8003e36:	2201      	movs	r2, #1
 8003e38:	2120      	movs	r1, #32
 8003e3a:	4809      	ldr	r0, [pc, #36]	@ (8003e60 <FUN_GPO_Output+0x69c>)
 8003e3c:	f009 f840 	bl	800cec0 <HAL_GPIO_WritePin>
			} else {									// 출력 LO Command
				OUTPUT_CH_45_LOW();						// LOW 출력
			}
		break;
 8003e40:	e044      	b.n	8003ecc <FUN_GPO_Output+0x708>
 8003e42:	bf00      	nop
 8003e44:	40020c00 	.word	0x40020c00
 8003e48:	40022400 	.word	0x40022400
 8003e4c:	40021400 	.word	0x40021400
 8003e50:	40022800 	.word	0x40022800
 8003e54:	40021800 	.word	0x40021800
 8003e58:	40020400 	.word	0x40020400
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40022000 	.word	0x40022000
				OUTPUT_CH_45_LOW();						// LOW 출력
 8003e64:	2200      	movs	r2, #0
 8003e66:	2120      	movs	r1, #32
 8003e68:	481a      	ldr	r0, [pc, #104]	@ (8003ed4 <FUN_GPO_Output+0x710>)
 8003e6a:	f009 f829 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003e6e:	e02d      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_46:							// OUTPUT PORT Channel Number 46
			if(OUTPUT_PORT_HIGH == u1t_val){				// 출력 HI Command
 8003e70:	79bb      	ldrb	r3, [r7, #6]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d105      	bne.n	8003e82 <FUN_GPO_Output+0x6be>
				OUTPUT_CH_46_HIGH();						// HIGH 출력
 8003e76:	2201      	movs	r2, #1
 8003e78:	2140      	movs	r1, #64	@ 0x40
 8003e7a:	4816      	ldr	r0, [pc, #88]	@ (8003ed4 <FUN_GPO_Output+0x710>)
 8003e7c:	f009 f820 	bl	800cec0 <HAL_GPIO_WritePin>
			} else {									// 출력 LO Command
				OUTPUT_CH_46_LOW();						// LOW 출력
			}
		break;
 8003e80:	e024      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_46_LOW();						// LOW 출력
 8003e82:	2200      	movs	r2, #0
 8003e84:	2140      	movs	r1, #64	@ 0x40
 8003e86:	4813      	ldr	r0, [pc, #76]	@ (8003ed4 <FUN_GPO_Output+0x710>)
 8003e88:	f009 f81a 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003e8c:	e01e      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_47:							// OUTPUT PORT Channel Number 47
			if(OUTPUT_PORT_HIGH == u1t_val){				// 출력 HI Command
 8003e8e:	79bb      	ldrb	r3, [r7, #6]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d105      	bne.n	8003ea0 <FUN_GPO_Output+0x6dc>
				OUTPUT_CH_47_HIGH();						// HIGH 출력
 8003e94:	2201      	movs	r2, #1
 8003e96:	2180      	movs	r1, #128	@ 0x80
 8003e98:	480e      	ldr	r0, [pc, #56]	@ (8003ed4 <FUN_GPO_Output+0x710>)
 8003e9a:	f009 f811 	bl	800cec0 <HAL_GPIO_WritePin>
			} else {									// 출력 LO Command
				OUTPUT_CH_47_LOW();						// LOW 출력
			}
		break;
 8003e9e:	e015      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_47_LOW();						// LOW 출력
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2180      	movs	r1, #128	@ 0x80
 8003ea4:	480b      	ldr	r0, [pc, #44]	@ (8003ed4 <FUN_GPO_Output+0x710>)
 8003ea6:	f009 f80b 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003eaa:	e00f      	b.n	8003ecc <FUN_GPO_Output+0x708>

		case OUTPUT_PORT_NUM_48:							// OUTPUT PORT Channel Number 48
			if(OUTPUT_PORT_HIGH == u1t_val){				// 출력 HI Command
 8003eac:	79bb      	ldrb	r3, [r7, #6]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d105      	bne.n	8003ebe <FUN_GPO_Output+0x6fa>
				OUTPUT_CH_48_HIGH();						// HIGH 출력
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	2104      	movs	r1, #4
 8003eb6:	4808      	ldr	r0, [pc, #32]	@ (8003ed8 <FUN_GPO_Output+0x714>)
 8003eb8:	f009 f802 	bl	800cec0 <HAL_GPIO_WritePin>
			} else {									// 출력 LO Command
				OUTPUT_CH_48_LOW();						// LOW 출력
			}
		break;
 8003ebc:	e006      	b.n	8003ecc <FUN_GPO_Output+0x708>
				OUTPUT_CH_48_LOW();						// LOW 출력
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2104      	movs	r1, #4
 8003ec2:	4805      	ldr	r0, [pc, #20]	@ (8003ed8 <FUN_GPO_Output+0x714>)
 8003ec4:	f008 fffc 	bl	800cec0 <HAL_GPIO_WritePin>
		break;
 8003ec8:	e000      	b.n	8003ecc <FUN_GPO_Output+0x708>

		default:

		break;
 8003eca:	bf00      	nop
	}
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40022000 	.word	0x40022000
 8003ed8:	40021000 	.word	0x40021000

08003edc <FUN_GPO_Gripper>:
/****************************************************************************/
/*	Overview	:	Gripper Output	Setting									*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_GPO_Gripper(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
	// 그립퍼
	FUN_GPO_Output(OUTPUT_PORT_NUM_37,	RS485.Gripper_Output_Int[0]^1);		// 투인양장치 : 근접스위치1
 8003ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f5c <FUN_GPO_Gripper+0x80>)
 8003ee2:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8003ee6:	f083 0301 	eor.w	r3, r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	4619      	mov	r1, r3
 8003eee:	2025      	movs	r0, #37	@ 0x25
 8003ef0:	f7ff fc68 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_38,	RS485.Gripper_Output_Int[1]^1);		// 투인양장치 : 근접스위치2
 8003ef4:	4b19      	ldr	r3, [pc, #100]	@ (8003f5c <FUN_GPO_Gripper+0x80>)
 8003ef6:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8003efa:	f083 0301 	eor.w	r3, r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	2026      	movs	r0, #38	@ 0x26
 8003f04:	f7ff fc5e 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_39,	RS485.Gripper_Output_Int[2]^1);		// 투인양장치 : 근접스위치3
 8003f08:	4b14      	ldr	r3, [pc, #80]	@ (8003f5c <FUN_GPO_Gripper+0x80>)
 8003f0a:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8003f0e:	f083 0301 	eor.w	r3, r3, #1
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	4619      	mov	r1, r3
 8003f16:	2027      	movs	r0, #39	@ 0x27
 8003f18:	f7ff fc54 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_40,	RS485.Gripper_Output_Int[3]^1);		// 투인양장치 : 근접스위치4
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f5c <FUN_GPO_Gripper+0x80>)
 8003f1e:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 8003f22:	f083 0301 	eor.w	r3, r3, #1
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	4619      	mov	r1, r3
 8003f2a:	2028      	movs	r0, #40	@ 0x28
 8003f2c:	f7ff fc4a 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_41,	RS485.Gripper_Output_Int[4]^1);		// 투인양장치 : 근접스위치5
 8003f30:	4b0a      	ldr	r3, [pc, #40]	@ (8003f5c <FUN_GPO_Gripper+0x80>)
 8003f32:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8003f36:	f083 0301 	eor.w	r3, r3, #1
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	2029      	movs	r0, #41	@ 0x29
 8003f40:	f7ff fc40 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_42,	RS485.Gripper_Output_Int[5]^1);		// 투인양장치 : 근접스위치6
 8003f44:	4b05      	ldr	r3, [pc, #20]	@ (8003f5c <FUN_GPO_Gripper+0x80>)
 8003f46:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8003f4a:	f083 0301 	eor.w	r3, r3, #1
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	4619      	mov	r1, r3
 8003f52:	202a      	movs	r0, #42	@ 0x2a
 8003f54:	f7ff fc36 	bl	80037c4 <FUN_GPO_Output>
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20000d90 	.word	0x20000d90

08003f60 <FUN_GPO_Oil>:
/****************************************************************************/
/*	Overview	:	Oil Output	Setting										*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_GPO_Oil(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
	// 저유기
	FUN_GPO_Output(OUTPUT_PORT_NUM_8,	RS485.Oil_Output_Int[0]^1);				// 동력공급장치 : 압력스위치(수냉식냉각기)
 8003f64:	4b14      	ldr	r3, [pc, #80]	@ (8003fb8 <FUN_GPO_Oil+0x58>)
 8003f66:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003f6a:	f083 0301 	eor.w	r3, r3, #1
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	4619      	mov	r1, r3
 8003f72:	2008      	movs	r0, #8
 8003f74:	f7ff fc26 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_1,	RS485.Oil_Output_Int[1]^1);				// 동력공급장치 : 레벨스위치1(저유기조립체)
 8003f78:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb8 <FUN_GPO_Oil+0x58>)
 8003f7a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8003f7e:	f083 0301 	eor.w	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	4619      	mov	r1, r3
 8003f86:	2001      	movs	r0, #1
 8003f88:	f7ff fc1c 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_2,	RS485.Oil_Output_Int[2]^1);				// 동력공급장치 : 레벨스위치2(저유기조립체)
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <FUN_GPO_Oil+0x58>)
 8003f8e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8003f92:	f083 0301 	eor.w	r3, r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	4619      	mov	r1, r3
 8003f9a:	2002      	movs	r0, #2
 8003f9c:	f7ff fc12 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_3,	RS485.Oil_Output_Int[3]^1);				// 동력공급장치 : 레벨스위치3(저유기조립체)
 8003fa0:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <FUN_GPO_Oil+0x58>)
 8003fa2:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8003fa6:	f083 0301 	eor.w	r3, r3, #1
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	4619      	mov	r1, r3
 8003fae:	2003      	movs	r0, #3
 8003fb0:	f7ff fc08 	bl	80037c4 <FUN_GPO_Output>
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000d90 	.word	0x20000d90

08003fbc <FUN_GPO_Cutter>:
/****************************************************************************/
/*	Overview	:	Cutter Output	Setting									*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_GPO_Cutter(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
	// 절단기
	FUN_GPO_Output(OUTPUT_PORT_NUM_10,	RS485.Cutter_Output_Int[0]^1);		// 동력공급장치 : 압력스위치(축압기 부족1)
 8003fc0:	4b19      	ldr	r3, [pc, #100]	@ (8004028 <FUN_GPO_Cutter+0x6c>)
 8003fc2:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8003fc6:	f083 0301 	eor.w	r3, r3, #1
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	4619      	mov	r1, r3
 8003fce:	200a      	movs	r0, #10
 8003fd0:	f7ff fbf8 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_11,	RS485.Cutter_Output_Int[1]^1);		// 동력공급장치 : 압력스위치(축압기 부족2)
 8003fd4:	4b14      	ldr	r3, [pc, #80]	@ (8004028 <FUN_GPO_Cutter+0x6c>)
 8003fd6:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8003fda:	f083 0301 	eor.w	r3, r3, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	200b      	movs	r0, #11
 8003fe4:	f7ff fbee 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_12,	RS485.Cutter_Output_Int[2]^1);		// 동력공급장치 : 압력스위치(축압기 충전완료)
 8003fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8004028 <FUN_GPO_Cutter+0x6c>)
 8003fea:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8003fee:	f083 0301 	eor.w	r3, r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	200c      	movs	r0, #12
 8003ff8:	f7ff fbe4 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_36,	RS485.Cutter_Output_Int[3]^1);		// 윈치조립체 : 칼날감지센서(주절단기)
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8004028 <FUN_GPO_Cutter+0x6c>)
 8003ffe:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8004002:	f083 0301 	eor.w	r3, r3, #1
 8004006:	b2db      	uxtb	r3, r3
 8004008:	4619      	mov	r1, r3
 800400a:	2024      	movs	r0, #36	@ 0x24
 800400c:	f7ff fbda 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_35,	RS485.Cutter_Output_Int[4]^1);		// 윈치조립체 : 칼날감지센서(보조절단기)
 8004010:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <FUN_GPO_Cutter+0x6c>)
 8004012:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004016:	f083 0301 	eor.w	r3, r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	4619      	mov	r1, r3
 800401e:	2023      	movs	r0, #35	@ 0x23
 8004020:	f7ff fbd0 	bl	80037c4 <FUN_GPO_Output>
//	FUN_GPO_Output(OUTPUT_PORT_NUM_,	RS485.Cutter_Output_Int[5]^1);			// SPARE
//	FUN_GPO_Output(OUTPUT_PORT_NUM_,	RS485.Cutter_Output_Int[6]^1);			// SPARE
//	FUN_GPO_Output(OUTPUT_PORT_NUM_,	RS485.Cutter_Output_Int[7]^1);			// SPARE
}
 8004024:	bf00      	nop
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000d90 	.word	0x20000d90

0800402c <FUN_GPO_Cleaner>:
/****************************************************************************/
/*	Overview	:	Cleaner Output	Setting									*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_GPO_Cleaner(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	// 세척기
	FUN_GPO_Output(OUTPUT_PORT_NUM_43,	RS485.Cleaner_Output_Int[0]^1);		// 투인양장치 : 압력스위치(세척기)
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <FUN_GPO_Cleaner+0x1c>)
 8004032:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8004036:	f083 0301 	eor.w	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	4619      	mov	r1, r3
 800403e:	202b      	movs	r0, #43	@ 0x2b
 8004040:	f7ff fbc0 	bl	80037c4 <FUN_GPO_Output>
//	FUN_GPO_Output(OUTPUT_PORT_NUM_40,	RS485.Cleaner_Output_Int[3]^1);
//	FUN_GPO_Output(OUTPUT_PORT_NUM_41,	RS485.Cleaner_Output_Int[4]^1);
//	FUN_GPO_Output(OUTPUT_PORT_NUM_42,	RS485.Cleaner_Output_Int[5]^1);
//	FUN_GPO_Output(OUTPUT_PORT_NUM_40,	RS485.Cleaner_Output_Int[6]^1);
//	FUN_GPO_Output(OUTPUT_PORT_NUM_41,	RS485.Cleaner_Output_Int[7]^1);
}
 8004044:	bf00      	nop
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000d90 	.word	0x20000d90

0800404c <FUN_GPO_Emergency>:
/****************************************************************************/
/*	Overview	:	Emergency Output	Setting								*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_GPO_Emergency(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
	// 비상정지스위치
	FUN_GPO_Output(OUTPUT_PORT_NUM_25,	RS485.Emergency_Output_Int[0]^1);	// 동력공급장치 : 비상정지스위치
 8004050:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <FUN_GPO_Emergency+0x30>)
 8004052:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8004056:	f083 0301 	eor.w	r3, r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	4619      	mov	r1, r3
 800405e:	2019      	movs	r0, #25
 8004060:	f7ff fbb0 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_4,	RS485.Emergency_Output_Int[1]^1);	// 윈치조립체 : 비상정지스위치
 8004064:	4b05      	ldr	r3, [pc, #20]	@ (800407c <FUN_GPO_Emergency+0x30>)
 8004066:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 800406a:	f083 0301 	eor.w	r3, r3, #1
 800406e:	b2db      	uxtb	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	2004      	movs	r0, #4
 8004074:	f7ff fba6 	bl	80037c4 <FUN_GPO_Output>
//	FUN_GPO_Output(OUTPUT_PORT_NUM_,	RS485.Emergency_Output_Int[3]^1);		// SPARE
//	FUN_GPO_Output(OUTPUT_PORT_NUM_,	RS485.Emergency_Output_Int[4]^1);		// SPARE
//	FUN_GPO_Output(OUTPUT_PORT_NUM_,	RS485.Emergency_Output_Int[5]^1);		// SPARE
//	FUN_GPO_Output(OUTPUT_PORT_NUM_,	RS485.Emergency_Output_Int[6]^1);		// SPARE
//	FUN_GPO_Output(OUTPUT_PORT_NUM_,	RS485.Emergency_Output_Int[7]^1);		// SPARE
}
 8004078:	bf00      	nop
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000d90 	.word	0x20000d90

08004080 <FUN_HILS_Init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_HILS_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
	Lws_HilsCtrl_240218_v_1_0_initialize();
 8004084:	f003 f9f2 	bl	800746c <Lws_HilsCtrl_240218_v_1_0_initialize>
}
 8004088:	bf00      	nop
 800408a:	bd80      	pop	{r7, pc}

0800408c <FUN_HILS_Routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_HILS_Routine(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
	FUN_HILS_Input_Routine();
 8004090:	f000 f806 	bl	80040a0 <FUN_HILS_Input_Routine>
	Lws_HilsCtrl_240218_v_1_0_step();
 8004094:	f003 f8b8 	bl	8007208 <Lws_HilsCtrl_240218_v_1_0_step>
	FUN_HILS_Output_Routine();
 8004098:	f000 f942 	bl	8004320 <FUN_HILS_Output_Routine>
}
 800409c:	bf00      	nop
 800409e:	bd80      	pop	{r7, pc}

080040a0 <FUN_HILS_Input_Routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_HILS_Input_Routine(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
	if(RS485.HILS_Start_Stop_Cmd == 1)
 80040a6:	4b9a      	ldr	r3, [pc, #616]	@ (8004310 <FUN_HILS_Input_Routine+0x270>)
 80040a8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d108      	bne.n	80040c2 <FUN_HILS_Input_Routine+0x22>
	{
		HILS.HILS_Input.HILS_Start_Flag = 1;
 80040b0:	4b98      	ldr	r3, [pc, #608]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

		HILS.HILS_Input.HILS_Stop_Flag = 0;
 80040b8:	4b96      	ldr	r3, [pc, #600]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
 80040c0:	e007      	b.n	80040d2 <FUN_HILS_Input_Routine+0x32>
	}
	else
	{
		HILS.HILS_Input.HILS_Stop_Flag = 1;
 80040c2:	4b94      	ldr	r3, [pc, #592]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

		HILS.HILS_Input.HILS_Start_Flag = 0;
 80040ca:	4b92      	ldr	r3, [pc, #584]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	}

	if(HILS.HILS_Input.HILS_Change_Flag == 1)
 80040d2:	4b90      	ldr	r3, [pc, #576]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80040d4:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d111      	bne.n	8004100 <FUN_HILS_Input_Routine+0x60>
	{
		HILS.HILS_Input.HILS_Change_Cnt++;
 80040dc:	4b8d      	ldr	r3, [pc, #564]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80040de:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80040e2:	3301      	adds	r3, #1
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80040e8:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

		if(HILS.HILS_Input.HILS_Change_Cnt >= 11)
 80040ec:	4b89      	ldr	r3, [pc, #548]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80040ee:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80040f2:	2b0a      	cmp	r3, #10
 80040f4:	d90c      	bls.n	8004110 <FUN_HILS_Input_Routine+0x70>
		{
			HILS.HILS_Input.HILS_Change_Flag = 0;
 80040f6:	4b87      	ldr	r3, [pc, #540]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 80040fe:	e007      	b.n	8004110 <FUN_HILS_Input_Routine+0x70>
		}
	}
	else
	{
		HILS.HILS_Input.HILS_Change_Flag = 0;
 8004100:	4b84      	ldr	r3, [pc, #528]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
		HILS.HILS_Input.HILS_Change_Cnt = 0;
 8004108:	4b82      	ldr	r3, [pc, #520]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	}

	HILS.HILS_Input.LWS_C_HILS_Cmd[0] = HILS.HILS_Input.HILS_Start_Flag;
 8004110:	4b80      	ldr	r3, [pc, #512]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004112:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8004116:	4b7f      	ldr	r3, [pc, #508]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004118:	701a      	strb	r2, [r3, #0]
	HILS.HILS_Input.LWS_C_HILS_Cmd[1] = HILS.HILS_Input.HILS_Stop_Flag;
 800411a:	4b7e      	ldr	r3, [pc, #504]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 800411c:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 8004120:	4b7c      	ldr	r3, [pc, #496]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004122:	705a      	strb	r2, [r3, #1]
	HILS.HILS_Input.LWS_C_HILS_Cmd[2] = HILS.HILS_Input.HILS_Change_Flag;
 8004124:	4b7b      	ldr	r3, [pc, #492]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004126:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 800412a:	4b7a      	ldr	r3, [pc, #488]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 800412c:	709a      	strb	r2, [r3, #2]
	HILS.HILS_Input.LWS_C_HILS_Cmd[3] = HILS.HILS_Input.HILS_Spare;
 800412e:	4b79      	ldr	r3, [pc, #484]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004130:	f893 2094 	ldrb.w	r2, [r3, #148]	@ 0x94
 8004134:	4b77      	ldr	r3, [pc, #476]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004136:	70da      	strb	r2, [r3, #3]

	HILS.HILS_Input.LWS_C_HILS_DI[0] = Control.Input_ch.Bit.In_ch1;						// 무부하밸브(윈치동력)
 8004138:	4b77      	ldr	r3, [pc, #476]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 800413a:	7c1b      	ldrb	r3, [r3, #16]
 800413c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	4b73      	ldr	r3, [pc, #460]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004146:	711a      	strb	r2, [r3, #4]
	HILS.HILS_Input.LWS_C_HILS_DI[1] = Control.Input_ch.Bit.In_ch2;						// 무부하밸브(투인양동력)
 8004148:	4b73      	ldr	r3, [pc, #460]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 800414a:	7c1b      	ldrb	r3, [r3, #16]
 800414c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	4b6f      	ldr	r3, [pc, #444]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004156:	715a      	strb	r2, [r3, #5]
	HILS.HILS_Input.LWS_C_HILS_DI[2] = Control.Input_ch.Bit.In_ch6;						// 차단밸브(윈치동력)
 8004158:	4b6f      	ldr	r3, [pc, #444]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 800415a:	7c1b      	ldrb	r3, [r3, #16]
 800415c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	4b6b      	ldr	r3, [pc, #428]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004166:	719a      	strb	r2, [r3, #6]
	HILS.HILS_Input.LWS_C_HILS_DI[3] = Control.Input_ch.Bit.In_ch7;						// 방향전환밸브(권선브레이크)
 8004168:	4b6b      	ldr	r3, [pc, #428]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 800416a:	7c5b      	ldrb	r3, [r3, #17]
 800416c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	4b67      	ldr	r3, [pc, #412]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004176:	71da      	strb	r2, [r3, #7]
	HILS.HILS_Input.LWS_C_HILS_DI[4] = Control.Input_ch.Bit.In_ch10;					// 방향전환밸브(주브레이크)
 8004178:	4b67      	ldr	r3, [pc, #412]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 800417a:	7c5b      	ldrb	r3, [r3, #17]
 800417c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	4b63      	ldr	r3, [pc, #396]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004186:	721a      	strb	r2, [r3, #8]
	HILS.HILS_Input.LWS_C_HILS_DI[5] = Control.Input_ch.Bit.In_ch8;						// 방향전환밸브(보조브레이크)
 8004188:	4b63      	ldr	r3, [pc, #396]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 800418a:	7c5b      	ldrb	r3, [r3, #17]
 800418c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	4b5f      	ldr	r3, [pc, #380]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004196:	725a      	strb	r2, [r3, #9]
	HILS.HILS_Input.LWS_C_HILS_DI[6] = FUN_RS485_Ctrl_hils_action_U1();					// HILS 시작
 8004198:	f005 fb54 	bl	8009844 <FUN_RS485_Ctrl_hils_action_U1>
 800419c:	4603      	mov	r3, r0
 800419e:	461a      	mov	r2, r3
 80041a0:	4b5c      	ldr	r3, [pc, #368]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80041a2:	729a      	strb	r2, [r3, #10]

	HILS.HILS_Input.LWS_C_HILS_AI[0] = Control.Float_Data.AI_ADC_In1_Ch2_Volt;		// 동력공급장치 비상구동: 비례제어밸브
 80041a4:	4b5c      	ldr	r3, [pc, #368]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80041aa:	60d3      	str	r3, [r2, #12]
	HILS.HILS_Input.LWS_C_HILS_AI[1] = Control.Float_Data.AI_ADC_In1_Ch1_Volt;		// 윈치조립체 드럼구동 : 비례제어밸브
 80041ac:	4b5a      	ldr	r3, [pc, #360]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	4a58      	ldr	r2, [pc, #352]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80041b2:	6113      	str	r3, [r2, #16]
	HILS.HILS_Input.LWS_C_HILS_AI[2] = Control.Float_Data.AI_ADC_In1_Ch3_Volt;		// 윈치조립체 권선구동 : 비례제어밸브
 80041b4:	4b58      	ldr	r3, [pc, #352]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 80041b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b8:	4a56      	ldr	r2, [pc, #344]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80041ba:	6153      	str	r3, [r2, #20]
//	HILS.HILS_Input.LWS_C_HILS_AI[3] = Control.Float_Data.AI_ADC_In2_Ch1_Volt;		// 투인양장치 메인실린더1 : 비례제어밸브
//	HILS.HILS_Input.LWS_C_HILS_AI[4] = Control.Float_Data.AI_ADC_In2_Ch2_Volt;		// 투인양장치 메인실린더2 : 비례제어밸브
//	HILS.HILS_Input.LWS_C_HILS_AI[5] = Control.Float_Data.AI_ADC_In2_Ch3_Volt;		// 투인양장치 보조실린더1 : 비례제어밸브
//	HILS.HILS_Input.LWS_C_HILS_AI[6] = Control.Float_Data.AI_ADC_In2_Ch4_Volt;		// 투인양장치 보조실린더2 : 비례제어밸브
	HILS.HILS_Input.LWS_C_HILS_AI[3] = Control.Float_Data.AI_ADC_In2_Ch3_Volt;		// 투인양장치 보조실린더1 : 비례제어밸브
 80041bc:	4b56      	ldr	r3, [pc, #344]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	4a54      	ldr	r2, [pc, #336]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80041c2:	6193      	str	r3, [r2, #24]
	HILS.HILS_Input.LWS_C_HILS_AI[4] = Control.Float_Data.AI_ADC_In2_Ch4_Volt;		// 투인양장치 보조실린더2 : 비례제어밸브
 80041c4:	4b54      	ldr	r3, [pc, #336]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 80041c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c8:	4a52      	ldr	r2, [pc, #328]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80041ca:	61d3      	str	r3, [r2, #28]
	HILS.HILS_Input.LWS_C_HILS_AI[5] = Control.Float_Data.AI_ADC_In2_Ch1_Volt;		// 투인양장치 메인실린더1 : 비례제어밸브
 80041cc:	4b52      	ldr	r3, [pc, #328]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	4a50      	ldr	r2, [pc, #320]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80041d2:	6213      	str	r3, [r2, #32]
	HILS.HILS_Input.LWS_C_HILS_AI[6] = Control.Float_Data.AI_ADC_In2_Ch2_Volt;		// 투인양장치 메인실린더2 : 비례제어밸브
 80041d4:	4b50      	ldr	r3, [pc, #320]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 80041d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d8:	4a4e      	ldr	r2, [pc, #312]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80041da:	6253      	str	r3, [r2, #36]	@ 0x24
	HILS.HILS_Input.LWS_C_HILS_AI[7] = Control.Float_Data.AO_Spare_01;					// Spare01
 80041dc:	4b4e      	ldr	r3, [pc, #312]	@ (8004318 <FUN_HILS_Input_Routine+0x278>)
 80041de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80041e2:	4a4c      	ldr	r2, [pc, #304]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80041e4:	6293      	str	r3, [r2, #40]	@ 0x28

	for(uint8_t i = 0; i < 20; i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	71fb      	strb	r3, [r7, #7]
 80041ea:	e010      	b.n	800420e <FUN_HILS_Input_Routine+0x16e>
	{
		HILS.HILS_Input.LWS_C_HILS_PARA[i] = RS485.LwsA_Parameter[i]; //LwsWtuA_PARA[u1t_i];
 80041ec:	79fa      	ldrb	r2, [r7, #7]
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	4947      	ldr	r1, [pc, #284]	@ (8004310 <FUN_HILS_Input_Routine+0x270>)
 80041f2:	f502 728b 	add.w	r2, r2, #278	@ 0x116
 80041f6:	0092      	lsls	r2, r2, #2
 80041f8:	440a      	add	r2, r1
 80041fa:	3204      	adds	r2, #4
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	4945      	ldr	r1, [pc, #276]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004200:	3310      	adds	r3, #16
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 20; i++)
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	3301      	adds	r3, #1
 800420c:	71fb      	strb	r3, [r7, #7]
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	2b13      	cmp	r3, #19
 8004212:	d9eb      	bls.n	80041ec <FUN_HILS_Input_Routine+0x14c>
	}

	for(uint8_t i = 0; i < 18; i++)
 8004214:	2300      	movs	r3, #0
 8004216:	71bb      	strb	r3, [r7, #6]
 8004218:	e00d      	b.n	8004236 <FUN_HILS_Input_Routine+0x196>
	{
		HILS.HILS_Input.LWS_C_HILS_OUTSET[i] = RS485.LwsA_HILS_Init_Value[i];
 800421a:	79ba      	ldrb	r2, [r7, #6]
 800421c:	79bb      	ldrb	r3, [r7, #6]
 800421e:	493c      	ldr	r1, [pc, #240]	@ (8004310 <FUN_HILS_Input_Routine+0x270>)
 8004220:	440a      	add	r2, r1
 8004222:	f892 14ac 	ldrb.w	r1, [r2, #1196]	@ 0x4ac
 8004226:	4a3b      	ldr	r2, [pc, #236]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004228:	4413      	add	r3, r2
 800422a:	460a      	mov	r2, r1
 800422c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	for(uint8_t i = 0; i < 18; i++)
 8004230:	79bb      	ldrb	r3, [r7, #6]
 8004232:	3301      	adds	r3, #1
 8004234:	71bb      	strb	r3, [r7, #6]
 8004236:	79bb      	ldrb	r3, [r7, #6]
 8004238:	2b11      	cmp	r3, #17
 800423a:	d9ee      	bls.n	800421a <FUN_HILS_Input_Routine+0x17a>
	 * [5] : 방향전환밸브(보조브레이크)
	 * [6] : Spare01
	 * [7] : Spare02
	 */

	for(uint8_t i = 0; i < 8; i++)
 800423c:	2300      	movs	r3, #0
 800423e:	717b      	strb	r3, [r7, #5]
 8004240:	e00b      	b.n	800425a <FUN_HILS_Input_Routine+0x1ba>
	{
		Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsDI[i] = HILS.HILS_Input.LWS_C_HILS_DI[i];
 8004242:	797b      	ldrb	r3, [r7, #5]
 8004244:	4a33      	ldr	r2, [pc, #204]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004246:	4413      	add	r3, r2
 8004248:	791a      	ldrb	r2, [r3, #4]
 800424a:	797b      	ldrb	r3, [r7, #5]
 800424c:	4611      	mov	r1, r2
 800424e:	4a33      	ldr	r2, [pc, #204]	@ (800431c <FUN_HILS_Input_Routine+0x27c>)
 8004250:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < 8; i++)
 8004254:	797b      	ldrb	r3, [r7, #5]
 8004256:	3301      	adds	r3, #1
 8004258:	717b      	strb	r3, [r7, #5]
 800425a:	797b      	ldrb	r3, [r7, #5]
 800425c:	2b07      	cmp	r3, #7
 800425e:	d9f0      	bls.n	8004242 <FUN_HILS_Input_Routine+0x1a2>
	 * 	[4] : 투인양장치 메인실린더2 : 비례제어밸브
	 * 	[5] : 투인양장치 보조실린더1 : 비례제어밸브
	 * 	[6] : 투인양장치 보조실린더2 : 비례제어밸브
	 * 	[7] : Spare01
	 */
	for(uint8_t i = 0; i < 8; i++)
 8004260:	2300      	movs	r3, #0
 8004262:	713b      	strb	r3, [r7, #4]
 8004264:	e00f      	b.n	8004286 <FUN_HILS_Input_Routine+0x1e6>
	{
		Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[i] = HILS.HILS_Input.LWS_C_HILS_AI[i];
 8004266:	793a      	ldrb	r2, [r7, #4]
 8004268:	793b      	ldrb	r3, [r7, #4]
 800426a:	492a      	ldr	r1, [pc, #168]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 800426c:	3202      	adds	r2, #2
 800426e:	0092      	lsls	r2, r2, #2
 8004270:	440a      	add	r2, r1
 8004272:	3204      	adds	r2, #4
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	4929      	ldr	r1, [pc, #164]	@ (800431c <FUN_HILS_Input_Routine+0x27c>)
 8004278:	3304      	adds	r3, #4
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 8004280:	793b      	ldrb	r3, [r7, #4]
 8004282:	3301      	adds	r3, #1
 8004284:	713b      	strb	r3, [r7, #4]
 8004286:	793b      	ldrb	r3, [r7, #4]
 8004288:	2b07      	cmp	r3, #7
 800428a:	d9ec      	bls.n	8004266 <FUN_HILS_Input_Routine+0x1c6>
	 * [0] : HILS 모드 동작 시작
	 * [1] : HILS 모드 동작 종료
	 * [2] : 동작조건 변경 - 변경이 있을때 Trig 형태
	 * [3] : 명령 Spare
	 */
	for(uint8_t i = 0; i < 4; i++)
 800428c:	2300      	movs	r3, #0
 800428e:	70fb      	strb	r3, [r7, #3]
 8004290:	e00b      	b.n	80042aa <FUN_HILS_Input_Routine+0x20a>
	{
		Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsCmd[i] = HILS.HILS_Input.LWS_C_HILS_Cmd[i];
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 8004296:	5cd2      	ldrb	r2, [r2, r3]
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	4611      	mov	r1, r2
 800429c:	4a1f      	ldr	r2, [pc, #124]	@ (800431c <FUN_HILS_Input_Routine+0x27c>)
 800429e:	3318      	adds	r3, #24
 80042a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < 4; i++)
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	3301      	adds	r3, #1
 80042a8:	70fb      	strb	r3, [r7, #3]
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d9f0      	bls.n	8004292 <FUN_HILS_Input_Routine+0x1f2>
	 * [14] : 비례제어밸브 에러(우측보조실린더) 출력 설정
	 * [15] : 비례제어밸브 에러(좌측보조실린더) 출력 설정
	 * [16] : 압력스위치(압력초과) 발생 출력 설정
	 * [17] : Spare
	 */
	for(uint8_t i = 0; i < 18; i++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	70bb      	strb	r3, [r7, #2]
 80042b4:	e00d      	b.n	80042d2 <FUN_HILS_Input_Routine+0x232>
	{
		Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[i] = HILS.HILS_Input.LWS_C_HILS_OUTSET[i];
 80042b6:	78bb      	ldrb	r3, [r7, #2]
 80042b8:	4a16      	ldr	r2, [pc, #88]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80042ba:	4413      	add	r3, r2
 80042bc:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80042c0:	78bb      	ldrb	r3, [r7, #2]
 80042c2:	4611      	mov	r1, r2
 80042c4:	4a15      	ldr	r2, [pc, #84]	@ (800431c <FUN_HILS_Input_Routine+0x27c>)
 80042c6:	331c      	adds	r3, #28
 80042c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < 18; i++)
 80042cc:	78bb      	ldrb	r3, [r7, #2]
 80042ce:	3301      	adds	r3, #1
 80042d0:	70bb      	strb	r3, [r7, #2]
 80042d2:	78bb      	ldrb	r3, [r7, #2]
 80042d4:	2b11      	cmp	r3, #17
 80042d6:	d9ee      	bls.n	80042b6 <FUN_HILS_Input_Routine+0x216>
	 * [16] : Spare03
	 * [17] : Spare04
	 * [18] : Spare05
	 * [19] : Spare06
	 */
	for(uint8_t i = 0; i < 20; i++)
 80042d8:	2300      	movs	r3, #0
 80042da:	707b      	strb	r3, [r7, #1]
 80042dc:	e00f      	b.n	80042fe <FUN_HILS_Input_Routine+0x25e>
	{
		Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[i] = HILS.HILS_Input.LWS_C_HILS_PARA[i];
 80042de:	787a      	ldrb	r2, [r7, #1]
 80042e0:	787b      	ldrb	r3, [r7, #1]
 80042e2:	490c      	ldr	r1, [pc, #48]	@ (8004314 <FUN_HILS_Input_Routine+0x274>)
 80042e4:	3210      	adds	r2, #16
 80042e6:	0092      	lsls	r2, r2, #2
 80042e8:	440a      	add	r2, r1
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	490b      	ldr	r1, [pc, #44]	@ (800431c <FUN_HILS_Input_Routine+0x27c>)
 80042ee:	3316      	adds	r3, #22
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	3304      	adds	r3, #4
 80042f6:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 20; i++)
 80042f8:	787b      	ldrb	r3, [r7, #1]
 80042fa:	3301      	adds	r3, #1
 80042fc:	707b      	strb	r3, [r7, #1]
 80042fe:	787b      	ldrb	r3, [r7, #1]
 8004300:	2b13      	cmp	r3, #19
 8004302:	d9ec      	bls.n	80042de <FUN_HILS_Input_Routine+0x23e>
	}
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000d90 	.word	0x20000d90
 8004314:	200006ac 	.word	0x200006ac
 8004318:	20000154 	.word	0x20000154
 800431c:	20000c08 	.word	0x20000c08

08004320 <FUN_HILS_Output_Routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_HILS_Output_Routine(void)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
	/*
	 *
	 */
	for(uint8_t i = 0; i < 19; i++)
 8004326:	2300      	movs	r3, #0
 8004328:	71fb      	strb	r3, [r7, #7]
 800432a:	e00d      	b.n	8004348 <FUN_HILS_Output_Routine+0x28>
	{
		HILS.HILS_Output.HILS_DO_Int[i] = Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[i];
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	4a58      	ldr	r2, [pc, #352]	@ (8004490 <FUN_HILS_Output_Routine+0x170>)
 8004330:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	b2d1      	uxtb	r1, r2
 8004338:	4a56      	ldr	r2, [pc, #344]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 800433a:	4413      	add	r3, r2
 800433c:	460a      	mov	r2, r1
 800433e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
	for(uint8_t i = 0; i < 19; i++)
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	3301      	adds	r3, #1
 8004346:	71fb      	strb	r3, [r7, #7]
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	2b12      	cmp	r3, #18
 800434c:	d9ee      	bls.n	800432c <FUN_HILS_Output_Routine+0xc>
	}

	for(uint8_t i = 0; i < 27; i++)
 800434e:	2300      	movs	r3, #0
 8004350:	71bb      	strb	r3, [r7, #6]
 8004352:	e00f      	b.n	8004374 <FUN_HILS_Output_Routine+0x54>
	{
		HILS.HILS_Output.HILS_AO_Float[i] = Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[i];
 8004354:	79ba      	ldrb	r2, [r7, #6]
 8004356:	79bb      	ldrb	r3, [r7, #6]
 8004358:	494d      	ldr	r1, [pc, #308]	@ (8004490 <FUN_HILS_Output_Routine+0x170>)
 800435a:	320a      	adds	r2, #10
 800435c:	0092      	lsls	r2, r2, #2
 800435e:	440a      	add	r2, r1
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	494c      	ldr	r1, [pc, #304]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 8004364:	332a      	adds	r3, #42	@ 0x2a
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	3304      	adds	r3, #4
 800436c:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 27; i++)
 800436e:	79bb      	ldrb	r3, [r7, #6]
 8004370:	3301      	adds	r3, #1
 8004372:	71bb      	strb	r3, [r7, #6]
 8004374:	79bb      	ldrb	r3, [r7, #6]
 8004376:	2b1a      	cmp	r3, #26
 8004378:	d9ec      	bls.n	8004354 <FUN_HILS_Output_Routine+0x34>
	}

	for(uint8_t i = 0; i < 15; i++)
 800437a:	2300      	movs	r3, #0
 800437c:	717b      	strb	r3, [r7, #5]
 800437e:	e00f      	b.n	80043a0 <FUN_HILS_Output_Routine+0x80>
	{
		HILS.HILS_Output.HILS_Monitoring[i] = Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[i];
 8004380:	797a      	ldrb	r2, [r7, #5]
 8004382:	797b      	ldrb	r3, [r7, #5]
 8004384:	4942      	ldr	r1, [pc, #264]	@ (8004490 <FUN_HILS_Output_Routine+0x170>)
 8004386:	3224      	adds	r2, #36	@ 0x24
 8004388:	0092      	lsls	r2, r2, #2
 800438a:	440a      	add	r2, r1
 800438c:	3204      	adds	r2, #4
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	4940      	ldr	r1, [pc, #256]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 8004392:	3346      	adds	r3, #70	@ 0x46
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 15; i++)
 800439a:	797b      	ldrb	r3, [r7, #5]
 800439c:	3301      	adds	r3, #1
 800439e:	717b      	strb	r3, [r7, #5]
 80043a0:	797b      	ldrb	r3, [r7, #5]
 80043a2:	2b0e      	cmp	r3, #14
 80043a4:	d9ec      	bls.n	8004380 <FUN_HILS_Output_Routine+0x60>
	}

	// 랠뷰 모니터링 변수 매칭
	Control.LWS_C_HILS[0] = HILS.HILS_Output.HILS_Monitoring[1];
 80043a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 80043a8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80043ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 80043ae:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
	Control.LWS_C_HILS[1] = HILS.HILS_Output.HILS_Monitoring[3];
 80043b2:	4b38      	ldr	r3, [pc, #224]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 80043b4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80043b8:	4a37      	ldr	r2, [pc, #220]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 80043ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
	Control.LWS_C_HILS[2] = HILS.HILS_Output.HILS_Monitoring[4];
 80043be:	4b35      	ldr	r3, [pc, #212]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 80043c0:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80043c4:	4a34      	ldr	r2, [pc, #208]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 80043c6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
	Control.LWS_C_HILS[3] = HILS.HILS_Output.HILS_Monitoring[5];
 80043ca:	4b32      	ldr	r3, [pc, #200]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 80043cc:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80043d0:	4a31      	ldr	r2, [pc, #196]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 80043d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	Control.LWS_C_HILS[4] = HILS.HILS_Output.HILS_Monitoring[6];
 80043d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 80043d8:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80043dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 80043de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
	Control.LWS_C_HILS[5] = HILS.HILS_Output.HILS_Monitoring[7];
 80043e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 80043e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80043e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 80043ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	Control.LWS_C_HILS[6] = HILS.HILS_Output.HILS_Monitoring[8];
 80043ee:	4b29      	ldr	r3, [pc, #164]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 80043f0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80043f4:	4a28      	ldr	r2, [pc, #160]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 80043f6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
	Control.LWS_C_HILS[7] = HILS.HILS_Output.HILS_Monitoring[9];
 80043fa:	4b26      	ldr	r3, [pc, #152]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 80043fc:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8004400:	4a25      	ldr	r2, [pc, #148]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 8004402:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
	Control.LWS_C_HILS[8] = HILS.HILS_Output.HILS_Monitoring[10];
 8004406:	4b23      	ldr	r3, [pc, #140]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 8004408:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800440c:	4a22      	ldr	r2, [pc, #136]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 800440e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
	Control.LWS_C_HILS[9] = HILS.HILS_Output.HILS_Monitoring[11];
 8004412:	4b20      	ldr	r3, [pc, #128]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 8004414:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8004418:	4a1f      	ldr	r2, [pc, #124]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 800441a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

	HILS.HILS_Output.HILS_Mode = Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMode;
 800441e:	4b1c      	ldr	r3, [pc, #112]	@ (8004490 <FUN_HILS_Output_Routine+0x170>)
 8004420:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8004424:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 8004426:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154

	Control.Mode.LWS_C_Mode &= 0xff00;
 800442a:	4b1b      	ldr	r3, [pc, #108]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004432:	b29a      	uxth	r2, r3
 8004434:	4b18      	ldr	r3, [pc, #96]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 8004436:	801a      	strh	r2, [r3, #0]
	Control.Mode.LWS_C_Mode |= HILS.HILS_Output.HILS_Mode & 0xff;
 8004438:	4b17      	ldr	r3, [pc, #92]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b21a      	sxth	r2, r3
 800443e:	4b15      	ldr	r3, [pc, #84]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 8004440:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
 8004444:	b21b      	sxth	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	b21b      	sxth	r3, r3
 800444a:	4313      	orrs	r3, r2
 800444c:	b21b      	sxth	r3, r3
 800444e:	b29a      	uxth	r2, r3
 8004450:	4b11      	ldr	r3, [pc, #68]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 8004452:	801a      	strh	r2, [r3, #0]

	HILS.HILS_Output.HILS_Status = Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsStatus;
 8004454:	4b0e      	ldr	r3, [pc, #56]	@ (8004490 <FUN_HILS_Output_Routine+0x170>)
 8004456:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800445a:	4b0e      	ldr	r3, [pc, #56]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 800445c:	f8a3 2156 	strh.w	r2, [r3, #342]	@ 0x156

	Control.Status_02.LWS_C_Status = HILS.HILS_Output.HILS_Status;
 8004460:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 8004462:	f8b3 3156 	ldrh.w	r3, [r3, #342]	@ 0x156
 8004466:	461a      	mov	r2, r3
 8004468:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <FUN_HILS_Output_Routine+0x178>)
 800446a:	609a      	str	r2, [r3, #8]

	HILS.HILS_Output.HILS_Error = Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsError;
 800446c:	4b08      	ldr	r3, [pc, #32]	@ (8004490 <FUN_HILS_Output_Routine+0x170>)
 800446e:	f8b3 20d4 	ldrh.w	r2, [r3, #212]	@ 0xd4
 8004472:	4b08      	ldr	r3, [pc, #32]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 8004474:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158

	HILS.HILS_Output.HILS_Alarm = Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAlarm;
 8004478:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <FUN_HILS_Output_Routine+0x170>)
 800447a:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	@ 0xd6
 800447e:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <FUN_HILS_Output_Routine+0x174>)
 8004480:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	20000cb4 	.word	0x20000cb4
 8004494:	200006ac 	.word	0x200006ac
 8004498:	20000154 	.word	0x20000154
 800449c:	00000000 	.word	0x00000000

080044a0 <rt_roundd_snf>:
/* Include model header file for global data */
#include "Lws_HilsCtrl_240218_v_1_0.h"
#include "Lws_HilsCtrl_240218_v_1_0_private.h"

real_T rt_roundd_snf(real_T u)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	ed87 0b00 	vstr	d0, [r7]
  real_T y;
  if (fabs(u) < 4.503599627370496E+15)
 80044aa:	ed97 7b00 	vldr	d7, [r7]
 80044ae:	eeb0 7bc7 	vabs.f64	d7, d7
 80044b2:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8004548 <rt_roundd_snf+0xa8>
 80044b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80044ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044be:	d534      	bpl.n	800452a <rt_roundd_snf+0x8a>
  {
    if (u >= 0.5)
 80044c0:	ed97 7b00 	vldr	d7, [r7]
 80044c4:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80044c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80044cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d0:	db0c      	blt.n	80044ec <rt_roundd_snf+0x4c>
    {
      y = floor(u + 0.5);
 80044d2:	ed97 7b00 	vldr	d7, [r7]
 80044d6:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80044da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80044de:	eeb0 0b47 	vmov.f64	d0, d7
 80044e2:	f00d fd21 	bl	8011f28 <floor>
 80044e6:	ed87 0b02 	vstr	d0, [r7, #8]
 80044ea:	e022      	b.n	8004532 <rt_roundd_snf+0x92>
    }
    else if (u > -0.5)
 80044ec:	ed97 7b00 	vldr	d7, [r7]
 80044f0:	eebe 6b00 	vmov.f64	d6, #224	@ 0xbf000000 -0.5
 80044f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80044f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fc:	dd08      	ble.n	8004510 <rt_roundd_snf+0x70>
    {
      y = u * 0.0;
 80044fe:	ed97 7b00 	vldr	d7, [r7]
 8004502:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8004550 <rt_roundd_snf+0xb0>
 8004506:	ee27 7b06 	vmul.f64	d7, d7, d6
 800450a:	ed87 7b02 	vstr	d7, [r7, #8]
 800450e:	e010      	b.n	8004532 <rt_roundd_snf+0x92>
    }
    else
    {
      y = ceil(u - 0.5);
 8004510:	ed97 7b00 	vldr	d7, [r7]
 8004514:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8004518:	ee37 7b46 	vsub.f64	d7, d7, d6
 800451c:	eeb0 0b47 	vmov.f64	d0, d7
 8004520:	f00d fc8e 	bl	8011e40 <ceil>
 8004524:	ed87 0b02 	vstr	d0, [r7, #8]
 8004528:	e003      	b.n	8004532 <rt_roundd_snf+0x92>
    }
  }
  else
  {
    y = u;
 800452a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800452e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  return y;
 8004532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004536:	ec43 2b17 	vmov	d7, r2, r3
}
 800453a:	eeb0 0b47 	vmov.f64	d0, d7
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	f3af 8000 	nop.w
 8004548:	00000000 	.word	0x00000000
 800454c:	43300000 	.word	0x43300000
	...

08004558 <Hils_Ctrl_Block_Init>:

/* System initialize for atomic system: 'Hils_Ctrl_Block' (':5129') */
void Hils_Ctrl_Block_Init(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  /* InitializeConditions for DiscreteIntegrator: 'Discrete-Time Integrator2' (':6364') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator2_PrevRes = 0;
 800455c:	4b26      	ldr	r3, [pc, #152]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2306 	strb.w	r2, [r3, #774]	@ 0x306
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator2_IC_LOAD = 1U;
 8004564:	4b24      	ldr	r3, [pc, #144]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2316 	strb.w	r2, [r3, #790]	@ 0x316

  /* InitializeConditions for DiscreteIntegrator: 'Discrete-Time Integrator1' (':6434') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevRes = 0;
 800456c:	4b22      	ldr	r3, [pc, #136]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2307 	strb.w	r2, [r3, #775]	@ 0x307
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LOAD = 1U;
 8004574:	4b20      	ldr	r3, [pc, #128]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2317 	strb.w	r2, [r3, #791]	@ 0x317

  /* InitializeConditions for DiscreteIntegrator: 'Discrete-Time Integrator' (':6780') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRese = 0;
 800457c:	4b1e      	ldr	r3, [pc, #120]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2308 	strb.w	r2, [r3, #776]	@ 0x308
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOADI = 1U;
 8004584:	4b1c      	ldr	r3, [pc, #112]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318

  /* InitializeConditions for DiscreteIntegrator: 'Discrete-Time Integrator1' (':6781') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevR_d = 0;
 800458c:	4b1a      	ldr	r3, [pc, #104]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2309 	strb.w	r2, [r3, #777]	@ 0x309
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LO_c = 1U;
 8004594:	4b18      	ldr	r3, [pc, #96]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2319 	strb.w	r2, [r3, #793]	@ 0x319

  /* InitializeConditions for DiscreteIntegrator: 'Discrete-Time Integrator' (':6690') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRe_b = 0;
 800459c:	4b16      	ldr	r3, [pc, #88]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOA_a = 1U;
 80045a4:	4b14      	ldr	r3, [pc, #80]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 231a 	strb.w	r2, [r3, #794]	@ 0x31a

  /* InitializeConditions for DiscreteIntegrator: 'Discrete-Time Integrator1' (':6691') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevR_g = 0;
 80045ac:	4b12      	ldr	r3, [pc, #72]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 230b 	strb.w	r2, [r3, #779]	@ 0x30b
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LO_p = 1U;
 80045b4:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 231b 	strb.w	r2, [r3, #795]	@ 0x31b

  /* InitializeConditions for DiscreteIntegrator: 'Discrete-Time Integrator' (':6433') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRe_n = 0;
 80045bc:	4b0e      	ldr	r3, [pc, #56]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 230c 	strb.w	r2, [r3, #780]	@ 0x30c
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOA_e = 1U;
 80045c4:	4b0c      	ldr	r3, [pc, #48]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

  /* InitializeConditions for DiscreteIntegrator: 'Discrete-Time Integrator1' (':6363') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevR_k = 0;
 80045cc:	4b0a      	ldr	r3, [pc, #40]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 230d 	strb.w	r2, [r3, #781]	@ 0x30d
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LO_n = 1U;
 80045d4:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

  /* InitializeConditions for DiscreteIntegrator: 'Discrete-Time Integrator' (':6362') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRe_p = 0;
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 230e 	strb.w	r2, [r3, #782]	@ 0x30e
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOA_n = 1U;
 80045e4:	4b04      	ldr	r3, [pc, #16]	@ (80045f8 <Hils_Ctrl_Block_Init+0xa0>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	200008e8 	.word	0x200008e8
 80045fc:	00000000 	.word	0x00000000

08004600 <Hils_Ctrl_Block>:

/* Output and update for atomic system: 'Hils_Ctrl_Block' (':5129') */
void Hils_Ctrl_Block(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b0ca      	sub	sp, #296	@ 0x128
 8004604:	af00      	add	r7, sp, #0
   *  DataStoreRead: 'Data Store Read3' (':6260')
   *  DataStoreRead: 'Data Store Read30' (':5987')
   *  DataStoreWrite: 'Data Store Write1' (':6002')
   *  DataTypeConversion: 'Data Type Conversion7' (':6001')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_Emg) == 0)
 8004606:	4bc2      	ldr	r3, [pc, #776]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004608:	f8b3 31b6 	ldrh.w	r3, [r3, #438]	@ 0x1b6
 800460c:	2b00      	cmp	r3, #0
 800460e:	d105      	bne.n	800461c <Hils_Ctrl_Block+0x1c>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.PValveError_EmgDrv =
      Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_EmgDrv;
 8004610:	4bbf      	ldr	r3, [pc, #764]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004612:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.PValveError_EmgDrv =
 8004616:	4abe      	ldr	r2, [pc, #760]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004618:	60d3      	str	r3, [r2, #12]
 800461a:	e002      	b.n	8004622 <Hils_Ctrl_Block+0x22>
  }
  else
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.PValveError_EmgDrv = 10.5F;
 800461c:	4bbc      	ldr	r3, [pc, #752]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 800461e:	4abd      	ldr	r2, [pc, #756]	@ (8004914 <Hils_Ctrl_Block+0x314>)
 8004620:	60da      	str	r2, [r3, #12]

  /* End of MultiPortSwitch: 'Multiport Switch' (':6261') */

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6389:2') */
  rtb_DiscreteTransferFcn = 5.5355024632436049E-7 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states;
 8004622:	4bbb      	ldr	r3, [pc, #748]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004624:	ed93 7b76 	vldr	d7, [r3, #472]	@ 0x1d8
  rtb_DiscreteTransferFcn = 5.5355024632436049E-7 *
 8004628:	ed9f 6b9b 	vldr	d6, [pc, #620]	@ 8004898 <Hils_Ctrl_Block+0x298>
 800462c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004630:	ed87 7b2a 	vstr	d7, [r7, #168]	@ 0xa8

  /* Logic: 'Logical Operator' (':6119') incorporates:
   *  DataStoreRead: 'Data Store Read2' (':6088')
   */
  rtb_LogicalOperator = (((int32_T)
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning) == 0);
 8004634:	4bb6      	ldr	r3, [pc, #728]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004636:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	@ 0x1a4
 800463a:	2b00      	cmp	r3, #0
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
  rtb_LogicalOperator = (((int32_T)
 8004644:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
   *  UnitConversion: 'Unit Conversion' (':6358:16')
   */
  /* Unit Conversion - from: deg to: rad
     Expression: output = (0.0174533*input) + (0) */
  rtb_UnitConversion_tmp = 0.017453292519943295 * ((real_T)
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Winch_InitAngle);
 8004648:	4bb1      	ldr	r3, [pc, #708]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 800464a:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
  rtb_UnitConversion_tmp = 0.017453292519943295 * ((real_T)
 800464e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004652:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 80048a0 <Hils_Ctrl_Block+0x2a0>
 8004656:	ee27 7b06 	vmul.f64	d7, d7, d6
 800465a:	ed87 7b26 	vstr	d7, [r7, #152]	@ 0x98

  /* DiscreteIntegrator: 'Discrete-Time Integrator2' (':6364') incorporates:
   *  UnitConversion: 'Unit Conversion' (':6357:16')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator2_IC_LOAD) !=
 800465e:	4bac      	ldr	r3, [pc, #688]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004660:	f893 3316 	ldrb.w	r3, [r3, #790]	@ 0x316
 8004664:	2b00      	cmp	r3, #0
 8004666:	d004      	beq.n	8004672 <Hils_Ctrl_Block+0x72>
      0)
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator2_DSTATE =
 8004668:	49a9      	ldr	r1, [pc, #676]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 800466a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800466e:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
      rtb_UnitConversion_tmp;
  }

  if (rtb_LogicalOperator ||
 8004672:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004676:	2b00      	cmp	r3, #0
 8004678:	d104      	bne.n	8004684 <Hils_Ctrl_Block+0x84>
      (Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator2_PrevRes != 0))
 800467a:	4ba5      	ldr	r3, [pc, #660]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 800467c:	f993 3306 	ldrsb.w	r3, [r3, #774]	@ 0x306
  if (rtb_LogicalOperator ||
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <Hils_Ctrl_Block+0x8e>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator2_DSTATE =
 8004684:	49a2      	ldr	r1, [pc, #648]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004686:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800468a:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
      rtb_UnitConversion_tmp;
  }

  /* DiscreteIntegrator: 'Discrete-Time Integrator2' (':6364') */
  rtb_UnitConversion =
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator2_DSTATE + (0.0025 *
 800468e:	4ba0      	ldr	r3, [pc, #640]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004690:	ed93 6b78 	vldr	d6, [r3, #480]	@ 0x1e0
 8004694:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 8004698:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 80048a8 <Hils_Ctrl_Block+0x2a8>
 800469c:	ee27 7b05 	vmul.f64	d7, d7, d5
  rtb_UnitConversion =
 80046a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046a4:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    rtb_DiscreteTransferFcn);

  /* UnitConversion: 'Unit Conversion' (':6091:16') */
  /* Unit Conversion - from: rad to: deg
     Expression: output = (57.2958*input) + (0) */
  rtb_UnitConversion_k = 57.295779513082323 * rtb_UnitConversion;
 80046a8:	ed97 7b24 	vldr	d7, [r7, #144]	@ 0x90
 80046ac:	ed9f 6b80 	vldr	d6, [pc, #512]	@ 80048b0 <Hils_Ctrl_Block+0x2b0>
 80046b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80046b4:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
   *  Rounding: 'Round' (':6502')
   *  Sum: 'Add' (':6499')
   *  Sum: 'Sum13' (':6518')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.WinchDrum_Angle = (real32_T)((real_T)
    ((-(rtb_UnitConversion_k - (360.0 * rt_roundd_snf(0.0027777777777777779 *
 80046b8:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 80046bc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 80048b8 <Hils_Ctrl_Block+0x2b8>
 80046c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80046c4:	eeb0 0b47 	vmov.f64	d0, d7
 80046c8:	f7ff feea 	bl	80044a0 <rt_roundd_snf>
 80046cc:	eeb0 7b40 	vmov.f64	d7, d0
 80046d0:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 80048c0 <Hils_Ctrl_Block+0x2c0>
 80046d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80046d8:	ed97 6b22 	vldr	d6, [r7, #136]	@ 0x88
 80046dc:	ee36 7b47 	vsub.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.WinchDrum_Angle = (real32_T)((real_T)
 80046e0:	ed9f 6b79 	vldr	d6, [pc, #484]	@ 80048c8 <Hils_Ctrl_Block+0x2c8>
 80046e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80046e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046ec:	4b88      	ldr	r3, [pc, #544]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 80046ee:	edc3 7a04 	vstr	s15, [r3, #16]
    rtb_UnitConversion_k)))) + 180.0));

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6457:2') */
  rtb_DiscreteTransferFcn_ps = 6.2451197296384117E-6 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g;
 80046f2:	4b87      	ldr	r3, [pc, #540]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 80046f4:	ed93 7b7a 	vldr	d7, [r3, #488]	@ 0x1e8
  rtb_DiscreteTransferFcn_ps = 6.2451197296384117E-6 *
 80046f8:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 80048d0 <Hils_Ctrl_Block+0x2d0>
 80046fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004700:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
   *  UnitConversion: 'Unit Conversion' (':6425:16')
   */
  /* Unit Conversion - from: deg to: rad
     Expression: output = (0.0174533*input) + (0) */
  rtb_Gain8 = 0.0015915494309189536 * (0.017453292519943295 * ((real_T)
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Align_InitAngle));
 8004704:	4b82      	ldr	r3, [pc, #520]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004706:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
  rtb_Gain8 = 0.0015915494309189536 * (0.017453292519943295 * ((real_T)
 800470a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800470e:	ed9f 6b64 	vldr	d6, [pc, #400]	@ 80048a0 <Hils_Ctrl_Block+0x2a0>
 8004712:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004716:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 80048d8 <Hils_Ctrl_Block+0x2d8>
 800471a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800471e:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

  /* DiscreteIntegrator: 'Discrete-Time Integrator1' (':6434') */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LOAD) !=
 8004722:	4b7b      	ldr	r3, [pc, #492]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004724:	f893 3317 	ldrb.w	r3, [r3, #791]	@ 0x317
 8004728:	2b00      	cmp	r3, #0
 800472a:	d004      	beq.n	8004736 <Hils_Ctrl_Block+0x136>
      0)
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTATE = rtb_Gain8;
 800472c:	4978      	ldr	r1, [pc, #480]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 800472e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8004732:	e9c1 237c 	strd	r2, r3, [r1, #496]	@ 0x1f0
  }

  if (rtb_LogicalOperator ||
 8004736:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <Hils_Ctrl_Block+0x148>
      (Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevRes != 0))
 800473e:	4b74      	ldr	r3, [pc, #464]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004740:	f993 3307 	ldrsb.w	r3, [r3, #775]	@ 0x307
  if (rtb_LogicalOperator ||
 8004744:	2b00      	cmp	r3, #0
 8004746:	d004      	beq.n	8004752 <Hils_Ctrl_Block+0x152>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTATE = rtb_Gain8;
 8004748:	4971      	ldr	r1, [pc, #452]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 800474a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800474e:	e9c1 237c 	strd	r2, r3, [r1, #496]	@ 0x1f0
  }

  /* DiscreteIntegrator: 'Discrete-Time Integrator1' (':6434') */
  Align_Load_Pos = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTATE +
 8004752:	4b6f      	ldr	r3, [pc, #444]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004754:	ed93 6b7c 	vldr	d6, [r3, #496]	@ 0x1f0
    (0.0025 * rtb_DiscreteTransferFcn_ps);
 8004758:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800475c:	ed9f 5b52 	vldr	d5, [pc, #328]	@ 80048a8 <Hils_Ctrl_Block+0x2a8>
 8004760:	ee27 7b05 	vmul.f64	d7, d7, d5
  Align_Load_Pos = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTATE +
 8004764:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004768:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
  /* UnitConversion: 'Unit Conversion' (':6098:16') incorporates:
   *  Gain: 'Gain10' (':6858')
   */
  /* Unit Conversion - from: rad to: deg
     Expression: output = (57.2958*input) + (0) */
  rtb_UnitConversion_a = 57.295779513082323 * (628.31853071795865 *
 800476c:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 8004770:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 80048e0 <Hils_Ctrl_Block+0x2e0>
 8004774:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004778:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 80048b0 <Hils_Ctrl_Block+0x2b0>
 800477c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004780:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68
   *  Rounding: 'Round' (':6509')
   *  Sum: 'Add' (':6506')
   *  Sum: 'Sum14' (':6523')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.Align_Angle = (real32_T)((real_T)
    ((rtb_UnitConversion_a - (360.0 * rt_roundd_snf(0.0027777777777777779 *
 8004784:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8004788:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 80048b8 <Hils_Ctrl_Block+0x2b8>
 800478c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004790:	eeb0 0b47 	vmov.f64	d0, d7
 8004794:	f7ff fe84 	bl	80044a0 <rt_roundd_snf>
 8004798:	eeb0 7b40 	vmov.f64	d7, d0
 800479c:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 80048c0 <Hils_Ctrl_Block+0x2c0>
 80047a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80047a4:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 80047a8:	ee36 7b47 	vsub.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.Align_Angle = (real32_T)((real_T)
 80047ac:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 80048c8 <Hils_Ctrl_Block+0x2c8>
 80047b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80047b8:	4b55      	ldr	r3, [pc, #340]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 80047ba:	edc3 7a05 	vstr	s15, [r3, #20]
   *  DataStoreRead: 'Data Store Read30' (':5987')
   *  DataStoreRead: 'Data Store Read4' (':6264')
   *  DataStoreWrite: 'Data Store Write1' (':6002')
   *  DataTypeConversion: 'Data Type Conversion1' (':5995')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_Algin) == 0)
 80047be:	4b54      	ldr	r3, [pc, #336]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 80047c0:	f8b3 31b4 	ldrh.w	r3, [r3, #436]	@ 0x1b4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <Hils_Ctrl_Block+0x1d4>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.PValveError_AlignDrv =
      Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_AlignDrv;
 80047c8:	4b51      	ldr	r3, [pc, #324]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 80047ca:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.PValveError_AlignDrv =
 80047ce:	4a50      	ldr	r2, [pc, #320]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 80047d0:	6193      	str	r3, [r2, #24]
 80047d2:	e002      	b.n	80047da <Hils_Ctrl_Block+0x1da>
  }
  else
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.PValveError_AlignDrv = 10.5F;
 80047d4:	4b4e      	ldr	r3, [pc, #312]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 80047d6:	4a4f      	ldr	r2, [pc, #316]	@ (8004914 <Hils_Ctrl_Block+0x314>)
 80047d8:	619a      	str	r2, [r3, #24]

  /* End of MultiPortSwitch: 'Multiport Switch1' (':6263') */

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6388:2') */
  rtb_DiscreteTransferFcn_o = 0.0021553252381704738 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_o;
 80047da:	4b4d      	ldr	r3, [pc, #308]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 80047dc:	ed93 7b7e 	vldr	d7, [r3, #504]	@ 0x1f8
  rtb_DiscreteTransferFcn_o = 0.0021553252381704738 *
 80047e0:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 80048e8 <Hils_Ctrl_Block+0x2e8>
 80047e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80047e8:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
   *  UnitConversion: 'Unit Conversion' (':6511:4')
   */
  /* Unit Conversion - from: rad/s to: rpm
     Expression: output = (9.5493*input) + (0) */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.DrumMotorA_Velocity = (real32_T)((real_T)(
    -(9.5492965855137211 * rtb_DiscreteTransferFcn_o)));
 80047ec:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80047f0:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 80048f0 <Hils_Ctrl_Block+0x2f0>
 80047f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80047f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.DrumMotorA_Velocity = (real32_T)((real_T)(
 80047fc:	eef1 7a67 	vneg.f32	s15, s15
 8004800:	4b43      	ldr	r3, [pc, #268]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004802:	edc3 7a07 	vstr	s15, [r3, #28]

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6387:2') */
  rtb_DiscreteTransferFcn_b = 0.0021553252381704738 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_a;
 8004806:	4b42      	ldr	r3, [pc, #264]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004808:	ed93 7b80 	vldr	d7, [r3, #512]	@ 0x200
  rtb_DiscreteTransferFcn_b = 0.0021553252381704738 *
 800480c:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 80048e8 <Hils_Ctrl_Block+0x2e8>
 8004810:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004814:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
   *  UnitConversion: 'Unit Conversion' (':6512:4')
   */
  /* Unit Conversion - from: rad/s to: rpm
     Expression: output = (9.5493*input) + (0) */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.DrumMotorB_Velocity = (real32_T)((real_T)(
    -(9.5492965855137211 * rtb_DiscreteTransferFcn_b)));
 8004818:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800481c:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 80048f0 <Hils_Ctrl_Block+0x2f0>
 8004820:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004824:	eef7 7bc7 	vcvt.f32.f64	s15, d7
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.DrumMotorB_Velocity = (real32_T)((real_T)(
 8004828:	eef1 7a67 	vneg.f32	s15, s15
 800482c:	4b38      	ldr	r3, [pc, #224]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 800482e:	edc3 7a08 	vstr	s15, [r3, #32]

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6456:2') */
  rtb_DiscreteTransferFcn_f = 9.740537288764208E-8 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_i;
 8004832:	4b37      	ldr	r3, [pc, #220]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004834:	ed93 7b82 	vldr	d7, [r3, #520]	@ 0x208
  rtb_DiscreteTransferFcn_f = 9.740537288764208E-8 *
 8004838:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 80048f8 <Hils_Ctrl_Block+0x2f8>
 800483c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004840:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
   *  UnitConversion: 'Unit Conversion' (':6513:4')
   */
  /* Unit Conversion - from: rad/s to: rpm
     Expression: output = (9.5493*input) + (0) */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.AlignMotor_Velocity = (real32_T)((real_T)
    (9.5492965855137211 * (628.31853071795865 * rtb_DiscreteTransferFcn_f)));
 8004844:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8004848:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 80048e0 <Hils_Ctrl_Block+0x2e0>
 800484c:	ee27 7b06 	vmul.f64	d7, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.AlignMotor_Velocity = (real32_T)((real_T)
 8004850:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 80048f0 <Hils_Ctrl_Block+0x2f0>
 8004854:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004858:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800485c:	4b2c      	ldr	r3, [pc, #176]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 800485e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6411:2') */
  rtb_Gain2_m = 0.0046174624876194822 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g1;
 8004862:	4b2b      	ldr	r3, [pc, #172]	@ (8004910 <Hils_Ctrl_Block+0x310>)
 8004864:	ed93 7b84 	vldr	d7, [r3, #528]	@ 0x210
  rtb_Gain2_m = 0.0046174624876194822 *
 8004868:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8004900 <Hils_Ctrl_Block+0x300>
 800486c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004870:	ed87 7b44 	vstr	d7, [r7, #272]	@ 0x110

  /* Saturate: 'Prssure_Limit' (':6408') */
  if (rtb_Gain2_m > 350.0)
 8004874:	ed97 7b44 	vldr	d7, [r7, #272]	@ 0x110
 8004878:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8004908 <Hils_Ctrl_Block+0x308>
 800487c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004884:	dd48      	ble.n	8004918 <Hils_Ctrl_Block+0x318>
  {
    rtb_Gain2_m = 350.0;
 8004886:	a320      	add	r3, pc, #128	@ (adr r3, 8004908 <Hils_Ctrl_Block+0x308>)
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
 8004890:	e050      	b.n	8004934 <Hils_Ctrl_Block+0x334>
 8004892:	bf00      	nop
 8004894:	f3af 8000 	nop.w
 8004898:	dd6278b8 	.word	0xdd6278b8
 800489c:	3ea292f5 	.word	0x3ea292f5
 80048a0:	a2529d39 	.word	0xa2529d39
 80048a4:	3f91df46 	.word	0x3f91df46
 80048a8:	47ae147b 	.word	0x47ae147b
 80048ac:	3f647ae1 	.word	0x3f647ae1
 80048b0:	1a63c1f8 	.word	0x1a63c1f8
 80048b4:	404ca5dc 	.word	0x404ca5dc
 80048b8:	16c16c17 	.word	0x16c16c17
 80048bc:	3f66c16c 	.word	0x3f66c16c
 80048c0:	00000000 	.word	0x00000000
 80048c4:	40768000 	.word	0x40768000
 80048c8:	00000000 	.word	0x00000000
 80048cc:	40668000 	.word	0x40668000
 80048d0:	709d227e 	.word	0x709d227e
 80048d4:	3eda31a5 	.word	0x3eda31a5
 80048d8:	305e714c 	.word	0x305e714c
 80048dc:	3f5a1371 	.word	0x3f5a1371
 80048e0:	59d5433b 	.word	0x59d5433b
 80048e4:	4083a28c 	.word	0x4083a28c
 80048e8:	6d203d8b 	.word	0x6d203d8b
 80048ec:	3f61a80b 	.word	0x3f61a80b
 80048f0:	66ed2bfb 	.word	0x66ed2bfb
 80048f4:	4023193d 	.word	0x4023193d
 80048f8:	710a694a 	.word	0x710a694a
 80048fc:	3e7a25a5 	.word	0x3e7a25a5
 8004900:	a5ff5058 	.word	0xa5ff5058
 8004904:	3f72e9c2 	.word	0x3f72e9c2
 8004908:	00000000 	.word	0x00000000
 800490c:	4075e000 	.word	0x4075e000
 8004910:	200008e8 	.word	0x200008e8
 8004914:	41280000 	.word	0x41280000
  }
  else
  {
    if (rtb_Gain2_m < -350.0)
 8004918:	ed97 7b44 	vldr	d7, [r7, #272]	@ 0x110
 800491c:	ed9f 6bb0 	vldr	d6, [pc, #704]	@ 8004be0 <Hils_Ctrl_Block+0x5e0>
 8004920:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004928:	d504      	bpl.n	8004934 <Hils_Ctrl_Block+0x334>
    {
      rtb_Gain2_m = -350.0;
 800492a:	a3ad      	add	r3, pc, #692	@ (adr r3, 8004be0 <Hils_Ctrl_Block+0x5e0>)
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
  /* Sum: 'Sum9' (':6282') incorporates:
   *  DataTypeConversion: 'Data Type Conversion34' (':6281')
   *  Gain: 'Gain6' (':6548')
   *  Gain: 'Gain7' (':6855')
   */
  rtb_MultiportSwitch13 = (100.0 * (100.0 * rtb_Gain2_m)) + ((real_T)
 8004934:	ed97 7b44 	vldr	d7, [r7, #272]	@ 0x110
 8004938:	ed9f 6bab 	vldr	d6, [pc, #684]	@ 8004be8 <Hils_Ctrl_Block+0x5e8>
 800493c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004940:	ed9f 6ba9 	vldr	d6, [pc, #676]	@ 8004be8 <Hils_Ctrl_Block+0x5e8>
 8004944:	ee27 6b06 	vmul.f64	d6, d7, d6
    Lws_HilsCtrl_240218_v_1_0_B.Pressure_WinchPwBase);
 8004948:	4bc1      	ldr	r3, [pc, #772]	@ (8004c50 <Hils_Ctrl_Block+0x650>)
 800494a:	edd3 7a00 	vldr	s15, [r3]
  rtb_MultiportSwitch13 = (100.0 * (100.0 * rtb_Gain2_m)) + ((real_T)
 800494e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004952:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004956:	ed87 7b3c 	vstr	d7, [r7, #240]	@ 0xf0

  /* Saturate: 'Sensor_Prssure_Limit' (':6105') */
  if (rtb_MultiportSwitch13 > 400.0)
 800495a:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 800495e:	ed9f 6ba4 	vldr	d6, [pc, #656]	@ 8004bf0 <Hils_Ctrl_Block+0x5f0>
 8004962:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496a:	dd05      	ble.n	8004978 <Hils_Ctrl_Block+0x378>
  {
    rtb_MultiportSwitch13 = 400.0;
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	4bb8      	ldr	r3, [pc, #736]	@ (8004c54 <Hils_Ctrl_Block+0x654>)
 8004972:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
 8004976:	e00d      	b.n	8004994 <Hils_Ctrl_Block+0x394>
  }
  else
  {
    if (rtb_MultiportSwitch13 < -400.0)
 8004978:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 800497c:	ed9f 6b9e 	vldr	d6, [pc, #632]	@ 8004bf8 <Hils_Ctrl_Block+0x5f8>
 8004980:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004988:	d504      	bpl.n	8004994 <Hils_Ctrl_Block+0x394>
    {
      rtb_MultiportSwitch13 = -400.0;
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	4bb2      	ldr	r3, [pc, #712]	@ (8004c58 <Hils_Ctrl_Block+0x658>)
 8004990:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
   *  DataStoreWrite: 'Data Store Write1' (':6002')
   *  Gain: 'Gain3' (':6107')
   *  Sum: 'Sum' (':6111')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.Pressure_WinchPw = (real32_T)((real_T)
    ((0.04 * fabs(rtb_MultiportSwitch13)) + 4.0));
 8004994:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8004998:	eeb0 7bc7 	vabs.f64	d7, d7
 800499c:	ed9f 6b98 	vldr	d6, [pc, #608]	@ 8004c00 <Hils_Ctrl_Block+0x600>
 80049a0:	ee27 7b06 	vmul.f64	d7, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.Pressure_WinchPw = (real32_T)((real_T)
 80049a4:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 80049a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80049ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80049b0:	4baa      	ldr	r3, [pc, #680]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 80049b2:	edc3 7a00 	vstr	s15, [r3]

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5851:2') */
  rtb_Prssure_Limit_mc = 0.0097527769320981 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_id;
 80049b6:	4ba9      	ldr	r3, [pc, #676]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 80049b8:	ed93 7b86 	vldr	d7, [r3, #536]	@ 0x218
  rtb_Prssure_Limit_mc = 0.0097527769320981 *
 80049bc:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 8004c08 <Hils_Ctrl_Block+0x608>
 80049c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80049c4:	ed87 7b34 	vstr	d7, [r7, #208]	@ 0xd0

  /* Saturate: 'Prssure_Limit' (':5846') */
  if (rtb_Prssure_Limit_mc > 350.0)
 80049c8:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 80049cc:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8004c10 <Hils_Ctrl_Block+0x610>
 80049d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80049d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d8:	dd05      	ble.n	80049e6 <Hils_Ctrl_Block+0x3e6>
  {
    rtb_Prssure_Limit_mc = 350.0;
 80049da:	a38d      	add	r3, pc, #564	@ (adr r3, 8004c10 <Hils_Ctrl_Block+0x610>)
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
 80049e4:	e00d      	b.n	8004a02 <Hils_Ctrl_Block+0x402>
  }
  else
  {
    if (rtb_Prssure_Limit_mc < -350.0)
 80049e6:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 80049ea:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8004be0 <Hils_Ctrl_Block+0x5e0>
 80049ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80049f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f6:	d504      	bpl.n	8004a02 <Hils_Ctrl_Block+0x402>
    {
      rtb_Prssure_Limit_mc = -350.0;
 80049f8:	a379      	add	r3, pc, #484	@ (adr r3, 8004be0 <Hils_Ctrl_Block+0x5e0>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
  }

  /* End of Saturate: 'Prssure_Limit' (':5846') */

  /* Gain: 'Gain2' (':6550') */
  rtb_MultiportSwitch13 = 35000.0 * rtb_Prssure_Limit_mc;
 8004a02:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 8004a06:	ed9f 6b84 	vldr	d6, [pc, #528]	@ 8004c18 <Hils_Ctrl_Block+0x618>
 8004a0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a0e:	ed87 7b3c 	vstr	d7, [r7, #240]	@ 0xf0

  /* Saturate: 'Sensor_Prssure_Limit1' (':6202') */
  if (rtb_MultiportSwitch13 > 400.0)
 8004a12:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8004a16:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8004bf0 <Hils_Ctrl_Block+0x5f0>
 8004a1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a22:	dd05      	ble.n	8004a30 <Hils_Ctrl_Block+0x430>
  {
    rtb_MultiportSwitch13 = 400.0;
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	4b8a      	ldr	r3, [pc, #552]	@ (8004c54 <Hils_Ctrl_Block+0x654>)
 8004a2a:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
 8004a2e:	e00d      	b.n	8004a4c <Hils_Ctrl_Block+0x44c>
  }
  else
  {
    if (rtb_MultiportSwitch13 < -400.0)
 8004a30:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8004a34:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 8004bf8 <Hils_Ctrl_Block+0x5f8>
 8004a38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a40:	d504      	bpl.n	8004a4c <Hils_Ctrl_Block+0x44c>
    {
      rtb_MultiportSwitch13 = -400.0;
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	4b84      	ldr	r3, [pc, #528]	@ (8004c58 <Hils_Ctrl_Block+0x658>)
 8004a48:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
   *  DataStoreWrite: 'Data Store Write2' (':6035')
   *  Gain: 'Gain4' (':6201')
   *  Sum: 'Sum1' (':6203')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_ExpPressure = (real32_T)((real_T)
    ((0.04 * fabs(rtb_MultiportSwitch13)) + 4.0));
 8004a4c:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8004a50:	eeb0 7bc7 	vabs.f64	d7, d7
 8004a54:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8004c00 <Hils_Ctrl_Block+0x600>
 8004a58:	ee27 7b06 	vmul.f64	d7, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_ExpPressure = (real32_T)((real_T)
 8004a5c:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8004a60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004a68:	4b7c      	ldr	r3, [pc, #496]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004a6a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6809:2') */
  rtb_DiscreteTransferFcn_i = 1.2490239459276823E-6 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_e;
 8004a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004a70:	ed93 7b88 	vldr	d7, [r3, #544]	@ 0x220
  rtb_DiscreteTransferFcn_i = 1.2490239459276823E-6 *
 8004a74:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8004c20 <Hils_Ctrl_Block+0x620>
 8004a78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a7c:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
  /* Gain: 'Gain10' (':6791') incorporates:
   *  DataStoreRead: 'Data Store Read1' (':6085')
   *  DataTypeConversion: 'Data Type Conversion30' (':6170')
   */
  rtb_Gain10 = 0.001 * ((real_T)
                        Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainCy01_InitPos);
 8004a80:	4b76      	ldr	r3, [pc, #472]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004a82:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
  rtb_Gain10 = 0.001 * ((real_T)
 8004a86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a8a:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8004c28 <Hils_Ctrl_Block+0x628>
 8004a8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a92:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

  /* DiscreteIntegrator: 'Discrete-Time Integrator' (':6780') */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOADI) !=
 8004a96:	4b71      	ldr	r3, [pc, #452]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004a98:	f893 3318 	ldrb.w	r3, [r3, #792]	@ 0x318
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <Hils_Ctrl_Block+0x4aa>
      0)
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE = rtb_Gain10;
 8004aa0:	496e      	ldr	r1, [pc, #440]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004aa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004aa6:	e9c1 238a 	strd	r2, r3, [r1, #552]	@ 0x228
  }

  if (rtb_LogicalOperator ||
 8004aaa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d104      	bne.n	8004abc <Hils_Ctrl_Block+0x4bc>
      (Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRese != 0))
 8004ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004ab4:	f993 3308 	ldrsb.w	r3, [r3, #776]	@ 0x308
  if (rtb_LogicalOperator ||
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <Hils_Ctrl_Block+0x4c6>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE = rtb_Gain10;
 8004abc:	4967      	ldr	r1, [pc, #412]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004abe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ac2:	e9c1 238a 	strd	r2, r3, [r1, #552]	@ 0x228
  }

  /* DiscreteIntegrator: 'Discrete-Time Integrator' (':6780') */
  rtb_Gain10 = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE +
 8004ac6:	4b65      	ldr	r3, [pc, #404]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004ac8:	ed93 6b8a 	vldr	d6, [r3, #552]	@ 0x228
    (0.0025 * rtb_DiscreteTransferFcn_i);
 8004acc:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8004ad0:	ed9f 5b57 	vldr	d5, [pc, #348]	@ 8004c30 <Hils_Ctrl_Block+0x630>
 8004ad4:	ee27 7b05 	vmul.f64	d7, d7, d5
  rtb_Gain10 = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE +
 8004ad8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004adc:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

  /* Gain: 'Gain5' (':6208') */
  rtb_mm_nv = 1000.0 * rtb_Gain10;
 8004ae0:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8004ae4:	ed9f 6b54 	vldr	d6, [pc, #336]	@ 8004c38 <Hils_Ctrl_Block+0x638>
 8004ae8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004aec:	ed87 7b2c 	vstr	d7, [r7, #176]	@ 0xb0

  /* Saturate: 'Sensor_Dis_Range' (':6207') */
  if (rtb_mm_nv > 800.0)
 8004af0:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8004af4:	ed9f 6b52 	vldr	d6, [pc, #328]	@ 8004c40 <Hils_Ctrl_Block+0x640>
 8004af8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	dd05      	ble.n	8004b0e <Hils_Ctrl_Block+0x50e>
  {
    rtb_mm_nv = 800.0;
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	4b56      	ldr	r3, [pc, #344]	@ (8004c60 <Hils_Ctrl_Block+0x660>)
 8004b08:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
 8004b0c:	e00c      	b.n	8004b28 <Hils_Ctrl_Block+0x528>
  }
  else
  {
    if (rtb_mm_nv < 0.0)
 8004b0e:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8004b12:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1a:	d505      	bpl.n	8004b28 <Hils_Ctrl_Block+0x528>
    {
      rtb_mm_nv = 0.0;
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
   *  Constant: 'Constant6' (':6212')
   *  DataStoreWrite: 'Data Store Write2' (':6035')
   *  Gain: 'Gain6' (':6209')
   *  Sum: 'Sum2' (':6211')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_LVDT = (real32_T)((real_T)((0.02 *
 8004b28:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8004b2c:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 8004c48 <Hils_Ctrl_Block+0x648>
 8004b30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004b34:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8004b38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b40:	4b46      	ldr	r3, [pc, #280]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004b42:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
   *  DataStoreRead: 'Data Store Read30' (':5987')
   *  DataStoreRead: 'Data Store Read5' (':6268')
   *  DataStoreWrite: 'Data Store Write2' (':6035')
   *  DataTypeConversion: 'Data Type Conversion2' (':5996')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_MC01) == 0)
 8004b46:	4b45      	ldr	r3, [pc, #276]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004b48:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	@ 0x1b8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d105      	bne.n	8004b5c <Hils_Ctrl_Block+0x55c>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_PValveError =
      Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_MainCy01Drv;
 8004b50:	4b42      	ldr	r3, [pc, #264]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004b52:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_PValveError =
 8004b56:	4a41      	ldr	r2, [pc, #260]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004b58:	6393      	str	r3, [r2, #56]	@ 0x38
 8004b5a:	e002      	b.n	8004b62 <Hils_Ctrl_Block+0x562>
  }
  else
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_PValveError = 10.5F;
 8004b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004b5e:	4a41      	ldr	r2, [pc, #260]	@ (8004c64 <Hils_Ctrl_Block+0x664>)
 8004b60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* End of MultiPortSwitch: 'Multiport Switch2' (':6266') */

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5909:2') */
  rtb_Prssure_Limit = 0.0097527769320981 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_d;
 8004b62:	4b3e      	ldr	r3, [pc, #248]	@ (8004c5c <Hils_Ctrl_Block+0x65c>)
 8004b64:	ed93 7b8c 	vldr	d7, [r3, #560]	@ 0x230
  rtb_Prssure_Limit = 0.0097527769320981 *
 8004b68:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8004c08 <Hils_Ctrl_Block+0x608>
 8004b6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004b70:	ed87 7b3a 	vstr	d7, [r7, #232]	@ 0xe8

  /* Saturate: 'Prssure_Limit' (':5904') */
  if (rtb_Prssure_Limit > 350.0)
 8004b74:	ed97 7b3a 	vldr	d7, [r7, #232]	@ 0xe8
 8004b78:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8004c10 <Hils_Ctrl_Block+0x610>
 8004b7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b84:	dd05      	ble.n	8004b92 <Hils_Ctrl_Block+0x592>
  {
    rtb_Prssure_Limit = 350.0;
 8004b86:	a322      	add	r3, pc, #136	@ (adr r3, 8004c10 <Hils_Ctrl_Block+0x610>)
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
 8004b90:	e00d      	b.n	8004bae <Hils_Ctrl_Block+0x5ae>
  }
  else
  {
    if (rtb_Prssure_Limit < -350.0)
 8004b92:	ed97 7b3a 	vldr	d7, [r7, #232]	@ 0xe8
 8004b96:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8004be0 <Hils_Ctrl_Block+0x5e0>
 8004b9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba2:	d504      	bpl.n	8004bae <Hils_Ctrl_Block+0x5ae>
    {
      rtb_Prssure_Limit = -350.0;
 8004ba4:	a30e      	add	r3, pc, #56	@ (adr r3, 8004be0 <Hils_Ctrl_Block+0x5e0>)
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
  }

  /* End of Saturate: 'Prssure_Limit' (':5904') */

  /* Gain: 'Gain2' (':6551') */
  rtb_MultiportSwitch13 = 35000.0 * rtb_Prssure_Limit;
 8004bae:	ed97 7b3a 	vldr	d7, [r7, #232]	@ 0xe8
 8004bb2:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8004c18 <Hils_Ctrl_Block+0x618>
 8004bb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004bba:	ed87 7b3c 	vstr	d7, [r7, #240]	@ 0xf0

  /* Saturate: 'Sensor_Prssure_Limit2' (':6216') */
  if (rtb_MultiportSwitch13 > 400.0)
 8004bbe:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8004bc2:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8004bf0 <Hils_Ctrl_Block+0x5f0>
 8004bc6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bce:	dd4b      	ble.n	8004c68 <Hils_Ctrl_Block+0x668>
  {
    rtb_MultiportSwitch13 = 400.0;
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8004c54 <Hils_Ctrl_Block+0x654>)
 8004bd6:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
 8004bda:	e053      	b.n	8004c84 <Hils_Ctrl_Block+0x684>
 8004bdc:	f3af 8000 	nop.w
 8004be0:	00000000 	.word	0x00000000
 8004be4:	c075e000 	.word	0xc075e000
 8004be8:	00000000 	.word	0x00000000
 8004bec:	40590000 	.word	0x40590000
 8004bf0:	00000000 	.word	0x00000000
 8004bf4:	40790000 	.word	0x40790000
 8004bf8:	00000000 	.word	0x00000000
 8004bfc:	c0790000 	.word	0xc0790000
 8004c00:	47ae147b 	.word	0x47ae147b
 8004c04:	3fa47ae1 	.word	0x3fa47ae1
 8004c08:	8fbf9449 	.word	0x8fbf9449
 8004c0c:	3f83f943 	.word	0x3f83f943
 8004c10:	00000000 	.word	0x00000000
 8004c14:	4075e000 	.word	0x4075e000
 8004c18:	00000000 	.word	0x00000000
 8004c1c:	40e11700 	.word	0x40e11700
 8004c20:	5a174ecb 	.word	0x5a174ecb
 8004c24:	3eb4f484 	.word	0x3eb4f484
 8004c28:	d2f1a9fc 	.word	0xd2f1a9fc
 8004c2c:	3f50624d 	.word	0x3f50624d
 8004c30:	47ae147b 	.word	0x47ae147b
 8004c34:	3f647ae1 	.word	0x3f647ae1
 8004c38:	00000000 	.word	0x00000000
 8004c3c:	408f4000 	.word	0x408f4000
 8004c40:	00000000 	.word	0x00000000
 8004c44:	40890000 	.word	0x40890000
 8004c48:	47ae147b 	.word	0x47ae147b
 8004c4c:	3f947ae1 	.word	0x3f947ae1
 8004c50:	20000808 	.word	0x20000808
 8004c54:	40790000 	.word	0x40790000
 8004c58:	c0790000 	.word	0xc0790000
 8004c5c:	200008e8 	.word	0x200008e8
 8004c60:	40890000 	.word	0x40890000
 8004c64:	41280000 	.word	0x41280000
  }
  else
  {
    if (rtb_MultiportSwitch13 < -400.0)
 8004c68:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8004c6c:	ed9f 6bac 	vldr	d6, [pc, #688]	@ 8004f20 <Hils_Ctrl_Block+0x920>
 8004c70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c78:	d504      	bpl.n	8004c84 <Hils_Ctrl_Block+0x684>
    {
      rtb_MultiportSwitch13 = -400.0;
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	4bc2      	ldr	r3, [pc, #776]	@ (8004f88 <Hils_Ctrl_Block+0x988>)
 8004c80:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
   *  DataStoreWrite: 'Data Store Write2' (':6035')
   *  Gain: 'Gain7' (':6215')
   *  Sum: 'Sum3' (':6217')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_ExpPressure = (real32_T)((real_T)
    ((0.04 * fabs(rtb_MultiportSwitch13)) + 4.0));
 8004c84:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8004c88:	eeb0 7bc7 	vabs.f64	d7, d7
 8004c8c:	ed9f 6ba6 	vldr	d6, [pc, #664]	@ 8004f28 <Hils_Ctrl_Block+0x928>
 8004c90:	ee27 7b06 	vmul.f64	d7, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_ExpPressure = (real32_T)((real_T)
 8004c94:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8004c98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004ca0:	4bba      	ldr	r3, [pc, #744]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004ca2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6810:2') */
  rtb_DiscreteTransferFcn_g = 1.2490239459276823E-6 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_k;
 8004ca6:	4bb9      	ldr	r3, [pc, #740]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004ca8:	ed93 7b8e 	vldr	d7, [r3, #568]	@ 0x238
  rtb_DiscreteTransferFcn_g = 1.2490239459276823E-6 *
 8004cac:	ed9f 6ba0 	vldr	d6, [pc, #640]	@ 8004f30 <Hils_Ctrl_Block+0x930>
 8004cb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004cb4:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  /* Gain: 'Gain11' (':6792') incorporates:
   *  DataStoreRead: 'Data Store Read1' (':6085')
   *  DataTypeConversion: 'Data Type Conversion31' (':6172')
   */
  rtb_Gain11 = 0.001 * ((real_T)
                        Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainCy02_InitPos);
 8004cb8:	4bb4      	ldr	r3, [pc, #720]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004cba:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
  rtb_Gain11 = 0.001 * ((real_T)
 8004cbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cc2:	ed9f 6b9d 	vldr	d6, [pc, #628]	@ 8004f38 <Hils_Ctrl_Block+0x938>
 8004cc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004cca:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30

  /* DiscreteIntegrator: 'Discrete-Time Integrator1' (':6781') */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LO_c) !=
 8004cce:	4baf      	ldr	r3, [pc, #700]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004cd0:	f893 3319 	ldrb.w	r3, [r3, #793]	@ 0x319
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <Hils_Ctrl_Block+0x6e2>
      0)
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_e = rtb_Gain11;
 8004cd8:	49ac      	ldr	r1, [pc, #688]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004cda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004cde:	e9c1 2390 	strd	r2, r3, [r1, #576]	@ 0x240
  }

  if (rtb_LogicalOperator ||
 8004ce2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d104      	bne.n	8004cf4 <Hils_Ctrl_Block+0x6f4>
      (Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevR_d != 0))
 8004cea:	4ba8      	ldr	r3, [pc, #672]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004cec:	f993 3309 	ldrsb.w	r3, [r3, #777]	@ 0x309
  if (rtb_LogicalOperator ||
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <Hils_Ctrl_Block+0x6fe>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_e = rtb_Gain11;
 8004cf4:	49a5      	ldr	r1, [pc, #660]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004cf6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004cfa:	e9c1 2390 	strd	r2, r3, [r1, #576]	@ 0x240
  }

  /* DiscreteIntegrator: 'Discrete-Time Integrator1' (':6781') */
  rtb_Gain11 = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_e +
 8004cfe:	4ba3      	ldr	r3, [pc, #652]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004d00:	ed93 6b90 	vldr	d6, [r3, #576]	@ 0x240
    (0.0025 * rtb_DiscreteTransferFcn_g);
 8004d04:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8004d08:	ed9f 5b8d 	vldr	d5, [pc, #564]	@ 8004f40 <Hils_Ctrl_Block+0x940>
 8004d0c:	ee27 7b05 	vmul.f64	d7, d7, d5
  rtb_Gain11 = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_e +
 8004d10:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d14:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30

  /* Gain: 'Gain8' (':6221') */
  rtb_mm = 1000.0 * rtb_Gain11;
 8004d18:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8004d1c:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8004f48 <Hils_Ctrl_Block+0x948>
 8004d20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d24:	ed87 7b32 	vstr	d7, [r7, #200]	@ 0xc8

  /* Saturate: 'Sensor_Dis_Range1' (':6223') */
  if (rtb_mm > 800.0)
 8004d28:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 8004d2c:	ed9f 6b88 	vldr	d6, [pc, #544]	@ 8004f50 <Hils_Ctrl_Block+0x950>
 8004d30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	dd05      	ble.n	8004d46 <Hils_Ctrl_Block+0x746>
  {
    rtb_mm = 800.0;
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	4b94      	ldr	r3, [pc, #592]	@ (8004f90 <Hils_Ctrl_Block+0x990>)
 8004d40:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
 8004d44:	e00c      	b.n	8004d60 <Hils_Ctrl_Block+0x760>
  }
  else
  {
    if (rtb_mm < 0.0)
 8004d46:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 8004d4a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d52:	d505      	bpl.n	8004d60 <Hils_Ctrl_Block+0x760>
    {
      rtb_mm = 0.0;
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
   *  Constant: 'Constant8' (':6220')
   *  DataStoreWrite: 'Data Store Write2' (':6035')
   *  Gain: 'Gain9' (':6222')
   *  Sum: 'Sum4' (':6224')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_LVDT = (real32_T)((real_T)((0.02 *
 8004d60:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 8004d64:	ed9f 6b7c 	vldr	d6, [pc, #496]	@ 8004f58 <Hils_Ctrl_Block+0x958>
 8004d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d6c:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8004d70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004d78:	4b84      	ldr	r3, [pc, #528]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004d7a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
   *  DataStoreRead: 'Data Store Read30' (':5987')
   *  DataStoreRead: 'Data Store Read6' (':6270')
   *  DataStoreWrite: 'Data Store Write2' (':6035')
   *  DataTypeConversion: 'Data Type Conversion3' (':5997')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_MC02) == 0)
 8004d7e:	4b83      	ldr	r3, [pc, #524]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004d80:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	@ 0x1ba
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d105      	bne.n	8004d94 <Hils_Ctrl_Block+0x794>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_PValveError =
      Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_MainCy02Drv;
 8004d88:	4b80      	ldr	r3, [pc, #512]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004d8a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_PValveError =
 8004d8e:	4a7f      	ldr	r2, [pc, #508]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004d90:	6493      	str	r3, [r2, #72]	@ 0x48
 8004d92:	e002      	b.n	8004d9a <Hils_Ctrl_Block+0x79a>
  }
  else
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_PValveError = 10.5F;
 8004d94:	4b7d      	ldr	r3, [pc, #500]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004d96:	4a7f      	ldr	r2, [pc, #508]	@ (8004f94 <Hils_Ctrl_Block+0x994>)
 8004d98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* End of MultiPortSwitch: 'Multiport Switch3' (':6271') */

  /* DataStoreWrite: 'Data Store Write2' (':6035') */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_ConPressure =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_ExpPressure;
 8004d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_ConPressure =
 8004d9e:	4a7b      	ldr	r2, [pc, #492]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004da0:	6313      	str	r3, [r2, #48]	@ 0x30
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_ConPressure =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_ExpPressure;
 8004da2:	4b7a      	ldr	r3, [pc, #488]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_ConPressure =
 8004da6:	4a79      	ldr	r2, [pc, #484]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004da8:	6413      	str	r3, [r2, #64]	@ 0x40

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5875:2') */
  rtb_Prssure_Limit_a = 0.0097527769320981 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_n;
 8004daa:	4b78      	ldr	r3, [pc, #480]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004dac:	ed93 7b92 	vldr	d7, [r3, #584]	@ 0x248
  rtb_Prssure_Limit_a = 0.0097527769320981 *
 8004db0:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8004f60 <Hils_Ctrl_Block+0x960>
 8004db4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004db8:	ed87 7b38 	vstr	d7, [r7, #224]	@ 0xe0

  /* Saturate: 'Prssure_Limit' (':5871') */
  if (rtb_Prssure_Limit_a > 350.0)
 8004dbc:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8004dc0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8004f68 <Hils_Ctrl_Block+0x968>
 8004dc4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dcc:	dd05      	ble.n	8004dda <Hils_Ctrl_Block+0x7da>
  {
    rtb_Prssure_Limit_a = 350.0;
 8004dce:	a366      	add	r3, pc, #408	@ (adr r3, 8004f68 <Hils_Ctrl_Block+0x968>)
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
 8004dd8:	e00d      	b.n	8004df6 <Hils_Ctrl_Block+0x7f6>
  }
  else
  {
    if (rtb_Prssure_Limit_a < -350.0)
 8004dda:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8004dde:	ed9f 6b64 	vldr	d6, [pc, #400]	@ 8004f70 <Hils_Ctrl_Block+0x970>
 8004de2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dea:	d504      	bpl.n	8004df6 <Hils_Ctrl_Block+0x7f6>
    {
      rtb_Prssure_Limit_a = -350.0;
 8004dec:	a360      	add	r3, pc, #384	@ (adr r3, 8004f70 <Hils_Ctrl_Block+0x970>)
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
  }

  /* End of Saturate: 'Prssure_Limit' (':5871') */

  /* Gain: 'Gain2' (':6552') */
  rtb_MultiportSwitch13 = 35000.0 * rtb_Prssure_Limit_a;
 8004df6:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8004dfa:	ed9f 6b5f 	vldr	d6, [pc, #380]	@ 8004f78 <Hils_Ctrl_Block+0x978>
 8004dfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e02:	ed87 7b3c 	vstr	d7, [r7, #240]	@ 0xf0

  /* Saturate: 'Sensor_Prssure_Limit3' (':6242') */
  if (rtb_MultiportSwitch13 > 400.0)
 8004e06:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8004e0a:	ed9f 6b5d 	vldr	d6, [pc, #372]	@ 8004f80 <Hils_Ctrl_Block+0x980>
 8004e0e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e16:	dd05      	ble.n	8004e24 <Hils_Ctrl_Block+0x824>
  {
    rtb_MultiportSwitch13 = 400.0;
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	4b5e      	ldr	r3, [pc, #376]	@ (8004f98 <Hils_Ctrl_Block+0x998>)
 8004e1e:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
 8004e22:	e00d      	b.n	8004e40 <Hils_Ctrl_Block+0x840>
  }
  else
  {
    if (rtb_MultiportSwitch13 < -400.0)
 8004e24:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8004e28:	ed9f 6b3d 	vldr	d6, [pc, #244]	@ 8004f20 <Hils_Ctrl_Block+0x920>
 8004e2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e34:	d504      	bpl.n	8004e40 <Hils_Ctrl_Block+0x840>
    {
      rtb_MultiportSwitch13 = -400.0;
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	4b53      	ldr	r3, [pc, #332]	@ (8004f88 <Hils_Ctrl_Block+0x988>)
 8004e3c:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
   *  DataStoreWrite: 'Data Store Write3' (':6053')
   *  Gain: 'Gain10' (':6234')
   *  Sum: 'Sum5' (':6244')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_ExpPressure = (real32_T)((real_T)
    ((0.04 * fabs(rtb_MultiportSwitch13)) + 4.0));
 8004e40:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8004e44:	eeb0 7bc7 	vabs.f64	d7, d7
 8004e48:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8004f28 <Hils_Ctrl_Block+0x928>
 8004e4c:	ee27 7b06 	vmul.f64	d7, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_ExpPressure = (real32_T)((real_T)
 8004e50:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8004e54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004e5e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6719:2') */
  rtb_DiscreteTransferFcn_l = 1.2490239459276823E-6 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_ip;
 8004e62:	4b4a      	ldr	r3, [pc, #296]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004e64:	ed93 7b94 	vldr	d7, [r3, #592]	@ 0x250
  rtb_DiscreteTransferFcn_l = 1.2490239459276823E-6 *
 8004e68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004e6c:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8004f30 <Hils_Ctrl_Block+0x930>
 8004e70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e74:	ed83 7b00 	vstr	d7, [r3]
  /* Gain: 'Gain10' (':6701') incorporates:
   *  DataStoreRead: 'Data Store Read1' (':6085')
   *  DataTypeConversion: 'Data Type Conversion32' (':6174')
   */
  rtb_Gain10_b = 0.001 * ((real_T)
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubCy01_InitPos);
 8004e78:	4b44      	ldr	r3, [pc, #272]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004e7a:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
  rtb_Gain10_b = 0.001 * ((real_T)
 8004e7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004e86:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8004f38 <Hils_Ctrl_Block+0x938>
 8004e8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e8e:	ed03 7b02 	vstr	d7, [r3, #-8]

  /* DiscreteIntegrator: 'Discrete-Time Integrator' (':6690') */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOA_a) !=
 8004e92:	4b3e      	ldr	r3, [pc, #248]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004e94:	f893 331a 	ldrb.w	r3, [r3, #794]	@ 0x31a
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d006      	beq.n	8004eaa <Hils_Ctrl_Block+0x8aa>
      0)
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_c = rtb_Gain10_b;
 8004e9c:	493b      	ldr	r1, [pc, #236]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004e9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ea6:	e9c1 2396 	strd	r2, r3, [r1, #600]	@ 0x258
  }

  if (rtb_LogicalOperator ||
 8004eaa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <Hils_Ctrl_Block+0x8bc>
      (Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRe_b != 0))
 8004eb2:	4b36      	ldr	r3, [pc, #216]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004eb4:	f993 330a 	ldrsb.w	r3, [r3, #778]	@ 0x30a
  if (rtb_LogicalOperator ||
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d006      	beq.n	8004eca <Hils_Ctrl_Block+0x8ca>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_c = rtb_Gain10_b;
 8004ebc:	4933      	ldr	r1, [pc, #204]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004ebe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ec2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ec6:	e9c1 2396 	strd	r2, r3, [r1, #600]	@ 0x258
  }

  /* DiscreteIntegrator: 'Discrete-Time Integrator' (':6690') */
  rtb_Gain10_b = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_c +
 8004eca:	4b30      	ldr	r3, [pc, #192]	@ (8004f8c <Hils_Ctrl_Block+0x98c>)
 8004ecc:	ed93 6b96 	vldr	d6, [r3, #600]	@ 0x258
    (0.0025 * rtb_DiscreteTransferFcn_l);
 8004ed0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ed4:	ed93 7b00 	vldr	d7, [r3]
 8004ed8:	ed9f 5b19 	vldr	d5, [pc, #100]	@ 8004f40 <Hils_Ctrl_Block+0x940>
 8004edc:	ee27 7b05 	vmul.f64	d7, d7, d5
  rtb_Gain10_b = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_c +
 8004ee0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ee4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ee8:	ed03 7b02 	vstr	d7, [r3, #-8]

  /* Gain: 'Gain11' (':6235') */
  rtb_mm_e = 1000.0 * rtb_Gain10_b;
 8004eec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ef0:	ed13 7b02 	vldr	d7, [r3, #-8]
 8004ef4:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8004f48 <Hils_Ctrl_Block+0x948>
 8004ef8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004efc:	ed87 7b30 	vstr	d7, [r7, #192]	@ 0xc0

  /* Saturate: 'Sensor_Dis_Range2' (':6240') */
  if (rtb_mm_e > 400.0)
 8004f00:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8004f04:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8004f80 <Hils_Ctrl_Block+0x980>
 8004f08:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f10:	dd44      	ble.n	8004f9c <Hils_Ctrl_Block+0x99c>
  {
    rtb_mm_e = 400.0;
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	4b20      	ldr	r3, [pc, #128]	@ (8004f98 <Hils_Ctrl_Block+0x998>)
 8004f18:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
 8004f1c:	e04b      	b.n	8004fb6 <Hils_Ctrl_Block+0x9b6>
 8004f1e:	bf00      	nop
 8004f20:	00000000 	.word	0x00000000
 8004f24:	c0790000 	.word	0xc0790000
 8004f28:	47ae147b 	.word	0x47ae147b
 8004f2c:	3fa47ae1 	.word	0x3fa47ae1
 8004f30:	5a174ecb 	.word	0x5a174ecb
 8004f34:	3eb4f484 	.word	0x3eb4f484
 8004f38:	d2f1a9fc 	.word	0xd2f1a9fc
 8004f3c:	3f50624d 	.word	0x3f50624d
 8004f40:	47ae147b 	.word	0x47ae147b
 8004f44:	3f647ae1 	.word	0x3f647ae1
 8004f48:	00000000 	.word	0x00000000
 8004f4c:	408f4000 	.word	0x408f4000
 8004f50:	00000000 	.word	0x00000000
 8004f54:	40890000 	.word	0x40890000
 8004f58:	47ae147b 	.word	0x47ae147b
 8004f5c:	3f947ae1 	.word	0x3f947ae1
 8004f60:	8fbf9449 	.word	0x8fbf9449
 8004f64:	3f83f943 	.word	0x3f83f943
 8004f68:	00000000 	.word	0x00000000
 8004f6c:	4075e000 	.word	0x4075e000
 8004f70:	00000000 	.word	0x00000000
 8004f74:	c075e000 	.word	0xc075e000
 8004f78:	00000000 	.word	0x00000000
 8004f7c:	40e11700 	.word	0x40e11700
 8004f80:	00000000 	.word	0x00000000
 8004f84:	40790000 	.word	0x40790000
 8004f88:	c0790000 	.word	0xc0790000
 8004f8c:	200008e8 	.word	0x200008e8
 8004f90:	40890000 	.word	0x40890000
 8004f94:	41280000 	.word	0x41280000
 8004f98:	40790000 	.word	0x40790000
  }
  else
  {
    if (rtb_mm_e < 0.0)
 8004f9c:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8004fa0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa8:	d505      	bpl.n	8004fb6 <Hils_Ctrl_Block+0x9b6>
    {
      rtb_mm_e = 0.0;
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
   *  Constant: 'Constant13' (':6231')
   *  DataStoreWrite: 'Data Store Write3' (':6053')
   *  Gain: 'Gain12' (':6236')
   *  Sum: 'Sum6' (':6245')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_LVDT = (real32_T)((real_T)((0.04 *
 8004fb6:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8004fba:	ed9f 6bb3 	vldr	d6, [pc, #716]	@ 8005288 <Hils_Ctrl_Block+0xc88>
 8004fbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004fc2:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8004fc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004fca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004fce:	4bc6      	ldr	r3, [pc, #792]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 8004fd0:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
   *  DataStoreRead: 'Data Store Read30' (':5987')
   *  DataStoreRead: 'Data Store Read7' (':6273')
   *  DataStoreWrite: 'Data Store Write3' (':6053')
   *  DataTypeConversion: 'Data Type Conversion4' (':5998')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_SC01) == 0)
 8004fd4:	4bc4      	ldr	r3, [pc, #784]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 8004fd6:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	@ 0x1bc
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d105      	bne.n	8004fea <Hils_Ctrl_Block+0x9ea>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_PValveError =
      Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_SubCy01Drv;
 8004fde:	4bc2      	ldr	r3, [pc, #776]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 8004fe0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_PValveError =
 8004fe4:	4ac0      	ldr	r2, [pc, #768]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 8004fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fe8:	e002      	b.n	8004ff0 <Hils_Ctrl_Block+0x9f0>
  }
  else
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_PValveError = 10.5F;
 8004fea:	4bbf      	ldr	r3, [pc, #764]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 8004fec:	4abf      	ldr	r2, [pc, #764]	@ (80052ec <Hils_Ctrl_Block+0xcec>)
 8004fee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* End of MultiPortSwitch: 'Multiport Switch4' (':6274') */

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5933:2') */
  rtb_Prssure_Limit_l = 0.0097527769320981 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_m;
 8004ff0:	4bbd      	ldr	r3, [pc, #756]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 8004ff2:	ed93 7b98 	vldr	d7, [r3, #608]	@ 0x260
  rtb_Prssure_Limit_l = 0.0097527769320981 *
 8004ff6:	ed9f 6ba6 	vldr	d6, [pc, #664]	@ 8005290 <Hils_Ctrl_Block+0xc90>
 8004ffa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ffe:	ed87 7b36 	vstr	d7, [r7, #216]	@ 0xd8

  /* Saturate: 'Prssure_Limit' (':5929') */
  if (rtb_Prssure_Limit_l > 350.0)
 8005002:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 8005006:	ed9f 6ba4 	vldr	d6, [pc, #656]	@ 8005298 <Hils_Ctrl_Block+0xc98>
 800500a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800500e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005012:	dd05      	ble.n	8005020 <Hils_Ctrl_Block+0xa20>
  {
    rtb_Prssure_Limit_l = 350.0;
 8005014:	a3a0      	add	r3, pc, #640	@ (adr r3, 8005298 <Hils_Ctrl_Block+0xc98>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
 800501e:	e00d      	b.n	800503c <Hils_Ctrl_Block+0xa3c>
  }
  else
  {
    if (rtb_Prssure_Limit_l < -350.0)
 8005020:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 8005024:	ed9f 6b9e 	vldr	d6, [pc, #632]	@ 80052a0 <Hils_Ctrl_Block+0xca0>
 8005028:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800502c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005030:	d504      	bpl.n	800503c <Hils_Ctrl_Block+0xa3c>
    {
      rtb_Prssure_Limit_l = -350.0;
 8005032:	a39b      	add	r3, pc, #620	@ (adr r3, 80052a0 <Hils_Ctrl_Block+0xca0>)
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  }

  /* End of Saturate: 'Prssure_Limit' (':5929') */

  /* Gain: 'Gain2' (':6553') */
  rtb_MultiportSwitch13 = 35000.0 * rtb_Prssure_Limit_l;
 800503c:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 8005040:	ed9f 6b99 	vldr	d6, [pc, #612]	@ 80052a8 <Hils_Ctrl_Block+0xca8>
 8005044:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005048:	ed87 7b3c 	vstr	d7, [r7, #240]	@ 0xf0

  /* Saturate: 'Sensor_Prssure_Limit4' (':6243') */
  if (rtb_MultiportSwitch13 > 400.0)
 800504c:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8005050:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80052b0 <Hils_Ctrl_Block+0xcb0>
 8005054:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505c:	dd05      	ble.n	800506a <Hils_Ctrl_Block+0xa6a>
  {
    rtb_MultiportSwitch13 = 400.0;
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	4ba3      	ldr	r3, [pc, #652]	@ (80052f0 <Hils_Ctrl_Block+0xcf0>)
 8005064:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
 8005068:	e00d      	b.n	8005086 <Hils_Ctrl_Block+0xa86>
  }
  else
  {
    if (rtb_MultiportSwitch13 < -400.0)
 800506a:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 800506e:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 80052b8 <Hils_Ctrl_Block+0xcb8>
 8005072:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507a:	d504      	bpl.n	8005086 <Hils_Ctrl_Block+0xa86>
    {
      rtb_MultiportSwitch13 = -400.0;
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	4b9c      	ldr	r3, [pc, #624]	@ (80052f4 <Hils_Ctrl_Block+0xcf4>)
 8005082:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
   *  DataStoreWrite: 'Data Store Write3' (':6053')
   *  Gain: 'Gain13' (':6237')
   *  Sum: 'Sum7' (':6246')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_ExpPressure = (real32_T)((real_T)
    ((0.04 * fabs(rtb_MultiportSwitch13)) + 4.0));
 8005086:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 800508a:	eeb0 7bc7 	vabs.f64	d7, d7
 800508e:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8005288 <Hils_Ctrl_Block+0xc88>
 8005092:	ee27 7b06 	vmul.f64	d7, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_ExpPressure = (real32_T)((real_T)
 8005096:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 800509a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800509e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80050a2:	4b91      	ldr	r3, [pc, #580]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80050a4:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6720:2') */
  rtb_DiscreteTransferFcn_a = 1.2490239459276823E-6 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_h;
 80050a8:	4b8f      	ldr	r3, [pc, #572]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80050aa:	ed93 7b9a 	vldr	d7, [r3, #616]	@ 0x268
  rtb_DiscreteTransferFcn_a = 1.2490239459276823E-6 *
 80050ae:	f107 0318 	add.w	r3, r7, #24
 80050b2:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 80052c0 <Hils_Ctrl_Block+0xcc0>
 80050b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80050ba:	ed83 7b00 	vstr	d7, [r3]
  /* Gain: 'Gain11' (':6702') incorporates:
   *  DataStoreRead: 'Data Store Read1' (':6085')
   *  DataTypeConversion: 'Data Type Conversion33' (':6176')
   */
  rtb_Gain11_l = 0.001 * ((real_T)
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubCy02_InitPos);
 80050be:	4b8a      	ldr	r3, [pc, #552]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80050c0:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
  rtb_Gain11_l = 0.001 * ((real_T)
 80050c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050c8:	f107 0318 	add.w	r3, r7, #24
 80050cc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 80052c8 <Hils_Ctrl_Block+0xcc8>
 80050d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80050d4:	ed03 7b02 	vstr	d7, [r3, #-8]

  /* DiscreteIntegrator: 'Discrete-Time Integrator1' (':6691') */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LO_p) !=
 80050d8:	4b83      	ldr	r3, [pc, #524]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80050da:	f893 331b 	ldrb.w	r3, [r3, #795]	@ 0x31b
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d006      	beq.n	80050f0 <Hils_Ctrl_Block+0xaf0>
      0)
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_c = rtb_Gain11_l;
 80050e2:	4981      	ldr	r1, [pc, #516]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80050e4:	f107 0318 	add.w	r3, r7, #24
 80050e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80050ec:	e9c1 239c 	strd	r2, r3, [r1, #624]	@ 0x270
  }

  if (rtb_LogicalOperator ||
 80050f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <Hils_Ctrl_Block+0xb02>
      (Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevR_g != 0))
 80050f8:	4b7b      	ldr	r3, [pc, #492]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80050fa:	f993 330b 	ldrsb.w	r3, [r3, #779]	@ 0x30b
  if (rtb_LogicalOperator ||
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d006      	beq.n	8005110 <Hils_Ctrl_Block+0xb10>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_c = rtb_Gain11_l;
 8005102:	4979      	ldr	r1, [pc, #484]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 8005104:	f107 0318 	add.w	r3, r7, #24
 8005108:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800510c:	e9c1 239c 	strd	r2, r3, [r1, #624]	@ 0x270
  }

  /* DiscreteIntegrator: 'Discrete-Time Integrator1' (':6691') */
  rtb_Gain11_l = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_c +
 8005110:	4b75      	ldr	r3, [pc, #468]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 8005112:	ed93 6b9c 	vldr	d6, [r3, #624]	@ 0x270
    (0.0025 * rtb_DiscreteTransferFcn_a);
 8005116:	f107 0318 	add.w	r3, r7, #24
 800511a:	ed93 7b00 	vldr	d7, [r3]
 800511e:	ed9f 5b6c 	vldr	d5, [pc, #432]	@ 80052d0 <Hils_Ctrl_Block+0xcd0>
 8005122:	ee27 7b05 	vmul.f64	d7, d7, d5
  rtb_Gain11_l = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_c +
 8005126:	f107 0318 	add.w	r3, r7, #24
 800512a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800512e:	ed03 7b02 	vstr	d7, [r3, #-8]

  /* Gain: 'Gain14' (':6238') */
  rtb_mm_jn = 1000.0 * rtb_Gain11_l;
 8005132:	f107 0318 	add.w	r3, r7, #24
 8005136:	ed13 7b02 	vldr	d7, [r3, #-8]
 800513a:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 80052d8 <Hils_Ctrl_Block+0xcd8>
 800513e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005142:	ed87 7b2e 	vstr	d7, [r7, #184]	@ 0xb8

  /* Saturate: 'Sensor_Dis_Range3' (':6241') */
  if (rtb_mm_jn > 400.0)
 8005146:	ed97 7b2e 	vldr	d7, [r7, #184]	@ 0xb8
 800514a:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 80052b0 <Hils_Ctrl_Block+0xcb0>
 800514e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005156:	dd05      	ble.n	8005164 <Hils_Ctrl_Block+0xb64>
  {
    rtb_mm_jn = 400.0;
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	4b64      	ldr	r3, [pc, #400]	@ (80052f0 <Hils_Ctrl_Block+0xcf0>)
 800515e:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
 8005162:	e00c      	b.n	800517e <Hils_Ctrl_Block+0xb7e>
  }
  else
  {
    if (rtb_mm_jn < 0.0)
 8005164:	ed97 7b2e 	vldr	d7, [r7, #184]	@ 0xb8
 8005168:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800516c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005170:	d505      	bpl.n	800517e <Hils_Ctrl_Block+0xb7e>
    {
      rtb_mm_jn = 0.0;
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
   *  Constant: 'Constant15' (':6233')
   *  DataStoreWrite: 'Data Store Write3' (':6053')
   *  Gain: 'Gain15' (':6239')
   *  Sum: 'Sum8' (':6247')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_LVDT = (real32_T)((real_T)((0.04 *
 800517e:	ed97 7b2e 	vldr	d7, [r7, #184]	@ 0xb8
 8005182:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8005288 <Hils_Ctrl_Block+0xc88>
 8005186:	ee27 7b06 	vmul.f64	d7, d7, d6
 800518a:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 800518e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005192:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005196:	4b54      	ldr	r3, [pc, #336]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 8005198:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
   *  DataStoreRead: 'Data Store Read30' (':5987')
   *  DataStoreRead: 'Data Store Read8' (':6276')
   *  DataStoreWrite: 'Data Store Write3' (':6053')
   *  DataTypeConversion: 'Data Type Conversion5' (':5999')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_SC02) == 0)
 800519c:	4b52      	ldr	r3, [pc, #328]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 800519e:	f8b3 31be 	ldrh.w	r3, [r3, #446]	@ 0x1be
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d105      	bne.n	80051b2 <Hils_Ctrl_Block+0xbb2>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_PValveError =
      Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_SubCy02Drv;
 80051a6:	4b50      	ldr	r3, [pc, #320]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80051a8:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_PValveError =
 80051ac:	4a4e      	ldr	r2, [pc, #312]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80051ae:	6693      	str	r3, [r2, #104]	@ 0x68
 80051b0:	e002      	b.n	80051b8 <Hils_Ctrl_Block+0xbb8>
  }
  else
  {
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_PValveError = 10.5F;
 80051b2:	4b4d      	ldr	r3, [pc, #308]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80051b4:	4a4d      	ldr	r2, [pc, #308]	@ (80052ec <Hils_Ctrl_Block+0xcec>)
 80051b6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* End of MultiPortSwitch: 'Multiport Switch5' (':6277') */

  /* DataStoreWrite: 'Data Store Write3' (':6053') */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_ConPressure =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_ExpPressure;
 80051b8:	4b4b      	ldr	r3, [pc, #300]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80051ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_ConPressure =
 80051bc:	4a4a      	ldr	r2, [pc, #296]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80051be:	6513      	str	r3, [r2, #80]	@ 0x50
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_ConPressure =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_ExpPressure;
 80051c0:	4b49      	ldr	r3, [pc, #292]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80051c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_ConPressure =
 80051c4:	4a48      	ldr	r2, [pc, #288]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 80051c6:	6613      	str	r3, [r2, #96]	@ 0x60

  /* Saturate: 'Sensor_Prssure_Limit5' (':6296') incorporates:
   *  DataTypeConversion: 'Data Type Conversion36' (':6293')
   */
  if (Lws_HilsCtrl_240218_v_1_0_B.Pressure_DropLiftPw > 400.0F)
 80051c8:	4b4b      	ldr	r3, [pc, #300]	@ (80052f8 <Hils_Ctrl_Block+0xcf8>)
 80051ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80051ce:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80052fc <Hils_Ctrl_Block+0xcfc>
 80051d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051da:	dd05      	ble.n	80051e8 <Hils_Ctrl_Block+0xbe8>
  {
    rtb_MultiportSwitch12 = 400.0;
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	4b43      	ldr	r3, [pc, #268]	@ (80052f0 <Hils_Ctrl_Block+0xcf0>)
 80051e2:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
 80051e6:	e016      	b.n	8005216 <Hils_Ctrl_Block+0xc16>
  }
  else if (Lws_HilsCtrl_240218_v_1_0_B.Pressure_DropLiftPw < -400.0F)
 80051e8:	4b43      	ldr	r3, [pc, #268]	@ (80052f8 <Hils_Ctrl_Block+0xcf8>)
 80051ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80051ee:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8005300 <Hils_Ctrl_Block+0xd00>
 80051f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fa:	d505      	bpl.n	8005208 <Hils_Ctrl_Block+0xc08>
  {
    rtb_MultiportSwitch12 = -400.0;
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	4b3c      	ldr	r3, [pc, #240]	@ (80052f4 <Hils_Ctrl_Block+0xcf4>)
 8005202:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
 8005206:	e006      	b.n	8005216 <Hils_Ctrl_Block+0xc16>
  }
  else
  {
    rtb_MultiportSwitch12 = (real_T)
      Lws_HilsCtrl_240218_v_1_0_B.Pressure_DropLiftPw;
 8005208:	4b3b      	ldr	r3, [pc, #236]	@ (80052f8 <Hils_Ctrl_Block+0xcf8>)
 800520a:	edd3 7a02 	vldr	s15, [r3, #8]
    rtb_MultiportSwitch12 = (real_T)
 800520e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005212:	ed87 7b3e 	vstr	d7, [r7, #248]	@ 0xf8
   *  DataStoreWrite: 'Data Store Write4' (':6288')
   *  Gain: 'Gain16' (':6295')
   *  Sum: 'Sum10' (':6297')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.Pressure_DropLiftPw = (real32_T)((real_T)
    ((0.04 * fabs(rtb_MultiportSwitch12)) + 4.0));
 8005216:	ed97 7b3e 	vldr	d7, [r7, #248]	@ 0xf8
 800521a:	eeb0 7bc7 	vabs.f64	d7, d7
 800521e:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8005288 <Hils_Ctrl_Block+0xc88>
 8005222:	ee27 7b06 	vmul.f64	d7, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.Pressure_DropLiftPw = (real32_T)((real_T)
 8005226:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 800522a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800522e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005232:	4b2d      	ldr	r3, [pc, #180]	@ (80052e8 <Hils_Ctrl_Block+0xce8>)
 8005234:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Gain: 'Gain4' (':6406') */
  rtb_Q_fedcm3s_a = 278.04 * rtb_DiscreteTransferFcn_o;
 8005238:	f107 0308 	add.w	r3, r7, #8
 800523c:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8005240:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 80052e0 <Hils_Ctrl_Block+0xce0>
 8005244:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005248:	ed83 7b00 	vstr	d7, [r3]

  /* Sum: 'Sum19' (':6615') */
  rtb_MultiportSwitch13 = rtb_Q_fedcm3s_a + ((real_T)
    Lws_HilsCtrl_240218_v_1_0_B.OilFlow_DropLift);
 800524c:	4b2a      	ldr	r3, [pc, #168]	@ (80052f8 <Hils_Ctrl_Block+0xcf8>)
 800524e:	edd3 7a01 	vldr	s15, [r3, #4]
  rtb_MultiportSwitch13 = rtb_Q_fedcm3s_a + ((real_T)
 8005252:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005256:	f107 0308 	add.w	r3, r7, #8
 800525a:	ed93 6b00 	vldr	d6, [r3]
 800525e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005262:	ed87 7b3c 	vstr	d7, [r7, #240]	@ 0xf0

  /* Saturate: 'Sensor_OilFlow_Limit' (':6306') */
  if (rtb_MultiportSwitch13 > 400.0)
 8005266:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 800526a:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 80052b0 <Hils_Ctrl_Block+0xcb0>
 800526e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005276:	dd45      	ble.n	8005304 <Hils_Ctrl_Block+0xd04>
  {
    rtb_MultiportSwitch13 = 400.0;
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	4b1c      	ldr	r3, [pc, #112]	@ (80052f0 <Hils_Ctrl_Block+0xcf0>)
 800527e:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
 8005282:	e04d      	b.n	8005320 <Hils_Ctrl_Block+0xd20>
 8005284:	f3af 8000 	nop.w
 8005288:	47ae147b 	.word	0x47ae147b
 800528c:	3fa47ae1 	.word	0x3fa47ae1
 8005290:	8fbf9449 	.word	0x8fbf9449
 8005294:	3f83f943 	.word	0x3f83f943
 8005298:	00000000 	.word	0x00000000
 800529c:	4075e000 	.word	0x4075e000
 80052a0:	00000000 	.word	0x00000000
 80052a4:	c075e000 	.word	0xc075e000
 80052a8:	00000000 	.word	0x00000000
 80052ac:	40e11700 	.word	0x40e11700
 80052b0:	00000000 	.word	0x00000000
 80052b4:	40790000 	.word	0x40790000
 80052b8:	00000000 	.word	0x00000000
 80052bc:	c0790000 	.word	0xc0790000
 80052c0:	5a174ecb 	.word	0x5a174ecb
 80052c4:	3eb4f484 	.word	0x3eb4f484
 80052c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80052cc:	3f50624d 	.word	0x3f50624d
 80052d0:	47ae147b 	.word	0x47ae147b
 80052d4:	3f647ae1 	.word	0x3f647ae1
 80052d8:	00000000 	.word	0x00000000
 80052dc:	408f4000 	.word	0x408f4000
 80052e0:	d70a3d71 	.word	0xd70a3d71
 80052e4:	407160a3 	.word	0x407160a3
 80052e8:	200008e8 	.word	0x200008e8
 80052ec:	41280000 	.word	0x41280000
 80052f0:	40790000 	.word	0x40790000
 80052f4:	c0790000 	.word	0xc0790000
 80052f8:	20000808 	.word	0x20000808
 80052fc:	43c80000 	.word	0x43c80000
 8005300:	c3c80000 	.word	0xc3c80000
  }
  else
  {
    if (rtb_MultiportSwitch13 < -400.0)
 8005304:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8005308:	ed9f 6bbf 	vldr	d6, [pc, #764]	@ 8005608 <Hils_Ctrl_Block+0x1008>
 800530c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005314:	d504      	bpl.n	8005320 <Hils_Ctrl_Block+0xd20>
    {
      rtb_MultiportSwitch13 = -400.0;
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	4bc9      	ldr	r3, [pc, #804]	@ (8005640 <Hils_Ctrl_Block+0x1040>)
 800531c:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
   *  DataStoreWrite: 'Data Store Write4' (':6288')
   *  Gain: 'Gain17' (':6305')
   *  Sum: 'Sum11' (':6307')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.OilFlow_DropLift = (real32_T)((real_T)
    ((0.16 * fabs(rtb_MultiportSwitch13)) + 4.0));
 8005320:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8005324:	eeb0 7bc7 	vabs.f64	d7, d7
 8005328:	ed9f 6bb9 	vldr	d6, [pc, #740]	@ 8005610 <Hils_Ctrl_Block+0x1010>
 800532c:	ee27 7b06 	vmul.f64	d7, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.OilFlow_DropLift = (real32_T)((real_T)
 8005330:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8005334:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005338:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800533c:	4bc1      	ldr	r3, [pc, #772]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 800533e:	edc3 7a02 	vstr	s15, [r3, #8]

  /* Saturate: 'Sensor_Tension_Limit' (':6621') incorporates:
   *  DataStoreRead: 'Data Store Read9' (':6617')
   *  DataTypeConversion: 'Data Type Conversion56' (':6623')
   */
  if (Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.TensionS_RefTension > 10.0F)
 8005342:	4bc0      	ldr	r3, [pc, #768]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 8005344:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8005348:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800534c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005354:	dd05      	ble.n	8005362 <Hils_Ctrl_Block+0xd62>
  {
    rtb_MultiportSwitch12 = 10.0;
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	4bbb      	ldr	r3, [pc, #748]	@ (8005648 <Hils_Ctrl_Block+0x1048>)
 800535c:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
 8005360:	e016      	b.n	8005390 <Hils_Ctrl_Block+0xd90>
  }
  else if (Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.TensionS_RefTension < -10.0F)
 8005362:	4bb8      	ldr	r3, [pc, #736]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 8005364:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8005368:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 800536c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005374:	d505      	bpl.n	8005382 <Hils_Ctrl_Block+0xd82>
  {
    rtb_MultiportSwitch12 = -10.0;
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	4bb4      	ldr	r3, [pc, #720]	@ (800564c <Hils_Ctrl_Block+0x104c>)
 800537c:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
 8005380:	e006      	b.n	8005390 <Hils_Ctrl_Block+0xd90>
  }
  else
  {
    rtb_MultiportSwitch12 = (real_T)
      Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.TensionS_RefTension;
 8005382:	4bb0      	ldr	r3, [pc, #704]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 8005384:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
    rtb_MultiportSwitch12 = (real_T)
 8005388:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800538c:	ed87 7b3e 	vstr	d7, [r7, #248]	@ 0xf8
   *  DataStoreWrite: 'Data Store Write4' (':6288')
   *  Gain: 'Gain37' (':6620')
   *  Sum: 'Sum20' (':6618')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.TensionSensor = (real32_T)((real_T)(fabs
    (0.4 * rtb_MultiportSwitch12) + 4.0));
 8005390:	ed97 7b3e 	vldr	d7, [r7, #248]	@ 0xf8
 8005394:	ed9f 6ba0 	vldr	d6, [pc, #640]	@ 8005618 <Hils_Ctrl_Block+0x1018>
 8005398:	ee27 7b06 	vmul.f64	d7, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.TensionSensor = (real32_T)((real_T)(fabs
 800539c:	eeb0 7bc7 	vabs.f64	d7, d7
 80053a0:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 80053a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80053ac:	4ba5      	ldr	r3, [pc, #660]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 80053ae:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  /* MultiPortSwitch: 'Multiport Switch13' (':6464') incorporates:
   *  Constant: 'Constant29' (':6463')
   *  DataStoreRead: 'Data Store Read2' (':6088')
   *  MultiPortSwitch: 'Multiport Switch7' (':6336')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.AlignBk_Unlock) == 0)
 80053b2:	4ba4      	ldr	r3, [pc, #656]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 80053b4:	f8b3 31ae 	ldrh.w	r3, [r3, #430]	@ 0x1ae
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <Hils_Ctrl_Block+0xdca>
  {
    rtb_MultiportSwitch13 = 0.0;
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
 80053c8:	e012      	b.n	80053f0 <Hils_Ctrl_Block+0xdf0>
  }
  else if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning) == 0)
 80053ca:	4b9e      	ldr	r3, [pc, #632]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 80053cc:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	@ 0x1a4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <Hils_Ctrl_Block+0xde2>
  {
    /* MultiPortSwitch: 'Multiport Switch7' (':6336') incorporates:
     *  Constant: 'Constant23' (':6334')
     */
    rtb_MultiportSwitch13 = 0.0;
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
 80053e0:	e006      	b.n	80053f0 <Hils_Ctrl_Block+0xdf0>
    /* MultiPortSwitch: 'Multiport Switch7' (':6336') incorporates:
     *  DataStoreRead: 'Data Store Read30' (':5987')
     *  DataTypeConversion: 'Data Type Conversion1' (':5995')
     */
    rtb_MultiportSwitch13 = (real_T)
      Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_AlignDrv;
 80053e2:	4b98      	ldr	r3, [pc, #608]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 80053e4:	edd3 7a53 	vldr	s15, [r3, #332]	@ 0x14c
    rtb_MultiportSwitch13 = (real_T)
 80053e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053ec:	ed87 7b3c 	vstr	d7, [r7, #240]	@ 0xf0
   *  DataStoreRead: 'Data Store Read11' (':6846')
   *  DataTypeConversion: 'Data Type Conversion62' (':6847')
   *  RelationalOperator: 'u_GTE_up' (':6841:7')
   */
  if (rtb_MultiportSwitch13 >= ((real_T)
       Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubSy_ConRefPressure))
 80053f0:	4b94      	ldr	r3, [pc, #592]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 80053f2:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
  if (rtb_MultiportSwitch13 >= ((real_T)
 80053f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053fa:	ed97 6b3c 	vldr	d6, [r7, #240]	@ 0xf0
 80053fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005406:	db07      	blt.n	8005418 <Hils_Ctrl_Block+0xe18>
  {
    rtb_Gain21 = (real_T)
      Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubSy_ConRefPressure;
 8005408:	4b8e      	ldr	r3, [pc, #568]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 800540a:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
    rtb_Gain21 = (real_T)
 800540e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005412:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118
 8005416:	e01a      	b.n	800544e <Hils_Ctrl_Block+0xe4e>
  }
  else
  {
    /* Gain: 'Gain21' (':6842') */
    rtb_Gain21 = -((real_T)
                   Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubSy_ConRefPressure);
 8005418:	4b8a      	ldr	r3, [pc, #552]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 800541a:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
    rtb_Gain21 = -((real_T)
 800541e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005422:	eeb1 7b47 	vneg.f64	d7, d7
 8005426:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118
    /* Switch: 'Switch1' (':6841:6') incorporates:
     *  Gain: 'Gain21' (':6842')
     *  RelationalOperator: 'u_GT_lo' (':6841:8')
     */
    if (rtb_MultiportSwitch13 > (-((real_T)
          Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubSy_ConRefPressure)))
 800542a:	4b86      	ldr	r3, [pc, #536]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 800542c:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
    if (rtb_MultiportSwitch13 > (-((real_T)
 8005430:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005434:	eeb1 7b47 	vneg.f64	d7, d7
 8005438:	ed97 6b3c 	vldr	d6, [r7, #240]	@ 0xf0
 800543c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005444:	dd03      	ble.n	800544e <Hils_Ctrl_Block+0xe4e>
    {
      rtb_Gain21 = rtb_MultiportSwitch13;
 8005446:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800544a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
  }

  /* End of Switch: 'Switch' (':6841:5') */

  /* Sum: 'Diff' (':6841:4') */
  rtb_MultiportSwitch13 -= rtb_Gain21;
 800544e:	ed97 6b3c 	vldr	d6, [r7, #240]	@ 0xf0
 8005452:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005456:	ee36 7b47 	vsub.f64	d7, d6, d7
 800545a:	ed87 7b3c 	vstr	d7, [r7, #240]	@ 0xf0

  /* DiscreteIntegrator: 'Discrete-Time Integrator' (':6433') */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOA_e) !=
 800545e:	4b79      	ldr	r3, [pc, #484]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 8005460:	f893 331c 	ldrb.w	r3, [r3, #796]	@ 0x31c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <Hils_Ctrl_Block+0xe72>
      0)
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_n = rtb_Gain8;
 8005468:	4976      	ldr	r1, [pc, #472]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 800546a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800546e:	e9c1 239e 	strd	r2, r3, [r1, #632]	@ 0x278
  }

  if (rtb_LogicalOperator ||
 8005472:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005476:	2b00      	cmp	r3, #0
 8005478:	d104      	bne.n	8005484 <Hils_Ctrl_Block+0xe84>
      (Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRe_n != 0))
 800547a:	4b72      	ldr	r3, [pc, #456]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 800547c:	f993 330c 	ldrsb.w	r3, [r3, #780]	@ 0x30c
  if (rtb_LogicalOperator ||
 8005480:	2b00      	cmp	r3, #0
 8005482:	d004      	beq.n	800548e <Hils_Ctrl_Block+0xe8e>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_n = rtb_Gain8;
 8005484:	496f      	ldr	r1, [pc, #444]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 8005486:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800548a:	e9c1 239e 	strd	r2, r3, [r1, #632]	@ 0x278
  }

  /* DiscreteIntegrator: 'Discrete-Time Integrator' (':6433') */
  rtb_Gain8 = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_n +
 800548e:	4b6d      	ldr	r3, [pc, #436]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 8005490:	ed93 6b9e 	vldr	d6, [r3, #632]	@ 0x278
    (0.0025 * rtb_DiscreteTransferFcn_f);
 8005494:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8005498:	ed9f 5b61 	vldr	d5, [pc, #388]	@ 8005620 <Hils_Ctrl_Block+0x1020>
 800549c:	ee27 7b05 	vmul.f64	d7, d7, d5
  rtb_Gain8 = Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_n +
 80054a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80054a4:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78
   *  Gain: 'Gain6' (':6443')
   *  Gain: 'Gain7' (':6444')
   *  Sum: 'Sum' (':6451')
   *  Sum: 'Sum6' (':6455')
   */
  rtb_Gain21 = (300.0 * (rtb_Gain8 - Align_Load_Pos)) + (300.0 *
 80054a8:	ed97 6b1e 	vldr	d6, [r7, #120]	@ 0x78
 80054ac:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 80054b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80054b4:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 8005628 <Hils_Ctrl_Block+0x1028>
 80054b8:	ee27 6b06 	vmul.f64	d6, d7, d6
    (rtb_DiscreteTransferFcn_f - rtb_DiscreteTransferFcn_ps));
 80054bc:	ed97 5b14 	vldr	d5, [r7, #80]	@ 0x50
 80054c0:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 80054c4:	ee35 7b47 	vsub.f64	d7, d5, d7
  rtb_Gain21 = (300.0 * (rtb_Gain8 - Align_Load_Pos)) + (300.0 *
 80054c8:	ed9f 5b57 	vldr	d5, [pc, #348]	@ 8005628 <Hils_Ctrl_Block+0x1028>
 80054cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80054d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80054d4:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118
   *  Gain: 'Gain5' (':6442')
   *  Gain: 'Gain19' (':6525')
   *  Product: 'Product4' (':6843')
   */
  rtb_DiscreteTransferFcn_f = (100.0 * (0.03 * (((real_T)
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubSy_ExpRefPressure) *
 80054d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 80054da:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
  rtb_DiscreteTransferFcn_f = (100.0 * (0.03 * (((real_T)
 80054de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubSy_ExpRefPressure) *
 80054e2:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 80054e6:	ee26 7b07 	vmul.f64	d7, d6, d7
  rtb_DiscreteTransferFcn_f = (100.0 * (0.03 * (((real_T)
 80054ea:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8005630 <Hils_Ctrl_Block+0x1030>
 80054ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80054f2:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8005638 <Hils_Ctrl_Block+0x1038>
 80054f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80054fa:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 80054fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005502:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    rtb_MultiportSwitch13))) - rtb_Gain21;

  /* Sum: 'Sum5' (':6454') */
  rtb_MultiportSwitch13 = rtb_Gain21;
 8005506:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800550a:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
   *  DataStoreRead: 'Data Store Read2' (':6088')
   *  Logic: 'Logical Operator2' (':6330')
   *  MultiPortSwitch: 'Multiport Switch6' (':6331')
   *  Sum: 'Sum12' (':6514')
   */
  if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BandBk_Unlock) == 0) ||
 800550e:	4b4d      	ldr	r3, [pc, #308]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 8005510:	f8b3 31b0 	ldrh.w	r3, [r3, #432]	@ 0x1b0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <Hils_Ctrl_Block+0xf22>
      (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WdBk_Unlock) == 0))
 8005518:	4b4a      	ldr	r3, [pc, #296]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 800551a:	f8b3 31b2 	ldrh.w	r3, [r3, #434]	@ 0x1b2
  if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BandBk_Unlock) == 0) ||
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <Hils_Ctrl_Block+0xf30>
  {
    rtb_MultiportSwitch12 = 0.0;
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
 800552e:	e01a      	b.n	8005566 <Hils_Ctrl_Block+0xf66>
  }
  else
  {
    if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning) == 0)
 8005530:	4b44      	ldr	r3, [pc, #272]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 8005532:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	@ 0x1a4
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <Hils_Ctrl_Block+0xf48>
    {
      /* MultiPortSwitch: 'Multiport Switch6' (':6331') incorporates:
       *  Constant: 'Constant22' (':6333')
       */
      rtb_MultiportSwitch12 = 0.0;
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
 8005546:	e006      	b.n	8005556 <Hils_Ctrl_Block+0xf56>
      /* MultiPortSwitch: 'Multiport Switch6' (':6331') incorporates:
       *  DataStoreRead: 'Data Store Read30' (':5987')
       *  DataTypeConversion: 'Data Type Conversion6' (':5994')
       */
      rtb_MultiportSwitch12 = (real_T)
        Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_DrumDrv;
 8005548:	4b3e      	ldr	r3, [pc, #248]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 800554a:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
      rtb_MultiportSwitch12 = (real_T)
 800554e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005552:	ed87 7b3e 	vstr	d7, [r7, #248]	@ 0xf8
    }

    rtb_MultiportSwitch12 -= 2.5;
 8005556:	ed97 7b3e 	vldr	d7, [r7, #248]	@ 0xf8
 800555a:	eeb0 6b04 	vmov.f64	d6, #4	@ 0x40200000  2.5
 800555e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005562:	ed87 7b3e 	vstr	d7, [r7, #248]	@ 0xf8
   *  DataStoreRead: 'Data Store Read17' (':6849')
   *  DataTypeConversion: 'Data Type Conversion64' (':6851')
   *  RelationalOperator: 'u_GTE_up' (':6852:7')
   */
  if (rtb_MultiportSwitch12 >= ((real_T)
       Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainSy_ConRefPressure))
 8005566:	4b37      	ldr	r3, [pc, #220]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 8005568:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
  if (rtb_MultiportSwitch12 >= ((real_T)
 800556c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005570:	ed97 6b3e 	vldr	d6, [r7, #248]	@ 0xf8
 8005574:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557c:	db07      	blt.n	800558e <Hils_Ctrl_Block+0xf8e>
  {
    rtb_Gain21 = (real_T)
      Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainSy_ConRefPressure;
 800557e:	4b31      	ldr	r3, [pc, #196]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 8005580:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
    rtb_Gain21 = (real_T)
 8005584:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005588:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118
 800558c:	e01a      	b.n	80055c4 <Hils_Ctrl_Block+0xfc4>
  }
  else
  {
    /* Gain: 'Gain22' (':6853') */
    rtb_Gain21 = -((real_T)
                   Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainSy_ConRefPressure);
 800558e:	4b2d      	ldr	r3, [pc, #180]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 8005590:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
    rtb_Gain21 = -((real_T)
 8005594:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005598:	eeb1 7b47 	vneg.f64	d7, d7
 800559c:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118
    /* Switch: 'Switch1' (':6852:6') incorporates:
     *  Gain: 'Gain22' (':6853')
     *  RelationalOperator: 'u_GT_lo' (':6852:8')
     */
    if (rtb_MultiportSwitch12 > (-((real_T)
          Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainSy_ConRefPressure)))
 80055a0:	4b28      	ldr	r3, [pc, #160]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 80055a2:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
    if (rtb_MultiportSwitch12 > (-((real_T)
 80055a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055aa:	eeb1 7b47 	vneg.f64	d7, d7
 80055ae:	ed97 6b3e 	vldr	d6, [r7, #248]	@ 0xf8
 80055b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80055b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ba:	dd03      	ble.n	80055c4 <Hils_Ctrl_Block+0xfc4>
    {
      rtb_Gain21 = rtb_MultiportSwitch12;
 80055bc:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 80055c0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
   *  DataTypeConversion: 'Data Type Conversion63' (':6850')
   *  Product: 'Product5' (':6854')
   *  Sum: 'Diff' (':6852:4')
   */
  rtb_MultiportSwitch12 = 0.4 * (((real_T)
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainSy_ExpRefPressure) *
 80055c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 80055c6:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
  rtb_MultiportSwitch12 = 0.4 * (((real_T)
 80055ca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    (rtb_MultiportSwitch12 - rtb_Gain21));
 80055ce:	ed97 5b3e 	vldr	d5, [r7, #248]	@ 0xf8
 80055d2:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 80055d6:	ee35 7b47 	vsub.f64	d7, d5, d7
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainSy_ExpRefPressure) *
 80055da:	ee26 7b07 	vmul.f64	d7, d6, d7
  rtb_MultiportSwitch12 = 0.4 * (((real_T)
 80055de:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8005618 <Hils_Ctrl_Block+0x1018>
 80055e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80055e6:	ed87 7b3e 	vstr	d7, [r7, #248]	@ 0xf8
   *  Constant: 'Constant24' (':6337')
   *  DataStoreRead: 'Data Store Read2' (':6088')
   *  DataStoreRead: 'Data Store Read30' (':5987')
   *  DataTypeConversion: 'Data Type Conversion2' (':5996')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning) == 0)
 80055ea:	4b16      	ldr	r3, [pc, #88]	@ (8005644 <Hils_Ctrl_Block+0x1044>)
 80055ec:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	@ 0x1a4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d12d      	bne.n	8005650 <Hils_Ctrl_Block+0x1050>
  {
    rtb_Gain21 = 0.0;
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 8005600:	e02d      	b.n	800565e <Hils_Ctrl_Block+0x105e>
 8005602:	bf00      	nop
 8005604:	f3af 8000 	nop.w
 8005608:	00000000 	.word	0x00000000
 800560c:	c0790000 	.word	0xc0790000
 8005610:	47ae147b 	.word	0x47ae147b
 8005614:	3fc47ae1 	.word	0x3fc47ae1
 8005618:	9999999a 	.word	0x9999999a
 800561c:	3fd99999 	.word	0x3fd99999
 8005620:	47ae147b 	.word	0x47ae147b
 8005624:	3f647ae1 	.word	0x3f647ae1
 8005628:	00000000 	.word	0x00000000
 800562c:	4072c000 	.word	0x4072c000
 8005630:	eb851eb8 	.word	0xeb851eb8
 8005634:	3f9eb851 	.word	0x3f9eb851
 8005638:	00000000 	.word	0x00000000
 800563c:	40590000 	.word	0x40590000
 8005640:	c0790000 	.word	0xc0790000
 8005644:	200008e8 	.word	0x200008e8
 8005648:	40240000 	.word	0x40240000
 800564c:	c0240000 	.word	0xc0240000
  }
  else
  {
    rtb_Gain21 = (real_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_MainCy01Drv;
 8005650:	4b81      	ldr	r3, [pc, #516]	@ (8005858 <Hils_Ctrl_Block+0x1258>)
 8005652:	edd3 7a54 	vldr	s15, [r3, #336]	@ 0x150
 8005656:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800565a:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118
   *  Constant: 'Constant33' (':6862')
   *  RelationalOperator: 'u_GTE_up' (':6832:7')
   *  RelationalOperator: 'u_GT_lo' (':6832:8')
   *  Switch: 'Switch1' (':6832:6')
   */
  if (rtb_Gain21 >= 1.5)
 800565e:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005662:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005666:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566e:	db05      	blt.n	800567c <Hils_Ctrl_Block+0x107c>
  {
    Gain3_o = 1.5;
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	4b79      	ldr	r3, [pc, #484]	@ (800585c <Hils_Ctrl_Block+0x125c>)
 8005676:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
 800567a:	e012      	b.n	80056a2 <Hils_Ctrl_Block+0x10a2>
  }
  else if (rtb_Gain21 > -1.5)
 800567c:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005680:	eebf 6b08 	vmov.f64	d6, #248	@ 0xbfc00000 -1.5
 8005684:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568c:	dd04      	ble.n	8005698 <Hils_Ctrl_Block+0x1098>
  {
    /* Switch: 'Switch1' (':6832:6') */
    Gain3_o = rtb_Gain21;
 800568e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8005692:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
 8005696:	e004      	b.n	80056a2 <Hils_Ctrl_Block+0x10a2>
  }
  else
  {
    Gain3_o = -1.5;
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	4b70      	ldr	r3, [pc, #448]	@ (8005860 <Hils_Ctrl_Block+0x1260>)
 800569e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
   *  DataStoreRead: 'Data Store Read14' (':6835')
   *  DataTypeConversion: 'Data Type Conversion59' (':6836')
   *  Product: 'Product3' (':6834')
   *  Sum: 'Diff' (':6832:4')
   */
  Gain3_f = 0.1 * (((real_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare01) *
 80056a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005858 <Hils_Ctrl_Block+0x1258>)
 80056a4:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 80056a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
                   (rtb_Gain21 - Gain3_o));
 80056ac:	ed97 5b46 	vldr	d5, [r7, #280]	@ 0x118
 80056b0:	ed97 7b48 	vldr	d7, [r7, #288]	@ 0x120
 80056b4:	ee35 7b47 	vsub.f64	d7, d5, d7
  Gain3_f = 0.1 * (((real_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare01) *
 80056b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80056bc:	f107 0308 	add.w	r3, r7, #8
 80056c0:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 8005850 <Hils_Ctrl_Block+0x1250>
 80056c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80056c8:	ed03 7b02 	vstr	d7, [r3, #-8]
   *  Constant: 'Constant25' (':6340')
   *  DataStoreRead: 'Data Store Read2' (':6088')
   *  DataStoreRead: 'Data Store Read30' (':5987')
   *  DataTypeConversion: 'Data Type Conversion3' (':5997')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning) == 0)
 80056cc:	4b62      	ldr	r3, [pc, #392]	@ (8005858 <Hils_Ctrl_Block+0x1258>)
 80056ce:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	@ 0x1a4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <Hils_Ctrl_Block+0x10e4>
  {
    rtb_Gain21 = 0.0;
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 80056e2:	e006      	b.n	80056f2 <Hils_Ctrl_Block+0x10f2>
  }
  else
  {
    rtb_Gain21 = (real_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_MainCy02Drv;
 80056e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005858 <Hils_Ctrl_Block+0x1258>)
 80056e6:	edd3 7a55 	vldr	s15, [r3, #340]	@ 0x154
 80056ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056ee:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118
   *  Constant: 'Constant33' (':6862')
   *  RelationalOperator: 'u_GTE_up' (':6829:7')
   *  RelationalOperator: 'u_GT_lo' (':6829:8')
   *  Switch: 'Switch1' (':6829:6')
   */
  if (rtb_Gain21 >= 1.5)
 80056f2:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 80056f6:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80056fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80056fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005702:	db05      	blt.n	8005710 <Hils_Ctrl_Block+0x1110>
  {
    Gain3_o = 1.5;
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	4b54      	ldr	r3, [pc, #336]	@ (800585c <Hils_Ctrl_Block+0x125c>)
 800570a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
 800570e:	e012      	b.n	8005736 <Hils_Ctrl_Block+0x1136>
  }
  else if (rtb_Gain21 > -1.5)
 8005710:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005714:	eebf 6b08 	vmov.f64	d6, #248	@ 0xbfc00000 -1.5
 8005718:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800571c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005720:	dd04      	ble.n	800572c <Hils_Ctrl_Block+0x112c>
  {
    /* Switch: 'Switch1' (':6829:6') */
    Gain3_o = rtb_Gain21;
 8005722:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8005726:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
 800572a:	e004      	b.n	8005736 <Hils_Ctrl_Block+0x1136>
  }
  else
  {
    Gain3_o = -1.5;
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	4b4b      	ldr	r3, [pc, #300]	@ (8005860 <Hils_Ctrl_Block+0x1260>)
 8005732:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
   *  DataStoreRead: 'Data Store Read14' (':6835')
   *  DataTypeConversion: 'Data Type Conversion59' (':6836')
   *  Product: 'Product2' (':6831')
   *  Sum: 'Diff' (':6829:4')
   */
  Gain3_o = 0.1 * (((real_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare01) *
 8005736:	4b48      	ldr	r3, [pc, #288]	@ (8005858 <Hils_Ctrl_Block+0x1258>)
 8005738:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 800573c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
                   (rtb_Gain21 - Gain3_o));
 8005740:	ed97 5b46 	vldr	d5, [r7, #280]	@ 0x118
 8005744:	ed97 7b48 	vldr	d7, [r7, #288]	@ 0x120
 8005748:	ee35 7b47 	vsub.f64	d7, d5, d7
  Gain3_o = 0.1 * (((real_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare01) *
 800574c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005750:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8005850 <Hils_Ctrl_Block+0x1250>
 8005754:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005758:	ed87 7b48 	vstr	d7, [r7, #288]	@ 0x120
   *  Constant: 'Constant26' (':6343')
   *  DataStoreRead: 'Data Store Read2' (':6088')
   *  DataStoreRead: 'Data Store Read30' (':5987')
   *  DataTypeConversion: 'Data Type Conversion4' (':5998')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning) == 0)
 800575c:	4b3e      	ldr	r3, [pc, #248]	@ (8005858 <Hils_Ctrl_Block+0x1258>)
 800575e:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	@ 0x1a4
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <Hils_Ctrl_Block+0x1174>
  {
    rtb_MultiportSwitch10 = 0.0;
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
 8005772:	e006      	b.n	8005782 <Hils_Ctrl_Block+0x1182>
  }
  else
  {
    rtb_MultiportSwitch10 = (real_T)
      Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_SubCy01Drv;
 8005774:	4b38      	ldr	r3, [pc, #224]	@ (8005858 <Hils_Ctrl_Block+0x1258>)
 8005776:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
    rtb_MultiportSwitch10 = (real_T)
 800577a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800577e:	ed87 7b42 	vstr	d7, [r7, #264]	@ 0x108
   *  Constant: 'Constant34' (':6863')
   *  RelationalOperator: 'u_GTE_up' (':6823:7')
   *  RelationalOperator: 'u_GT_lo' (':6823:8')
   *  Switch: 'Switch1' (':6823:6')
   */
  if (rtb_MultiportSwitch10 >= 1.5)
 8005782:	ed97 7b42 	vldr	d7, [r7, #264]	@ 0x108
 8005786:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800578a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800578e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005792:	db05      	blt.n	80057a0 <Hils_Ctrl_Block+0x11a0>
  {
    rtb_Gain21 = 1.5;
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	4b30      	ldr	r3, [pc, #192]	@ (800585c <Hils_Ctrl_Block+0x125c>)
 800579a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 800579e:	e012      	b.n	80057c6 <Hils_Ctrl_Block+0x11c6>
  }
  else if (rtb_MultiportSwitch10 > -1.5)
 80057a0:	ed97 7b42 	vldr	d7, [r7, #264]	@ 0x108
 80057a4:	eebf 6b08 	vmov.f64	d6, #248	@ 0xbfc00000 -1.5
 80057a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80057ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b0:	dd04      	ble.n	80057bc <Hils_Ctrl_Block+0x11bc>
  {
    /* Switch: 'Switch1' (':6823:6') */
    rtb_Gain21 = rtb_MultiportSwitch10;
 80057b2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80057b6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 80057ba:	e004      	b.n	80057c6 <Hils_Ctrl_Block+0x11c6>
  }
  else
  {
    rtb_Gain21 = -1.5;
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	4b27      	ldr	r3, [pc, #156]	@ (8005860 <Hils_Ctrl_Block+0x1260>)
 80057c2:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
   *  DataTypeConversion: 'Data Type Conversion57' (':6821')
   *  Product: 'Product' (':6819')
   *  Sum: 'Diff' (':6823:4')
   */
  rtb_MultiportSwitch10 = 0.1 * (((real_T)
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare02) * (rtb_MultiportSwitch10 -
 80057c6:	4b24      	ldr	r3, [pc, #144]	@ (8005858 <Hils_Ctrl_Block+0x1258>)
 80057c8:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
  rtb_MultiportSwitch10 = 0.1 * (((real_T)
 80057cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare02) * (rtb_MultiportSwitch10 -
 80057d0:	ed97 5b42 	vldr	d5, [r7, #264]	@ 0x108
 80057d4:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 80057d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80057dc:	ee26 7b07 	vmul.f64	d7, d6, d7
  rtb_MultiportSwitch10 = 0.1 * (((real_T)
 80057e0:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 8005850 <Hils_Ctrl_Block+0x1250>
 80057e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80057e8:	ed87 7b42 	vstr	d7, [r7, #264]	@ 0x108
   *  Constant: 'Constant27' (':6346')
   *  DataStoreRead: 'Data Store Read2' (':6088')
   *  DataStoreRead: 'Data Store Read30' (':5987')
   *  DataTypeConversion: 'Data Type Conversion5' (':5999')
   */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning) == 0)
 80057ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005858 <Hils_Ctrl_Block+0x1258>)
 80057ee:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	@ 0x1a4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <Hils_Ctrl_Block+0x1204>
  {
    rtb_MultiportSwitch11 = 0.0;
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
 8005802:	e006      	b.n	8005812 <Hils_Ctrl_Block+0x1212>
  }
  else
  {
    rtb_MultiportSwitch11 = (real_T)
      Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_SubCy02Drv;
 8005804:	4b14      	ldr	r3, [pc, #80]	@ (8005858 <Hils_Ctrl_Block+0x1258>)
 8005806:	edd3 7a57 	vldr	s15, [r3, #348]	@ 0x15c
    rtb_MultiportSwitch11 = (real_T)
 800580a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800580e:	ed87 7b40 	vstr	d7, [r7, #256]	@ 0x100
   *  Constant: 'Constant34' (':6863')
   *  RelationalOperator: 'u_GTE_up' (':6827:7')
   *  RelationalOperator: 'u_GT_lo' (':6827:8')
   *  Switch: 'Switch1' (':6827:6')
   */
  if (rtb_MultiportSwitch11 >= 1.5)
 8005812:	ed97 7b40 	vldr	d7, [r7, #256]	@ 0x100
 8005816:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800581a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800581e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005822:	db05      	blt.n	8005830 <Hils_Ctrl_Block+0x1230>
  {
    rtb_Gain21 = 1.5;
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <Hils_Ctrl_Block+0x125c>)
 800582a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 800582e:	e01e      	b.n	800586e <Hils_Ctrl_Block+0x126e>
  }
  else if (rtb_MultiportSwitch11 > -1.5)
 8005830:	ed97 7b40 	vldr	d7, [r7, #256]	@ 0x100
 8005834:	eebf 6b08 	vmov.f64	d6, #248	@ 0xbfc00000 -1.5
 8005838:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800583c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005840:	dd10      	ble.n	8005864 <Hils_Ctrl_Block+0x1264>
  {
    /* Switch: 'Switch1' (':6827:6') */
    rtb_Gain21 = rtb_MultiportSwitch11;
 8005842:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8005846:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 800584a:	e010      	b.n	800586e <Hils_Ctrl_Block+0x126e>
 800584c:	f3af 8000 	nop.w
 8005850:	9999999a 	.word	0x9999999a
 8005854:	3fb99999 	.word	0x3fb99999
 8005858:	200008e8 	.word	0x200008e8
 800585c:	3ff80000 	.word	0x3ff80000
 8005860:	bff80000 	.word	0xbff80000
  }
  else
  {
    rtb_Gain21 = -1.5;
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	4bcb      	ldr	r3, [pc, #812]	@ (8005b98 <Hils_Ctrl_Block+0x1598>)
 800586a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
   *  DataTypeConversion: 'Data Type Conversion57' (':6821')
   *  Product: 'Product1' (':6822')
   *  Sum: 'Diff' (':6827:4')
   */
  rtb_MultiportSwitch11 = 0.1 * (((real_T)
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare02) * (rtb_MultiportSwitch11 -
 800586e:	4bcb      	ldr	r3, [pc, #812]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 8005870:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
  rtb_MultiportSwitch11 = 0.1 * (((real_T)
 8005874:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare02) * (rtb_MultiportSwitch11 -
 8005878:	ed97 5b40 	vldr	d5, [r7, #256]	@ 0x100
 800587c:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005880:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005884:	ee26 7b07 	vmul.f64	d7, d6, d7
  rtb_MultiportSwitch11 = 0.1 * (((real_T)
 8005888:	ed9f 6ba9 	vldr	d6, [pc, #676]	@ 8005b30 <Hils_Ctrl_Block+0x1530>
 800588c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005890:	ed87 7b40 	vstr	d7, [r7, #256]	@ 0x100
   *  DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6412:2')
   *  Gain: 'Gain1' (':6403')
   *  Gain: 'Gain2' (':6404')
   */
  rtb_Q_fedcm3s_a = (183.3 * (19.894 * (0.14536400084676654 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_hp))) -
 8005894:	4bc1      	ldr	r3, [pc, #772]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 8005896:	ed93 7ba0 	vldr	d7, [r3, #640]	@ 0x280
  rtb_Q_fedcm3s_a = (183.3 * (19.894 * (0.14536400084676654 *
 800589a:	ed9f 6ba7 	vldr	d6, [pc, #668]	@ 8005b38 <Hils_Ctrl_Block+0x1538>
 800589e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80058a2:	ed9f 6ba7 	vldr	d6, [pc, #668]	@ 8005b40 <Hils_Ctrl_Block+0x1540>
 80058a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80058aa:	ed9f 6ba7 	vldr	d6, [pc, #668]	@ 8005b48 <Hils_Ctrl_Block+0x1548>
 80058ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	f107 0208 	add.w	r2, r7, #8
 80058ba:	ed92 7b00 	vldr	d7, [r2]
 80058be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80058c2:	ed83 7b00 	vstr	d7, [r3]
    rtb_Q_fedcm3s_a;

  /* DataTypeConversion: 'Data Type Conversion55' (':6611') incorporates:
   *  DataStoreWrite: 'Data Store Write10' (':6609')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.SubCy02_Pos = (real32_T)rtb_mm_jn;
 80058c6:	ed97 7b2e 	vldr	d7, [r7, #184]	@ 0xb8
 80058ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80058ce:	4bb3      	ldr	r3, [pc, #716]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 80058d0:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4

  /* DataTypeConversion: 'Data Type Conversion54' (':6610') incorporates:
   *  DataStoreWrite: 'Data Store Write10' (':6609')
   *  Gain: 'Gain35' (':6608')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.SubCy02_Vel = (real32_T)((real_T)(1000.0 *
 80058d4:	f107 0318 	add.w	r3, r7, #24
 80058d8:	ed93 7b00 	vldr	d7, [r3]
 80058dc:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8005b50 <Hils_Ctrl_Block+0x1550>
 80058e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80058e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80058e8:	4bac      	ldr	r3, [pc, #688]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 80058ea:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8
   *  DataStoreWrite: 'Data Store Write5' (':6561')
   *  UnitConversion: 'Unit Conversion' (':6624:4')
   */
  /* Unit Conversion - from: rad/s to: rpm
     Expression: output = (9.5493*input) + (0) */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.WinchDrum_Vel = (real32_T)((real_T)
 80058ee:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 80058f2:	ed9f 6b99 	vldr	d6, [pc, #612]	@ 8005b58 <Hils_Ctrl_Block+0x1558>
 80058f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80058fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80058fe:	4ba7      	ldr	r3, [pc, #668]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 8005900:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
    (9.5492965855137211 * rtb_DiscreteTransferFcn));

  /* DataTypeConversion: 'Data Type Conversion45' (':6568') incorporates:
   *  DataStoreWrite: 'Data Store Write5' (':6561')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.WinchDrun_Angle = (real32_T)
 8005904:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8005908:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800590c:	4ba3      	ldr	r3, [pc, #652]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 800590e:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
   *  DataStoreWrite: 'Data Store Write6' (':6573')
   *  Gain: 'Gain9' (':6857')
   *  Gain: 'Gain23' (':6859')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.Align_Vel = (real32_T)((real_T)
    (0.0015915494309189536 * (628.31853071795865 * rtb_DiscreteTransferFcn_ps)));
 8005912:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 8005916:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 8005b60 <Hils_Ctrl_Block+0x1560>
 800591a:	ee27 7b06 	vmul.f64	d7, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.Align_Vel = (real32_T)((real_T)
 800591e:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 8005b68 <Hils_Ctrl_Block+0x1568>
 8005922:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005926:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800592a:	4b9c      	ldr	r3, [pc, #624]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 800592c:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8

  /* DataTypeConversion: 'Data Type Conversion47' (':6575') incorporates:
   *  DataStoreWrite: 'Data Store Write6' (':6573')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.Align_Angle = (real32_T)
 8005930:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8005934:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005938:	4b98      	ldr	r3, [pc, #608]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 800593a:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4

  /* DataTypeConversion: 'Data Type Conversion48' (':6597') incorporates:
   *  DataStoreWrite: 'Data Store Write7' (':6596')
   *  Gain: 'Gain32' (':6599')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.MainCy01_Vel = (real32_T)((real_T)(1000.0
 800593e:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8005942:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 8005b50 <Hils_Ctrl_Block+0x1550>
 8005946:	ee27 7b06 	vmul.f64	d7, d7, d6
 800594a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800594e:	4b93      	ldr	r3, [pc, #588]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 8005950:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
    * rtb_DiscreteTransferFcn_i));

  /* DataTypeConversion: 'Data Type Conversion49' (':6598') incorporates:
   *  DataStoreWrite: 'Data Store Write7' (':6596')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.MainCy01_Pos = (real32_T)rtb_mm_nv;
 8005954:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8005958:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800595c:	4b8f      	ldr	r3, [pc, #572]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 800595e:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

  /* DataTypeConversion: 'Data Type Conversion50' (':6602') incorporates:
   *  DataStoreWrite: 'Data Store Write8' (':6601')
   *  Gain: 'Gain33' (':6600')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.MainCy02_Vel = (real32_T)((real_T)(1000.0
 8005962:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8005966:	ed9f 6b7a 	vldr	d6, [pc, #488]	@ 8005b50 <Hils_Ctrl_Block+0x1550>
 800596a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800596e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005972:	4b8a      	ldr	r3, [pc, #552]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 8005974:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8
    * rtb_DiscreteTransferFcn_g));

  /* DataTypeConversion: 'Data Type Conversion51' (':6603') incorporates:
   *  DataStoreWrite: 'Data Store Write8' (':6601')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.MainCy02_Pos = (real32_T)rtb_mm;
 8005978:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 800597c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005980:	4b86      	ldr	r3, [pc, #536]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 8005982:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4

  /* DataTypeConversion: 'Data Type Conversion52' (':6606') incorporates:
   *  DataStoreWrite: 'Data Store Write9' (':6605')
   *  Gain: 'Gain34' (':6604')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.SubCy01_Vel = (real32_T)((real_T)(1000.0 *
 8005986:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800598a:	ed93 7b00 	vldr	d7, [r3]
 800598e:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 8005b50 <Hils_Ctrl_Block+0x1550>
 8005992:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005996:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800599a:	4b80      	ldr	r3, [pc, #512]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 800599c:	edc3 7a38 	vstr	s15, [r3, #224]	@ 0xe0
    rtb_DiscreteTransferFcn_l));

  /* DataTypeConversion: 'Data Type Conversion53' (':6607') incorporates:
   *  DataStoreWrite: 'Data Store Write9' (':6605')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.SubCy01_Pos = (real32_T)rtb_mm_e;
 80059a0:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 80059a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80059a8:	4b7c      	ldr	r3, [pc, #496]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 80059aa:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5934:2') */
  rtb_Gain21 = 0.0039192902718367265 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_oh;
 80059ae:	4b7b      	ldr	r3, [pc, #492]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 80059b0:	ed93 7ba2 	vldr	d7, [r3, #648]	@ 0x288
  rtb_Gain21 = 0.0039192902718367265 *
 80059b4:	ed9f 6b6e 	vldr	d6, [pc, #440]	@ 8005b70 <Hils_Ctrl_Block+0x1570>
 80059b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80059bc:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118

  /* Saturate: 'Cmd_Xv_Limit (0:close,  1:Positive Full Open,  -1:Negitive Full Open)' (':5920') */
  if (rtb_Gain21 > 1.0)
 80059c0:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 80059c4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80059c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80059cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d0:	dd05      	ble.n	80059de <Hils_Ctrl_Block+0x13de>
  {
    rtb_Gain21 = 1.0;
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	4b72      	ldr	r3, [pc, #456]	@ (8005ba0 <Hils_Ctrl_Block+0x15a0>)
 80059d8:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 80059dc:	e00d      	b.n	80059fa <Hils_Ctrl_Block+0x13fa>
  }
  else
  {
    if (rtb_Gain21 < -1.0)
 80059de:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 80059e2:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80059e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80059ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ee:	d504      	bpl.n	80059fa <Hils_Ctrl_Block+0x13fa>
    {
      rtb_Gain21 = -1.0;
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	4b6b      	ldr	r3, [pc, #428]	@ (8005ba4 <Hils_Ctrl_Block+0x15a4>)
 80059f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
  /* Sum: 'Sum3' (':5932') incorporates:
   *  Gain: 'Gain1' (':5924')
   *  Gain: 'Gain4' (':5926')
   *  Gain: 'm//s --> cm//s' (':5935')
   */
  rtb_DiscreteTransferFcn_a = (1218.0 * rtb_Gain21) - (314.16 * (100.0 *
 80059fa:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 80059fe:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8005b78 <Hils_Ctrl_Block+0x1578>
 8005a02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005a06:	f107 0318 	add.w	r3, r7, #24
 8005a0a:	ed93 7b00 	vldr	d7, [r3]
 8005a0e:	ed9f 5b5c 	vldr	d5, [pc, #368]	@ 8005b80 <Hils_Ctrl_Block+0x1580>
 8005a12:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005a16:	ed9f 5b5c 	vldr	d5, [pc, #368]	@ 8005b88 <Hils_Ctrl_Block+0x1588>
 8005a1a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005a1e:	f107 0318 	add.w	r3, r7, #24
 8005a22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a26:	ed83 7b00 	vstr	d7, [r3]
    rtb_DiscreteTransferFcn_a));

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5876:2') */
  rtb_Gain21 = 0.0039192902718367265 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_m4;
 8005a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 8005a2c:	ed93 7ba4 	vldr	d7, [r3, #656]	@ 0x290
  rtb_Gain21 = 0.0039192902718367265 *
 8005a30:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 8005b70 <Hils_Ctrl_Block+0x1570>
 8005a34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005a38:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118

  /* Saturate: 'Cmd_Xv_Limit (0:close,  1:Positive Full Open,  -1:Negitive Full Open)' (':5862') */
  if (rtb_Gain21 > 1.0)
 8005a3c:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005a40:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005a44:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a4c:	dd05      	ble.n	8005a5a <Hils_Ctrl_Block+0x145a>
  {
    rtb_Gain21 = 1.0;
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	4b53      	ldr	r3, [pc, #332]	@ (8005ba0 <Hils_Ctrl_Block+0x15a0>)
 8005a54:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 8005a58:	e00d      	b.n	8005a76 <Hils_Ctrl_Block+0x1476>
  }
  else
  {
    if (rtb_Gain21 < -1.0)
 8005a5a:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005a5e:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8005a62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6a:	d504      	bpl.n	8005a76 <Hils_Ctrl_Block+0x1476>
    {
      rtb_Gain21 = -1.0;
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	4b4c      	ldr	r3, [pc, #304]	@ (8005ba4 <Hils_Ctrl_Block+0x15a4>)
 8005a72:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
  /* Sum: 'Sum3' (':5874') incorporates:
   *  Gain: 'Gain1' (':5866')
   *  Gain: 'Gain4' (':5868')
   *  Gain: 'm//s --> cm//s' (':5877')
   */
  rtb_DiscreteTransferFcn_l = (1218.0 * rtb_Gain21) - (314.16 * (100.0 *
 8005a76:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005a7a:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8005b78 <Hils_Ctrl_Block+0x1578>
 8005a7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005a82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005a86:	ed93 7b00 	vldr	d7, [r3]
 8005a8a:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8005b80 <Hils_Ctrl_Block+0x1580>
 8005a8e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005a92:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8005b88 <Hils_Ctrl_Block+0x1588>
 8005a96:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005a9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005a9e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005aa2:	ed83 7b00 	vstr	d7, [r3]
  /* Sum: 'Add2' (':6776') incorporates:
   *  Gain: 'Gain1' (':6815')
   *  Gain: 'Gain6' (':6798')
   *  Gain: 'Gain5' (':5902')
   */
  rtb_Prssure_Limit = (314.16 * rtb_Prssure_Limit) - (0.0 * (25.0 * rtb_Gain11));
 8005aa6:	ed97 7b3a 	vldr	d7, [r7, #232]	@ 0xe8
 8005aaa:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8005b88 <Hils_Ctrl_Block+0x1588>
 8005aae:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005ab2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8005ab6:	eeb3 5b09 	vmov.f64	d5, #57	@ 0x41c80000  25.0
 8005aba:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005abe:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8005b90 <Hils_Ctrl_Block+0x1590>
 8005ac2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005ac6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005aca:	ed87 7b3a 	vstr	d7, [r7, #232]	@ 0xe8
  /* Sum: 'Add1' (':6775') incorporates:
   *  Gain: 'Gain2' (':6816')
   *  Gain: 'Gain5' (':6797')
   *  Gain: 'Gain5' (':5844')
   */
  rtb_Prssure_Limit_mc = (0.0 - (0.0 * (25.0 * rtb_Gain10))) + (314.16 *
 8005ace:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8005ad2:	eeb3 6b09 	vmov.f64	d6, #57	@ 0x41c80000  25.0
 8005ad6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ada:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8005b90 <Hils_Ctrl_Block+0x1590>
 8005ade:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ae2:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 8005b90 <Hils_Ctrl_Block+0x1590>
 8005ae6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005aea:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 8005aee:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 8005b88 <Hils_Ctrl_Block+0x1588>
 8005af2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005af6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005afa:	ed87 7b34 	vstr	d7, [r7, #208]	@ 0xd0
    rtb_Prssure_Limit_mc);

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5908:2') */
  rtb_Gain21 = 0.0039192902718367265 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g1m;
 8005afe:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <Hils_Ctrl_Block+0x159c>)
 8005b00:	ed93 7ba6 	vldr	d7, [r3, #664]	@ 0x298
  rtb_Gain21 = 0.0039192902718367265 *
 8005b04:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8005b70 <Hils_Ctrl_Block+0x1570>
 8005b08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005b0c:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118

  /* Saturate: 'Cmd_Xv_Limit (0:close,  1:Positive Full Open,  -1:Negitive Full Open)' (':5895') */
  if (rtb_Gain21 > 1.0)
 8005b10:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005b14:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005b18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b20:	dd42      	ble.n	8005ba8 <Hils_Ctrl_Block+0x15a8>
  {
    rtb_Gain21 = 1.0;
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	4b1e      	ldr	r3, [pc, #120]	@ (8005ba0 <Hils_Ctrl_Block+0x15a0>)
 8005b28:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 8005b2c:	e04a      	b.n	8005bc4 <Hils_Ctrl_Block+0x15c4>
 8005b2e:	bf00      	nop
 8005b30:	9999999a 	.word	0x9999999a
 8005b34:	3fb99999 	.word	0x3fb99999
 8005b38:	9ed387b2 	.word	0x9ed387b2
 8005b3c:	3fc29b49 	.word	0x3fc29b49
 8005b40:	2f1a9fbe 	.word	0x2f1a9fbe
 8005b44:	4033e4dd 	.word	0x4033e4dd
 8005b48:	9999999a 	.word	0x9999999a
 8005b4c:	4066e999 	.word	0x4066e999
 8005b50:	00000000 	.word	0x00000000
 8005b54:	408f4000 	.word	0x408f4000
 8005b58:	66ed2bfb 	.word	0x66ed2bfb
 8005b5c:	4023193d 	.word	0x4023193d
 8005b60:	59d5433b 	.word	0x59d5433b
 8005b64:	4083a28c 	.word	0x4083a28c
 8005b68:	305e714c 	.word	0x305e714c
 8005b6c:	3f5a1371 	.word	0x3f5a1371
 8005b70:	78a838b1 	.word	0x78a838b1
 8005b74:	3f700dac 	.word	0x3f700dac
 8005b78:	00000000 	.word	0x00000000
 8005b7c:	40930800 	.word	0x40930800
 8005b80:	00000000 	.word	0x00000000
 8005b84:	40590000 	.word	0x40590000
 8005b88:	5c28f5c3 	.word	0x5c28f5c3
 8005b8c:	4073a28f 	.word	0x4073a28f
	...
 8005b98:	bff80000 	.word	0xbff80000
 8005b9c:	200008e8 	.word	0x200008e8
 8005ba0:	3ff00000 	.word	0x3ff00000
 8005ba4:	bff00000 	.word	0xbff00000
  }
  else
  {
    if (rtb_Gain21 < -1.0)
 8005ba8:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005bac:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8005bb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb8:	d504      	bpl.n	8005bc4 <Hils_Ctrl_Block+0x15c4>
    {
      rtb_Gain21 = -1.0;
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	4bb0      	ldr	r3, [pc, #704]	@ (8005e80 <Hils_Ctrl_Block+0x1880>)
 8005bc0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
  /* Sum: 'Sum3' (':5907') incorporates:
   *  Gain: 'Gain1' (':5899')
   *  Gain: 'Gain4' (':5901')
   *  Gain: 'm//s --> cm//s' (':5910')
   */
  rtb_DiscreteTransferFcn_g = (1218.0 * rtb_Gain21) - (314.16 * (100.0 *
 8005bc4:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005bc8:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8005e28 <Hils_Ctrl_Block+0x1828>
 8005bcc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005bd0:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8005bd4:	ed9f 5b96 	vldr	d5, [pc, #600]	@ 8005e30 <Hils_Ctrl_Block+0x1830>
 8005bd8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005bdc:	ed9f 5b96 	vldr	d5, [pc, #600]	@ 8005e38 <Hils_Ctrl_Block+0x1838>
 8005be0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005be4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005be8:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    rtb_DiscreteTransferFcn_g));

  /* DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5850:2') */
  rtb_Gain21 = 0.0039192902718367265 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_hf;
 8005bec:	4ba5      	ldr	r3, [pc, #660]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005bee:	ed93 7ba8 	vldr	d7, [r3, #672]	@ 0x2a0
  rtb_Gain21 = 0.0039192902718367265 *
 8005bf2:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 8005e40 <Hils_Ctrl_Block+0x1840>
 8005bf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005bfa:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118

  /* Saturate: 'Cmd_Xv_Limit (0:close,  1:Positive Full Open,  -1:Negitive Full Open)' (':5837') */
  if (rtb_Gain21 > 1.0)
 8005bfe:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005c02:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005c06:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0e:	dd05      	ble.n	8005c1c <Hils_Ctrl_Block+0x161c>
  {
    rtb_Gain21 = 1.0;
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	4b9c      	ldr	r3, [pc, #624]	@ (8005e88 <Hils_Ctrl_Block+0x1888>)
 8005c16:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
 8005c1a:	e00d      	b.n	8005c38 <Hils_Ctrl_Block+0x1638>
  }
  else
  {
    if (rtb_Gain21 < -1.0)
 8005c1c:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005c20:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8005c24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2c:	d504      	bpl.n	8005c38 <Hils_Ctrl_Block+0x1638>
    {
      rtb_Gain21 = -1.0;
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	4b93      	ldr	r3, [pc, #588]	@ (8005e80 <Hils_Ctrl_Block+0x1880>)
 8005c34:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
  /* Sum: 'Sum3' (':5849') incorporates:
   *  Gain: 'Gain1' (':5841')
   *  Gain: 'Gain4' (':5843')
   *  Gain: 'm//s --> cm//s' (':5852')
   */
  rtb_DiscreteTransferFcn_i = (1218.0 * rtb_Gain21) - (314.16 * (100.0 *
 8005c38:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005c3c:	ed9f 6b7a 	vldr	d6, [pc, #488]	@ 8005e28 <Hils_Ctrl_Block+0x1828>
 8005c40:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005c44:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8005c48:	ed9f 5b79 	vldr	d5, [pc, #484]	@ 8005e30 <Hils_Ctrl_Block+0x1830>
 8005c4c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005c50:	ed9f 5b79 	vldr	d5, [pc, #484]	@ 8005e38 <Hils_Ctrl_Block+0x1838>
 8005c54:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005c58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c5c:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
    rtb_DiscreteTransferFcn_i));

  /* Gain: 'Gain5' (':6407') */
  rtb_Gain2_m *= 278.04;
 8005c60:	ed97 7b44 	vldr	d7, [r7, #272]	@ 0x110
 8005c64:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8005e48 <Hils_Ctrl_Block+0x1848>
 8005c68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c6c:	ed87 7b44 	vstr	d7, [r7, #272]	@ 0x110

  /* Gain: 'Gain2' (':6370') */
  rtb_Gain2_m *= 0.5;
 8005c70:	ed97 7b44 	vldr	d7, [r7, #272]	@ 0x110
 8005c74:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8005c78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c7c:	ed87 7b44 	vstr	d7, [r7, #272]	@ 0x110

  /* Gain: 'Gain6' (':6374') */
  /* Unit Conversion - from: deg to: rad
     Expression: output = (0.0174533*input) + (0) */
  rtb_UnitConversion_a = 5.0 * rtb_UnitConversion_tmp;
 8005c80:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8005c84:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8005c88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c8c:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68

  /* DiscreteIntegrator: 'Discrete-Time Integrator1' (':6363') */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LO_n) !=
 8005c90:	4b7c      	ldr	r3, [pc, #496]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005c92:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <Hils_Ctrl_Block+0x16a4>
      0)
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_j =
 8005c9a:	497a      	ldr	r1, [pc, #488]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005c9c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005ca0:	e9c1 23aa 	strd	r2, r3, [r1, #680]	@ 0x2a8
      rtb_UnitConversion_a;
  }

  if (rtb_LogicalOperator ||
 8005ca4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <Hils_Ctrl_Block+0x16b6>
      (Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevR_k != 0))
 8005cac:	4b75      	ldr	r3, [pc, #468]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005cae:	f993 330d 	ldrsb.w	r3, [r3, #781]	@ 0x30d
  if (rtb_LogicalOperator ||
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <Hils_Ctrl_Block+0x16c0>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_j =
 8005cb6:	4973      	ldr	r1, [pc, #460]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005cb8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005cbc:	e9c1 23aa 	strd	r2, r3, [r1, #680]	@ 0x2a8
      rtb_UnitConversion_a;
  }

  /* DiscreteIntegrator: 'Discrete-Time Integrator1' (':6363') */
  rtb_DiscreteTransferFcn_b =
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_j + (0.0025 *
 8005cc0:	4b70      	ldr	r3, [pc, #448]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005cc2:	ed93 6baa 	vldr	d6, [r3, #680]	@ 0x2a8
 8005cc6:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8005cca:	ed9f 5b61 	vldr	d5, [pc, #388]	@ 8005e50 <Hils_Ctrl_Block+0x1850>
 8005cce:	ee27 7b05 	vmul.f64	d7, d7, d5
  rtb_DiscreteTransferFcn_b =
 8005cd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005cd6:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    rtb_DiscreteTransferFcn_b);

  /* Gain: 'Gain9' (':6377') */
  rtb_Gain21 = 5.0 * rtb_UnitConversion;
 8005cda:	ed97 7b24 	vldr	d7, [r7, #144]	@ 0x90
 8005cde:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8005ce2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ce6:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118

  /* Gain: 'Gain4' (':6372') incorporates:
   *  Gain: 'Gain7' (':6375')
   *  Sum: 'Sum2' (':6382')
   */
  rtb_DiscreteTransferFcn = 150000.0 * (0.04 * (rtb_DiscreteTransferFcn_b -
 8005cea:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8005cee:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005cf2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005cf6:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8005e58 <Hils_Ctrl_Block+0x1858>
 8005cfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005cfe:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8005e60 <Hils_Ctrl_Block+0x1860>
 8005d02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d06:	ed87 7b2a 	vstr	d7, [r7, #168]	@ 0xa8
    rtb_Gain21));

  /* Sum: 'Sum3' (':6383') */
  rtb_UnitConversion_k = rtb_Gain2_m - rtb_DiscreteTransferFcn;
 8005d0a:	ed97 6b44 	vldr	d6, [r7, #272]	@ 0x110
 8005d0e:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 8005d12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d16:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88

  /* DiscreteIntegrator: 'Discrete-Time Integrator' (':6362') */
  if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOA_n) !=
 8005d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005d1c:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <Hils_Ctrl_Block+0x172e>
      0)
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_f =
 8005d24:	4957      	ldr	r1, [pc, #348]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005d26:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005d2a:	e9c1 23ac 	strd	r2, r3, [r1, #688]	@ 0x2b0
      rtb_UnitConversion_a;
  }

  if (rtb_LogicalOperator ||
 8005d2e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d104      	bne.n	8005d40 <Hils_Ctrl_Block+0x1740>
      (Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRe_p != 0))
 8005d36:	4b53      	ldr	r3, [pc, #332]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005d38:	f993 330e 	ldrsb.w	r3, [r3, #782]	@ 0x30e
  if (rtb_LogicalOperator ||
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <Hils_Ctrl_Block+0x174a>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_f =
 8005d40:	4950      	ldr	r1, [pc, #320]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005d42:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005d46:	e9c1 23ac 	strd	r2, r3, [r1, #688]	@ 0x2b0
      rtb_UnitConversion_a;
  }

  /* DiscreteIntegrator: 'Discrete-Time Integrator' (':6362') */
  rtb_DiscreteTransferFcn_o =
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_f + (0.0025 *
 8005d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005d4c:	ed93 6bac 	vldr	d6, [r3, #688]	@ 0x2b0
 8005d50:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8005d54:	ed9f 5b3e 	vldr	d5, [pc, #248]	@ 8005e50 <Hils_Ctrl_Block+0x1850>
 8005d58:	ee27 7b05 	vmul.f64	d7, d7, d5
  rtb_DiscreteTransferFcn_o =
 8005d5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005d60:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60

  /* Gain: 'Gain1' (':6369') incorporates:
   *  Gain: 'Gain3' (':6371')
   *  Sum: 'Sum1' (':6381')
   */
  rtb_Gain21 = 150000.0 * (0.04 * (rtb_DiscreteTransferFcn_o - rtb_Gain21));
 8005d64:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8005d68:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005d6c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d70:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8005e58 <Hils_Ctrl_Block+0x1858>
 8005d74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d78:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8005e60 <Hils_Ctrl_Block+0x1860>
 8005d7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d80:	ed87 7b46 	vstr	d7, [r7, #280]	@ 0x118

  /* Sum: 'Sum7' (':6386') */
  rtb_Gain2_m -= rtb_Gain21;
 8005d84:	ed97 6b44 	vldr	d6, [r7, #272]	@ 0x110
 8005d88:	ed97 7b46 	vldr	d7, [r7, #280]	@ 0x118
 8005d8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d90:	ed87 7b44 	vstr	d7, [r7, #272]	@ 0x110
   *  Gain: 'Gain5' (':6373')
   *  Gain: 'Gain8' (':6376')
   *  Sum: 'Sum4' (':6384')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states = (5.0 * (0.95 *
    (rtb_Gain21 + rtb_DiscreteTransferFcn))) - (-0.99778579901470255 *
 8005d94:	ed97 6b46 	vldr	d6, [r7, #280]	@ 0x118
 8005d98:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 8005d9c:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states = (5.0 * (0.95 *
 8005da0:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8005e68 <Hils_Ctrl_Block+0x1868>
 8005da4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005da8:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8005dac:	ee27 6b06 	vmul.f64	d6, d7, d6
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states);
 8005db0:	4b34      	ldr	r3, [pc, #208]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005db2:	ed93 7b76 	vldr	d7, [r3, #472]	@ 0x1d8
    (rtb_Gain21 + rtb_DiscreteTransferFcn))) - (-0.99778579901470255 *
 8005db6:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8005e70 <Hils_Ctrl_Block+0x1870>
 8005dba:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005dbe:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states = (5.0 * (0.95 *
 8005dc2:	4b30      	ldr	r3, [pc, #192]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005dc4:	ed83 7b76 	vstr	d7, [r3, #472]	@ 0x1d8

  /* Update for DiscreteIntegrator: 'Discrete-Time Integrator2' (':6364') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator2_IC_LOAD = 0U;
 8005dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2316 	strb.w	r2, [r3, #790]	@ 0x316
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator2_DSTATE =
 8005dd0:	492c      	ldr	r1, [pc, #176]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005dd2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8005dd6:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
    rtb_UnitConversion;
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator2_PrevRes = (int8_T)
 8005dda:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <Hils_Ctrl_Block+0x17e6>
 8005de2:	2201      	movs	r2, #1
 8005de4:	e000      	b.n	8005de8 <Hils_Ctrl_Block+0x17e8>
 8005de6:	2200      	movs	r2, #0
 8005de8:	4b26      	ldr	r3, [pc, #152]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005dea:	f883 2306 	strb.w	r2, [r3, #774]	@ 0x306
    (rtb_LogicalOperator ? 1 : 0);

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6457:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g =
    rtb_MultiportSwitch13 - (-0.99843872006759038 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g);
 8005dee:	4b25      	ldr	r3, [pc, #148]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005df0:	ed93 7b7a 	vldr	d7, [r3, #488]	@ 0x1e8
    rtb_MultiportSwitch13 - (-0.99843872006759038 *
 8005df4:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8005e78 <Hils_Ctrl_Block+0x1878>
 8005df8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005dfc:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8005e00:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g =
 8005e04:	4b1f      	ldr	r3, [pc, #124]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005e06:	ed83 7b7a 	vstr	d7, [r3, #488]	@ 0x1e8

  /* Update for DiscreteIntegrator: 'Discrete-Time Integrator1' (':6434') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LOAD = 0U;
 8005e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2317 	strb.w	r2, [r3, #791]	@ 0x317
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTATE = Align_Load_Pos;
 8005e12:	491c      	ldr	r1, [pc, #112]	@ (8005e84 <Hils_Ctrl_Block+0x1884>)
 8005e14:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005e18:	e9c1 237c 	strd	r2, r3, [r1, #496]	@ 0x1f0
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevRes = (int8_T)
 8005e1c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d033      	beq.n	8005e8c <Hils_Ctrl_Block+0x188c>
 8005e24:	2201      	movs	r2, #1
 8005e26:	e032      	b.n	8005e8e <Hils_Ctrl_Block+0x188e>
 8005e28:	00000000 	.word	0x00000000
 8005e2c:	40930800 	.word	0x40930800
 8005e30:	00000000 	.word	0x00000000
 8005e34:	40590000 	.word	0x40590000
 8005e38:	5c28f5c3 	.word	0x5c28f5c3
 8005e3c:	4073a28f 	.word	0x4073a28f
 8005e40:	78a838b1 	.word	0x78a838b1
 8005e44:	3f700dac 	.word	0x3f700dac
 8005e48:	d70a3d71 	.word	0xd70a3d71
 8005e4c:	407160a3 	.word	0x407160a3
 8005e50:	47ae147b 	.word	0x47ae147b
 8005e54:	3f647ae1 	.word	0x3f647ae1
 8005e58:	47ae147b 	.word	0x47ae147b
 8005e5c:	3fa47ae1 	.word	0x3fa47ae1
 8005e60:	00000000 	.word	0x00000000
 8005e64:	41024f80 	.word	0x41024f80
 8005e68:	66666666 	.word	0x66666666
 8005e6c:	3fee6666 	.word	0x3fee6666
 8005e70:	7be5cdd6 	.word	0x7be5cdd6
 8005e74:	3fefeddc 	.word	0x3fefeddc
 8005e78:	c2380346 	.word	0xc2380346
 8005e7c:	3feff335 	.word	0x3feff335
 8005e80:	bff00000 	.word	0xbff00000
 8005e84:	200008e8 	.word	0x200008e8
 8005e88:	3ff00000 	.word	0x3ff00000
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	4baa      	ldr	r3, [pc, #680]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005e90:	f883 2307 	strb.w	r2, [r3, #775]	@ 0x307
    (rtb_LogicalOperator ? 1 : 0);

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6388:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_o = rtb_Gain2_m -
    (-0.93534024285488582 *
     Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_o);
 8005e94:	4ba8      	ldr	r3, [pc, #672]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005e96:	ed93 7b7e 	vldr	d7, [r3, #504]	@ 0x1f8
    (-0.93534024285488582 *
 8005e9a:	ed9f 6b99 	vldr	d6, [pc, #612]	@ 8006100 <Hils_Ctrl_Block+0x1b00>
 8005e9e:	ee27 6b06 	vmul.f64	d6, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_o = rtb_Gain2_m -
 8005ea2:	ed97 7b44 	vldr	d7, [r7, #272]	@ 0x110
 8005ea6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005eaa:	4ba3      	ldr	r3, [pc, #652]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005eac:	ed83 7b7e 	vstr	d7, [r3, #504]	@ 0x1f8

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6387:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_a =
    rtb_UnitConversion_k - (-0.93534024285488582 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_a);
 8005eb0:	4ba1      	ldr	r3, [pc, #644]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005eb2:	ed93 7b80 	vldr	d7, [r3, #512]	@ 0x200
    rtb_UnitConversion_k - (-0.93534024285488582 *
 8005eb6:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 8006100 <Hils_Ctrl_Block+0x1b00>
 8005eba:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005ebe:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8005ec2:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_a =
 8005ec6:	4b9c      	ldr	r3, [pc, #624]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005ec8:	ed83 7b80 	vstr	d7, [r3, #512]	@ 0x200

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6456:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_i =
    rtb_DiscreteTransferFcn_f - (-0.9996154435878396 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_i);
 8005ecc:	4b9a      	ldr	r3, [pc, #616]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005ece:	ed93 7b82 	vldr	d7, [r3, #520]	@ 0x208
    rtb_DiscreteTransferFcn_f - (-0.9996154435878396 *
 8005ed2:	ed9f 6b8d 	vldr	d6, [pc, #564]	@ 8006108 <Hils_Ctrl_Block+0x1b08>
 8005ed6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005eda:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8005ede:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_i =
 8005ee2:	4b95      	ldr	r3, [pc, #596]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005ee4:	ed83 7b82 	vstr	d7, [r3, #520]	@ 0x208

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6411:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g1 = rtb_Q_fedcm3s_a -
    (-0.53825375123805186 *
     Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g1);
 8005ee8:	4b93      	ldr	r3, [pc, #588]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005eea:	ed93 7b84 	vldr	d7, [r3, #528]	@ 0x210
    (-0.53825375123805186 *
 8005eee:	ed9f 6b88 	vldr	d6, [pc, #544]	@ 8006110 <Hils_Ctrl_Block+0x1b10>
 8005ef2:	ee27 6b06 	vmul.f64	d6, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g1 = rtb_Q_fedcm3s_a -
 8005ef6:	f107 0308 	add.w	r3, r7, #8
 8005efa:	ed93 7b00 	vldr	d7, [r3]
 8005efe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005f02:	4b8d      	ldr	r3, [pc, #564]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f04:	ed83 7b84 	vstr	d7, [r3, #528]	@ 0x210

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5851:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_id =
    rtb_DiscreteTransferFcn_i - (-0.024722306790190128 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_id);
 8005f08:	4b8b      	ldr	r3, [pc, #556]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f0a:	ed93 7b86 	vldr	d7, [r3, #536]	@ 0x218
    rtb_DiscreteTransferFcn_i - (-0.024722306790190128 *
 8005f0e:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8006118 <Hils_Ctrl_Block+0x1b18>
 8005f12:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005f16:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8005f1a:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_id =
 8005f1e:	4b86      	ldr	r3, [pc, #536]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f20:	ed83 7b86 	vstr	d7, [r3, #536]	@ 0x218

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6809:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_e =
    rtb_Prssure_Limit_mc - (-0.99843872006759038 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_e);
 8005f24:	4b84      	ldr	r3, [pc, #528]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f26:	ed93 7b88 	vldr	d7, [r3, #544]	@ 0x220
    rtb_Prssure_Limit_mc - (-0.99843872006759038 *
 8005f2a:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8006120 <Hils_Ctrl_Block+0x1b20>
 8005f2e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005f32:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 8005f36:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_e =
 8005f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f3c:	ed83 7b88 	vstr	d7, [r3, #544]	@ 0x220

  /* Update for DiscreteIntegrator: 'Discrete-Time Integrator' (':6780') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOADI = 0U;
 8005f40:	4b7d      	ldr	r3, [pc, #500]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE = rtb_Gain10;
 8005f48:	497b      	ldr	r1, [pc, #492]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f4e:	e9c1 238a 	strd	r2, r3, [r1, #552]	@ 0x228
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRese = (int8_T)
 8005f52:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <Hils_Ctrl_Block+0x195e>
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	e000      	b.n	8005f60 <Hils_Ctrl_Block+0x1960>
 8005f5e:	2200      	movs	r2, #0
 8005f60:	4b75      	ldr	r3, [pc, #468]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f62:	f883 2308 	strb.w	r2, [r3, #776]	@ 0x308
    (rtb_LogicalOperator ? 1 : 0);

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5909:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_d =
    rtb_DiscreteTransferFcn_g - (-0.024722306790190128 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_d);
 8005f66:	4b74      	ldr	r3, [pc, #464]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f68:	ed93 7b8c 	vldr	d7, [r3, #560]	@ 0x230
    rtb_DiscreteTransferFcn_g - (-0.024722306790190128 *
 8005f6c:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8006118 <Hils_Ctrl_Block+0x1b18>
 8005f70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005f74:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8005f78:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_d =
 8005f7c:	4b6e      	ldr	r3, [pc, #440]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f7e:	ed83 7b8c 	vstr	d7, [r3, #560]	@ 0x230

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6810:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_k = rtb_Prssure_Limit
    - (-0.99843872006759038 *
       Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_k);
 8005f82:	4b6d      	ldr	r3, [pc, #436]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f84:	ed93 7b8e 	vldr	d7, [r3, #568]	@ 0x238
    - (-0.99843872006759038 *
 8005f88:	ed9f 6b65 	vldr	d6, [pc, #404]	@ 8006120 <Hils_Ctrl_Block+0x1b20>
 8005f8c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005f90:	ed97 7b3a 	vldr	d7, [r7, #232]	@ 0xe8
 8005f94:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_k = rtb_Prssure_Limit
 8005f98:	4b67      	ldr	r3, [pc, #412]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005f9a:	ed83 7b8e 	vstr	d7, [r3, #568]	@ 0x238

  /* Update for DiscreteIntegrator: 'Discrete-Time Integrator1' (':6781') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LO_c = 0U;
 8005f9e:	4b66      	ldr	r3, [pc, #408]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2319 	strb.w	r2, [r3, #793]	@ 0x319
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_e = rtb_Gain11;
 8005fa6:	4964      	ldr	r1, [pc, #400]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005fa8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005fac:	e9c1 2390 	strd	r2, r3, [r1, #576]	@ 0x240
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevR_d = (int8_T)
 8005fb0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <Hils_Ctrl_Block+0x19bc>
 8005fb8:	2201      	movs	r2, #1
 8005fba:	e000      	b.n	8005fbe <Hils_Ctrl_Block+0x19be>
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	4b5e      	ldr	r3, [pc, #376]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005fc0:	f883 2309 	strb.w	r2, [r3, #777]	@ 0x309
    (rtb_LogicalOperator ? 1 : 0);

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5875:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_n =
    rtb_DiscreteTransferFcn_l - (-0.024722306790190128 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_n);
 8005fc4:	4b5c      	ldr	r3, [pc, #368]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005fc6:	ed93 7b92 	vldr	d7, [r3, #584]	@ 0x248
    rtb_DiscreteTransferFcn_l - (-0.024722306790190128 *
 8005fca:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8006118 <Hils_Ctrl_Block+0x1b18>
 8005fce:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005fd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005fd6:	ed93 7b00 	vldr	d7, [r3]
 8005fda:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_n =
 8005fde:	4b56      	ldr	r3, [pc, #344]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8005fe0:	ed83 7b92 	vstr	d7, [r3, #584]	@ 0x248
   *  Gain: 'Gain5' (':6707')
   *  Gain: 'Gain5' (':5869')
   *  Sum: 'Add1' (':6684')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_ip = ((0.0 - (0.0 *
    (25.0 * rtb_Gain10_b))) + (314.16 * rtb_Prssure_Limit_a)) -
 8005fe4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005fe8:	ed13 7b02 	vldr	d7, [r3, #-8]
 8005fec:	eeb3 6b09 	vmov.f64	d6, #57	@ 0x41c80000  25.0
 8005ff0:	ee27 7b06 	vmul.f64	d7, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_ip = ((0.0 - (0.0 *
 8005ff4:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8006128 <Hils_Ctrl_Block+0x1b28>
 8005ff8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ffc:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8006128 <Hils_Ctrl_Block+0x1b28>
 8006000:	ee36 6b47 	vsub.f64	d6, d6, d7
    (25.0 * rtb_Gain10_b))) + (314.16 * rtb_Prssure_Limit_a)) -
 8006004:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8006008:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8006130 <Hils_Ctrl_Block+0x1b30>
 800600c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006010:	ee36 6b07 	vadd.f64	d6, d6, d7
    (-0.99843872006759038 *
     Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_ip);
 8006014:	4b48      	ldr	r3, [pc, #288]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8006016:	ed93 7b94 	vldr	d7, [r3, #592]	@ 0x250
    (-0.99843872006759038 *
 800601a:	ed9f 5b41 	vldr	d5, [pc, #260]	@ 8006120 <Hils_Ctrl_Block+0x1b20>
 800601e:	ee27 7b05 	vmul.f64	d7, d7, d5
    (25.0 * rtb_Gain10_b))) + (314.16 * rtb_Prssure_Limit_a)) -
 8006022:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_ip = ((0.0 - (0.0 *
 8006026:	4b44      	ldr	r3, [pc, #272]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8006028:	ed83 7b94 	vstr	d7, [r3, #592]	@ 0x250

  /* Update for DiscreteIntegrator: 'Discrete-Time Integrator' (':6690') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOA_a = 0U;
 800602c:	4b42      	ldr	r3, [pc, #264]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 800602e:	2200      	movs	r2, #0
 8006030:	f883 231a 	strb.w	r2, [r3, #794]	@ 0x31a
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_c = rtb_Gain10_b;
 8006034:	4940      	ldr	r1, [pc, #256]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8006036:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800603a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800603e:	e9c1 2396 	strd	r2, r3, [r1, #600]	@ 0x258
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRe_b = (int8_T)
 8006042:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <Hils_Ctrl_Block+0x1a4e>
 800604a:	2201      	movs	r2, #1
 800604c:	e000      	b.n	8006050 <Hils_Ctrl_Block+0x1a50>
 800604e:	2200      	movs	r2, #0
 8006050:	4b39      	ldr	r3, [pc, #228]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8006052:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a
    (rtb_LogicalOperator ? 1 : 0);

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5933:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_m =
    rtb_DiscreteTransferFcn_a - (-0.024722306790190128 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_m);
 8006056:	4b38      	ldr	r3, [pc, #224]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8006058:	ed93 7b98 	vldr	d7, [r3, #608]	@ 0x260
    rtb_DiscreteTransferFcn_a - (-0.024722306790190128 *
 800605c:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8006118 <Hils_Ctrl_Block+0x1b18>
 8006060:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006064:	f107 0318 	add.w	r3, r7, #24
 8006068:	ed93 7b00 	vldr	d7, [r3]
 800606c:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_m =
 8006070:	4b31      	ldr	r3, [pc, #196]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 8006072:	ed83 7b98 	vstr	d7, [r3, #608]	@ 0x260
   *  Gain: 'Gain1' (':6817')
   *  Gain: 'Gain6' (':6708')
   *  Gain: 'Gain5' (':5927')
   *  Sum: 'Add2' (':6685')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_h = ((314.16 *
 8006076:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 800607a:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8006130 <Hils_Ctrl_Block+0x1b30>
 800607e:	ee27 6b06 	vmul.f64	d6, d7, d6
    rtb_Prssure_Limit_l) - (0.0 * (25.0 * rtb_Gain11_l))) -
 8006082:	f107 0318 	add.w	r3, r7, #24
 8006086:	ed13 7b02 	vldr	d7, [r3, #-8]
 800608a:	eeb3 5b09 	vmov.f64	d5, #57	@ 0x41c80000  25.0
 800608e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006092:	ed9f 5b25 	vldr	d5, [pc, #148]	@ 8006128 <Hils_Ctrl_Block+0x1b28>
 8006096:	ee27 7b05 	vmul.f64	d7, d7, d5
 800609a:	ee36 6b47 	vsub.f64	d6, d6, d7
    (-0.99843872006759038 *
     Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_h);
 800609e:	4b26      	ldr	r3, [pc, #152]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 80060a0:	ed93 7b9a 	vldr	d7, [r3, #616]	@ 0x268
    (-0.99843872006759038 *
 80060a4:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8006120 <Hils_Ctrl_Block+0x1b20>
 80060a8:	ee27 7b05 	vmul.f64	d7, d7, d5
    rtb_Prssure_Limit_l) - (0.0 * (25.0 * rtb_Gain11_l))) -
 80060ac:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_h = ((314.16 *
 80060b0:	4b21      	ldr	r3, [pc, #132]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 80060b2:	ed83 7b9a 	vstr	d7, [r3, #616]	@ 0x268

  /* Update for DiscreteIntegrator: 'Discrete-Time Integrator1' (':6691') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LO_p = 0U;
 80060b6:	4b20      	ldr	r3, [pc, #128]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 231b 	strb.w	r2, [r3, #795]	@ 0x31b
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_c = rtb_Gain11_l;
 80060be:	491e      	ldr	r1, [pc, #120]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 80060c0:	f107 0318 	add.w	r3, r7, #24
 80060c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060c8:	e9c1 239c 	strd	r2, r3, [r1, #624]	@ 0x270
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevR_g = (int8_T)
 80060cc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <Hils_Ctrl_Block+0x1ad8>
 80060d4:	2201      	movs	r2, #1
 80060d6:	e000      	b.n	80060da <Hils_Ctrl_Block+0x1ada>
 80060d8:	2200      	movs	r2, #0
 80060da:	4b17      	ldr	r3, [pc, #92]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 80060dc:	f883 230b 	strb.w	r2, [r3, #779]	@ 0x30b
    (rtb_LogicalOperator ? 1 : 0);

  /* Update for DiscreteIntegrator: 'Discrete-Time Integrator' (':6433') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOA_e = 0U;
 80060e0:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_n = rtb_Gain8;
 80060e8:	4913      	ldr	r1, [pc, #76]	@ (8006138 <Hils_Ctrl_Block+0x1b38>)
 80060ea:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80060ee:	e9c1 239e 	strd	r2, r3, [r1, #632]	@ 0x278
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRe_n = (int8_T)
 80060f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d020      	beq.n	800613c <Hils_Ctrl_Block+0x1b3c>
 80060fa:	2201      	movs	r2, #1
 80060fc:	e01f      	b.n	800613e <Hils_Ctrl_Block+0x1b3e>
 80060fe:	bf00      	nop
 8006100:	a93638ca 	.word	0xa93638ca
 8006104:	3fedee4e 	.word	0x3fedee4e
 8006108:	86d92967 	.word	0x86d92967
 800610c:	3feffcd9 	.word	0x3feffcd9
 8006110:	ee50893c 	.word	0xee50893c
 8006114:	3fe1395f 	.word	0x3fe1395f
 8006118:	ec9509d6 	.word	0xec9509d6
 800611c:	3f9950cd 	.word	0x3f9950cd
 8006120:	c2380346 	.word	0xc2380346
 8006124:	3feff335 	.word	0x3feff335
	...
 8006130:	5c28f5c3 	.word	0x5c28f5c3
 8006134:	4073a28f 	.word	0x4073a28f
 8006138:	200008e8 	.word	0x200008e8
 800613c:	2200      	movs	r2, #0
 800613e:	4b40      	ldr	r3, [pc, #256]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 8006140:	f883 230c 	strb.w	r2, [r3, #780]	@ 0x30c
    (rtb_LogicalOperator ? 1 : 0);

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':6412:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_hp =
    rtb_MultiportSwitch12 - (-0.85463599915323341 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_hp);
 8006144:	4b3e      	ldr	r3, [pc, #248]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 8006146:	ed93 7ba0 	vldr	d7, [r3, #640]	@ 0x280
    rtb_MultiportSwitch12 - (-0.85463599915323341 *
 800614a:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8006230 <Hils_Ctrl_Block+0x1c30>
 800614e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006152:	ed97 7b3e 	vldr	d7, [r7, #248]	@ 0xf8
 8006156:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_hp =
 800615a:	4b39      	ldr	r3, [pc, #228]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 800615c:	ed83 7ba0 	vstr	d7, [r3, #640]	@ 0x280

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5934:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_oh =
    rtb_MultiportSwitch11 - (-0.99608070972816332 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_oh);
 8006160:	4b37      	ldr	r3, [pc, #220]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 8006162:	ed93 7ba2 	vldr	d7, [r3, #648]	@ 0x288
    rtb_MultiportSwitch11 - (-0.99608070972816332 *
 8006166:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8006238 <Hils_Ctrl_Block+0x1c38>
 800616a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800616e:	ed97 7b40 	vldr	d7, [r7, #256]	@ 0x100
 8006172:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_oh =
 8006176:	4b32      	ldr	r3, [pc, #200]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 8006178:	ed83 7ba2 	vstr	d7, [r3, #648]	@ 0x288

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5876:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_m4 =
    rtb_MultiportSwitch10 - (-0.99608070972816332 *
    Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_m4);
 800617c:	4b30      	ldr	r3, [pc, #192]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 800617e:	ed93 7ba4 	vldr	d7, [r3, #656]	@ 0x290
    rtb_MultiportSwitch10 - (-0.99608070972816332 *
 8006182:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8006238 <Hils_Ctrl_Block+0x1c38>
 8006186:	ee27 6b06 	vmul.f64	d6, d7, d6
 800618a:	ed97 7b42 	vldr	d7, [r7, #264]	@ 0x108
 800618e:	ee36 7b07 	vadd.f64	d7, d6, d7
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_m4 =
 8006192:	4b2b      	ldr	r3, [pc, #172]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 8006194:	ed83 7ba4 	vstr	d7, [r3, #656]	@ 0x290

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5908:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g1m = Gain3_o -
    (-0.99608070972816332 *
     Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g1m);
 8006198:	4b29      	ldr	r3, [pc, #164]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 800619a:	ed93 7ba6 	vldr	d7, [r3, #664]	@ 0x298
    (-0.99608070972816332 *
 800619e:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8006238 <Hils_Ctrl_Block+0x1c38>
 80061a2:	ee27 6b06 	vmul.f64	d6, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_g1m = Gain3_o -
 80061a6:	ed97 7b48 	vldr	d7, [r7, #288]	@ 0x120
 80061aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061ae:	4b24      	ldr	r3, [pc, #144]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 80061b0:	ed83 7ba6 	vstr	d7, [r3, #664]	@ 0x298

  /* Update for DiscreteTransferFcn: 'Discrete Transfer Fcn' (':5850:2') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_hf = Gain3_f -
    (-0.99608070972816332 *
     Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_hf);
 80061b4:	4b22      	ldr	r3, [pc, #136]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 80061b6:	ed93 7ba8 	vldr	d7, [r3, #672]	@ 0x2a0
    (-0.99608070972816332 *
 80061ba:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8006238 <Hils_Ctrl_Block+0x1c38>
 80061be:	ee27 6b06 	vmul.f64	d6, d7, d6
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTransferFcn_states_hf = Gain3_f -
 80061c2:	f107 0308 	add.w	r3, r7, #8
 80061c6:	ed13 7b02 	vldr	d7, [r3, #-8]
 80061ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 80061d0:	ed83 7ba8 	vstr	d7, [r3, #672]	@ 0x2a0

  /* Update for DiscreteIntegrator: 'Discrete-Time Integrator1' (':6363') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_IC_LO_n = 0U;
 80061d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_DSTAT_j =
 80061dc:	4918      	ldr	r1, [pc, #96]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 80061de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061e2:	e9c1 23aa 	strd	r2, r3, [r1, #680]	@ 0x2a8
    rtb_DiscreteTransferFcn_b;
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator1_PrevR_k = (int8_T)
 80061e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <Hils_Ctrl_Block+0x1bf2>
 80061ee:	2201      	movs	r2, #1
 80061f0:	e000      	b.n	80061f4 <Hils_Ctrl_Block+0x1bf4>
 80061f2:	2200      	movs	r2, #0
 80061f4:	4b12      	ldr	r3, [pc, #72]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 80061f6:	f883 230d 	strb.w	r2, [r3, #781]	@ 0x30d
    (rtb_LogicalOperator ? 1 : 0);

  /* Update for DiscreteIntegrator: 'Discrete-Time Integrator' (':6362') */
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_IC_LOA_n = 0U;
 80061fa:	4b11      	ldr	r3, [pc, #68]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_DSTATE_f =
 8006202:	490f      	ldr	r1, [pc, #60]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 8006204:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006208:	e9c1 23ac 	strd	r2, r3, [r1, #688]	@ 0x2b0
    rtb_DiscreteTransferFcn_o;
  Lws_HilsCtrl_240218_v_1_0_DW.DiscreteTimeIntegrator_PrevRe_p = (int8_T)
 800620c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <Hils_Ctrl_Block+0x1c18>
 8006214:	2201      	movs	r2, #1
 8006216:	e000      	b.n	800621a <Hils_Ctrl_Block+0x1c1a>
 8006218:	2200      	movs	r2, #0
 800621a:	4b09      	ldr	r3, [pc, #36]	@ (8006240 <Hils_Ctrl_Block+0x1c40>)
 800621c:	f883 230e 	strb.w	r2, [r3, #782]	@ 0x30e
    (rtb_LogicalOperator ? 1 : 0);
}
 8006220:	bf00      	nop
 8006222:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	f3af 8000 	nop.w
 8006230:	984b1e13 	.word	0x984b1e13
 8006234:	3feb592d 	.word	0x3feb592d
 8006238:	a70eaf8f 	.word	0xa70eaf8f
 800623c:	3fefdfe4 	.word	0x3fefdfe4
 8006240:	200008e8 	.word	0x200008e8

08006244 <Lws__exit_internal_Hils_Control>:
static void enter_internal_PowerOn_Standby(void);
static void Lws_HilsCtrl__Main_Hils_Control(void);

/* Function for Chart: ''Hils_SequenceCtrl' (':5237')' */
static void Lws__exit_internal_Hils_Control(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  /* Exit Internal 'Hils_Control': (':5237:133') */
  /* Exit Internal 'Hils_Ctrl_Process': (':5237:493') */
  Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 8006248:	4b04      	ldr	r3, [pc, #16]	@ (800625c <Lws__exit_internal_Hils_Control+0x18>)
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
    Lws_HilsCtrl_IN_NO_ACTIVE_CHILD;
}
 8006250:	bf00      	nop
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	200008e8 	.word	0x200008e8

08006260 <enter_internal_PowerOn_Standby>:

/* Function for Chart: ''Hils_SequenceCtrl' (':5237')' */
static void enter_internal_PowerOn_Standby(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  /* Entry Internal 'PowerOn_Standby': (':5237:469') */
  /* Transition: (':5237:470') */
  Lws_HilsCtrl_240218_v_1_0_DW.is_PowerOn_Standby =
 8006264:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 8006266:	2202      	movs	r2, #2
 8006268:	f883 2312 	strb.w	r2, [r3, #786]	@ 0x312
    Lws_HilsCtrl_IN_HilsOutput_Init;

  /* Entry 'HilsOutput_Init': (':5237:478') */
  /* (':5237:478:3') HilsStatus.Power_On = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.Power_On = 0U;
 800626c:	4b22      	ldr	r3, [pc, #136]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 800626e:	2200      	movs	r2, #0
 8006270:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

  /* (':5237:478:4') HilsStatus.WinchPower_On = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WinchPower_On = 0U;
 8006274:	4b20      	ldr	r3, [pc, #128]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 8006276:	2200      	movs	r2, #0
 8006278:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8

  /* (':5237:478:5') HilsStatus.BoostPower_On = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BoostPower_On = 0U;
 800627c:	4b1e      	ldr	r3, [pc, #120]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 800627e:	2200      	movs	r2, #0
 8006280:	f8a3 21aa 	strh.w	r2, [r3, #426]	@ 0x1aa

  /* (':5237:478:6') HilsStatus.DlPower_On = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.DlPower_On = 0U;
 8006284:	4b1c      	ldr	r3, [pc, #112]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 8006286:	2200      	movs	r2, #0
 8006288:	f8a3 21ac 	strh.w	r2, [r3, #428]	@ 0x1ac

  /*  Pressure Switch Set */
  /* (':5237:478:8') HilsDO.PreSwitch_Boost = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_Boost = 0U;
 800628c:	4b1a      	ldr	r3, [pc, #104]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 800628e:	2200      	movs	r2, #0
 8006290:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  /* (':5237:478:9') HilsDO.PreSwitch_AlignDrv = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_AlignDrv = 0U;
 8006294:	4b18      	ldr	r3, [pc, #96]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 8006296:	2200      	movs	r2, #0
 8006298:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102

  /* (':5237:478:10') HilsDO.PreSwitch_DropLift = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_DropLift = 0U;
 800629c:	4b16      	ldr	r3, [pc, #88]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 800629e:	2200      	movs	r2, #0
 80062a0:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  /*  Analog output set */
  /* (':5237:478:12') Pressure_WinchPwBase = 0; */
  Lws_HilsCtrl_240218_v_1_0_B.Pressure_WinchPwBase = 0.0F;
 80062a4:	4b15      	ldr	r3, [pc, #84]	@ (80062fc <enter_internal_PowerOn_Standby+0x9c>)
 80062a6:	f04f 0200 	mov.w	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]

  /* (':5237:478:13') Pressure_DropLiftPw = 0; */
  Lws_HilsCtrl_240218_v_1_0_B.Pressure_DropLiftPw = 0.0F;
 80062ac:	4b13      	ldr	r3, [pc, #76]	@ (80062fc <enter_internal_PowerOn_Standby+0x9c>)
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	609a      	str	r2, [r3, #8]

  /* (':5237:478:14') OilFlow_DropLift = 0; */
  Lws_HilsCtrl_240218_v_1_0_B.OilFlow_DropLift = 0.0F;
 80062b4:	4b11      	ldr	r3, [pc, #68]	@ (80062fc <enter_internal_PowerOn_Standby+0x9c>)
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	605a      	str	r2, [r3, #4]

  /*  Brake Lock status */
  /* (':5237:478:16') HilsDO.PreSwitch_AlignBk = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_AlignBk = 0U;
 80062bc:	4b0e      	ldr	r3, [pc, #56]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 80062be:	2200      	movs	r2, #0
 80062c0:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

  /* (':5237:478:17') HilsDO.PreSwitch_MainBk = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_MainBk = 0U;
 80062c4:	4b0c      	ldr	r3, [pc, #48]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118

  /* (':5237:478:18') HilsDO.PreSwitch_SubBk = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_SubBk = 0U;
 80062cc:	4b0a      	ldr	r3, [pc, #40]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a

  /* (':5237:478:19') HilsStatus. AlignBk_Unlock = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.AlignBk_Unlock = 0U;
 80062d4:	4b08      	ldr	r3, [pc, #32]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8a3 21ae 	strh.w	r2, [r3, #430]	@ 0x1ae

  /* (':5237:478:20') HilsStatus. WdBk_Unlock = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WdBk_Unlock = 0U;
 80062dc:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 80062de:	2200      	movs	r2, #0
 80062e0:	f8a3 21b2 	strh.w	r2, [r3, #434]	@ 0x1b2

  /* (':5237:478:21') HilsStatus. BandBk_Unlock = 0; */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BandBk_Unlock = 0U;
 80062e4:	4b04      	ldr	r3, [pc, #16]	@ (80062f8 <enter_internal_PowerOn_Standby+0x98>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8a3 21b0 	strh.w	r2, [r3, #432]	@ 0x1b0
}
 80062ec:	bf00      	nop
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	200008e8 	.word	0x200008e8
 80062fc:	20000808 	.word	0x20000808

08006300 <Lws_HilsCtrl__Main_Hils_Control>:

/* Function for Chart: ''Hils_SequenceCtrl' (':5237')' */
static void Lws_HilsCtrl__Main_Hils_Control(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* During 'Main_Hils_Control': (':5237:334') */
  switch (Lws_HilsCtrl_240218_v_1_0_DW.is_Main_Hils_Control)
 8006304:	4bb3      	ldr	r3, [pc, #716]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006306:	f893 3311 	ldrb.w	r3, [r3, #785]	@ 0x311
 800630a:	2b01      	cmp	r3, #1
 800630c:	d003      	beq.n	8006316 <Lws_HilsCtrl__Main_Hils_Control+0x16>
 800630e:	2b02      	cmp	r3, #2
 8006310:	f000 8190 	beq.w	8006634 <Lws_HilsCtrl__Main_Hils_Control+0x334>
 8006314:	e195      	b.n	8006642 <Lws_HilsCtrl__Main_Hils_Control+0x342>
  {
   case Lws_HilsCtrl_24_IN_Hils_Control:
    /* During 'Hils_Control': (':5237:133') */
    /* (':5237:137:1') sf_internal_predicateOutput = HilsStatus.Power_On==0; */
    if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.Power_On) == 0)
 8006316:	4baf      	ldr	r3, [pc, #700]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006318:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	@ 0x1a6
 800631c:	2b00      	cmp	r3, #0
 800631e:	d108      	bne.n	8006332 <Lws_HilsCtrl__Main_Hils_Control+0x32>
    {
      /* Transition: (':5237:137') */
      Lws__exit_internal_Hils_Control();
 8006320:	f7ff ff90 	bl	8006244 <Lws__exit_internal_Hils_Control>
      Lws_HilsCtrl_240218_v_1_0_DW.is_Main_Hils_Control =
 8006324:	4bab      	ldr	r3, [pc, #684]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006326:	2203      	movs	r2, #3
 8006328:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
        Lws_HilsCtrl_IN_PowerOn_Standby;
      enter_internal_PowerOn_Standby();
 800632c:	f7ff ff98 	bl	8006260 <enter_internal_PowerOn_Standby>
        break;
      }

      /* During 'Another_Process': (':5237:494') */
    }
    break;
 8006330:	e234      	b.n	800679c <Lws_HilsCtrl__Main_Hils_Control+0x49c>
      switch (Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process)
 8006332:	4ba8      	ldr	r3, [pc, #672]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006334:	f893 3313 	ldrb.w	r3, [r3, #787]	@ 0x313
 8006338:	3b01      	subs	r3, #1
 800633a:	2b0f      	cmp	r3, #15
 800633c:	f200 8165 	bhi.w	800660a <Lws_HilsCtrl__Main_Hils_Control+0x30a>
 8006340:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <Lws_HilsCtrl__Main_Hils_Control+0x48>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	08006389 	.word	0x08006389
 800634c:	08006393 	.word	0x08006393
 8006350:	0800639d 	.word	0x0800639d
 8006354:	080063a7 	.word	0x080063a7
 8006358:	080063b1 	.word	0x080063b1
 800635c:	080063d7 	.word	0x080063d7
 8006360:	080063fd 	.word	0x080063fd
 8006364:	08006425 	.word	0x08006425
 8006368:	0800644b 	.word	0x0800644b
 800636c:	08006471 	.word	0x08006471
 8006370:	08006499 	.word	0x08006499
 8006374:	080064a3 	.word	0x080064a3
 8006378:	08006615 	.word	0x08006615
 800637c:	080065d9 	.word	0x080065d9
 8006380:	080065f7 	.word	0x080065f7
 8006384:	08006601 	.word	0x08006601
        Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 8006388:	4b92      	ldr	r3, [pc, #584]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800638a:	220f      	movs	r2, #15
 800638c:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
        break;
 8006390:	e14f      	b.n	8006632 <Lws_HilsCtrl__Main_Hils_Control+0x332>
        Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 8006392:	4b90      	ldr	r3, [pc, #576]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006394:	220f      	movs	r2, #15
 8006396:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
        break;
 800639a:	e14a      	b.n	8006632 <Lws_HilsCtrl__Main_Hils_Control+0x332>
        Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 800639c:	4b8d      	ldr	r3, [pc, #564]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800639e:	220f      	movs	r2, #15
 80063a0:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
        break;
 80063a4:	e145      	b.n	8006632 <Lws_HilsCtrl__Main_Hils_Control+0x332>
        Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 80063a6:	4b8b      	ldr	r3, [pc, #556]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80063a8:	220f      	movs	r2, #15
 80063aa:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
        break;
 80063ae:	e140      	b.n	8006632 <Lws_HilsCtrl__Main_Hils_Control+0x332>
        if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) >= 200U)
 80063b0:	4b88      	ldr	r3, [pc, #544]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80063b2:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 80063b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80063b8:	f240 812e 	bls.w	8006618 <Lws_HilsCtrl__Main_Hils_Control+0x318>
          Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 80063bc:	4b85      	ldr	r3, [pc, #532]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_AlignBk = 0U;
 80063c4:	4b83      	ldr	r3, [pc, #524]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.AlignBk_Unlock = 0U;
 80063cc:	4b81      	ldr	r3, [pc, #516]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8a3 21ae 	strh.w	r2, [r3, #430]	@ 0x1ae
        break;
 80063d4:	e120      	b.n	8006618 <Lws_HilsCtrl__Main_Hils_Control+0x318>
        if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) >= 200U)
 80063d6:	4b7f      	ldr	r3, [pc, #508]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80063d8:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 80063dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80063de:	f240 811d 	bls.w	800661c <Lws_HilsCtrl__Main_Hils_Control+0x31c>
          Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 80063e2:	4b7c      	ldr	r3, [pc, #496]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80063e4:	2210      	movs	r2, #16
 80063e6:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_SubBk = 0U;
 80063ea:	4b7a      	ldr	r3, [pc, #488]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WdBk_Unlock = 0U;
 80063f2:	4b78      	ldr	r3, [pc, #480]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8a3 21b2 	strh.w	r2, [r3, #434]	@ 0x1b2
        break;
 80063fa:	e10f      	b.n	800661c <Lws_HilsCtrl__Main_Hils_Control+0x31c>
        if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) >= 400U)
 80063fc:	4b75      	ldr	r3, [pc, #468]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80063fe:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 8006402:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006406:	f0c0 810b 	bcc.w	8006620 <Lws_HilsCtrl__Main_Hils_Control+0x320>
          Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 800640a:	4b72      	ldr	r3, [pc, #456]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800640c:	2203      	movs	r2, #3
 800640e:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_MainBk = 0U;
 8006412:	4b70      	ldr	r3, [pc, #448]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006414:	2200      	movs	r2, #0
 8006416:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BandBk_Unlock = 0U;
 800641a:	4b6e      	ldr	r3, [pc, #440]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800641c:	2200      	movs	r2, #0
 800641e:	f8a3 21b0 	strh.w	r2, [r3, #432]	@ 0x1b0
        break;
 8006422:	e0fd      	b.n	8006620 <Lws_HilsCtrl__Main_Hils_Control+0x320>
        if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) >= 200U)
 8006424:	4b6b      	ldr	r3, [pc, #428]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006426:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 800642a:	2bc7      	cmp	r3, #199	@ 0xc7
 800642c:	f240 80fa 	bls.w	8006624 <Lws_HilsCtrl__Main_Hils_Control+0x324>
          Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 8006430:	4b68      	ldr	r3, [pc, #416]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006432:	2202      	movs	r2, #2
 8006434:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_AlignBk = 1U;
 8006438:	4b66      	ldr	r3, [pc, #408]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800643a:	2201      	movs	r2, #1
 800643c:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.AlignBk_Unlock = 1U;
 8006440:	4b64      	ldr	r3, [pc, #400]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006442:	2201      	movs	r2, #1
 8006444:	f8a3 21ae 	strh.w	r2, [r3, #430]	@ 0x1ae
        break;
 8006448:	e0ec      	b.n	8006624 <Lws_HilsCtrl__Main_Hils_Control+0x324>
        if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) >= 200U)
 800644a:	4b62      	ldr	r3, [pc, #392]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800644c:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 8006450:	2bc7      	cmp	r3, #199	@ 0xc7
 8006452:	f240 80e9 	bls.w	8006628 <Lws_HilsCtrl__Main_Hils_Control+0x328>
          Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 8006456:	4b5f      	ldr	r3, [pc, #380]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006458:	2211      	movs	r2, #17
 800645a:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_SubBk = 1U;
 800645e:	4b5d      	ldr	r3, [pc, #372]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006460:	2201      	movs	r2, #1
 8006462:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WdBk_Unlock = 1U;
 8006466:	4b5b      	ldr	r3, [pc, #364]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006468:	2201      	movs	r2, #1
 800646a:	f8a3 21b2 	strh.w	r2, [r3, #434]	@ 0x1b2
        break;
 800646e:	e0db      	b.n	8006628 <Lws_HilsCtrl__Main_Hils_Control+0x328>
        if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) >= 400U)
 8006470:	4b58      	ldr	r3, [pc, #352]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006472:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 8006476:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800647a:	f0c0 80d7 	bcc.w	800662c <Lws_HilsCtrl__Main_Hils_Control+0x32c>
          Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 800647e:	4b55      	ldr	r3, [pc, #340]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006480:	2204      	movs	r2, #4
 8006482:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_MainBk = 1U;
 8006486:	4b53      	ldr	r3, [pc, #332]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006488:	2201      	movs	r2, #1
 800648a:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BandBk_Unlock = 1U;
 800648e:	4b51      	ldr	r3, [pc, #324]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006490:	2201      	movs	r2, #1
 8006492:	f8a3 21b0 	strh.w	r2, [r3, #432]	@ 0x1b0
        break;
 8006496:	e0c9      	b.n	800662c <Lws_HilsCtrl__Main_Hils_Control+0x32c>
        Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 8006498:	4b4e      	ldr	r3, [pc, #312]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800649a:	220c      	movs	r2, #12
 800649c:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
        break;
 80064a0:	e0c7      	b.n	8006632 <Lws_HilsCtrl__Main_Hils_Control+0x332>
        if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.AlignBk) == 1) && (((int32_T)
 80064a2:	4b4c      	ldr	r3, [pc, #304]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80064a4:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	@ 0x2fc
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d10d      	bne.n	80064c8 <Lws_HilsCtrl__Main_Hils_Control+0x1c8>
              Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.AlignBk_Unlock) == 0))
 80064ac:	4b49      	ldr	r3, [pc, #292]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80064ae:	f8b3 31ae 	ldrh.w	r3, [r3, #430]	@ 0x1ae
        if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.AlignBk) == 1) && (((int32_T)
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d108      	bne.n	80064c8 <Lws_HilsCtrl__Main_Hils_Control+0x1c8>
          Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 80064b6:	4b47      	ldr	r3, [pc, #284]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80064b8:	2208      	movs	r2, #8
 80064ba:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
          Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = 0U;
 80064be:	4b45      	ldr	r3, [pc, #276]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
 80064c6:	e084      	b.n	80065d2 <Lws_HilsCtrl__Main_Hils_Control+0x2d2>
          if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.WdBk) == 1) && (((int32_T)
 80064c8:	4b42      	ldr	r3, [pc, #264]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80064ca:	f8b3 3300 	ldrh.w	r3, [r3, #768]	@ 0x300
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d10d      	bne.n	80064ee <Lws_HilsCtrl__Main_Hils_Control+0x1ee>
                Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WdBk_Unlock) == 0))
 80064d2:	4b40      	ldr	r3, [pc, #256]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80064d4:	f8b3 31b2 	ldrh.w	r3, [r3, #434]	@ 0x1b2
          if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.WdBk) == 1) && (((int32_T)
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d108      	bne.n	80064ee <Lws_HilsCtrl__Main_Hils_Control+0x1ee>
            Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 80064dc:	4b3d      	ldr	r3, [pc, #244]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80064de:	2209      	movs	r2, #9
 80064e0:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
            Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = 0U;
 80064e4:	4b3b      	ldr	r3, [pc, #236]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
 80064ec:	e071      	b.n	80065d2 <Lws_HilsCtrl__Main_Hils_Control+0x2d2>
            if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.BandBk) == 1) &&
 80064ee:	4b39      	ldr	r3, [pc, #228]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80064f0:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d10d      	bne.n	8006514 <Lws_HilsCtrl__Main_Hils_Control+0x214>
                (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BandBk_Unlock)
 80064f8:	4b36      	ldr	r3, [pc, #216]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80064fa:	f8b3 31b0 	ldrh.w	r3, [r3, #432]	@ 0x1b0
            if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.BandBk) == 1) &&
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d108      	bne.n	8006514 <Lws_HilsCtrl__Main_Hils_Control+0x214>
              Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 8006502:	4b34      	ldr	r3, [pc, #208]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006504:	220a      	movs	r2, #10
 8006506:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
              Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = 0U;
 800650a:	4b32      	ldr	r3, [pc, #200]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800650c:	2200      	movs	r2, #0
 800650e:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
 8006512:	e05e      	b.n	80065d2 <Lws_HilsCtrl__Main_Hils_Control+0x2d2>
              if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.AlignBk) == 0) &&
 8006514:	4b2f      	ldr	r3, [pc, #188]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006516:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	@ 0x2fc
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10d      	bne.n	800653a <Lws_HilsCtrl__Main_Hils_Control+0x23a>
                    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.AlignBk_Unlock) == 1))
 800651e:	4b2d      	ldr	r3, [pc, #180]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006520:	f8b3 31ae 	ldrh.w	r3, [r3, #430]	@ 0x1ae
              if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.AlignBk) == 0) &&
 8006524:	2b01      	cmp	r3, #1
 8006526:	d108      	bne.n	800653a <Lws_HilsCtrl__Main_Hils_Control+0x23a>
                Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 8006528:	4b2a      	ldr	r3, [pc, #168]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800652a:	2205      	movs	r2, #5
 800652c:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
                Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = 0U;
 8006530:	4b28      	ldr	r3, [pc, #160]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006532:	2200      	movs	r2, #0
 8006534:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
 8006538:	e04b      	b.n	80065d2 <Lws_HilsCtrl__Main_Hils_Control+0x2d2>
                if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.WdBk) == 0) &&
 800653a:	4b26      	ldr	r3, [pc, #152]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800653c:	f8b3 3300 	ldrh.w	r3, [r3, #768]	@ 0x300
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10d      	bne.n	8006560 <Lws_HilsCtrl__Main_Hils_Control+0x260>
                      Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WdBk_Unlock) == 1))
 8006544:	4b23      	ldr	r3, [pc, #140]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006546:	f8b3 31b2 	ldrh.w	r3, [r3, #434]	@ 0x1b2
                if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.WdBk) == 0) &&
 800654a:	2b01      	cmp	r3, #1
 800654c:	d108      	bne.n	8006560 <Lws_HilsCtrl__Main_Hils_Control+0x260>
                  Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 800654e:	4b21      	ldr	r3, [pc, #132]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006550:	2206      	movs	r2, #6
 8006552:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
                  Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = 0U;
 8006556:	4b1f      	ldr	r3, [pc, #124]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006558:	2200      	movs	r2, #0
 800655a:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
 800655e:	e038      	b.n	80065d2 <Lws_HilsCtrl__Main_Hils_Control+0x2d2>
                  if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.BandBk) == 0) &&
 8006560:	4b1c      	ldr	r3, [pc, #112]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006562:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	@ 0x2fe
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10d      	bne.n	8006586 <Lws_HilsCtrl__Main_Hils_Control+0x286>
                        Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BandBk_Unlock) ==
 800656a:	4b1a      	ldr	r3, [pc, #104]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800656c:	f8b3 31b0 	ldrh.w	r3, [r3, #432]	@ 0x1b0
                  if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.BandBk) == 0) &&
 8006570:	2b01      	cmp	r3, #1
 8006572:	d108      	bne.n	8006586 <Lws_HilsCtrl__Main_Hils_Control+0x286>
                    Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 8006574:	4b17      	ldr	r3, [pc, #92]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006576:	2207      	movs	r2, #7
 8006578:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
                    Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = 0U;
 800657c:	4b15      	ldr	r3, [pc, #84]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800657e:	2200      	movs	r2, #0
 8006580:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
 8006584:	e025      	b.n	80065d2 <Lws_HilsCtrl__Main_Hils_Control+0x2d2>
                          Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.NoLoadValve_Winch)
 8006586:	4b13      	ldr	r3, [pc, #76]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006588:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	@ 0x1c4
                    if ((((int32_T)
 800658c:	2b01      	cmp	r3, #1
 800658e:	d10d      	bne.n	80065ac <Lws_HilsCtrl__Main_Hils_Control+0x2ac>
                                    Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.NoLoadValve_DropLift)
 8006590:	4b10      	ldr	r3, [pc, #64]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 8006592:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	@ 0x1c6
                         == 1) && (((int32_T)
 8006596:	2b01      	cmp	r3, #1
 8006598:	d108      	bne.n	80065ac <Lws_HilsCtrl__Main_Hils_Control+0x2ac>
                      Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 800659a:	4b0e      	ldr	r3, [pc, #56]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 800659c:	220e      	movs	r2, #14
 800659e:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
                      Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = 0U;
 80065a2:	4b0c      	ldr	r3, [pc, #48]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
 80065aa:	e012      	b.n	80065d2 <Lws_HilsCtrl__Main_Hils_Control+0x2d2>
                        Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.DirValve_AlignBk;
 80065ac:	4b09      	ldr	r3, [pc, #36]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80065ae:	f8b3 21ca 	ldrh.w	r2, [r3, #458]	@ 0x1ca
                      Lws_HilsCtrl_240218_v_1_0_DW.AlignBk =
 80065b2:	4b08      	ldr	r3, [pc, #32]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80065b4:	f8a3 22fc 	strh.w	r2, [r3, #764]	@ 0x2fc
                        Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.DirValve_MainBk;
 80065b8:	4b06      	ldr	r3, [pc, #24]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80065ba:	f8b3 21cc 	ldrh.w	r2, [r3, #460]	@ 0x1cc
                      Lws_HilsCtrl_240218_v_1_0_DW.BandBk =
 80065be:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80065c0:	f8a3 22fe 	strh.w	r2, [r3, #766]	@ 0x2fe
                        Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.DirValve_SubBk;
 80065c4:	4b03      	ldr	r3, [pc, #12]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80065c6:	f8b3 21ce 	ldrh.w	r2, [r3, #462]	@ 0x1ce
                      Lws_HilsCtrl_240218_v_1_0_DW.WdBk =
 80065ca:	4b02      	ldr	r3, [pc, #8]	@ (80065d4 <Lws_HilsCtrl__Main_Hils_Control+0x2d4>)
 80065cc:	f8a3 2300 	strh.w	r2, [r3, #768]	@ 0x300
        break;
 80065d0:	e02f      	b.n	8006632 <Lws_HilsCtrl__Main_Hils_Control+0x332>
 80065d2:	e02e      	b.n	8006632 <Lws_HilsCtrl__Main_Hils_Control+0x332>
 80065d4:	200008e8 	.word	0x200008e8
        if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) >= 2000U)
 80065d8:	4b71      	ldr	r3, [pc, #452]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80065da:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 80065de:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80065e2:	d325      	bcc.n	8006630 <Lws_HilsCtrl__Main_Hils_Control+0x330>
          Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 80065e4:	4b6e      	ldr	r3, [pc, #440]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80065e6:	220d      	movs	r2, #13
 80065e8:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.Power_On = 0U;
 80065ec:	4b6c      	ldr	r3, [pc, #432]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6
        break;
 80065f4:	e01c      	b.n	8006630 <Lws_HilsCtrl__Main_Hils_Control+0x330>
        Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 80065f6:	4b6a      	ldr	r3, [pc, #424]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80065f8:	220c      	movs	r2, #12
 80065fa:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
        break;
 80065fe:	e018      	b.n	8006632 <Lws_HilsCtrl__Main_Hils_Control+0x332>
        Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 8006600:	4b67      	ldr	r3, [pc, #412]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006602:	220f      	movs	r2, #15
 8006604:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
        break;
 8006608:	e013      	b.n	8006632 <Lws_HilsCtrl__Main_Hils_Control+0x332>
        Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 800660a:	4b65      	ldr	r3, [pc, #404]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800660c:	220f      	movs	r2, #15
 800660e:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
        break;
 8006612:	e00e      	b.n	8006632 <Lws_HilsCtrl__Main_Hils_Control+0x332>
        break;
 8006614:	bf00      	nop
 8006616:	e0c1      	b.n	800679c <Lws_HilsCtrl__Main_Hils_Control+0x49c>
        break;
 8006618:	bf00      	nop
 800661a:	e0bf      	b.n	800679c <Lws_HilsCtrl__Main_Hils_Control+0x49c>
        break;
 800661c:	bf00      	nop
 800661e:	e0bd      	b.n	800679c <Lws_HilsCtrl__Main_Hils_Control+0x49c>
        break;
 8006620:	bf00      	nop
 8006622:	e0bb      	b.n	800679c <Lws_HilsCtrl__Main_Hils_Control+0x49c>
        break;
 8006624:	bf00      	nop
 8006626:	e0b9      	b.n	800679c <Lws_HilsCtrl__Main_Hils_Control+0x49c>
        break;
 8006628:	bf00      	nop
 800662a:	e0b7      	b.n	800679c <Lws_HilsCtrl__Main_Hils_Control+0x49c>
        break;
 800662c:	bf00      	nop
 800662e:	e0b5      	b.n	800679c <Lws_HilsCtrl__Main_Hils_Control+0x49c>
        break;
 8006630:	bf00      	nop
    break;
 8006632:	e0b3      	b.n	800679c <Lws_HilsCtrl__Main_Hils_Control+0x49c>

   case Lws_Hils_IN_Mode_Operation_Init:
    /* During 'Mode_Operation_Init': (':5237:124') */
    /* Transition: (':5237:126') */
    Lws_HilsCtrl_240218_v_1_0_DW.is_Main_Hils_Control =
 8006634:	4b5a      	ldr	r3, [pc, #360]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006636:	2203      	movs	r2, #3
 8006638:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
      Lws_HilsCtrl_IN_PowerOn_Standby;
    enter_internal_PowerOn_Standby();
 800663c:	f7ff fe10 	bl	8006260 <enter_internal_PowerOn_Standby>
    break;
 8006640:	e0ac      	b.n	800679c <Lws_HilsCtrl__Main_Hils_Control+0x49c>

   default:
    /* During 'PowerOn_Standby': (':5237:469') */
    /* (':5237:136:1') sf_internal_predicateOutput = HilsStatus.Power_On==1; */
    if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.Power_On) == 1)
 8006642:	4b57      	ldr	r3, [pc, #348]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006644:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	@ 0x1a6
 8006648:	2b01      	cmp	r3, #1
 800664a:	d124      	bne.n	8006696 <Lws_HilsCtrl__Main_Hils_Control+0x396>
    {
      /* Transition: (':5237:136') */
      /* Exit Internal 'PowerOn_Standby': (':5237:469') */
      Lws_HilsCtrl_240218_v_1_0_DW.is_PowerOn_Standby =
 800664c:	4b54      	ldr	r3, [pc, #336]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2312 	strb.w	r2, [r3, #786]	@ 0x312
        Lws_HilsCtrl_IN_NO_ACTIVE_CHILD;
      Lws_HilsCtrl_240218_v_1_0_DW.is_Main_Hils_Control =
 8006654:	4b52      	ldr	r3, [pc, #328]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
        Lws_HilsCtrl_24_IN_Hils_Control;

      /* Entry Internal 'Hils_Control': (':5237:133') */
      /* Entry Internal 'Hils_Ctrl_Process': (':5237:493') */
      /* Transition: (':5237:131') */
      Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 800665c:	4b50      	ldr	r3, [pc, #320]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800665e:	220b      	movs	r2, #11
 8006660:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
        Lws_HilsCtr_IN_HilsControl_Init;

      /* Entry 'HilsControl_Init': (':5237:127') */
      /* (':5237:127:3') HilsDO.PreSwitch_AlignBk = 0; */
      Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_AlignBk = 0U;
 8006664:	4b4e      	ldr	r3, [pc, #312]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006666:	2200      	movs	r2, #0
 8006668:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

      /*  Brake Lock status */
      /* (':5237:127:4') HilsDO.PreSwitch_MainBk = 0; */
      Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_MainBk = 0U;
 800666c:	4b4c      	ldr	r3, [pc, #304]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800666e:	2200      	movs	r2, #0
 8006670:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118

      /* (':5237:127:5') HilsDO.PreSwitch_SubBk = 0; */
      Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_SubBk = 0U;
 8006674:	4b4a      	ldr	r3, [pc, #296]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006676:	2200      	movs	r2, #0
 8006678:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a

      /* (':5237:127:6') HilsStatus. AlignBk_Unlock = 0; */
      Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.AlignBk_Unlock = 0U;
 800667c:	4b48      	ldr	r3, [pc, #288]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800667e:	2200      	movs	r2, #0
 8006680:	f8a3 21ae 	strh.w	r2, [r3, #430]	@ 0x1ae

      /* (':5237:127:7') HilsStatus. WdBk_Unlock = 0; */
      Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WdBk_Unlock = 0U;
 8006684:	4b46      	ldr	r3, [pc, #280]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006686:	2200      	movs	r2, #0
 8006688:	f8a3 21b2 	strh.w	r2, [r3, #434]	@ 0x1b2

      /* (':5237:127:8') HilsStatus. BandBk_Unlock = 0; */
      Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BandBk_Unlock = 0U;
 800668c:	4b44      	ldr	r3, [pc, #272]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800668e:	2200      	movs	r2, #0
 8006690:	f8a3 21b0 	strh.w	r2, [r3, #432]	@ 0x1b0
            Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.OilFlowS_RefFlow;
        }
        break;
      }
    }
    break;
 8006694:	e081      	b.n	800679a <Lws_HilsCtrl__Main_Hils_Control+0x49a>
      switch (Lws_HilsCtrl_240218_v_1_0_DW.is_PowerOn_Standby)
 8006696:	4b42      	ldr	r3, [pc, #264]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006698:	f893 3312 	ldrb.w	r3, [r3, #786]	@ 0x312
 800669c:	3b01      	subs	r3, #1
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d855      	bhi.n	800674e <Lws_HilsCtrl__Main_Hils_Control+0x44e>
 80066a2:	a201      	add	r2, pc, #4	@ (adr r2, 80066a8 <Lws_HilsCtrl__Main_Hils_Control+0x3a8>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066df 	.word	0x080066df
 80066b0:	08006705 	.word	0x08006705
 80066b4:	08006789 	.word	0x08006789
        if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.NoLoadValve_Winch) ==
 80066b8:	4b39      	ldr	r3, [pc, #228]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80066ba:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	@ 0x1c4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d164      	bne.n	800678c <Lws_HilsCtrl__Main_Hils_Control+0x48c>
                     Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.NoLoadValve_DropLift) ==
 80066c2:	4b37      	ldr	r3, [pc, #220]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80066c4:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	@ 0x1c6
             0) && (((int32_T)
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d15f      	bne.n	800678c <Lws_HilsCtrl__Main_Hils_Control+0x48c>
          Lws_HilsCtrl_240218_v_1_0_DW.is_PowerOn_Standby =
 80066cc:	4b34      	ldr	r3, [pc, #208]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80066ce:	2204      	movs	r2, #4
 80066d0:	f883 2312 	strb.w	r2, [r3, #786]	@ 0x312
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.Power_On = 1U;
 80066d4:	4b32      	ldr	r3, [pc, #200]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6
        break;
 80066dc:	e056      	b.n	800678c <Lws_HilsCtrl__Main_Hils_Control+0x48c>
        if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.NoLoadValve_Winch) ==
 80066de:	4b30      	ldr	r3, [pc, #192]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80066e0:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	@ 0x1c4
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d153      	bne.n	8006790 <Lws_HilsCtrl__Main_Hils_Control+0x490>
                     Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.NoLoadValve_DropLift) ==
 80066e8:	4b2d      	ldr	r3, [pc, #180]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80066ea:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	@ 0x1c6
             1) && (((int32_T)
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d14e      	bne.n	8006790 <Lws_HilsCtrl__Main_Hils_Control+0x490>
          Lws_HilsCtrl_240218_v_1_0_DW.is_PowerOn_Standby =
 80066f2:	4b2b      	ldr	r3, [pc, #172]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80066f4:	2203      	movs	r2, #3
 80066f6:	f883 2312 	strb.w	r2, [r3, #786]	@ 0x312
          Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = 0U;
 80066fa:	4b29      	ldr	r3, [pc, #164]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
        break;
 8006702:	e045      	b.n	8006790 <Lws_HilsCtrl__Main_Hils_Control+0x490>
        if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) >= 3000U)
 8006704:	4b26      	ldr	r3, [pc, #152]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006706:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 800670a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800670e:	4293      	cmp	r3, r2
 8006710:	d940      	bls.n	8006794 <Lws_HilsCtrl__Main_Hils_Control+0x494>
          Lws_HilsCtrl_240218_v_1_0_DW.is_PowerOn_Standby =
 8006712:	4b23      	ldr	r3, [pc, #140]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006714:	2205      	movs	r2, #5
 8006716:	f883 2312 	strb.w	r2, [r3, #786]	@ 0x312
          Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = 0U;
 800671a:	4b21      	ldr	r3, [pc, #132]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800671c:	2200      	movs	r2, #0
 800671e:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WinchPower_On = 1U;
 8006722:	4b1f      	ldr	r3, [pc, #124]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006724:	2201      	movs	r2, #1
 8006726:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BoostPower_On = 1U;
 800672a:	4b1d      	ldr	r3, [pc, #116]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800672c:	2201      	movs	r2, #1
 800672e:	f8a3 21aa 	strh.w	r2, [r3, #426]	@ 0x1aa
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_Boost = 1U;
 8006732:	4b1b      	ldr	r3, [pc, #108]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006734:	2201      	movs	r2, #1
 8006736:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_AlignDrv = 1U;
 800673a:	4b19      	ldr	r3, [pc, #100]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800673c:	2201      	movs	r2, #1
 800673e:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
            Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.WinchPw_RefPressure;
 8006742:	4b17      	ldr	r3, [pc, #92]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
          Lws_HilsCtrl_240218_v_1_0_B.Pressure_WinchPwBase =
 8006748:	4a16      	ldr	r2, [pc, #88]	@ (80067a4 <Lws_HilsCtrl__Main_Hils_Control+0x4a4>)
 800674a:	6013      	str	r3, [r2, #0]
        break;
 800674c:	e022      	b.n	8006794 <Lws_HilsCtrl__Main_Hils_Control+0x494>
        if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) >= 2000U)
 800674e:	4b14      	ldr	r3, [pc, #80]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006750:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 8006754:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006758:	d31e      	bcc.n	8006798 <Lws_HilsCtrl__Main_Hils_Control+0x498>
          Lws_HilsCtrl_240218_v_1_0_DW.is_PowerOn_Standby =
 800675a:	4b11      	ldr	r3, [pc, #68]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2312 	strb.w	r2, [r3, #786]	@ 0x312
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.DlPower_On = 1U;
 8006762:	4b0f      	ldr	r3, [pc, #60]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006764:	2201      	movs	r2, #1
 8006766:	f8a3 21ac 	strh.w	r2, [r3, #428]	@ 0x1ac
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_DropLift = 1U;
 800676a:	4b0d      	ldr	r3, [pc, #52]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800676c:	2201      	movs	r2, #1
 800676e:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
            Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.DropLiftPw_RefPressure;
 8006772:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
          Lws_HilsCtrl_240218_v_1_0_B.Pressure_DropLiftPw =
 8006778:	4a0a      	ldr	r2, [pc, #40]	@ (80067a4 <Lws_HilsCtrl__Main_Hils_Control+0x4a4>)
 800677a:	6093      	str	r3, [r2, #8]
            Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.OilFlowS_RefFlow;
 800677c:	4b08      	ldr	r3, [pc, #32]	@ (80067a0 <Lws_HilsCtrl__Main_Hils_Control+0x4a0>)
 800677e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
          Lws_HilsCtrl_240218_v_1_0_B.OilFlow_DropLift =
 8006782:	4a08      	ldr	r2, [pc, #32]	@ (80067a4 <Lws_HilsCtrl__Main_Hils_Control+0x4a4>)
 8006784:	6053      	str	r3, [r2, #4]
        break;
 8006786:	e007      	b.n	8006798 <Lws_HilsCtrl__Main_Hils_Control+0x498>
        break;
 8006788:	bf00      	nop
 800678a:	e006      	b.n	800679a <Lws_HilsCtrl__Main_Hils_Control+0x49a>
        break;
 800678c:	bf00      	nop
 800678e:	e004      	b.n	800679a <Lws_HilsCtrl__Main_Hils_Control+0x49a>
        break;
 8006790:	bf00      	nop
 8006792:	e002      	b.n	800679a <Lws_HilsCtrl__Main_Hils_Control+0x49a>
        break;
 8006794:	bf00      	nop
 8006796:	e000      	b.n	800679a <Lws_HilsCtrl__Main_Hils_Control+0x49a>
        break;
 8006798:	bf00      	nop
    break;
 800679a:	bf00      	nop
  }
}
 800679c:	bf00      	nop
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	200008e8 	.word	0x200008e8
 80067a4:	20000808 	.word	0x20000808

080067a8 <Hils_SequenceCtrl_Init>:

/* System initialize for atomic system: 'Hils_SequenceCtrl' (':5237') */
void Hils_SequenceCtrl_Init(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  Lws_HilsCtrl_240218_v_1_0_DW.is_Main_Hils_Control =
 80067ac:	4b12      	ldr	r3, [pc, #72]	@ (80067f8 <Hils_SequenceCtrl_Init+0x50>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
    Lws_HilsCtrl_IN_NO_ACTIVE_CHILD;
  Lws_HilsCtrl_240218_v_1_0_DW.is_Hils_Ctrl_Process =
 80067b4:	4b10      	ldr	r3, [pc, #64]	@ (80067f8 <Hils_SequenceCtrl_Init+0x50>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2313 	strb.w	r2, [r3, #787]	@ 0x313
    Lws_HilsCtrl_IN_NO_ACTIVE_CHILD;
  Lws_HilsCtrl_240218_v_1_0_DW.is_PowerOn_Standby =
 80067bc:	4b0e      	ldr	r3, [pc, #56]	@ (80067f8 <Hils_SequenceCtrl_Init+0x50>)
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2312 	strb.w	r2, [r3, #786]	@ 0x312
    Lws_HilsCtrl_IN_NO_ACTIVE_CHILD;
  Lws_HilsCtrl_240218_v_1_0_DW.is_OutSet_Control =
 80067c4:	4b0c      	ldr	r3, [pc, #48]	@ (80067f8 <Hils_SequenceCtrl_Init+0x50>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
    Lws_HilsCtrl_IN_NO_ACTIVE_CHILD;
  Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i2 = 0U;
 80067cc:	4b0a      	ldr	r3, [pc, #40]	@ (80067f8 <Hils_SequenceCtrl_Init+0x50>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
  Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = 0U;
 80067d4:	4b08      	ldr	r3, [pc, #32]	@ (80067f8 <Hils_SequenceCtrl_Init+0x50>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
  Lws_HilsCtrl_240218_v_1_0_DW.is_active_c10_Lws_HilsCtrl_2402 = 0U;
 80067dc:	4b06      	ldr	r3, [pc, #24]	@ (80067f8 <Hils_SequenceCtrl_Init+0x50>)
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 230f 	strb.w	r2, [r3, #783]	@ 0x30f
  Lws_HilsCtrl_240218_v_1_0_DW.is_c10_Lws_HilsCtrl_240218_v_1_ =
 80067e4:	4b04      	ldr	r3, [pc, #16]	@ (80067f8 <Hils_SequenceCtrl_Init+0x50>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310
    Lws_HilsCtrl_IN_NO_ACTIVE_CHILD;
}
 80067ec:	bf00      	nop
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	200008e8 	.word	0x200008e8

080067fc <Hils_SequenceCtrl>:

/* Output and update for atomic system: 'Hils_SequenceCtrl' (':5237') */
void Hils_SequenceCtrl(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) < 4095U)
 8006800:	4b98      	ldr	r3, [pc, #608]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006802:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 8006806:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800680a:	4293      	cmp	r3, r2
 800680c:	d807      	bhi.n	800681e <Hils_SequenceCtrl+0x22>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = (uint16_T)(((uint32_T)
      Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) + 1U);
 800680e:	4b95      	ldr	r3, [pc, #596]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006810:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
    Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = (uint16_T)(((uint32_T)
 8006814:	3301      	adds	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	4b92      	ldr	r3, [pc, #584]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800681a:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
  }

  if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i2) < 255U)
 800681e:	4b91      	ldr	r3, [pc, #580]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006820:	f893 3315 	ldrb.w	r3, [r3, #789]	@ 0x315
 8006824:	2bff      	cmp	r3, #255	@ 0xff
 8006826:	d007      	beq.n	8006838 <Hils_SequenceCtrl+0x3c>
  {
    Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i2 = (uint8_T)(((uint32_T)
      Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i2) + 1U);
 8006828:	4b8e      	ldr	r3, [pc, #568]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800682a:	f893 3315 	ldrb.w	r3, [r3, #789]	@ 0x315
    Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i2 = (uint8_T)(((uint32_T)
 800682e:	3301      	adds	r3, #1
 8006830:	b2da      	uxtb	r2, r3
 8006832:	4b8c      	ldr	r3, [pc, #560]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006834:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
  }

  /* Chart: 'Hils_SequenceCtrl' (':5237') */
  /* Gateway: Lws_HilsCtrl/Hils_SequenceCtrl */
  /* During: Lws_HilsCtrl/Hils_SequenceCtrl */
  if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.is_active_c10_Lws_HilsCtrl_2402) ==
 8006838:	4b8a      	ldr	r3, [pc, #552]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800683a:	f893 330f 	ldrb.w	r3, [r3, #783]	@ 0x30f
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10c      	bne.n	800685c <Hils_SequenceCtrl+0x60>
      0U)
  {
    /* Entry: Lws_HilsCtrl/Hils_SequenceCtrl */
    Lws_HilsCtrl_240218_v_1_0_DW.is_active_c10_Lws_HilsCtrl_2402 = 1U;
 8006842:	4b88      	ldr	r3, [pc, #544]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006844:	2201      	movs	r2, #1
 8006846:	f883 230f 	strb.w	r2, [r3, #783]	@ 0x30f

    /* Entry Internal: Lws_HilsCtrl/Hils_SequenceCtrl */
    /* Transition: (':5237:11') */
    Lws_HilsCtrl_240218_v_1_0_DW.is_c10_Lws_HilsCtrl_240218_v_1_ =
 800684a:	4b86      	ldr	r3, [pc, #536]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800684c:	2204      	movs	r2, #4
 800684e:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310
      Lws_HilsCtrl_240218_IN_Sys_Init;
    Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1 = 0U;
 8006852:	4b84      	ldr	r3, [pc, #528]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006854:	2200      	movs	r2, #0
 8006856:	f8a3 2304 	strh.w	r2, [r3, #772]	@ 0x304
      break;
    }
  }

  /* End of Chart: 'Hils_SequenceCtrl' (':5237') */
}
 800685a:	e214      	b.n	8006c86 <Hils_SequenceCtrl+0x48a>
    switch (Lws_HilsCtrl_240218_v_1_0_DW.is_c10_Lws_HilsCtrl_240218_v_1_)
 800685c:	4b81      	ldr	r3, [pc, #516]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800685e:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8006862:	2b03      	cmp	r3, #3
 8006864:	f000 80f5 	beq.w	8006a52 <Hils_SequenceCtrl+0x256>
 8006868:	2b03      	cmp	r3, #3
 800686a:	f300 81f0 	bgt.w	8006c4e <Hils_SequenceCtrl+0x452>
 800686e:	2b01      	cmp	r3, #1
 8006870:	d002      	beq.n	8006878 <Hils_SequenceCtrl+0x7c>
 8006872:	2b02      	cmp	r3, #2
 8006874:	d00b      	beq.n	800688e <Hils_SequenceCtrl+0x92>
 8006876:	e1ea      	b.n	8006c4e <Hils_SequenceCtrl+0x452>
      if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsMode.Op_Mode) == 0)
 8006878:	4b7a      	ldr	r3, [pc, #488]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800687a:	f8b3 32c0 	ldrh.w	r3, [r3, #704]	@ 0x2c0
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 8200 	bne.w	8006c84 <Hils_SequenceCtrl+0x488>
        Lws_HilsCtrl_240218_v_1_0_DW.is_c10_Lws_HilsCtrl_240218_v_1_ =
 8006884:	4b77      	ldr	r3, [pc, #476]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006886:	2203      	movs	r2, #3
 8006888:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310
      break;
 800688c:	e1fa      	b.n	8006c84 <Hils_SequenceCtrl+0x488>
      if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsMode.Op_Mode) == 0)
 800688e:	4b75      	ldr	r3, [pc, #468]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006890:	f8b3 32c0 	ldrh.w	r3, [r3, #704]	@ 0x2c0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d112      	bne.n	80068be <Hils_SequenceCtrl+0xc2>
        Lws_HilsCtrl_240218_v_1_0_DW.is_OutSet_Control =
 8006898:	4b72      	ldr	r3, [pc, #456]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
        Lws__exit_internal_Hils_Control();
 80068a0:	f7ff fcd0 	bl	8006244 <Lws__exit_internal_Hils_Control>
        Lws_HilsCtrl_240218_v_1_0_DW.is_PowerOn_Standby =
 80068a4:	4b6f      	ldr	r3, [pc, #444]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2312 	strb.w	r2, [r3, #786]	@ 0x312
        Lws_HilsCtrl_240218_v_1_0_DW.is_Main_Hils_Control =
 80068ac:	4b6d      	ldr	r3, [pc, #436]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
        Lws_HilsCtrl_240218_v_1_0_DW.is_c10_Lws_HilsCtrl_240218_v_1_ =
 80068b4:	4b6b      	ldr	r3, [pc, #428]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80068b6:	2203      	movs	r2, #3
 80068b8:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310
      break;
 80068bc:	e1e3      	b.n	8006c86 <Hils_SequenceCtrl+0x48a>
        Lws_HilsCtrl__Main_Hils_Control();
 80068be:	f7ff fd1f 	bl	8006300 <Lws_HilsCtrl__Main_Hils_Control>
        if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsMode_Start) == 0)
 80068c2:	4b68      	ldr	r3, [pc, #416]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80068c4:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10c      	bne.n	80068e6 <Hils_SequenceCtrl+0xea>
            && (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsMode_Stop) ==
 80068cc:	4b65      	ldr	r3, [pc, #404]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80068ce:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d107      	bne.n	80068e6 <Hils_SequenceCtrl+0xea>
          Lws_HilsCtrl_240218_v_1_0_DW.HilsMode.Op_Mode = 0U;
 80068d6:	4b63      	ldr	r3, [pc, #396]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80068d8:	2200      	movs	r2, #0
 80068da:	f8a3 22c0 	strh.w	r2, [r3, #704]	@ 0x2c0
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning = 0U;
 80068de:	4b61      	ldr	r3, [pc, #388]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8a3 21a4 	strh.w	r2, [r3, #420]	@ 0x1a4
        switch (Lws_HilsCtrl_240218_v_1_0_DW.is_OutSet_Control)
 80068e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80068e8:	f893 3314 	ldrb.w	r3, [r3, #788]	@ 0x314
 80068ec:	3b01      	subs	r3, #1
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	f200 80a2 	bhi.w	8006a38 <Hils_SequenceCtrl+0x23c>
 80068f4:	a201      	add	r2, pc, #4	@ (adr r2, 80068fc <Hils_SequenceCtrl+0x100>)
 80068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fa:	bf00      	nop
 80068fc:	0800690d 	.word	0x0800690d
 8006900:	080069ef 	.word	0x080069ef
 8006904:	08006a19 	.word	0x08006a19
 8006908:	08006a23 	.word	0x08006a23
          if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i2) >=
 800690c:	4b55      	ldr	r3, [pc, #340]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800690e:	f893 3315 	ldrb.w	r3, [r3, #789]	@ 0x315
 8006912:	2bef      	cmp	r3, #239	@ 0xef
 8006914:	f240 809b 	bls.w	8006a4e <Hils_SequenceCtrl+0x252>
            Lws_HilsCtrl_240218_v_1_0_DW.is_OutSet_Control =
 8006918:	4b52      	ldr	r3, [pc, #328]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800691a:	2203      	movs	r2, #3
 800691c:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_Return;
 8006920:	4b50      	ldr	r3, [pc, #320]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006922:	f8b3 211e 	ldrh.w	r2, [r3, #286]	@ 0x11e
            Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_Return =
 8006926:	4b4f      	ldr	r3, [pc, #316]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006928:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_BoostPump;
 800692c:	4b4d      	ldr	r3, [pc, #308]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800692e:	f8b3 2120 	ldrh.w	r2, [r3, #288]	@ 0x120
            Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_BoostPump =
 8006932:	4b4c      	ldr	r3, [pc, #304]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006934:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_WinchDrv;
 8006938:	4b4a      	ldr	r3, [pc, #296]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800693a:	f8b3 2122 	ldrh.w	r2, [r3, #290]	@ 0x122
            Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_WinchDrv =
 800693e:	4b49      	ldr	r3, [pc, #292]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006940:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_DropLift;
 8006944:	4b47      	ldr	r3, [pc, #284]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006946:	f8b3 2124 	ldrh.w	r2, [r3, #292]	@ 0x124
            Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_DropLift =
 800694a:	4b46      	ldr	r3, [pc, #280]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800694c:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_RightA;
 8006950:	4b44      	ldr	r3, [pc, #272]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006952:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
            Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_RightA =
 8006956:	4b43      	ldr	r3, [pc, #268]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006958:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_RightB;
 800695c:	4b41      	ldr	r3, [pc, #260]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800695e:	f8b3 2128 	ldrh.w	r2, [r3, #296]	@ 0x128
            Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_RightB =
 8006962:	4b40      	ldr	r3, [pc, #256]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006964:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_LeftA;
 8006968:	4b3e      	ldr	r3, [pc, #248]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800696a:	f8b3 212a 	ldrh.w	r2, [r3, #298]	@ 0x12a
            Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_LeftA =
 800696e:	4b3d      	ldr	r3, [pc, #244]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006970:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_LeftB;
 8006974:	4b3b      	ldr	r3, [pc, #236]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006976:	f8b3 212c 	ldrh.w	r2, [r3, #300]	@ 0x12c
            Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_LeftB =
 800697a:	4b3a      	ldr	r3, [pc, #232]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800697c:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.FiveTurnSwitch;
 8006980:	4b38      	ldr	r3, [pc, #224]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006982:	f8b3 212e 	ldrh.w	r2, [r3, #302]	@ 0x12e
            Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FiveTurn_Switch =
 8006986:	4b37      	ldr	r3, [pc, #220]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006988:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_WinchDrv;
 800698c:	4b35      	ldr	r3, [pc, #212]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800698e:	f8b3 2130 	ldrh.w	r2, [r3, #304]	@ 0x130
            Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PValveError_WinchPw =
 8006992:	4b34      	ldr	r3, [pc, #208]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006994:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_AlignDrv;
 8006998:	4b32      	ldr	r3, [pc, #200]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 800699a:	f8b3 2132 	ldrh.w	r2, [r3, #306]	@ 0x132
            Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_Algin =
 800699e:	4b31      	ldr	r3, [pc, #196]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069a0:	f8a3 21b4 	strh.w	r2, [r3, #436]	@ 0x1b4
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_EmgDrv;
 80069a4:	4b2f      	ldr	r3, [pc, #188]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069a6:	f8b3 2134 	ldrh.w	r2, [r3, #308]	@ 0x134
            Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_Emg =
 80069aa:	4b2e      	ldr	r3, [pc, #184]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069ac:	f8a3 21b6 	strh.w	r2, [r3, #438]	@ 0x1b6
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_MainCy01Drv;
 80069b0:	4b2c      	ldr	r3, [pc, #176]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069b2:	f8b3 2136 	ldrh.w	r2, [r3, #310]	@ 0x136
            Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_MC01 =
 80069b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069b8:	f8a3 21b8 	strh.w	r2, [r3, #440]	@ 0x1b8
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_MainCy02Drv;
 80069bc:	4b29      	ldr	r3, [pc, #164]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069be:	f8b3 2138 	ldrh.w	r2, [r3, #312]	@ 0x138
            Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_MC02 =
 80069c2:	4b28      	ldr	r3, [pc, #160]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069c4:	f8a3 21ba 	strh.w	r2, [r3, #442]	@ 0x1ba
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_SubCy01Drv;
 80069c8:	4b26      	ldr	r3, [pc, #152]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069ca:	f8b3 213a 	ldrh.w	r2, [r3, #314]	@ 0x13a
            Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_SC01 =
 80069ce:	4b25      	ldr	r3, [pc, #148]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069d0:	f8a3 21bc 	strh.w	r2, [r3, #444]	@ 0x1bc
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_SubCy02Drv;
 80069d4:	4b23      	ldr	r3, [pc, #140]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069d6:	f8b3 213c 	ldrh.w	r2, [r3, #316]	@ 0x13c
            Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_SC02 =
 80069da:	4b22      	ldr	r3, [pc, #136]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069dc:	f8a3 21be 	strh.w	r2, [r3, #446]	@ 0x1be
              Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.OverPressure;
 80069e0:	4b20      	ldr	r3, [pc, #128]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069e2:	f8b3 213e 	ldrh.w	r2, [r3, #318]	@ 0x13e
            Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_PreOver =
 80069e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069e8:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
          break;
 80069ec:	e02f      	b.n	8006a4e <Hils_SequenceCtrl+0x252>
          if (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.OutputSetCmd) == 1)
 80069ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069f0:	f8b3 3302 	ldrh.w	r3, [r3, #770]	@ 0x302
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d108      	bne.n	8006a0a <Hils_SequenceCtrl+0x20e>
            Lws_HilsCtrl_240218_v_1_0_DW.is_OutSet_Control =
 80069f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
            Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i2 = 0U;
 8006a00:	4b18      	ldr	r3, [pc, #96]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
          break;
 8006a08:	e022      	b.n	8006a50 <Hils_SequenceCtrl+0x254>
              Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsOutSet_Change;
 8006a0a:	4b16      	ldr	r3, [pc, #88]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006a0c:	f8b3 22bc 	ldrh.w	r2, [r3, #700]	@ 0x2bc
            Lws_HilsCtrl_240218_v_1_0_DW.OutputSetCmd =
 8006a10:	4b14      	ldr	r3, [pc, #80]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006a12:	f8a3 2302 	strh.w	r2, [r3, #770]	@ 0x302
          break;
 8006a16:	e01b      	b.n	8006a50 <Hils_SequenceCtrl+0x254>
          Lws_HilsCtrl_240218_v_1_0_DW.is_OutSet_Control =
 8006a18:	4b12      	ldr	r3, [pc, #72]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006a1a:	2205      	movs	r2, #5
 8006a1c:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
          break;
 8006a20:	e016      	b.n	8006a50 <Hils_SequenceCtrl+0x254>
          Lws_HilsCtrl_240218_v_1_0_DW.is_OutSet_Control =
 8006a22:	4b10      	ldr	r3, [pc, #64]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
            Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsOutSet_Change;
 8006a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006a2c:	f8b3 22bc 	ldrh.w	r2, [r3, #700]	@ 0x2bc
          Lws_HilsCtrl_240218_v_1_0_DW.OutputSetCmd =
 8006a30:	4b0c      	ldr	r3, [pc, #48]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006a32:	f8a3 2302 	strh.w	r2, [r3, #770]	@ 0x302
          break;
 8006a36:	e00b      	b.n	8006a50 <Hils_SequenceCtrl+0x254>
          Lws_HilsCtrl_240218_v_1_0_DW.is_OutSet_Control =
 8006a38:	4b0a      	ldr	r3, [pc, #40]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
            Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsOutSet_Change;
 8006a40:	4b08      	ldr	r3, [pc, #32]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006a42:	f8b3 22bc 	ldrh.w	r2, [r3, #700]	@ 0x2bc
          Lws_HilsCtrl_240218_v_1_0_DW.OutputSetCmd =
 8006a46:	4b07      	ldr	r3, [pc, #28]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006a48:	f8a3 2302 	strh.w	r2, [r3, #770]	@ 0x302
          break;
 8006a4c:	e000      	b.n	8006a50 <Hils_SequenceCtrl+0x254>
          break;
 8006a4e:	bf00      	nop
      break;
 8006a50:	e119      	b.n	8006c86 <Hils_SequenceCtrl+0x48a>
      switch (Lws_HilsCtrl_240218_v_1_0_DW.HilsMode.Op_Mode)
 8006a52:	4b04      	ldr	r3, [pc, #16]	@ (8006a64 <Hils_SequenceCtrl+0x268>)
 8006a54:	f8b3 32c0 	ldrh.w	r3, [r3, #704]	@ 0x2c0
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d005      	beq.n	8006a68 <Hils_SequenceCtrl+0x26c>
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d058      	beq.n	8006b12 <Hils_SequenceCtrl+0x316>
 8006a60:	e05c      	b.n	8006b1c <Hils_SequenceCtrl+0x320>
 8006a62:	bf00      	nop
 8006a64:	200008e8 	.word	0x200008e8
        Lws_HilsCtrl_240218_v_1_0_DW.is_c10_Lws_HilsCtrl_240218_v_1_ =
 8006a68:	4b88      	ldr	r3, [pc, #544]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310
        Lws_HilsCtrl_240218_v_1_0_DW.is_Main_Hils_Control =
 8006a70:	4b86      	ldr	r3, [pc, #536]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
        Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning = 1U;
 8006a78:	4b84      	ldr	r3, [pc, #528]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f8a3 21a4 	strh.w	r2, [r3, #420]	@ 0x1a4
        Lws_HilsCtrl_240218_v_1_0_DW.is_OutSet_Control =
 8006a80:	4b82      	ldr	r3, [pc, #520]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006a82:	2204      	movs	r2, #4
 8006a84:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
        Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_Return = 0U;
 8006a88:	4b80      	ldr	r3, [pc, #512]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_BoostPump = 0U;
 8006a90:	4b7e      	ldr	r3, [pc, #504]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_WinchDrv = 0U;
 8006a98:	4b7c      	ldr	r3, [pc, #496]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_DropLift = 0U;
 8006aa0:	4b7a      	ldr	r3, [pc, #488]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
        Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_RightA = 0U;
 8006aa8:	4b78      	ldr	r3, [pc, #480]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_RightB = 0U;
 8006ab0:	4b76      	ldr	r3, [pc, #472]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
        Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_LeftA = 0U;
 8006ab8:	4b74      	ldr	r3, [pc, #464]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
        Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_LeftB = 0U;
 8006ac0:	4b72      	ldr	r3, [pc, #456]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
        Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FiveTurn_Switch = 1U;
 8006ac8:	4b70      	ldr	r3, [pc, #448]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
        Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PValveError_WinchPw = 0U;
 8006ad0:	4b6e      	ldr	r3, [pc, #440]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
        Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_Algin = 0U;
 8006ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8a3 21b4 	strh.w	r2, [r3, #436]	@ 0x1b4
        Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_Emg = 0U;
 8006ae0:	4b6a      	ldr	r3, [pc, #424]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8a3 21b6 	strh.w	r2, [r3, #438]	@ 0x1b6
        Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_MC01 = 0U;
 8006ae8:	4b68      	ldr	r3, [pc, #416]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8a3 21b8 	strh.w	r2, [r3, #440]	@ 0x1b8
        Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_MC02 = 0U;
 8006af0:	4b66      	ldr	r3, [pc, #408]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8a3 21ba 	strh.w	r2, [r3, #442]	@ 0x1ba
        Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_SC01 = 0U;
 8006af8:	4b64      	ldr	r3, [pc, #400]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8a3 21bc 	strh.w	r2, [r3, #444]	@ 0x1bc
        Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_SC02 = 0U;
 8006b00:	4b62      	ldr	r3, [pc, #392]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8a3 21be 	strh.w	r2, [r3, #446]	@ 0x1be
        Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_PreOver = 0U;
 8006b08:	4b60      	ldr	r3, [pc, #384]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
        break;
 8006b10:	e09c      	b.n	8006c4c <Hils_SequenceCtrl+0x450>
        Lws_HilsCtrl_240218_v_1_0_DW.is_c10_Lws_HilsCtrl_240218_v_1_ =
 8006b12:	4b5e      	ldr	r3, [pc, #376]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310
        break;
 8006b1a:	e097      	b.n	8006c4c <Hils_SequenceCtrl+0x450>
        if ((((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsMode_Start) == 1)
 8006b1c:	4b5b      	ldr	r3, [pc, #364]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b1e:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d10d      	bne.n	8006b42 <Hils_SequenceCtrl+0x346>
            && (((int32_T)Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsMode_Stop) ==
 8006b26:	4b59      	ldr	r3, [pc, #356]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b28:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d108      	bne.n	8006b42 <Hils_SequenceCtrl+0x346>
          Lws_HilsCtrl_240218_v_1_0_DW.HilsMode.Op_Mode = 1U;
 8006b30:	4b56      	ldr	r3, [pc, #344]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b32:	2201      	movs	r2, #1
 8006b34:	f8a3 22c0 	strh.w	r2, [r3, #704]	@ 0x2c0
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FiveTurn_Switch = 1U;
 8006b38:	4b54      	ldr	r3, [pc, #336]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
        break;
 8006b40:	e083      	b.n	8006c4a <Hils_SequenceCtrl+0x44e>
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.Power_On = 0U;
 8006b42:	4b52      	ldr	r3, [pc, #328]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WinchPower_On = 0U;
 8006b4a:	4b50      	ldr	r3, [pc, #320]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BoostPower_On = 0U;
 8006b52:	4b4e      	ldr	r3, [pc, #312]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	f8a3 21aa 	strh.w	r2, [r3, #426]	@ 0x1aa
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.DlPower_On = 0U;
 8006b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8a3 21ac 	strh.w	r2, [r3, #428]	@ 0x1ac
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_Boost = 0U;
 8006b62:	4b4a      	ldr	r3, [pc, #296]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_AlignDrv = 0U;
 8006b6a:	4b48      	ldr	r3, [pc, #288]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_DropLift = 0U;
 8006b72:	4b46      	ldr	r3, [pc, #280]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
          Lws_HilsCtrl_240218_v_1_0_B.Pressure_WinchPwBase = 0.0F;
 8006b7a:	4b45      	ldr	r3, [pc, #276]	@ (8006c90 <Hils_SequenceCtrl+0x494>)
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
          Lws_HilsCtrl_240218_v_1_0_B.Pressure_DropLiftPw = 0.0F;
 8006b82:	4b43      	ldr	r3, [pc, #268]	@ (8006c90 <Hils_SequenceCtrl+0x494>)
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
          Lws_HilsCtrl_240218_v_1_0_B.OilFlow_DropLift = 0.0F;
 8006b8a:	4b41      	ldr	r3, [pc, #260]	@ (8006c90 <Hils_SequenceCtrl+0x494>)
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	605a      	str	r2, [r3, #4]
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_AlignBk = 0U;
 8006b92:	4b3e      	ldr	r3, [pc, #248]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_MainBk = 0U;
 8006b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_SubBk = 0U;
 8006ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.AlignBk_Unlock = 0U;
 8006baa:	4b38      	ldr	r3, [pc, #224]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8a3 21ae 	strh.w	r2, [r3, #430]	@ 0x1ae
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WdBk_Unlock = 0U;
 8006bb2:	4b36      	ldr	r3, [pc, #216]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8a3 21b2 	strh.w	r2, [r3, #434]	@ 0x1b2
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BandBk_Unlock = 0U;
 8006bba:	4b34      	ldr	r3, [pc, #208]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8a3 21b0 	strh.w	r2, [r3, #432]	@ 0x1b0
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_Return = 0U;
 8006bc2:	4b32      	ldr	r3, [pc, #200]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_BoostPump = 0U;
 8006bca:	4b30      	ldr	r3, [pc, #192]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_WinchDrv = 0U;
 8006bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_DropLift = 0U;
 8006bda:	4b2c      	ldr	r3, [pc, #176]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_RightA = 0U;
 8006be2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_RightB = 0U;
 8006bea:	4b28      	ldr	r3, [pc, #160]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_LeftA = 0U;
 8006bf2:	4b26      	ldr	r3, [pc, #152]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_LeftB = 0U;
 8006bfa:	4b24      	ldr	r3, [pc, #144]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FiveTurn_Switch = 0U;
 8006c02:	4b22      	ldr	r3, [pc, #136]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PValveError_WinchPw = 0U;
 8006c0a:	4b20      	ldr	r3, [pc, #128]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_Algin = 0U;
 8006c12:	4b1e      	ldr	r3, [pc, #120]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	f8a3 21b4 	strh.w	r2, [r3, #436]	@ 0x1b4
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_Emg = 0U;
 8006c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8a3 21b6 	strh.w	r2, [r3, #438]	@ 0x1b6
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_MC01 = 0U;
 8006c22:	4b1a      	ldr	r3, [pc, #104]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8a3 21b8 	strh.w	r2, [r3, #440]	@ 0x1b8
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_MC02 = 0U;
 8006c2a:	4b18      	ldr	r3, [pc, #96]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8a3 21ba 	strh.w	r2, [r3, #442]	@ 0x1ba
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_SC01 = 0U;
 8006c32:	4b16      	ldr	r3, [pc, #88]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8a3 21bc 	strh.w	r2, [r3, #444]	@ 0x1bc
          Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_SC02 = 0U;
 8006c3a:	4b14      	ldr	r3, [pc, #80]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8a3 21be 	strh.w	r2, [r3, #446]	@ 0x1be
          Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_PreOver = 0U;
 8006c42:	4b12      	ldr	r3, [pc, #72]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
        break;
 8006c4a:	bf00      	nop
      break;
 8006c4c:	e01b      	b.n	8006c86 <Hils_SequenceCtrl+0x48a>
      if (((uint32_T)Lws_HilsCtrl_240218_v_1_0_DW.temporalCounter_i1) >= 200U)
 8006c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c50:	f8b3 3304 	ldrh.w	r3, [r3, #772]	@ 0x304
 8006c54:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c56:	d90c      	bls.n	8006c72 <Hils_SequenceCtrl+0x476>
        Lws_HilsCtrl_240218_v_1_0_DW.HilsMode.Op_Mode = 0U;
 8006c58:	4b0c      	ldr	r3, [pc, #48]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8a3 22c0 	strh.w	r2, [r3, #704]	@ 0x2c0
        Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning = 0U;
 8006c60:	4b0a      	ldr	r3, [pc, #40]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8a3 21a4 	strh.w	r2, [r3, #420]	@ 0x1a4
        Lws_HilsCtrl_240218_v_1_0_DW.is_c10_Lws_HilsCtrl_240218_v_1_ =
 8006c68:	4b08      	ldr	r3, [pc, #32]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310
      break;
 8006c70:	e009      	b.n	8006c86 <Hils_SequenceCtrl+0x48a>
        Lws_HilsCtrl_240218_v_1_0_DW.HilsMode.Op_Mode = 0U;
 8006c72:	4b06      	ldr	r3, [pc, #24]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	f8a3 22c0 	strh.w	r2, [r3, #704]	@ 0x2c0
        Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning = 0U;
 8006c7a:	4b04      	ldr	r3, [pc, #16]	@ (8006c8c <Hils_SequenceCtrl+0x490>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8a3 21a4 	strh.w	r2, [r3, #420]	@ 0x1a4
      break;
 8006c82:	e000      	b.n	8006c86 <Hils_SequenceCtrl+0x48a>
      break;
 8006c84:	bf00      	nop
}
 8006c86:	bf00      	nop
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	200008e8 	.word	0x200008e8
 8006c90:	20000808 	.word	0x20000808

08006c94 <Input_Processor>:
#include "Lws_HilsCtrl_240218_v_1_0.h"
#include "Lws_HilsCtrl_240218_v_1_0_private.h"

/* Output and update for atomic system: 'HilsInput_Processor' (':4741') */
void Input_Processor(void)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
  real32_T denAccum;

  /* S-Function (sdspbiquad): 'Digital Filter' (':5362:26') incorporates:
   *  Inport: 'LwsWtuA_HilsAI' (':3999')
   */
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[0])
 8006c9a:	4bd0      	ldr	r3, [pc, #832]	@ (8006fdc <Input_Processor+0x348>)
 8006c9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ca0:	ed9f 7acf 	vldr	s14, [pc, #828]	@ 8006fe0 <Input_Processor+0x34c>
 8006ca4:	ee27 7a87 	vmul.f32	s14, s15, s14
              - (-1.95557821F *
                 Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES[0])) -
 8006ca8:	4bce      	ldr	r3, [pc, #824]	@ (8006fe4 <Input_Processor+0x350>)
 8006caa:	edd3 7ab1 	vldr	s15, [r3, #708]	@ 0x2c4
              - (-1.95557821F *
 8006cae:	eddf 6ace 	vldr	s13, [pc, #824]	@ 8006fe8 <Input_Processor+0x354>
 8006cb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
    (0.956543684F * Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES[1]);
 8006cba:	4bca      	ldr	r3, [pc, #808]	@ (8006fe4 <Input_Processor+0x350>)
 8006cbc:	edd3 7ab2 	vldr	s15, [r3, #712]	@ 0x2c8
 8006cc0:	eddf 6aca 	vldr	s13, [pc, #808]	@ 8006fec <Input_Processor+0x358>
 8006cc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[0])
 8006cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ccc:	edc7 7a01 	vstr	s15, [r7, #4]

  /* DataStoreWrite: 'Data Store Write1' (':4764') incorporates:
   *  S-Function (sdspbiquad): 'Digital Filter' (':5362:26')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_EmgDrv = (denAccum + (2.0F *
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES[0])) +
 8006cd0:	4bc4      	ldr	r3, [pc, #784]	@ (8006fe4 <Input_Processor+0x350>)
 8006cd2:	edd3 7ab1 	vldr	s15, [r3, #708]	@ 0x2c4
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_EmgDrv = (denAccum + (2.0F *
 8006cd6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006cda:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cde:	ee37 7a27 	vadd.f32	s14, s14, s15
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES[1];
 8006ce2:	4bc0      	ldr	r3, [pc, #768]	@ (8006fe4 <Input_Processor+0x350>)
 8006ce4:	edd3 7ab2 	vldr	s15, [r3, #712]	@ 0x2c8
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES[0])) +
 8006ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_EmgDrv = (denAccum + (2.0F *
 8006cec:	4bbd      	ldr	r3, [pc, #756]	@ (8006fe4 <Input_Processor+0x350>)
 8006cee:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144

  /* S-Function (sdspbiquad): 'Digital Filter' (':5362:26') */
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES[1] =
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES[0];
 8006cf2:	4bbc      	ldr	r3, [pc, #752]	@ (8006fe4 <Input_Processor+0x350>)
 8006cf4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES[1] =
 8006cf8:	4aba      	ldr	r2, [pc, #744]	@ (8006fe4 <Input_Processor+0x350>)
 8006cfa:	f8c2 32c8 	str.w	r3, [r2, #712]	@ 0x2c8
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES[0] = denAccum;
 8006cfe:	4ab9      	ldr	r2, [pc, #740]	@ (8006fe4 <Input_Processor+0x350>)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8c2 32c4 	str.w	r3, [r2, #708]	@ 0x2c4

  /* S-Function (sdspbiquad): 'Digital Filter' (':5421:26') incorporates:
   *  Inport: 'LwsWtuA_HilsAI' (':3999')
   */
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[1])
 8006d06:	4bb5      	ldr	r3, [pc, #724]	@ (8006fdc <Input_Processor+0x348>)
 8006d08:	edd3 7a05 	vldr	s15, [r3, #20]
 8006d0c:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8006fe0 <Input_Processor+0x34c>
 8006d10:	ee27 7a87 	vmul.f32	s14, s15, s14
              - (-1.95557821F *
                 Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_o[0])) -
 8006d14:	4bb3      	ldr	r3, [pc, #716]	@ (8006fe4 <Input_Processor+0x350>)
 8006d16:	edd3 7ab3 	vldr	s15, [r3, #716]	@ 0x2cc
              - (-1.95557821F *
 8006d1a:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8006fe8 <Input_Processor+0x354>
 8006d1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006d22:	ee37 7a27 	vadd.f32	s14, s14, s15
    (0.956543684F * Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_o[1]);
 8006d26:	4baf      	ldr	r3, [pc, #700]	@ (8006fe4 <Input_Processor+0x350>)
 8006d28:	edd3 7ab4 	vldr	s15, [r3, #720]	@ 0x2d0
 8006d2c:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8006fec <Input_Processor+0x358>
 8006d30:	ee67 7aa6 	vmul.f32	s15, s15, s13
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[1])
 8006d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d38:	edc7 7a01 	vstr	s15, [r7, #4]

  /* DataStoreWrite: 'Data Store Write1' (':4764') incorporates:
   *  S-Function (sdspbiquad): 'Digital Filter' (':5421:26')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_DrumDrv = (denAccum + (2.0F *
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_o[0])) +
 8006d3c:	4ba9      	ldr	r3, [pc, #676]	@ (8006fe4 <Input_Processor+0x350>)
 8006d3e:	edd3 7ab3 	vldr	s15, [r3, #716]	@ 0x2cc
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_DrumDrv = (denAccum + (2.0F *
 8006d42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_o[1];
 8006d4e:	4ba5      	ldr	r3, [pc, #660]	@ (8006fe4 <Input_Processor+0x350>)
 8006d50:	edd3 7ab4 	vldr	s15, [r3, #720]	@ 0x2d0
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_o[0])) +
 8006d54:	ee77 7a27 	vadd.f32	s15, s14, s15
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_DrumDrv = (denAccum + (2.0F *
 8006d58:	4ba2      	ldr	r3, [pc, #648]	@ (8006fe4 <Input_Processor+0x350>)
 8006d5a:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148

  /* S-Function (sdspbiquad): 'Digital Filter' (':5421:26') */
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_o[1] =
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_o[0];
 8006d5e:	4ba1      	ldr	r3, [pc, #644]	@ (8006fe4 <Input_Processor+0x350>)
 8006d60:	f8d3 32cc 	ldr.w	r3, [r3, #716]	@ 0x2cc
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_o[1] =
 8006d64:	4a9f      	ldr	r2, [pc, #636]	@ (8006fe4 <Input_Processor+0x350>)
 8006d66:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_o[0] = denAccum;
 8006d6a:	4a9e      	ldr	r2, [pc, #632]	@ (8006fe4 <Input_Processor+0x350>)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8c2 32cc 	str.w	r3, [r2, #716]	@ 0x2cc

  /* S-Function (sdspbiquad): 'Digital Filter' (':5426:26') incorporates:
   *  Inport: 'LwsWtuA_HilsAI' (':3999')
   */
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[2])
 8006d72:	4b9a      	ldr	r3, [pc, #616]	@ (8006fdc <Input_Processor+0x348>)
 8006d74:	edd3 7a06 	vldr	s15, [r3, #24]
 8006d78:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8006fe0 <Input_Processor+0x34c>
 8006d7c:	ee27 7a87 	vmul.f32	s14, s15, s14
              - (-1.95557821F *
                 Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_g[0])) -
 8006d80:	4b98      	ldr	r3, [pc, #608]	@ (8006fe4 <Input_Processor+0x350>)
 8006d82:	edd3 7ab5 	vldr	s15, [r3, #724]	@ 0x2d4
              - (-1.95557821F *
 8006d86:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8006fe8 <Input_Processor+0x354>
 8006d8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
    (0.956543684F * Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_g[1]);
 8006d92:	4b94      	ldr	r3, [pc, #592]	@ (8006fe4 <Input_Processor+0x350>)
 8006d94:	edd3 7ab6 	vldr	s15, [r3, #728]	@ 0x2d8
 8006d98:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8006fec <Input_Processor+0x358>
 8006d9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[2])
 8006da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006da4:	edc7 7a01 	vstr	s15, [r7, #4]

  /* DataStoreWrite: 'Data Store Write1' (':4764') incorporates:
   *  S-Function (sdspbiquad): 'Digital Filter' (':5426:26')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_AlignDrv = (denAccum + (2.0F *
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_g[0])) +
 8006da8:	4b8e      	ldr	r3, [pc, #568]	@ (8006fe4 <Input_Processor+0x350>)
 8006daa:	edd3 7ab5 	vldr	s15, [r3, #724]	@ 0x2d4
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_AlignDrv = (denAccum + (2.0F *
 8006dae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006db6:	ee37 7a27 	vadd.f32	s14, s14, s15
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_g[1];
 8006dba:	4b8a      	ldr	r3, [pc, #552]	@ (8006fe4 <Input_Processor+0x350>)
 8006dbc:	edd3 7ab6 	vldr	s15, [r3, #728]	@ 0x2d8
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_g[0])) +
 8006dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_AlignDrv = (denAccum + (2.0F *
 8006dc4:	4b87      	ldr	r3, [pc, #540]	@ (8006fe4 <Input_Processor+0x350>)
 8006dc6:	edc3 7a53 	vstr	s15, [r3, #332]	@ 0x14c

  /* S-Function (sdspbiquad): 'Digital Filter' (':5426:26') */
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_g[1] =
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_g[0];
 8006dca:	4b86      	ldr	r3, [pc, #536]	@ (8006fe4 <Input_Processor+0x350>)
 8006dcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_g[1] =
 8006dd0:	4a84      	ldr	r2, [pc, #528]	@ (8006fe4 <Input_Processor+0x350>)
 8006dd2:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_g[0] = denAccum;
 8006dd6:	4a83      	ldr	r2, [pc, #524]	@ (8006fe4 <Input_Processor+0x350>)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4

  /* S-Function (sdspbiquad): 'Digital Filter' (':5431:26') incorporates:
   *  Inport: 'LwsWtuA_HilsAI' (':3999')
   */
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[3])
 8006dde:	4b7f      	ldr	r3, [pc, #508]	@ (8006fdc <Input_Processor+0x348>)
 8006de0:	edd3 7a07 	vldr	s15, [r3, #28]
 8006de4:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8006fe0 <Input_Processor+0x34c>
 8006de8:	ee27 7a87 	vmul.f32	s14, s15, s14
              - (-1.95557821F *
                 Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_a[0])) -
 8006dec:	4b7d      	ldr	r3, [pc, #500]	@ (8006fe4 <Input_Processor+0x350>)
 8006dee:	edd3 7ab7 	vldr	s15, [r3, #732]	@ 0x2dc
              - (-1.95557821F *
 8006df2:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8006fe8 <Input_Processor+0x354>
 8006df6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006dfa:	ee37 7a27 	vadd.f32	s14, s14, s15
    (0.956543684F * Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_a[1]);
 8006dfe:	4b79      	ldr	r3, [pc, #484]	@ (8006fe4 <Input_Processor+0x350>)
 8006e00:	edd3 7ab8 	vldr	s15, [r3, #736]	@ 0x2e0
 8006e04:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8006fec <Input_Processor+0x358>
 8006e08:	ee67 7aa6 	vmul.f32	s15, s15, s13
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[3])
 8006e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e10:	edc7 7a01 	vstr	s15, [r7, #4]

  /* DataStoreWrite: 'Data Store Write1' (':4764') incorporates:
   *  S-Function (sdspbiquad): 'Digital Filter' (':5431:26')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_MainCy01Drv = (denAccum + (2.0F *
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_a[0])) +
 8006e14:	4b73      	ldr	r3, [pc, #460]	@ (8006fe4 <Input_Processor+0x350>)
 8006e16:	edd3 7ab7 	vldr	s15, [r3, #732]	@ 0x2dc
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_MainCy01Drv = (denAccum + (2.0F *
 8006e1a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e22:	ee37 7a27 	vadd.f32	s14, s14, s15
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_a[1];
 8006e26:	4b6f      	ldr	r3, [pc, #444]	@ (8006fe4 <Input_Processor+0x350>)
 8006e28:	edd3 7ab8 	vldr	s15, [r3, #736]	@ 0x2e0
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_a[0])) +
 8006e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_MainCy01Drv = (denAccum + (2.0F *
 8006e30:	4b6c      	ldr	r3, [pc, #432]	@ (8006fe4 <Input_Processor+0x350>)
 8006e32:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150

  /* S-Function (sdspbiquad): 'Digital Filter' (':5431:26') */
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_a[1] =
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_a[0];
 8006e36:	4b6b      	ldr	r3, [pc, #428]	@ (8006fe4 <Input_Processor+0x350>)
 8006e38:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_a[1] =
 8006e3c:	4a69      	ldr	r2, [pc, #420]	@ (8006fe4 <Input_Processor+0x350>)
 8006e3e:	f8c2 32e0 	str.w	r3, [r2, #736]	@ 0x2e0
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_a[0] = denAccum;
 8006e42:	4a68      	ldr	r2, [pc, #416]	@ (8006fe4 <Input_Processor+0x350>)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8c2 32dc 	str.w	r3, [r2, #732]	@ 0x2dc

  /* S-Function (sdspbiquad): 'Digital Filter' (':5436:26') incorporates:
   *  Inport: 'LwsWtuA_HilsAI' (':3999')
   */
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[4])
 8006e4a:	4b64      	ldr	r3, [pc, #400]	@ (8006fdc <Input_Processor+0x348>)
 8006e4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8006e50:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8006fe0 <Input_Processor+0x34c>
 8006e54:	ee27 7a87 	vmul.f32	s14, s15, s14
              - (-1.95557821F *
                 Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_c[0])) -
 8006e58:	4b62      	ldr	r3, [pc, #392]	@ (8006fe4 <Input_Processor+0x350>)
 8006e5a:	edd3 7ab9 	vldr	s15, [r3, #740]	@ 0x2e4
              - (-1.95557821F *
 8006e5e:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006fe8 <Input_Processor+0x354>
 8006e62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e66:	ee37 7a27 	vadd.f32	s14, s14, s15
    (0.956543684F * Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_c[1]);
 8006e6a:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe4 <Input_Processor+0x350>)
 8006e6c:	edd3 7aba 	vldr	s15, [r3, #744]	@ 0x2e8
 8006e70:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006fec <Input_Processor+0x358>
 8006e74:	ee67 7aa6 	vmul.f32	s15, s15, s13
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[4])
 8006e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e7c:	edc7 7a01 	vstr	s15, [r7, #4]

  /* DataStoreWrite: 'Data Store Write1' (':4764') incorporates:
   *  S-Function (sdspbiquad): 'Digital Filter' (':5436:26')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_MainCy02Drv = (denAccum + (2.0F *
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_c[0])) +
 8006e80:	4b58      	ldr	r3, [pc, #352]	@ (8006fe4 <Input_Processor+0x350>)
 8006e82:	edd3 7ab9 	vldr	s15, [r3, #740]	@ 0x2e4
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_MainCy02Drv = (denAccum + (2.0F *
 8006e86:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_c[1];
 8006e92:	4b54      	ldr	r3, [pc, #336]	@ (8006fe4 <Input_Processor+0x350>)
 8006e94:	edd3 7aba 	vldr	s15, [r3, #744]	@ 0x2e8
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_c[0])) +
 8006e98:	ee77 7a27 	vadd.f32	s15, s14, s15
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_MainCy02Drv = (denAccum + (2.0F *
 8006e9c:	4b51      	ldr	r3, [pc, #324]	@ (8006fe4 <Input_Processor+0x350>)
 8006e9e:	edc3 7a55 	vstr	s15, [r3, #340]	@ 0x154

  /* S-Function (sdspbiquad): 'Digital Filter' (':5436:26') */
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_c[1] =
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_c[0];
 8006ea2:	4b50      	ldr	r3, [pc, #320]	@ (8006fe4 <Input_Processor+0x350>)
 8006ea4:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_c[1] =
 8006ea8:	4a4e      	ldr	r2, [pc, #312]	@ (8006fe4 <Input_Processor+0x350>)
 8006eaa:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_c[0] = denAccum;
 8006eae:	4a4d      	ldr	r2, [pc, #308]	@ (8006fe4 <Input_Processor+0x350>)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8c2 32e4 	str.w	r3, [r2, #740]	@ 0x2e4

  /* S-Function (sdspbiquad): 'Digital Filter' (':5441:26') incorporates:
   *  Inport: 'LwsWtuA_HilsAI' (':3999')
   */
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[5])
 8006eb6:	4b49      	ldr	r3, [pc, #292]	@ (8006fdc <Input_Processor+0x348>)
 8006eb8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006ebc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8006fe0 <Input_Processor+0x34c>
 8006ec0:	ee27 7a87 	vmul.f32	s14, s15, s14
              - (-1.95557821F *
                 Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_h[0])) -
 8006ec4:	4b47      	ldr	r3, [pc, #284]	@ (8006fe4 <Input_Processor+0x350>)
 8006ec6:	edd3 7abb 	vldr	s15, [r3, #748]	@ 0x2ec
              - (-1.95557821F *
 8006eca:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8006fe8 <Input_Processor+0x354>
 8006ece:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ed2:	ee37 7a27 	vadd.f32	s14, s14, s15
    (0.956543684F * Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_h[1]);
 8006ed6:	4b43      	ldr	r3, [pc, #268]	@ (8006fe4 <Input_Processor+0x350>)
 8006ed8:	edd3 7abc 	vldr	s15, [r3, #752]	@ 0x2f0
 8006edc:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006fec <Input_Processor+0x358>
 8006ee0:	ee67 7aa6 	vmul.f32	s15, s15, s13
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[5])
 8006ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ee8:	edc7 7a01 	vstr	s15, [r7, #4]

  /* DataStoreWrite: 'Data Store Write1' (':4764') incorporates:
   *  S-Function (sdspbiquad): 'Digital Filter' (':5441:26')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_SubCy01Drv = (denAccum + (2.0F *
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_h[0])) +
 8006eec:	4b3d      	ldr	r3, [pc, #244]	@ (8006fe4 <Input_Processor+0x350>)
 8006eee:	edd3 7abb 	vldr	s15, [r3, #748]	@ 0x2ec
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_SubCy01Drv = (denAccum + (2.0F *
 8006ef2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006efa:	ee37 7a27 	vadd.f32	s14, s14, s15
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_h[1];
 8006efe:	4b39      	ldr	r3, [pc, #228]	@ (8006fe4 <Input_Processor+0x350>)
 8006f00:	edd3 7abc 	vldr	s15, [r3, #752]	@ 0x2f0
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_h[0])) +
 8006f04:	ee77 7a27 	vadd.f32	s15, s14, s15
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_SubCy01Drv = (denAccum + (2.0F *
 8006f08:	4b36      	ldr	r3, [pc, #216]	@ (8006fe4 <Input_Processor+0x350>)
 8006f0a:	edc3 7a56 	vstr	s15, [r3, #344]	@ 0x158

  /* S-Function (sdspbiquad): 'Digital Filter' (':5441:26') */
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_h[1] =
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_h[0];
 8006f0e:	4b35      	ldr	r3, [pc, #212]	@ (8006fe4 <Input_Processor+0x350>)
 8006f10:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_h[1] =
 8006f14:	4a33      	ldr	r2, [pc, #204]	@ (8006fe4 <Input_Processor+0x350>)
 8006f16:	f8c2 32f0 	str.w	r3, [r2, #752]	@ 0x2f0
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_h[0] = denAccum;
 8006f1a:	4a32      	ldr	r2, [pc, #200]	@ (8006fe4 <Input_Processor+0x350>)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec

  /* S-Function (sdspbiquad): 'Digital Filter' (':5446:26') incorporates:
   *  Inport: 'LwsWtuA_HilsAI' (':3999')
   */
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[6])
 8006f22:	4b2e      	ldr	r3, [pc, #184]	@ (8006fdc <Input_Processor+0x348>)
 8006f24:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8006f28:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006fe0 <Input_Processor+0x34c>
 8006f2c:	ee27 7a87 	vmul.f32	s14, s15, s14
              - (-1.95557821F *
                 Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_m[0])) -
 8006f30:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe4 <Input_Processor+0x350>)
 8006f32:	edd3 7abd 	vldr	s15, [r3, #756]	@ 0x2f4
              - (-1.95557821F *
 8006f36:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8006fe8 <Input_Processor+0x354>
 8006f3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006f3e:	ee37 7a27 	vadd.f32	s14, s14, s15
    (0.956543684F * Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_m[1]);
 8006f42:	4b28      	ldr	r3, [pc, #160]	@ (8006fe4 <Input_Processor+0x350>)
 8006f44:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 8006f48:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8006fec <Input_Processor+0x358>
 8006f4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  denAccum = ((0.000241359056F * Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[6])
 8006f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f54:	edc7 7a01 	vstr	s15, [r7, #4]

  /* DataStoreWrite: 'Data Store Write1' (':4764') incorporates:
   *  S-Function (sdspbiquad): 'Digital Filter' (':5446:26')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_SubCy02Drv = (denAccum + (2.0F *
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_m[0])) +
 8006f58:	4b22      	ldr	r3, [pc, #136]	@ (8006fe4 <Input_Processor+0x350>)
 8006f5a:	edd3 7abd 	vldr	s15, [r3, #756]	@ 0x2f4
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_SubCy02Drv = (denAccum + (2.0F *
 8006f5e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f66:	ee37 7a27 	vadd.f32	s14, s14, s15
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_m[1];
 8006f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe4 <Input_Processor+0x350>)
 8006f6c:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_m[0])) +
 8006f70:	ee77 7a27 	vadd.f32	s15, s14, s15
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.PValve_SubCy02Drv = (denAccum + (2.0F *
 8006f74:	4b1b      	ldr	r3, [pc, #108]	@ (8006fe4 <Input_Processor+0x350>)
 8006f76:	edc3 7a57 	vstr	s15, [r3, #348]	@ 0x15c

  /* S-Function (sdspbiquad): 'Digital Filter' (':5446:26') */
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_m[1] =
    Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_m[0];
 8006f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe4 <Input_Processor+0x350>)
 8006f7c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	@ 0x2f4
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_m[1] =
 8006f80:	4a18      	ldr	r2, [pc, #96]	@ (8006fe4 <Input_Processor+0x350>)
 8006f82:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8
  Lws_HilsCtrl_240218_v_1_0_DW.DigitalFilter_FILT_STATES_m[0] = denAccum;
 8006f86:	4a17      	ldr	r2, [pc, #92]	@ (8006fe4 <Input_Processor+0x350>)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8c2 32f4 	str.w	r3, [r2, #756]	@ 0x2f4

  /* DataStoreWrite: 'Data Store Write1' (':4764') incorporates:
   *  Inport: 'LwsWtuA_HilsAI' (':3999')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.Spare =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsAI[7];
 8006f8e:	4b13      	ldr	r3, [pc, #76]	@ (8006fdc <Input_Processor+0x348>)
 8006f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsAI.Spare =
 8006f92:	4a14      	ldr	r2, [pc, #80]	@ (8006fe4 <Input_Processor+0x350>)
 8006f94:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

  /* DataStoreWrite: 'Data Store Write2' (':4765') incorporates:
   *  Inport: 'LwsWtuA_HilsDI' (':4')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.NoLoadValve_Winch =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsDI[0];
 8006f98:	4b10      	ldr	r3, [pc, #64]	@ (8006fdc <Input_Processor+0x348>)
 8006f9a:	881a      	ldrh	r2, [r3, #0]
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.NoLoadValve_Winch =
 8006f9c:	4b11      	ldr	r3, [pc, #68]	@ (8006fe4 <Input_Processor+0x350>)
 8006f9e:	f8a3 21c4 	strh.w	r2, [r3, #452]	@ 0x1c4
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.NoLoadValve_DropLift =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsDI[1];
 8006fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8006fdc <Input_Processor+0x348>)
 8006fa4:	885a      	ldrh	r2, [r3, #2]
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.NoLoadValve_DropLift =
 8006fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe4 <Input_Processor+0x350>)
 8006fa8:	f8a3 21c6 	strh.w	r2, [r3, #454]	@ 0x1c6
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.CutValve_Winch =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsDI[2];
 8006fac:	4b0b      	ldr	r3, [pc, #44]	@ (8006fdc <Input_Processor+0x348>)
 8006fae:	889a      	ldrh	r2, [r3, #4]
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.CutValve_Winch =
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe4 <Input_Processor+0x350>)
 8006fb2:	f8a3 21c8 	strh.w	r2, [r3, #456]	@ 0x1c8
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.DirValve_AlignBk =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsDI[3];
 8006fb6:	4b09      	ldr	r3, [pc, #36]	@ (8006fdc <Input_Processor+0x348>)
 8006fb8:	88da      	ldrh	r2, [r3, #6]
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.DirValve_AlignBk =
 8006fba:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe4 <Input_Processor+0x350>)
 8006fbc:	f8a3 21ca 	strh.w	r2, [r3, #458]	@ 0x1ca
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.DirValve_MainBk =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsDI[4];
 8006fc0:	4b06      	ldr	r3, [pc, #24]	@ (8006fdc <Input_Processor+0x348>)
 8006fc2:	891a      	ldrh	r2, [r3, #8]
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.DirValve_MainBk =
 8006fc4:	4b07      	ldr	r3, [pc, #28]	@ (8006fe4 <Input_Processor+0x350>)
 8006fc6:	f8a3 21cc 	strh.w	r2, [r3, #460]	@ 0x1cc
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.DirValve_SubBk =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsDI[5];
 8006fca:	4b04      	ldr	r3, [pc, #16]	@ (8006fdc <Input_Processor+0x348>)
 8006fcc:	895a      	ldrh	r2, [r3, #10]
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.DirValve_SubBk =
 8006fce:	4b05      	ldr	r3, [pc, #20]	@ (8006fe4 <Input_Processor+0x350>)
 8006fd0:	f8a3 21ce 	strh.w	r2, [r3, #462]	@ 0x1ce
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.Spare01 =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsDI[6];
 8006fd4:	4b01      	ldr	r3, [pc, #4]	@ (8006fdc <Input_Processor+0x348>)
 8006fd6:	899a      	ldrh	r2, [r3, #12]
 8006fd8:	e00a      	b.n	8006ff0 <Input_Processor+0x35c>
 8006fda:	bf00      	nop
 8006fdc:	20000c08 	.word	0x20000c08
 8006fe0:	397d1554 	.word	0x397d1554
 8006fe4:	200008e8 	.word	0x200008e8
 8006fe8:	3ffa5063 	.word	0x3ffa5063
 8006fec:	3f74e00c 	.word	0x3f74e00c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.Spare01 =
 8006ff0:	4b79      	ldr	r3, [pc, #484]	@ (80071d8 <Input_Processor+0x544>)
 8006ff2:	f8a3 21d0 	strh.w	r2, [r3, #464]	@ 0x1d0
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.Spare02 =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsDI[7];
 8006ff6:	4b79      	ldr	r3, [pc, #484]	@ (80071dc <Input_Processor+0x548>)
 8006ff8:	89da      	ldrh	r2, [r3, #14]
  Lws_HilsCtrl_240218_v_1_0_DW.HilsDI.Spare02 =
 8006ffa:	4b77      	ldr	r3, [pc, #476]	@ (80071d8 <Input_Processor+0x544>)
 8006ffc:	f8a3 21d2 	strh.w	r2, [r3, #466]	@ 0x1d2

  /* DataStoreWrite: 'Data Store Write3' (':4766') incorporates:
   *  Inport: 'LwsWtuA_HilsCmd' (':20')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsMode_Start =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsCmd[0];
 8007000:	4b76      	ldr	r3, [pc, #472]	@ (80071dc <Input_Processor+0x548>)
 8007002:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
  Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsMode_Start =
 8007004:	4b74      	ldr	r3, [pc, #464]	@ (80071d8 <Input_Processor+0x544>)
 8007006:	f8a3 22b8 	strh.w	r2, [r3, #696]	@ 0x2b8
  Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsMode_Stop =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsCmd[1];
 800700a:	4b74      	ldr	r3, [pc, #464]	@ (80071dc <Input_Processor+0x548>)
 800700c:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
  Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsMode_Stop =
 800700e:	4b72      	ldr	r3, [pc, #456]	@ (80071d8 <Input_Processor+0x544>)
 8007010:	f8a3 22ba 	strh.w	r2, [r3, #698]	@ 0x2ba
  Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsOutSet_Change =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsCmd[2];
 8007014:	4b71      	ldr	r3, [pc, #452]	@ (80071dc <Input_Processor+0x548>)
 8007016:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
  Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.HilsOutSet_Change =
 8007018:	4b6f      	ldr	r3, [pc, #444]	@ (80071d8 <Input_Processor+0x544>)
 800701a:	f8a3 22bc 	strh.w	r2, [r3, #700]	@ 0x2bc
  Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.Spare =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsCmd[3];
 800701e:	4b6f      	ldr	r3, [pc, #444]	@ (80071dc <Input_Processor+0x548>)
 8007020:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
  Lws_HilsCtrl_240218_v_1_0_DW.HilsCmd.Spare =
 8007022:	4b6d      	ldr	r3, [pc, #436]	@ (80071d8 <Input_Processor+0x544>)
 8007024:	f8a3 22be 	strh.w	r2, [r3, #702]	@ 0x2be

  /* DataStoreWrite: 'Data Store Write4' (':4767') incorporates:
   *  Inport: 'LwsWtuA_HilsOutSet' (':21')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_Return =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[0];
 8007028:	4b6c      	ldr	r3, [pc, #432]	@ (80071dc <Input_Processor+0x548>)
 800702a:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_Return =
 800702c:	4b6a      	ldr	r3, [pc, #424]	@ (80071d8 <Input_Processor+0x544>)
 800702e:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_BoostPump =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[1];
 8007032:	4b6a      	ldr	r3, [pc, #424]	@ (80071dc <Input_Processor+0x548>)
 8007034:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_BoostPump =
 8007036:	4b68      	ldr	r3, [pc, #416]	@ (80071d8 <Input_Processor+0x544>)
 8007038:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_WinchDrv =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[2];
 800703c:	4b67      	ldr	r3, [pc, #412]	@ (80071dc <Input_Processor+0x548>)
 800703e:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_WinchDrv =
 8007040:	4b65      	ldr	r3, [pc, #404]	@ (80071d8 <Input_Processor+0x544>)
 8007042:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_DropLift =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[3];
 8007046:	4b65      	ldr	r3, [pc, #404]	@ (80071dc <Input_Processor+0x548>)
 8007048:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Filter_DropLift =
 800704a:	4b63      	ldr	r3, [pc, #396]	@ (80071d8 <Input_Processor+0x544>)
 800704c:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_RightA =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[4];
 8007050:	4b62      	ldr	r3, [pc, #392]	@ (80071dc <Input_Processor+0x548>)
 8007052:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_RightA =
 8007056:	4b60      	ldr	r3, [pc, #384]	@ (80071d8 <Input_Processor+0x544>)
 8007058:	f8a3 2126 	strh.w	r2, [r3, #294]	@ 0x126
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_RightB =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[5];
 800705c:	4b5f      	ldr	r3, [pc, #380]	@ (80071dc <Input_Processor+0x548>)
 800705e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_RightB =
 8007062:	4b5d      	ldr	r3, [pc, #372]	@ (80071d8 <Input_Processor+0x544>)
 8007064:	f8a3 2128 	strh.w	r2, [r3, #296]	@ 0x128
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_LeftA =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[6];
 8007068:	4b5c      	ldr	r3, [pc, #368]	@ (80071dc <Input_Processor+0x548>)
 800706a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_LeftA =
 800706e:	4b5a      	ldr	r3, [pc, #360]	@ (80071d8 <Input_Processor+0x544>)
 8007070:	f8a3 212a 	strh.w	r2, [r3, #298]	@ 0x12a
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_LeftB =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[7];
 8007074:	4b59      	ldr	r3, [pc, #356]	@ (80071dc <Input_Processor+0x548>)
 8007076:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.AlignLimit_LeftB =
 800707a:	4b57      	ldr	r3, [pc, #348]	@ (80071d8 <Input_Processor+0x544>)
 800707c:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.FiveTurnSwitch =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[8];
 8007080:	4b56      	ldr	r3, [pc, #344]	@ (80071dc <Input_Processor+0x548>)
 8007082:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.FiveTurnSwitch =
 8007086:	4b54      	ldr	r3, [pc, #336]	@ (80071d8 <Input_Processor+0x544>)
 8007088:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_WinchDrv =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[9];
 800708c:	4b53      	ldr	r3, [pc, #332]	@ (80071dc <Input_Processor+0x548>)
 800708e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_WinchDrv =
 8007092:	4b51      	ldr	r3, [pc, #324]	@ (80071d8 <Input_Processor+0x544>)
 8007094:	f8a3 2130 	strh.w	r2, [r3, #304]	@ 0x130
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_AlignDrv =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[10];
 8007098:	4b50      	ldr	r3, [pc, #320]	@ (80071dc <Input_Processor+0x548>)
 800709a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_AlignDrv =
 800709e:	4b4e      	ldr	r3, [pc, #312]	@ (80071d8 <Input_Processor+0x544>)
 80070a0:	f8a3 2132 	strh.w	r2, [r3, #306]	@ 0x132
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_EmgDrv =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[11];
 80070a4:	4b4d      	ldr	r3, [pc, #308]	@ (80071dc <Input_Processor+0x548>)
 80070a6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_EmgDrv =
 80070aa:	4b4b      	ldr	r3, [pc, #300]	@ (80071d8 <Input_Processor+0x544>)
 80070ac:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_MainCy01Drv =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[12];
 80070b0:	4b4a      	ldr	r3, [pc, #296]	@ (80071dc <Input_Processor+0x548>)
 80070b2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_MainCy01Drv =
 80070b6:	4b48      	ldr	r3, [pc, #288]	@ (80071d8 <Input_Processor+0x544>)
 80070b8:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_MainCy02Drv =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[13];
 80070bc:	4b47      	ldr	r3, [pc, #284]	@ (80071dc <Input_Processor+0x548>)
 80070be:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_MainCy02Drv =
 80070c2:	4b45      	ldr	r3, [pc, #276]	@ (80071d8 <Input_Processor+0x544>)
 80070c4:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_SubCy01Drv =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[14];
 80070c8:	4b44      	ldr	r3, [pc, #272]	@ (80071dc <Input_Processor+0x548>)
 80070ca:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_SubCy01Drv =
 80070ce:	4b42      	ldr	r3, [pc, #264]	@ (80071d8 <Input_Processor+0x544>)
 80070d0:	f8a3 213a 	strh.w	r2, [r3, #314]	@ 0x13a
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_SubCy02Drv =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[15];
 80070d4:	4b41      	ldr	r3, [pc, #260]	@ (80071dc <Input_Processor+0x548>)
 80070d6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.PValveErr_SubCy02Drv =
 80070da:	4b3f      	ldr	r3, [pc, #252]	@ (80071d8 <Input_Processor+0x544>)
 80070dc:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.OverPressure =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[16];
 80070e0:	4b3e      	ldr	r3, [pc, #248]	@ (80071dc <Input_Processor+0x548>)
 80070e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.OverPressure =
 80070e6:	4b3c      	ldr	r3, [pc, #240]	@ (80071d8 <Input_Processor+0x544>)
 80070e8:	f8a3 213e 	strh.w	r2, [r3, #318]	@ 0x13e
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Spare =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWtuA_HilsOutSet[17];
 80070ec:	4b3b      	ldr	r3, [pc, #236]	@ (80071dc <Input_Processor+0x548>)
 80070ee:	f8b3 205a 	ldrh.w	r2, [r3, #90]	@ 0x5a
  Lws_HilsCtrl_240218_v_1_0_DW.HilsOutSet.Spare =
 80070f2:	4b39      	ldr	r3, [pc, #228]	@ (80071d8 <Input_Processor+0x544>)
 80070f4:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140

  /* DataStoreWrite: 'Data Store Write6' (':4769') incorporates:
   *  Inport: 'LwsWutA_HilsPara' (':11')
   */
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Winch_InitAngle =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[0];
 80070f8:	4b38      	ldr	r3, [pc, #224]	@ (80071dc <Input_Processor+0x548>)
 80070fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Winch_InitAngle =
 80070fc:	4a36      	ldr	r2, [pc, #216]	@ (80071d8 <Input_Processor+0x544>)
 80070fe:	66d3      	str	r3, [r2, #108]	@ 0x6c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Align_InitAngle =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[1];
 8007100:	4b36      	ldr	r3, [pc, #216]	@ (80071dc <Input_Processor+0x548>)
 8007102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Align_InitAngle =
 8007104:	4a34      	ldr	r2, [pc, #208]	@ (80071d8 <Input_Processor+0x544>)
 8007106:	6713      	str	r3, [r2, #112]	@ 0x70
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainCy01_InitPos =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[2];
 8007108:	4b34      	ldr	r3, [pc, #208]	@ (80071dc <Input_Processor+0x548>)
 800710a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainCy01_InitPos =
 800710c:	4a32      	ldr	r2, [pc, #200]	@ (80071d8 <Input_Processor+0x544>)
 800710e:	6753      	str	r3, [r2, #116]	@ 0x74
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainCy02_InitPos =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[3];
 8007110:	4b32      	ldr	r3, [pc, #200]	@ (80071dc <Input_Processor+0x548>)
 8007112:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainCy02_InitPos =
 8007114:	4a30      	ldr	r2, [pc, #192]	@ (80071d8 <Input_Processor+0x544>)
 8007116:	6793      	str	r3, [r2, #120]	@ 0x78
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubCy01_InitPos =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[4];
 8007118:	4b30      	ldr	r3, [pc, #192]	@ (80071dc <Input_Processor+0x548>)
 800711a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubCy01_InitPos =
 800711c:	4a2e      	ldr	r2, [pc, #184]	@ (80071d8 <Input_Processor+0x544>)
 800711e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubCy02_InitPos =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[5];
 8007120:	4b2e      	ldr	r3, [pc, #184]	@ (80071dc <Input_Processor+0x548>)
 8007122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubCy02_InitPos =
 8007124:	4a2c      	ldr	r2, [pc, #176]	@ (80071d8 <Input_Processor+0x544>)
 8007126:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.WinchPw_RefPressure =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[6];
 800712a:	4b2c      	ldr	r3, [pc, #176]	@ (80071dc <Input_Processor+0x548>)
 800712c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.WinchPw_RefPressure =
 800712e:	4a2a      	ldr	r2, [pc, #168]	@ (80071d8 <Input_Processor+0x544>)
 8007130:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.DropLiftPw_RefPressure =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[7];
 8007134:	4b29      	ldr	r3, [pc, #164]	@ (80071dc <Input_Processor+0x548>)
 8007136:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.DropLiftPw_RefPressure =
 8007138:	4a27      	ldr	r2, [pc, #156]	@ (80071d8 <Input_Processor+0x544>)
 800713a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.OilFlowS_RefFlow =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[8];
 800713e:	4b27      	ldr	r3, [pc, #156]	@ (80071dc <Input_Processor+0x548>)
 8007140:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.OilFlowS_RefFlow =
 8007142:	4a25      	ldr	r2, [pc, #148]	@ (80071d8 <Input_Processor+0x544>)
 8007144:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.TensionS_RefTension =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[9];
 8007148:	4b24      	ldr	r3, [pc, #144]	@ (80071dc <Input_Processor+0x548>)
 800714a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.TensionS_RefTension =
 800714e:	4a22      	ldr	r2, [pc, #136]	@ (80071d8 <Input_Processor+0x544>)
 8007150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainSy_ExpRefPressure =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[10];
 8007154:	4b21      	ldr	r3, [pc, #132]	@ (80071dc <Input_Processor+0x548>)
 8007156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainSy_ExpRefPressure =
 800715a:	4a1f      	ldr	r2, [pc, #124]	@ (80071d8 <Input_Processor+0x544>)
 800715c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainSy_ConRefPressure =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[11];
 8007160:	4b1e      	ldr	r3, [pc, #120]	@ (80071dc <Input_Processor+0x548>)
 8007162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.MainSy_ConRefPressure =
 8007166:	4a1c      	ldr	r2, [pc, #112]	@ (80071d8 <Input_Processor+0x544>)
 8007168:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubSy_ExpRefPressure =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[12];
 800716c:	4b1b      	ldr	r3, [pc, #108]	@ (80071dc <Input_Processor+0x548>)
 800716e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubSy_ExpRefPressure =
 8007172:	4a19      	ldr	r2, [pc, #100]	@ (80071d8 <Input_Processor+0x544>)
 8007174:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubSy_ConRefPressure =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[13];
 8007178:	4b18      	ldr	r3, [pc, #96]	@ (80071dc <Input_Processor+0x548>)
 800717a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.SubSy_ConRefPressure =
 800717e:	4a16      	ldr	r2, [pc, #88]	@ (80071d8 <Input_Processor+0x544>)
 8007180:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare01 =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[14];
 8007184:	4b15      	ldr	r3, [pc, #84]	@ (80071dc <Input_Processor+0x548>)
 8007186:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare01 =
 800718a:	4a13      	ldr	r2, [pc, #76]	@ (80071d8 <Input_Processor+0x544>)
 800718c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare02 =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[15];
 8007190:	4b12      	ldr	r3, [pc, #72]	@ (80071dc <Input_Processor+0x548>)
 8007192:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare02 =
 8007196:	4a10      	ldr	r2, [pc, #64]	@ (80071d8 <Input_Processor+0x544>)
 8007198:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare03 =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[16];
 800719c:	4b0f      	ldr	r3, [pc, #60]	@ (80071dc <Input_Processor+0x548>)
 800719e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare03 =
 80071a2:	4a0d      	ldr	r2, [pc, #52]	@ (80071d8 <Input_Processor+0x544>)
 80071a4:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare04 =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[17];
 80071a8:	4b0c      	ldr	r3, [pc, #48]	@ (80071dc <Input_Processor+0x548>)
 80071aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare04 =
 80071ae:	4a0a      	ldr	r2, [pc, #40]	@ (80071d8 <Input_Processor+0x544>)
 80071b0:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare05 =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[18];
 80071b4:	4b09      	ldr	r3, [pc, #36]	@ (80071dc <Input_Processor+0x548>)
 80071b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare05 =
 80071ba:	4a07      	ldr	r2, [pc, #28]	@ (80071d8 <Input_Processor+0x544>)
 80071bc:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare06 =
    Lws_HilsCtrl_240218_v_1_0_U.LwsWutA_HilsPara[19];
 80071c0:	4b06      	ldr	r3, [pc, #24]	@ (80071dc <Input_Processor+0x548>)
 80071c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
  Lws_HilsCtrl_240218_v_1_0_DW.HilsPara.Spare06 =
 80071c6:	4a04      	ldr	r2, [pc, #16]	@ (80071d8 <Input_Processor+0x544>)
 80071c8:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	200008e8 	.word	0x200008e8
 80071dc:	20000c08 	.word	0x20000c08

080071e0 <Lws_HilsCtrl_Init>:
#include "Lws_HilsCtrl_240218_v_1_0.h"
#include "Lws_HilsCtrl_240218_v_1_0_private.h"

/* System initialize for atomic system: 'Lws_HilsCtrl' (':4548') */
void Lws_HilsCtrl_Init(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  /* SystemInitialize for Chart: 'Hils_SequenceCtrl' (':5237') */
  Hils_SequenceCtrl_Init();
 80071e4:	f7ff fae0 	bl	80067a8 <Hils_SequenceCtrl_Init>

  /* SystemInitialize for Atomic SubSystem: 'Hils_Ctrl_Block' (':5129') */
  Hils_Ctrl_Block_Init();
 80071e8:	f7fd f9b6 	bl	8004558 <Hils_Ctrl_Block_Init>

  /* End of SystemInitialize for SubSystem: 'Hils_Ctrl_Block' (':5129') */
}
 80071ec:	bf00      	nop
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <Lws_HilsCtrl>:

/* Output and update for atomic system: 'Lws_HilsCtrl' (':4548') */
void Lws_HilsCtrl(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
  /* Outputs for Atomic SubSystem: 'HilsOutput_Processor' (':5024') */
  Output_Processor();
 80071f4:	f000 f95e 	bl	80074b4 <Output_Processor>

  /* End of Outputs for SubSystem: 'HilsOutput_Processor' (':5024') */

  /* Outputs for Atomic SubSystem: 'HilsInput_Processor' (':4741') */
  Input_Processor();
 80071f8:	f7ff fd4c 	bl	8006c94 <Input_Processor>

  /* End of Outputs for SubSystem: 'HilsInput_Processor' (':4741') */

  /* Chart: 'Hils_SequenceCtrl' (':5237') */
  Hils_SequenceCtrl();
 80071fc:	f7ff fafe 	bl	80067fc <Hils_SequenceCtrl>

  /* Outputs for Atomic SubSystem: 'Hils_Ctrl_Block' (':5129') */
  Hils_Ctrl_Block();
 8007200:	f7fd f9fe 	bl	8004600 <Hils_Ctrl_Block>

  /* End of Outputs for SubSystem: 'Hils_Ctrl_Block' (':5129') */
}
 8007204:	bf00      	nop
 8007206:	bd80      	pop	{r7, pc}

08007208 <Lws_HilsCtrl_240218_v_1_0_step>:
/* External outputs (root outports fed by signals with default storage) */
ExtY_Lws_HilsCtrl_240218_v_1__T Lws_HilsCtrl_240218_v_1_0_Y;

/* Model step function */
void Lws_HilsCtrl_240218_v_1_0_step(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  /* Outputs for Atomic SubSystem: 'Lws_HilsCtrl' (':4548') */
  Lws_HilsCtrl();
 800720c:	f7ff fff0 	bl	80071f0 <Lws_HilsCtrl>

  /* End of Outputs for SubSystem: 'Lws_HilsCtrl' (':4548') */

  /* Outport: 'LwsWtuA_HilsAO' (':2900') */
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[0] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o1;
 8007210:	4b94      	ldr	r3, [pc, #592]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007212:	68db      	ldr	r3, [r3, #12]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[0] =
 8007214:	4a94      	ldr	r2, [pc, #592]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007216:	6293      	str	r3, [r2, #40]	@ 0x28
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[1] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o2;
 8007218:	4b92      	ldr	r3, [pc, #584]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800721a:	691b      	ldr	r3, [r3, #16]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[1] =
 800721c:	4a92      	ldr	r2, [pc, #584]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800721e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[2] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o3;
 8007220:	4b90      	ldr	r3, [pc, #576]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007222:	695b      	ldr	r3, [r3, #20]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[2] =
 8007224:	4a90      	ldr	r2, [pc, #576]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007226:	6313      	str	r3, [r2, #48]	@ 0x30
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[3] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o4;
 8007228:	4b8e      	ldr	r3, [pc, #568]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800722a:	699b      	ldr	r3, [r3, #24]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[3] =
 800722c:	4a8e      	ldr	r2, [pc, #568]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800722e:	6353      	str	r3, [r2, #52]	@ 0x34
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[4] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o5;
 8007230:	4b8c      	ldr	r3, [pc, #560]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007232:	69db      	ldr	r3, [r3, #28]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[4] =
 8007234:	4a8c      	ldr	r2, [pc, #560]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007236:	6393      	str	r3, [r2, #56]	@ 0x38
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[5] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o6;
 8007238:	4b8a      	ldr	r3, [pc, #552]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800723a:	6a1b      	ldr	r3, [r3, #32]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[5] =
 800723c:	4a8a      	ldr	r2, [pc, #552]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800723e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[6] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o7;
 8007240:	4b88      	ldr	r3, [pc, #544]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[6] =
 8007244:	4a88      	ldr	r2, [pc, #544]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007246:	6413      	str	r3, [r2, #64]	@ 0x40
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[7] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o8;
 8007248:	4b86      	ldr	r3, [pc, #536]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800724a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[7] =
 800724c:	4a86      	ldr	r2, [pc, #536]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800724e:	6453      	str	r3, [r2, #68]	@ 0x44
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[8] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o9;
 8007250:	4b84      	ldr	r3, [pc, #528]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[8] =
 8007254:	4a84      	ldr	r2, [pc, #528]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007256:	6493      	str	r3, [r2, #72]	@ 0x48
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[9] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o10;
 8007258:	4b82      	ldr	r3, [pc, #520]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800725a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[9] =
 800725c:	4a82      	ldr	r2, [pc, #520]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800725e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[10] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o11;
 8007260:	4b80      	ldr	r3, [pc, #512]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[10] =
 8007264:	4a80      	ldr	r2, [pc, #512]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007266:	6513      	str	r3, [r2, #80]	@ 0x50
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[11] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o12;
 8007268:	4b7e      	ldr	r3, [pc, #504]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800726a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[11] =
 800726c:	4a7e      	ldr	r2, [pc, #504]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800726e:	6553      	str	r3, [r2, #84]	@ 0x54
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[12] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o13;
 8007270:	4b7c      	ldr	r3, [pc, #496]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[12] =
 8007274:	4a7c      	ldr	r2, [pc, #496]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007276:	6593      	str	r3, [r2, #88]	@ 0x58
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[13] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o14;
 8007278:	4b7a      	ldr	r3, [pc, #488]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800727a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[13] =
 800727c:	4a7a      	ldr	r2, [pc, #488]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800727e:	65d3      	str	r3, [r2, #92]	@ 0x5c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[14] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o15;
 8007280:	4b78      	ldr	r3, [pc, #480]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[14] =
 8007284:	4a78      	ldr	r2, [pc, #480]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007286:	6613      	str	r3, [r2, #96]	@ 0x60
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[15] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o16;
 8007288:	4b76      	ldr	r3, [pc, #472]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800728a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[15] =
 800728c:	4a76      	ldr	r2, [pc, #472]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800728e:	6653      	str	r3, [r2, #100]	@ 0x64
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[16] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o17;
 8007290:	4b74      	ldr	r3, [pc, #464]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[16] =
 8007294:	4a74      	ldr	r2, [pc, #464]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007296:	6693      	str	r3, [r2, #104]	@ 0x68
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[17] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o18;
 8007298:	4b72      	ldr	r3, [pc, #456]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800729a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[17] =
 800729c:	4a72      	ldr	r2, [pc, #456]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800729e:	66d3      	str	r3, [r2, #108]	@ 0x6c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[18] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o19;
 80072a0:	4b70      	ldr	r3, [pc, #448]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80072a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[18] =
 80072a4:	4a70      	ldr	r2, [pc, #448]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80072a6:	6713      	str	r3, [r2, #112]	@ 0x70
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[19] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o20;
 80072a8:	4b6e      	ldr	r3, [pc, #440]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80072aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[19] =
 80072ac:	4a6e      	ldr	r2, [pc, #440]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80072ae:	6753      	str	r3, [r2, #116]	@ 0x74
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[20] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o21;
 80072b0:	4b6c      	ldr	r3, [pc, #432]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80072b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[20] =
 80072b4:	4a6c      	ldr	r2, [pc, #432]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80072b6:	6793      	str	r3, [r2, #120]	@ 0x78
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[21] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o22;
 80072b8:	4b6a      	ldr	r3, [pc, #424]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80072ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[21] =
 80072bc:	4a6a      	ldr	r2, [pc, #424]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80072be:	67d3      	str	r3, [r2, #124]	@ 0x7c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[22] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o23;
 80072c0:	4b68      	ldr	r3, [pc, #416]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80072c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[22] =
 80072c4:	4a68      	ldr	r2, [pc, #416]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80072c6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[23] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o24;
 80072ca:	4b66      	ldr	r3, [pc, #408]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80072cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[23] =
 80072ce:	4a66      	ldr	r2, [pc, #408]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80072d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[24] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o25;
 80072d4:	4b63      	ldr	r3, [pc, #396]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80072d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[24] =
 80072d8:	4a63      	ldr	r2, [pc, #396]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80072da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[25] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o26;
 80072de:	4b61      	ldr	r3, [pc, #388]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80072e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[25] =
 80072e2:	4a61      	ldr	r2, [pc, #388]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80072e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[26] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o27;
 80072e8:	4b5e      	ldr	r3, [pc, #376]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80072ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAO[26] =
 80072ec:	4a5e      	ldr	r2, [pc, #376]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80072ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /* Outport: 'LwsWtuA_HilsDO' (':1441') */
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[0] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o1;
 80072f2:	4b5c      	ldr	r3, [pc, #368]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80072f4:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	@ 0xb4
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[0] =
 80072f8:	4b5b      	ldr	r3, [pc, #364]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80072fa:	801a      	strh	r2, [r3, #0]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[1] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o2;
 80072fc:	4b59      	ldr	r3, [pc, #356]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80072fe:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	@ 0xb6
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[1] =
 8007302:	4b59      	ldr	r3, [pc, #356]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007304:	805a      	strh	r2, [r3, #2]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[2] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o3;
 8007306:	4b57      	ldr	r3, [pc, #348]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007308:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	@ 0xb8
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[2] =
 800730c:	4b56      	ldr	r3, [pc, #344]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800730e:	809a      	strh	r2, [r3, #4]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[3] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o4;
 8007310:	4b54      	ldr	r3, [pc, #336]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007312:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	@ 0xba
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[3] =
 8007316:	4b54      	ldr	r3, [pc, #336]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007318:	80da      	strh	r2, [r3, #6]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[4] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o5;
 800731a:	4b52      	ldr	r3, [pc, #328]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800731c:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	@ 0xbc
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[4] =
 8007320:	4b51      	ldr	r3, [pc, #324]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007322:	811a      	strh	r2, [r3, #8]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[5] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o6;
 8007324:	4b4f      	ldr	r3, [pc, #316]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007326:	f8b3 20be 	ldrh.w	r2, [r3, #190]	@ 0xbe
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[5] =
 800732a:	4b4f      	ldr	r3, [pc, #316]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800732c:	815a      	strh	r2, [r3, #10]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[6] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o7;
 800732e:	4b4d      	ldr	r3, [pc, #308]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007330:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[6] =
 8007334:	4b4c      	ldr	r3, [pc, #304]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007336:	819a      	strh	r2, [r3, #12]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[7] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o8;
 8007338:	4b4a      	ldr	r3, [pc, #296]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800733a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[7] =
 800733e:	4b4a      	ldr	r3, [pc, #296]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007340:	81da      	strh	r2, [r3, #14]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[8] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o9;
 8007342:	4b48      	ldr	r3, [pc, #288]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007344:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	@ 0xc4
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[8] =
 8007348:	4b47      	ldr	r3, [pc, #284]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800734a:	821a      	strh	r2, [r3, #16]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[9] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o10;
 800734c:	4b45      	ldr	r3, [pc, #276]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800734e:	f8b3 20c6 	ldrh.w	r2, [r3, #198]	@ 0xc6
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[9] =
 8007352:	4b45      	ldr	r3, [pc, #276]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007354:	825a      	strh	r2, [r3, #18]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[10] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o11;
 8007356:	4b43      	ldr	r3, [pc, #268]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007358:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	@ 0xc8
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[10] =
 800735c:	4b42      	ldr	r3, [pc, #264]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800735e:	829a      	strh	r2, [r3, #20]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[11] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o12;
 8007360:	4b40      	ldr	r3, [pc, #256]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007362:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[11] =
 8007366:	4b40      	ldr	r3, [pc, #256]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007368:	82da      	strh	r2, [r3, #22]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[12] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o13;
 800736a:	4b3e      	ldr	r3, [pc, #248]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800736c:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[12] =
 8007370:	4b3d      	ldr	r3, [pc, #244]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007372:	831a      	strh	r2, [r3, #24]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[13] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o14;
 8007374:	4b3b      	ldr	r3, [pc, #236]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007376:	f8b3 20ce 	ldrh.w	r2, [r3, #206]	@ 0xce
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[13] =
 800737a:	4b3b      	ldr	r3, [pc, #236]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800737c:	835a      	strh	r2, [r3, #26]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[14] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o15;
 800737e:	4b39      	ldr	r3, [pc, #228]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007380:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[14] =
 8007384:	4b38      	ldr	r3, [pc, #224]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007386:	839a      	strh	r2, [r3, #28]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[15] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o16;
 8007388:	4b36      	ldr	r3, [pc, #216]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800738a:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[15] =
 800738e:	4b36      	ldr	r3, [pc, #216]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007390:	83da      	strh	r2, [r3, #30]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[16] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o17;
 8007392:	4b34      	ldr	r3, [pc, #208]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007394:	f8b3 20d4 	ldrh.w	r2, [r3, #212]	@ 0xd4
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[16] =
 8007398:	4b33      	ldr	r3, [pc, #204]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800739a:	841a      	strh	r2, [r3, #32]
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[17] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o18;
 800739c:	4b31      	ldr	r3, [pc, #196]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800739e:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	@ 0xd6
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[17] =
 80073a2:	4b31      	ldr	r3, [pc, #196]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80073a4:	845a      	strh	r2, [r3, #34]	@ 0x22
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[18] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o19;
 80073a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80073a8:	f8b3 20d8 	ldrh.w	r2, [r3, #216]	@ 0xd8
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsDO[18] =
 80073ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80073ae:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Outport: 'LwsWtuA_HilsMon' (':2923') */
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[0] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o1;
 80073b0:	4b2c      	ldr	r3, [pc, #176]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80073b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[0] =
 80073b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80073b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[1] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o2;
 80073ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80073bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[1] =
 80073be:	4a2a      	ldr	r2, [pc, #168]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80073c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[2] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o3;
 80073c4:	4b27      	ldr	r3, [pc, #156]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80073c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[2] =
 80073ca:	4a27      	ldr	r2, [pc, #156]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80073cc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[3] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o4;
 80073d0:	4b24      	ldr	r3, [pc, #144]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80073d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[3] =
 80073d6:	4a24      	ldr	r2, [pc, #144]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80073d8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[4] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o5;
 80073dc:	4b21      	ldr	r3, [pc, #132]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[4] =
 80073e2:	4a21      	ldr	r2, [pc, #132]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80073e4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[5] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o6;
 80073e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80073ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[5] =
 80073ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80073f0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[6] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o7;
 80073f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 80073f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[6] =
 80073fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 80073fc:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[7] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o8;
 8007400:	4b18      	ldr	r3, [pc, #96]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[7] =
 8007406:	4a18      	ldr	r2, [pc, #96]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007408:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[8] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o9;
 800740c:	4b15      	ldr	r3, [pc, #84]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800740e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[8] =
 8007412:	4a15      	ldr	r2, [pc, #84]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007414:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[9] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o10;
 8007418:	4b12      	ldr	r3, [pc, #72]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800741a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[9] =
 800741e:	4a12      	ldr	r2, [pc, #72]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007420:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[10] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o11;
 8007424:	4b0f      	ldr	r3, [pc, #60]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007426:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[10] =
 800742a:	4a0f      	ldr	r2, [pc, #60]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800742c:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[11] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o12;
 8007430:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[11] =
 8007436:	4a0c      	ldr	r2, [pc, #48]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007438:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[12] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o13;
 800743c:	4b09      	ldr	r3, [pc, #36]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800743e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[12] =
 8007442:	4a09      	ldr	r2, [pc, #36]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007444:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[13] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o14;
 8007448:	4b06      	ldr	r3, [pc, #24]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 800744a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[13] =
 800744e:	4a06      	ldr	r2, [pc, #24]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 8007450:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[14] =
    Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o15;
 8007454:	4b03      	ldr	r3, [pc, #12]	@ (8007464 <Lws_HilsCtrl_240218_v_1_0_step+0x25c>)
 8007456:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMon[14] =
 800745a:	4a03      	ldr	r2, [pc, #12]	@ (8007468 <Lws_HilsCtrl_240218_v_1_0_step+0x260>)
 800745c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
}
 8007460:	bf00      	nop
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20000808 	.word	0x20000808
 8007468:	20000cb4 	.word	0x20000cb4

0800746c <Lws_HilsCtrl_240218_v_1_0_initialize>:

/* Model initialize function */
void Lws_HilsCtrl_240218_v_1_0_initialize(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
  /* Registration code */

  /* block I/O */
  (void) memset(((void *) &Lws_HilsCtrl_240218_v_1_0_B), 0,
 8007470:	22dc      	movs	r2, #220	@ 0xdc
 8007472:	2100      	movs	r1, #0
 8007474:	480b      	ldr	r0, [pc, #44]	@ (80074a4 <Lws_HilsCtrl_240218_v_1_0_initialize+0x38>)
 8007476:	f00a fca9 	bl	8011dcc <memset>
                sizeof(B_Lws_HilsCtrl_240218_v_1_0_T));

  /* states (dwork) */
  (void) memset((void *)&Lws_HilsCtrl_240218_v_1_0_DW, 0,
 800747a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800747e:	2100      	movs	r1, #0
 8007480:	4809      	ldr	r0, [pc, #36]	@ (80074a8 <Lws_HilsCtrl_240218_v_1_0_initialize+0x3c>)
 8007482:	f00a fca3 	bl	8011dcc <memset>
                sizeof(DW_Lws_HilsCtrl_240218_v_1_0_T));

  /* external inputs */
  (void)memset(&Lws_HilsCtrl_240218_v_1_0_U, 0, sizeof
 8007486:	22ac      	movs	r2, #172	@ 0xac
 8007488:	2100      	movs	r1, #0
 800748a:	4808      	ldr	r0, [pc, #32]	@ (80074ac <Lws_HilsCtrl_240218_v_1_0_initialize+0x40>)
 800748c:	f00a fc9e 	bl	8011dcc <memset>
               (ExtU_Lws_HilsCtrl_240218_v_1__T));

  /* external outputs */
  (void) memset((void *)&Lws_HilsCtrl_240218_v_1_0_Y, 0,
 8007490:	22d8      	movs	r2, #216	@ 0xd8
 8007492:	2100      	movs	r1, #0
 8007494:	4806      	ldr	r0, [pc, #24]	@ (80074b0 <Lws_HilsCtrl_240218_v_1_0_initialize+0x44>)
 8007496:	f00a fc99 	bl	8011dcc <memset>
                sizeof(ExtY_Lws_HilsCtrl_240218_v_1__T));

  /* SystemInitialize for Atomic SubSystem: 'Lws_HilsCtrl' (':4548') */
  Lws_HilsCtrl_Init();
 800749a:	f7ff fea1 	bl	80071e0 <Lws_HilsCtrl_Init>

  /* End of SystemInitialize for SubSystem: 'Lws_HilsCtrl' (':4548') */
}
 800749e:	bf00      	nop
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20000808 	.word	0x20000808
 80074a8:	200008e8 	.word	0x200008e8
 80074ac:	20000c08 	.word	0x20000c08
 80074b0:	20000cb4 	.word	0x20000cb4

080074b4 <Output_Processor>:
#include "Lws_HilsCtrl_240218_v_1_0.h"
#include "Lws_HilsCtrl_240218_v_1_0_private.h"

/* Output and update for atomic system: 'HilsOutput_Processor' (':5024') */
void Output_Processor(void)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b09d      	sub	sp, #116	@ 0x74
 80074b8:	af00      	add	r7, sp, #0

  /* SignalConversion generated from: 'Bit to Integer Converter3' (':5028') incorporates:
   *  DataStoreRead: 'Data Store Read10' (':5033')
   */
  rtb_TmpSignalConversionAtBittoI[0] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.HilsRunning;
 80074ba:	4b92      	ldr	r3, [pc, #584]	@ (8007704 <Output_Processor+0x250>)
 80074bc:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	@ 0x1a4
  rtb_TmpSignalConversionAtBittoI[0] =
 80074c0:	803b      	strh	r3, [r7, #0]
  rtb_TmpSignalConversionAtBittoI[1] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.Power_On;
 80074c2:	4b90      	ldr	r3, [pc, #576]	@ (8007704 <Output_Processor+0x250>)
 80074c4:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	@ 0x1a6
  rtb_TmpSignalConversionAtBittoI[1] =
 80074c8:	807b      	strh	r3, [r7, #2]
  rtb_TmpSignalConversionAtBittoI[2] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WinchPower_On;
 80074ca:	4b8e      	ldr	r3, [pc, #568]	@ (8007704 <Output_Processor+0x250>)
 80074cc:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	@ 0x1a8
  rtb_TmpSignalConversionAtBittoI[2] =
 80074d0:	80bb      	strh	r3, [r7, #4]
  rtb_TmpSignalConversionAtBittoI[3] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BoostPower_On;
 80074d2:	4b8c      	ldr	r3, [pc, #560]	@ (8007704 <Output_Processor+0x250>)
 80074d4:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	@ 0x1aa
  rtb_TmpSignalConversionAtBittoI[3] =
 80074d8:	80fb      	strh	r3, [r7, #6]
  rtb_TmpSignalConversionAtBittoI[4] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.DlPower_On;
 80074da:	4b8a      	ldr	r3, [pc, #552]	@ (8007704 <Output_Processor+0x250>)
 80074dc:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	@ 0x1ac
  rtb_TmpSignalConversionAtBittoI[4] =
 80074e0:	813b      	strh	r3, [r7, #8]
  rtb_TmpSignalConversionAtBittoI[5] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.AlignBk_Unlock;
 80074e2:	4b88      	ldr	r3, [pc, #544]	@ (8007704 <Output_Processor+0x250>)
 80074e4:	f8b3 31ae 	ldrh.w	r3, [r3, #430]	@ 0x1ae
  rtb_TmpSignalConversionAtBittoI[5] =
 80074e8:	817b      	strh	r3, [r7, #10]
  rtb_TmpSignalConversionAtBittoI[6] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.BandBk_Unlock;
 80074ea:	4b86      	ldr	r3, [pc, #536]	@ (8007704 <Output_Processor+0x250>)
 80074ec:	f8b3 31b0 	ldrh.w	r3, [r3, #432]	@ 0x1b0
  rtb_TmpSignalConversionAtBittoI[6] =
 80074f0:	81bb      	strh	r3, [r7, #12]
  rtb_TmpSignalConversionAtBittoI[7] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.WdBk_Unlock;
 80074f2:	4b84      	ldr	r3, [pc, #528]	@ (8007704 <Output_Processor+0x250>)
 80074f4:	f8b3 31b2 	ldrh.w	r3, [r3, #434]	@ 0x1b2
  rtb_TmpSignalConversionAtBittoI[7] =
 80074f8:	81fb      	strh	r3, [r7, #14]
  rtb_TmpSignalConversionAtBittoI[8] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_Algin;
 80074fa:	4b82      	ldr	r3, [pc, #520]	@ (8007704 <Output_Processor+0x250>)
 80074fc:	f8b3 31b4 	ldrh.w	r3, [r3, #436]	@ 0x1b4
  rtb_TmpSignalConversionAtBittoI[8] =
 8007500:	823b      	strh	r3, [r7, #16]
  rtb_TmpSignalConversionAtBittoI[9] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_Emg;
 8007502:	4b80      	ldr	r3, [pc, #512]	@ (8007704 <Output_Processor+0x250>)
 8007504:	f8b3 31b6 	ldrh.w	r3, [r3, #438]	@ 0x1b6
  rtb_TmpSignalConversionAtBittoI[9] =
 8007508:	827b      	strh	r3, [r7, #18]
  rtb_TmpSignalConversionAtBittoI[10] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_MC01;
 800750a:	4b7e      	ldr	r3, [pc, #504]	@ (8007704 <Output_Processor+0x250>)
 800750c:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	@ 0x1b8
  rtb_TmpSignalConversionAtBittoI[10] =
 8007510:	82bb      	strh	r3, [r7, #20]
  rtb_TmpSignalConversionAtBittoI[11] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_MC02;
 8007512:	4b7c      	ldr	r3, [pc, #496]	@ (8007704 <Output_Processor+0x250>)
 8007514:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	@ 0x1ba
  rtb_TmpSignalConversionAtBittoI[11] =
 8007518:	82fb      	strh	r3, [r7, #22]
  rtb_TmpSignalConversionAtBittoI[12] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_SC01;
 800751a:	4b7a      	ldr	r3, [pc, #488]	@ (8007704 <Output_Processor+0x250>)
 800751c:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	@ 0x1bc
  rtb_TmpSignalConversionAtBittoI[12] =
 8007520:	833b      	strh	r3, [r7, #24]
  rtb_TmpSignalConversionAtBittoI[13] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.PValveErr_SC02;
 8007522:	4b78      	ldr	r3, [pc, #480]	@ (8007704 <Output_Processor+0x250>)
 8007524:	f8b3 31be 	ldrh.w	r3, [r3, #446]	@ 0x1be
  rtb_TmpSignalConversionAtBittoI[13] =
 8007528:	837b      	strh	r3, [r7, #26]
  rtb_TmpSignalConversionAtBittoI[14] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.a14;
 800752a:	4b76      	ldr	r3, [pc, #472]	@ (8007704 <Output_Processor+0x250>)
 800752c:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	@ 0x1c0
  rtb_TmpSignalConversionAtBittoI[14] =
 8007530:	83bb      	strh	r3, [r7, #28]
  rtb_TmpSignalConversionAtBittoI[15] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsStatus.a15;
 8007532:	4b74      	ldr	r3, [pc, #464]	@ (8007704 <Output_Processor+0x250>)
 8007534:	f8b3 31c2 	ldrh.w	r3, [r3, #450]	@ 0x1c2
  rtb_TmpSignalConversionAtBittoI[15] =
 8007538:	83fb      	strh	r3, [r7, #30]

  /* SignalConversion generated from: 'Bit to Integer Converter5' (':5030') incorporates:
   *  DataStoreRead: 'Data Store Read7' (':5041')
   */
  rtb_TmpSignalConversionAtBitt_j[0] = Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a;
 800753a:	4b72      	ldr	r3, [pc, #456]	@ (8007704 <Output_Processor+0x250>)
 800753c:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8007540:	843b      	strh	r3, [r7, #32]
  rtb_TmpSignalConversionAtBitt_j[1] = Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a1;
 8007542:	4b70      	ldr	r3, [pc, #448]	@ (8007704 <Output_Processor+0x250>)
 8007544:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
 8007548:	847b      	strh	r3, [r7, #34]	@ 0x22
  rtb_TmpSignalConversionAtBitt_j[2] = Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a2;
 800754a:	4b6e      	ldr	r3, [pc, #440]	@ (8007704 <Output_Processor+0x250>)
 800754c:	f8b3 3188 	ldrh.w	r3, [r3, #392]	@ 0x188
 8007550:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rtb_TmpSignalConversionAtBitt_j[3] = Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a3;
 8007552:	4b6c      	ldr	r3, [pc, #432]	@ (8007704 <Output_Processor+0x250>)
 8007554:	f8b3 318a 	ldrh.w	r3, [r3, #394]	@ 0x18a
 8007558:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rtb_TmpSignalConversionAtBitt_j[4] = Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a4;
 800755a:	4b6a      	ldr	r3, [pc, #424]	@ (8007704 <Output_Processor+0x250>)
 800755c:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 8007560:	853b      	strh	r3, [r7, #40]	@ 0x28
  rtb_TmpSignalConversionAtBitt_j[5] = Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a5;
 8007562:	4b68      	ldr	r3, [pc, #416]	@ (8007704 <Output_Processor+0x250>)
 8007564:	f8b3 318e 	ldrh.w	r3, [r3, #398]	@ 0x18e
 8007568:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rtb_TmpSignalConversionAtBitt_j[6] = Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a6;
 800756a:	4b66      	ldr	r3, [pc, #408]	@ (8007704 <Output_Processor+0x250>)
 800756c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8007570:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rtb_TmpSignalConversionAtBitt_j[7] = Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a7;
 8007572:	4b64      	ldr	r3, [pc, #400]	@ (8007704 <Output_Processor+0x250>)
 8007574:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8007578:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rtb_TmpSignalConversionAtBitt_j[8] = Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a8;
 800757a:	4b62      	ldr	r3, [pc, #392]	@ (8007704 <Output_Processor+0x250>)
 800757c:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8007580:	863b      	strh	r3, [r7, #48]	@ 0x30
  rtb_TmpSignalConversionAtBitt_j[9] = Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a9;
 8007582:	4b60      	ldr	r3, [pc, #384]	@ (8007704 <Output_Processor+0x250>)
 8007584:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8007588:	867b      	strh	r3, [r7, #50]	@ 0x32
  rtb_TmpSignalConversionAtBitt_j[10] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a10;
 800758a:	4b5e      	ldr	r3, [pc, #376]	@ (8007704 <Output_Processor+0x250>)
 800758c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	@ 0x198
  rtb_TmpSignalConversionAtBitt_j[10] =
 8007590:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rtb_TmpSignalConversionAtBitt_j[11] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a11;
 8007592:	4b5c      	ldr	r3, [pc, #368]	@ (8007704 <Output_Processor+0x250>)
 8007594:	f8b3 319a 	ldrh.w	r3, [r3, #410]	@ 0x19a
  rtb_TmpSignalConversionAtBitt_j[11] =
 8007598:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rtb_TmpSignalConversionAtBitt_j[12] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a12;
 800759a:	4b5a      	ldr	r3, [pc, #360]	@ (8007704 <Output_Processor+0x250>)
 800759c:	f8b3 319c 	ldrh.w	r3, [r3, #412]	@ 0x19c
  rtb_TmpSignalConversionAtBitt_j[12] =
 80075a0:	873b      	strh	r3, [r7, #56]	@ 0x38
  rtb_TmpSignalConversionAtBitt_j[13] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a13;
 80075a2:	4b58      	ldr	r3, [pc, #352]	@ (8007704 <Output_Processor+0x250>)
 80075a4:	f8b3 319e 	ldrh.w	r3, [r3, #414]	@ 0x19e
  rtb_TmpSignalConversionAtBitt_j[13] =
 80075a8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  rtb_TmpSignalConversionAtBitt_j[14] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a14;
 80075aa:	4b56      	ldr	r3, [pc, #344]	@ (8007704 <Output_Processor+0x250>)
 80075ac:	f8b3 31a0 	ldrh.w	r3, [r3, #416]	@ 0x1a0
  rtb_TmpSignalConversionAtBitt_j[14] =
 80075b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  rtb_TmpSignalConversionAtBitt_j[15] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsError.a15;
 80075b2:	4b54      	ldr	r3, [pc, #336]	@ (8007704 <Output_Processor+0x250>)
 80075b4:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	@ 0x1a2
  rtb_TmpSignalConversionAtBitt_j[15] =
 80075b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e

  /* SignalConversion generated from: 'Bit to Integer Converter1' (':5026') incorporates:
   *  DataStoreRead: 'Data Store Read4' (':5038')
   */
  rtb_TmpSignalConversionAtBitt_i[0] = Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a;
 80075ba:	4b52      	ldr	r3, [pc, #328]	@ (8007704 <Output_Processor+0x250>)
 80075bc:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 80075c0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  rtb_TmpSignalConversionAtBitt_i[1] = Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a1;
 80075c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007704 <Output_Processor+0x250>)
 80075c6:	f8b3 3166 	ldrh.w	r3, [r3, #358]	@ 0x166
 80075ca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  rtb_TmpSignalConversionAtBitt_i[2] = Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a2;
 80075ce:	4b4d      	ldr	r3, [pc, #308]	@ (8007704 <Output_Processor+0x250>)
 80075d0:	f8b3 3168 	ldrh.w	r3, [r3, #360]	@ 0x168
 80075d4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  rtb_TmpSignalConversionAtBitt_i[3] = Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a3;
 80075d8:	4b4a      	ldr	r3, [pc, #296]	@ (8007704 <Output_Processor+0x250>)
 80075da:	f8b3 316a 	ldrh.w	r3, [r3, #362]	@ 0x16a
 80075de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  rtb_TmpSignalConversionAtBitt_i[4] = Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a4;
 80075e2:	4b48      	ldr	r3, [pc, #288]	@ (8007704 <Output_Processor+0x250>)
 80075e4:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 80075e8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
  rtb_TmpSignalConversionAtBitt_i[5] = Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a5;
 80075ec:	4b45      	ldr	r3, [pc, #276]	@ (8007704 <Output_Processor+0x250>)
 80075ee:	f8b3 316e 	ldrh.w	r3, [r3, #366]	@ 0x16e
 80075f2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  rtb_TmpSignalConversionAtBitt_i[6] = Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a6;
 80075f6:	4b43      	ldr	r3, [pc, #268]	@ (8007704 <Output_Processor+0x250>)
 80075f8:	f8b3 3170 	ldrh.w	r3, [r3, #368]	@ 0x170
 80075fc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  rtb_TmpSignalConversionAtBitt_i[7] = Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a7;
 8007600:	4b40      	ldr	r3, [pc, #256]	@ (8007704 <Output_Processor+0x250>)
 8007602:	f8b3 3172 	ldrh.w	r3, [r3, #370]	@ 0x172
 8007606:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  rtb_TmpSignalConversionAtBitt_i[8] = Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a8;
 800760a:	4b3e      	ldr	r3, [pc, #248]	@ (8007704 <Output_Processor+0x250>)
 800760c:	f8b3 3174 	ldrh.w	r3, [r3, #372]	@ 0x174
 8007610:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
  rtb_TmpSignalConversionAtBitt_i[9] = Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a9;
 8007614:	4b3b      	ldr	r3, [pc, #236]	@ (8007704 <Output_Processor+0x250>)
 8007616:	f8b3 3176 	ldrh.w	r3, [r3, #374]	@ 0x176
 800761a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
  rtb_TmpSignalConversionAtBitt_i[10] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a10;
 800761e:	4b39      	ldr	r3, [pc, #228]	@ (8007704 <Output_Processor+0x250>)
 8007620:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
  rtb_TmpSignalConversionAtBitt_i[10] =
 8007624:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  rtb_TmpSignalConversionAtBitt_i[11] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a11;
 8007628:	4b36      	ldr	r3, [pc, #216]	@ (8007704 <Output_Processor+0x250>)
 800762a:	f8b3 317a 	ldrh.w	r3, [r3, #378]	@ 0x17a
  rtb_TmpSignalConversionAtBitt_i[11] =
 800762e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  rtb_TmpSignalConversionAtBitt_i[12] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a12;
 8007632:	4b34      	ldr	r3, [pc, #208]	@ (8007704 <Output_Processor+0x250>)
 8007634:	f8b3 317c 	ldrh.w	r3, [r3, #380]	@ 0x17c
  rtb_TmpSignalConversionAtBitt_i[12] =
 8007638:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  rtb_TmpSignalConversionAtBitt_i[13] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a13;
 800763c:	4b31      	ldr	r3, [pc, #196]	@ (8007704 <Output_Processor+0x250>)
 800763e:	f8b3 317e 	ldrh.w	r3, [r3, #382]	@ 0x17e
  rtb_TmpSignalConversionAtBitt_i[13] =
 8007642:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  rtb_TmpSignalConversionAtBitt_i[14] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a14;
 8007646:	4b2f      	ldr	r3, [pc, #188]	@ (8007704 <Output_Processor+0x250>)
 8007648:	f8b3 3180 	ldrh.w	r3, [r3, #384]	@ 0x180
  rtb_TmpSignalConversionAtBitt_i[14] =
 800764c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  rtb_TmpSignalConversionAtBitt_i[15] =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAlarm.a15;
 8007650:	4b2c      	ldr	r3, [pc, #176]	@ (8007704 <Output_Processor+0x250>)
 8007652:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
  rtb_TmpSignalConversionAtBitt_i[15] =
 8007656:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

  /* S-Function (scominttobit): 'Bit to Integer Converter3' (':5028') */
  /* Bit to Integer Conversion */
  bitIdx = 0;
 800765a:	2300      	movs	r3, #0
 800765c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  intVal = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	663b      	str	r3, [r7, #96]	@ 0x60
  bitMask = 1U;
 8007662:	2301      	movs	r3, #1
 8007664:	667b      	str	r3, [r7, #100]	@ 0x64
  for (j = 0; j < 16; j++)
 8007666:	2300      	movs	r3, #0
 8007668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800766a:	e014      	b.n	8007696 <Output_Processor+0x1e2>
  {
    /* Input bit order is LSB first */
    if (((uint32_T)rtb_TmpSignalConversionAtBittoI[bitIdx]) != 0U)
 800766c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	3370      	adds	r3, #112	@ 0x70
 8007672:	443b      	add	r3, r7
 8007674:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <Output_Processor+0x1d0>
    {
      intVal |= bitMask;
 800767c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800767e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007680:	4313      	orrs	r3, r2
 8007682:	663b      	str	r3, [r7, #96]	@ 0x60
    }

    bitIdx++;
 8007684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007686:	3301      	adds	r3, #1
 8007688:	66fb      	str	r3, [r7, #108]	@ 0x6c
    bitMask <<= 1ULL;
 800768a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	667b      	str	r3, [r7, #100]	@ 0x64
  for (j = 0; j < 16; j++)
 8007690:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007692:	3301      	adds	r3, #1
 8007694:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007696:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007698:	2b0f      	cmp	r3, #15
 800769a:	dde7      	ble.n	800766c <Output_Processor+0x1b8>
  }

  /* Outport: 'LwsWtuA_HilsStatus' (':1446') incorporates:
   *  S-Function (scominttobit): 'Bit to Integer Converter3' (':5028')
   */
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsStatus = (uint16_T)intVal;
 800769c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800769e:	b29a      	uxth	r2, r3
 80076a0:	4b19      	ldr	r3, [pc, #100]	@ (8007708 <Output_Processor+0x254>)
 80076a2:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

  /* S-Function (scominttobit): 'Bit to Integer Converter5' (':5030') */
  /* Bit to Integer Conversion */
  bitIdx = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  intVal = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	663b      	str	r3, [r7, #96]	@ 0x60
  bitMask = 1U;
 80076ae:	2301      	movs	r3, #1
 80076b0:	667b      	str	r3, [r7, #100]	@ 0x64
  for (j = 0; j < 16; j++)
 80076b2:	2300      	movs	r3, #0
 80076b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076b6:	e014      	b.n	80076e2 <Output_Processor+0x22e>
  {
    /* Input bit order is LSB first */
    if (((uint32_T)rtb_TmpSignalConversionAtBitt_j[bitIdx]) != 0U)
 80076b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	3370      	adds	r3, #112	@ 0x70
 80076be:	443b      	add	r3, r7
 80076c0:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <Output_Processor+0x21c>
    {
      intVal |= bitMask;
 80076c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80076ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076cc:	4313      	orrs	r3, r2
 80076ce:	663b      	str	r3, [r7, #96]	@ 0x60
    }

    bitIdx++;
 80076d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076d2:	3301      	adds	r3, #1
 80076d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    bitMask <<= 1ULL;
 80076d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076d8:	005b      	lsls	r3, r3, #1
 80076da:	667b      	str	r3, [r7, #100]	@ 0x64
  for (j = 0; j < 16; j++)
 80076dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076de:	3301      	adds	r3, #1
 80076e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076e4:	2b0f      	cmp	r3, #15
 80076e6:	dde7      	ble.n	80076b8 <Output_Processor+0x204>
  }

  /* Outport: 'LwsWtuA_HilsError' (':1448') incorporates:
   *  S-Function (scominttobit): 'Bit to Integer Converter5' (':5030')
   */
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsError = (uint16_T)intVal;
 80076e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	4b06      	ldr	r3, [pc, #24]	@ (8007708 <Output_Processor+0x254>)
 80076ee:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4

  /* S-Function (scominttobit): 'Bit to Integer Converter1' (':5026') */
  /* Bit to Integer Conversion */
  bitIdx = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  intVal = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	663b      	str	r3, [r7, #96]	@ 0x60
  bitMask = 1U;
 80076fa:	2301      	movs	r3, #1
 80076fc:	667b      	str	r3, [r7, #100]	@ 0x64
  for (j = 0; j < 16; j++)
 80076fe:	2300      	movs	r3, #0
 8007700:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007702:	e018      	b.n	8007736 <Output_Processor+0x282>
 8007704:	200008e8 	.word	0x200008e8
 8007708:	20000cb4 	.word	0x20000cb4
  {
    /* Input bit order is LSB first */
    if (((uint32_T)rtb_TmpSignalConversionAtBitt_i[bitIdx]) != 0U)
 800770c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	3370      	adds	r3, #112	@ 0x70
 8007712:	443b      	add	r3, r7
 8007714:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <Output_Processor+0x270>
    {
      intVal |= bitMask;
 800771c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800771e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007720:	4313      	orrs	r3, r2
 8007722:	663b      	str	r3, [r7, #96]	@ 0x60
    }

    bitIdx++;
 8007724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007726:	3301      	adds	r3, #1
 8007728:	66fb      	str	r3, [r7, #108]	@ 0x6c
    bitMask <<= 1ULL;
 800772a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	667b      	str	r3, [r7, #100]	@ 0x64
  for (j = 0; j < 16; j++)
 8007730:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007732:	3301      	adds	r3, #1
 8007734:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007736:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007738:	2b0f      	cmp	r3, #15
 800773a:	dde7      	ble.n	800770c <Output_Processor+0x258>
  }

  /* Outport: 'LwsWtuA_HilsAlarm' (':2921') incorporates:
   *  S-Function (scominttobit): 'Bit to Integer Converter1' (':5026')
   */
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsAlarm = (uint16_T)intVal;
 800773c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800773e:	b29a      	uxth	r2, r3
 8007740:	4ba2      	ldr	r3, [pc, #648]	@ (80079cc <Output_Processor+0x518>)
 8007742:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o1 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_Boost;
 8007746:	4ba2      	ldr	r3, [pc, #648]	@ (80079d0 <Output_Processor+0x51c>)
 8007748:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	@ 0xf8
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o1 =
 800774c:	4ba1      	ldr	r3, [pc, #644]	@ (80079d4 <Output_Processor+0x520>)
 800774e:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o2 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_DropLift;
 8007752:	4b9f      	ldr	r3, [pc, #636]	@ (80079d0 <Output_Processor+0x51c>)
 8007754:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o2 =
 8007758:	4b9e      	ldr	r3, [pc, #632]	@ (80079d4 <Output_Processor+0x520>)
 800775a:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o3 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_PreOver;
 800775e:	4b9c      	ldr	r3, [pc, #624]	@ (80079d0 <Output_Processor+0x51c>)
 8007760:	f8b3 20fc 	ldrh.w	r2, [r3, #252]	@ 0xfc
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o3 =
 8007764:	4b9b      	ldr	r3, [pc, #620]	@ (80079d4 <Output_Processor+0x520>)
 8007766:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o4 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_Wind;
 800776a:	4b99      	ldr	r3, [pc, #612]	@ (80079d0 <Output_Processor+0x51c>)
 800776c:	f8b3 20fe 	ldrh.w	r2, [r3, #254]	@ 0xfe
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o4 =
 8007770:	4b98      	ldr	r3, [pc, #608]	@ (80079d4 <Output_Processor+0x520>)
 8007772:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o5 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_Unwind;
 8007776:	4b96      	ldr	r3, [pc, #600]	@ (80079d0 <Output_Processor+0x51c>)
 8007778:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o5 =
 800777c:	4b95      	ldr	r3, [pc, #596]	@ (80079d4 <Output_Processor+0x520>)
 800777e:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o6 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_AlignDrv;
 8007782:	4b93      	ldr	r3, [pc, #588]	@ (80079d0 <Output_Processor+0x51c>)
 8007784:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o6 =
 8007788:	4b92      	ldr	r3, [pc, #584]	@ (80079d4 <Output_Processor+0x520>)
 800778a:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o7 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_Return;
 800778e:	4b90      	ldr	r3, [pc, #576]	@ (80079d0 <Output_Processor+0x51c>)
 8007790:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o7 =
 8007794:	4b8f      	ldr	r3, [pc, #572]	@ (80079d4 <Output_Processor+0x520>)
 8007796:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o8 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_BoostPump;
 800779a:	4b8d      	ldr	r3, [pc, #564]	@ (80079d0 <Output_Processor+0x51c>)
 800779c:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o8 =
 80077a0:	4b8c      	ldr	r3, [pc, #560]	@ (80079d4 <Output_Processor+0x520>)
 80077a2:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o9 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_WinchDrv;
 80077a6:	4b8a      	ldr	r3, [pc, #552]	@ (80079d0 <Output_Processor+0x51c>)
 80077a8:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o9 =
 80077ac:	4b89      	ldr	r3, [pc, #548]	@ (80079d4 <Output_Processor+0x520>)
 80077ae:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o10 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FilterSwitch_DropLift;
 80077b2:	4b87      	ldr	r3, [pc, #540]	@ (80079d0 <Output_Processor+0x51c>)
 80077b4:	f8b3 210a 	ldrh.w	r2, [r3, #266]	@ 0x10a
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o10 =
 80077b8:	4b86      	ldr	r3, [pc, #536]	@ (80079d4 <Output_Processor+0x520>)
 80077ba:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o11 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_RightA;
 80077be:	4b84      	ldr	r3, [pc, #528]	@ (80079d0 <Output_Processor+0x51c>)
 80077c0:	f8b3 210c 	ldrh.w	r2, [r3, #268]	@ 0x10c
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o11 =
 80077c4:	4b83      	ldr	r3, [pc, #524]	@ (80079d4 <Output_Processor+0x520>)
 80077c6:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o12 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_RightB;
 80077ca:	4b81      	ldr	r3, [pc, #516]	@ (80079d0 <Output_Processor+0x51c>)
 80077cc:	f8b3 210e 	ldrh.w	r2, [r3, #270]	@ 0x10e
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o12 =
 80077d0:	4b80      	ldr	r3, [pc, #512]	@ (80079d4 <Output_Processor+0x520>)
 80077d2:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o13 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_LeftA;
 80077d6:	4b7e      	ldr	r3, [pc, #504]	@ (80079d0 <Output_Processor+0x51c>)
 80077d8:	f8b3 2110 	ldrh.w	r2, [r3, #272]	@ 0x110
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o13 =
 80077dc:	4b7d      	ldr	r3, [pc, #500]	@ (80079d4 <Output_Processor+0x520>)
 80077de:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o14 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.AlighLimit_LeftB;
 80077e2:	4b7b      	ldr	r3, [pc, #492]	@ (80079d0 <Output_Processor+0x51c>)
 80077e4:	f8b3 2112 	ldrh.w	r2, [r3, #274]	@ 0x112
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o14 =
 80077e8:	4b7a      	ldr	r3, [pc, #488]	@ (80079d4 <Output_Processor+0x520>)
 80077ea:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o15 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.FiveTurn_Switch;
 80077ee:	4b78      	ldr	r3, [pc, #480]	@ (80079d0 <Output_Processor+0x51c>)
 80077f0:	f8b3 2114 	ldrh.w	r2, [r3, #276]	@ 0x114
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o15 =
 80077f4:	4b77      	ldr	r3, [pc, #476]	@ (80079d4 <Output_Processor+0x520>)
 80077f6:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o16 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_AlignBk;
 80077fa:	4b75      	ldr	r3, [pc, #468]	@ (80079d0 <Output_Processor+0x51c>)
 80077fc:	f8b3 2116 	ldrh.w	r2, [r3, #278]	@ 0x116
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o16 =
 8007800:	4b74      	ldr	r3, [pc, #464]	@ (80079d4 <Output_Processor+0x520>)
 8007802:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o17 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_MainBk;
 8007806:	4b72      	ldr	r3, [pc, #456]	@ (80079d0 <Output_Processor+0x51c>)
 8007808:	f8b3 2118 	ldrh.w	r2, [r3, #280]	@ 0x118
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o17 =
 800780c:	4b71      	ldr	r3, [pc, #452]	@ (80079d4 <Output_Processor+0x520>)
 800780e:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o18 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PreSwitch_SubBk;
 8007812:	4b6f      	ldr	r3, [pc, #444]	@ (80079d0 <Output_Processor+0x51c>)
 8007814:	f8b3 211a 	ldrh.w	r2, [r3, #282]	@ 0x11a
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o18 =
 8007818:	4b6e      	ldr	r3, [pc, #440]	@ (80079d4 <Output_Processor+0x520>)
 800781a:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6

  /* DataStoreRead: 'Data Store Read1' (':5032') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o19 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsDO.PValveError_WinchPw;
 800781e:	4b6c      	ldr	r3, [pc, #432]	@ (80079d0 <Output_Processor+0x51c>)
 8007820:	f8b3 211c 	ldrh.w	r2, [r3, #284]	@ 0x11c
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead1_o19 =
 8007824:	4b6b      	ldr	r3, [pc, #428]	@ (80079d4 <Output_Processor+0x520>)
 8007826:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o1 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.Pressure_WinchPw;
 800782a:	4b69      	ldr	r3, [pc, #420]	@ (80079d0 <Output_Processor+0x51c>)
 800782c:	681b      	ldr	r3, [r3, #0]
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o1 =
 800782e:	4a69      	ldr	r2, [pc, #420]	@ (80079d4 <Output_Processor+0x520>)
 8007830:	60d3      	str	r3, [r2, #12]

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o2 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.Pressure_DropLiftPw;
 8007832:	4b67      	ldr	r3, [pc, #412]	@ (80079d0 <Output_Processor+0x51c>)
 8007834:	685b      	ldr	r3, [r3, #4]
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o2 =
 8007836:	4a67      	ldr	r2, [pc, #412]	@ (80079d4 <Output_Processor+0x520>)
 8007838:	6113      	str	r3, [r2, #16]

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o3 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.OilFlow_DropLift;
 800783a:	4b65      	ldr	r3, [pc, #404]	@ (80079d0 <Output_Processor+0x51c>)
 800783c:	689b      	ldr	r3, [r3, #8]
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o3 =
 800783e:	4a65      	ldr	r2, [pc, #404]	@ (80079d4 <Output_Processor+0x520>)
 8007840:	6153      	str	r3, [r2, #20]

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o4 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.PValveError_EmgDrv;
 8007842:	4b63      	ldr	r3, [pc, #396]	@ (80079d0 <Output_Processor+0x51c>)
 8007844:	68db      	ldr	r3, [r3, #12]
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o4 =
 8007846:	4a63      	ldr	r2, [pc, #396]	@ (80079d4 <Output_Processor+0x520>)
 8007848:	6193      	str	r3, [r2, #24]

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o5 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.WinchDrum_Angle;
 800784a:	4b61      	ldr	r3, [pc, #388]	@ (80079d0 <Output_Processor+0x51c>)
 800784c:	691b      	ldr	r3, [r3, #16]
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o5 =
 800784e:	4a61      	ldr	r2, [pc, #388]	@ (80079d4 <Output_Processor+0x520>)
 8007850:	61d3      	str	r3, [r2, #28]

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o6 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.Align_Angle;
 8007852:	4b5f      	ldr	r3, [pc, #380]	@ (80079d0 <Output_Processor+0x51c>)
 8007854:	695b      	ldr	r3, [r3, #20]
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o6 =
 8007856:	4a5f      	ldr	r2, [pc, #380]	@ (80079d4 <Output_Processor+0x520>)
 8007858:	6213      	str	r3, [r2, #32]

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o7 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.PValveError_AlignDrv;
 800785a:	4b5d      	ldr	r3, [pc, #372]	@ (80079d0 <Output_Processor+0x51c>)
 800785c:	699b      	ldr	r3, [r3, #24]
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o7 =
 800785e:	4a5d      	ldr	r2, [pc, #372]	@ (80079d4 <Output_Processor+0x520>)
 8007860:	6253      	str	r3, [r2, #36]	@ 0x24

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o8 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.DrumMotorA_Velocity;
 8007862:	4b5b      	ldr	r3, [pc, #364]	@ (80079d0 <Output_Processor+0x51c>)
 8007864:	69db      	ldr	r3, [r3, #28]
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o8 =
 8007866:	4a5b      	ldr	r2, [pc, #364]	@ (80079d4 <Output_Processor+0x520>)
 8007868:	6293      	str	r3, [r2, #40]	@ 0x28

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o9 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.DrumMotorB_Velocity;
 800786a:	4b59      	ldr	r3, [pc, #356]	@ (80079d0 <Output_Processor+0x51c>)
 800786c:	6a1b      	ldr	r3, [r3, #32]
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o9 =
 800786e:	4a59      	ldr	r2, [pc, #356]	@ (80079d4 <Output_Processor+0x520>)
 8007870:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o10 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.AlignMotor_Velocity;
 8007872:	4b57      	ldr	r3, [pc, #348]	@ (80079d0 <Output_Processor+0x51c>)
 8007874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o10 =
 8007876:	4a57      	ldr	r2, [pc, #348]	@ (80079d4 <Output_Processor+0x520>)
 8007878:	6313      	str	r3, [r2, #48]	@ 0x30

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o11 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.TensionSensor;
 800787a:	4b55      	ldr	r3, [pc, #340]	@ (80079d0 <Output_Processor+0x51c>)
 800787c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o11 =
 800787e:	4a55      	ldr	r2, [pc, #340]	@ (80079d4 <Output_Processor+0x520>)
 8007880:	6353      	str	r3, [r2, #52]	@ 0x34

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o12 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_ExpPressure;
 8007882:	4b53      	ldr	r3, [pc, #332]	@ (80079d0 <Output_Processor+0x51c>)
 8007884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o12 =
 8007886:	4a53      	ldr	r2, [pc, #332]	@ (80079d4 <Output_Processor+0x520>)
 8007888:	6393      	str	r3, [r2, #56]	@ 0x38

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o13 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_ConPressure;
 800788a:	4b51      	ldr	r3, [pc, #324]	@ (80079d0 <Output_Processor+0x51c>)
 800788c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o13 =
 800788e:	4a51      	ldr	r2, [pc, #324]	@ (80079d4 <Output_Processor+0x520>)
 8007890:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o14 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_LVDT;
 8007892:	4b4f      	ldr	r3, [pc, #316]	@ (80079d0 <Output_Processor+0x51c>)
 8007894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o14 =
 8007896:	4a4f      	ldr	r2, [pc, #316]	@ (80079d4 <Output_Processor+0x520>)
 8007898:	6413      	str	r3, [r2, #64]	@ 0x40

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o15 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy01_PValveError;
 800789a:	4b4d      	ldr	r3, [pc, #308]	@ (80079d0 <Output_Processor+0x51c>)
 800789c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o15 =
 800789e:	4a4d      	ldr	r2, [pc, #308]	@ (80079d4 <Output_Processor+0x520>)
 80078a0:	6453      	str	r3, [r2, #68]	@ 0x44

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o16 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_ExpPressure;
 80078a2:	4b4b      	ldr	r3, [pc, #300]	@ (80079d0 <Output_Processor+0x51c>)
 80078a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o16 =
 80078a6:	4a4b      	ldr	r2, [pc, #300]	@ (80079d4 <Output_Processor+0x520>)
 80078a8:	6493      	str	r3, [r2, #72]	@ 0x48

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o17 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_ConPressure;
 80078aa:	4b49      	ldr	r3, [pc, #292]	@ (80079d0 <Output_Processor+0x51c>)
 80078ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o17 =
 80078ae:	4a49      	ldr	r2, [pc, #292]	@ (80079d4 <Output_Processor+0x520>)
 80078b0:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o18 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_LVDT;
 80078b2:	4b47      	ldr	r3, [pc, #284]	@ (80079d0 <Output_Processor+0x51c>)
 80078b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o18 =
 80078b6:	4a47      	ldr	r2, [pc, #284]	@ (80079d4 <Output_Processor+0x520>)
 80078b8:	6513      	str	r3, [r2, #80]	@ 0x50

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o19 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.MainSy02_PValveError;
 80078ba:	4b45      	ldr	r3, [pc, #276]	@ (80079d0 <Output_Processor+0x51c>)
 80078bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o19 =
 80078be:	4a45      	ldr	r2, [pc, #276]	@ (80079d4 <Output_Processor+0x520>)
 80078c0:	6553      	str	r3, [r2, #84]	@ 0x54

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o20 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_ExpPressure;
 80078c2:	4b43      	ldr	r3, [pc, #268]	@ (80079d0 <Output_Processor+0x51c>)
 80078c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o20 =
 80078c6:	4a43      	ldr	r2, [pc, #268]	@ (80079d4 <Output_Processor+0x520>)
 80078c8:	6593      	str	r3, [r2, #88]	@ 0x58

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o21 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_ConPressure;
 80078ca:	4b41      	ldr	r3, [pc, #260]	@ (80079d0 <Output_Processor+0x51c>)
 80078cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o21 =
 80078ce:	4a41      	ldr	r2, [pc, #260]	@ (80079d4 <Output_Processor+0x520>)
 80078d0:	65d3      	str	r3, [r2, #92]	@ 0x5c

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o22 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_LVDT;
 80078d2:	4b3f      	ldr	r3, [pc, #252]	@ (80079d0 <Output_Processor+0x51c>)
 80078d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o22 =
 80078d6:	4a3f      	ldr	r2, [pc, #252]	@ (80079d4 <Output_Processor+0x520>)
 80078d8:	6613      	str	r3, [r2, #96]	@ 0x60

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o23 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy01_PValveError;
 80078da:	4b3d      	ldr	r3, [pc, #244]	@ (80079d0 <Output_Processor+0x51c>)
 80078dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o23 =
 80078de:	4a3d      	ldr	r2, [pc, #244]	@ (80079d4 <Output_Processor+0x520>)
 80078e0:	6653      	str	r3, [r2, #100]	@ 0x64

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o24 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_ExpPressure;
 80078e2:	4b3b      	ldr	r3, [pc, #236]	@ (80079d0 <Output_Processor+0x51c>)
 80078e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o24 =
 80078e6:	4a3b      	ldr	r2, [pc, #236]	@ (80079d4 <Output_Processor+0x520>)
 80078e8:	6693      	str	r3, [r2, #104]	@ 0x68

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o25 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_ConPressure;
 80078ea:	4b39      	ldr	r3, [pc, #228]	@ (80079d0 <Output_Processor+0x51c>)
 80078ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o25 =
 80078ee:	4a39      	ldr	r2, [pc, #228]	@ (80079d4 <Output_Processor+0x520>)
 80078f0:	66d3      	str	r3, [r2, #108]	@ 0x6c

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o26 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_LVDT;
 80078f2:	4b37      	ldr	r3, [pc, #220]	@ (80079d0 <Output_Processor+0x51c>)
 80078f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o26 =
 80078f6:	4a37      	ldr	r2, [pc, #220]	@ (80079d4 <Output_Processor+0x520>)
 80078f8:	6713      	str	r3, [r2, #112]	@ 0x70

  /* DataStoreRead: 'Data Store Read2' (':5036') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o27 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsAO.SubSy02_PValveError;
 80078fa:	4b35      	ldr	r3, [pc, #212]	@ (80079d0 <Output_Processor+0x51c>)
 80078fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead2_o27 =
 80078fe:	4a35      	ldr	r2, [pc, #212]	@ (80079d4 <Output_Processor+0x520>)
 8007900:	6753      	str	r3, [r2, #116]	@ 0x74

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o1 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.WinchDrun_Angle;
 8007902:	4b33      	ldr	r3, [pc, #204]	@ (80079d0 <Output_Processor+0x51c>)
 8007904:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o1 =
 8007908:	4a32      	ldr	r2, [pc, #200]	@ (80079d4 <Output_Processor+0x520>)
 800790a:	6793      	str	r3, [r2, #120]	@ 0x78

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o2 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.WinchDrum_Vel;
 800790c:	4b30      	ldr	r3, [pc, #192]	@ (80079d0 <Output_Processor+0x51c>)
 800790e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o2 =
 8007912:	4a30      	ldr	r2, [pc, #192]	@ (80079d4 <Output_Processor+0x520>)
 8007914:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o3 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.Align_Angle;
 8007916:	4b2e      	ldr	r3, [pc, #184]	@ (80079d0 <Output_Processor+0x51c>)
 8007918:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o3 =
 800791c:	4a2d      	ldr	r2, [pc, #180]	@ (80079d4 <Output_Processor+0x520>)
 800791e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o4 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.Align_Vel;
 8007922:	4b2b      	ldr	r3, [pc, #172]	@ (80079d0 <Output_Processor+0x51c>)
 8007924:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o4 =
 8007928:	4a2a      	ldr	r2, [pc, #168]	@ (80079d4 <Output_Processor+0x520>)
 800792a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o5 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.MainCy01_Pos;
 800792e:	4b28      	ldr	r3, [pc, #160]	@ (80079d0 <Output_Processor+0x51c>)
 8007930:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o5 =
 8007934:	4a27      	ldr	r2, [pc, #156]	@ (80079d4 <Output_Processor+0x520>)
 8007936:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o6 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.MainCy01_Vel;
 800793a:	4b25      	ldr	r3, [pc, #148]	@ (80079d0 <Output_Processor+0x51c>)
 800793c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o6 =
 8007940:	4a24      	ldr	r2, [pc, #144]	@ (80079d4 <Output_Processor+0x520>)
 8007942:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o7 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.MainCy02_Pos;
 8007946:	4b22      	ldr	r3, [pc, #136]	@ (80079d0 <Output_Processor+0x51c>)
 8007948:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o7 =
 800794c:	4a21      	ldr	r2, [pc, #132]	@ (80079d4 <Output_Processor+0x520>)
 800794e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o8 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.MainCy02_Vel;
 8007952:	4b1f      	ldr	r3, [pc, #124]	@ (80079d0 <Output_Processor+0x51c>)
 8007954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o8 =
 8007958:	4a1e      	ldr	r2, [pc, #120]	@ (80079d4 <Output_Processor+0x520>)
 800795a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o9 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.SubCy01_Pos;
 800795e:	4b1c      	ldr	r3, [pc, #112]	@ (80079d0 <Output_Processor+0x51c>)
 8007960:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o9 =
 8007964:	4a1b      	ldr	r2, [pc, #108]	@ (80079d4 <Output_Processor+0x520>)
 8007966:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o10 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.SubCy01_Vel;
 800796a:	4b19      	ldr	r3, [pc, #100]	@ (80079d0 <Output_Processor+0x51c>)
 800796c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o10 =
 8007970:	4a18      	ldr	r2, [pc, #96]	@ (80079d4 <Output_Processor+0x520>)
 8007972:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o11 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.SubCy02_Pos;
 8007976:	4b16      	ldr	r3, [pc, #88]	@ (80079d0 <Output_Processor+0x51c>)
 8007978:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o11 =
 800797c:	4a15      	ldr	r2, [pc, #84]	@ (80079d4 <Output_Processor+0x520>)
 800797e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o12 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.SubCy02_Vel;
 8007982:	4b13      	ldr	r3, [pc, #76]	@ (80079d0 <Output_Processor+0x51c>)
 8007984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o12 =
 8007988:	4a12      	ldr	r2, [pc, #72]	@ (80079d4 <Output_Processor+0x520>)
 800798a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o13 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.Spare01;
 800798e:	4b10      	ldr	r3, [pc, #64]	@ (80079d0 <Output_Processor+0x51c>)
 8007990:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o13 =
 8007994:	4a0f      	ldr	r2, [pc, #60]	@ (80079d4 <Output_Processor+0x520>)
 8007996:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o14 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.Spare02;
 800799a:	4b0d      	ldr	r3, [pc, #52]	@ (80079d0 <Output_Processor+0x51c>)
 800799c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o14 =
 80079a0:	4a0c      	ldr	r2, [pc, #48]	@ (80079d4 <Output_Processor+0x520>)
 80079a2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* DataStoreRead: 'Data Store Read8' (':5042') */
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o15 =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMon.Spare03;
 80079a6:	4b0a      	ldr	r3, [pc, #40]	@ (80079d0 <Output_Processor+0x51c>)
 80079a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
  Lws_HilsCtrl_240218_v_1_0_B.DataStoreRead8_o15 =
 80079ac:	4a09      	ldr	r2, [pc, #36]	@ (80079d4 <Output_Processor+0x520>)
 80079ae:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Outport: 'LwsWtuA_HilsMode' (':1445') incorporates:
   *  DataStoreRead: 'Data Store Read3' (':5037')
   */
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMode =
    Lws_HilsCtrl_240218_v_1_0_DW.HilsMode.Op_Mode;
 80079b2:	4b07      	ldr	r3, [pc, #28]	@ (80079d0 <Output_Processor+0x51c>)
 80079b4:	f8b3 22c0 	ldrh.w	r2, [r3, #704]	@ 0x2c0
  Lws_HilsCtrl_240218_v_1_0_Y.LwsWtuA_HilsMode =
 80079b8:	4b04      	ldr	r3, [pc, #16]	@ (80079cc <Output_Processor+0x518>)
 80079ba:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
}
 80079be:	bf00      	nop
 80079c0:	3774      	adds	r7, #116	@ 0x74
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	20000cb4 	.word	0x20000cb4
 80079d0:	200008e8 	.word	0x200008e8
 80079d4:	20000808 	.word	0x20000808

080079d8 <FUN_LED_Routine>:
void FUN_LED_GUICheck(void);
void FUN_LED_Output(uint8_t u1t_LED_SEL, uint8_t u1t_led_state);

/* Private function prototypes -----------------------------------------------*/
void FUN_LED_Routine(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
	FUN_LED_GUICheck();
 80079dc:	f000 f946 	bl	8007c6c <FUN_LED_GUICheck>

	if(LED.LED_Check_Cnt <= 0 + CNT_OFFSET)
 80079e0:	4ba0      	ldr	r3, [pc, #640]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d116      	bne.n	8007a16 <FUN_LED_Routine+0x3e>
	{
		FUN_LED_Output(LED_1_SEL, LED_LOW);
 80079e8:	2100      	movs	r1, #0
 80079ea:	2000      	movs	r0, #0
 80079ec:	f000 f972 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_2_SEL, LED_LOW);
 80079f0:	2100      	movs	r1, #0
 80079f2:	2001      	movs	r0, #1
 80079f4:	f000 f96e 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_3_SEL, LED_LOW);
 80079f8:	2100      	movs	r1, #0
 80079fa:	2002      	movs	r0, #2
 80079fc:	f000 f96a 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_LOW);
 8007a00:	2100      	movs	r1, #0
 8007a02:	2003      	movs	r0, #3
 8007a04:	f000 f966 	bl	8007cd4 <FUN_LED_Output>
		LED.LED_Check_Cnt++;
 8007a08:	4b96      	ldr	r3, [pc, #600]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	4b94      	ldr	r3, [pc, #592]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	e11e      	b.n	8007c54 <FUN_LED_Routine+0x27c>
	}
	else if(LED.LED_Check_Cnt <= 5 + CNT_OFFSET)
 8007a16:	4b93      	ldr	r3, [pc, #588]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b05      	cmp	r3, #5
 8007a1c:	d816      	bhi.n	8007a4c <FUN_LED_Routine+0x74>
	{
		FUN_LED_Output(LED_1_SEL, LED_HIGH);
 8007a1e:	2101      	movs	r1, #1
 8007a20:	2000      	movs	r0, #0
 8007a22:	f000 f957 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_2_SEL, LED_HIGH);
 8007a26:	2101      	movs	r1, #1
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f000 f953 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_3_SEL, LED_HIGH);
 8007a2e:	2101      	movs	r1, #1
 8007a30:	2002      	movs	r0, #2
 8007a32:	f000 f94f 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_HIGH);
 8007a36:	2101      	movs	r1, #1
 8007a38:	2003      	movs	r0, #3
 8007a3a:	f000 f94b 	bl	8007cd4 <FUN_LED_Output>
		LED.LED_Check_Cnt++;
 8007a3e:	4b89      	ldr	r3, [pc, #548]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	3301      	adds	r3, #1
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	4b87      	ldr	r3, [pc, #540]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007a48:	701a      	strb	r2, [r3, #0]
 8007a4a:	e103      	b.n	8007c54 <FUN_LED_Routine+0x27c>
	}
	else if(LED.LED_Check_Cnt <= 10 + CNT_OFFSET)
 8007a4c:	4b85      	ldr	r3, [pc, #532]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b0a      	cmp	r3, #10
 8007a52:	d816      	bhi.n	8007a82 <FUN_LED_Routine+0xaa>
	{
		FUN_LED_Output(LED_1_SEL, LED_LOW);
 8007a54:	2100      	movs	r1, #0
 8007a56:	2000      	movs	r0, #0
 8007a58:	f000 f93c 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_2_SEL, LED_LOW);
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	2001      	movs	r0, #1
 8007a60:	f000 f938 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_3_SEL, LED_LOW);
 8007a64:	2100      	movs	r1, #0
 8007a66:	2002      	movs	r0, #2
 8007a68:	f000 f934 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_LOW);
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	2003      	movs	r0, #3
 8007a70:	f000 f930 	bl	8007cd4 <FUN_LED_Output>
		LED.LED_Check_Cnt++;
 8007a74:	4b7b      	ldr	r3, [pc, #492]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	4b79      	ldr	r3, [pc, #484]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	e0e8      	b.n	8007c54 <FUN_LED_Routine+0x27c>
	}
	else if(LED.LED_Check_Cnt <= 15 + CNT_OFFSET)
 8007a82:	4b78      	ldr	r3, [pc, #480]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b0f      	cmp	r3, #15
 8007a88:	d816      	bhi.n	8007ab8 <FUN_LED_Routine+0xe0>
	{
		FUN_LED_Output(LED_1_SEL, LED_HIGH);
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	f000 f921 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_2_SEL, LED_HIGH);
 8007a92:	2101      	movs	r1, #1
 8007a94:	2001      	movs	r0, #1
 8007a96:	f000 f91d 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_3_SEL, LED_HIGH);
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	2002      	movs	r0, #2
 8007a9e:	f000 f919 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_HIGH);
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	2003      	movs	r0, #3
 8007aa6:	f000 f915 	bl	8007cd4 <FUN_LED_Output>
		LED.LED_Check_Cnt++;
 8007aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	e0cd      	b.n	8007c54 <FUN_LED_Routine+0x27c>
	}
	else if(LED.LED_Check_Cnt <= 20 + CNT_OFFSET)
 8007ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b14      	cmp	r3, #20
 8007abe:	d816      	bhi.n	8007aee <FUN_LED_Routine+0x116>
	{
		FUN_LED_Output(LED_1_SEL, LED_LOW);
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f000 f906 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_2_SEL, LED_LOW);
 8007ac8:	2100      	movs	r1, #0
 8007aca:	2001      	movs	r0, #1
 8007acc:	f000 f902 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_3_SEL, LED_LOW);
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	2002      	movs	r0, #2
 8007ad4:	f000 f8fe 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_LOW);
 8007ad8:	2100      	movs	r1, #0
 8007ada:	2003      	movs	r0, #3
 8007adc:	f000 f8fa 	bl	8007cd4 <FUN_LED_Output>
		LED.LED_Check_Cnt++;
 8007ae0:	4b60      	ldr	r3, [pc, #384]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	e0b2      	b.n	8007c54 <FUN_LED_Routine+0x27c>
	}
	else if(LED.LED_Check_Cnt <= 25 + CNT_OFFSET)
 8007aee:	4b5d      	ldr	r3, [pc, #372]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b19      	cmp	r3, #25
 8007af4:	d816      	bhi.n	8007b24 <FUN_LED_Routine+0x14c>
	{
		FUN_LED_Output(LED_1_SEL, LED_HIGH);
 8007af6:	2101      	movs	r1, #1
 8007af8:	2000      	movs	r0, #0
 8007afa:	f000 f8eb 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_2_SEL, LED_HIGH);
 8007afe:	2101      	movs	r1, #1
 8007b00:	2001      	movs	r0, #1
 8007b02:	f000 f8e7 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_3_SEL, LED_HIGH);
 8007b06:	2101      	movs	r1, #1
 8007b08:	2002      	movs	r0, #2
 8007b0a:	f000 f8e3 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_HIGH);
 8007b0e:	2101      	movs	r1, #1
 8007b10:	2003      	movs	r0, #3
 8007b12:	f000 f8df 	bl	8007cd4 <FUN_LED_Output>
		LED.LED_Check_Cnt++;
 8007b16:	4b53      	ldr	r3, [pc, #332]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	4b51      	ldr	r3, [pc, #324]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007b20:	701a      	strb	r2, [r3, #0]
 8007b22:	e097      	b.n	8007c54 <FUN_LED_Routine+0x27c>
	}
	else if(LED.LED_Check_Cnt <= 30 + CNT_OFFSET)
 8007b24:	4b4f      	ldr	r3, [pc, #316]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b1e      	cmp	r3, #30
 8007b2a:	d816      	bhi.n	8007b5a <FUN_LED_Routine+0x182>
	{
		FUN_LED_Output(LED_1_SEL, LED_LOW);
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	2000      	movs	r0, #0
 8007b30:	f000 f8d0 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_2_SEL, LED_LOW);
 8007b34:	2100      	movs	r1, #0
 8007b36:	2001      	movs	r0, #1
 8007b38:	f000 f8cc 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_3_SEL, LED_LOW);
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	2002      	movs	r0, #2
 8007b40:	f000 f8c8 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_LOW);
 8007b44:	2100      	movs	r1, #0
 8007b46:	2003      	movs	r0, #3
 8007b48:	f000 f8c4 	bl	8007cd4 <FUN_LED_Output>
		LED.LED_Check_Cnt++;
 8007b4c:	4b45      	ldr	r3, [pc, #276]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	3301      	adds	r3, #1
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	4b43      	ldr	r3, [pc, #268]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007b56:	701a      	strb	r2, [r3, #0]
 8007b58:	e07c      	b.n	8007c54 <FUN_LED_Routine+0x27c>
	}
	else if(LED.LED_Check_Cnt <= 35 + CNT_OFFSET)
 8007b5a:	4b42      	ldr	r3, [pc, #264]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b23      	cmp	r3, #35	@ 0x23
 8007b60:	d816      	bhi.n	8007b90 <FUN_LED_Routine+0x1b8>
	{
		FUN_LED_Output(LED_1_SEL, LED_HIGH);
 8007b62:	2101      	movs	r1, #1
 8007b64:	2000      	movs	r0, #0
 8007b66:	f000 f8b5 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_2_SEL, LED_HIGH);
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	f000 f8b1 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_3_SEL, LED_HIGH);
 8007b72:	2101      	movs	r1, #1
 8007b74:	2002      	movs	r0, #2
 8007b76:	f000 f8ad 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_HIGH);
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	2003      	movs	r0, #3
 8007b7e:	f000 f8a9 	bl	8007cd4 <FUN_LED_Output>
		LED.LED_Check_Cnt++;
 8007b82:	4b38      	ldr	r3, [pc, #224]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	3301      	adds	r3, #1
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	4b36      	ldr	r3, [pc, #216]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e061      	b.n	8007c54 <FUN_LED_Routine+0x27c>
	}
	else if(LED.LED_Check_Cnt <= 40 + CNT_OFFSET)
 8007b90:	4b34      	ldr	r3, [pc, #208]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b28      	cmp	r3, #40	@ 0x28
 8007b96:	d816      	bhi.n	8007bc6 <FUN_LED_Routine+0x1ee>
	{
		FUN_LED_Output(LED_1_SEL, LED_LOW);
 8007b98:	2100      	movs	r1, #0
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	f000 f89a 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_2_SEL, LED_LOW);
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	2001      	movs	r0, #1
 8007ba4:	f000 f896 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_3_SEL, LED_LOW);
 8007ba8:	2100      	movs	r1, #0
 8007baa:	2002      	movs	r0, #2
 8007bac:	f000 f892 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_LOW);
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	2003      	movs	r0, #3
 8007bb4:	f000 f88e 	bl	8007cd4 <FUN_LED_Output>
		LED.LED_Check_Cnt++;
 8007bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	4b28      	ldr	r3, [pc, #160]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007bc2:	701a      	strb	r2, [r3, #0]
 8007bc4:	e046      	b.n	8007c54 <FUN_LED_Routine+0x27c>
	}
	else if(LED.LED_Check_Cnt <= 45 + CNT_OFFSET)
 8007bc6:	4b27      	ldr	r3, [pc, #156]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b2d      	cmp	r3, #45	@ 0x2d
 8007bcc:	d816      	bhi.n	8007bfc <FUN_LED_Routine+0x224>
	{
		FUN_LED_Output(LED_1_SEL, LED_HIGH);
 8007bce:	2101      	movs	r1, #1
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	f000 f87f 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_2_SEL, LED_HIGH);
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	2001      	movs	r0, #1
 8007bda:	f000 f87b 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_3_SEL, LED_HIGH);
 8007bde:	2101      	movs	r1, #1
 8007be0:	2002      	movs	r0, #2
 8007be2:	f000 f877 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_HIGH);
 8007be6:	2101      	movs	r1, #1
 8007be8:	2003      	movs	r0, #3
 8007bea:	f000 f873 	bl	8007cd4 <FUN_LED_Output>
		LED.LED_Check_Cnt++;
 8007bee:	4b1d      	ldr	r3, [pc, #116]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	e02b      	b.n	8007c54 <FUN_LED_Routine+0x27c>
	}
	else if(LED.LED_Check_Cnt <= 50 + CNT_OFFSET)
 8007bfc:	4b19      	ldr	r3, [pc, #100]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b32      	cmp	r3, #50	@ 0x32
 8007c02:	d816      	bhi.n	8007c32 <FUN_LED_Routine+0x25a>
	{
		FUN_LED_Output(LED_1_SEL, LED_LOW);
 8007c04:	2100      	movs	r1, #0
 8007c06:	2000      	movs	r0, #0
 8007c08:	f000 f864 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_2_SEL, LED_LOW);
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	2001      	movs	r0, #1
 8007c10:	f000 f860 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_3_SEL, LED_LOW);
 8007c14:	2100      	movs	r1, #0
 8007c16:	2002      	movs	r0, #2
 8007c18:	f000 f85c 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_LOW);
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	2003      	movs	r0, #3
 8007c20:	f000 f858 	bl	8007cd4 <FUN_LED_Output>
		LED.LED_Check_Cnt++;
 8007c24:	4b0f      	ldr	r3, [pc, #60]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	e010      	b.n	8007c54 <FUN_LED_Routine+0x27c>
	}
	else
	{
		LED.LED_Check_Cnt = 51 + CNT_OFFSET;
 8007c32:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007c34:	2233      	movs	r2, #51	@ 0x33
 8007c36:	701a      	strb	r2, [r3, #0]
		FUN_LED_Output(LED_1_SEL, LED_HIGH);
 8007c38:	2101      	movs	r1, #1
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	f000 f84a 	bl	8007cd4 <FUN_LED_Output>
		Control.Status_01.Bit.Status2 = 1;
 8007c40:	4a09      	ldr	r2, [pc, #36]	@ (8007c68 <FUN_LED_Routine+0x290>)
 8007c42:	7913      	ldrb	r3, [r2, #4]
 8007c44:	f043 0304 	orr.w	r3, r3, #4
 8007c48:	7113      	strb	r3, [r2, #4]
		Control.Status_01.Bit.Status3 = 1;
 8007c4a:	4a07      	ldr	r2, [pc, #28]	@ (8007c68 <FUN_LED_Routine+0x290>)
 8007c4c:	7913      	ldrb	r3, [r2, #4]
 8007c4e:	f043 0308 	orr.w	r3, r3, #8
 8007c52:	7113      	strb	r3, [r2, #4]
	}

	LED.GUI_Check_Cnt++;
 8007c54:	4b03      	ldr	r3, [pc, #12]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007c56:	785b      	ldrb	r3, [r3, #1]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	4b01      	ldr	r3, [pc, #4]	@ (8007c64 <FUN_LED_Routine+0x28c>)
 8007c5e:	705a      	strb	r2, [r3, #1]
}
 8007c60:	bf00      	nop
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	20000d8c 	.word	0x20000d8c
 8007c68:	20000154 	.word	0x20000154

08007c6c <FUN_LED_GUICheck>:

void FUN_LED_GUICheck(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
	if(LED.GUI_Check_Cnt < 50 + CNT_OFFSET)
 8007c70:	4b16      	ldr	r3, [pc, #88]	@ (8007ccc <FUN_LED_GUICheck+0x60>)
 8007c72:	785b      	ldrb	r3, [r3, #1]
 8007c74:	2b31      	cmp	r3, #49	@ 0x31
 8007c76:	d812      	bhi.n	8007c9e <FUN_LED_GUICheck+0x32>
	{
		FUN_LED_Output(LED_2_SEL, LED_HIGH);
 8007c78:	2101      	movs	r1, #1
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	f000 f82a 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_HIGH);
 8007c80:	2101      	movs	r1, #1
 8007c82:	2003      	movs	r0, #3
 8007c84:	f000 f826 	bl	8007cd4 <FUN_LED_Output>

		Control.Status_01.Bit.Status0 = 1;
 8007c88:	4a11      	ldr	r2, [pc, #68]	@ (8007cd0 <FUN_LED_GUICheck+0x64>)
 8007c8a:	7913      	ldrb	r3, [r2, #4]
 8007c8c:	f043 0301 	orr.w	r3, r3, #1
 8007c90:	7113      	strb	r3, [r2, #4]
		Control.Status_01.Bit.Status4 = 1;
 8007c92:	4a0f      	ldr	r2, [pc, #60]	@ (8007cd0 <FUN_LED_GUICheck+0x64>)
 8007c94:	7913      	ldrb	r3, [r2, #4]
 8007c96:	f043 0310 	orr.w	r3, r3, #16
 8007c9a:	7113      	strb	r3, [r2, #4]
		FUN_LED_Output(LED_4_SEL, LED_LOW);

		Control.Status_01.Bit.Status0 = 0;
		Control.Status_01.Bit.Status4 = 0;
	}
}
 8007c9c:	e014      	b.n	8007cc8 <FUN_LED_GUICheck+0x5c>
		LED.GUI_Check_Cnt = 50;
 8007c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007ccc <FUN_LED_GUICheck+0x60>)
 8007ca0:	2232      	movs	r2, #50	@ 0x32
 8007ca2:	705a      	strb	r2, [r3, #1]
		FUN_LED_Output(LED_2_SEL, LED_LOW);
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	f000 f814 	bl	8007cd4 <FUN_LED_Output>
		FUN_LED_Output(LED_4_SEL, LED_LOW);
 8007cac:	2100      	movs	r1, #0
 8007cae:	2003      	movs	r0, #3
 8007cb0:	f000 f810 	bl	8007cd4 <FUN_LED_Output>
		Control.Status_01.Bit.Status0 = 0;
 8007cb4:	4a06      	ldr	r2, [pc, #24]	@ (8007cd0 <FUN_LED_GUICheck+0x64>)
 8007cb6:	7913      	ldrb	r3, [r2, #4]
 8007cb8:	f36f 0300 	bfc	r3, #0, #1
 8007cbc:	7113      	strb	r3, [r2, #4]
		Control.Status_01.Bit.Status4 = 0;
 8007cbe:	4a04      	ldr	r2, [pc, #16]	@ (8007cd0 <FUN_LED_GUICheck+0x64>)
 8007cc0:	7913      	ldrb	r3, [r2, #4]
 8007cc2:	f36f 1304 	bfc	r3, #4, #1
 8007cc6:	7113      	strb	r3, [r2, #4]
}
 8007cc8:	bf00      	nop
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20000d8c 	.word	0x20000d8c
 8007cd0:	20000154 	.word	0x20000154

08007cd4 <FUN_LED_Output>:


// 입력 : LED 선택, LED 상태
void FUN_LED_Output(uint8_t u1t_LED_SEL, uint8_t u1t_LED_state)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	460a      	mov	r2, r1
 8007cde:	71fb      	strb	r3, [r7, #7]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	71bb      	strb	r3, [r7, #6]
	switch(u1t_LED_SEL)
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d846      	bhi.n	8007d78 <FUN_LED_Output+0xa4>
 8007cea:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf0 <FUN_LED_Output+0x1c>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d01 	.word	0x08007d01
 8007cf4:	08007d1f 	.word	0x08007d1f
 8007cf8:	08007d3d 	.word	0x08007d3d
 8007cfc:	08007d5b 	.word	0x08007d5b
	{
		case LED_1_SEL:
			if(u1t_LED_state == LED_HIGH)	// LED 켜기
 8007d00:	79bb      	ldrb	r3, [r7, #6]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d105      	bne.n	8007d12 <FUN_LED_Output+0x3e>
			{
				LED_1_ON();
 8007d06:	2201      	movs	r2, #1
 8007d08:	2102      	movs	r1, #2
 8007d0a:	481d      	ldr	r0, [pc, #116]	@ (8007d80 <FUN_LED_Output+0xac>)
 8007d0c:	f005 f8d8 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{								// LED 끄기
				LED_1_OFF();
			}
			break;
 8007d10:	e032      	b.n	8007d78 <FUN_LED_Output+0xa4>
				LED_1_OFF();
 8007d12:	2200      	movs	r2, #0
 8007d14:	2102      	movs	r1, #2
 8007d16:	481a      	ldr	r0, [pc, #104]	@ (8007d80 <FUN_LED_Output+0xac>)
 8007d18:	f005 f8d2 	bl	800cec0 <HAL_GPIO_WritePin>
			break;
 8007d1c:	e02c      	b.n	8007d78 <FUN_LED_Output+0xa4>
		case LED_2_SEL:
			if(u1t_LED_state == LED_HIGH)
 8007d1e:	79bb      	ldrb	r3, [r7, #6]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d105      	bne.n	8007d30 <FUN_LED_Output+0x5c>
			{
				LED_2_ON();
 8007d24:	2201      	movs	r2, #1
 8007d26:	2104      	movs	r1, #4
 8007d28:	4815      	ldr	r0, [pc, #84]	@ (8007d80 <FUN_LED_Output+0xac>)
 8007d2a:	f005 f8c9 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{
				LED_2_OFF();
			}
			break;
 8007d2e:	e023      	b.n	8007d78 <FUN_LED_Output+0xa4>
				LED_2_OFF();
 8007d30:	2200      	movs	r2, #0
 8007d32:	2104      	movs	r1, #4
 8007d34:	4812      	ldr	r0, [pc, #72]	@ (8007d80 <FUN_LED_Output+0xac>)
 8007d36:	f005 f8c3 	bl	800cec0 <HAL_GPIO_WritePin>
			break;
 8007d3a:	e01d      	b.n	8007d78 <FUN_LED_Output+0xa4>
		case LED_3_SEL:
			if(u1t_LED_state == LED_HIGH)
 8007d3c:	79bb      	ldrb	r3, [r7, #6]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d105      	bne.n	8007d4e <FUN_LED_Output+0x7a>
			{
				LED_3_ON();
 8007d42:	2201      	movs	r2, #1
 8007d44:	2108      	movs	r1, #8
 8007d46:	480e      	ldr	r0, [pc, #56]	@ (8007d80 <FUN_LED_Output+0xac>)
 8007d48:	f005 f8ba 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{
				LED_3_OFF();
			}
			break;
 8007d4c:	e014      	b.n	8007d78 <FUN_LED_Output+0xa4>
				LED_3_OFF();
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2108      	movs	r1, #8
 8007d52:	480b      	ldr	r0, [pc, #44]	@ (8007d80 <FUN_LED_Output+0xac>)
 8007d54:	f005 f8b4 	bl	800cec0 <HAL_GPIO_WritePin>
			break;
 8007d58:	e00e      	b.n	8007d78 <FUN_LED_Output+0xa4>
		case LED_4_SEL:
			if(u1t_LED_state == LED_HIGH)
 8007d5a:	79bb      	ldrb	r3, [r7, #6]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d105      	bne.n	8007d6c <FUN_LED_Output+0x98>
			{
				LED_4_ON();
 8007d60:	2201      	movs	r2, #1
 8007d62:	2110      	movs	r1, #16
 8007d64:	4806      	ldr	r0, [pc, #24]	@ (8007d80 <FUN_LED_Output+0xac>)
 8007d66:	f005 f8ab 	bl	800cec0 <HAL_GPIO_WritePin>
			}
			else
			{
				LED_4_OFF();
			}
			break;
 8007d6a:	e004      	b.n	8007d76 <FUN_LED_Output+0xa2>
				LED_4_OFF();
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2110      	movs	r1, #16
 8007d70:	4803      	ldr	r0, [pc, #12]	@ (8007d80 <FUN_LED_Output+0xac>)
 8007d72:	f005 f8a5 	bl	800cec0 <HAL_GPIO_WritePin>
			break;
 8007d76:	bf00      	nop
	}
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	40022400 	.word	0x40022400

08007d84 <FUN_RS485_Init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_RS485_Init(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
	//RS485 변수 초기화
	FUN_RS485_Parameter_Reset();
 8007d88:	f000 f814 	bl	8007db4 <FUN_RS485_Parameter_Reset>

	SEL_485_1_RE();												// RS485 수신 모드
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d92:	4805      	ldr	r0, [pc, #20]	@ (8007da8 <FUN_RS485_Init+0x24>)
 8007d94:	f005 f894 	bl	800cec0 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart7, &RS485.Uart7_Rx_IT_Buffer, 1);	// Receive Interrupt 대기
 8007d98:	2201      	movs	r2, #1
 8007d9a:	4904      	ldr	r1, [pc, #16]	@ (8007dac <FUN_RS485_Init+0x28>)
 8007d9c:	4804      	ldr	r0, [pc, #16]	@ (8007db0 <FUN_RS485_Init+0x2c>)
 8007d9e:	f008 fc9b 	bl	80106d8 <HAL_UART_Receive_IT>
}
 8007da2:	bf00      	nop
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40021000 	.word	0x40021000
 8007dac:	20000e66 	.word	0x20000e66
 8007db0:	20001754 	.word	0x20001754

08007db4 <FUN_RS485_Parameter_Reset>:
/****************************************************************************/
/*	Overview	:	RS485 Parameter Reset									*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_RS485_Parameter_Reset(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i< HILS_OUTPUT_UC_Float_LENGTH; i++)
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73fb      	strb	r3, [r7, #15]
 8007dbe:	e009      	b.n	8007dd4 <FUN_RS485_Parameter_Reset+0x20>
	{
		RS485.HILS_UC_Output_Float[i] = 0;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	4a6f      	ldr	r2, [pc, #444]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f04f 0200 	mov.w	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i< HILS_OUTPUT_UC_Float_LENGTH; i++)
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	73fb      	strb	r3, [r7, #15]
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	2b1a      	cmp	r3, #26
 8007dd8:	d9f2      	bls.n	8007dc0 <FUN_RS485_Parameter_Reset+0xc>
	}
	for(uint8_t i = 0; i< HILS_OUTPUT_UC_Int_LENGTH; i++)
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73bb      	strb	r3, [r7, #14]
 8007dde:	e008      	b.n	8007df2 <FUN_RS485_Parameter_Reset+0x3e>
	{
		RS485.HILS_UC_Output_Int[i] = 0;
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	4a67      	ldr	r2, [pc, #412]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007de4:	4413      	add	r3, r2
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	for(uint8_t i = 0; i< HILS_OUTPUT_UC_Int_LENGTH; i++)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	3301      	adds	r3, #1
 8007df0:	73bb      	strb	r3, [r7, #14]
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b12      	cmp	r3, #18
 8007df6:	d9f3      	bls.n	8007de0 <FUN_RS485_Parameter_Reset+0x2c>
	}
	for(uint8_t i = 0; i< 8; i++)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	737b      	strb	r3, [r7, #13]
 8007dfc:	e025      	b.n	8007e4a <FUN_RS485_Parameter_Reset+0x96>
	{
		RS485.Cutter_Output_Float[i] = 0;
 8007dfe:	7b7b      	ldrb	r3, [r7, #13]
 8007e00:	4a5f      	ldr	r2, [pc, #380]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007e02:	3326      	adds	r3, #38	@ 0x26
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	3304      	adds	r3, #4
 8007e0a:	f04f 0200 	mov.w	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]
		RS485.Cutter_Output_Int[i] = 0;
 8007e10:	7b7b      	ldrb	r3, [r7, #13]
 8007e12:	4a5b      	ldr	r2, [pc, #364]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007e14:	4413      	add	r3, r2
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
		RS485.Cleaner_Output_Int[i] = 0;
 8007e1c:	7b7b      	ldrb	r3, [r7, #13]
 8007e1e:	4a58      	ldr	r2, [pc, #352]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007e20:	4413      	add	r3, r2
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
		RS485.Gripper_Output_Float[i] = 0;
 8007e28:	7b7b      	ldrb	r3, [r7, #13]
 8007e2a:	4a55      	ldr	r2, [pc, #340]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007e2c:	3320      	adds	r3, #32
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	f04f 0200 	mov.w	r2, #0
 8007e36:	601a      	str	r2, [r3, #0]
		RS485.Emergency_Output_Int[i] = 0;
 8007e38:	7b7b      	ldrb	r3, [r7, #13]
 8007e3a:	4a51      	ldr	r2, [pc, #324]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007e3c:	4413      	add	r3, r2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
	for(uint8_t i = 0; i< 8; i++)
 8007e44:	7b7b      	ldrb	r3, [r7, #13]
 8007e46:	3301      	adds	r3, #1
 8007e48:	737b      	strb	r3, [r7, #13]
 8007e4a:	7b7b      	ldrb	r3, [r7, #13]
 8007e4c:	2b07      	cmp	r3, #7
 8007e4e:	d9d6      	bls.n	8007dfe <FUN_RS485_Parameter_Reset+0x4a>
	}
	for(uint8_t i = 0; i< 6; i++)
 8007e50:	2300      	movs	r3, #0
 8007e52:	733b      	strb	r3, [r7, #12]
 8007e54:	e008      	b.n	8007e68 <FUN_RS485_Parameter_Reset+0xb4>
	{
		RS485.Gripper_Output_Int[i] = 0;
 8007e56:	7b3b      	ldrb	r3, [r7, #12]
 8007e58:	4a49      	ldr	r2, [pc, #292]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007e5a:	4413      	add	r3, r2
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	for(uint8_t i = 0; i< 6; i++)
 8007e62:	7b3b      	ldrb	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	733b      	strb	r3, [r7, #12]
 8007e68:	7b3b      	ldrb	r3, [r7, #12]
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d9f3      	bls.n	8007e56 <FUN_RS485_Parameter_Reset+0xa2>
	}
	for(uint8_t i = 0; i< 4; i++)
 8007e6e:	2300      	movs	r3, #0
 8007e70:	72fb      	strb	r3, [r7, #11]
 8007e72:	e008      	b.n	8007e86 <FUN_RS485_Parameter_Reset+0xd2>
	{
		RS485.Oil_Output_Int[i] = 0;
 8007e74:	7afb      	ldrb	r3, [r7, #11]
 8007e76:	4a42      	ldr	r2, [pc, #264]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007e78:	4413      	add	r3, r2
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
	for(uint8_t i = 0; i< 4; i++)
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	3301      	adds	r3, #1
 8007e84:	72fb      	strb	r3, [r7, #11]
 8007e86:	7afb      	ldrb	r3, [r7, #11]
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d9f3      	bls.n	8007e74 <FUN_RS485_Parameter_Reset+0xc0>
	}
	for(uint16_t i = 0; i< RX_BUF_LENGTH; i++)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	813b      	strh	r3, [r7, #8]
 8007e90:	e008      	b.n	8007ea4 <FUN_RS485_Parameter_Reset+0xf0>
	{
		RS485.Uart7_Rx_Buffer[i] = 0;
 8007e92:	893b      	ldrh	r3, [r7, #8]
 8007e94:	4a3a      	ldr	r2, [pc, #232]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007e96:	4413      	add	r3, r2
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
	for(uint16_t i = 0; i< RX_BUF_LENGTH; i++)
 8007e9e:	893b      	ldrh	r3, [r7, #8]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	813b      	strh	r3, [r7, #8]
 8007ea4:	893b      	ldrh	r3, [r7, #8]
 8007ea6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8007eaa:	d3f2      	bcc.n	8007e92 <FUN_RS485_Parameter_Reset+0xde>
	}
	for(uint16_t i = 0; i< TX_BUF_LENGTH; i++)
 8007eac:	2300      	movs	r3, #0
 8007eae:	80fb      	strh	r3, [r7, #6]
 8007eb0:	e00e      	b.n	8007ed0 <FUN_RS485_Parameter_Reset+0x11c>
	{
		RS485.Uart7_Tx_Buffer[i] = 0;
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	4a32      	ldr	r2, [pc, #200]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007eb6:	4413      	add	r3, r2
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
		RS485.Uart7_Data_Buffer[i] = 0;
 8007ebe:	88fb      	ldrh	r3, [r7, #6]
 8007ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007ec2:	4413      	add	r3, r2
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 232f 	strb.w	r2, [r3, #815]	@ 0x32f
	for(uint16_t i = 0; i< TX_BUF_LENGTH; i++)
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	80fb      	strh	r3, [r7, #6]
 8007ed0:	88fb      	ldrh	r3, [r7, #6]
 8007ed2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8007ed6:	d3ec      	bcc.n	8007eb2 <FUN_RS485_Parameter_Reset+0xfe>
	}
	for(uint8_t i = 0; i< PARAMETER_WRITE_LENGTH; i++)
 8007ed8:	2300      	movs	r3, #0
 8007eda:	717b      	strb	r3, [r7, #5]
 8007edc:	e002      	b.n	8007ee4 <FUN_RS485_Parameter_Reset+0x130>
 8007ede:	797b      	ldrb	r3, [r7, #5]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	717b      	strb	r3, [r7, #5]
 8007ee4:	797b      	ldrb	r3, [r7, #5]
 8007ee6:	2b13      	cmp	r3, #19
 8007ee8:	d9f9      	bls.n	8007ede <FUN_RS485_Parameter_Reset+0x12a>
	{
//		RS485.LwsA_Parameter[i] = 0;
	}
	for(uint8_t i = 0; i< HILS_WRITE_LENGTH; i++)
 8007eea:	2300      	movs	r3, #0
 8007eec:	713b      	strb	r3, [r7, #4]
 8007eee:	e008      	b.n	8007f02 <FUN_RS485_Parameter_Reset+0x14e>
	{
		RS485.LwsA_HILS_Init_Value[i] = 0;
 8007ef0:	793b      	ldrb	r3, [r7, #4]
 8007ef2:	4a23      	ldr	r2, [pc, #140]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007ef4:	4413      	add	r3, r2
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 24ac 	strb.w	r2, [r3, #1196]	@ 0x4ac
	for(uint8_t i = 0; i< HILS_WRITE_LENGTH; i++)
 8007efc:	793b      	ldrb	r3, [r7, #4]
 8007efe:	3301      	adds	r3, #1
 8007f00:	713b      	strb	r3, [r7, #4]
 8007f02:	793b      	ldrb	r3, [r7, #4]
 8007f04:	2b11      	cmp	r3, #17
 8007f06:	d9f3      	bls.n	8007ef0 <FUN_RS485_Parameter_Reset+0x13c>
	}

	RS485.Oil_Output_Float = 0;
 8007f08:	4b1d      	ldr	r3, [pc, #116]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	RS485.Uart7_Rx_Check_Flag = 0;
 8007f12:	4b1b      	ldr	r3, [pc, #108]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
	RS485.Uart7_Rcv_Cplt_Flag = 0;
 8007f1a:	4b19      	ldr	r3, [pc, #100]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
	RS485.Uart7_Rx_IT_Buffer = 0;
 8007f22:	4b17      	ldr	r3, [pc, #92]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6

	RS485.Uart7_Rx_Data_Length = 0;						//수신된 데이터 길이
 8007f2a:	4b15      	ldr	r3, [pc, #84]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8a3 24c0 	strh.w	r2, [r3, #1216]	@ 0x4c0
	RS485.Uart7_Rx_Frame_Length = 0;					//수신된 버퍼 길이
 8007f32:	4b13      	ldr	r3, [pc, #76]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8a3 24c2 	strh.w	r2, [r3, #1218]	@ 0x4c2

	RS485.Uart7_Rx_Cnt = 0;								//RS485 수신 버퍼 카운트
 8007f3a:	4b11      	ldr	r3, [pc, #68]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 24c4 	strb.w	r2, [r3, #1220]	@ 0x4c4
	RS485.Uart7_Tx_Cnt = 0;								//RS485 송신 버퍼 카운트
 8007f42:	4b0f      	ldr	r3, [pc, #60]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	f8a3 24c6 	strh.w	r2, [r3, #1222]	@ 0x4c6

	//Data 요청
	RS485.Uart7_Data_SEQ_Num = 0;						// SEQ NO.
 8007f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 24c8 	strb.w	r2, [r3, #1224]	@ 0x4c8
	RS485.Uart7_Parameter_SEQ_Num = 0;					// SEQ NO.
 8007f52:	4b0b      	ldr	r3, [pc, #44]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 24c9 	strb.w	r2, [r3, #1225]	@ 0x4c9
	RS485.Uart7_HILS_Init_SEQ_Num = 0;					// SEQ NO.
 8007f5a:	4b09      	ldr	r3, [pc, #36]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 24ca 	strb.w	r2, [r3, #1226]	@ 0x4ca
	RS485.Uart7_Ack_SEQ_Num = 0;						// SEQ NO.
 8007f62:	4b07      	ldr	r3, [pc, #28]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 24cb 	strb.w	r2, [r3, #1227]	@ 0x4cb

	//HILS Start/Stop 결정 Cmd
	RS485.HILS_Start_Stop_Cmd = HILS_STOP;
 8007f6a:	4b05      	ldr	r3, [pc, #20]	@ (8007f80 <FUN_RS485_Parameter_Reset+0x1cc>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
}
 8007f72:	bf00      	nop
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	20000d90 	.word	0x20000d90

08007f84 <HAL_UART_RxCpltCallback>:
/****************************************************************************/
/*	Overview	:	Rx Call Back 함수											*/
/*	Return value:	void													*/
/****************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART7)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a0e      	ldr	r2, [pc, #56]	@ (8007fcc <HAL_UART_RxCpltCallback+0x48>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d116      	bne.n	8007fc4 <HAL_UART_RxCpltCallback+0x40>
	{
		RS485.Uart7_Rx_Buffer[RS485.Uart7_Rx_Cnt++] = RS485.Uart7_Rx_IT_Buffer;
 8007f96:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd0 <HAL_UART_RxCpltCallback+0x4c>)
 8007f98:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	b2d1      	uxtb	r1, r2
 8007fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8007fd0 <HAL_UART_RxCpltCallback+0x4c>)
 8007fa2:	f882 14c4 	strb.w	r1, [r2, #1220]	@ 0x4c4
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	4b09      	ldr	r3, [pc, #36]	@ (8007fd0 <HAL_UART_RxCpltCallback+0x4c>)
 8007faa:	f893 20d6 	ldrb.w	r2, [r3, #214]	@ 0xd6
 8007fae:	4b08      	ldr	r3, [pc, #32]	@ (8007fd0 <HAL_UART_RxCpltCallback+0x4c>)
 8007fb0:	440b      	add	r3, r1
 8007fb2:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7

		FUN_RS485_Rx_Data_Check();
 8007fb6:	f000 f829 	bl	800800c <FUN_RS485_Rx_Data_Check>

		HAL_UART_Receive_IT(&huart7, &RS485.Uart7_Rx_IT_Buffer, 1);	// 1byte 수신시 콜백
 8007fba:	2201      	movs	r2, #1
 8007fbc:	4905      	ldr	r1, [pc, #20]	@ (8007fd4 <HAL_UART_RxCpltCallback+0x50>)
 8007fbe:	4806      	ldr	r0, [pc, #24]	@ (8007fd8 <HAL_UART_RxCpltCallback+0x54>)
 8007fc0:	f008 fb8a 	bl	80106d8 <HAL_UART_Receive_IT>
	}
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	40007800 	.word	0x40007800
 8007fd0:	20000d90 	.word	0x20000d90
 8007fd4:	20000e66 	.word	0x20000e66
 8007fd8:	20001754 	.word	0x20001754

08007fdc <HAL_UART_TxCpltCallback>:
/****************************************************************************/
/*	Overview	:	Tx Call Back 함수											*/
/*	Return value:	void													*/
/****************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART7)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a06      	ldr	r2, [pc, #24]	@ (8008004 <HAL_UART_TxCpltCallback+0x28>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d105      	bne.n	8007ffa <HAL_UART_TxCpltCallback+0x1e>
	{
		//RS485 송신 완료 후 수신 모드로 전환
		SEL_485_1_RE();
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ff4:	4804      	ldr	r0, [pc, #16]	@ (8008008 <HAL_UART_TxCpltCallback+0x2c>)
 8007ff6:	f004 ff63 	bl	800cec0 <HAL_GPIO_WritePin>
	}
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	40007800 	.word	0x40007800
 8008008:	40021000 	.word	0x40021000

0800800c <FUN_RS485_Rx_Data_Check>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_RS485_Rx_Data_Check(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
	// STX 체크
	if(RS485.Uart7_Rx_Buffer[F_STX] != FRAME_STX)
 8008010:	4b39      	ldr	r3, [pc, #228]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008012:	f893 30d7 	ldrb.w	r3, [r3, #215]	@ 0xd7
 8008016:	2b7e      	cmp	r3, #126	@ 0x7e
 8008018:	d001      	beq.n	800801e <FUN_RS485_Rx_Data_Check+0x12>
	{
		FUN_RS485_Rx_Buffer_Reset();
 800801a:	f000 f86f 	bl	80080fc <FUN_RS485_Rx_Buffer_Reset>
	}

	if(RS485.Uart7_Rx_Cnt > F_MSG_ID)
 800801e:	4b36      	ldr	r3, [pc, #216]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008020:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 8008024:	2b01      	cmp	r3, #1
 8008026:	d906      	bls.n	8008036 <FUN_RS485_Rx_Data_Check+0x2a>
	{
		if(RS485.Uart7_Rx_Buffer[F_MSG_ID] > 0x06)
 8008028:	4b33      	ldr	r3, [pc, #204]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 800802a:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 800802e:	2b06      	cmp	r3, #6
 8008030:	d901      	bls.n	8008036 <FUN_RS485_Rx_Data_Check+0x2a>
		{
			FUN_RS485_Rx_Buffer_Reset();
 8008032:	f000 f863 	bl	80080fc <FUN_RS485_Rx_Buffer_Reset>
		}
	}

	// RX ID 체크
	if(RS485.Uart7_Rx_Cnt > F_RX_ID)
 8008036:	4b30      	ldr	r3, [pc, #192]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008038:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 800803c:	2b03      	cmp	r3, #3
 800803e:	d906      	bls.n	800804e <FUN_RS485_Rx_Data_Check+0x42>
	{
		if(RS485.Uart7_Rx_Buffer[F_RX_ID] != LWS_CTLR_A)
 8008040:	4b2d      	ldr	r3, [pc, #180]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008042:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8008046:	2b20      	cmp	r3, #32
 8008048:	d001      	beq.n	800804e <FUN_RS485_Rx_Data_Check+0x42>
		{
			FUN_RS485_Rx_Buffer_Reset();
 800804a:	f000 f857 	bl	80080fc <FUN_RS485_Rx_Buffer_Reset>
		}
	}

	// LENGTH 계산
	if(RS485.Uart7_Rx_Cnt > F_DATA_LEN_1)
 800804e:	4b2a      	ldr	r3, [pc, #168]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008050:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 8008054:	2b06      	cmp	r3, #6
 8008056:	d91e      	bls.n	8008096 <FUN_RS485_Rx_Data_Check+0x8a>
	{
		RS485.Uart7_Rx_Check_Flag = 1;
 8008058:	4b27      	ldr	r3, [pc, #156]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 800805a:	2201      	movs	r2, #1
 800805c:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
		RS485.Uart7_Rx_Data_Length = ((uint16_t)RS485.Uart7_Rx_Buffer[F_DATA_LEN_0]) << 8;
 8008060:	4b25      	ldr	r3, [pc, #148]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008062:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	b29a      	uxth	r2, r3
 800806a:	4b23      	ldr	r3, [pc, #140]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 800806c:	f8a3 24c0 	strh.w	r2, [r3, #1216]	@ 0x4c0
		RS485.Uart7_Rx_Data_Length |= ((uint16_t)RS485.Uart7_Rx_Buffer[F_DATA_LEN_1]);
 8008070:	4b21      	ldr	r3, [pc, #132]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008072:	f8b3 34c0 	ldrh.w	r3, [r3, #1216]	@ 0x4c0
 8008076:	4a20      	ldr	r2, [pc, #128]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008078:	f892 20dd 	ldrb.w	r2, [r2, #221]	@ 0xdd
 800807c:	4313      	orrs	r3, r2
 800807e:	b29a      	uxth	r2, r3
 8008080:	4b1d      	ldr	r3, [pc, #116]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008082:	f8a3 24c0 	strh.w	r2, [r3, #1216]	@ 0x4c0
		RS485.Uart7_Rx_Frame_Length = F_HEAD_SIZE + RS485.Uart7_Rx_Data_Length + 2;		// Head(8) + Data + Checksum + ETX
 8008086:	4b1c      	ldr	r3, [pc, #112]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008088:	f8b3 34c0 	ldrh.w	r3, [r3, #1216]	@ 0x4c0
 800808c:	330a      	adds	r3, #10
 800808e:	b29a      	uxth	r2, r3
 8008090:	4b19      	ldr	r3, [pc, #100]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008092:	f8a3 24c2 	strh.w	r2, [r3, #1218]	@ 0x4c2
	}

	// ETX 체크
	if(RS485.Uart7_Rx_Check_Flag == 1)
 8008096:	4b18      	ldr	r3, [pc, #96]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 8008098:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800809c:	2b01      	cmp	r3, #1
 800809e:	d129      	bne.n	80080f4 <FUN_RS485_Rx_Data_Check+0xe8>
	{
		if(RS485.Uart7_Rx_Cnt == RS485.Uart7_Rx_Frame_Length)
 80080a0:	4b15      	ldr	r3, [pc, #84]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 80080a2:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 80080a6:	461a      	mov	r2, r3
 80080a8:	4b13      	ldr	r3, [pc, #76]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 80080aa:	f8b3 34c2 	ldrh.w	r3, [r3, #1218]	@ 0x4c2
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d111      	bne.n	80080d6 <FUN_RS485_Rx_Data_Check+0xca>
		{
			RS485.Uart7_Rx_Check_Flag = 0;
 80080b2:	4b11      	ldr	r3, [pc, #68]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			if(RS485.Uart7_Rx_Buffer[RS485.Uart7_Rx_Cnt - 1] == FRAME_ETX)
 80080ba:	4b0f      	ldr	r3, [pc, #60]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 80080bc:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 80080c0:	3b01      	subs	r3, #1
 80080c2:	4a0d      	ldr	r2, [pc, #52]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 80080c4:	4413      	add	r3, r2
 80080c6:	f893 30d7 	ldrb.w	r3, [r3, #215]	@ 0xd7
 80080ca:	2be7      	cmp	r3, #231	@ 0xe7
 80080cc:	d103      	bne.n	80080d6 <FUN_RS485_Rx_Data_Check+0xca>
			{
				RS485.Uart7_Rcv_Cplt_Flag = 1;
 80080ce:	4b0a      	ldr	r3, [pc, #40]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			}
		}

		if(RS485.Uart7_Rx_Cnt > RS485.Uart7_Rx_Frame_Length)
 80080d6:	4b08      	ldr	r3, [pc, #32]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 80080d8:	f893 34c4 	ldrb.w	r3, [r3, #1220]	@ 0x4c4
 80080dc:	461a      	mov	r2, r3
 80080de:	4b06      	ldr	r3, [pc, #24]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 80080e0:	f8b3 34c2 	ldrh.w	r3, [r3, #1218]	@ 0x4c2
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d905      	bls.n	80080f4 <FUN_RS485_Rx_Data_Check+0xe8>
		{
			RS485.Uart7_Rx_Check_Flag = 0;
 80080e8:	4b03      	ldr	r3, [pc, #12]	@ (80080f8 <FUN_RS485_Rx_Data_Check+0xec>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			FUN_RS485_Rx_Buffer_Reset();
 80080f0:	f000 f804 	bl	80080fc <FUN_RS485_Rx_Buffer_Reset>
		}
	}
}
 80080f4:	bf00      	nop
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20000d90 	.word	0x20000d90

080080fc <FUN_RS485_Rx_Buffer_Reset>:
/****************************************************************************/
/*	Overview	:	Rx Data Error시 Buffer Reset								*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_RS485_Rx_Buffer_Reset(void)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 8; i++)
 8008102:	2300      	movs	r3, #0
 8008104:	71fb      	strb	r3, [r7, #7]
 8008106:	e008      	b.n	800811a <FUN_RS485_Rx_Buffer_Reset+0x1e>
	{
		RS485.Uart7_Rx_Buffer[i] = 0;
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	4a0a      	ldr	r2, [pc, #40]	@ (8008134 <FUN_RS485_Rx_Buffer_Reset+0x38>)
 800810c:	4413      	add	r3, r2
 800810e:	2200      	movs	r2, #0
 8008110:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
	for(uint8_t i = 0; i < 8; i++)
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	3301      	adds	r3, #1
 8008118:	71fb      	strb	r3, [r7, #7]
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	2b07      	cmp	r3, #7
 800811e:	d9f3      	bls.n	8008108 <FUN_RS485_Rx_Buffer_Reset+0xc>
	}
	RS485.Uart7_Rx_Cnt = 0;
 8008120:	4b04      	ldr	r3, [pc, #16]	@ (8008134 <FUN_RS485_Rx_Buffer_Reset+0x38>)
 8008122:	2200      	movs	r2, #0
 8008124:	f883 24c4 	strb.w	r2, [r3, #1220]	@ 0x4c4
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	20000d90 	.word	0x20000d90

08008138 <FUN_RS485_Rx_Data_Save>:
/****************************************************************************/
/*	Overview	:	수신된 데이터 저장(FUN_Control_Routine 부분)					*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_RS485_Rx_Data_Save(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
	if(RS485.Uart7_Rcv_Cplt_Flag == 1)
 800813c:	4b0d      	ldr	r3, [pc, #52]	@ (8008174 <FUN_RS485_Rx_Data_Save+0x3c>)
 800813e:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8008142:	2b01      	cmp	r3, #1
 8008144:	d105      	bne.n	8008152 <FUN_RS485_Rx_Data_Save+0x1a>
	{
		RS485.Uart7_Rcv_Cplt_Flag = 0;
 8008146:	4b0b      	ldr	r3, [pc, #44]	@ (8008174 <FUN_RS485_Rx_Data_Save+0x3c>)
 8008148:	2200      	movs	r2, #0
 800814a:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5

		FUN_RS485_Rx_Data_Process();
 800814e:	f000 f815 	bl	800817c <FUN_RS485_Rx_Data_Process>
	}

	// Interrupt Error시에 강제 초기화, Uart Register참고
	if((huart7.Instance->CR3 & 0x0001) == 0x0001)
 8008152:	4b09      	ldr	r3, [pc, #36]	@ (8008178 <FUN_RS485_Rx_Data_Save+0x40>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b01      	cmp	r3, #1
 800815e:	d107      	bne.n	8008170 <FUN_RS485_Rx_Data_Save+0x38>
	{
		(huart7.Instance->CR3)^=1;
 8008160:	4b05      	ldr	r3, [pc, #20]	@ (8008178 <FUN_RS485_Rx_Data_Save+0x40>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	4b04      	ldr	r3, [pc, #16]	@ (8008178 <FUN_RS485_Rx_Data_Save+0x40>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f082 0201 	eor.w	r2, r2, #1
 800816e:	609a      	str	r2, [r3, #8]
	}
}
 8008170:	bf00      	nop
 8008172:	bd80      	pop	{r7, pc}
 8008174:	20000d90 	.word	0x20000d90
 8008178:	20001754 	.word	0x20001754

0800817c <FUN_RS485_Rx_Data_Process>:
/****************************************************************************/
/*	Overview	:	수신 데이터 처리												*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_RS485_Rx_Data_Process(void)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	af00      	add	r7, sp, #0
	FUN_RS485_Process_Buffer_Init();
 8008180:	f000 f818 	bl	80081b4 <FUN_RS485_Process_Buffer_Init>

	memcpy(RS485.Uart7_Data_Buffer, RS485.Uart7_Rx_Buffer, RS485.Uart7_Rx_Frame_Length);
 8008184:	4b08      	ldr	r3, [pc, #32]	@ (80081a8 <FUN_RS485_Rx_Data_Process+0x2c>)
 8008186:	f8b3 34c2 	ldrh.w	r3, [r3, #1218]	@ 0x4c2
 800818a:	461a      	mov	r2, r3
 800818c:	4907      	ldr	r1, [pc, #28]	@ (80081ac <FUN_RS485_Rx_Data_Process+0x30>)
 800818e:	4808      	ldr	r0, [pc, #32]	@ (80081b0 <FUN_RS485_Rx_Data_Process+0x34>)
 8008190:	f009 fe48 	bl	8011e24 <memcpy>

	Fun_RS485_Rx_Buffer_Init();
 8008194:	f000 f830 	bl	80081f8 <Fun_RS485_Rx_Buffer_Init>

	Fun_RS485_Rx_Frame_Process(RS485.Uart7_Rx_Frame_Length);
 8008198:	4b03      	ldr	r3, [pc, #12]	@ (80081a8 <FUN_RS485_Rx_Data_Process+0x2c>)
 800819a:	f8b3 34c2 	ldrh.w	r3, [r3, #1218]	@ 0x4c2
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f84e 	bl	8008240 <Fun_RS485_Rx_Frame_Process>
}
 80081a4:	bf00      	nop
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20000d90 	.word	0x20000d90
 80081ac:	20000e67 	.word	0x20000e67
 80081b0:	200010bf 	.word	0x200010bf

080081b4 <FUN_RS485_Process_Buffer_Init>:
/****************************************************************************/
/*	Overview	:	데이터 처리 버퍼 초기화										*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_RS485_Process_Buffer_Init(void)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
	for(volatile uint16_t i = 0; i < RX_BUF_LENGTH; i++)
 80081ba:	2300      	movs	r3, #0
 80081bc:	80fb      	strh	r3, [r7, #6]
 80081be:	e00c      	b.n	80081da <FUN_RS485_Process_Buffer_Init+0x26>
	{
		RS485.Uart7_Data_Buffer[i] = 0;
 80081c0:	88fb      	ldrh	r3, [r7, #6]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	461a      	mov	r2, r3
 80081c6:	4b0b      	ldr	r3, [pc, #44]	@ (80081f4 <FUN_RS485_Process_Buffer_Init+0x40>)
 80081c8:	4413      	add	r3, r2
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 232f 	strb.w	r2, [r3, #815]	@ 0x32f
	for(volatile uint16_t i = 0; i < RX_BUF_LENGTH; i++)
 80081d0:	88fb      	ldrh	r3, [r7, #6]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	3301      	adds	r3, #1
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	80fb      	strh	r3, [r7, #6]
 80081da:	88fb      	ldrh	r3, [r7, #6]
 80081dc:	b29b      	uxth	r3, r3
 80081de:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80081e2:	d3ed      	bcc.n	80081c0 <FUN_RS485_Process_Buffer_Init+0xc>
	}
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000d90 	.word	0x20000d90

080081f8 <Fun_RS485_Rx_Buffer_Init>:
/****************************************************************************/
/*	Overview	:	수신 버퍼 초기화												*/
/*	Return value:	void													*/
/****************************************************************************/
void Fun_RS485_Rx_Buffer_Init(void)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
	for(volatile uint16_t i = 0; i < RX_BUF_LENGTH; i++)
 80081fe:	2300      	movs	r3, #0
 8008200:	80fb      	strh	r3, [r7, #6]
 8008202:	e00c      	b.n	800821e <Fun_RS485_Rx_Buffer_Init+0x26>
	{
		RS485.Uart7_Rx_Buffer[i] = 0;
 8008204:	88fb      	ldrh	r3, [r7, #6]
 8008206:	b29b      	uxth	r3, r3
 8008208:	461a      	mov	r2, r3
 800820a:	4b0c      	ldr	r3, [pc, #48]	@ (800823c <Fun_RS485_Rx_Buffer_Init+0x44>)
 800820c:	4413      	add	r3, r2
 800820e:	2200      	movs	r2, #0
 8008210:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
	for(volatile uint16_t i = 0; i < RX_BUF_LENGTH; i++)
 8008214:	88fb      	ldrh	r3, [r7, #6]
 8008216:	b29b      	uxth	r3, r3
 8008218:	3301      	adds	r3, #1
 800821a:	b29b      	uxth	r3, r3
 800821c:	80fb      	strh	r3, [r7, #6]
 800821e:	88fb      	ldrh	r3, [r7, #6]
 8008220:	b29b      	uxth	r3, r3
 8008222:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8008226:	d3ed      	bcc.n	8008204 <Fun_RS485_Rx_Buffer_Init+0xc>
	}
	RS485.Uart7_Rx_Cnt = 0;
 8008228:	4b04      	ldr	r3, [pc, #16]	@ (800823c <Fun_RS485_Rx_Buffer_Init+0x44>)
 800822a:	2200      	movs	r2, #0
 800822c:	f883 24c4 	strb.w	r2, [r3, #1220]	@ 0x4c4
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	20000d90 	.word	0x20000d90

08008240 <Fun_RS485_Rx_Frame_Process>:
/****************************************************************************/
/*	Overview	:	수신 데이터 처리												*/
/*	Return value:	void													*/
/****************************************************************************/
void Fun_RS485_Rx_Frame_Process(uint16_t Data_Size)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	80fb      	strh	r3, [r7, #6]
	uint8_t Check_Sum = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]
	uint8_t MSG_Id = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	72fb      	strb	r3, [r7, #11]
	uint8_t Cmd_Code = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	72bb      	strb	r3, [r7, #10]

	LED.GUI_Check_Cnt = 0;
 8008256:	4b40      	ldr	r3, [pc, #256]	@ (8008358 <Fun_RS485_Rx_Frame_Process+0x118>)
 8008258:	2200      	movs	r2, #0
 800825a:	705a      	strb	r2, [r3, #1]

	// Send Checksum data = 1부터 size-2까지 (Sum, Frame 제외)
	// Received Checksum data = 1부터 size-2까지 Sum
	for(uint16_t i = 1; i < Data_Size - 2; i++)
 800825c:	2301      	movs	r3, #1
 800825e:	81bb      	strh	r3, [r7, #12]
 8008260:	e00a      	b.n	8008278 <Fun_RS485_Rx_Frame_Process+0x38>
	{
		Check_Sum = Check_Sum + RS485.Uart7_Data_Buffer[i];
 8008262:	89bb      	ldrh	r3, [r7, #12]
 8008264:	4a3d      	ldr	r2, [pc, #244]	@ (800835c <Fun_RS485_Rx_Frame_Process+0x11c>)
 8008266:	4413      	add	r3, r2
 8008268:	f893 232f 	ldrb.w	r2, [r3, #815]	@ 0x32f
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	4413      	add	r3, r2
 8008270:	73fb      	strb	r3, [r7, #15]
	for(uint16_t i = 1; i < Data_Size - 2; i++)
 8008272:	89bb      	ldrh	r3, [r7, #12]
 8008274:	3301      	adds	r3, #1
 8008276:	81bb      	strh	r3, [r7, #12]
 8008278:	89ba      	ldrh	r2, [r7, #12]
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	3b02      	subs	r3, #2
 800827e:	429a      	cmp	r2, r3
 8008280:	dbef      	blt.n	8008262 <Fun_RS485_Rx_Frame_Process+0x22>
	}

	// Check SUM OK
	if((Check_Sum & 0xFF) == RS485.Uart7_Data_Buffer[Data_Size - 2])
 8008282:	88fb      	ldrh	r3, [r7, #6]
 8008284:	3b02      	subs	r3, #2
 8008286:	4a35      	ldr	r2, [pc, #212]	@ (800835c <Fun_RS485_Rx_Frame_Process+0x11c>)
 8008288:	4413      	add	r3, r2
 800828a:	f893 332f 	ldrb.w	r3, [r3, #815]	@ 0x32f
 800828e:	7bfa      	ldrb	r2, [r7, #15]
 8008290:	429a      	cmp	r2, r3
 8008292:	d15c      	bne.n	800834e <Fun_RS485_Rx_Frame_Process+0x10e>
	{
		// MSG ID 체크
		MSG_Id = RS485.Uart7_Data_Buffer[F_MSG_ID];
 8008294:	4b31      	ldr	r3, [pc, #196]	@ (800835c <Fun_RS485_Rx_Frame_Process+0x11c>)
 8008296:	f893 3330 	ldrb.w	r3, [r3, #816]	@ 0x330
 800829a:	72fb      	strb	r3, [r7, #11]

		// Cmd Code 체크
		Cmd_Code = RS485.Uart7_Data_Buffer[F_CMD_CODE];
 800829c:	4b2f      	ldr	r3, [pc, #188]	@ (800835c <Fun_RS485_Rx_Frame_Process+0x11c>)
 800829e:	f893 3333 	ldrb.w	r3, [r3, #819]	@ 0x333
 80082a2:	72bb      	strb	r3, [r7, #10]

		switch(MSG_Id)
 80082a4:	7afb      	ldrb	r3, [r7, #11]
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d04d      	beq.n	8008346 <Fun_RS485_Rx_Frame_Process+0x106>
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	dc4e      	bgt.n	800834c <Fun_RS485_Rx_Frame_Process+0x10c>
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d002      	beq.n	80082b8 <Fun_RS485_Rx_Frame_Process+0x78>
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d044      	beq.n	8008340 <Fun_RS485_Rx_Frame_Process+0x100>
			// 파라미터 읽기
			case MSG_SYS_PARAREQ:
				Fun_RS485_Parameter_Read();
				break;
			default:
				break;
 80082b6:	e049      	b.n	800834c <Fun_RS485_Rx_Frame_Process+0x10c>
				switch(Cmd_Code)
 80082b8:	7abb      	ldrb	r3, [r7, #10]
 80082ba:	3b03      	subs	r3, #3
 80082bc:	2b09      	cmp	r3, #9
 80082be:	d83e      	bhi.n	800833e <Fun_RS485_Rx_Frame_Process+0xfe>
 80082c0:	a201      	add	r2, pc, #4	@ (adr r2, 80082c8 <Fun_RS485_Rx_Frame_Process+0x88>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082f1 	.word	0x080082f1
 80082cc:	080082f9 	.word	0x080082f9
 80082d0:	08008301 	.word	0x08008301
 80082d4:	08008307 	.word	0x08008307
 80082d8:	0800830f 	.word	0x0800830f
 80082dc:	08008317 	.word	0x08008317
 80082e0:	0800831f 	.word	0x0800831f
 80082e4:	08008327 	.word	0x08008327
 80082e8:	0800832f 	.word	0x0800832f
 80082ec:	08008337 	.word	0x08008337
						Fun_RS485_Parameter_Write(RS485.Uart7_Data_Buffer);
 80082f0:	481b      	ldr	r0, [pc, #108]	@ (8008360 <Fun_RS485_Rx_Frame_Process+0x120>)
 80082f2:	f000 f837 	bl	8008364 <Fun_RS485_Parameter_Write>
						break;
 80082f6:	e023      	b.n	8008340 <Fun_RS485_Rx_Frame_Process+0x100>
						Fun_RS485_HILS_Start_Stop(RS485.Uart7_Data_Buffer);
 80082f8:	4819      	ldr	r0, [pc, #100]	@ (8008360 <Fun_RS485_Rx_Frame_Process+0x120>)
 80082fa:	f000 f887 	bl	800840c <Fun_RS485_HILS_Start_Stop>
						break;
 80082fe:	e01f      	b.n	8008340 <Fun_RS485_Rx_Frame_Process+0x100>
						Fun_RS485_HILS_Init_Read();
 8008300:	f000 f8d6 	bl	80084b0 <Fun_RS485_HILS_Init_Read>
						break;
 8008304:	e01c      	b.n	8008340 <Fun_RS485_Rx_Frame_Process+0x100>
						Fun_RS485_HILS_Init_Write(RS485.Uart7_Data_Buffer);
 8008306:	4816      	ldr	r0, [pc, #88]	@ (8008360 <Fun_RS485_Rx_Frame_Process+0x120>)
 8008308:	f000 fa0a 	bl	8008720 <Fun_RS485_HILS_Init_Write>
						break;
 800830c:	e018      	b.n	8008340 <Fun_RS485_Rx_Frame_Process+0x100>
						Fun_RS485_HILS_Output_Set(RS485.Uart7_Data_Buffer);
 800830e:	4814      	ldr	r0, [pc, #80]	@ (8008360 <Fun_RS485_Rx_Frame_Process+0x120>)
 8008310:	f000 fa2e 	bl	8008770 <Fun_RS485_HILS_Output_Set>
						break;
 8008314:	e014      	b.n	8008340 <Fun_RS485_Rx_Frame_Process+0x100>
						Fun_RS485_Gripper_Output_Set(RS485.Uart7_Data_Buffer);
 8008316:	4812      	ldr	r0, [pc, #72]	@ (8008360 <Fun_RS485_Rx_Frame_Process+0x120>)
 8008318:	f000 fbaa 	bl	8008a70 <Fun_RS485_Gripper_Output_Set>
						break;
 800831c:	e010      	b.n	8008340 <Fun_RS485_Rx_Frame_Process+0x100>
						Fun_RS485_Oil_Output_Set(RS485.Uart7_Data_Buffer);
 800831e:	4810      	ldr	r0, [pc, #64]	@ (8008360 <Fun_RS485_Rx_Frame_Process+0x120>)
 8008320:	f000 fc0c 	bl	8008b3c <Fun_RS485_Oil_Output_Set>
						break;
 8008324:	e00c      	b.n	8008340 <Fun_RS485_Rx_Frame_Process+0x100>
						Fun_RS485_Cutter_Output_Set(RS485.Uart7_Data_Buffer);
 8008326:	480e      	ldr	r0, [pc, #56]	@ (8008360 <Fun_RS485_Rx_Frame_Process+0x120>)
 8008328:	f000 fc54 	bl	8008bd4 <Fun_RS485_Cutter_Output_Set>
						break;
 800832c:	e008      	b.n	8008340 <Fun_RS485_Rx_Frame_Process+0x100>
						Fun_RS485_Cleaner_Output_Set(RS485.Uart7_Data_Buffer);
 800832e:	480c      	ldr	r0, [pc, #48]	@ (8008360 <Fun_RS485_Rx_Frame_Process+0x120>)
 8008330:	f000 fc74 	bl	8008c1c <Fun_RS485_Cleaner_Output_Set>
						break;
 8008334:	e004      	b.n	8008340 <Fun_RS485_Rx_Frame_Process+0x100>
						Fun_RS485_Emergency_Output_Set(RS485.Uart7_Data_Buffer);
 8008336:	480a      	ldr	r0, [pc, #40]	@ (8008360 <Fun_RS485_Rx_Frame_Process+0x120>)
 8008338:	f000 fc94 	bl	8008c64 <Fun_RS485_Emergency_Output_Set>
						break;
 800833c:	e000      	b.n	8008340 <Fun_RS485_Rx_Frame_Process+0x100>
						break;
 800833e:	bf00      	nop
				Fun_RS485_Data_Response();
 8008340:	f000 fd96 	bl	8008e70 <Fun_RS485_Data_Response>
				break;
 8008344:	e003      	b.n	800834e <Fun_RS485_Rx_Frame_Process+0x10e>
				Fun_RS485_Parameter_Read();
 8008346:	f001 facf 	bl	80098e8 <Fun_RS485_Parameter_Read>
				break;
 800834a:	e000      	b.n	800834e <Fun_RS485_Rx_Frame_Process+0x10e>
				break;
 800834c:	bf00      	nop
		}
	}
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20000d8c 	.word	0x20000d8c
 800835c:	20000d90 	.word	0x20000d90
 8008360:	200010bf 	.word	0x200010bf

08008364 <Fun_RS485_Parameter_Write>:
/****************************************************************************/
/*	Overview	:	Parameter 쓰기											*/
/*	Return value:	HILS_INIT_WRITE											*/
/****************************************************************************/
void Fun_RS485_Parameter_Write(uint8_t *Buffer)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
	uint32_t Dummy_Int = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]
	float *Dummy_Float;

	for(uint8_t i = 0; i < PARAMETER_WRITE_LENGTH; i++)			// 65EA
 8008370:	2300      	movs	r3, #0
 8008372:	75fb      	strb	r3, [r7, #23]
 8008374:	e039      	b.n	80083ea <Fun_RS485_Parameter_Write+0x86>
	{
		Dummy_Int = ((uint32_t)Buffer[F_DATA+7 + (i * 4)] << 24) & 0xFF000000;
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	330f      	adds	r3, #15
 800837c:	461a      	mov	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	061b      	lsls	r3, r3, #24
 8008386:	60fb      	str	r3, [r7, #12]
		Dummy_Int |= ((uint32_t)Buffer[F_DATA+7 + (i * 4) + 1] << 16) & 0x00FF0000;
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	3310      	adds	r3, #16
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	4413      	add	r3, r2
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	041b      	lsls	r3, r3, #16
 8008396:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4313      	orrs	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]
		Dummy_Int |= ((uint32_t)Buffer[F_DATA+7 + (i * 4) + 2] << 8) & 0x0000FF00;
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	3311      	adds	r3, #17
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	4413      	add	r3, r2
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]
		Dummy_Int |= (uint32_t)Buffer[F_DATA+7 + (i * 4) + 3] & 0x000000FF;
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	3312      	adds	r3, #18
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	4413      	add	r3, r2
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

		Dummy_Float = (float * ) & Dummy_Int;
 80083ca:	f107 030c 	add.w	r3, r7, #12
 80083ce:	613b      	str	r3, [r7, #16]

		RS485.LwsA_Parameter[i] = *Dummy_Float;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	6812      	ldr	r2, [r2, #0]
 80083d6:	490b      	ldr	r1, [pc, #44]	@ (8008404 <Fun_RS485_Parameter_Write+0xa0>)
 80083d8:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	440b      	add	r3, r1
 80083e0:	3304      	adds	r3, #4
 80083e2:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < PARAMETER_WRITE_LENGTH; i++)			// 65EA
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	3301      	adds	r3, #1
 80083e8:	75fb      	strb	r3, [r7, #23]
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	2b13      	cmp	r3, #19
 80083ee:	d9c2      	bls.n	8008376 <Fun_RS485_Parameter_Write+0x12>
	}

	EEPROM.EEPROM_Save_Flag = 1;
 80083f0:	4b05      	ldr	r3, [pc, #20]	@ (8008408 <Fun_RS485_Parameter_Write+0xa4>)
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320

	// ACK 응답
	Fun_RS485_Response_ACK();
 80083f8:	f000 fc58 	bl	8008cac <Fun_RS485_Response_ACK>
}
 80083fc:	bf00      	nop
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	20000d90 	.word	0x20000d90
 8008408:	200002d4 	.word	0x200002d4

0800840c <Fun_RS485_HILS_Start_Stop>:
/****************************************************************************/
/*	Overview	:	HILS 연동 시작 종료 결정 Cmd									*/
/*	Return value:	void													*/
/****************************************************************************/
void Fun_RS485_HILS_Start_Stop(uint8_t *Buffer)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
	// HILS 초기 구동을 위해 강제 OFF
	FUN_GPO_Output(OUTPUT_PORT_NUM_4, 0);					// 비상정지신호 동력공급장치
 8008414:	2100      	movs	r1, #0
 8008416:	2004      	movs	r0, #4
 8008418:	f7fb f9d4 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_25, 0);					// 비상정지신호 윈치조립체
 800841c:	2100      	movs	r1, #0
 800841e:	2019      	movs	r0, #25
 8008420:	f7fb f9d0 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_43,	0);					// 투인양장치 : 압력스위치(세척기)
 8008424:	2100      	movs	r1, #0
 8008426:	202b      	movs	r0, #43	@ 0x2b
 8008428:	f7fb f9cc 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_10,	0);					// 동력공급장치 : 압력스위치(축압기 부족1)
 800842c:	2100      	movs	r1, #0
 800842e:	200a      	movs	r0, #10
 8008430:	f7fb f9c8 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_11,	0);					// 동력공급장치 : 압력스위치(축압기 부족2)
 8008434:	2100      	movs	r1, #0
 8008436:	200b      	movs	r0, #11
 8008438:	f7fb f9c4 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_12,	0);					// 동력공급장치 : 압력스위치(축압기 충전완료)
 800843c:	2100      	movs	r1, #0
 800843e:	200c      	movs	r0, #12
 8008440:	f7fb f9c0 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_8,	0);					// 동력공급장치 : 압력스위치(수냉식냉각기)
 8008444:	2100      	movs	r1, #0
 8008446:	2008      	movs	r0, #8
 8008448:	f7fb f9bc 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_1,	0);					// 동력공급장치 : 레벨스위치1(저유기조립체)
 800844c:	2100      	movs	r1, #0
 800844e:	2001      	movs	r0, #1
 8008450:	f7fb f9b8 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_2,	0);					// 동력공급장치 : 레벨스위치2(저유기조립체)
 8008454:	2100      	movs	r1, #0
 8008456:	2002      	movs	r0, #2
 8008458:	f7fb f9b4 	bl	80037c4 <FUN_GPO_Output>
	FUN_GPO_Output(OUTPUT_PORT_NUM_3,	0);					// 동력공급장치 : 레벨스위치3(저유기조립체)
 800845c:	2100      	movs	r1, #0
 800845e:	2003      	movs	r0, #3
 8008460:	f7fb f9b0 	bl	80037c4 <FUN_GPO_Output>
	FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH7, 12);	//그림퍼 LVDT1
 8008464:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 8008468:	2107      	movs	r1, #7
 800846a:	2002      	movs	r0, #2
 800846c:	f7f9 f97a 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH2, 12);	//그림퍼 LVDT2
 8008470:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 8008474:	2102      	movs	r1, #2
 8008476:	2002      	movs	r0, #2
 8008478:	f7f9 f974 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH4, 12);	//그림퍼 LVDT3
 800847c:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 8008480:	2104      	movs	r1, #4
 8008482:	2002      	movs	r0, #2
 8008484:	f7f9 f96e 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH2, 6);	//저유기 온도센서
 8008488:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 800848c:	2102      	movs	r1, #2
 800848e:	2001      	movs	r0, #1
 8008490:	f7f9 f968 	bl	8001764 <FUN_DAC_Converter_set_dac_code>
	RS485.HILS_Start_Stop_Cmd = (uint8_t)Buffer[8] & 0xFF;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	7a1a      	ldrb	r2, [r3, #8]
 8008498:	4b04      	ldr	r3, [pc, #16]	@ (80084ac <Fun_RS485_HILS_Start_Stop+0xa0>)
 800849a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

	// ACK 응답
	Fun_RS485_Response_ACK();
 800849e:	f000 fc05 	bl	8008cac <Fun_RS485_Response_ACK>
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000d90 	.word	0x20000d90

080084b0 <Fun_RS485_HILS_Init_Read>:
/****************************************************************************/
/*	Overview	:	HILS 초기값 읽기											*/
/*	Return value:	HILS_INIT_READ											*/
/****************************************************************************/
void Fun_RS485_HILS_Init_Read(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b0d0      	sub	sp, #320	@ 0x140
 80084b4:	af00      	add	r7, sp, #0
	//Checksum 이전까지 Tx Buffer 크기
	uint16_t Size = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	//최종 Tx Buffer 크기
	uint16_t Count = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t Check_Sum = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	uint8_t Tx_Buffer[TX_BUF_LENGTH];

	// SEQ_NO (1 ~ 100)
	if(RS485.Uart7_HILS_Init_SEQ_Num == 100)
 80084c8:	4b77      	ldr	r3, [pc, #476]	@ (80086a8 <Fun_RS485_HILS_Init_Read+0x1f8>)
 80084ca:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 80084ce:	2b64      	cmp	r3, #100	@ 0x64
 80084d0:	d103      	bne.n	80084da <Fun_RS485_HILS_Init_Read+0x2a>
	{
		RS485.Uart7_HILS_Init_SEQ_Num = 0;
 80084d2:	4b75      	ldr	r3, [pc, #468]	@ (80086a8 <Fun_RS485_HILS_Init_Read+0x1f8>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 24ca 	strb.w	r2, [r3, #1226]	@ 0x4ca
	}
	Tx_Buffer[F_SEQ_NO] = ++RS485.Uart7_HILS_Init_SEQ_Num;
 80084da:	4b73      	ldr	r3, [pc, #460]	@ (80086a8 <Fun_RS485_HILS_Init_Read+0x1f8>)
 80084dc:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 80084e0:	3301      	adds	r3, #1
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	4b70      	ldr	r3, [pc, #448]	@ (80086a8 <Fun_RS485_HILS_Init_Read+0x1f8>)
 80084e6:	f883 24ca 	strb.w	r2, [r3, #1226]	@ 0x4ca
 80084ea:	4b6f      	ldr	r3, [pc, #444]	@ (80086a8 <Fun_RS485_HILS_Init_Read+0x1f8>)
 80084ec:	f893 24ca 	ldrb.w	r2, [r3, #1226]	@ 0x4ca
 80084f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80084f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80084f8:	71da      	strb	r2, [r3, #7]

	// MSG_ID{
	Tx_Buffer[F_MSG_ID] = MSG_CTRL_REP;
 80084fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80084fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008502:	2204      	movs	r2, #4
 8008504:	705a      	strb	r2, [r3, #1]
	// TX ID
	Tx_Buffer[F_TX_ID] = LWS_CTLR_A;
 8008506:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800850a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800850e:	2220      	movs	r2, #32
 8008510:	709a      	strb	r2, [r3, #2]
	// RX_ID
	Tx_Buffer[F_RX_ID] = LWS_GUI;
 8008512:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008516:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800851a:	2210      	movs	r2, #16
 800851c:	70da      	strb	r2, [r3, #3]
	// CMD CODE
	Tx_Buffer[F_CMD_CODE] = HILS_INIT_RESPONSE;
 800851e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008522:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008526:	2267      	movs	r2, #103	@ 0x67
 8008528:	711a      	strb	r2, [r3, #4]
	// DATA_LEN
	Tx_Buffer[F_DATA_LEN_0] = (uint8_t)((CR_HINIT_SIZE * 4) >> 8);
 800852a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800852e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008532:	2200      	movs	r2, #0
 8008534:	715a      	strb	r2, [r3, #5]
	Tx_Buffer[F_DATA_LEN_1] = (uint8_t)((CR_HINIT_SIZE * 4) & 0xFF);
 8008536:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800853a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800853e:	2238      	movs	r2, #56	@ 0x38
 8008540:	719a      	strb	r2, [r3, #6]

	uint32_t *buf = (uint32_t *)&RS485.LwsA_HILS_Init_Value;
 8008542:	4b5a      	ldr	r3, [pc, #360]	@ (80086ac <Fun_RS485_HILS_Init_Read+0x1fc>)
 8008544:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	for(uint16_t i = 0; i < CR_HINIT_SIZE; i++)
 8008548:	2300      	movs	r3, #0
 800854a:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 800854e:	e04e      	b.n	80085ee <Fun_RS485_HILS_Init_Read+0x13e>
	{
		Tx_Buffer[F_HEAD_SIZE + i*4]	= (uint8_t)( (*(buf + i) >> 24) & 0xFF );
 8008550:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800855a:	4413      	add	r3, r2
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	0e1a      	lsrs	r2, r3, #24
 8008560:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8008564:	3302      	adds	r3, #2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	b2d1      	uxtb	r1, r2
 800856a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800856e:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8008572:	54d1      	strb	r1, [r2, r3]
		Tx_Buffer[F_HEAD_SIZE + i*4 + 1]	= (uint8_t)( (*(buf + i) >> 16) & 0xFF );
 8008574:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800857e:	4413      	add	r3, r2
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	0c1a      	lsrs	r2, r3, #16
 8008584:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8008588:	3302      	adds	r3, #2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	3301      	adds	r3, #1
 800858e:	b2d1      	uxtb	r1, r2
 8008590:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008594:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8008598:	54d1      	strb	r1, [r2, r3]
		Tx_Buffer[F_HEAD_SIZE + i*4 + 2]	= (uint8_t)( (*(buf + i) >> 8) & 0xFF );
 800859a:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80085a4:	4413      	add	r3, r2
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	0a1a      	lsrs	r2, r3, #8
 80085aa:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80085ae:	3302      	adds	r3, #2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	3302      	adds	r3, #2
 80085b4:	b2d1      	uxtb	r1, r2
 80085b6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80085ba:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80085be:	54d1      	strb	r1, [r2, r3]
		Tx_Buffer[F_HEAD_SIZE + i*4 + 3]	= (uint8_t)( *(buf + i) & 0xFF );
 80085c0:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80085ca:	4413      	add	r3, r2
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80085d2:	3302      	adds	r3, #2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	3303      	adds	r3, #3
 80085d8:	b2d1      	uxtb	r1, r2
 80085da:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80085de:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80085e2:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < CR_HINIT_SIZE; i++)
 80085e4:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80085e8:	3301      	adds	r3, #1
 80085ea:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 80085ee:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80085f2:	2b0d      	cmp	r3, #13
 80085f4:	d9ac      	bls.n	8008550 <Fun_RS485_HILS_Init_Read+0xa0>
	}
	//ETX, Checksum을 제외한 크기
	Size = CR_HINIT_SIZE * 4 + F_HEAD_SIZE;
 80085f6:	2340      	movs	r3, #64	@ 0x40
 80085f8:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136

	// CHECK SUM
	Count = 1;	//STX는 Checksum에서 건너뛰기
 80085fc:	2301      	movs	r3, #1
 80085fe:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	for(uint16_t i = 1; i < Size; i++)
 8008602:	2301      	movs	r3, #1
 8008604:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 8008608:	e016      	b.n	8008638 <Fun_RS485_HILS_Init_Read+0x188>
	{
		Check_Sum += Tx_Buffer[i];
 800860a:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800860e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008612:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8008616:	5cd3      	ldrb	r3, [r2, r3]
 8008618:	461a      	mov	r2, r3
 800861a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800861e:	4413      	add	r3, r2
 8008620:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		Count++;
 8008624:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8008628:	3301      	adds	r3, #1
 800862a:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	for(uint16_t i = 1; i < Size; i++)
 800862e:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8008632:	3301      	adds	r3, #1
 8008634:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 8008638:	f8b7 2138 	ldrh.w	r2, [r7, #312]	@ 0x138
 800863c:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8008640:	429a      	cmp	r2, r3
 8008642:	d3e2      	bcc.n	800860a <Fun_RS485_HILS_Init_Read+0x15a>
	}
	Tx_Buffer[Count] = Check_Sum & 0xFF;
 8008644:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8008648:	f8b7 213c 	ldrh.w	r2, [r7, #316]	@ 0x13c
 800864c:	b2d1      	uxtb	r1, r2
 800864e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008652:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8008656:	54d1      	strb	r1, [r2, r3]
	Count++;
 8008658:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800865c:	3301      	adds	r3, #1
 800865e:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e

    // STX
	Tx_Buffer[F_STX] = FRAME_STX;
 8008662:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008666:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800866a:	227e      	movs	r2, #126	@ 0x7e
 800866c:	701a      	strb	r2, [r3, #0]

    // ETX
	Tx_Buffer[Count++] = FRAME_ETX;
 800866e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	f8a7 213e 	strh.w	r2, [r7, #318]	@ 0x13e
 8008678:	461a      	mov	r2, r3
 800867a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800867e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008682:	21e7      	movs	r1, #231	@ 0xe7
 8008684:	5499      	strb	r1, [r3, r2]

	Size = Count;
 8008686:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800868a:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136

	Fun_RS485_Transmit_Await(Tx_Buffer ,Count);
 800868e:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 8008692:	1d3b      	adds	r3, r7, #4
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f80a 	bl	80086b0 <Fun_RS485_Transmit_Await>
}
 800869c:	bf00      	nop
 800869e:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000d90 	.word	0x20000d90
 80086ac:	2000123c 	.word	0x2000123c

080086b0 <Fun_RS485_Transmit_Await>:
/****************************************************************************/
/*	Overview	:	데이터 전송 + 수신 대기										*/
/*	Return value:	void													*/
/****************************************************************************/
void Fun_RS485_Transmit_Await(uint8_t *Data, uint16_t Size)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	807b      	strh	r3, [r7, #2]
	for(volatile uint16_t i = 0; i < TX_BUF_LENGTH; i++)
 80086bc:	2300      	movs	r3, #0
 80086be:	81fb      	strh	r3, [r7, #14]
 80086c0:	e011      	b.n	80086e6 <Fun_RS485_Transmit_Await+0x36>
	{
		RS485.Uart7_Tx_Buffer[i] = Data[i];
 80086c2:	89fb      	ldrh	r3, [r7, #14]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	461a      	mov	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4413      	add	r3, r2
 80086cc:	89fa      	ldrh	r2, [r7, #14]
 80086ce:	b292      	uxth	r2, r2
 80086d0:	4611      	mov	r1, r2
 80086d2:	781a      	ldrb	r2, [r3, #0]
 80086d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008710 <Fun_RS485_Transmit_Await+0x60>)
 80086d6:	440b      	add	r3, r1
 80086d8:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	for(volatile uint16_t i = 0; i < TX_BUF_LENGTH; i++)
 80086dc:	89fb      	ldrh	r3, [r7, #14]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3301      	adds	r3, #1
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	81fb      	strh	r3, [r7, #14]
 80086e6:	89fb      	ldrh	r3, [r7, #14]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80086ee:	d3e8      	bcc.n	80086c2 <Fun_RS485_Transmit_Await+0x12>
	}

	//RS485 송신모드
	SEL_485_1_DE();
 80086f0:	2201      	movs	r2, #1
 80086f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80086f6:	4807      	ldr	r0, [pc, #28]	@ (8008714 <Fun_RS485_Transmit_Await+0x64>)
 80086f8:	f004 fbe2 	bl	800cec0 <HAL_GPIO_WritePin>

	HAL_UART_Transmit_DMA(&huart7, RS485.Uart7_Tx_Buffer, Size);
 80086fc:	887b      	ldrh	r3, [r7, #2]
 80086fe:	461a      	mov	r2, r3
 8008700:	4905      	ldr	r1, [pc, #20]	@ (8008718 <Fun_RS485_Transmit_Await+0x68>)
 8008702:	4806      	ldr	r0, [pc, #24]	@ (800871c <Fun_RS485_Transmit_Await+0x6c>)
 8008704:	f008 f82c 	bl	8010760 <HAL_UART_Transmit_DMA>

//	HAL_UART_Transmit(&huart7, RS485.Uart7_Tx_Buffer, Size, 100);
}
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000d90 	.word	0x20000d90
 8008714:	40021000 	.word	0x40021000
 8008718:	20000f93 	.word	0x20000f93
 800871c:	20001754 	.word	0x20001754

08008720 <Fun_RS485_HILS_Init_Write>:
/****************************************************************************/
/*	Overview	:	HILS 초기값 쓰기											*/
/*	Return value:	HILS_INIT_WRITE											*/
/****************************************************************************/
void Fun_RS485_HILS_Init_Write(uint8_t *Buffer)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < HILS_WRITE_LENGTH; i++)				// 18EA
 8008728:	2300      	movs	r3, #0
 800872a:	73fb      	strb	r3, [r7, #15]
 800872c:	e00e      	b.n	800874c <Fun_RS485_HILS_Init_Write+0x2c>
	{
		RS485.LwsA_HILS_Init_Value[i] = Buffer[F_DATA + i];
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	3308      	adds	r3, #8
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	441a      	add	r2, r3
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	7811      	ldrb	r1, [r2, #0]
 800873c:	4a0a      	ldr	r2, [pc, #40]	@ (8008768 <Fun_RS485_HILS_Init_Write+0x48>)
 800873e:	4413      	add	r3, r2
 8008740:	460a      	mov	r2, r1
 8008742:	f883 24ac 	strb.w	r2, [r3, #1196]	@ 0x4ac
	for(uint8_t i = 0; i < HILS_WRITE_LENGTH; i++)				// 18EA
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	3301      	adds	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	2b11      	cmp	r3, #17
 8008750:	d9ed      	bls.n	800872e <Fun_RS485_HILS_Init_Write+0xe>
	}

	HILS.HILS_Input.HILS_Change_Flag = 1;
 8008752:	4b06      	ldr	r3, [pc, #24]	@ (800876c <Fun_RS485_HILS_Init_Write+0x4c>)
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92

	// ACK 응답
	Fun_RS485_Response_ACK();
 800875a:	f000 faa7 	bl	8008cac <Fun_RS485_Response_ACK>
}
 800875e:	bf00      	nop
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000d90 	.word	0x20000d90
 800876c:	200006ac 	.word	0x200006ac

08008770 <Fun_RS485_HILS_Output_Set>:
/****************************************************************************/
/*	Overview	:	HILS 초기값 강제 출력										*/
/*	Return value:	HILS_OUTPUT_VALUE										*/
/****************************************************************************/
void Fun_RS485_HILS_Output_Set(uint8_t *Buffer)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
	uint32_t Dummy_Int = 0;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
	float *Dummy_Float;

	for(uint8_t i = 0; i < HILS_OUTPUT_UC_Int_LENGTH; i++)				// 19EA
 800877c:	2300      	movs	r3, #0
 800877e:	75fb      	strb	r3, [r7, #23]
 8008780:	e00e      	b.n	80087a0 <Fun_RS485_HILS_Output_Set+0x30>
	{
		RS485.HILS_UC_Output_Int[i] = Buffer[F_DATA + i];
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	3308      	adds	r3, #8
 8008786:	461a      	mov	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	441a      	add	r2, r3
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	7811      	ldrb	r1, [r2, #0]
 8008790:	4aaf      	ldr	r2, [pc, #700]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 8008792:	4413      	add	r3, r2
 8008794:	460a      	mov	r2, r1
 8008796:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	for(uint8_t i = 0; i < HILS_OUTPUT_UC_Int_LENGTH; i++)				// 19EA
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	3301      	adds	r3, #1
 800879e:	75fb      	strb	r3, [r7, #23]
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	2b12      	cmp	r3, #18
 80087a4:	d9ed      	bls.n	8008782 <Fun_RS485_HILS_Output_Set+0x12>
	}

	for(uint8_t i = 0; i < HILS_OUTPUT_UC_Float_LENGTH; i++)				// 27EA
 80087a6:	2300      	movs	r3, #0
 80087a8:	75bb      	strb	r3, [r7, #22]
 80087aa:	e036      	b.n	800881a <Fun_RS485_HILS_Output_Set+0xaa>
	{
		Dummy_Int = ((uint32_t)Buffer[F_DATA + HILS_OUTPUT_UC_Int_LENGTH + (i * 4)] << 24) & 0xFF000000;
 80087ac:	7dbb      	ldrb	r3, [r7, #22]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	331b      	adds	r3, #27
 80087b2:	461a      	mov	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4413      	add	r3, r2
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	061b      	lsls	r3, r3, #24
 80087bc:	60fb      	str	r3, [r7, #12]
		Dummy_Int |= ((uint32_t)Buffer[F_DATA + HILS_OUTPUT_UC_Int_LENGTH + (i * 4) + 1] << 16) & 0x00FF0000;
 80087be:	7dbb      	ldrb	r3, [r7, #22]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	331c      	adds	r3, #28
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	4413      	add	r3, r2
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	041b      	lsls	r3, r3, #16
 80087cc:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
		Dummy_Int |= ((uint32_t)Buffer[F_DATA + HILS_OUTPUT_UC_Int_LENGTH + (i * 4) + 2] << 8) & 0x0000FF00;
 80087d6:	7dbb      	ldrb	r3, [r7, #22]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	331d      	adds	r3, #29
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	4413      	add	r3, r2
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	021b      	lsls	r3, r3, #8
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
		Dummy_Int |= (uint32_t)Buffer[F_DATA + HILS_OUTPUT_UC_Int_LENGTH + (i * 4) + 3] & 0x000000FF;
 80087ec:	7dbb      	ldrb	r3, [r7, #22]
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	331e      	adds	r3, #30
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]

		Dummy_Float = (float * )&Dummy_Int;
 8008800:	f107 030c 	add.w	r3, r7, #12
 8008804:	613b      	str	r3, [r7, #16]

		RS485.HILS_UC_Output_Float[i] = *Dummy_Float;
 8008806:	7dbb      	ldrb	r3, [r7, #22]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	6812      	ldr	r2, [r2, #0]
 800880c:	4990      	ldr	r1, [pc, #576]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	440b      	add	r3, r1
 8008812:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < HILS_OUTPUT_UC_Float_LENGTH; i++)				// 27EA
 8008814:	7dbb      	ldrb	r3, [r7, #22]
 8008816:	3301      	adds	r3, #1
 8008818:	75bb      	strb	r3, [r7, #22]
 800881a:	7dbb      	ldrb	r3, [r7, #22]
 800881c:	2b1a      	cmp	r3, #26
 800881e:	d9c5      	bls.n	80087ac <Fun_RS485_HILS_Output_Set+0x3c>
	}

	//Winch_A 출력 제어
	if(RS485.HILS_UC_Output_Float[7] > 0)		//A
 8008820:	4b8b      	ldr	r3, [pc, #556]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 8008822:	edd3 7a07 	vldr	s15, [r3, #28]
 8008826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800882a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882e:	dd18      	ble.n	8008862 <Fun_RS485_HILS_Output_Set+0xf2>
	{
		OUTPUT_CH_31_LOW();						// 방향제어
 8008830:	2200      	movs	r2, #0
 8008832:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008836:	4887      	ldr	r0, [pc, #540]	@ (8008a54 <Fun_RS485_HILS_Output_Set+0x2e4>)
 8008838:	f004 fb42 	bl	800cec0 <HAL_GPIO_WritePin>
		FUN_Frequency_Ctrl(Winch_A_SPEED, RS485.HILS_UC_Output_Float[7]*3.45);
 800883c:	4b84      	ldr	r3, [pc, #528]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 800883e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008842:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008846:	ed9f 6b80 	vldr	d6, [pc, #512]	@ 8008a48 <Fun_RS485_HILS_Output_Set+0x2d8>
 800884a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800884e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008852:	ee17 3a90 	vmov	r3, s15
 8008856:	b29b      	uxth	r3, r3
 8008858:	4619      	mov	r1, r3
 800885a:	2001      	movs	r0, #1
 800885c:	f001 fa4e 	bl	8009cfc <FUN_Frequency_Ctrl>
 8008860:	e039      	b.n	80088d6 <Fun_RS485_HILS_Output_Set+0x166>
	}
	else if(RS485.HILS_UC_Output_Float[7] == 0)
 8008862:	4b7b      	ldr	r3, [pc, #492]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 8008864:	edd3 7a07 	vldr	s15, [r3, #28]
 8008868:	eef5 7a40 	vcmp.f32	s15, #0.0
 800886c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008870:	d10f      	bne.n	8008892 <Fun_RS485_HILS_Output_Set+0x122>
	{
		HAL_TIM_Base_DeInit(&htim4);
 8008872:	4879      	ldr	r0, [pc, #484]	@ (8008a58 <Fun_RS485_HILS_Output_Set+0x2e8>)
 8008874:	f007 fa15 	bl	800fca2 <HAL_TIM_Base_DeInit>
		OUTPUT_CH_31_HIGH();
 8008878:	2201      	movs	r2, #1
 800887a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800887e:	4875      	ldr	r0, [pc, #468]	@ (8008a54 <Fun_RS485_HILS_Output_Set+0x2e4>)
 8008880:	f004 fb1e 	bl	800cec0 <HAL_GPIO_WritePin>
		OUTPUT_CH_32_HIGH();
 8008884:	2201      	movs	r2, #1
 8008886:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800888a:	4874      	ldr	r0, [pc, #464]	@ (8008a5c <Fun_RS485_HILS_Output_Set+0x2ec>)
 800888c:	f004 fb18 	bl	800cec0 <HAL_GPIO_WritePin>
 8008890:	e021      	b.n	80088d6 <Fun_RS485_HILS_Output_Set+0x166>
	}
	else if(RS485.HILS_UC_Output_Float[7] < 0)
 8008892:	4b6f      	ldr	r3, [pc, #444]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 8008894:	edd3 7a07 	vldr	s15, [r3, #28]
 8008898:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800889c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a0:	d519      	bpl.n	80088d6 <Fun_RS485_HILS_Output_Set+0x166>
	{
		OUTPUT_CH_31_HIGH();					// 방향제어
 80088a2:	2201      	movs	r2, #1
 80088a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80088a8:	486a      	ldr	r0, [pc, #424]	@ (8008a54 <Fun_RS485_HILS_Output_Set+0x2e4>)
 80088aa:	f004 fb09 	bl	800cec0 <HAL_GPIO_WritePin>
		FUN_Frequency_Ctrl(Winch_A_SPEED, -(RS485.HILS_UC_Output_Float[7]*3.45));
 80088ae:	4b68      	ldr	r3, [pc, #416]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 80088b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80088b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80088b8:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 8008a48 <Fun_RS485_HILS_Output_Set+0x2d8>
 80088bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80088c0:	eeb1 7b47 	vneg.f64	d7, d7
 80088c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80088c8:	ee17 3a90 	vmov	r3, s15
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	4619      	mov	r1, r3
 80088d0:	2001      	movs	r0, #1
 80088d2:	f001 fa13 	bl	8009cfc <FUN_Frequency_Ctrl>
	}

	//Winch_B 출력 제어
	if(RS485.HILS_UC_Output_Float[8] > 0)		//B
 80088d6:	4b5e      	ldr	r3, [pc, #376]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 80088d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80088dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e4:	dd17      	ble.n	8008916 <Fun_RS485_HILS_Output_Set+0x1a6>
	{
		OUTPUT_CH_33_LOW();						// 방향제어
 80088e6:	2200      	movs	r2, #0
 80088e8:	2108      	movs	r1, #8
 80088ea:	485d      	ldr	r0, [pc, #372]	@ (8008a60 <Fun_RS485_HILS_Output_Set+0x2f0>)
 80088ec:	f004 fae8 	bl	800cec0 <HAL_GPIO_WritePin>
		FUN_Frequency_Ctrl(Winch_B_SPEED, RS485.HILS_UC_Output_Float[8]*3.45);
 80088f0:	4b57      	ldr	r3, [pc, #348]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 80088f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80088f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80088fa:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8008a48 <Fun_RS485_HILS_Output_Set+0x2d8>
 80088fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008902:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008906:	ee17 3a90 	vmov	r3, s15
 800890a:	b29b      	uxth	r3, r3
 800890c:	4619      	mov	r1, r3
 800890e:	2002      	movs	r0, #2
 8008910:	f001 f9f4 	bl	8009cfc <FUN_Frequency_Ctrl>
 8008914:	e036      	b.n	8008984 <Fun_RS485_HILS_Output_Set+0x214>
	}
	else if(RS485.HILS_UC_Output_Float[8] == 0)
 8008916:	4b4e      	ldr	r3, [pc, #312]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 8008918:	edd3 7a08 	vldr	s15, [r3, #32]
 800891c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008924:	d10d      	bne.n	8008942 <Fun_RS485_HILS_Output_Set+0x1d2>
	{
		HAL_TIM_Base_DeInit(&htim5);
 8008926:	484f      	ldr	r0, [pc, #316]	@ (8008a64 <Fun_RS485_HILS_Output_Set+0x2f4>)
 8008928:	f007 f9bb 	bl	800fca2 <HAL_TIM_Base_DeInit>
		OUTPUT_CH_33_HIGH();
 800892c:	2201      	movs	r2, #1
 800892e:	2108      	movs	r1, #8
 8008930:	484b      	ldr	r0, [pc, #300]	@ (8008a60 <Fun_RS485_HILS_Output_Set+0x2f0>)
 8008932:	f004 fac5 	bl	800cec0 <HAL_GPIO_WritePin>
		OUTPUT_CH_34_HIGH();
 8008936:	2201      	movs	r2, #1
 8008938:	2110      	movs	r1, #16
 800893a:	4849      	ldr	r0, [pc, #292]	@ (8008a60 <Fun_RS485_HILS_Output_Set+0x2f0>)
 800893c:	f004 fac0 	bl	800cec0 <HAL_GPIO_WritePin>
 8008940:	e020      	b.n	8008984 <Fun_RS485_HILS_Output_Set+0x214>
	}
	else if(RS485.HILS_UC_Output_Float[8] < 0)
 8008942:	4b43      	ldr	r3, [pc, #268]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 8008944:	edd3 7a08 	vldr	s15, [r3, #32]
 8008948:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800894c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008950:	d518      	bpl.n	8008984 <Fun_RS485_HILS_Output_Set+0x214>
	{
		OUTPUT_CH_33_HIGH();					// 방향제어
 8008952:	2201      	movs	r2, #1
 8008954:	2108      	movs	r1, #8
 8008956:	4842      	ldr	r0, [pc, #264]	@ (8008a60 <Fun_RS485_HILS_Output_Set+0x2f0>)
 8008958:	f004 fab2 	bl	800cec0 <HAL_GPIO_WritePin>
		FUN_Frequency_Ctrl(Winch_B_SPEED, -(RS485.HILS_UC_Output_Float[8]*3.45));
 800895c:	4b3c      	ldr	r3, [pc, #240]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 800895e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008962:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008966:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8008a48 <Fun_RS485_HILS_Output_Set+0x2d8>
 800896a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800896e:	eeb1 7b47 	vneg.f64	d7, d7
 8008972:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008976:	ee17 3a90 	vmov	r3, s15
 800897a:	b29b      	uxth	r3, r3
 800897c:	4619      	mov	r1, r3
 800897e:	2002      	movs	r0, #2
 8008980:	f001 f9bc 	bl	8009cfc <FUN_Frequency_Ctrl>
	}

	//Align 출력제어
	if(RS485.HILS_UC_Output_Float[9] > 0)		//권선
 8008984:	4b32      	ldr	r3, [pc, #200]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 8008986:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800898a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800898e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008992:	dd12      	ble.n	80089ba <Fun_RS485_HILS_Output_Set+0x24a>
	{
		OUTPUT_CH_29_LOW();						// 방향제어
 8008994:	2200      	movs	r2, #0
 8008996:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800899a:	482e      	ldr	r0, [pc, #184]	@ (8008a54 <Fun_RS485_HILS_Output_Set+0x2e4>)
 800899c:	f004 fa90 	bl	800cec0 <HAL_GPIO_WritePin>
		FUN_Frequency_Ctrl(Align_SPEED, RS485.HILS_UC_Output_Float[9]);
 80089a0:	4b2b      	ldr	r3, [pc, #172]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 80089a2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80089a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089aa:	ee17 3a90 	vmov	r3, s15
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	4619      	mov	r1, r3
 80089b2:	2003      	movs	r0, #3
 80089b4:	f001 f9a2 	bl	8009cfc <FUN_Frequency_Ctrl>
 80089b8:	e033      	b.n	8008a22 <Fun_RS485_HILS_Output_Set+0x2b2>
	}
	else if(RS485.HILS_UC_Output_Float[9] == 0)
 80089ba:	4b25      	ldr	r3, [pc, #148]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 80089bc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80089c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c8:	d10f      	bne.n	80089ea <Fun_RS485_HILS_Output_Set+0x27a>
	{
		HAL_TIM_Base_DeInit(&htim7);
 80089ca:	4827      	ldr	r0, [pc, #156]	@ (8008a68 <Fun_RS485_HILS_Output_Set+0x2f8>)
 80089cc:	f007 f969 	bl	800fca2 <HAL_TIM_Base_DeInit>
		OUTPUT_CH_29_HIGH();
 80089d0:	2201      	movs	r2, #1
 80089d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80089d6:	481f      	ldr	r0, [pc, #124]	@ (8008a54 <Fun_RS485_HILS_Output_Set+0x2e4>)
 80089d8:	f004 fa72 	bl	800cec0 <HAL_GPIO_WritePin>
		OUTPUT_CH_30_HIGH();
 80089dc:	2201      	movs	r2, #1
 80089de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80089e2:	481c      	ldr	r0, [pc, #112]	@ (8008a54 <Fun_RS485_HILS_Output_Set+0x2e4>)
 80089e4:	f004 fa6c 	bl	800cec0 <HAL_GPIO_WritePin>
 80089e8:	e01b      	b.n	8008a22 <Fun_RS485_HILS_Output_Set+0x2b2>
	}
	else if(RS485.HILS_UC_Output_Float[9] < 0)
 80089ea:	4b19      	ldr	r3, [pc, #100]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 80089ec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80089f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f8:	d513      	bpl.n	8008a22 <Fun_RS485_HILS_Output_Set+0x2b2>
	{
		OUTPUT_CH_29_HIGH();					// 방향제어
 80089fa:	2201      	movs	r2, #1
 80089fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008a00:	4814      	ldr	r0, [pc, #80]	@ (8008a54 <Fun_RS485_HILS_Output_Set+0x2e4>)
 8008a02:	f004 fa5d 	bl	800cec0 <HAL_GPIO_WritePin>
		FUN_Frequency_Ctrl(Align_SPEED, -(RS485.HILS_UC_Output_Float[9]));
 8008a06:	4b12      	ldr	r3, [pc, #72]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 8008a08:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008a0c:	eef1 7a67 	vneg.f32	s15, s15
 8008a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a14:	ee17 3a90 	vmov	r3, s15
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	2003      	movs	r0, #3
 8008a1e:	f001 f96d 	bl	8009cfc <FUN_Frequency_Ctrl>
	}

	Control.Float_Data.WinchDrumHydMotorASpeed =RS485.HILS_UC_Output_Float[7];
 8008a22:	4b0b      	ldr	r3, [pc, #44]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	4a11      	ldr	r2, [pc, #68]	@ (8008a6c <Fun_RS485_HILS_Output_Set+0x2fc>)
 8008a28:	6493      	str	r3, [r2, #72]	@ 0x48
	Control.Float_Data.WinchDrumHydMotorBSpeed =RS485.HILS_UC_Output_Float[8];
 8008a2a:	4b09      	ldr	r3, [pc, #36]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8008a6c <Fun_RS485_HILS_Output_Set+0x2fc>)
 8008a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
	Control.Float_Data.AlignHydMotorSpeed =RS485.HILS_UC_Output_Float[9];
 8008a32:	4b07      	ldr	r3, [pc, #28]	@ (8008a50 <Fun_RS485_HILS_Output_Set+0x2e0>)
 8008a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a36:	4a0d      	ldr	r2, [pc, #52]	@ (8008a6c <Fun_RS485_HILS_Output_Set+0x2fc>)
 8008a38:	6513      	str	r3, [r2, #80]	@ 0x50

	// ACK 응답
	Fun_RS485_Response_ACK();
 8008a3a:	f000 f937 	bl	8008cac <Fun_RS485_Response_ACK>
}
 8008a3e:	bf00      	nop
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	9999999a 	.word	0x9999999a
 8008a4c:	400b9999 	.word	0x400b9999
 8008a50:	20000d90 	.word	0x20000d90
 8008a54:	40022400 	.word	0x40022400
 8008a58:	20001670 	.word	0x20001670
 8008a5c:	40021400 	.word	0x40021400
 8008a60:	40022800 	.word	0x40022800
 8008a64:	200016bc 	.word	0x200016bc
 8008a68:	20001708 	.word	0x20001708
 8008a6c:	20000154 	.word	0x20000154

08008a70 <Fun_RS485_Gripper_Output_Set>:
/****************************************************************************/
/*	Overview	:	그립퍼 센서 출력값 설정										*/
/*	Return value:															*/
/****************************************************************************/
void Fun_RS485_Gripper_Output_Set(uint8_t *Buffer)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	uint32_t Dummy_Int = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60fb      	str	r3, [r7, #12]
	float *Dummy_Float;

	for(uint8_t i = 0; i < 6; i++)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	75fb      	strb	r3, [r7, #23]
 8008a80:	e00e      	b.n	8008aa0 <Fun_RS485_Gripper_Output_Set+0x30>
	{
		RS485.Gripper_Output_Int[i] = Buffer[F_DATA+i];
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	3308      	adds	r3, #8
 8008a86:	461a      	mov	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	441a      	add	r2, r3
 8008a8c:	7dfb      	ldrb	r3, [r7, #23]
 8008a8e:	7811      	ldrb	r1, [r2, #0]
 8008a90:	4a29      	ldr	r2, [pc, #164]	@ (8008b38 <Fun_RS485_Gripper_Output_Set+0xc8>)
 8008a92:	4413      	add	r3, r2
 8008a94:	460a      	mov	r2, r1
 8008a96:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	for(uint8_t i = 0; i < 6; i++)
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	75fb      	strb	r3, [r7, #23]
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	2b05      	cmp	r3, #5
 8008aa4:	d9ed      	bls.n	8008a82 <Fun_RS485_Gripper_Output_Set+0x12>
	}

	for(uint8_t i = 0; i < 3; i++)
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	75bb      	strb	r3, [r7, #22]
 8008aaa:	e037      	b.n	8008b1c <Fun_RS485_Gripper_Output_Set+0xac>
	{
		Dummy_Int = ((uint32_t)Buffer[F_DATA + 6 + (i * 4)] << 24) & 0xFF000000;
 8008aac:	7dbb      	ldrb	r3, [r7, #22]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	330e      	adds	r3, #14
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	061b      	lsls	r3, r3, #24
 8008abc:	60fb      	str	r3, [r7, #12]
		Dummy_Int |= ((uint32_t)Buffer[F_DATA + 6 + (i * 4) + 1] << 16) & 0x00FF0000;
 8008abe:	7dbb      	ldrb	r3, [r7, #22]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	330f      	adds	r3, #15
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	041b      	lsls	r3, r3, #16
 8008acc:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]
		Dummy_Int |= ((uint32_t)Buffer[F_DATA + 6 + (i * 4) + 2] << 8) & 0x0000FF00;
 8008ad6:	7dbb      	ldrb	r3, [r7, #22]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	3310      	adds	r3, #16
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	4413      	add	r3, r2
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	021b      	lsls	r3, r3, #8
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]
		Dummy_Int |= (uint32_t)Buffer[F_DATA + 6 + (i * 4) + 3] & 0x000000FF;
 8008aec:	7dbb      	ldrb	r3, [r7, #22]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	3311      	adds	r3, #17
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	4413      	add	r3, r2
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]

		Dummy_Float = (float * )&Dummy_Int;
 8008b00:	f107 030c 	add.w	r3, r7, #12
 8008b04:	613b      	str	r3, [r7, #16]

		RS485.Gripper_Output_Float[i] = *Dummy_Float;
 8008b06:	7dbb      	ldrb	r3, [r7, #22]
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	6812      	ldr	r2, [r2, #0]
 8008b0c:	490a      	ldr	r1, [pc, #40]	@ (8008b38 <Fun_RS485_Gripper_Output_Set+0xc8>)
 8008b0e:	3320      	adds	r3, #32
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 3; i++)
 8008b16:	7dbb      	ldrb	r3, [r7, #22]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	75bb      	strb	r3, [r7, #22]
 8008b1c:	7dbb      	ldrb	r3, [r7, #22]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d9c4      	bls.n	8008aac <Fun_RS485_Gripper_Output_Set+0x3c>
	}
	FUN_GPO_Gripper();
 8008b22:	f7fb f9db 	bl	8003edc <FUN_GPO_Gripper>
	FUN_DAC_Converter_Gripper();
 8008b26:	f7f9 f8cf 	bl	8001cc8 <FUN_DAC_Converter_Gripper>

	// ACK 응답
	Fun_RS485_Response_ACK();
 8008b2a:	f000 f8bf 	bl	8008cac <Fun_RS485_Response_ACK>
}
 8008b2e:	bf00      	nop
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20000d90 	.word	0x20000d90

08008b3c <Fun_RS485_Oil_Output_Set>:
/****************************************************************************/
/*	Overview	:	저유기센서 출력설정											*/
/*	Return value:															*/
/****************************************************************************/
void Fun_RS485_Oil_Output_Set(uint8_t *Buffer)				// 저유기센서 출력설정
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
	uint32_t Dummy_Int = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	60fb      	str	r3, [r7, #12]
	float *Dummy_Float;

	for(uint8_t i = 0; i < 4; i++)
 8008b48:	2300      	movs	r3, #0
 8008b4a:	75fb      	strb	r3, [r7, #23]
 8008b4c:	e00e      	b.n	8008b6c <Fun_RS485_Oil_Output_Set+0x30>
	{
		RS485.Oil_Output_Int[i] = Buffer[F_DATA+i];
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	3308      	adds	r3, #8
 8008b52:	461a      	mov	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	441a      	add	r2, r3
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	7811      	ldrb	r1, [r2, #0]
 8008b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd0 <Fun_RS485_Oil_Output_Set+0x94>)
 8008b5e:	4413      	add	r3, r2
 8008b60:	460a      	mov	r2, r1
 8008b62:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
	for(uint8_t i = 0; i < 4; i++)
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	75fb      	strb	r3, [r7, #23]
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d9ed      	bls.n	8008b4e <Fun_RS485_Oil_Output_Set+0x12>
	}

	Dummy_Int = ((uint32_t)Buffer[F_DATA + 4 ] << 24) & 0xFF000000;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	330c      	adds	r3, #12
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	061b      	lsls	r3, r3, #24
 8008b7a:	60fb      	str	r3, [r7, #12]
	Dummy_Int |= ((uint32_t)Buffer[F_DATA + 4 +1] << 16) & 0x00FF0000;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	330d      	adds	r3, #13
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	041b      	lsls	r3, r3, #16
 8008b84:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]
	Dummy_Int |= ((uint32_t)Buffer[F_DATA + 4 +2] << 8) & 0x0000FF00;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	330e      	adds	r3, #14
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60fb      	str	r3, [r7, #12]
	Dummy_Int |= (uint32_t)Buffer[F_DATA + 4 +3] & 0x000000FF;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	330f      	adds	r3, #15
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]

	Dummy_Float = (float * )&Dummy_Int;
 8008bac:	f107 030c 	add.w	r3, r7, #12
 8008bb0:	613b      	str	r3, [r7, #16]

	RS485.Oil_Output_Float = *Dummy_Float;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a06      	ldr	r2, [pc, #24]	@ (8008bd0 <Fun_RS485_Oil_Output_Set+0x94>)
 8008bb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

	FUN_GPO_Oil();
 8008bbc:	f7fb f9d0 	bl	8003f60 <FUN_GPO_Oil>
	FUN_DAC_Converter_Oil();
 8008bc0:	f7f9 f8b8 	bl	8001d34 <FUN_DAC_Converter_Oil>

	// ACK 응답
	Fun_RS485_Response_ACK();
 8008bc4:	f000 f872 	bl	8008cac <Fun_RS485_Response_ACK>
}
 8008bc8:	bf00      	nop
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20000d90 	.word	0x20000d90

08008bd4 <Fun_RS485_Cutter_Output_Set>:
/****************************************************************************/
/*	Overview	:	절단기센서 출력설정											*/
/*	Return value:															*/
/****************************************************************************/
void Fun_RS485_Cutter_Output_Set(uint8_t *Buffer)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 8; i++)
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
 8008be0:	e00e      	b.n	8008c00 <Fun_RS485_Cutter_Output_Set+0x2c>
	{
		RS485.Cutter_Output_Int[i] = Buffer[F_DATA+i];
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	3308      	adds	r3, #8
 8008be6:	461a      	mov	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	441a      	add	r2, r3
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	7811      	ldrb	r1, [r2, #0]
 8008bf0:	4a09      	ldr	r2, [pc, #36]	@ (8008c18 <Fun_RS485_Cutter_Output_Set+0x44>)
 8008bf2:	4413      	add	r3, r2
 8008bf4:	460a      	mov	r2, r1
 8008bf6:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
	for(uint8_t i = 0; i < 8; i++)
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	73fb      	strb	r3, [r7, #15]
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
 8008c02:	2b07      	cmp	r3, #7
 8008c04:	d9ed      	bls.n	8008be2 <Fun_RS485_Cutter_Output_Set+0xe>
	}

	FUN_GPO_Cutter();
 8008c06:	f7fb f9d9 	bl	8003fbc <FUN_GPO_Cutter>

	// ACK 응답
	Fun_RS485_Response_ACK();
 8008c0a:	f000 f84f 	bl	8008cac <Fun_RS485_Response_ACK>
}
 8008c0e:	bf00      	nop
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20000d90 	.word	0x20000d90

08008c1c <Fun_RS485_Cleaner_Output_Set>:
/****************************************************************************/
/*	Overview	:	세척기센서 출력설정											*/
/*	Return value:															*/
/****************************************************************************/
void Fun_RS485_Cleaner_Output_Set(uint8_t *Buffer)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 8; i++)
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
 8008c28:	e00e      	b.n	8008c48 <Fun_RS485_Cleaner_Output_Set+0x2c>
	{
		RS485.Cleaner_Output_Int[i] = Buffer[F_DATA+i];
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	461a      	mov	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	441a      	add	r2, r3
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	7811      	ldrb	r1, [r2, #0]
 8008c38:	4a09      	ldr	r2, [pc, #36]	@ (8008c60 <Fun_RS485_Cleaner_Output_Set+0x44>)
 8008c3a:	4413      	add	r3, r2
 8008c3c:	460a      	mov	r2, r1
 8008c3e:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
	for(uint8_t i = 0; i < 8; i++)
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	3301      	adds	r3, #1
 8008c46:	73fb      	strb	r3, [r7, #15]
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	2b07      	cmp	r3, #7
 8008c4c:	d9ed      	bls.n	8008c2a <Fun_RS485_Cleaner_Output_Set+0xe>
	}

	FUN_GPO_Cleaner();
 8008c4e:	f7fb f9ed 	bl	800402c <FUN_GPO_Cleaner>

	// ACK 응답
	Fun_RS485_Response_ACK();
 8008c52:	f000 f82b 	bl	8008cac <Fun_RS485_Response_ACK>
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20000d90 	.word	0x20000d90

08008c64 <Fun_RS485_Emergency_Output_Set>:
/****************************************************************************/
/*	Overview	:	비상정지스위치 출력설정										*/
/*	Return value:															*/
/****************************************************************************/
void Fun_RS485_Emergency_Output_Set(uint8_t *Buffer)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 8; i++)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
 8008c70:	e00e      	b.n	8008c90 <Fun_RS485_Emergency_Output_Set+0x2c>
	{
		RS485.Emergency_Output_Int[i] = Buffer[F_DATA+i];
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	3308      	adds	r3, #8
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	441a      	add	r2, r3
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	7811      	ldrb	r1, [r2, #0]
 8008c80:	4a09      	ldr	r2, [pc, #36]	@ (8008ca8 <Fun_RS485_Emergency_Output_Set+0x44>)
 8008c82:	4413      	add	r3, r2
 8008c84:	460a      	mov	r2, r1
 8008c86:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
	for(uint8_t i = 0; i < 8; i++)
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	73fb      	strb	r3, [r7, #15]
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	2b07      	cmp	r3, #7
 8008c94:	d9ed      	bls.n	8008c72 <Fun_RS485_Emergency_Output_Set+0xe>
	}

	FUN_GPO_Emergency();
 8008c96:	f7fb f9d9 	bl	800404c <FUN_GPO_Emergency>

	// ACK 응답
	Fun_RS485_Response_ACK();
 8008c9a:	f000 f807 	bl	8008cac <Fun_RS485_Response_ACK>
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000d90 	.word	0x20000d90

08008cac <Fun_RS485_Response_ACK>:
/****************************************************************************/
/*	Overview	:	ACK 응답													*/
/*	Return value:															*/
/****************************************************************************/
void Fun_RS485_Response_ACK(void)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b0ce      	sub	sp, #312	@ 0x138
 8008cb0:	af00      	add	r7, sp, #0
	uint16_t Size = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	uint16_t Count = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t Check_Sum = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint8_t Tx_Buffer[TX_BUF_LENGTH];

	Tx_Buffer[F_STX] = FRAME_STX;
 8008cc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008cc8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008ccc:	227e      	movs	r2, #126	@ 0x7e
 8008cce:	701a      	strb	r2, [r3, #0]

	// SEQ_NO (1 ~ 100)
	if(RS485.Uart7_Ack_SEQ_Num == 100)
 8008cd0:	4b66      	ldr	r3, [pc, #408]	@ (8008e6c <Fun_RS485_Response_ACK+0x1c0>)
 8008cd2:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
 8008cd6:	2b64      	cmp	r3, #100	@ 0x64
 8008cd8:	d103      	bne.n	8008ce2 <Fun_RS485_Response_ACK+0x36>
	{
		RS485.Uart7_Ack_SEQ_Num = 0;
 8008cda:	4b64      	ldr	r3, [pc, #400]	@ (8008e6c <Fun_RS485_Response_ACK+0x1c0>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 24cb 	strb.w	r2, [r3, #1227]	@ 0x4cb
	}
	Tx_Buffer[F_SEQ_NO] = ++RS485.Uart7_Ack_SEQ_Num;
 8008ce2:	4b62      	ldr	r3, [pc, #392]	@ (8008e6c <Fun_RS485_Response_ACK+0x1c0>)
 8008ce4:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
 8008ce8:	3301      	adds	r3, #1
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	4b5f      	ldr	r3, [pc, #380]	@ (8008e6c <Fun_RS485_Response_ACK+0x1c0>)
 8008cee:	f883 24cb 	strb.w	r2, [r3, #1227]	@ 0x4cb
 8008cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8008e6c <Fun_RS485_Response_ACK+0x1c0>)
 8008cf4:	f893 24cb 	ldrb.w	r2, [r3, #1227]	@ 0x4cb
 8008cf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008cfc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008d00:	71da      	strb	r2, [r3, #7]

	// DATA_LEN
	Tx_Buffer[F_DATA_LEN_0] = (uint8_t)((CR_CTR_ACK_SIZE * 4) >> 8);
 8008d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	715a      	strb	r2, [r3, #5]
	Tx_Buffer[F_DATA_LEN_1] = (uint8_t)((CR_CTR_ACK_SIZE * 4) & 0xFF);
 8008d0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d12:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008d16:	2208      	movs	r2, #8
 8008d18:	719a      	strb	r2, [r3, #6]

	// MSG_ID{
	Tx_Buffer[F_MSG_ID] = MSG_CTRL_REP;
 8008d1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008d22:	2204      	movs	r2, #4
 8008d24:	705a      	strb	r2, [r3, #1]
	// TX ID
	Tx_Buffer[F_TX_ID] = LWS_CTLR_A;
 8008d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008d2e:	2220      	movs	r2, #32
 8008d30:	709a      	strb	r2, [r3, #2]
	// RX_ID
	Tx_Buffer[F_RX_ID] = LWS_GUI;
 8008d32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d36:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008d3a:	2210      	movs	r2, #16
 8008d3c:	70da      	strb	r2, [r3, #3]
	// CMD CODE
	Tx_Buffer[F_CMD_CODE] = CONTROL_ACK;
 8008d3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008d46:	2266      	movs	r2, #102	@ 0x66
 8008d48:	711a      	strb	r2, [r3, #4]

	for(uint16_t i = 0; i < CR_CTR_ACK_SIZE; i++)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 8008d50:	e02f      	b.n	8008db2 <Fun_RS485_Response_ACK+0x106>
	{
		Tx_Buffer[F_HEAD_SIZE + i*4] 	 	= 0;
 8008d52:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8008d56:	3302      	adds	r3, #2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008d5e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8008d62:	2100      	movs	r1, #0
 8008d64:	54d1      	strb	r1, [r2, r3]
		Tx_Buffer[F_HEAD_SIZE + i*4 + 1] 	= 0;
 8008d66:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8008d6a:	3302      	adds	r3, #2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	3301      	adds	r3, #1
 8008d70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008d74:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8008d78:	2100      	movs	r1, #0
 8008d7a:	54d1      	strb	r1, [r2, r3]
		Tx_Buffer[F_HEAD_SIZE + i*4 + 2] 	= 0;
 8008d7c:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8008d80:	3302      	adds	r3, #2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	3302      	adds	r3, #2
 8008d86:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008d8a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8008d8e:	2100      	movs	r1, #0
 8008d90:	54d1      	strb	r1, [r2, r3]
		Tx_Buffer[F_HEAD_SIZE + i*4 + 3] 	= 0;
 8008d92:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8008d96:	3302      	adds	r3, #2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	3303      	adds	r3, #3
 8008d9c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008da0:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8008da4:	2100      	movs	r1, #0
 8008da6:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < CR_CTR_ACK_SIZE; i++)
 8008da8:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8008dac:	3301      	adds	r3, #1
 8008dae:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 8008db2:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d9cb      	bls.n	8008d52 <Fun_RS485_Response_ACK+0xa6>
	}

	Size = CR_CTR_ACK_SIZE * 4 + F_HEAD_SIZE;
 8008dba:	2310      	movs	r3, #16
 8008dbc:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e

	// CHECK SUM
	Count = 1;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136

	for(uint16_t i = 1; i < Size; i++)
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
 8008dcc:	e016      	b.n	8008dfc <Fun_RS485_Response_ACK+0x150>
	{
		Check_Sum += Tx_Buffer[i];
 8008dce:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8008dd2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008dd6:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8008dda:	5cd3      	ldrb	r3, [r2, r3]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8008de2:	4413      	add	r3, r2
 8008de4:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		Count++;
 8008de8:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8008dec:	3301      	adds	r3, #1
 8008dee:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	for(uint16_t i = 1; i < Size; i++)
 8008df2:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8008df6:	3301      	adds	r3, #1
 8008df8:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
 8008dfc:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 8008e00:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d3e2      	bcc.n	8008dce <Fun_RS485_Response_ACK+0x122>
	}
	Tx_Buffer[Count] = Check_Sum & 0xff;
 8008e08:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8008e0c:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 8008e10:	b2d1      	uxtb	r1, r2
 8008e12:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008e16:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8008e1a:	54d1      	strb	r1, [r2, r3]
	Count++;
 8008e1c:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8008e20:	3301      	adds	r3, #1
 8008e22:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136

    // STX
	Tx_Buffer[F_STX] = FRAME_STX;
 8008e26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008e2e:	227e      	movs	r2, #126	@ 0x7e
 8008e30:	701a      	strb	r2, [r3, #0]

    // ETX
	Tx_Buffer[Count++] = FRAME_ETX;
 8008e32:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	f8a7 2136 	strh.w	r2, [r7, #310]	@ 0x136
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008e46:	21e7      	movs	r1, #231	@ 0xe7
 8008e48:	5499      	strb	r1, [r3, r2]

    Size = Count;
 8008e4a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8008e4e:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e

    Fun_RS485_Transmit_Await(Tx_Buffer , Count);
 8008e52:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8008e56:	463b      	mov	r3, r7
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff fc28 	bl	80086b0 <Fun_RS485_Transmit_Await>
}
 8008e60:	bf00      	nop
 8008e62:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000d90 	.word	0x20000d90

08008e70 <Fun_RS485_Data_Response>:
/****************************************************************************/
/*	Overview	:	데이터 요청에 대한 응답										*/
/*	Return value:	void													*/
/****************************************************************************/
void Fun_RS485_Data_Response(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b0ce      	sub	sp, #312	@ 0x138
 8008e74:	af00      	add	r7, sp, #0
	uint16_t Size = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
	uint16_t Count = 0;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t Check_Sum = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint8_t Tx_Buffer[TX_BUF_LENGTH];
	uint8_t *Dummy_Int = 0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	Tx_Buffer[F_STX] = FRAME_STX;
 8008e8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e92:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008e96:	227e      	movs	r2, #126	@ 0x7e
 8008e98:	701a      	strb	r2, [r3, #0]

	// SEQ_NO (1 ~ 100)
	if(RS485.Uart7_Data_SEQ_Num == 100)
 8008e9a:	4bc1      	ldr	r3, [pc, #772]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008e9c:	f893 34c8 	ldrb.w	r3, [r3, #1224]	@ 0x4c8
 8008ea0:	2b64      	cmp	r3, #100	@ 0x64
 8008ea2:	d103      	bne.n	8008eac <Fun_RS485_Data_Response+0x3c>
	{
		RS485.Uart7_Data_SEQ_Num = 0;
 8008ea4:	4bbe      	ldr	r3, [pc, #760]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 24c8 	strb.w	r2, [r3, #1224]	@ 0x4c8
	}
	Tx_Buffer[F_SEQ_NO] = ++RS485.Uart7_Data_SEQ_Num;
 8008eac:	4bbc      	ldr	r3, [pc, #752]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008eae:	f893 34c8 	ldrb.w	r3, [r3, #1224]	@ 0x4c8
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	4bba      	ldr	r3, [pc, #744]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008eb8:	f883 24c8 	strb.w	r2, [r3, #1224]	@ 0x4c8
 8008ebc:	4bb8      	ldr	r3, [pc, #736]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008ebe:	f893 24c8 	ldrb.w	r2, [r3, #1224]	@ 0x4c8
 8008ec2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ec6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008eca:	71da      	strb	r2, [r3, #7]

	// DATA_LEN
	Tx_Buffer[F_DATA_LEN_0] = (uint8_t)((CR_DATA_SIZE * 2) >> 8);
 8008ecc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ed0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	715a      	strb	r2, [r3, #5]
	Tx_Buffer[F_DATA_LEN_1] = (uint8_t)((CR_DATA_SIZE * 2) & 0xFF);
 8008ed8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008edc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008ee0:	22ec      	movs	r2, #236	@ 0xec
 8008ee2:	719a      	strb	r2, [r3, #6]

	// MSG_ID{
	Tx_Buffer[F_MSG_ID] = MSG_CTRL_DATA;
 8008ee4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ee8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008eec:	2205      	movs	r2, #5
 8008eee:	705a      	strb	r2, [r3, #1]
	// TX ID
	Tx_Buffer[F_TX_ID] = LWS_CTLR_A;
 8008ef0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ef4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008ef8:	2220      	movs	r2, #32
 8008efa:	709a      	strb	r2, [r3, #2]
	// RX_ID
	Tx_Buffer[F_RX_ID] = LWS_GUI;
 8008efc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f00:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008f04:	2210      	movs	r2, #16
 8008f06:	70da      	strb	r2, [r3, #3]
	// CMD CODE
	Tx_Buffer[F_CMD_CODE] = DATA_RESPONSE;
 8008f08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f0c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008f10:	2264      	movs	r2, #100	@ 0x64
 8008f12:	711a      	strb	r2, [r3, #4]

	RS485.Uart7_Tx_Data_Length = F_HEAD_SIZE;
 8008f14:	4ba2      	ldr	r3, [pc, #648]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008f16:	2208      	movs	r2, #8
 8008f18:	f8a3 24be 	strh.w	r2, [r3, #1214]	@ 0x4be

	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Mode.LWS_C_Mode >> 8);
 8008f1c:	4ba1      	ldr	r3, [pc, #644]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8008f1e:	881b      	ldrh	r3, [r3, #0]
 8008f20:	0a1b      	lsrs	r3, r3, #8
 8008f22:	b299      	uxth	r1, r3
 8008f24:	4b9e      	ldr	r3, [pc, #632]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008f26:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	b290      	uxth	r0, r2
 8008f2e:	4a9c      	ldr	r2, [pc, #624]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008f30:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8008f34:	461a      	mov	r2, r3
 8008f36:	b2c9      	uxtb	r1, r1
 8008f38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f3c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008f40:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)Control.Mode.LWS_C_Mode;
 8008f42:	4b98      	ldr	r3, [pc, #608]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8008f44:	8819      	ldrh	r1, [r3, #0]
 8008f46:	4b96      	ldr	r3, [pc, #600]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008f48:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	b290      	uxth	r0, r2
 8008f50:	4a93      	ldr	r2, [pc, #588]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008f52:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8008f56:	461a      	mov	r2, r3
 8008f58:	b2c9      	uxtb	r1, r1
 8008f5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008f62:	5499      	strb	r1, [r3, r2]

	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Status_01.LWS_C_Status >> 24);
 8008f64:	4b8f      	ldr	r3, [pc, #572]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	0e19      	lsrs	r1, r3, #24
 8008f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008f6c:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	b290      	uxth	r0, r2
 8008f74:	4a8a      	ldr	r2, [pc, #552]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008f76:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	b2c9      	uxtb	r1, r1
 8008f7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f82:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008f86:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Status_01.LWS_C_Status >> 16);
 8008f88:	4b86      	ldr	r3, [pc, #536]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	0c19      	lsrs	r1, r3, #16
 8008f8e:	4b84      	ldr	r3, [pc, #528]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008f90:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	b290      	uxth	r0, r2
 8008f98:	4a81      	ldr	r2, [pc, #516]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008f9a:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	b2c9      	uxtb	r1, r1
 8008fa2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fa6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008faa:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Status_01.LWS_C_Status >> 8);
 8008fac:	4b7d      	ldr	r3, [pc, #500]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	0a19      	lsrs	r1, r3, #8
 8008fb2:	4b7b      	ldr	r3, [pc, #492]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008fb4:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	b290      	uxth	r0, r2
 8008fbc:	4a78      	ldr	r2, [pc, #480]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008fbe:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	b2c9      	uxtb	r1, r1
 8008fc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008fce:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)Control.Status_01.LWS_C_Status;
 8008fd0:	4b74      	ldr	r3, [pc, #464]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8008fd2:	6859      	ldr	r1, [r3, #4]
 8008fd4:	4b72      	ldr	r3, [pc, #456]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008fd6:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8008fda:	1c5a      	adds	r2, r3, #1
 8008fdc:	b290      	uxth	r0, r2
 8008fde:	4a70      	ldr	r2, [pc, #448]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008fe0:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	b2c9      	uxtb	r1, r1
 8008fe8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008ff0:	5499      	strb	r1, [r3, r2]

	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Status_02.LWS_C_Status >> 24);
 8008ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	0e19      	lsrs	r1, r3, #24
 8008ff8:	4b69      	ldr	r3, [pc, #420]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8008ffa:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	b290      	uxth	r0, r2
 8009002:	4a67      	ldr	r2, [pc, #412]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8009004:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8009008:	461a      	mov	r2, r3
 800900a:	b2c9      	uxtb	r1, r1
 800900c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009010:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009014:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Status_02.LWS_C_Status >> 16);
 8009016:	4b63      	ldr	r3, [pc, #396]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	0c19      	lsrs	r1, r3, #16
 800901c:	4b60      	ldr	r3, [pc, #384]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 800901e:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8009022:	1c5a      	adds	r2, r3, #1
 8009024:	b290      	uxth	r0, r2
 8009026:	4a5e      	ldr	r2, [pc, #376]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8009028:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 800902c:	461a      	mov	r2, r3
 800902e:	b2c9      	uxtb	r1, r1
 8009030:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009034:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009038:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Status_02.LWS_C_Status >> 8);
 800903a:	4b5a      	ldr	r3, [pc, #360]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	0a19      	lsrs	r1, r3, #8
 8009040:	4b57      	ldr	r3, [pc, #348]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8009042:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	b290      	uxth	r0, r2
 800904a:	4a55      	ldr	r2, [pc, #340]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 800904c:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8009050:	461a      	mov	r2, r3
 8009052:	b2c9      	uxtb	r1, r1
 8009054:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009058:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800905c:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)Control.Status_02.LWS_C_Status;
 800905e:	4b51      	ldr	r3, [pc, #324]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8009060:	6899      	ldr	r1, [r3, #8]
 8009062:	4b4f      	ldr	r3, [pc, #316]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8009064:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8009068:	1c5a      	adds	r2, r3, #1
 800906a:	b290      	uxth	r0, r2
 800906c:	4a4c      	ldr	r2, [pc, #304]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 800906e:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8009072:	461a      	mov	r2, r3
 8009074:	b2c9      	uxtb	r1, r1
 8009076:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800907a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800907e:	5499      	strb	r1, [r3, r2]

	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Error.LWS_C_Error >> 8);
 8009080:	4b48      	ldr	r3, [pc, #288]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8009082:	899b      	ldrh	r3, [r3, #12]
 8009084:	0a1b      	lsrs	r3, r3, #8
 8009086:	b299      	uxth	r1, r3
 8009088:	4b45      	ldr	r3, [pc, #276]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 800908a:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	b290      	uxth	r0, r2
 8009092:	4a43      	ldr	r2, [pc, #268]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8009094:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8009098:	461a      	mov	r2, r3
 800909a:	b2c9      	uxtb	r1, r1
 800909c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090a0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80090a4:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)Control.Error.LWS_C_Error;
 80090a6:	4b3f      	ldr	r3, [pc, #252]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 80090a8:	8999      	ldrh	r1, [r3, #12]
 80090aa:	4b3d      	ldr	r3, [pc, #244]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 80090ac:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	b290      	uxth	r0, r2
 80090b4:	4a3a      	ldr	r2, [pc, #232]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 80090b6:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 80090ba:	461a      	mov	r2, r3
 80090bc:	b2c9      	uxtb	r1, r1
 80090be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80090c6:	5499      	strb	r1, [r3, r2]

	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Input_ch.Input_Alldata >> 24);
 80090c8:	4b36      	ldr	r3, [pc, #216]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	0e19      	lsrs	r1, r3, #24
 80090ce:	4b34      	ldr	r3, [pc, #208]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 80090d0:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	b290      	uxth	r0, r2
 80090d8:	4a31      	ldr	r2, [pc, #196]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 80090da:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 80090de:	461a      	mov	r2, r3
 80090e0:	b2c9      	uxtb	r1, r1
 80090e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80090ea:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Input_ch.Input_Alldata >> 16);
 80090ec:	4b2d      	ldr	r3, [pc, #180]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	0c19      	lsrs	r1, r3, #16
 80090f2:	4b2b      	ldr	r3, [pc, #172]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 80090f4:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 80090f8:	1c5a      	adds	r2, r3, #1
 80090fa:	b290      	uxth	r0, r2
 80090fc:	4a28      	ldr	r2, [pc, #160]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 80090fe:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8009102:	461a      	mov	r2, r3
 8009104:	b2c9      	uxtb	r1, r1
 8009106:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800910a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800910e:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Input_ch.Input_Alldata >> 8);
 8009110:	4b24      	ldr	r3, [pc, #144]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	0a19      	lsrs	r1, r3, #8
 8009116:	4b22      	ldr	r3, [pc, #136]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8009118:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	b290      	uxth	r0, r2
 8009120:	4a1f      	ldr	r2, [pc, #124]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8009122:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8009126:	461a      	mov	r2, r3
 8009128:	b2c9      	uxtb	r1, r1
 800912a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800912e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009132:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)Control.Input_ch.Input_Alldata;
 8009134:	4b1b      	ldr	r3, [pc, #108]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8009136:	6919      	ldr	r1, [r3, #16]
 8009138:	4b19      	ldr	r3, [pc, #100]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 800913a:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	b290      	uxth	r0, r2
 8009142:	4a17      	ldr	r2, [pc, #92]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8009144:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8009148:	461a      	mov	r2, r3
 800914a:	b2c9      	uxtb	r1, r1
 800914c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009150:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009154:	5499      	strb	r1, [r3, r2]

	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Output_ch.Output_Alldata[0] >> 24);
 8009156:	4b13      	ldr	r3, [pc, #76]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	0e19      	lsrs	r1, r3, #24
 800915c:	4b10      	ldr	r3, [pc, #64]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 800915e:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	b290      	uxth	r0, r2
 8009166:	4a0e      	ldr	r2, [pc, #56]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8009168:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 800916c:	461a      	mov	r2, r3
 800916e:	b2c9      	uxtb	r1, r1
 8009170:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009174:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009178:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Output_ch.Output_Alldata[0] >> 16);
 800917a:	4b0a      	ldr	r3, [pc, #40]	@ (80091a4 <Fun_RS485_Data_Response+0x334>)
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	0c19      	lsrs	r1, r3, #16
 8009180:	4b07      	ldr	r3, [pc, #28]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 8009182:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	b290      	uxth	r0, r2
 800918a:	4a05      	ldr	r2, [pc, #20]	@ (80091a0 <Fun_RS485_Data_Response+0x330>)
 800918c:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8009190:	461a      	mov	r2, r3
 8009192:	b2c9      	uxtb	r1, r1
 8009194:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009198:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800919c:	5499      	strb	r1, [r3, r2]
 800919e:	e003      	b.n	80091a8 <Fun_RS485_Data_Response+0x338>
 80091a0:	20000d90 	.word	0x20000d90
 80091a4:	20000154 	.word	0x20000154
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Output_ch.Output_Alldata[0] >> 8);
 80091a8:	4bd2      	ldr	r3, [pc, #840]	@ (80094f4 <Fun_RS485_Data_Response+0x684>)
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	0a19      	lsrs	r1, r3, #8
 80091ae:	4bd2      	ldr	r3, [pc, #840]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 80091b0:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 80091b4:	1c5a      	adds	r2, r3, #1
 80091b6:	b290      	uxth	r0, r2
 80091b8:	4acf      	ldr	r2, [pc, #828]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 80091ba:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 80091be:	461a      	mov	r2, r3
 80091c0:	b2c9      	uxtb	r1, r1
 80091c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80091ca:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)Control.Output_ch.Output_Alldata[0];
 80091cc:	4bc9      	ldr	r3, [pc, #804]	@ (80094f4 <Fun_RS485_Data_Response+0x684>)
 80091ce:	6959      	ldr	r1, [r3, #20]
 80091d0:	4bc9      	ldr	r3, [pc, #804]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 80091d2:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	b290      	uxth	r0, r2
 80091da:	4ac7      	ldr	r2, [pc, #796]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 80091dc:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 80091e0:	461a      	mov	r2, r3
 80091e2:	b2c9      	uxtb	r1, r1
 80091e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091e8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80091ec:	5499      	strb	r1, [r3, r2]

	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Output_ch.Output_Alldata[1] >> 24);
 80091ee:	4bc1      	ldr	r3, [pc, #772]	@ (80094f4 <Fun_RS485_Data_Response+0x684>)
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	0e19      	lsrs	r1, r3, #24
 80091f4:	4bc0      	ldr	r3, [pc, #768]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 80091f6:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	b290      	uxth	r0, r2
 80091fe:	4abe      	ldr	r2, [pc, #760]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 8009200:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8009204:	461a      	mov	r2, r3
 8009206:	b2c9      	uxtb	r1, r1
 8009208:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800920c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009210:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Output_ch.Output_Alldata[1] >> 16);
 8009212:	4bb8      	ldr	r3, [pc, #736]	@ (80094f4 <Fun_RS485_Data_Response+0x684>)
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	0c19      	lsrs	r1, r3, #16
 8009218:	4bb7      	ldr	r3, [pc, #732]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 800921a:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	b290      	uxth	r0, r2
 8009222:	4ab5      	ldr	r2, [pc, #724]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 8009224:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8009228:	461a      	mov	r2, r3
 800922a:	b2c9      	uxtb	r1, r1
 800922c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009230:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009234:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Output_ch.Output_Alldata[1] >> 8);
 8009236:	4baf      	ldr	r3, [pc, #700]	@ (80094f4 <Fun_RS485_Data_Response+0x684>)
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	0a19      	lsrs	r1, r3, #8
 800923c:	4bae      	ldr	r3, [pc, #696]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 800923e:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	b290      	uxth	r0, r2
 8009246:	4aac      	ldr	r2, [pc, #688]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 8009248:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 800924c:	461a      	mov	r2, r3
 800924e:	b2c9      	uxtb	r1, r1
 8009250:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009254:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009258:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)Control.Output_ch.Output_Alldata[1];
 800925a:	4ba6      	ldr	r3, [pc, #664]	@ (80094f4 <Fun_RS485_Data_Response+0x684>)
 800925c:	6999      	ldr	r1, [r3, #24]
 800925e:	4ba6      	ldr	r3, [pc, #664]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 8009260:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	b290      	uxth	r0, r2
 8009268:	4aa3      	ldr	r2, [pc, #652]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 800926a:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 800926e:	461a      	mov	r2, r3
 8009270:	b2c9      	uxtb	r1, r1
 8009272:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009276:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800927a:	5499      	strb	r1, [r3, r2]

	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Output_ch.Output_Alldata[2] >> 24);
 800927c:	4b9d      	ldr	r3, [pc, #628]	@ (80094f4 <Fun_RS485_Data_Response+0x684>)
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	0e19      	lsrs	r1, r3, #24
 8009282:	4b9d      	ldr	r3, [pc, #628]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 8009284:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	b290      	uxth	r0, r2
 800928c:	4a9a      	ldr	r2, [pc, #616]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 800928e:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 8009292:	461a      	mov	r2, r3
 8009294:	b2c9      	uxtb	r1, r1
 8009296:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800929a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800929e:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Output_ch.Output_Alldata[2] >> 16);
 80092a0:	4b94      	ldr	r3, [pc, #592]	@ (80094f4 <Fun_RS485_Data_Response+0x684>)
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	0c19      	lsrs	r1, r3, #16
 80092a6:	4b94      	ldr	r3, [pc, #592]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 80092a8:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	b290      	uxth	r0, r2
 80092b0:	4a91      	ldr	r2, [pc, #580]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 80092b2:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 80092b6:	461a      	mov	r2, r3
 80092b8:	b2c9      	uxtb	r1, r1
 80092ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80092c2:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)(Control.Output_ch.Output_Alldata[2] >> 8);
 80092c4:	4b8b      	ldr	r3, [pc, #556]	@ (80094f4 <Fun_RS485_Data_Response+0x684>)
 80092c6:	69db      	ldr	r3, [r3, #28]
 80092c8:	0a19      	lsrs	r1, r3, #8
 80092ca:	4b8b      	ldr	r3, [pc, #556]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 80092cc:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	b290      	uxth	r0, r2
 80092d4:	4a88      	ldr	r2, [pc, #544]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 80092d6:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 80092da:	461a      	mov	r2, r3
 80092dc:	b2c9      	uxtb	r1, r1
 80092de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80092e6:	5499      	strb	r1, [r3, r2]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = (uint8_t)Control.Output_ch.Output_Alldata[2];
 80092e8:	4b82      	ldr	r3, [pc, #520]	@ (80094f4 <Fun_RS485_Data_Response+0x684>)
 80092ea:	69d9      	ldr	r1, [r3, #28]
 80092ec:	4b82      	ldr	r3, [pc, #520]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 80092ee:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	b290      	uxth	r0, r2
 80092f6:	4a80      	ldr	r2, [pc, #512]	@ (80094f8 <Fun_RS485_Data_Response+0x688>)
 80092f8:	f8a2 04be 	strh.w	r0, [r2, #1214]	@ 0x4be
 80092fc:	461a      	mov	r2, r3
 80092fe:	b2c9      	uxtb	r1, r1
 8009300:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009304:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009308:	5499      	strb	r1, [r3, r2]

	Dummy_Int = (uint8_t *)&Control.Float_Data.AI_ADC_In1_Ch2_Volt;
 800930a:	4b7c      	ldr	r3, [pc, #496]	@ (80094fc <Fun_RS485_Data_Response+0x68c>)
 800930c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009310:	463b      	mov	r3, r7
 8009312:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009316:	4618      	mov	r0, r3
 8009318:	f000 faa0 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.AI_ADC_In1_Ch1_Volt;
 800931c:	4b78      	ldr	r3, [pc, #480]	@ (8009500 <Fun_RS485_Data_Response+0x690>)
 800931e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009322:	463b      	mov	r3, r7
 8009324:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fa97 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.AI_ADC_In1_Ch3_Volt;
 800932e:	4b75      	ldr	r3, [pc, #468]	@ (8009504 <Fun_RS485_Data_Response+0x694>)
 8009330:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009334:	463b      	mov	r3, r7
 8009336:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800933a:	4618      	mov	r0, r3
 800933c:	f000 fa8e 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.AI_ADC_In2_Ch3_Volt;
 8009340:	4b71      	ldr	r3, [pc, #452]	@ (8009508 <Fun_RS485_Data_Response+0x698>)
 8009342:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009346:	463b      	mov	r3, r7
 8009348:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fa85 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.AI_ADC_In2_Ch4_Volt;
 8009352:	4b6e      	ldr	r3, [pc, #440]	@ (800950c <Fun_RS485_Data_Response+0x69c>)
 8009354:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009358:	463b      	mov	r3, r7
 800935a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800935e:	4618      	mov	r0, r3
 8009360:	f000 fa7c 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.AI_ADC_In2_Ch1_Volt;
 8009364:	4b6a      	ldr	r3, [pc, #424]	@ (8009510 <Fun_RS485_Data_Response+0x6a0>)
 8009366:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800936a:	463b      	mov	r3, r7
 800936c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fa73 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.AI_ADC_In2_Ch2_Volt;
 8009376:	4b67      	ldr	r3, [pc, #412]	@ (8009514 <Fun_RS485_Data_Response+0x6a4>)
 8009378:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800937c:	463b      	mov	r3, r7
 800937e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fa6a 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.AI_ADC_In1_Ch4_Volt;
 8009388:	4b63      	ldr	r3, [pc, #396]	@ (8009518 <Fun_RS485_Data_Response+0x6a8>)
 800938a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800938e:	463b      	mov	r3, r7
 8009390:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fa61 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch2_Volt;
 800939a:	4b60      	ldr	r3, [pc, #384]	@ (800951c <Fun_RS485_Data_Response+0x6ac>)
 800939c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80093a0:	463b      	mov	r3, r7
 80093a2:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fa58 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch5_Volt;
 80093ac:	4b5c      	ldr	r3, [pc, #368]	@ (8009520 <Fun_RS485_Data_Response+0x6b0>)
 80093ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80093b2:	463b      	mov	r3, r7
 80093b4:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fa4f 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch4_Volt;
 80093be:	4b59      	ldr	r3, [pc, #356]	@ (8009524 <Fun_RS485_Data_Response+0x6b4>)
 80093c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80093c4:	463b      	mov	r3, r7
 80093c6:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fa46 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch3_Volt;
 80093d0:	4b55      	ldr	r3, [pc, #340]	@ (8009528 <Fun_RS485_Data_Response+0x6b8>)
 80093d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80093d6:	463b      	mov	r3, r7
 80093d8:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fa3d 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac3_Ch1_Volt;
 80093e2:	4b52      	ldr	r3, [pc, #328]	@ (800952c <Fun_RS485_Data_Response+0x6bc>)
 80093e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80093e8:	463b      	mov	r3, r7
 80093ea:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fa34 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Encoder_1;
 80093f4:	4b4e      	ldr	r3, [pc, #312]	@ (8009530 <Fun_RS485_Data_Response+0x6c0>)
 80093f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80093fa:	463b      	mov	r3, r7
 80093fc:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fa2b 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Encoder_2;
 8009406:	4b4b      	ldr	r3, [pc, #300]	@ (8009534 <Fun_RS485_Data_Response+0x6c4>)
 8009408:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800940c:	463b      	mov	r3, r7
 800940e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009412:	4618      	mov	r0, r3
 8009414:	f000 fa22 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac3_Ch0_Volt;
 8009418:	4b47      	ldr	r3, [pc, #284]	@ (8009538 <Fun_RS485_Data_Response+0x6c8>)
 800941a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800941e:	463b      	mov	r3, r7
 8009420:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009424:	4618      	mov	r0, r3
 8009426:	f000 fa19 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.WinchDrumHydMotorASpeed;
 800942a:	4b44      	ldr	r3, [pc, #272]	@ (800953c <Fun_RS485_Data_Response+0x6cc>)
 800942c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009430:	463b      	mov	r3, r7
 8009432:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fa10 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.WinchDrumHydMotorBSpeed;
 800943c:	4b40      	ldr	r3, [pc, #256]	@ (8009540 <Fun_RS485_Data_Response+0x6d0>)
 800943e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009442:	463b      	mov	r3, r7
 8009444:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fa07 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.AlignHydMotorSpeed;
 800944e:	4b3d      	ldr	r3, [pc, #244]	@ (8009544 <Fun_RS485_Data_Response+0x6d4>)
 8009450:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009454:	463b      	mov	r3, r7
 8009456:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800945a:	4618      	mov	r0, r3
 800945c:	f000 f9fe 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac5_Ch3_Volt;
 8009460:	4b39      	ldr	r3, [pc, #228]	@ (8009548 <Fun_RS485_Data_Response+0x6d8>)
 8009462:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009466:	463b      	mov	r3, r7
 8009468:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800946c:	4618      	mov	r0, r3
 800946e:	f000 f9f5 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch7_Volt;
 8009472:	4b36      	ldr	r3, [pc, #216]	@ (800954c <Fun_RS485_Data_Response+0x6dc>)
 8009474:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009478:	463b      	mov	r3, r7
 800947a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800947e:	4618      	mov	r0, r3
 8009480:	f000 f9ec 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch6_Volt;
 8009484:	4b32      	ldr	r3, [pc, #200]	@ (8009550 <Fun_RS485_Data_Response+0x6e0>)
 8009486:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800948a:	463b      	mov	r3, r7
 800948c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009490:	4618      	mov	r0, r3
 8009492:	f000 f9e3 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac5_Ch5_Volt;
 8009496:	4b2f      	ldr	r3, [pc, #188]	@ (8009554 <Fun_RS485_Data_Response+0x6e4>)
 8009498:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800949c:	463b      	mov	r3, r7
 800949e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 f9da 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac3_Ch2_Volt;
 80094a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009558 <Fun_RS485_Data_Response+0x6e8>)
 80094aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80094ae:	463b      	mov	r3, r7
 80094b0:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 f9d1 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch9_Volt;
 80094ba:	4b28      	ldr	r3, [pc, #160]	@ (800955c <Fun_RS485_Data_Response+0x6ec>)
 80094bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80094c0:	463b      	mov	r3, r7
 80094c2:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 f9c8 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch8_Volt;
 80094cc:	4b24      	ldr	r3, [pc, #144]	@ (8009560 <Fun_RS485_Data_Response+0x6f0>)
 80094ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80094d2:	463b      	mov	r3, r7
 80094d4:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80094d8:	4618      	mov	r0, r3
 80094da:	f000 f9bf 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac5_Ch0_Volt;
 80094de:	4b21      	ldr	r3, [pc, #132]	@ (8009564 <Fun_RS485_Data_Response+0x6f4>)
 80094e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80094e4:	463b      	mov	r3, r7
 80094e6:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 f9b6 	bl	800985c <Fun_RS485_Convert_Float_To_UC>
 80094f0:	e03a      	b.n	8009568 <Fun_RS485_Data_Response+0x6f8>
 80094f2:	bf00      	nop
 80094f4:	20000154 	.word	0x20000154
 80094f8:	20000d90 	.word	0x20000d90
 80094fc:	20000178 	.word	0x20000178
 8009500:	20000174 	.word	0x20000174
 8009504:	2000017c 	.word	0x2000017c
 8009508:	2000018c 	.word	0x2000018c
 800950c:	20000190 	.word	0x20000190
 8009510:	20000184 	.word	0x20000184
 8009514:	20000188 	.word	0x20000188
 8009518:	20000180 	.word	0x20000180
 800951c:	200001cc 	.word	0x200001cc
 8009520:	200001d8 	.word	0x200001d8
 8009524:	200001d4 	.word	0x200001d4
 8009528:	200001d0 	.word	0x200001d0
 800952c:	200001ac 	.word	0x200001ac
 8009530:	20000194 	.word	0x20000194
 8009534:	20000198 	.word	0x20000198
 8009538:	200001a8 	.word	0x200001a8
 800953c:	2000019c 	.word	0x2000019c
 8009540:	200001a0 	.word	0x200001a0
 8009544:	200001a4 	.word	0x200001a4
 8009548:	20000208 	.word	0x20000208
 800954c:	200001e0 	.word	0x200001e0
 8009550:	200001dc 	.word	0x200001dc
 8009554:	20000210 	.word	0x20000210
 8009558:	200001b0 	.word	0x200001b0
 800955c:	200001e8 	.word	0x200001e8
 8009560:	200001e4 	.word	0x200001e4
 8009564:	200001fc 	.word	0x200001fc

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac3_Ch3_Volt;
 8009568:	4b9d      	ldr	r3, [pc, #628]	@ (80097e0 <Fun_RS485_Data_Response+0x970>)
 800956a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800956e:	463b      	mov	r3, r7
 8009570:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009574:	4618      	mov	r0, r3
 8009576:	f000 f971 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch11_Volt;
 800957a:	4b9a      	ldr	r3, [pc, #616]	@ (80097e4 <Fun_RS485_Data_Response+0x974>)
 800957c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009580:	463b      	mov	r3, r7
 8009582:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009586:	4618      	mov	r0, r3
 8009588:	f000 f968 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch10_Volt;
 800958c:	4b96      	ldr	r3, [pc, #600]	@ (80097e8 <Fun_RS485_Data_Response+0x978>)
 800958e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009592:	463b      	mov	r3, r7
 8009594:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009598:	4618      	mov	r0, r3
 800959a:	f000 f95f 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac5_Ch6_Volt;
 800959e:	4b93      	ldr	r3, [pc, #588]	@ (80097ec <Fun_RS485_Data_Response+0x97c>)
 80095a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80095a4:	463b      	mov	r3, r7
 80095a6:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 f956 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac3_Ch4_Volt;
 80095b0:	4b8f      	ldr	r3, [pc, #572]	@ (80097f0 <Fun_RS485_Data_Response+0x980>)
 80095b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80095b6:	463b      	mov	r3, r7
 80095b8:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 f94d 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch13_Volt;
 80095c2:	4b8c      	ldr	r3, [pc, #560]	@ (80097f4 <Fun_RS485_Data_Response+0x984>)
 80095c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80095c8:	463b      	mov	r3, r7
 80095ca:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 f944 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac4_Ch12_Volt;
 80095d4:	4b88      	ldr	r3, [pc, #544]	@ (80097f8 <Fun_RS485_Data_Response+0x988>)
 80095d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80095da:	463b      	mov	r3, r7
 80095dc:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 f93b 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac5_Ch1_Volt;
 80095e6:	4b85      	ldr	r3, [pc, #532]	@ (80097fc <Fun_RS485_Data_Response+0x98c>)
 80095e8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80095ec:	463b      	mov	r3, r7
 80095ee:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 f932 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac3_Ch5_Volt;
 80095f8:	4b81      	ldr	r3, [pc, #516]	@ (8009800 <Fun_RS485_Data_Response+0x990>)
 80095fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80095fe:	463b      	mov	r3, r7
 8009600:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009604:	4618      	mov	r0, r3
 8009606:	f000 f929 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac5_Ch7_Volt;
 800960a:	4b7e      	ldr	r3, [pc, #504]	@ (8009804 <Fun_RS485_Data_Response+0x994>)
 800960c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009610:	463b      	mov	r3, r7
 8009612:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009616:	4618      	mov	r0, r3
 8009618:	f000 f920 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac5_Ch2_Volt;
 800961c:	4b7a      	ldr	r3, [pc, #488]	@ (8009808 <Fun_RS485_Data_Response+0x998>)
 800961e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009622:	463b      	mov	r3, r7
 8009624:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009628:	4618      	mov	r0, r3
 800962a:	f000 f917 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.Dac5_Ch4_Volt;
 800962e:	4b77      	ldr	r3, [pc, #476]	@ (800980c <Fun_RS485_Data_Response+0x99c>)
 8009630:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009634:	463b      	mov	r3, r7
 8009636:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800963a:	4618      	mov	r0, r3
 800963c:	f000 f90e 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.AO_Spare_01;
 8009640:	4b73      	ldr	r3, [pc, #460]	@ (8009810 <Fun_RS485_Data_Response+0x9a0>)
 8009642:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009646:	463b      	mov	r3, r7
 8009648:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800964c:	4618      	mov	r0, r3
 800964e:	f000 f905 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.AO_Spare_02;
 8009652:	4b70      	ldr	r3, [pc, #448]	@ (8009814 <Fun_RS485_Data_Response+0x9a4>)
 8009654:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 8009658:	463b      	mov	r3, r7
 800965a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f8fc 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.Float_Data.AO_Spare_03;
 8009664:	4b6c      	ldr	r3, [pc, #432]	@ (8009818 <Fun_RS485_Data_Response+0x9a8>)
 8009666:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800966a:	463b      	mov	r3, r7
 800966c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009670:	4618      	mov	r0, r3
 8009672:	f000 f8f3 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.LWS_C_HILS[0];
 8009676:	4b69      	ldr	r3, [pc, #420]	@ (800981c <Fun_RS485_Data_Response+0x9ac>)
 8009678:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800967c:	463b      	mov	r3, r7
 800967e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009682:	4618      	mov	r0, r3
 8009684:	f000 f8ea 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.LWS_C_HILS[1];
 8009688:	4b65      	ldr	r3, [pc, #404]	@ (8009820 <Fun_RS485_Data_Response+0x9b0>)
 800968a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800968e:	463b      	mov	r3, r7
 8009690:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009694:	4618      	mov	r0, r3
 8009696:	f000 f8e1 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.LWS_C_HILS[2];
 800969a:	4b62      	ldr	r3, [pc, #392]	@ (8009824 <Fun_RS485_Data_Response+0x9b4>)
 800969c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80096a0:	463b      	mov	r3, r7
 80096a2:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 f8d8 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.LWS_C_HILS[3];
 80096ac:	4b5e      	ldr	r3, [pc, #376]	@ (8009828 <Fun_RS485_Data_Response+0x9b8>)
 80096ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80096b2:	463b      	mov	r3, r7
 80096b4:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 f8cf 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.LWS_C_HILS[4];
 80096be:	4b5b      	ldr	r3, [pc, #364]	@ (800982c <Fun_RS485_Data_Response+0x9bc>)
 80096c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80096c4:	463b      	mov	r3, r7
 80096c6:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 f8c6 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.LWS_C_HILS[5];
 80096d0:	4b57      	ldr	r3, [pc, #348]	@ (8009830 <Fun_RS485_Data_Response+0x9c0>)
 80096d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80096d6:	463b      	mov	r3, r7
 80096d8:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 f8bd 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.LWS_C_HILS[6];
 80096e2:	4b54      	ldr	r3, [pc, #336]	@ (8009834 <Fun_RS485_Data_Response+0x9c4>)
 80096e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80096e8:	463b      	mov	r3, r7
 80096ea:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 f8b4 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.LWS_C_HILS[7];
 80096f4:	4b50      	ldr	r3, [pc, #320]	@ (8009838 <Fun_RS485_Data_Response+0x9c8>)
 80096f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80096fa:	463b      	mov	r3, r7
 80096fc:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009700:	4618      	mov	r0, r3
 8009702:	f000 f8ab 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.LWS_C_HILS[8];
 8009706:	4b4d      	ldr	r3, [pc, #308]	@ (800983c <Fun_RS485_Data_Response+0x9cc>)
 8009708:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800970c:	463b      	mov	r3, r7
 800970e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f8a2 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Dummy_Int = (uint8_t *)&Control.LWS_C_HILS[9];
 8009718:	4b49      	ldr	r3, [pc, #292]	@ (8009840 <Fun_RS485_Data_Response+0x9d0>)
 800971a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 800971e:	463b      	mov	r3, r7
 8009720:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009724:	4618      	mov	r0, r3
 8009726:	f000 f899 	bl	800985c <Fun_RS485_Convert_Float_To_UC>

	Size = CR_DATA_SIZE * 2 + F_HEAD_SIZE;
 800972a:	23f4      	movs	r3, #244	@ 0xf4
 800972c:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130

	// CHECK SUM
	Count = 1;
 8009730:	2301      	movs	r3, #1
 8009732:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	for(uint16_t i = 1; i < Size; i++)
 8009736:	2301      	movs	r3, #1
 8009738:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 800973c:	e016      	b.n	800976c <Fun_RS485_Data_Response+0x8fc>
	{
		Check_Sum += Tx_Buffer[i];
 800973e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8009742:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009746:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800974a:	5cd3      	ldrb	r3, [r2, r3]
 800974c:	461a      	mov	r2, r3
 800974e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8009752:	4413      	add	r3, r2
 8009754:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		Count++;
 8009758:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800975c:	3301      	adds	r3, #1
 800975e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	for(uint16_t i = 1; i < Size; i++)
 8009762:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8009766:	3301      	adds	r3, #1
 8009768:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 800976c:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 8009770:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8009774:	429a      	cmp	r2, r3
 8009776:	d3e2      	bcc.n	800973e <Fun_RS485_Data_Response+0x8ce>
	}
	Tx_Buffer[Count] = Check_Sum & 0xff;
 8009778:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800977c:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 8009780:	b2d1      	uxtb	r1, r2
 8009782:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009786:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800978a:	54d1      	strb	r1, [r2, r3]
	Count++;
 800978c:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009790:	3301      	adds	r3, #1
 8009792:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136

    // STX
	Tx_Buffer[F_STX] = FRAME_STX;
 8009796:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800979a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800979e:	227e      	movs	r2, #126	@ 0x7e
 80097a0:	701a      	strb	r2, [r3, #0]

    // ETX
	Tx_Buffer[Count++] = FRAME_ETX;
 80097a2:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	f8a7 2136 	strh.w	r2, [r7, #310]	@ 0x136
 80097ac:	461a      	mov	r2, r3
 80097ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80097b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80097b6:	21e7      	movs	r1, #231	@ 0xe7
 80097b8:	5499      	strb	r1, [r3, r2]

    Size = Count;
 80097ba:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80097be:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130

    Fun_RS485_Transmit_Await(Tx_Buffer ,Size);
 80097c2:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 80097c6:	463b      	mov	r3, r7
 80097c8:	4611      	mov	r1, r2
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe ff70 	bl	80086b0 <Fun_RS485_Transmit_Await>

    FUN_ADC_AvgValueReset();
 80097d0:	f7f7 faea 	bl	8000da8 <FUN_ADC_AvgValueReset>
}
 80097d4:	bf00      	nop
 80097d6:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	200001b4 	.word	0x200001b4
 80097e4:	200001f0 	.word	0x200001f0
 80097e8:	200001ec 	.word	0x200001ec
 80097ec:	20000214 	.word	0x20000214
 80097f0:	200001b8 	.word	0x200001b8
 80097f4:	200001f8 	.word	0x200001f8
 80097f8:	200001f4 	.word	0x200001f4
 80097fc:	20000200 	.word	0x20000200
 8009800:	200001bc 	.word	0x200001bc
 8009804:	20000218 	.word	0x20000218
 8009808:	20000204 	.word	0x20000204
 800980c:	2000020c 	.word	0x2000020c
 8009810:	2000021c 	.word	0x2000021c
 8009814:	20000220 	.word	0x20000220
 8009818:	20000224 	.word	0x20000224
 800981c:	20000228 	.word	0x20000228
 8009820:	2000022c 	.word	0x2000022c
 8009824:	20000230 	.word	0x20000230
 8009828:	20000234 	.word	0x20000234
 800982c:	20000238 	.word	0x20000238
 8009830:	2000023c 	.word	0x2000023c
 8009834:	20000240 	.word	0x20000240
 8009838:	20000244 	.word	0x20000244
 800983c:	20000248 	.word	0x20000248
 8009840:	2000024c 	.word	0x2000024c

08009844 <FUN_RS485_Ctrl_hils_action_U1>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	HILS Action												*/
/****************************************************************************/
uint8_t FUN_RS485_Ctrl_hils_action_U1(void)
{
 8009844:	b480      	push	{r7}
 8009846:	af00      	add	r7, sp, #0
//	FUN_GPO_Output(OUTPUT_PORT_NUM_43,	1);		// 투인양장치 : 압력스위치(세척기)
//	FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH7, 0);
//	FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH2, 0);
//	FUN_DAC_Converter_set_dac_code(DAC5_CH_SEL, DAC5_CH4, 0);
//	FUN_DAC_Converter_set_dac_code(DAC4_CH_SEL, DAC4_CH2, 10);// 동력공급장치: 온도센서(저유기조립체)
	return RS485.HILS_Start_Stop_Cmd;
 8009848:	4b03      	ldr	r3, [pc, #12]	@ (8009858 <FUN_RS485_Ctrl_hils_action_U1+0x14>)
 800984a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
}
 800984e:	4618      	mov	r0, r3
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	20000d90 	.word	0x20000d90

0800985c <Fun_RS485_Convert_Float_To_UC>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	float to UC												*/
/****************************************************************************/
void Fun_RS485_Convert_Float_To_UC(uint8_t *Tx_Buffer ,uint8_t *Dummy_Int)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = *(Dummy_Int + 3);
 8009866:	4b1f      	ldr	r3, [pc, #124]	@ (80098e4 <Fun_RS485_Convert_Float_To_UC+0x88>)
 8009868:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	b291      	uxth	r1, r2
 8009870:	4a1c      	ldr	r2, [pc, #112]	@ (80098e4 <Fun_RS485_Convert_Float_To_UC+0x88>)
 8009872:	f8a2 14be 	strh.w	r1, [r2, #1214]	@ 0x4be
 8009876:	461a      	mov	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4413      	add	r3, r2
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	78d2      	ldrb	r2, [r2, #3]
 8009880:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = *(Dummy_Int + 2);
 8009882:	4b18      	ldr	r3, [pc, #96]	@ (80098e4 <Fun_RS485_Convert_Float_To_UC+0x88>)
 8009884:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	b291      	uxth	r1, r2
 800988c:	4a15      	ldr	r2, [pc, #84]	@ (80098e4 <Fun_RS485_Convert_Float_To_UC+0x88>)
 800988e:	f8a2 14be 	strh.w	r1, [r2, #1214]	@ 0x4be
 8009892:	461a      	mov	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4413      	add	r3, r2
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	7892      	ldrb	r2, [r2, #2]
 800989c:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = *(Dummy_Int + 1);
 800989e:	4b11      	ldr	r3, [pc, #68]	@ (80098e4 <Fun_RS485_Convert_Float_To_UC+0x88>)
 80098a0:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	b291      	uxth	r1, r2
 80098a8:	4a0e      	ldr	r2, [pc, #56]	@ (80098e4 <Fun_RS485_Convert_Float_To_UC+0x88>)
 80098aa:	f8a2 14be 	strh.w	r1, [r2, #1214]	@ 0x4be
 80098ae:	461a      	mov	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4413      	add	r3, r2
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	7852      	ldrb	r2, [r2, #1]
 80098b8:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[RS485.Uart7_Tx_Data_Length++] = *(Dummy_Int + 0);
 80098ba:	4b0a      	ldr	r3, [pc, #40]	@ (80098e4 <Fun_RS485_Convert_Float_To_UC+0x88>)
 80098bc:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	@ 0x4be
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	b291      	uxth	r1, r2
 80098c4:	4a07      	ldr	r2, [pc, #28]	@ (80098e4 <Fun_RS485_Convert_Float_To_UC+0x88>)
 80098c6:	f8a2 14be 	strh.w	r1, [r2, #1214]	@ 0x4be
 80098ca:	461a      	mov	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4413      	add	r3, r2
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	7812      	ldrb	r2, [r2, #0]
 80098d4:	701a      	strb	r2, [r3, #0]
}
 80098d6:	bf00      	nop
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	20000d90 	.word	0x20000d90

080098e8 <Fun_RS485_Parameter_Read>:
/****************************************************************************/
/*	Overview	:	Parameter Read											*/
/*	Return value:	void													*/
/****************************************************************************/
void Fun_RS485_Parameter_Read(void)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b0d0      	sub	sp, #320	@ 0x140
 80098ec:	af00      	add	r7, sp, #0
	uint16_t Size = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t Count = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	uint16_t Check_Sum = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	uint8_t *Dummy_Int = 0;
 8009900:	2300      	movs	r3, #0
 8009902:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	uint8_t Tx_Buffer[TX_BUF_LENGTH];
//	uint32_t buf[80];

	Tx_Buffer[F_STX] = FRAME_STX;
 8009906:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800990a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800990e:	227e      	movs	r2, #126	@ 0x7e
 8009910:	701a      	strb	r2, [r3, #0]

	// SEQ_NO (1 ~ 100)
	if(RS485.Uart7_Parameter_SEQ_Num == 100)
 8009912:	4b62      	ldr	r3, [pc, #392]	@ (8009a9c <Fun_RS485_Parameter_Read+0x1b4>)
 8009914:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 8009918:	2b64      	cmp	r3, #100	@ 0x64
 800991a:	d103      	bne.n	8009924 <Fun_RS485_Parameter_Read+0x3c>
	{
		RS485.Uart7_Parameter_SEQ_Num = 0;
 800991c:	4b5f      	ldr	r3, [pc, #380]	@ (8009a9c <Fun_RS485_Parameter_Read+0x1b4>)
 800991e:	2200      	movs	r2, #0
 8009920:	f883 24c9 	strb.w	r2, [r3, #1225]	@ 0x4c9
	}
	Tx_Buffer[F_SEQ_NO] = ++RS485.Uart7_Parameter_SEQ_Num;
 8009924:	4b5d      	ldr	r3, [pc, #372]	@ (8009a9c <Fun_RS485_Parameter_Read+0x1b4>)
 8009926:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 800992a:	3301      	adds	r3, #1
 800992c:	b2da      	uxtb	r2, r3
 800992e:	4b5b      	ldr	r3, [pc, #364]	@ (8009a9c <Fun_RS485_Parameter_Read+0x1b4>)
 8009930:	f883 24c9 	strb.w	r2, [r3, #1225]	@ 0x4c9
 8009934:	4b59      	ldr	r3, [pc, #356]	@ (8009a9c <Fun_RS485_Parameter_Read+0x1b4>)
 8009936:	f893 24c9 	ldrb.w	r2, [r3, #1225]	@ 0x4c9
 800993a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800993e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8009942:	71da      	strb	r2, [r3, #7]

	// DATA_LEN
	Tx_Buffer[F_DATA_LEN_0] = (uint8_t)((CR_PARA_SIZE * 4) >> 8);
 8009944:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009948:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800994c:	2200      	movs	r2, #0
 800994e:	715a      	strb	r2, [r3, #5]
	Tx_Buffer[F_DATA_LEN_1] = (uint8_t)((CR_PARA_SIZE * 4) & 0xFF);
 8009950:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009954:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8009958:	2250      	movs	r2, #80	@ 0x50
 800995a:	719a      	strb	r2, [r3, #6]

	// MSG_ID{
	Tx_Buffer[F_MSG_ID] = MSG_CTRL_PARA;
 800995c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009960:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8009964:	2206      	movs	r2, #6
 8009966:	705a      	strb	r2, [r3, #1]
	// TX ID
	Tx_Buffer[F_TX_ID] = LWS_CTLR_A;
 8009968:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800996c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8009970:	2220      	movs	r2, #32
 8009972:	709a      	strb	r2, [r3, #2]
	// RX_ID
	Tx_Buffer[F_RX_ID] = LWS_GUI;
 8009974:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009978:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800997c:	2210      	movs	r2, #16
 800997e:	70da      	strb	r2, [r3, #3]
	// CMD CODE
	Tx_Buffer[F_CMD_CODE] = PARA_RESPONSE;
 8009980:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009984:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8009988:	2265      	movs	r2, #101	@ 0x65
 800998a:	711a      	strb	r2, [r3, #4]

//	memcpy(buf, RS485.LwsA_Parameter, 80);
//	memcpy(buf, RS485.LwsA_Parameter, 80+156);
//	uint32_t *buf = (uint32_t *)&RS485.LwsA_Parameter;

	RS485.Uart7_Tx_Data_Length = F_HEAD_SIZE;
 800998c:	4b43      	ldr	r3, [pc, #268]	@ (8009a9c <Fun_RS485_Parameter_Read+0x1b4>)
 800998e:	2208      	movs	r2, #8
 8009990:	f8a3 24be 	strh.w	r2, [r3, #1214]	@ 0x4be

	// DATA
	for(uint16_t i = 0; i < CR_PARA_SIZE; i++)
 8009994:	2300      	movs	r3, #0
 8009996:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 800999a:	e023      	b.n	80099e4 <Fun_RS485_Parameter_Read+0xfc>
//		Tx_Buffer[F_HEAD_SIZE + ii++] = (uint8_t)(buf[i] >> 24);
//		Tx_Buffer[F_HEAD_SIZE + ii++] = (uint8_t)(buf[i] >> 16);
//		Tx_Buffer[F_HEAD_SIZE + ii++] = (uint8_t)(buf[i] >> 8);
//		Tx_Buffer[F_HEAD_SIZE + ii++] = (uint8_t)(buf[i]);

		if(i >= 16)
 800999c:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80099a0:	2b0f      	cmp	r3, #15
 80099a2:	d90a      	bls.n	80099ba <Fun_RS485_Parameter_Read+0xd2>
		{
			RS485.LwsA_Parameter[i] = 0;
 80099a4:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80099a8:	4a3c      	ldr	r2, [pc, #240]	@ (8009a9c <Fun_RS485_Parameter_Read+0x1b4>)
 80099aa:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	3304      	adds	r3, #4
 80099b4:	f04f 0200 	mov.w	r2, #0
 80099b8:	601a      	str	r2, [r3, #0]
		}
		Dummy_Int = (uint8_t *)&RS485.LwsA_Parameter[i];
 80099ba:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80099be:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4a35      	ldr	r2, [pc, #212]	@ (8009a9c <Fun_RS485_Parameter_Read+0x1b4>)
 80099c6:	4413      	add	r3, r2
 80099c8:	3304      	adds	r3, #4
 80099ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
		Fun_RS485_Convert_Float_To_UC(Tx_Buffer, Dummy_Int);
 80099ce:	1d3b      	adds	r3, r7, #4
 80099d0:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff ff41 	bl	800985c <Fun_RS485_Convert_Float_To_UC>
	for(uint16_t i = 0; i < CR_PARA_SIZE; i++)
 80099da:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80099de:	3301      	adds	r3, #1
 80099e0:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 80099e4:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80099e8:	2b13      	cmp	r3, #19
 80099ea:	d9d7      	bls.n	800999c <Fun_RS485_Parameter_Read+0xb4>
	}

	Size = CR_PARA_SIZE * 4 + F_HEAD_SIZE;
 80099ec:	2358      	movs	r3, #88	@ 0x58
 80099ee:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136

	// CHECK SUM
	Count = 1;
 80099f2:	2301      	movs	r3, #1
 80099f4:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	for(uint16_t i = 1; i < Size; i++)
 80099f8:	2301      	movs	r3, #1
 80099fa:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 80099fe:	e016      	b.n	8009a2e <Fun_RS485_Parameter_Read+0x146>
	{
		Check_Sum += Tx_Buffer[i];
 8009a00:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8009a04:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009a08:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8009a0c:	5cd3      	ldrb	r3, [r2, r3]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8009a14:	4413      	add	r3, r2
 8009a16:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
		Count++;
 8009a1a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8009a1e:	3301      	adds	r3, #1
 8009a20:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
	for(uint16_t i = 1; i < Size; i++)
 8009a24:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8009a28:	3301      	adds	r3, #1
 8009a2a:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 8009a2e:	f8b7 2138 	ldrh.w	r2, [r7, #312]	@ 0x138
 8009a32:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d3e2      	bcc.n	8009a00 <Fun_RS485_Parameter_Read+0x118>
	}
	Tx_Buffer[Count] = Check_Sum & 0xff;
 8009a3a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8009a3e:	f8b7 213c 	ldrh.w	r2, [r7, #316]	@ 0x13c
 8009a42:	b2d1      	uxtb	r1, r2
 8009a44:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009a48:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8009a4c:	54d1      	strb	r1, [r2, r3]
	Count++;
 8009a4e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8009a52:	3301      	adds	r3, #1
 8009a54:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e

    // STX
	Tx_Buffer[F_STX] = FRAME_STX;
 8009a58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009a5c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8009a60:	227e      	movs	r2, #126	@ 0x7e
 8009a62:	701a      	strb	r2, [r3, #0]

    // ETX
	Tx_Buffer[Count++] = FRAME_ETX;
 8009a64:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	f8a7 213e 	strh.w	r2, [r7, #318]	@ 0x13e
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009a74:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8009a78:	21e7      	movs	r1, #231	@ 0xe7
 8009a7a:	5499      	strb	r1, [r3, r2]

	Size = Count;
 8009a7c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8009a80:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136

	Fun_RS485_Transmit_Await(Tx_Buffer, Size);
 8009a84:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8009a88:	1d3b      	adds	r3, r7, #4
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fe0f 	bl	80086b0 <Fun_RS485_Transmit_Await>
}
 8009a92:	bf00      	nop
 8009a94:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20000d90 	.word	0x20000d90

08009aa0 <FUN_TIM_Init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_TIM_Init(void)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim2);
 8009aa4:	4803      	ldr	r0, [pc, #12]	@ (8009ab4 <FUN_TIM_Init+0x14>)
 8009aa6:	f006 f8a5 	bl	800fbf4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8009aaa:	4802      	ldr	r0, [pc, #8]	@ (8009ab4 <FUN_TIM_Init+0x14>)
 8009aac:	f006 f956 	bl	800fd5c <HAL_TIM_Base_Start_IT>
}
 8009ab0:	bf00      	nop
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	20001624 	.word	0x20001624

08009ab8 <HAL_TIM_PeriodElapsedCallback>:
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
uint32_t Check_100ms = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009abc:	b082      	sub	sp, #8
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM1)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a72      	ldr	r2, [pc, #456]	@ (8009c90 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d101      	bne.n	8009ad0 <HAL_TIM_PeriodElapsedCallback+0x18>
	  {
	    HAL_IncTick();
 8009acc:	f001 fdd4 	bl	800b678 <HAL_IncTick>
	  }

	if(htim->Instance==TIM2)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad8:	f040 80b7 	bne.w	8009c4a <HAL_TIM_PeriodElapsedCallback+0x192>
	{
		if((u4f_tim2_cnt % (TIMER_100us + 1)) == 0) {				// 100us
 8009adc:	4b6d      	ldr	r3, [pc, #436]	@ (8009c94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8009ade:	6819      	ldr	r1, [r3, #0]
 8009ae0:	4b6d      	ldr	r3, [pc, #436]	@ (8009c98 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8009ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8009ae6:	08da      	lsrs	r2, r3, #3
 8009ae8:	4613      	mov	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	005b      	lsls	r3, r3, #1
 8009af0:	1aca      	subs	r2, r1, r3
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	d102      	bne.n	8009afc <HAL_TIM_PeriodElapsedCallback+0x44>
			u1f_tim_100us_trg = 1;
 8009af6:	4b69      	ldr	r3, [pc, #420]	@ (8009c9c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8009af8:	2201      	movs	r2, #1
 8009afa:	701a      	strb	r2, [r3, #0]
		}

		if((u4f_tim2_cnt % (TIMER_250us + 1)) == 0) {				// 250us
 8009afc:	4b65      	ldr	r3, [pc, #404]	@ (8009c94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8009afe:	6819      	ldr	r1, [r3, #0]
 8009b00:	4b67      	ldr	r3, [pc, #412]	@ (8009ca0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8009b02:	fba3 2301 	umull	r2, r3, r3, r1
 8009b06:	08da      	lsrs	r2, r3, #3
 8009b08:	4613      	mov	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	009a      	lsls	r2, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	1aca      	subs	r2, r1, r3
 8009b14:	2a00      	cmp	r2, #0
 8009b16:	d102      	bne.n	8009b1e <HAL_TIM_PeriodElapsedCallback+0x66>
			u1f_tim_250us_trg = 1;
 8009b18:	4b62      	ldr	r3, [pc, #392]	@ (8009ca4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	701a      	strb	r2, [r3, #0]
		}

		if((u4f_tim2_cnt % (TIMER_500us + 1)) == 0) {				// 500us
 8009b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8009c94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	4b5f      	ldr	r3, [pc, #380]	@ (8009ca0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8009b24:	fba3 1302 	umull	r1, r3, r3, r2
 8009b28:	091b      	lsrs	r3, r3, #4
 8009b2a:	2132      	movs	r1, #50	@ 0x32
 8009b2c:	fb01 f303 	mul.w	r3, r1, r3
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d102      	bne.n	8009b3c <HAL_TIM_PeriodElapsedCallback+0x84>
			u1f_tim_500us_trg = 1;
 8009b36:	4b5c      	ldr	r3, [pc, #368]	@ (8009ca8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8009b38:	2201      	movs	r2, #1
 8009b3a:	701a      	strb	r2, [r3, #0]
		}

		if((u4f_tim2_cnt % (TIMER_1ms + 1)) == 0) {					// 1ms
 8009b3c:	4b55      	ldr	r3, [pc, #340]	@ (8009c94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	4b57      	ldr	r3, [pc, #348]	@ (8009ca0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8009b42:	fba3 1302 	umull	r1, r3, r3, r2
 8009b46:	095b      	lsrs	r3, r3, #5
 8009b48:	2164      	movs	r1, #100	@ 0x64
 8009b4a:	fb01 f303 	mul.w	r3, r1, r3
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d102      	bne.n	8009b5a <HAL_TIM_PeriodElapsedCallback+0xa2>
			u1f_tim_1ms_trg = 1;
 8009b54:	4b55      	ldr	r3, [pc, #340]	@ (8009cac <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8009b56:	2201      	movs	r2, #1
 8009b58:	701a      	strb	r2, [r3, #0]
		}

		if((u4f_tim2_cnt % (TIMER_2ms + 1)) == 0) {					// 2ms
 8009b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8009c94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	4b50      	ldr	r3, [pc, #320]	@ (8009ca0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8009b60:	fba3 1302 	umull	r1, r3, r3, r2
 8009b64:	099b      	lsrs	r3, r3, #6
 8009b66:	21c8      	movs	r1, #200	@ 0xc8
 8009b68:	fb01 f303 	mul.w	r3, r1, r3
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10c      	bne.n	8009b8c <HAL_TIM_PeriodElapsedCallback+0xd4>
			u1f_tim_2ms_trg = 1;
 8009b72:	4b4f      	ldr	r3, [pc, #316]	@ (8009cb0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8009b74:	2201      	movs	r2, #1
 8009b76:	701a      	strb	r2, [r3, #0]
			Timer_Check++;
 8009b78:	4b4e      	ldr	r3, [pc, #312]	@ (8009cb4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	f112 0a01 	adds.w	sl, r2, #1
 8009b82:	f143 0b00 	adc.w	fp, r3, #0
 8009b86:	4b4b      	ldr	r3, [pc, #300]	@ (8009cb4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8009b88:	e9c3 ab00 	strd	sl, fp, [r3]
		}

		if((u4f_tim2_cnt % (TIMER_5ms + 1)) == 0) {					// 5ms
 8009b8c:	4b41      	ldr	r3, [pc, #260]	@ (8009c94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	4b49      	ldr	r3, [pc, #292]	@ (8009cb8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8009b92:	fba3 1302 	umull	r1, r3, r3, r2
 8009b96:	095b      	lsrs	r3, r3, #5
 8009b98:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8009b9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10c      	bne.n	8009bc0 <HAL_TIM_PeriodElapsedCallback+0x108>
			u1f_tim_5ms_trg = 1;
 8009ba6:	4b45      	ldr	r3, [pc, #276]	@ (8009cbc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
			Timer_Check_1++;
 8009bac:	4b44      	ldr	r3, [pc, #272]	@ (8009cc0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	f112 0801 	adds.w	r8, r2, #1
 8009bb6:	f143 0900 	adc.w	r9, r3, #0
 8009bba:	4b41      	ldr	r3, [pc, #260]	@ (8009cc0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8009bbc:	e9c3 8900 	strd	r8, r9, [r3]
		}

		if((u4f_tim2_cnt % (TIMER_10ms + 1)) == 0) {				// 10ms
 8009bc0:	4b34      	ldr	r3, [pc, #208]	@ (8009c94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8009cb8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8009bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8009bca:	099b      	lsrs	r3, r3, #6
 8009bcc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009bd0:	fb01 f303 	mul.w	r3, r1, r3
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10b      	bne.n	8009bf2 <HAL_TIM_PeriodElapsedCallback+0x13a>
			u1f_tim_10ms_trg = 1;
 8009bda:	4b3a      	ldr	r3, [pc, #232]	@ (8009cc4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8009bdc:	2201      	movs	r2, #1
 8009bde:	701a      	strb	r2, [r3, #0]
			Timer_Check_2++;
 8009be0:	4b39      	ldr	r3, [pc, #228]	@ (8009cc8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	1c54      	adds	r4, r2, #1
 8009be8:	f143 0500 	adc.w	r5, r3, #0
 8009bec:	4b36      	ldr	r3, [pc, #216]	@ (8009cc8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8009bee:	e9c3 4500 	strd	r4, r5, [r3]
		}

		if((u4f_tim2_cnt % (TIMER_100ms + 1)) == 2) {				// 100ms
 8009bf2:	4b28      	ldr	r3, [pc, #160]	@ (8009c94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	4b35      	ldr	r3, [pc, #212]	@ (8009ccc <HAL_TIM_PeriodElapsedCallback+0x214>)
 8009bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8009bfc:	0b5b      	lsrs	r3, r3, #13
 8009bfe:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009c02:	fb01 f303 	mul.w	r3, r1, r3
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d107      	bne.n	8009c1c <HAL_TIM_PeriodElapsedCallback+0x164>
			u1f_tim_100ms_trg = 1;
 8009c0c:	4b30      	ldr	r3, [pc, #192]	@ (8009cd0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8009c0e:	2201      	movs	r2, #1
 8009c10:	701a      	strb	r2, [r3, #0]
			Check_100ms++;
 8009c12:	4b30      	ldr	r3, [pc, #192]	@ (8009cd4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3301      	adds	r3, #1
 8009c18:	4a2e      	ldr	r2, [pc, #184]	@ (8009cd4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8009c1a:	6013      	str	r3, [r2, #0]
		}

		if((u4f_tim2_cnt % (TIMER_1000ms + 1)) == 2) {				// 1000ms
 8009c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8009c94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	0953      	lsrs	r3, r2, #5
 8009c22:	492d      	ldr	r1, [pc, #180]	@ (8009cd8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8009c24:	fba1 1303 	umull	r1, r3, r1, r3
 8009c28:	09db      	lsrs	r3, r3, #7
 8009c2a:	492c      	ldr	r1, [pc, #176]	@ (8009cdc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8009c2c:	fb01 f303 	mul.w	r3, r1, r3
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d102      	bne.n	8009c3c <HAL_TIM_PeriodElapsedCallback+0x184>
			u1f_tim_1000ms_trg = 1;
 8009c36:	4b2a      	ldr	r3, [pc, #168]	@ (8009ce0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8009c38:	2201      	movs	r2, #1
 8009c3a:	701a      	strb	r2, [r3, #0]
		}
		u4f_tim2_cnt++;
 8009c3c:	4b15      	ldr	r3, [pc, #84]	@ (8009c94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3301      	adds	r3, #1
 8009c42:	4a14      	ldr	r2, [pc, #80]	@ (8009c94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8009c44:	6013      	str	r3, [r2, #0]
		FUN_Encoder_Routine();
 8009c46:	f7f8 fc9b 	bl	8002580 <FUN_Encoder_Routine>
	}

	// 윈치드럼 유압모터 A 속도(TA)
	if(htim->Instance==TIM4)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a25      	ldr	r2, [pc, #148]	@ (8009ce4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d104      	bne.n	8009c5e <HAL_TIM_PeriodElapsedCallback+0x1a6>
	{
		Winch_A_Frequency_Output();
 8009c54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009c58:	4823      	ldr	r0, [pc, #140]	@ (8009ce8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8009c5a:	f003 f94a 	bl	800cef2 <HAL_GPIO_TogglePin>
	}

	// 윈치드럼 유압모터 B 속도(TA)
	if(htim->Instance==TIM5)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a22      	ldr	r2, [pc, #136]	@ (8009cec <HAL_TIM_PeriodElapsedCallback+0x234>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d103      	bne.n	8009c70 <HAL_TIM_PeriodElapsedCallback+0x1b8>
	{
		Winch_B_Frequency_Output();
 8009c68:	2110      	movs	r1, #16
 8009c6a:	4821      	ldr	r0, [pc, #132]	@ (8009cf0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8009c6c:	f003 f941 	bl	800cef2 <HAL_GPIO_TogglePin>
	}

	// 권선정렬 유압모터 속도(TA)
	if(htim->Instance==TIM7)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a1f      	ldr	r2, [pc, #124]	@ (8009cf4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d104      	bne.n	8009c84 <HAL_TIM_PeriodElapsedCallback+0x1cc>
	{
		Align_Frequency_Output();
 8009c7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009c7e:	481e      	ldr	r0, [pc, #120]	@ (8009cf8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8009c80:	f003 f937 	bl	800cef2 <HAL_GPIO_TogglePin>
	}
}
 8009c84:	bf00      	nop
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c8e:	bf00      	nop
 8009c90:	40010000 	.word	0x40010000
 8009c94:	20001260 	.word	0x20001260
 8009c98:	cccccccd 	.word	0xcccccccd
 8009c9c:	20001264 	.word	0x20001264
 8009ca0:	51eb851f 	.word	0x51eb851f
 8009ca4:	20001265 	.word	0x20001265
 8009ca8:	20001266 	.word	0x20001266
 8009cac:	20001267 	.word	0x20001267
 8009cb0:	20001268 	.word	0x20001268
 8009cb4:	20001270 	.word	0x20001270
 8009cb8:	10624dd3 	.word	0x10624dd3
 8009cbc:	20001269 	.word	0x20001269
 8009cc0:	20001278 	.word	0x20001278
 8009cc4:	2000126a 	.word	0x2000126a
 8009cc8:	20001280 	.word	0x20001280
 8009ccc:	d1b71759 	.word	0xd1b71759
 8009cd0:	2000126b 	.word	0x2000126b
 8009cd4:	20001288 	.word	0x20001288
 8009cd8:	0a7c5ac5 	.word	0x0a7c5ac5
 8009cdc:	000186a0 	.word	0x000186a0
 8009ce0:	2000126c 	.word	0x2000126c
 8009ce4:	40000800 	.word	0x40000800
 8009ce8:	40021400 	.word	0x40021400
 8009cec:	40000c00 	.word	0x40000c00
 8009cf0:	40022800 	.word	0x40022800
 8009cf4:	40001400 	.word	0x40001400
 8009cf8:	40022400 	.word	0x40022400

08009cfc <FUN_Frequency_Ctrl>:

void FUN_Frequency_Ctrl(uint8_t u1t_ch, uint16_t u2t_frequency)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	460a      	mov	r2, r1
 8009d06:	71fb      	strb	r3, [r7, #7]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	80bb      	strh	r3, [r7, #4]
	uint16_t u2t_freq_val = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	81fb      	strh	r3, [r7, #14]

	u2t_freq_val = (5000 / u2t_frequency ) - 1;
 8009d10:	88bb      	ldrh	r3, [r7, #4]
 8009d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d16:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	81fb      	strh	r3, [r7, #14]

	if(u1t_ch == Winch_A_SPEED)
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d10b      	bne.n	8009d3e <FUN_Frequency_Ctrl+0x42>
	{
		TIM4_User_Setting(10799,u2t_freq_val/2);
 8009d26:	89fb      	ldrh	r3, [r7, #14]
 8009d28:	085b      	lsrs	r3, r3, #1
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	f642 202f 	movw	r0, #10799	@ 0x2a2f
 8009d32:	f000 f82b 	bl	8009d8c <TIM4_User_Setting>
		HAL_TIM_Base_Start_IT(&htim4);
 8009d36:	4812      	ldr	r0, [pc, #72]	@ (8009d80 <FUN_Frequency_Ctrl+0x84>)
 8009d38:	f006 f810 	bl	800fd5c <HAL_TIM_Base_Start_IT>
	{
		TIM7_User_Setting(10799,u2t_freq_val/2);
		HAL_TIM_Base_Start_IT(&htim7);
	}
	else;
}
 8009d3c:	e01c      	b.n	8009d78 <FUN_Frequency_Ctrl+0x7c>
	else if(u1t_ch == Winch_B_SPEED)
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d10b      	bne.n	8009d5c <FUN_Frequency_Ctrl+0x60>
		TIM5_User_Setting(10799,u2t_freq_val/2);
 8009d44:	89fb      	ldrh	r3, [r7, #14]
 8009d46:	085b      	lsrs	r3, r3, #1
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	f642 202f 	movw	r0, #10799	@ 0x2a2f
 8009d50:	f000 f864 	bl	8009e1c <TIM5_User_Setting>
		HAL_TIM_Base_Start_IT(&htim5);
 8009d54:	480b      	ldr	r0, [pc, #44]	@ (8009d84 <FUN_Frequency_Ctrl+0x88>)
 8009d56:	f006 f801 	bl	800fd5c <HAL_TIM_Base_Start_IT>
}
 8009d5a:	e00d      	b.n	8009d78 <FUN_Frequency_Ctrl+0x7c>
	else if(u1t_ch == Align_SPEED)
 8009d5c:	79fb      	ldrb	r3, [r7, #7]
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d10a      	bne.n	8009d78 <FUN_Frequency_Ctrl+0x7c>
		TIM7_User_Setting(10799,u2t_freq_val/2);
 8009d62:	89fb      	ldrh	r3, [r7, #14]
 8009d64:	085b      	lsrs	r3, r3, #1
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	4619      	mov	r1, r3
 8009d6a:	f642 202f 	movw	r0, #10799	@ 0x2a2f
 8009d6e:	f000 f89d 	bl	8009eac <TIM7_User_Setting>
		HAL_TIM_Base_Start_IT(&htim7);
 8009d72:	4805      	ldr	r0, [pc, #20]	@ (8009d88 <FUN_Frequency_Ctrl+0x8c>)
 8009d74:	f005 fff2 	bl	800fd5c <HAL_TIM_Base_Start_IT>
}
 8009d78:	bf00      	nop
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	20001670 	.word	0x20001670
 8009d84:	200016bc 	.word	0x200016bc
 8009d88:	20001708 	.word	0x20001708

08009d8c <TIM4_User_Setting>:
/****************************************************************************/
/*	Overview	:	TIM4 Prescaler, Period 사용자 임의 설정 변경					*/
/*	Return value:	void													*/
/****************************************************************************/
void TIM4_User_Setting(uint16_t u2t_prescaler, uint16_t u2t_period)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08a      	sub	sp, #40	@ 0x28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	460a      	mov	r2, r1
 8009d96:	80fb      	strh	r3, [r7, #6]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	80bb      	strh	r3, [r7, #4]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8009d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009e14 <TIM4_User_Setting+0x88>)
 8009d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8009e18 <TIM4_User_Setting+0x8c>)
 8009da0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = u2t_prescaler;
 8009da2:	88fb      	ldrh	r3, [r7, #6]
 8009da4:	4a1b      	ldr	r2, [pc, #108]	@ (8009e14 <TIM4_User_Setting+0x88>)
 8009da6:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009da8:	4b1a      	ldr	r3, [pc, #104]	@ (8009e14 <TIM4_User_Setting+0x88>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = u2t_period;
 8009dae:	88bb      	ldrh	r3, [r7, #4]
 8009db0:	4a18      	ldr	r2, [pc, #96]	@ (8009e14 <TIM4_User_Setting+0x88>)
 8009db2:	60d3      	str	r3, [r2, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009db4:	4b17      	ldr	r3, [pc, #92]	@ (8009e14 <TIM4_User_Setting+0x88>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009dba:	4b16      	ldr	r3, [pc, #88]	@ (8009e14 <TIM4_User_Setting+0x88>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009dc0:	4814      	ldr	r0, [pc, #80]	@ (8009e14 <TIM4_User_Setting+0x88>)
 8009dc2:	f005 ff17 	bl	800fbf4 <HAL_TIM_Base_Init>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <TIM4_User_Setting+0x44>
  {
	  Error_Handler();
 8009dcc:	f000 fedc 	bl	800ab88 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009dd4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009dd6:	f107 0318 	add.w	r3, r7, #24
 8009dda:	4619      	mov	r1, r3
 8009ddc:	480d      	ldr	r0, [pc, #52]	@ (8009e14 <TIM4_User_Setting+0x88>)
 8009dde:	f006 f955 	bl	801008c <HAL_TIM_ConfigClockSource>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <TIM4_User_Setting+0x60>
  {
	  Error_Handler();
 8009de8:	f000 fece 	bl	800ab88 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009dec:	2300      	movs	r3, #0
 8009dee:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009df0:	2300      	movs	r3, #0
 8009df2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009df4:	f107 030c 	add.w	r3, r7, #12
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4806      	ldr	r0, [pc, #24]	@ (8009e14 <TIM4_User_Setting+0x88>)
 8009dfc:	f006 fb72 	bl	80104e4 <HAL_TIMEx_MasterConfigSynchronization>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <TIM4_User_Setting+0x7e>
  {
	  Error_Handler();
 8009e06:	f000 febf 	bl	800ab88 <Error_Handler>
  }

}
 8009e0a:	bf00      	nop
 8009e0c:	3728      	adds	r7, #40	@ 0x28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20001670 	.word	0x20001670
 8009e18:	40000800 	.word	0x40000800

08009e1c <TIM5_User_Setting>:
/****************************************************************************/
/*	Overview	:	TIM5 Prescaler, Period 사용자 임의 설정 변경					*/
/*	Return value:	void													*/
/****************************************************************************/
void TIM5_User_Setting(uint16_t u2t_prescaler, uint16_t u2t_period)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08a      	sub	sp, #40	@ 0x28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	460a      	mov	r2, r1
 8009e26:	80fb      	strh	r3, [r7, #6]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	80bb      	strh	r3, [r7, #4]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 8009e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ea4 <TIM5_User_Setting+0x88>)
 8009e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ea8 <TIM5_User_Setting+0x8c>)
 8009e30:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = u2t_prescaler;
 8009e32:	88fb      	ldrh	r3, [r7, #6]
 8009e34:	4a1b      	ldr	r2, [pc, #108]	@ (8009ea4 <TIM5_User_Setting+0x88>)
 8009e36:	6053      	str	r3, [r2, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e38:	4b1a      	ldr	r3, [pc, #104]	@ (8009ea4 <TIM5_User_Setting+0x88>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = u2t_period;
 8009e3e:	88bb      	ldrh	r3, [r7, #4]
 8009e40:	4a18      	ldr	r2, [pc, #96]	@ (8009ea4 <TIM5_User_Setting+0x88>)
 8009e42:	60d3      	str	r3, [r2, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e44:	4b17      	ldr	r3, [pc, #92]	@ (8009ea4 <TIM5_User_Setting+0x88>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e4a:	4b16      	ldr	r3, [pc, #88]	@ (8009ea4 <TIM5_User_Setting+0x88>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009e50:	4814      	ldr	r0, [pc, #80]	@ (8009ea4 <TIM5_User_Setting+0x88>)
 8009e52:	f005 fecf 	bl	800fbf4 <HAL_TIM_Base_Init>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <TIM5_User_Setting+0x44>
  {
	  Error_Handler();
 8009e5c:	f000 fe94 	bl	800ab88 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e64:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009e66:	f107 0318 	add.w	r3, r7, #24
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	480d      	ldr	r0, [pc, #52]	@ (8009ea4 <TIM5_User_Setting+0x88>)
 8009e6e:	f006 f90d 	bl	801008c <HAL_TIM_ConfigClockSource>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <TIM5_User_Setting+0x60>
  {
	  Error_Handler();
 8009e78:	f000 fe86 	bl	800ab88 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e80:	2300      	movs	r3, #0
 8009e82:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009e84:	f107 030c 	add.w	r3, r7, #12
 8009e88:	4619      	mov	r1, r3
 8009e8a:	4806      	ldr	r0, [pc, #24]	@ (8009ea4 <TIM5_User_Setting+0x88>)
 8009e8c:	f006 fb2a 	bl	80104e4 <HAL_TIMEx_MasterConfigSynchronization>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <TIM5_User_Setting+0x7e>
  {
	  Error_Handler();
 8009e96:	f000 fe77 	bl	800ab88 <Error_Handler>
  }

}
 8009e9a:	bf00      	nop
 8009e9c:	3728      	adds	r7, #40	@ 0x28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	200016bc 	.word	0x200016bc
 8009ea8:	40000c00 	.word	0x40000c00

08009eac <TIM7_User_Setting>:
/****************************************************************************/
/*	Overview	:	TIM7 Prescaler, Period 사용자 임의 설정 변경					*/
/*	Return value:	void													*/
/****************************************************************************/
void TIM7_User_Setting(uint16_t u2t_prescaler, uint16_t u2t_period)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	460a      	mov	r2, r1
 8009eb6:	80fb      	strh	r3, [r7, #6]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	80bb      	strh	r3, [r7, #4]

  TIM_MasterConfigTypeDef sMasterConfig;

  htim7.Instance = TIM7;
 8009ebc:	4b14      	ldr	r3, [pc, #80]	@ (8009f10 <TIM7_User_Setting+0x64>)
 8009ebe:	4a15      	ldr	r2, [pc, #84]	@ (8009f14 <TIM7_User_Setting+0x68>)
 8009ec0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = u2t_prescaler;
 8009ec2:	88fb      	ldrh	r3, [r7, #6]
 8009ec4:	4a12      	ldr	r2, [pc, #72]	@ (8009f10 <TIM7_User_Setting+0x64>)
 8009ec6:	6053      	str	r3, [r2, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ec8:	4b11      	ldr	r3, [pc, #68]	@ (8009f10 <TIM7_User_Setting+0x64>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = u2t_period;
 8009ece:	88bb      	ldrh	r3, [r7, #4]
 8009ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8009f10 <TIM7_User_Setting+0x64>)
 8009ed2:	60d3      	str	r3, [r2, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8009f10 <TIM7_User_Setting+0x64>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009eda:	480d      	ldr	r0, [pc, #52]	@ (8009f10 <TIM7_User_Setting+0x64>)
 8009edc:	f005 fe8a 	bl	800fbf4 <HAL_TIM_Base_Init>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <TIM7_User_Setting+0x3e>
  {
	  Error_Handler();
 8009ee6:	f000 fe4f 	bl	800ab88 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009ef2:	f107 030c 	add.w	r3, r7, #12
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4805      	ldr	r0, [pc, #20]	@ (8009f10 <TIM7_User_Setting+0x64>)
 8009efa:	f006 faf3 	bl	80104e4 <HAL_TIMEx_MasterConfigSynchronization>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <TIM7_User_Setting+0x5c>
  {
	  Error_Handler();
 8009f04:	f000 fe40 	bl	800ab88 <Error_Handler>
  }

}
 8009f08:	bf00      	nop
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	20001708 	.word	0x20001708
 8009f14:	40001400 	.word	0x40001400

08009f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009f1c:	f001 fb9f 	bl	800b65e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009f20:	f000 f824 	bl	8009f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009f24:	f000 fc38 	bl	800a798 <MX_GPIO_Init>
  MX_DMA_Init();
 8009f28:	f000 fbfc 	bl	800a724 <MX_DMA_Init>
  MX_ADC2_Init();
 8009f2c:	f000 f8e0 	bl	800a0f0 <MX_ADC2_Init>
  MX_I2C3_Init();
 8009f30:	f000 f930 	bl	800a194 <MX_I2C3_Init>
  MX_SPI1_Init();
 8009f34:	f000 f96e 	bl	800a214 <MX_SPI1_Init>
  MX_SPI2_Init();
 8009f38:	f000 f9a6 	bl	800a288 <MX_SPI2_Init>
  MX_TIM2_Init();
 8009f3c:	f000 fa98 	bl	800a470 <MX_TIM2_Init>
  MX_TIM4_Init();
 8009f40:	f000 fae4 	bl	800a50c <MX_TIM4_Init>
  MX_TIM5_Init();
 8009f44:	f000 fb32 	bl	800a5ac <MX_TIM5_Init>
  MX_TIM7_Init();
 8009f48:	f000 fb80 	bl	800a64c <MX_TIM7_Init>
//  MX_LWIP_Init();
  MX_SPI3_Init();
 8009f4c:	f000 f9d6 	bl	800a2fc <MX_SPI3_Init>
  MX_SPI4_Init();
 8009f50:	f000 fa12 	bl	800a378 <MX_SPI4_Init>
  MX_SPI5_Init();
 8009f54:	f000 fa4e 	bl	800a3f4 <MX_SPI5_Init>
  MX_UART7_Init();
 8009f58:	f000 fbb0 	bl	800a6bc <MX_UART7_Init>
  MX_ADC1_Init();
 8009f5c:	f000 f876 	bl	800a04c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  FUN_Control_Init();
 8009f60:	f7f6 ff50 	bl	8000e04 <FUN_Control_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  MX_LWIP_Process();

	  FUN_Control_Routine();
 8009f64:	f7f7 f864 	bl	8001030 <FUN_Control_Routine>
 8009f68:	e7fc      	b.n	8009f64 <main+0x4c>
	...

08009f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b094      	sub	sp, #80	@ 0x50
 8009f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009f72:	f107 031c 	add.w	r3, r7, #28
 8009f76:	2234      	movs	r2, #52	@ 0x34
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f007 ff26 	bl	8011dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009f80:	f107 0308 	add.w	r3, r7, #8
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	605a      	str	r2, [r3, #4]
 8009f8a:	609a      	str	r2, [r3, #8]
 8009f8c:	60da      	str	r2, [r3, #12]
 8009f8e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8009f90:	f003 fdba 	bl	800db08 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f94:	4b2b      	ldr	r3, [pc, #172]	@ (800a044 <SystemClock_Config+0xd8>)
 8009f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f98:	4a2a      	ldr	r2, [pc, #168]	@ (800a044 <SystemClock_Config+0xd8>)
 8009f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009fa0:	4b28      	ldr	r3, [pc, #160]	@ (800a044 <SystemClock_Config+0xd8>)
 8009fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fa8:	607b      	str	r3, [r7, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009fac:	4b26      	ldr	r3, [pc, #152]	@ (800a048 <SystemClock_Config+0xdc>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a25      	ldr	r2, [pc, #148]	@ (800a048 <SystemClock_Config+0xdc>)
 8009fb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009fb6:	6013      	str	r3, [r2, #0]
 8009fb8:	4b23      	ldr	r3, [pc, #140]	@ (800a048 <SystemClock_Config+0xdc>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009fc0:	603b      	str	r3, [r7, #0]
 8009fc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009fc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009fcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009fce:	2302      	movs	r3, #2
 8009fd0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009fd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009fd8:	2304      	movs	r3, #4
 8009fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8009fdc:	23d8      	movs	r3, #216	@ 0xd8
 8009fde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009fe8:	2302      	movs	r3, #2
 8009fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009fec:	f107 031c 	add.w	r3, r7, #28
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f003 fde9 	bl	800dbc8 <HAL_RCC_OscConfig>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009ffc:	f000 fdc4 	bl	800ab88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a000:	f003 fd92 	bl	800db28 <HAL_PWREx_EnableOverDrive>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800a00a:	f000 fdbd 	bl	800ab88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a00e:	230f      	movs	r3, #15
 800a010:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a012:	2302      	movs	r3, #2
 800a014:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a016:	2300      	movs	r3, #0
 800a018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800a01a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a01e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a024:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800a026:	f107 0308 	add.w	r3, r7, #8
 800a02a:	2107      	movs	r1, #7
 800a02c:	4618      	mov	r0, r3
 800a02e:	f004 f879 	bl	800e124 <HAL_RCC_ClockConfig>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800a038:	f000 fda6 	bl	800ab88 <Error_Handler>
  }
}
 800a03c:	bf00      	nop
 800a03e:	3750      	adds	r7, #80	@ 0x50
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	40023800 	.word	0x40023800
 800a048:	40007000 	.word	0x40007000

0800a04c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a052:	463b      	mov	r3, r7
 800a054:	2200      	movs	r2, #0
 800a056:	601a      	str	r2, [r3, #0]
 800a058:	605a      	str	r2, [r3, #4]
 800a05a:	609a      	str	r2, [r3, #8]
 800a05c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800a05e:	4b21      	ldr	r3, [pc, #132]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a060:	4a21      	ldr	r2, [pc, #132]	@ (800a0e8 <MX_ADC1_Init+0x9c>)
 800a062:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800a064:	4b1f      	ldr	r3, [pc, #124]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a066:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a06a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a06c:	4b1d      	ldr	r3, [pc, #116]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a06e:	2200      	movs	r2, #0
 800a070:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a072:	4b1c      	ldr	r3, [pc, #112]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a074:	2200      	movs	r2, #0
 800a076:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a078:	4b1a      	ldr	r3, [pc, #104]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a07e:	4b19      	ldr	r3, [pc, #100]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a080:	2200      	movs	r2, #0
 800a082:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a086:	4b17      	ldr	r3, [pc, #92]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a088:	2200      	movs	r2, #0
 800a08a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a08c:	4b15      	ldr	r3, [pc, #84]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a08e:	4a17      	ldr	r2, [pc, #92]	@ (800a0ec <MX_ADC1_Init+0xa0>)
 800a090:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a092:	4b14      	ldr	r3, [pc, #80]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a094:	2200      	movs	r2, #0
 800a096:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800a098:	4b12      	ldr	r3, [pc, #72]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a09a:	2201      	movs	r2, #1
 800a09c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a09e:	4b11      	ldr	r3, [pc, #68]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a0ac:	480d      	ldr	r0, [pc, #52]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a0ae:	f001 fb03 	bl	800b6b8 <HAL_ADC_Init>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800a0b8:	f000 fd66 	bl	800ab88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800a0bc:	2308      	movs	r3, #8
 800a0be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800a0c4:	2304      	movs	r3, #4
 800a0c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a0c8:	463b      	mov	r3, r7
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4805      	ldr	r0, [pc, #20]	@ (800a0e4 <MX_ADC1_Init+0x98>)
 800a0ce:	f001 fcd1 	bl	800ba74 <HAL_ADC_ConfigChannel>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800a0d8:	f000 fd56 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a0dc:	bf00      	nop
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	2000128c 	.word	0x2000128c
 800a0e8:	40012000 	.word	0x40012000
 800a0ec:	0f000001 	.word	0x0f000001

0800a0f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a0f6:	463b      	mov	r3, r7
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	605a      	str	r2, [r3, #4]
 800a0fe:	609a      	str	r2, [r3, #8]
 800a100:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800a102:	4b21      	ldr	r3, [pc, #132]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a104:	4a21      	ldr	r2, [pc, #132]	@ (800a18c <MX_ADC2_Init+0x9c>)
 800a106:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800a108:	4b1f      	ldr	r3, [pc, #124]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a10a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a10e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800a110:	4b1d      	ldr	r3, [pc, #116]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a112:	2200      	movs	r2, #0
 800a114:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a116:	4b1c      	ldr	r3, [pc, #112]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a118:	2200      	movs	r2, #0
 800a11a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800a11c:	4b1a      	ldr	r3, [pc, #104]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a11e:	2200      	movs	r2, #0
 800a120:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800a122:	4b19      	ldr	r3, [pc, #100]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a12a:	4b17      	ldr	r3, [pc, #92]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a130:	4b15      	ldr	r3, [pc, #84]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a132:	4a17      	ldr	r2, [pc, #92]	@ (800a190 <MX_ADC2_Init+0xa0>)
 800a134:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a136:	4b14      	ldr	r3, [pc, #80]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a138:	2200      	movs	r2, #0
 800a13a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800a13c:	4b12      	ldr	r3, [pc, #72]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a13e:	2201      	movs	r2, #1
 800a140:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800a142:	4b11      	ldr	r3, [pc, #68]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a14a:	4b0f      	ldr	r3, [pc, #60]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a150:	480d      	ldr	r0, [pc, #52]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a152:	f001 fab1 	bl	800b6b8 <HAL_ADC_Init>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800a15c:	f000 fd14 	bl	800ab88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800a160:	2309      	movs	r3, #9
 800a162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a164:	2301      	movs	r3, #1
 800a166:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800a168:	2304      	movs	r3, #4
 800a16a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a16c:	463b      	mov	r3, r7
 800a16e:	4619      	mov	r1, r3
 800a170:	4805      	ldr	r0, [pc, #20]	@ (800a188 <MX_ADC2_Init+0x98>)
 800a172:	f001 fc7f 	bl	800ba74 <HAL_ADC_ConfigChannel>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800a17c:	f000 fd04 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800a180:	bf00      	nop
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	200012d4 	.word	0x200012d4
 800a18c:	40012100 	.word	0x40012100
 800a190:	0f000001 	.word	0x0f000001

0800a194 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800a198:	4b1b      	ldr	r3, [pc, #108]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a19a:	4a1c      	ldr	r2, [pc, #112]	@ (800a20c <MX_I2C3_Init+0x78>)
 800a19c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00606A9B;
 800a19e:	4b1a      	ldr	r3, [pc, #104]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a1a0:	4a1b      	ldr	r2, [pc, #108]	@ (800a210 <MX_I2C3_Init+0x7c>)
 800a1a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800a1a4:	4b18      	ldr	r3, [pc, #96]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a1aa:	4b17      	ldr	r3, [pc, #92]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a1b0:	4b15      	ldr	r3, [pc, #84]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800a1b6:	4b14      	ldr	r3, [pc, #80]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a1bc:	4b12      	ldr	r3, [pc, #72]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a1c2:	4b11      	ldr	r3, [pc, #68]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a1c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800a1ce:	480e      	ldr	r0, [pc, #56]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a1d0:	f002 feaa 	bl	800cf28 <HAL_I2C_Init>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800a1da:	f000 fcd5 	bl	800ab88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a1de:	2100      	movs	r1, #0
 800a1e0:	4809      	ldr	r0, [pc, #36]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a1e2:	f003 fbf9 	bl	800d9d8 <HAL_I2CEx_ConfigAnalogFilter>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800a1ec:	f000 fccc 	bl	800ab88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	4805      	ldr	r0, [pc, #20]	@ (800a208 <MX_I2C3_Init+0x74>)
 800a1f4:	f003 fc3b 	bl	800da6e <HAL_I2CEx_ConfigDigitalFilter>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800a1fe:	f000 fcc3 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800a202:	bf00      	nop
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	2000131c 	.word	0x2000131c
 800a20c:	40005c00 	.word	0x40005c00
 800a210:	00606a9b 	.word	0x00606a9b

0800a214 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a218:	4b19      	ldr	r3, [pc, #100]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a21a:	4a1a      	ldr	r2, [pc, #104]	@ (800a284 <MX_SPI1_Init+0x70>)
 800a21c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800a21e:	4b18      	ldr	r3, [pc, #96]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a220:	2200      	movs	r2, #0
 800a222:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a224:	4b16      	ldr	r3, [pc, #88]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a226:	2200      	movs	r2, #0
 800a228:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800a22a:	4b15      	ldr	r3, [pc, #84]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a22c:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800a230:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a232:	4b13      	ldr	r3, [pc, #76]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a234:	2200      	movs	r2, #0
 800a236:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a238:	4b11      	ldr	r3, [pc, #68]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a23e:	4b10      	ldr	r3, [pc, #64]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a244:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a246:	4b0e      	ldr	r3, [pc, #56]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a248:	2200      	movs	r2, #0
 800a24a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a24c:	4b0c      	ldr	r3, [pc, #48]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a24e:	2200      	movs	r2, #0
 800a250:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a252:	4b0b      	ldr	r3, [pc, #44]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a254:	2200      	movs	r2, #0
 800a256:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a258:	4b09      	ldr	r3, [pc, #36]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a25a:	2207      	movs	r2, #7
 800a25c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a25e:	4b08      	ldr	r3, [pc, #32]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a260:	2200      	movs	r2, #0
 800a262:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800a264:	4b06      	ldr	r3, [pc, #24]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a266:	2200      	movs	r2, #0
 800a268:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a26a:	4805      	ldr	r0, [pc, #20]	@ (800a280 <MX_SPI1_Init+0x6c>)
 800a26c:	f004 fdda 	bl	800ee24 <HAL_SPI_Init>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800a276:	f000 fc87 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a27a:	bf00      	nop
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20001370 	.word	0x20001370
 800a284:	40013000 	.word	0x40013000

0800a288 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a28c:	4b19      	ldr	r3, [pc, #100]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a28e:	4a1a      	ldr	r2, [pc, #104]	@ (800a2f8 <MX_SPI2_Init+0x70>)
 800a290:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800a292:	4b18      	ldr	r3, [pc, #96]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a294:	2200      	movs	r2, #0
 800a296:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a298:	4b16      	ldr	r3, [pc, #88]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800a29e:	4b15      	ldr	r3, [pc, #84]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a2a0:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800a2a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a2a6:	4b13      	ldr	r3, [pc, #76]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a2ac:	4b11      	ldr	r3, [pc, #68]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800a2b2:	4b10      	ldr	r3, [pc, #64]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a2b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a2ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800a2cc:	4b09      	ldr	r3, [pc, #36]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a2ce:	2207      	movs	r2, #7
 800a2d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a2d2:	4b08      	ldr	r3, [pc, #32]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800a2d8:	4b06      	ldr	r3, [pc, #24]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a2de:	4805      	ldr	r0, [pc, #20]	@ (800a2f4 <MX_SPI2_Init+0x6c>)
 800a2e0:	f004 fda0 	bl	800ee24 <HAL_SPI_Init>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 800a2ea:	f000 fc4d 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a2ee:	bf00      	nop
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	200013d4 	.word	0x200013d4
 800a2f8:	40003800 	.word	0x40003800

0800a2fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800a300:	4b1b      	ldr	r3, [pc, #108]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a302:	4a1c      	ldr	r2, [pc, #112]	@ (800a374 <MX_SPI3_Init+0x78>)
 800a304:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a306:	4b1a      	ldr	r3, [pc, #104]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a308:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a30c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a30e:	4b18      	ldr	r3, [pc, #96]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a310:	2200      	movs	r2, #0
 800a312:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a314:	4b16      	ldr	r3, [pc, #88]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a316:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800a31a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a31c:	4b14      	ldr	r3, [pc, #80]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a31e:	2200      	movs	r2, #0
 800a320:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a322:	4b13      	ldr	r3, [pc, #76]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a324:	2200      	movs	r2, #0
 800a326:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a328:	4b11      	ldr	r3, [pc, #68]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a32a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a32e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800a330:	4b0f      	ldr	r3, [pc, #60]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a332:	2210      	movs	r2, #16
 800a334:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a336:	4b0e      	ldr	r3, [pc, #56]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a338:	2200      	movs	r2, #0
 800a33a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a33c:	4b0c      	ldr	r3, [pc, #48]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a33e:	2200      	movs	r2, #0
 800a340:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a342:	4b0b      	ldr	r3, [pc, #44]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a344:	2200      	movs	r2, #0
 800a346:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800a348:	4b09      	ldr	r3, [pc, #36]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a34a:	2207      	movs	r2, #7
 800a34c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a34e:	4b08      	ldr	r3, [pc, #32]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a350:	2200      	movs	r2, #0
 800a352:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a354:	4b06      	ldr	r3, [pc, #24]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a356:	2208      	movs	r2, #8
 800a358:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a35a:	4805      	ldr	r0, [pc, #20]	@ (800a370 <MX_SPI3_Init+0x74>)
 800a35c:	f004 fd62 	bl	800ee24 <HAL_SPI_Init>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800a366:	f000 fc0f 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a36a:	bf00      	nop
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	20001438 	.word	0x20001438
 800a374:	40003c00 	.word	0x40003c00

0800a378 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800a37c:	4b1b      	ldr	r3, [pc, #108]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a37e:	4a1c      	ldr	r2, [pc, #112]	@ (800a3f0 <MX_SPI4_Init+0x78>)
 800a380:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800a382:	4b1a      	ldr	r3, [pc, #104]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a384:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a388:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800a38a:	4b18      	ldr	r3, [pc, #96]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800a390:	4b16      	ldr	r3, [pc, #88]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a392:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800a396:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a398:	4b14      	ldr	r3, [pc, #80]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a39e:	4b13      	ldr	r3, [pc, #76]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800a3a4:	4b11      	ldr	r3, [pc, #68]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a3a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3aa:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a3ac:	4b0f      	ldr	r3, [pc, #60]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a3b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800a3b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3be:	4b0b      	ldr	r3, [pc, #44]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 800a3c4:	4b09      	ldr	r3, [pc, #36]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a3c6:	2207      	movs	r2, #7
 800a3c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a3ca:	4b08      	ldr	r3, [pc, #32]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a3d0:	4b06      	ldr	r3, [pc, #24]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a3d2:	2208      	movs	r2, #8
 800a3d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800a3d6:	4805      	ldr	r0, [pc, #20]	@ (800a3ec <MX_SPI4_Init+0x74>)
 800a3d8:	f004 fd24 	bl	800ee24 <HAL_SPI_Init>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800a3e2:	f000 fbd1 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800a3e6:	bf00      	nop
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	2000149c 	.word	0x2000149c
 800a3f0:	40013400 	.word	0x40013400

0800a3f4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800a3f8:	4b1b      	ldr	r3, [pc, #108]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a3fa:	4a1c      	ldr	r2, [pc, #112]	@ (800a46c <MX_SPI5_Init+0x78>)
 800a3fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800a3fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a400:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a404:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800a406:	4b18      	ldr	r3, [pc, #96]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a408:	2200      	movs	r2, #0
 800a40a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800a40c:	4b16      	ldr	r3, [pc, #88]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a40e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800a412:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a414:	4b14      	ldr	r3, [pc, #80]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a416:	2200      	movs	r2, #0
 800a418:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a41a:	4b13      	ldr	r3, [pc, #76]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800a420:	4b11      	ldr	r3, [pc, #68]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a426:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a428:	4b0f      	ldr	r3, [pc, #60]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a42a:	2220      	movs	r2, #32
 800a42c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a42e:	4b0e      	ldr	r3, [pc, #56]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a430:	2200      	movs	r2, #0
 800a432:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800a434:	4b0c      	ldr	r3, [pc, #48]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a436:	2200      	movs	r2, #0
 800a438:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a43a:	4b0b      	ldr	r3, [pc, #44]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 800a440:	4b09      	ldr	r3, [pc, #36]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a442:	2207      	movs	r2, #7
 800a444:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a446:	4b08      	ldr	r3, [pc, #32]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a448:	2200      	movs	r2, #0
 800a44a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a44c:	4b06      	ldr	r3, [pc, #24]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a44e:	2208      	movs	r2, #8
 800a450:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800a452:	4805      	ldr	r0, [pc, #20]	@ (800a468 <MX_SPI5_Init+0x74>)
 800a454:	f004 fce6 	bl	800ee24 <HAL_SPI_Init>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800a45e:	f000 fb93 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800a462:	bf00      	nop
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20001500 	.word	0x20001500
 800a46c:	40015000 	.word	0x40015000

0800a470 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a476:	f107 0310 	add.w	r3, r7, #16
 800a47a:	2200      	movs	r2, #0
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	605a      	str	r2, [r3, #4]
 800a480:	609a      	str	r2, [r3, #8]
 800a482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a484:	1d3b      	adds	r3, r7, #4
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	605a      	str	r2, [r3, #4]
 800a48c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a48e:	4b1e      	ldr	r3, [pc, #120]	@ (800a508 <MX_TIM2_Init+0x98>)
 800a490:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a494:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 269;
 800a496:	4b1c      	ldr	r3, [pc, #112]	@ (800a508 <MX_TIM2_Init+0x98>)
 800a498:	f240 120d 	movw	r2, #269	@ 0x10d
 800a49c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a49e:	4b1a      	ldr	r3, [pc, #104]	@ (800a508 <MX_TIM2_Init+0x98>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 800a4a4:	4b18      	ldr	r3, [pc, #96]	@ (800a508 <MX_TIM2_Init+0x98>)
 800a4a6:	2203      	movs	r2, #3
 800a4a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a4aa:	4b17      	ldr	r3, [pc, #92]	@ (800a508 <MX_TIM2_Init+0x98>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4b0:	4b15      	ldr	r3, [pc, #84]	@ (800a508 <MX_TIM2_Init+0x98>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a4b6:	4814      	ldr	r0, [pc, #80]	@ (800a508 <MX_TIM2_Init+0x98>)
 800a4b8:	f005 fb9c 	bl	800fbf4 <HAL_TIM_Base_Init>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a4c2:	f000 fb61 	bl	800ab88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a4c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a4ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a4cc:	f107 0310 	add.w	r3, r7, #16
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	480d      	ldr	r0, [pc, #52]	@ (800a508 <MX_TIM2_Init+0x98>)
 800a4d4:	f005 fdda 	bl	801008c <HAL_TIM_ConfigClockSource>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a4de:	f000 fb53 	bl	800ab88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a4ea:	1d3b      	adds	r3, r7, #4
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4806      	ldr	r0, [pc, #24]	@ (800a508 <MX_TIM2_Init+0x98>)
 800a4f0:	f005 fff8 	bl	80104e4 <HAL_TIMEx_MasterConfigSynchronization>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a4fa:	f000 fb45 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a4fe:	bf00      	nop
 800a500:	3720      	adds	r7, #32
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20001624 	.word	0x20001624

0800a50c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a512:	f107 0310 	add.w	r3, r7, #16
 800a516:	2200      	movs	r2, #0
 800a518:	601a      	str	r2, [r3, #0]
 800a51a:	605a      	str	r2, [r3, #4]
 800a51c:	609a      	str	r2, [r3, #8]
 800a51e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a520:	1d3b      	adds	r3, r7, #4
 800a522:	2200      	movs	r2, #0
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	605a      	str	r2, [r3, #4]
 800a528:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a52a:	4b1e      	ldr	r3, [pc, #120]	@ (800a5a4 <MX_TIM4_Init+0x98>)
 800a52c:	4a1e      	ldr	r2, [pc, #120]	@ (800a5a8 <MX_TIM4_Init+0x9c>)
 800a52e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10799;
 800a530:	4b1c      	ldr	r3, [pc, #112]	@ (800a5a4 <MX_TIM4_Init+0x98>)
 800a532:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 800a536:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a538:	4b1a      	ldr	r3, [pc, #104]	@ (800a5a4 <MX_TIM4_Init+0x98>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 800a53e:	4b19      	ldr	r3, [pc, #100]	@ (800a5a4 <MX_TIM4_Init+0x98>)
 800a540:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a544:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a546:	4b17      	ldr	r3, [pc, #92]	@ (800a5a4 <MX_TIM4_Init+0x98>)
 800a548:	2200      	movs	r2, #0
 800a54a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a54c:	4b15      	ldr	r3, [pc, #84]	@ (800a5a4 <MX_TIM4_Init+0x98>)
 800a54e:	2200      	movs	r2, #0
 800a550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a552:	4814      	ldr	r0, [pc, #80]	@ (800a5a4 <MX_TIM4_Init+0x98>)
 800a554:	f005 fb4e 	bl	800fbf4 <HAL_TIM_Base_Init>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800a55e:	f000 fb13 	bl	800ab88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a562:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a566:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a568:	f107 0310 	add.w	r3, r7, #16
 800a56c:	4619      	mov	r1, r3
 800a56e:	480d      	ldr	r0, [pc, #52]	@ (800a5a4 <MX_TIM4_Init+0x98>)
 800a570:	f005 fd8c 	bl	801008c <HAL_TIM_ConfigClockSource>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800a57a:	f000 fb05 	bl	800ab88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a57e:	2300      	movs	r3, #0
 800a580:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a582:	2300      	movs	r3, #0
 800a584:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a586:	1d3b      	adds	r3, r7, #4
 800a588:	4619      	mov	r1, r3
 800a58a:	4806      	ldr	r0, [pc, #24]	@ (800a5a4 <MX_TIM4_Init+0x98>)
 800a58c:	f005 ffaa 	bl	80104e4 <HAL_TIMEx_MasterConfigSynchronization>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800a596:	f000 faf7 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a59a:	bf00      	nop
 800a59c:	3720      	adds	r7, #32
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20001670 	.word	0x20001670
 800a5a8:	40000800 	.word	0x40000800

0800a5ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b088      	sub	sp, #32
 800a5b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a5b2:	f107 0310 	add.w	r3, r7, #16
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	605a      	str	r2, [r3, #4]
 800a5bc:	609a      	str	r2, [r3, #8]
 800a5be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a5c0:	1d3b      	adds	r3, r7, #4
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]
 800a5c6:	605a      	str	r2, [r3, #4]
 800a5c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a5ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a644 <MX_TIM5_Init+0x98>)
 800a5cc:	4a1e      	ldr	r2, [pc, #120]	@ (800a648 <MX_TIM5_Init+0x9c>)
 800a5ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10799;
 800a5d0:	4b1c      	ldr	r3, [pc, #112]	@ (800a644 <MX_TIM5_Init+0x98>)
 800a5d2:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 800a5d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a5d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a644 <MX_TIM5_Init+0x98>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4999;
 800a5de:	4b19      	ldr	r3, [pc, #100]	@ (800a644 <MX_TIM5_Init+0x98>)
 800a5e0:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a5e4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a5e6:	4b17      	ldr	r3, [pc, #92]	@ (800a644 <MX_TIM5_Init+0x98>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a5ec:	4b15      	ldr	r3, [pc, #84]	@ (800a644 <MX_TIM5_Init+0x98>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a5f2:	4814      	ldr	r0, [pc, #80]	@ (800a644 <MX_TIM5_Init+0x98>)
 800a5f4:	f005 fafe 	bl	800fbf4 <HAL_TIM_Base_Init>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800a5fe:	f000 fac3 	bl	800ab88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a606:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a608:	f107 0310 	add.w	r3, r7, #16
 800a60c:	4619      	mov	r1, r3
 800a60e:	480d      	ldr	r0, [pc, #52]	@ (800a644 <MX_TIM5_Init+0x98>)
 800a610:	f005 fd3c 	bl	801008c <HAL_TIM_ConfigClockSource>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800a61a:	f000 fab5 	bl	800ab88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a61e:	2300      	movs	r3, #0
 800a620:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a622:	2300      	movs	r3, #0
 800a624:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a626:	1d3b      	adds	r3, r7, #4
 800a628:	4619      	mov	r1, r3
 800a62a:	4806      	ldr	r0, [pc, #24]	@ (800a644 <MX_TIM5_Init+0x98>)
 800a62c:	f005 ff5a 	bl	80104e4 <HAL_TIMEx_MasterConfigSynchronization>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800a636:	f000 faa7 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800a63a:	bf00      	nop
 800a63c:	3720      	adds	r7, #32
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	200016bc 	.word	0x200016bc
 800a648:	40000c00 	.word	0x40000c00

0800a64c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a652:	1d3b      	adds	r3, r7, #4
 800a654:	2200      	movs	r2, #0
 800a656:	601a      	str	r2, [r3, #0]
 800a658:	605a      	str	r2, [r3, #4]
 800a65a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800a65c:	4b15      	ldr	r3, [pc, #84]	@ (800a6b4 <MX_TIM7_Init+0x68>)
 800a65e:	4a16      	ldr	r2, [pc, #88]	@ (800a6b8 <MX_TIM7_Init+0x6c>)
 800a660:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10799;
 800a662:	4b14      	ldr	r3, [pc, #80]	@ (800a6b4 <MX_TIM7_Init+0x68>)
 800a664:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 800a668:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a66a:	4b12      	ldr	r3, [pc, #72]	@ (800a6b4 <MX_TIM7_Init+0x68>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 800a670:	4b10      	ldr	r3, [pc, #64]	@ (800a6b4 <MX_TIM7_Init+0x68>)
 800a672:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a676:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a678:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b4 <MX_TIM7_Init+0x68>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a67e:	480d      	ldr	r0, [pc, #52]	@ (800a6b4 <MX_TIM7_Init+0x68>)
 800a680:	f005 fab8 	bl	800fbf4 <HAL_TIM_Base_Init>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800a68a:	f000 fa7d 	bl	800ab88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a68e:	2300      	movs	r3, #0
 800a690:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a696:	1d3b      	adds	r3, r7, #4
 800a698:	4619      	mov	r1, r3
 800a69a:	4806      	ldr	r0, [pc, #24]	@ (800a6b4 <MX_TIM7_Init+0x68>)
 800a69c:	f005 ff22 	bl	80104e4 <HAL_TIMEx_MasterConfigSynchronization>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800a6a6:	f000 fa6f 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800a6aa:	bf00      	nop
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20001708 	.word	0x20001708
 800a6b8:	40001400 	.word	0x40001400

0800a6bc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800a6c0:	4b16      	ldr	r3, [pc, #88]	@ (800a71c <MX_UART7_Init+0x60>)
 800a6c2:	4a17      	ldr	r2, [pc, #92]	@ (800a720 <MX_UART7_Init+0x64>)
 800a6c4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800a6c6:	4b15      	ldr	r3, [pc, #84]	@ (800a71c <MX_UART7_Init+0x60>)
 800a6c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a6cc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800a6ce:	4b13      	ldr	r3, [pc, #76]	@ (800a71c <MX_UART7_Init+0x60>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800a6d4:	4b11      	ldr	r3, [pc, #68]	@ (800a71c <MX_UART7_Init+0x60>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800a6da:	4b10      	ldr	r3, [pc, #64]	@ (800a71c <MX_UART7_Init+0x60>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800a6e0:	4b0e      	ldr	r3, [pc, #56]	@ (800a71c <MX_UART7_Init+0x60>)
 800a6e2:	220c      	movs	r2, #12
 800a6e4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a71c <MX_UART7_Init+0x60>)
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800a6ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a71c <MX_UART7_Init+0x60>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <MX_UART7_Init+0x60>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800a6f8:	4b08      	ldr	r3, [pc, #32]	@ (800a71c <MX_UART7_Init+0x60>)
 800a6fa:	2210      	movs	r2, #16
 800a6fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800a6fe:	4b07      	ldr	r3, [pc, #28]	@ (800a71c <MX_UART7_Init+0x60>)
 800a700:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a704:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800a706:	4805      	ldr	r0, [pc, #20]	@ (800a71c <MX_UART7_Init+0x60>)
 800a708:	f005 ff98 	bl	801063c <HAL_UART_Init>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d001      	beq.n	800a716 <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 800a712:	f000 fa39 	bl	800ab88 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800a716:	bf00      	nop
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20001754 	.word	0x20001754
 800a720:	40007800 	.word	0x40007800

0800a724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a72a:	4b1a      	ldr	r3, [pc, #104]	@ (800a794 <MX_DMA_Init+0x70>)
 800a72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a72e:	4a19      	ldr	r2, [pc, #100]	@ (800a794 <MX_DMA_Init+0x70>)
 800a730:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a734:	6313      	str	r3, [r2, #48]	@ 0x30
 800a736:	4b17      	ldr	r3, [pc, #92]	@ (800a794 <MX_DMA_Init+0x70>)
 800a738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a73a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a73e:	607b      	str	r3, [r7, #4]
 800a740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a742:	4b14      	ldr	r3, [pc, #80]	@ (800a794 <MX_DMA_Init+0x70>)
 800a744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a746:	4a13      	ldr	r2, [pc, #76]	@ (800a794 <MX_DMA_Init+0x70>)
 800a748:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a74c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a74e:	4b11      	ldr	r3, [pc, #68]	@ (800a794 <MX_DMA_Init+0x70>)
 800a750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a75a:	2200      	movs	r2, #0
 800a75c:	2100      	movs	r1, #0
 800a75e:	200c      	movs	r0, #12
 800a760:	f001 fcb4 	bl	800c0cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a764:	200c      	movs	r0, #12
 800a766:	f001 fccd 	bl	800c104 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800a76a:	2200      	movs	r2, #0
 800a76c:	2100      	movs	r1, #0
 800a76e:	200f      	movs	r0, #15
 800a770:	f001 fcac 	bl	800c0cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a774:	200f      	movs	r0, #15
 800a776:	f001 fcc5 	bl	800c104 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800a77a:	2200      	movs	r2, #0
 800a77c:	2100      	movs	r1, #0
 800a77e:	203b      	movs	r0, #59	@ 0x3b
 800a780:	f001 fca4 	bl	800c0cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800a784:	203b      	movs	r0, #59	@ 0x3b
 800a786:	f001 fcbd 	bl	800c104 <HAL_NVIC_EnableIRQ>

}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	40023800 	.word	0x40023800

0800a798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b090      	sub	sp, #64	@ 0x40
 800a79c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a79e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
 800a7a6:	605a      	str	r2, [r3, #4]
 800a7a8:	609a      	str	r2, [r3, #8]
 800a7aa:	60da      	str	r2, [r3, #12]
 800a7ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a7ae:	4bb4      	ldr	r3, [pc, #720]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b2:	4ab3      	ldr	r2, [pc, #716]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a7b4:	f043 0310 	orr.w	r3, r3, #16
 800a7b8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7ba:	4bb1      	ldr	r3, [pc, #708]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a7bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7be:	f003 0310 	and.w	r3, r3, #16
 800a7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7c6:	4bae      	ldr	r3, [pc, #696]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a7c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ca:	4aad      	ldr	r2, [pc, #692]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a7cc:	f043 0304 	orr.w	r3, r3, #4
 800a7d0:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7d2:	4bab      	ldr	r3, [pc, #684]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a7d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7d6:	f003 0304 	and.w	r3, r3, #4
 800a7da:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a7de:	4ba8      	ldr	r3, [pc, #672]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a7e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7e2:	4aa7      	ldr	r2, [pc, #668]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a7e4:	f043 0320 	orr.w	r3, r3, #32
 800a7e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7ea:	4ba5      	ldr	r3, [pc, #660]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ee:	f003 0320 	and.w	r3, r3, #32
 800a7f2:	623b      	str	r3, [r7, #32]
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a7f6:	4ba2      	ldr	r3, [pc, #648]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a7f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7fa:	4aa1      	ldr	r2, [pc, #644]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a7fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a800:	6313      	str	r3, [r2, #48]	@ 0x30
 800a802:	4b9f      	ldr	r3, [pc, #636]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a80a:	61fb      	str	r3, [r7, #28]
 800a80c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a80e:	4b9c      	ldr	r3, [pc, #624]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a812:	4a9b      	ldr	r2, [pc, #620]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a818:	6313      	str	r3, [r2, #48]	@ 0x30
 800a81a:	4b99      	ldr	r3, [pc, #612]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a81c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a81e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a822:	61bb      	str	r3, [r7, #24]
 800a824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a826:	4b96      	ldr	r3, [pc, #600]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a82a:	4a95      	ldr	r2, [pc, #596]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a82c:	f043 0301 	orr.w	r3, r3, #1
 800a830:	6313      	str	r3, [r2, #48]	@ 0x30
 800a832:	4b93      	ldr	r3, [pc, #588]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	617b      	str	r3, [r7, #20]
 800a83c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a83e:	4b90      	ldr	r3, [pc, #576]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a842:	4a8f      	ldr	r2, [pc, #572]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a844:	f043 0302 	orr.w	r3, r3, #2
 800a848:	6313      	str	r3, [r2, #48]	@ 0x30
 800a84a:	4b8d      	ldr	r3, [pc, #564]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a84c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a84e:	f003 0302 	and.w	r3, r3, #2
 800a852:	613b      	str	r3, [r7, #16]
 800a854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a856:	4b8a      	ldr	r3, [pc, #552]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a85a:	4a89      	ldr	r2, [pc, #548]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a85c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a860:	6313      	str	r3, [r2, #48]	@ 0x30
 800a862:	4b87      	ldr	r3, [pc, #540]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a866:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a86e:	4b84      	ldr	r3, [pc, #528]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a872:	4a83      	ldr	r2, [pc, #524]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a874:	f043 0308 	orr.w	r3, r3, #8
 800a878:	6313      	str	r3, [r2, #48]	@ 0x30
 800a87a:	4b81      	ldr	r3, [pc, #516]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a87c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a87e:	f003 0308 	and.w	r3, r3, #8
 800a882:	60bb      	str	r3, [r7, #8]
 800a884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800a886:	4b7e      	ldr	r3, [pc, #504]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a88a:	4a7d      	ldr	r2, [pc, #500]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a88c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a890:	6313      	str	r3, [r2, #48]	@ 0x30
 800a892:	4b7b      	ldr	r3, [pc, #492]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a89a:	607b      	str	r3, [r7, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a89e:	4b78      	ldr	r3, [pc, #480]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a8a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8a2:	4a77      	ldr	r2, [pc, #476]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a8a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8a8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8aa:	4b75      	ldr	r3, [pc, #468]	@ (800aa80 <MX_GPIO_Init+0x2e8>)
 800a8ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8b2:	603b      	str	r3, [r7, #0]
 800a8b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OUT_CH48_Pin|OUT_CH42_Pin|OUT_CH43_Pin, GPIO_PIN_SET);
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	2107      	movs	r1, #7
 800a8ba:	4872      	ldr	r0, [pc, #456]	@ (800aa84 <MX_GPIO_Init+0x2ec>)
 800a8bc:	f002 fb00 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_5_GPIO_Port, NSS_5_Pin, GPIO_PIN_RESET);
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	2104      	movs	r1, #4
 800a8c4:	4870      	ldr	r0, [pc, #448]	@ (800aa88 <MX_GPIO_Init+0x2f0>)
 800a8c6:	f002 fafb 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LDAC_5_Pin|CLR_5_Pin, GPIO_PIN_RESET);
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800a8d0:	486e      	ldr	r0, [pc, #440]	@ (800aa8c <MX_GPIO_Init+0x2f4>)
 800a8d2:	f002 faf5 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLR_3_Pin|LDAC_3_Pin|NSS_3_Pin, GPIO_PIN_RESET);
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2170      	movs	r1, #112	@ 0x70
 800a8da:	486d      	ldr	r0, [pc, #436]	@ (800aa90 <MX_GPIO_Init+0x2f8>)
 800a8dc:	f002 faf0 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	211e      	movs	r1, #30
 800a8e4:	486b      	ldr	r0, [pc, #428]	@ (800aa94 <MX_GPIO_Init+0x2fc>)
 800a8e6:	f002 faeb 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OUT_CH12_Pin|OUT_CH32_Pin, GPIO_PIN_SET);
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800a8f0:	4865      	ldr	r0, [pc, #404]	@ (800aa88 <MX_GPIO_Init+0x2f0>)
 800a8f2:	f002 fae5 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEL_485_1_Pin|LDAC_4_Pin|NSS_4_Pin|CLR_4_Pin, GPIO_PIN_RESET);
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f44f 410e 	mov.w	r1, #36352	@ 0x8e00
 800a8fc:	4861      	ldr	r0, [pc, #388]	@ (800aa84 <MX_GPIO_Init+0x2ec>)
 800a8fe:	f002 fadf 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, ADC2_SEL0_M_Pin|ADC2_SEL1_M_Pin|ADC2_SEL2_M_Pin|ADC1_SEL0_M_Pin
 800a902:	2200      	movs	r2, #0
 800a904:	f44f 51f6 	mov.w	r1, #7872	@ 0x1ec0
 800a908:	4863      	ldr	r0, [pc, #396]	@ (800aa98 <MX_GPIO_Init+0x300>)
 800a90a:	f002 fad9 	bl	800cec0 <HAL_GPIO_WritePin>
                          |ADC1_SEL1_M_Pin|ADC1_SEL2_M_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_CH1_Pin|OUT_CH2_Pin|OUT_CH3_Pin|OUT_CH4_Pin
 800a90e:	2201      	movs	r2, #1
 800a910:	f248 11f0 	movw	r1, #33264	@ 0x81f0
 800a914:	4861      	ldr	r0, [pc, #388]	@ (800aa9c <MX_GPIO_Init+0x304>)
 800a916:	f002 fad3 	bl	800cec0 <HAL_GPIO_WritePin>
                          |OUT_CH5_Pin|OUT_CH38_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_CH6_Pin|OUT_CH7_Pin|OUT_CH8_Pin|OUT_CH9_Pin, GPIO_PIN_SET);
 800a91a:	2201      	movs	r2, #1
 800a91c:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800a920:	485f      	ldr	r0, [pc, #380]	@ (800aaa0 <MX_GPIO_Init+0x308>)
 800a922:	f002 facd 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_CH10_Pin|OUT_CH11_Pin|OUT_CH13_Pin, GPIO_PIN_SET);
 800a926:	2201      	movs	r2, #1
 800a928:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 800a92c:	4858      	ldr	r0, [pc, #352]	@ (800aa90 <MX_GPIO_Init+0x2f8>)
 800a92e:	f002 fac7 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT_CH14_Pin|OUT_CH15_Pin|OUT_CH16_Pin, GPIO_PIN_SET);
 800a932:	2201      	movs	r2, #1
 800a934:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800a938:	4857      	ldr	r0, [pc, #348]	@ (800aa98 <MX_GPIO_Init+0x300>)
 800a93a:	f002 fac1 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT_CH17_Pin|OUT_CH18_Pin|OUT_CH19_Pin|OUT_CH20_Pin
 800a93e:	2201      	movs	r2, #1
 800a940:	21ff      	movs	r1, #255	@ 0xff
 800a942:	4852      	ldr	r0, [pc, #328]	@ (800aa8c <MX_GPIO_Init+0x2f4>)
 800a944:	f002 fabc 	bl	800cec0 <HAL_GPIO_WritePin>
                          |OUT_CH44_Pin|OUT_CH45_Pin|OUT_CH46_Pin|OUT_CH47_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUT_CH21_Pin|OUT_CH22_Pin|OUT_CH23_Pin|OUT_CH24_Pin
 800a948:	2201      	movs	r2, #1
 800a94a:	217f      	movs	r1, #127	@ 0x7f
 800a94c:	4855      	ldr	r0, [pc, #340]	@ (800aaa4 <MX_GPIO_Init+0x30c>)
 800a94e:	f002 fab7 	bl	800cec0 <HAL_GPIO_WritePin>
                          |OUT_CH25_Pin|OUT_CH26_Pin|OUT_CH27_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, OUT_CH28_Pin|OUT_CH29_Pin|OUT_CH30_Pin|OUT_CH31_Pin, GPIO_PIN_SET);
 800a952:	2201      	movs	r2, #1
 800a954:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800a958:	484e      	ldr	r0, [pc, #312]	@ (800aa94 <MX_GPIO_Init+0x2fc>)
 800a95a:	f002 fab1 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, OUT_CH33_Pin|OUT_CH34_Pin|OUT_CH35_Pin|OUT_CH36_Pin
 800a95e:	2201      	movs	r2, #1
 800a960:	21f8      	movs	r1, #248	@ 0xf8
 800a962:	4851      	ldr	r0, [pc, #324]	@ (800aaa8 <MX_GPIO_Init+0x310>)
 800a964:	f002 faac 	bl	800cec0 <HAL_GPIO_WritePin>
                          |OUT_CH37_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_CH39_Pin|OUT_CH40_Pin|OUT_CH41_Pin, GPIO_PIN_SET);
 800a968:	2201      	movs	r2, #1
 800a96a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800a96e:	484f      	ldr	r0, [pc, #316]	@ (800aaac <MX_GPIO_Init+0x314>)
 800a970:	f002 faa6 	bl	800cec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_CH48_Pin SEL_485_1_Pin LDAC_4_Pin NSS_4_Pin
                           CLR_4_Pin OUT_CH42_Pin OUT_CH43_Pin */
  GPIO_InitStruct.Pin = OUT_CH48_Pin|SEL_485_1_Pin|LDAC_4_Pin|NSS_4_Pin
 800a974:	f648 6307 	movw	r3, #36359	@ 0x8e07
 800a978:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |CLR_4_Pin|OUT_CH42_Pin|OUT_CH43_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a97a:	2301      	movs	r3, #1
 800a97c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a982:	2300      	movs	r3, #0
 800a984:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a98a:	4619      	mov	r1, r3
 800a98c:	483d      	ldr	r0, [pc, #244]	@ (800aa84 <MX_GPIO_Init+0x2ec>)
 800a98e:	f002 f8d3 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_CH17_Pin IN_CH18_Pin */
  GPIO_InitStruct.Pin = IN_CH17_Pin|IN_CH18_Pin;
 800a992:	2330      	movs	r3, #48	@ 0x30
 800a994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a996:	2300      	movs	r3, #0
 800a998:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a99e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	4837      	ldr	r0, [pc, #220]	@ (800aa84 <MX_GPIO_Init+0x2ec>)
 800a9a6:	f002 f8c7 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_5_Pin OUT_CH12_Pin OUT_CH32_Pin */
  GPIO_InitStruct.Pin = NSS_5_Pin|OUT_CH12_Pin|OUT_CH32_Pin;
 800a9aa:	f24a 0304 	movw	r3, #40964	@ 0xa004
 800a9ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a9bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4831      	ldr	r0, [pc, #196]	@ (800aa88 <MX_GPIO_Init+0x2f0>)
 800a9c4:	f002 f8b8 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDAC_5_Pin CLR_5_Pin OUT_CH17_Pin OUT_CH18_Pin
                           OUT_CH19_Pin OUT_CH20_Pin OUT_CH44_Pin OUT_CH45_Pin
                           OUT_CH46_Pin OUT_CH47_Pin */
  GPIO_InitStruct.Pin = LDAC_5_Pin|CLR_5_Pin|OUT_CH17_Pin|OUT_CH18_Pin
 800a9c8:	f243 03ff 	movw	r3, #12543	@ 0x30ff
 800a9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |OUT_CH19_Pin|OUT_CH20_Pin|OUT_CH44_Pin|OUT_CH45_Pin
                          |OUT_CH46_Pin|OUT_CH47_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a9da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a9de:	4619      	mov	r1, r3
 800a9e0:	482a      	ldr	r0, [pc, #168]	@ (800aa8c <MX_GPIO_Init+0x2f4>)
 800a9e2:	f002 f8a9 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLR_3_Pin LDAC_3_Pin NSS_3_Pin OUT_CH10_Pin
                           OUT_CH11_Pin OUT_CH13_Pin */
  GPIO_InitStruct.Pin = CLR_3_Pin|LDAC_3_Pin|NSS_3_Pin|OUT_CH10_Pin
 800a9e6:	f241 6370 	movw	r3, #5744	@ 0x1670
 800a9ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |OUT_CH11_Pin|OUT_CH13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4824      	ldr	r0, [pc, #144]	@ (800aa90 <MX_GPIO_Init+0x2f8>)
 800aa00:	f002 f89a 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
                           OUT_CH28_Pin OUT_CH29_Pin OUT_CH30_Pin OUT_CH31_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800aa04:	f24f 031e 	movw	r3, #61470	@ 0xf01e
 800aa08:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |OUT_CH28_Pin|OUT_CH29_Pin|OUT_CH30_Pin|OUT_CH31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa12:	2300      	movs	r3, #0
 800aa14:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800aa16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	481d      	ldr	r0, [pc, #116]	@ (800aa94 <MX_GPIO_Init+0x2fc>)
 800aa1e:	f002 f88b 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC2_SEL0_M_Pin ADC2_SEL1_M_Pin ADC2_SEL2_M_Pin ADC1_SEL0_M_Pin
                           ADC1_SEL1_M_Pin ADC1_SEL2_M_Pin OUT_CH14_Pin OUT_CH15_Pin
                           OUT_CH16_Pin */
  GPIO_InitStruct.Pin = ADC2_SEL0_M_Pin|ADC2_SEL1_M_Pin|ADC2_SEL2_M_Pin|ADC1_SEL0_M_Pin
 800aa22:	f64f 63c0 	movw	r3, #65216	@ 0xfec0
 800aa26:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ADC1_SEL1_M_Pin|ADC1_SEL2_M_Pin|OUT_CH14_Pin|OUT_CH15_Pin
                          |OUT_CH16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa30:	2300      	movs	r3, #0
 800aa32:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800aa34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4817      	ldr	r0, [pc, #92]	@ (800aa98 <MX_GPIO_Init+0x300>)
 800aa3c:	f002 f87c 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_CH1_Pin IN_CH2_Pin IN_CH3_Pin IN_CH4_Pin
                           IN_CH5_Pin */
  GPIO_InitStruct.Pin = IN_CH1_Pin|IN_CH2_Pin|IN_CH3_Pin|IN_CH4_Pin
 800aa40:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800aa44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |IN_CH5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa46:	2300      	movs	r3, #0
 800aa48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aa4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aa52:	4619      	mov	r1, r3
 800aa54:	4813      	ldr	r0, [pc, #76]	@ (800aaa4 <MX_GPIO_Init+0x30c>)
 800aa56:	f002 f86f 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_CH6_Pin IN_CH7_Pin IN_CH8_Pin IN_CH9_Pin
                           IN_CH10_Pin IN_CH11_Pin */
  GPIO_InitStruct.Pin = IN_CH6_Pin|IN_CH7_Pin|IN_CH8_Pin|IN_CH9_Pin
 800aa5a:	f44f 637c 	mov.w	r3, #4032	@ 0xfc0
 800aa5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |IN_CH10_Pin|IN_CH11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa60:	2300      	movs	r3, #0
 800aa62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa64:	2300      	movs	r3, #0
 800aa66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800aa68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4809      	ldr	r0, [pc, #36]	@ (800aa94 <MX_GPIO_Init+0x2fc>)
 800aa70:	f002 f862 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_CH12_Pin IN_CH13_Pin IN_CH14_Pin */
  GPIO_InitStruct.Pin = IN_CH12_Pin|IN_CH13_Pin|IN_CH14_Pin;
 800aa74:	2307      	movs	r3, #7
 800aa76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa7c:	e018      	b.n	800aab0 <MX_GPIO_Init+0x318>
 800aa7e:	bf00      	nop
 800aa80:	40023800 	.word	0x40023800
 800aa84:	40021000 	.word	0x40021000
 800aa88:	40021400 	.word	0x40021400
 800aa8c:	40022000 	.word	0x40022000
 800aa90:	40020000 	.word	0x40020000
 800aa94:	40022400 	.word	0x40022400
 800aa98:	40021c00 	.word	0x40021c00
 800aa9c:	40021800 	.word	0x40021800
 800aaa0:	40020800 	.word	0x40020800
 800aaa4:	40020c00 	.word	0x40020c00
 800aaa8:	40022800 	.word	0x40022800
 800aaac:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aab0:	2300      	movs	r3, #0
 800aab2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800aab4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aab8:	4619      	mov	r1, r3
 800aaba:	482e      	ldr	r0, [pc, #184]	@ (800ab74 <MX_GPIO_Init+0x3dc>)
 800aabc:	f002 f83c 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_CH15_Pin IN_CH16_Pin */
  GPIO_InitStruct.Pin = IN_CH15_Pin|IN_CH16_Pin;
 800aac0:	230c      	movs	r3, #12
 800aac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aac4:	2300      	movs	r3, #0
 800aac6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aac8:	2300      	movs	r3, #0
 800aaca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800aacc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aad0:	4619      	mov	r1, r3
 800aad2:	4829      	ldr	r0, [pc, #164]	@ (800ab78 <MX_GPIO_Init+0x3e0>)
 800aad4:	f002 f830 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_CH1_Pin OUT_CH2_Pin OUT_CH3_Pin OUT_CH4_Pin
                           OUT_CH5_Pin OUT_CH38_Pin */
  GPIO_InitStruct.Pin = OUT_CH1_Pin|OUT_CH2_Pin|OUT_CH3_Pin|OUT_CH4_Pin
 800aad8:	f248 13f0 	movw	r3, #33264	@ 0x81f0
 800aadc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |OUT_CH5_Pin|OUT_CH38_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aade:	2301      	movs	r3, #1
 800aae0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aae2:	2300      	movs	r3, #0
 800aae4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aae6:	2300      	movs	r3, #0
 800aae8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800aaea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aaee:	4619      	mov	r1, r3
 800aaf0:	4821      	ldr	r0, [pc, #132]	@ (800ab78 <MX_GPIO_Init+0x3e0>)
 800aaf2:	f002 f821 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_CH6_Pin OUT_CH7_Pin OUT_CH8_Pin OUT_CH9_Pin */
  GPIO_InitStruct.Pin = OUT_CH6_Pin|OUT_CH7_Pin|OUT_CH8_Pin|OUT_CH9_Pin;
 800aaf6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800aafa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aafc:	2301      	movs	r3, #1
 800aafe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab00:	2300      	movs	r3, #0
 800ab02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab04:	2300      	movs	r3, #0
 800ab06:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	481b      	ldr	r0, [pc, #108]	@ (800ab7c <MX_GPIO_Init+0x3e4>)
 800ab10:	f002 f812 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_CH21_Pin OUT_CH22_Pin OUT_CH23_Pin OUT_CH24_Pin
                           OUT_CH25_Pin OUT_CH26_Pin OUT_CH27_Pin */
  GPIO_InitStruct.Pin = OUT_CH21_Pin|OUT_CH22_Pin|OUT_CH23_Pin|OUT_CH24_Pin
 800ab14:	237f      	movs	r3, #127	@ 0x7f
 800ab16:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |OUT_CH25_Pin|OUT_CH26_Pin|OUT_CH27_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab20:	2300      	movs	r3, #0
 800ab22:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4815      	ldr	r0, [pc, #84]	@ (800ab80 <MX_GPIO_Init+0x3e8>)
 800ab2c:	f002 f804 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_CH33_Pin OUT_CH34_Pin OUT_CH35_Pin OUT_CH36_Pin
                           OUT_CH37_Pin */
  GPIO_InitStruct.Pin = OUT_CH33_Pin|OUT_CH34_Pin|OUT_CH35_Pin|OUT_CH36_Pin
 800ab30:	23f8      	movs	r3, #248	@ 0xf8
 800ab32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |OUT_CH37_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab34:	2301      	movs	r3, #1
 800ab36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800ab40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab44:	4619      	mov	r1, r3
 800ab46:	480b      	ldr	r0, [pc, #44]	@ (800ab74 <MX_GPIO_Init+0x3dc>)
 800ab48:	f001 fff6 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_CH39_Pin OUT_CH40_Pin OUT_CH41_Pin */
  GPIO_InitStruct.Pin = OUT_CH39_Pin|OUT_CH40_Pin|OUT_CH41_Pin;
 800ab4c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800ab50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab52:	2301      	movs	r3, #1
 800ab54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab56:	2300      	movs	r3, #0
 800ab58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab62:	4619      	mov	r1, r3
 800ab64:	4807      	ldr	r0, [pc, #28]	@ (800ab84 <MX_GPIO_Init+0x3ec>)
 800ab66:	f001 ffe7 	bl	800cb38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800ab6a:	bf00      	nop
 800ab6c:	3740      	adds	r7, #64	@ 0x40
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	40022800 	.word	0x40022800
 800ab78:	40021800 	.word	0x40021800
 800ab7c:	40020800 	.word	0x40020800
 800ab80:	40020c00 	.word	0x40020c00
 800ab84:	40020400 	.word	0x40020400

0800ab88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ab8c:	b672      	cpsid	i
}
 800ab8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ab90:	bf00      	nop
 800ab92:	e7fd      	b.n	800ab90 <Error_Handler+0x8>

0800ab94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800ab9a:	4b0f      	ldr	r3, [pc, #60]	@ (800abd8 <HAL_MspInit+0x44>)
 800ab9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab9e:	4a0e      	ldr	r2, [pc, #56]	@ (800abd8 <HAL_MspInit+0x44>)
 800aba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aba4:	6413      	str	r3, [r2, #64]	@ 0x40
 800aba6:	4b0c      	ldr	r3, [pc, #48]	@ (800abd8 <HAL_MspInit+0x44>)
 800aba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800abae:	607b      	str	r3, [r7, #4]
 800abb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800abb2:	4b09      	ldr	r3, [pc, #36]	@ (800abd8 <HAL_MspInit+0x44>)
 800abb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abb6:	4a08      	ldr	r2, [pc, #32]	@ (800abd8 <HAL_MspInit+0x44>)
 800abb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800abbc:	6453      	str	r3, [r2, #68]	@ 0x44
 800abbe:	4b06      	ldr	r3, [pc, #24]	@ (800abd8 <HAL_MspInit+0x44>)
 800abc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abc6:	603b      	str	r3, [r7, #0]
 800abc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	40023800 	.word	0x40023800

0800abdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08c      	sub	sp, #48	@ 0x30
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abe4:	f107 031c 	add.w	r3, r7, #28
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	605a      	str	r2, [r3, #4]
 800abee:	609a      	str	r2, [r3, #8]
 800abf0:	60da      	str	r2, [r3, #12]
 800abf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a2a      	ldr	r2, [pc, #168]	@ (800aca4 <HAL_ADC_MspInit+0xc8>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d124      	bne.n	800ac48 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800abfe:	4b2a      	ldr	r3, [pc, #168]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac02:	4a29      	ldr	r2, [pc, #164]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac08:	6453      	str	r3, [r2, #68]	@ 0x44
 800ac0a:	4b27      	ldr	r3, [pc, #156]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac12:	61bb      	str	r3, [r7, #24]
 800ac14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac16:	4b24      	ldr	r3, [pc, #144]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac1a:	4a23      	ldr	r2, [pc, #140]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac1c:	f043 0302 	orr.w	r3, r3, #2
 800ac20:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac22:	4b21      	ldr	r3, [pc, #132]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac26:	f003 0302 	and.w	r3, r3, #2
 800ac2a:	617b      	str	r3, [r7, #20]
 800ac2c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_IN1_Pin;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ac32:	2303      	movs	r3, #3
 800ac34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac36:	2300      	movs	r3, #0
 800ac38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_IN1_GPIO_Port, &GPIO_InitStruct);
 800ac3a:	f107 031c 	add.w	r3, r7, #28
 800ac3e:	4619      	mov	r1, r3
 800ac40:	481a      	ldr	r0, [pc, #104]	@ (800acac <HAL_ADC_MspInit+0xd0>)
 800ac42:	f001 ff79 	bl	800cb38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800ac46:	e028      	b.n	800ac9a <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a18      	ldr	r2, [pc, #96]	@ (800acb0 <HAL_ADC_MspInit+0xd4>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d123      	bne.n	800ac9a <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800ac52:	4b15      	ldr	r3, [pc, #84]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac56:	4a14      	ldr	r2, [pc, #80]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ac5c:	6453      	str	r3, [r2, #68]	@ 0x44
 800ac5e:	4b12      	ldr	r3, [pc, #72]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac66:	613b      	str	r3, [r7, #16]
 800ac68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac6a:	4b0f      	ldr	r3, [pc, #60]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac6e:	4a0e      	ldr	r2, [pc, #56]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac70:	f043 0302 	orr.w	r3, r3, #2
 800ac74:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac76:	4b0c      	ldr	r3, [pc, #48]	@ (800aca8 <HAL_ADC_MspInit+0xcc>)
 800ac78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac7a:	f003 0302 	and.w	r3, r3, #2
 800ac7e:	60fb      	str	r3, [r7, #12]
 800ac80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_IN2_Pin;
 800ac82:	2302      	movs	r3, #2
 800ac84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ac86:	2303      	movs	r3, #3
 800ac88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_IN2_GPIO_Port, &GPIO_InitStruct);
 800ac8e:	f107 031c 	add.w	r3, r7, #28
 800ac92:	4619      	mov	r1, r3
 800ac94:	4805      	ldr	r0, [pc, #20]	@ (800acac <HAL_ADC_MspInit+0xd0>)
 800ac96:	f001 ff4f 	bl	800cb38 <HAL_GPIO_Init>
}
 800ac9a:	bf00      	nop
 800ac9c:	3730      	adds	r7, #48	@ 0x30
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	40012000 	.word	0x40012000
 800aca8:	40023800 	.word	0x40023800
 800acac:	40020400 	.word	0x40020400
 800acb0:	40012100 	.word	0x40012100

0800acb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b0ae      	sub	sp, #184	@ 0xb8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acbc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800acc0:	2200      	movs	r2, #0
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	605a      	str	r2, [r3, #4]
 800acc6:	609a      	str	r2, [r3, #8]
 800acc8:	60da      	str	r2, [r3, #12]
 800acca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800accc:	f107 0314 	add.w	r3, r7, #20
 800acd0:	2290      	movs	r2, #144	@ 0x90
 800acd2:	2100      	movs	r1, #0
 800acd4:	4618      	mov	r0, r3
 800acd6:	f007 f879 	bl	8011dcc <memset>
  if(hi2c->Instance==I2C3)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a33      	ldr	r2, [pc, #204]	@ (800adac <HAL_I2C_MspInit+0xf8>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d15f      	bne.n	800ada4 <HAL_I2C_MspInit+0xf0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800ace4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ace8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800acea:	2300      	movs	r3, #0
 800acec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800acf0:	f107 0314 	add.w	r3, r7, #20
 800acf4:	4618      	mov	r0, r3
 800acf6:	f003 fc6d 	bl	800e5d4 <HAL_RCCEx_PeriphCLKConfig>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800ad00:	f7ff ff42 	bl	800ab88 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800ad04:	4b2a      	ldr	r3, [pc, #168]	@ (800adb0 <HAL_I2C_MspInit+0xfc>)
 800ad06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad08:	4a29      	ldr	r2, [pc, #164]	@ (800adb0 <HAL_I2C_MspInit+0xfc>)
 800ad0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad0e:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad10:	4b27      	ldr	r3, [pc, #156]	@ (800adb0 <HAL_I2C_MspInit+0xfc>)
 800ad12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad18:	613b      	str	r3, [r7, #16]
 800ad1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad1c:	4b24      	ldr	r3, [pc, #144]	@ (800adb0 <HAL_I2C_MspInit+0xfc>)
 800ad1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad20:	4a23      	ldr	r2, [pc, #140]	@ (800adb0 <HAL_I2C_MspInit+0xfc>)
 800ad22:	f043 0301 	orr.w	r3, r3, #1
 800ad26:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad28:	4b21      	ldr	r3, [pc, #132]	@ (800adb0 <HAL_I2C_MspInit+0xfc>)
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	60fb      	str	r3, [r7, #12]
 800ad32:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH8     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = ER_SCA3_Pin;
 800ad34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ad3c:	2312      	movs	r3, #18
 800ad3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad42:	2300      	movs	r3, #0
 800ad44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800ad4e:	2304      	movs	r3, #4
 800ad50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(ER_SCA3_GPIO_Port, &GPIO_InitStruct);
 800ad54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4816      	ldr	r0, [pc, #88]	@ (800adb4 <HAL_I2C_MspInit+0x100>)
 800ad5c:	f001 feec 	bl	800cb38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ER_SCL3_Pin;
 800ad60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ad68:	2312      	movs	r3, #18
 800ad6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad74:	2303      	movs	r3, #3
 800ad76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800ad7a:	2304      	movs	r3, #4
 800ad7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(ER_SCL3_GPIO_Port, &GPIO_InitStruct);
 800ad80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ad84:	4619      	mov	r1, r3
 800ad86:	480c      	ldr	r0, [pc, #48]	@ (800adb8 <HAL_I2C_MspInit+0x104>)
 800ad88:	f001 fed6 	bl	800cb38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800ad8c:	4b08      	ldr	r3, [pc, #32]	@ (800adb0 <HAL_I2C_MspInit+0xfc>)
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad90:	4a07      	ldr	r2, [pc, #28]	@ (800adb0 <HAL_I2C_MspInit+0xfc>)
 800ad92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ad96:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad98:	4b05      	ldr	r3, [pc, #20]	@ (800adb0 <HAL_I2C_MspInit+0xfc>)
 800ad9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ada0:	60bb      	str	r3, [r7, #8]
 800ada2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800ada4:	bf00      	nop
 800ada6:	37b8      	adds	r7, #184	@ 0xb8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	40005c00 	.word	0x40005c00
 800adb0:	40023800 	.word	0x40023800
 800adb4:	40021c00 	.word	0x40021c00
 800adb8:	40020000 	.word	0x40020000

0800adbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b092      	sub	sp, #72	@ 0x48
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adc4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800adc8:	2200      	movs	r2, #0
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	605a      	str	r2, [r3, #4]
 800adce:	609a      	str	r2, [r3, #8]
 800add0:	60da      	str	r2, [r3, #12]
 800add2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a95      	ldr	r2, [pc, #596]	@ (800b030 <HAL_SPI_MspInit+0x274>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d162      	bne.n	800aea4 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800adde:	4b95      	ldr	r3, [pc, #596]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800ade0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ade2:	4a94      	ldr	r2, [pc, #592]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800ade4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ade8:	6453      	str	r3, [r2, #68]	@ 0x44
 800adea:	4b92      	ldr	r3, [pc, #584]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800adec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800adf2:	633b      	str	r3, [r7, #48]	@ 0x30
 800adf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800adf6:	4b8f      	ldr	r3, [pc, #572]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800adf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adfa:	4a8e      	ldr	r2, [pc, #568]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800adfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae00:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae02:	4b8c      	ldr	r3, [pc, #560]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800ae04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**SPI1 GPIO Configuration
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_2_Pin|CLK_2_Pin;
 800ae0e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800ae12:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae14:	2302      	movs	r3, #2
 800ae16:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ae20:	2305      	movs	r3, #5
 800ae22:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ae24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4883      	ldr	r0, [pc, #524]	@ (800b038 <HAL_SPI_MspInit+0x27c>)
 800ae2c:	f001 fe84 	bl	800cb38 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800ae30:	4b82      	ldr	r3, [pc, #520]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae32:	4a83      	ldr	r2, [pc, #524]	@ (800b040 <HAL_SPI_MspInit+0x284>)
 800ae34:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800ae36:	4b81      	ldr	r3, [pc, #516]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae38:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800ae3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae3e:	4b7f      	ldr	r3, [pc, #508]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae40:	2240      	movs	r2, #64	@ 0x40
 800ae42:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae44:	4b7d      	ldr	r3, [pc, #500]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ae4a:	4b7c      	ldr	r3, [pc, #496]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ae50:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ae52:	4b7a      	ldr	r3, [pc, #488]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae58:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ae5a:	4b78      	ldr	r3, [pc, #480]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ae60:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800ae62:	4b76      	ldr	r3, [pc, #472]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ae68:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ae6a:	4b74      	ldr	r3, [pc, #464]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ae70:	4b72      	ldr	r3, [pc, #456]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800ae76:	4871      	ldr	r0, [pc, #452]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae78:	f001 f960 	bl	800c13c <HAL_DMA_Init>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d001      	beq.n	800ae86 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800ae82:	f7ff fe81 	bl	800ab88 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a6c      	ldr	r2, [pc, #432]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae8a:	655a      	str	r2, [r3, #84]	@ 0x54
 800ae8c:	4a6b      	ldr	r2, [pc, #428]	@ (800b03c <HAL_SPI_MspInit+0x280>)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800ae92:	2200      	movs	r2, #0
 800ae94:	2100      	movs	r1, #0
 800ae96:	2023      	movs	r0, #35	@ 0x23
 800ae98:	f001 f918 	bl	800c0cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800ae9c:	2023      	movs	r0, #35	@ 0x23
 800ae9e:	f001 f931 	bl	800c104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800aea2:	e10d      	b.n	800b0c0 <HAL_SPI_MspInit+0x304>
  else if(hspi->Instance==SPI2)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a66      	ldr	r2, [pc, #408]	@ (800b044 <HAL_SPI_MspInit+0x288>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d161      	bne.n	800af72 <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800aeae:	4b61      	ldr	r3, [pc, #388]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb2:	4a60      	ldr	r2, [pc, #384]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800aeb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aeb8:	6413      	str	r3, [r2, #64]	@ 0x40
 800aeba:	4b5e      	ldr	r3, [pc, #376]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800aebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aec6:	4b5b      	ldr	r3, [pc, #364]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800aec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeca:	4a5a      	ldr	r2, [pc, #360]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800aecc:	f043 0302 	orr.w	r3, r3, #2
 800aed0:	6313      	str	r3, [r2, #48]	@ 0x30
 800aed2:	4b58      	ldr	r3, [pc, #352]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800aed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aed6:	f003 0302 	and.w	r3, r3, #2
 800aeda:	627b      	str	r3, [r7, #36]	@ 0x24
 800aedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = CLK_1_Pin|MISO_1_Pin;
 800aede:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800aee2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aee4:	2302      	movs	r3, #2
 800aee6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aee8:	2300      	movs	r3, #0
 800aeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aeec:	2303      	movs	r3, #3
 800aeee:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800aef0:	2305      	movs	r3, #5
 800aef2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aef4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800aef8:	4619      	mov	r1, r3
 800aefa:	4853      	ldr	r0, [pc, #332]	@ (800b048 <HAL_SPI_MspInit+0x28c>)
 800aefc:	f001 fe1c 	bl	800cb38 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800af00:	4b52      	ldr	r3, [pc, #328]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af02:	4a53      	ldr	r2, [pc, #332]	@ (800b050 <HAL_SPI_MspInit+0x294>)
 800af04:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800af06:	4b51      	ldr	r3, [pc, #324]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af08:	2200      	movs	r2, #0
 800af0a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800af0c:	4b4f      	ldr	r3, [pc, #316]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af0e:	2240      	movs	r2, #64	@ 0x40
 800af10:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800af12:	4b4e      	ldr	r3, [pc, #312]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af14:	2200      	movs	r2, #0
 800af16:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800af18:	4b4c      	ldr	r3, [pc, #304]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800af1e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800af20:	4b4a      	ldr	r3, [pc, #296]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af26:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800af28:	4b48      	ldr	r3, [pc, #288]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800af2e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800af30:	4b46      	ldr	r3, [pc, #280]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af36:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800af38:	4b44      	ldr	r3, [pc, #272]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af3e:	4b43      	ldr	r3, [pc, #268]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af40:	2200      	movs	r2, #0
 800af42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800af44:	4841      	ldr	r0, [pc, #260]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af46:	f001 f8f9 	bl	800c13c <HAL_DMA_Init>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <HAL_SPI_MspInit+0x198>
      Error_Handler();
 800af50:	f7ff fe1a 	bl	800ab88 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a3d      	ldr	r2, [pc, #244]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af58:	655a      	str	r2, [r3, #84]	@ 0x54
 800af5a:	4a3c      	ldr	r2, [pc, #240]	@ (800b04c <HAL_SPI_MspInit+0x290>)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800af60:	2200      	movs	r2, #0
 800af62:	2100      	movs	r1, #0
 800af64:	2024      	movs	r0, #36	@ 0x24
 800af66:	f001 f8b1 	bl	800c0cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800af6a:	2024      	movs	r0, #36	@ 0x24
 800af6c:	f001 f8ca 	bl	800c104 <HAL_NVIC_EnableIRQ>
}
 800af70:	e0a6      	b.n	800b0c0 <HAL_SPI_MspInit+0x304>
  else if(hspi->Instance==SPI3)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a37      	ldr	r2, [pc, #220]	@ (800b054 <HAL_SPI_MspInit+0x298>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d129      	bne.n	800afd0 <HAL_SPI_MspInit+0x214>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800af7c:	4b2d      	ldr	r3, [pc, #180]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800af7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af80:	4a2c      	ldr	r2, [pc, #176]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800af82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af86:	6413      	str	r3, [r2, #64]	@ 0x40
 800af88:	4b2a      	ldr	r3, [pc, #168]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800af8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af90:	623b      	str	r3, [r7, #32]
 800af92:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af94:	4b27      	ldr	r3, [pc, #156]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800af96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af98:	4a26      	ldr	r2, [pc, #152]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800af9a:	f043 0304 	orr.w	r3, r3, #4
 800af9e:	6313      	str	r3, [r2, #48]	@ 0x30
 800afa0:	4b24      	ldr	r3, [pc, #144]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800afa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa4:	f003 0304 	and.w	r3, r3, #4
 800afa8:	61fb      	str	r3, [r7, #28]
 800afaa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = SCK_3_Pin|MISO_3_Pin|MOSI_3_Pin;
 800afac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800afb0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afb2:	2302      	movs	r3, #2
 800afb4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afb6:	2300      	movs	r3, #0
 800afb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afba:	2303      	movs	r3, #3
 800afbc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800afbe:	2306      	movs	r3, #6
 800afc0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800afc2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800afc6:	4619      	mov	r1, r3
 800afc8:	4823      	ldr	r0, [pc, #140]	@ (800b058 <HAL_SPI_MspInit+0x29c>)
 800afca:	f001 fdb5 	bl	800cb38 <HAL_GPIO_Init>
}
 800afce:	e077      	b.n	800b0c0 <HAL_SPI_MspInit+0x304>
  else if(hspi->Instance==SPI4)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a21      	ldr	r2, [pc, #132]	@ (800b05c <HAL_SPI_MspInit+0x2a0>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d144      	bne.n	800b064 <HAL_SPI_MspInit+0x2a8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800afda:	4b16      	ldr	r3, [pc, #88]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800afdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afde:	4a15      	ldr	r2, [pc, #84]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800afe0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800afe4:	6453      	str	r3, [r2, #68]	@ 0x44
 800afe6:	4b13      	ldr	r3, [pc, #76]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800afe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afee:	61bb      	str	r3, [r7, #24]
 800aff0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800aff2:	4b10      	ldr	r3, [pc, #64]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800aff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff6:	4a0f      	ldr	r2, [pc, #60]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800aff8:	f043 0310 	orr.w	r3, r3, #16
 800affc:	6313      	str	r3, [r2, #48]	@ 0x30
 800affe:	4b0d      	ldr	r3, [pc, #52]	@ (800b034 <HAL_SPI_MspInit+0x278>)
 800b000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b002:	f003 0310 	and.w	r3, r3, #16
 800b006:	617b      	str	r3, [r7, #20]
 800b008:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SCK_4_Pin|MISO_4_Pin|MOSI_4_Pin;
 800b00a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800b00e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b010:	2302      	movs	r3, #2
 800b012:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b014:	2300      	movs	r3, #0
 800b016:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b018:	2303      	movs	r3, #3
 800b01a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800b01c:	2305      	movs	r3, #5
 800b01e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b020:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b024:	4619      	mov	r1, r3
 800b026:	480e      	ldr	r0, [pc, #56]	@ (800b060 <HAL_SPI_MspInit+0x2a4>)
 800b028:	f001 fd86 	bl	800cb38 <HAL_GPIO_Init>
}
 800b02c:	e048      	b.n	800b0c0 <HAL_SPI_MspInit+0x304>
 800b02e:	bf00      	nop
 800b030:	40013000 	.word	0x40013000
 800b034:	40023800 	.word	0x40023800
 800b038:	40021800 	.word	0x40021800
 800b03c:	20001564 	.word	0x20001564
 800b040:	40026458 	.word	0x40026458
 800b044:	40003800 	.word	0x40003800
 800b048:	40020400 	.word	0x40020400
 800b04c:	200015c4 	.word	0x200015c4
 800b050:	40026070 	.word	0x40026070
 800b054:	40003c00 	.word	0x40003c00
 800b058:	40020800 	.word	0x40020800
 800b05c:	40013400 	.word	0x40013400
 800b060:	40021000 	.word	0x40021000
  else if(hspi->Instance==SPI5)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a17      	ldr	r2, [pc, #92]	@ (800b0c8 <HAL_SPI_MspInit+0x30c>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d128      	bne.n	800b0c0 <HAL_SPI_MspInit+0x304>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800b06e:	4b17      	ldr	r3, [pc, #92]	@ (800b0cc <HAL_SPI_MspInit+0x310>)
 800b070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b072:	4a16      	ldr	r2, [pc, #88]	@ (800b0cc <HAL_SPI_MspInit+0x310>)
 800b074:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b078:	6453      	str	r3, [r2, #68]	@ 0x44
 800b07a:	4b14      	ldr	r3, [pc, #80]	@ (800b0cc <HAL_SPI_MspInit+0x310>)
 800b07c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b07e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b082:	613b      	str	r3, [r7, #16]
 800b084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800b086:	4b11      	ldr	r3, [pc, #68]	@ (800b0cc <HAL_SPI_MspInit+0x310>)
 800b088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b08a:	4a10      	ldr	r2, [pc, #64]	@ (800b0cc <HAL_SPI_MspInit+0x310>)
 800b08c:	f043 0320 	orr.w	r3, r3, #32
 800b090:	6313      	str	r3, [r2, #48]	@ 0x30
 800b092:	4b0e      	ldr	r3, [pc, #56]	@ (800b0cc <HAL_SPI_MspInit+0x310>)
 800b094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b096:	f003 0320 	and.w	r3, r3, #32
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCK_5_Pin|MISO_5_Pin|MOSI_5_Pin;
 800b09e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800b0a2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0a4:	2302      	movs	r3, #2
 800b0a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800b0b0:	2305      	movs	r3, #5
 800b0b2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b0b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4805      	ldr	r0, [pc, #20]	@ (800b0d0 <HAL_SPI_MspInit+0x314>)
 800b0bc:	f001 fd3c 	bl	800cb38 <HAL_GPIO_Init>
}
 800b0c0:	bf00      	nop
 800b0c2:	3748      	adds	r7, #72	@ 0x48
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	40015000 	.word	0x40015000
 800b0cc:	40023800 	.word	0x40023800
 800b0d0:	40021400 	.word	0x40021400

0800b0d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0e4:	d114      	bne.n	800b110 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b0e6:	4b33      	ldr	r3, [pc, #204]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ea:	4a32      	ldr	r2, [pc, #200]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b0ec:	f043 0301 	orr.w	r3, r3, #1
 800b0f0:	6413      	str	r3, [r2, #64]	@ 0x40
 800b0f2:	4b30      	ldr	r3, [pc, #192]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b0f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	617b      	str	r3, [r7, #20]
 800b0fc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b0fe:	2200      	movs	r2, #0
 800b100:	2100      	movs	r1, #0
 800b102:	201c      	movs	r0, #28
 800b104:	f000 ffe2 	bl	800c0cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b108:	201c      	movs	r0, #28
 800b10a:	f000 fffb 	bl	800c104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800b10e:	e04c      	b.n	800b1aa <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a28      	ldr	r2, [pc, #160]	@ (800b1b8 <HAL_TIM_Base_MspInit+0xe4>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d114      	bne.n	800b144 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b11a:	4b26      	ldr	r3, [pc, #152]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b11c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b11e:	4a25      	ldr	r2, [pc, #148]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b120:	f043 0304 	orr.w	r3, r3, #4
 800b124:	6413      	str	r3, [r2, #64]	@ 0x40
 800b126:	4b23      	ldr	r3, [pc, #140]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b12a:	f003 0304 	and.w	r3, r3, #4
 800b12e:	613b      	str	r3, [r7, #16]
 800b130:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800b132:	2200      	movs	r2, #0
 800b134:	2100      	movs	r1, #0
 800b136:	201e      	movs	r0, #30
 800b138:	f000 ffc8 	bl	800c0cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b13c:	201e      	movs	r0, #30
 800b13e:	f000 ffe1 	bl	800c104 <HAL_NVIC_EnableIRQ>
}
 800b142:	e032      	b.n	800b1aa <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a1c      	ldr	r2, [pc, #112]	@ (800b1bc <HAL_TIM_Base_MspInit+0xe8>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d114      	bne.n	800b178 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b14e:	4b19      	ldr	r3, [pc, #100]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b152:	4a18      	ldr	r2, [pc, #96]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b154:	f043 0308 	orr.w	r3, r3, #8
 800b158:	6413      	str	r3, [r2, #64]	@ 0x40
 800b15a:	4b16      	ldr	r3, [pc, #88]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b15e:	f003 0308 	and.w	r3, r3, #8
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800b166:	2200      	movs	r2, #0
 800b168:	2100      	movs	r1, #0
 800b16a:	2032      	movs	r0, #50	@ 0x32
 800b16c:	f000 ffae 	bl	800c0cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800b170:	2032      	movs	r0, #50	@ 0x32
 800b172:	f000 ffc7 	bl	800c104 <HAL_NVIC_EnableIRQ>
}
 800b176:	e018      	b.n	800b1aa <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a10      	ldr	r2, [pc, #64]	@ (800b1c0 <HAL_TIM_Base_MspInit+0xec>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d113      	bne.n	800b1aa <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b182:	4b0c      	ldr	r3, [pc, #48]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b186:	4a0b      	ldr	r2, [pc, #44]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b188:	f043 0320 	orr.w	r3, r3, #32
 800b18c:	6413      	str	r3, [r2, #64]	@ 0x40
 800b18e:	4b09      	ldr	r3, [pc, #36]	@ (800b1b4 <HAL_TIM_Base_MspInit+0xe0>)
 800b190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b192:	f003 0320 	and.w	r3, r3, #32
 800b196:	60bb      	str	r3, [r7, #8]
 800b198:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800b19a:	2200      	movs	r2, #0
 800b19c:	2100      	movs	r1, #0
 800b19e:	2037      	movs	r0, #55	@ 0x37
 800b1a0:	f000 ff94 	bl	800c0cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b1a4:	2037      	movs	r0, #55	@ 0x37
 800b1a6:	f000 ffad 	bl	800c104 <HAL_NVIC_EnableIRQ>
}
 800b1aa:	bf00      	nop
 800b1ac:	3718      	adds	r7, #24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	40023800 	.word	0x40023800
 800b1b8:	40000800 	.word	0x40000800
 800b1bc:	40000c00 	.word	0x40000c00
 800b1c0:	40001400 	.word	0x40001400

0800b1c4 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1d4:	d109      	bne.n	800b1ea <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 800b1d6:	4b1d      	ldr	r3, [pc, #116]	@ (800b24c <HAL_TIM_Base_MspDeInit+0x88>)
 800b1d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1da:	4a1c      	ldr	r2, [pc, #112]	@ (800b24c <HAL_TIM_Base_MspDeInit+0x88>)
 800b1dc:	f023 0301 	bic.w	r3, r3, #1
 800b1e0:	6413      	str	r3, [r2, #64]	@ 0x40

    /* TIM2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 800b1e2:	201c      	movs	r0, #28
 800b1e4:	f000 ff9c 	bl	800c120 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM7_MspDeInit 1 */

  /* USER CODE END TIM7_MspDeInit 1 */
  }

}
 800b1e8:	e02b      	b.n	800b242 <HAL_TIM_Base_MspDeInit+0x7e>
  else if(htim_base->Instance==TIM4)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a18      	ldr	r2, [pc, #96]	@ (800b250 <HAL_TIM_Base_MspDeInit+0x8c>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d109      	bne.n	800b208 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM4_CLK_DISABLE();
 800b1f4:	4b15      	ldr	r3, [pc, #84]	@ (800b24c <HAL_TIM_Base_MspDeInit+0x88>)
 800b1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1f8:	4a14      	ldr	r2, [pc, #80]	@ (800b24c <HAL_TIM_Base_MspDeInit+0x88>)
 800b1fa:	f023 0304 	bic.w	r3, r3, #4
 800b1fe:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800b200:	201e      	movs	r0, #30
 800b202:	f000 ff8d 	bl	800c120 <HAL_NVIC_DisableIRQ>
}
 800b206:	e01c      	b.n	800b242 <HAL_TIM_Base_MspDeInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a11      	ldr	r2, [pc, #68]	@ (800b254 <HAL_TIM_Base_MspDeInit+0x90>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d109      	bne.n	800b226 <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM5_CLK_DISABLE();
 800b212:	4b0e      	ldr	r3, [pc, #56]	@ (800b24c <HAL_TIM_Base_MspDeInit+0x88>)
 800b214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b216:	4a0d      	ldr	r2, [pc, #52]	@ (800b24c <HAL_TIM_Base_MspDeInit+0x88>)
 800b218:	f023 0308 	bic.w	r3, r3, #8
 800b21c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 800b21e:	2032      	movs	r0, #50	@ 0x32
 800b220:	f000 ff7e 	bl	800c120 <HAL_NVIC_DisableIRQ>
}
 800b224:	e00d      	b.n	800b242 <HAL_TIM_Base_MspDeInit+0x7e>
  else if(htim_base->Instance==TIM7)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a0b      	ldr	r2, [pc, #44]	@ (800b258 <HAL_TIM_Base_MspDeInit+0x94>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d108      	bne.n	800b242 <HAL_TIM_Base_MspDeInit+0x7e>
    __HAL_RCC_TIM7_CLK_DISABLE();
 800b230:	4b06      	ldr	r3, [pc, #24]	@ (800b24c <HAL_TIM_Base_MspDeInit+0x88>)
 800b232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b234:	4a05      	ldr	r2, [pc, #20]	@ (800b24c <HAL_TIM_Base_MspDeInit+0x88>)
 800b236:	f023 0320 	bic.w	r3, r3, #32
 800b23a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM7_IRQn);
 800b23c:	2037      	movs	r0, #55	@ 0x37
 800b23e:	f000 ff6f 	bl	800c120 <HAL_NVIC_DisableIRQ>
}
 800b242:	bf00      	nop
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	40023800 	.word	0x40023800
 800b250:	40000800 	.word	0x40000800
 800b254:	40000c00 	.word	0x40000c00
 800b258:	40001400 	.word	0x40001400

0800b25c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b0ae      	sub	sp, #184	@ 0xb8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b264:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b268:	2200      	movs	r2, #0
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	605a      	str	r2, [r3, #4]
 800b26e:	609a      	str	r2, [r3, #8]
 800b270:	60da      	str	r2, [r3, #12]
 800b272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b274:	f107 0314 	add.w	r3, r7, #20
 800b278:	2290      	movs	r2, #144	@ 0x90
 800b27a:	2100      	movs	r1, #0
 800b27c:	4618      	mov	r0, r3
 800b27e:	f006 fda5 	bl	8011dcc <memset>
  if(huart->Instance==UART7)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a3d      	ldr	r2, [pc, #244]	@ (800b37c <HAL_UART_MspInit+0x120>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d173      	bne.n	800b374 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800b28c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b290:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800b292:	2300      	movs	r3, #0
 800b294:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b296:	f107 0314 	add.w	r3, r7, #20
 800b29a:	4618      	mov	r0, r3
 800b29c:	f003 f99a 	bl	800e5d4 <HAL_RCCEx_PeriphCLKConfig>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800b2a6:	f7ff fc6f 	bl	800ab88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800b2aa:	4b35      	ldr	r3, [pc, #212]	@ (800b380 <HAL_UART_MspInit+0x124>)
 800b2ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ae:	4a34      	ldr	r2, [pc, #208]	@ (800b380 <HAL_UART_MspInit+0x124>)
 800b2b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b2b4:	6413      	str	r3, [r2, #64]	@ 0x40
 800b2b6:	4b32      	ldr	r3, [pc, #200]	@ (800b380 <HAL_UART_MspInit+0x124>)
 800b2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b2be:	613b      	str	r3, [r7, #16]
 800b2c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b2c2:	4b2f      	ldr	r3, [pc, #188]	@ (800b380 <HAL_UART_MspInit+0x124>)
 800b2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2c6:	4a2e      	ldr	r2, [pc, #184]	@ (800b380 <HAL_UART_MspInit+0x124>)
 800b2c8:	f043 0310 	orr.w	r3, r3, #16
 800b2cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800b2ce:	4b2c      	ldr	r3, [pc, #176]	@ (800b380 <HAL_UART_MspInit+0x124>)
 800b2d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2d2:	f003 0310 	and.w	r3, r3, #16
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = SCIRXDB_Pin|SCITXDB_Pin;
 800b2da:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800b2de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800b2f4:	2308      	movs	r3, #8
 800b2f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b2fa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b2fe:	4619      	mov	r1, r3
 800b300:	4820      	ldr	r0, [pc, #128]	@ (800b384 <HAL_UART_MspInit+0x128>)
 800b302:	f001 fc19 	bl	800cb38 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream1;
 800b306:	4b20      	ldr	r3, [pc, #128]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b308:	4a20      	ldr	r2, [pc, #128]	@ (800b38c <HAL_UART_MspInit+0x130>)
 800b30a:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 800b30c:	4b1e      	ldr	r3, [pc, #120]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b30e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800b312:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b314:	4b1c      	ldr	r3, [pc, #112]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b316:	2240      	movs	r2, #64	@ 0x40
 800b318:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b31a:	4b1b      	ldr	r3, [pc, #108]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b320:	4b19      	ldr	r3, [pc, #100]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b322:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b326:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b328:	4b17      	ldr	r3, [pc, #92]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b32e:	4b16      	ldr	r3, [pc, #88]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b330:	2200      	movs	r2, #0
 800b332:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800b334:	4b14      	ldr	r3, [pc, #80]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b336:	2200      	movs	r2, #0
 800b338:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b33a:	4b13      	ldr	r3, [pc, #76]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b33c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800b340:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b342:	4b11      	ldr	r3, [pc, #68]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b344:	2200      	movs	r2, #0
 800b346:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800b348:	480f      	ldr	r0, [pc, #60]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b34a:	f000 fef7 	bl	800c13c <HAL_DMA_Init>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 800b354:	f7ff fc18 	bl	800ab88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a0b      	ldr	r2, [pc, #44]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b35c:	671a      	str	r2, [r3, #112]	@ 0x70
 800b35e:	4a0a      	ldr	r2, [pc, #40]	@ (800b388 <HAL_UART_MspInit+0x12c>)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800b364:	2200      	movs	r2, #0
 800b366:	2100      	movs	r1, #0
 800b368:	2052      	movs	r0, #82	@ 0x52
 800b36a:	f000 feaf 	bl	800c0cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800b36e:	2052      	movs	r0, #82	@ 0x52
 800b370:	f000 fec8 	bl	800c104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800b374:	bf00      	nop
 800b376:	37b8      	adds	r7, #184	@ 0xb8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	40007800 	.word	0x40007800
 800b380:	40023800 	.word	0x40023800
 800b384:	40021000 	.word	0x40021000
 800b388:	200017dc 	.word	0x200017dc
 800b38c:	40026028 	.word	0x40026028

0800b390 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08e      	sub	sp, #56	@ 0x38
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800b398:	2300      	movs	r3, #0
 800b39a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800b39c:	2300      	movs	r3, #0
 800b39e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b3a0:	4b33      	ldr	r3, [pc, #204]	@ (800b470 <HAL_InitTick+0xe0>)
 800b3a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3a4:	4a32      	ldr	r2, [pc, #200]	@ (800b470 <HAL_InitTick+0xe0>)
 800b3a6:	f043 0310 	orr.w	r3, r3, #16
 800b3aa:	6413      	str	r3, [r2, #64]	@ 0x40
 800b3ac:	4b30      	ldr	r3, [pc, #192]	@ (800b470 <HAL_InitTick+0xe0>)
 800b3ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3b0:	f003 0310 	and.w	r3, r3, #16
 800b3b4:	60fb      	str	r3, [r7, #12]
 800b3b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b3b8:	f107 0210 	add.w	r2, r7, #16
 800b3bc:	f107 0314 	add.w	r3, r7, #20
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f003 f8d4 	bl	800e570 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800b3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d103      	bne.n	800b3da <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b3d2:	f003 f8a5 	bl	800e520 <HAL_RCC_GetPCLK1Freq>
 800b3d6:	6378      	str	r0, [r7, #52]	@ 0x34
 800b3d8:	e004      	b.n	800b3e4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800b3da:	f003 f8a1 	bl	800e520 <HAL_RCC_GetPCLK1Freq>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	005b      	lsls	r3, r3, #1
 800b3e2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e6:	4a23      	ldr	r2, [pc, #140]	@ (800b474 <HAL_InitTick+0xe4>)
 800b3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ec:	0c9b      	lsrs	r3, r3, #18
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b3f2:	4b21      	ldr	r3, [pc, #132]	@ (800b478 <HAL_InitTick+0xe8>)
 800b3f4:	4a21      	ldr	r2, [pc, #132]	@ (800b47c <HAL_InitTick+0xec>)
 800b3f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b3f8:	4b1f      	ldr	r3, [pc, #124]	@ (800b478 <HAL_InitTick+0xe8>)
 800b3fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800b3fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b400:	4a1d      	ldr	r2, [pc, #116]	@ (800b478 <HAL_InitTick+0xe8>)
 800b402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b404:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b406:	4b1c      	ldr	r3, [pc, #112]	@ (800b478 <HAL_InitTick+0xe8>)
 800b408:	2200      	movs	r2, #0
 800b40a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b40c:	4b1a      	ldr	r3, [pc, #104]	@ (800b478 <HAL_InitTick+0xe8>)
 800b40e:	2200      	movs	r2, #0
 800b410:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b412:	4b19      	ldr	r3, [pc, #100]	@ (800b478 <HAL_InitTick+0xe8>)
 800b414:	2200      	movs	r2, #0
 800b416:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800b418:	4817      	ldr	r0, [pc, #92]	@ (800b478 <HAL_InitTick+0xe8>)
 800b41a:	f004 fbeb 	bl	800fbf4 <HAL_TIM_Base_Init>
 800b41e:	4603      	mov	r3, r0
 800b420:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800b424:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d11b      	bne.n	800b464 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800b42c:	4812      	ldr	r0, [pc, #72]	@ (800b478 <HAL_InitTick+0xe8>)
 800b42e:	f004 fc95 	bl	800fd5c <HAL_TIM_Base_Start_IT>
 800b432:	4603      	mov	r3, r0
 800b434:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800b438:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d111      	bne.n	800b464 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b440:	2036      	movs	r0, #54	@ 0x36
 800b442:	f000 fe5f 	bl	800c104 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b0f      	cmp	r3, #15
 800b44a:	d808      	bhi.n	800b45e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800b44c:	2200      	movs	r2, #0
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	2036      	movs	r0, #54	@ 0x36
 800b452:	f000 fe3b 	bl	800c0cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b456:	4a0a      	ldr	r2, [pc, #40]	@ (800b480 <HAL_InitTick+0xf0>)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6013      	str	r3, [r2, #0]
 800b45c:	e002      	b.n	800b464 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800b464:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3738      	adds	r7, #56	@ 0x38
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	40023800 	.word	0x40023800
 800b474:	431bde83 	.word	0x431bde83
 800b478:	2000183c 	.word	0x2000183c
 800b47c:	40001000 	.word	0x40001000
 800b480:	200000d4 	.word	0x200000d4

0800b484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b484:	b480      	push	{r7}
 800b486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b488:	bf00      	nop
 800b48a:	e7fd      	b.n	800b488 <NMI_Handler+0x4>

0800b48c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b48c:	b480      	push	{r7}
 800b48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b490:	bf00      	nop
 800b492:	e7fd      	b.n	800b490 <HardFault_Handler+0x4>

0800b494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b494:	b480      	push	{r7}
 800b496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b498:	bf00      	nop
 800b49a:	e7fd      	b.n	800b498 <MemManage_Handler+0x4>

0800b49c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b49c:	b480      	push	{r7}
 800b49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b4a0:	bf00      	nop
 800b4a2:	e7fd      	b.n	800b4a0 <BusFault_Handler+0x4>

0800b4a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b4a8:	bf00      	nop
 800b4aa:	e7fd      	b.n	800b4a8 <UsageFault_Handler+0x4>

0800b4ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b4b0:	bf00      	nop
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b4be:	bf00      	nop
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b4cc:	bf00      	nop
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b4da:	bf00      	nop
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 800b4e8:	4802      	ldr	r0, [pc, #8]	@ (800b4f4 <DMA1_Stream1_IRQHandler+0x10>)
 800b4ea:	f000 ffc7 	bl	800c47c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b4ee:	bf00      	nop
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	200017dc 	.word	0x200017dc

0800b4f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800b4fc:	4802      	ldr	r0, [pc, #8]	@ (800b508 <DMA1_Stream4_IRQHandler+0x10>)
 800b4fe:	f000 ffbd 	bl	800c47c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b502:	bf00      	nop
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	200015c4 	.word	0x200015c4

0800b50c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b510:	4802      	ldr	r0, [pc, #8]	@ (800b51c <TIM2_IRQHandler+0x10>)
 800b512:	f004 fc9b 	bl	800fe4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b516:	bf00      	nop
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	20001624 	.word	0x20001624

0800b520 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800b524:	4802      	ldr	r0, [pc, #8]	@ (800b530 <TIM4_IRQHandler+0x10>)
 800b526:	f004 fc91 	bl	800fe4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800b52a:	bf00      	nop
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	20001670 	.word	0x20001670

0800b534 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800b538:	4802      	ldr	r0, [pc, #8]	@ (800b544 <SPI1_IRQHandler+0x10>)
 800b53a:	f004 f825 	bl	800f588 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800b53e:	bf00      	nop
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20001370 	.word	0x20001370

0800b548 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800b54c:	4802      	ldr	r0, [pc, #8]	@ (800b558 <SPI2_IRQHandler+0x10>)
 800b54e:	f004 f81b 	bl	800f588 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800b552:	bf00      	nop
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	200013d4 	.word	0x200013d4

0800b55c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800b560:	4802      	ldr	r0, [pc, #8]	@ (800b56c <TIM5_IRQHandler+0x10>)
 800b562:	f004 fc73 	bl	800fe4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800b566:	bf00      	nop
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	200016bc 	.word	0x200016bc

0800b570 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b574:	4802      	ldr	r0, [pc, #8]	@ (800b580 <TIM6_DAC_IRQHandler+0x10>)
 800b576:	f004 fc69 	bl	800fe4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b57a:	bf00      	nop
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	2000183c 	.word	0x2000183c

0800b584 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b588:	4802      	ldr	r0, [pc, #8]	@ (800b594 <TIM7_IRQHandler+0x10>)
 800b58a:	f004 fc5f 	bl	800fe4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800b58e:	bf00      	nop
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	20001708 	.word	0x20001708

0800b598 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800b59c:	4802      	ldr	r0, [pc, #8]	@ (800b5a8 <DMA2_Stream3_IRQHandler+0x10>)
 800b59e:	f000 ff6d 	bl	800c47c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800b5a2:	bf00      	nop
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20001564 	.word	0x20001564

0800b5ac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800b5b0:	4802      	ldr	r0, [pc, #8]	@ (800b5bc <ETH_IRQHandler+0x10>)
 800b5b2:	f001 f9cd 	bl	800c950 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800b5b6:	bf00      	nop
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	2000188c 	.word	0x2000188c

0800b5c0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800b5c4:	4802      	ldr	r0, [pc, #8]	@ (800b5d0 <ETH_WKUP_IRQHandler+0x10>)
 800b5c6:	f001 f9c3 	bl	800c950 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800b5ca:	bf00      	nop
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	2000188c 	.word	0x2000188c

0800b5d4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800b5d8:	4802      	ldr	r0, [pc, #8]	@ (800b5e4 <UART7_IRQHandler+0x10>)
 800b5da:	f005 f93d 	bl	8010858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800b5de:	bf00      	nop
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20001754 	.word	0x20001754

0800b5e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b5ec:	4b06      	ldr	r3, [pc, #24]	@ (800b608 <SystemInit+0x20>)
 800b5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5f2:	4a05      	ldr	r2, [pc, #20]	@ (800b608 <SystemInit+0x20>)
 800b5f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b5f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b5fc:	bf00      	nop
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	e000ed00 	.word	0xe000ed00

0800b60c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b60c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800b644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b610:	480d      	ldr	r0, [pc, #52]	@ (800b648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b612:	490e      	ldr	r1, [pc, #56]	@ (800b64c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b614:	4a0e      	ldr	r2, [pc, #56]	@ (800b650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b618:	e002      	b.n	800b620 <LoopCopyDataInit>

0800b61a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b61a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b61c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b61e:	3304      	adds	r3, #4

0800b620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b624:	d3f9      	bcc.n	800b61a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b626:	4a0b      	ldr	r2, [pc, #44]	@ (800b654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b628:	4c0b      	ldr	r4, [pc, #44]	@ (800b658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b62a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b62c:	e001      	b.n	800b632 <LoopFillZerobss>

0800b62e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b62e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b630:	3204      	adds	r2, #4

0800b632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b634:	d3fb      	bcc.n	800b62e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b636:	f7ff ffd7 	bl	800b5e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b63a:	f006 fbcf 	bl	8011ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b63e:	f7fe fc6b 	bl	8009f18 <main>
  bx  lr    
 800b642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b644:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800b648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b64c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 800b650:	08012060 	.word	0x08012060
  ldr r2, =_sbss
 800b654:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 800b658:	2000193c 	.word	0x2000193c

0800b65c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b65c:	e7fe      	b.n	800b65c <ADC_IRQHandler>

0800b65e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b662:	2003      	movs	r0, #3
 800b664:	f000 fd27 	bl	800c0b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b668:	200f      	movs	r0, #15
 800b66a:	f7ff fe91 	bl	800b390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b66e:	f7ff fa91 	bl	800ab94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	bd80      	pop	{r7, pc}

0800b678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b678:	b480      	push	{r7}
 800b67a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b67c:	4b06      	ldr	r3, [pc, #24]	@ (800b698 <HAL_IncTick+0x20>)
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	4b06      	ldr	r3, [pc, #24]	@ (800b69c <HAL_IncTick+0x24>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4413      	add	r3, r2
 800b688:	4a04      	ldr	r2, [pc, #16]	@ (800b69c <HAL_IncTick+0x24>)
 800b68a:	6013      	str	r3, [r2, #0]
}
 800b68c:	bf00      	nop
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	200000d8 	.word	0x200000d8
 800b69c:	20001888 	.word	0x20001888

0800b6a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	af00      	add	r7, sp, #0
  return uwTick;
 800b6a4:	4b03      	ldr	r3, [pc, #12]	@ (800b6b4 <HAL_GetTick+0x14>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	20001888 	.word	0x20001888

0800b6b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d101      	bne.n	800b6ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e031      	b.n	800b732 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d109      	bne.n	800b6ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7ff fa80 	bl	800abdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ee:	f003 0310 	and.w	r3, r3, #16
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d116      	bne.n	800b724 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6fa:	4b10      	ldr	r3, [pc, #64]	@ (800b73c <HAL_ADC_Init+0x84>)
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	f043 0202 	orr.w	r2, r3, #2
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fb0a 	bl	800bd20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b716:	f023 0303 	bic.w	r3, r3, #3
 800b71a:	f043 0201 	orr.w	r2, r3, #1
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	641a      	str	r2, [r3, #64]	@ 0x40
 800b722:	e001      	b.n	800b728 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b724:	2301      	movs	r3, #1
 800b726:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b730:	7bfb      	ldrb	r3, [r7, #15]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	ffffeefd 	.word	0xffffeefd

0800b740 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800b748:	2300      	movs	r3, #0
 800b74a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b752:	2b01      	cmp	r3, #1
 800b754:	d101      	bne.n	800b75a <HAL_ADC_Start+0x1a>
 800b756:	2302      	movs	r3, #2
 800b758:	e0ad      	b.n	800b8b6 <HAL_ADC_Start+0x176>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d018      	beq.n	800b7a2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	689a      	ldr	r2, [r3, #8]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f042 0201 	orr.w	r2, r2, #1
 800b77e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800b780:	4b50      	ldr	r3, [pc, #320]	@ (800b8c4 <HAL_ADC_Start+0x184>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a50      	ldr	r2, [pc, #320]	@ (800b8c8 <HAL_ADC_Start+0x188>)
 800b786:	fba2 2303 	umull	r2, r3, r2, r3
 800b78a:	0c9a      	lsrs	r2, r3, #18
 800b78c:	4613      	mov	r3, r2
 800b78e:	005b      	lsls	r3, r3, #1
 800b790:	4413      	add	r3, r2
 800b792:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800b794:	e002      	b.n	800b79c <HAL_ADC_Start+0x5c>
    {
      counter--;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3b01      	subs	r3, #1
 800b79a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1f9      	bne.n	800b796 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d175      	bne.n	800b89c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b7b4:	4b45      	ldr	r3, [pc, #276]	@ (800b8cc <HAL_ADC_Start+0x18c>)
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d007      	beq.n	800b7de <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b7d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b7e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7ea:	d106      	bne.n	800b7fa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7f0:	f023 0206 	bic.w	r2, r3, #6
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	645a      	str	r2, [r3, #68]	@ 0x44
 800b7f8:	e002      	b.n	800b800 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800b810:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800b812:	4b2f      	ldr	r3, [pc, #188]	@ (800b8d0 <HAL_ADC_Start+0x190>)
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	f003 031f 	and.w	r3, r3, #31
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10f      	bne.n	800b83e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d143      	bne.n	800b8b4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	689a      	ldr	r2, [r3, #8]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800b83a:	609a      	str	r2, [r3, #8]
 800b83c:	e03a      	b.n	800b8b4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a24      	ldr	r2, [pc, #144]	@ (800b8d4 <HAL_ADC_Start+0x194>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d10e      	bne.n	800b866 <HAL_ADC_Start+0x126>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b852:	2b00      	cmp	r3, #0
 800b854:	d107      	bne.n	800b866 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	689a      	ldr	r2, [r3, #8]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800b864:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800b866:	4b1a      	ldr	r3, [pc, #104]	@ (800b8d0 <HAL_ADC_Start+0x190>)
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	f003 0310 	and.w	r3, r3, #16
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d120      	bne.n	800b8b4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a18      	ldr	r2, [pc, #96]	@ (800b8d8 <HAL_ADC_Start+0x198>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d11b      	bne.n	800b8b4 <HAL_ADC_Start+0x174>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b886:	2b00      	cmp	r3, #0
 800b888:	d114      	bne.n	800b8b4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689a      	ldr	r2, [r3, #8]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800b898:	609a      	str	r2, [r3, #8]
 800b89a:	e00b      	b.n	800b8b4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8a0:	f043 0210 	orr.w	r2, r3, #16
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8ac:	f043 0201 	orr.w	r2, r3, #1
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	200000d0 	.word	0x200000d0
 800b8c8:	431bde83 	.word	0x431bde83
 800b8cc:	fffff8fe 	.word	0xfffff8fe
 800b8d0:	40012300 	.word	0x40012300
 800b8d4:	40012000 	.word	0x40012000
 800b8d8:	40012200 	.word	0x40012200

0800b8dc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d101      	bne.n	800b8f2 <HAL_ADC_Stop+0x16>
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	e01f      	b.n	800b932 <HAL_ADC_Stop+0x56>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	689a      	ldr	r2, [r3, #8]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f022 0201 	bic.w	r2, r2, #1
 800b908:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	d107      	bne.n	800b928 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b91c:	4b08      	ldr	r3, [pc, #32]	@ (800b940 <HAL_ADC_Stop+0x64>)
 800b91e:	4013      	ands	r3, r2
 800b920:	f043 0201 	orr.w	r2, r3, #1
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	370c      	adds	r7, #12
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	ffffeefe 	.word	0xffffeefe

0800b944 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b95c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b960:	d113      	bne.n	800b98a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800b96c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b970:	d10b      	bne.n	800b98a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b976:	f043 0220 	orr.w	r2, r3, #32
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	e063      	b.n	800ba52 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800b98a:	f7ff fe89 	bl	800b6a0 <HAL_GetTick>
 800b98e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b990:	e021      	b.n	800b9d6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b998:	d01d      	beq.n	800b9d6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d007      	beq.n	800b9b0 <HAL_ADC_PollForConversion+0x6c>
 800b9a0:	f7ff fe7e 	bl	800b6a0 <HAL_GetTick>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d212      	bcs.n	800b9d6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d00b      	beq.n	800b9d6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9c2:	f043 0204 	orr.w	r2, r3, #4
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	e03d      	b.n	800ba52 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0302 	and.w	r3, r3, #2
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d1d6      	bne.n	800b992 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f06f 0212 	mvn.w	r2, #18
 800b9ec:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d123      	bne.n	800ba50 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d11f      	bne.n	800ba50 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba16:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d006      	beq.n	800ba2c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d111      	bne.n	800ba50 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d105      	bne.n	800ba50 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba48:	f043 0201 	orr.w	r2, r3, #1
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d101      	bne.n	800ba90 <HAL_ADC_ConfigChannel+0x1c>
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	e136      	b.n	800bcfe <HAL_ADC_ConfigChannel+0x28a>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b09      	cmp	r3, #9
 800ba9e:	d93a      	bls.n	800bb16 <HAL_ADC_ConfigChannel+0xa2>
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800baa8:	d035      	beq.n	800bb16 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68d9      	ldr	r1, [r3, #12]
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	461a      	mov	r2, r3
 800bab8:	4613      	mov	r3, r2
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	4413      	add	r3, r2
 800babe:	3b1e      	subs	r3, #30
 800bac0:	2207      	movs	r2, #7
 800bac2:	fa02 f303 	lsl.w	r3, r2, r3
 800bac6:	43da      	mvns	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	400a      	ands	r2, r1
 800bace:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a8d      	ldr	r2, [pc, #564]	@ (800bd0c <HAL_ADC_ConfigChannel+0x298>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d10a      	bne.n	800baf0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68d9      	ldr	r1, [r3, #12]
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	061a      	lsls	r2, r3, #24
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	430a      	orrs	r2, r1
 800baec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800baee:	e035      	b.n	800bb5c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68d9      	ldr	r1, [r3, #12]
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	689a      	ldr	r2, [r3, #8]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	4618      	mov	r0, r3
 800bb02:	4603      	mov	r3, r0
 800bb04:	005b      	lsls	r3, r3, #1
 800bb06:	4403      	add	r3, r0
 800bb08:	3b1e      	subs	r3, #30
 800bb0a:	409a      	lsls	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	430a      	orrs	r2, r1
 800bb12:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bb14:	e022      	b.n	800bb5c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	6919      	ldr	r1, [r3, #16]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	461a      	mov	r2, r3
 800bb24:	4613      	mov	r3, r2
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	4413      	add	r3, r2
 800bb2a:	2207      	movs	r2, #7
 800bb2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb30:	43da      	mvns	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	400a      	ands	r2, r1
 800bb38:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	6919      	ldr	r1, [r3, #16]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	689a      	ldr	r2, [r3, #8]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	005b      	lsls	r3, r3, #1
 800bb50:	4403      	add	r3, r0
 800bb52:	409a      	lsls	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	430a      	orrs	r2, r1
 800bb5a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	2b06      	cmp	r3, #6
 800bb62:	d824      	bhi.n	800bbae <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	685a      	ldr	r2, [r3, #4]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	3b05      	subs	r3, #5
 800bb76:	221f      	movs	r2, #31
 800bb78:	fa02 f303 	lsl.w	r3, r2, r3
 800bb7c:	43da      	mvns	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	400a      	ands	r2, r1
 800bb84:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	4618      	mov	r0, r3
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	685a      	ldr	r2, [r3, #4]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	3b05      	subs	r3, #5
 800bba0:	fa00 f203 	lsl.w	r2, r0, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	430a      	orrs	r2, r1
 800bbaa:	635a      	str	r2, [r3, #52]	@ 0x34
 800bbac:	e04c      	b.n	800bc48 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	2b0c      	cmp	r3, #12
 800bbb4:	d824      	bhi.n	800bc00 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4413      	add	r3, r2
 800bbc6:	3b23      	subs	r3, #35	@ 0x23
 800bbc8:	221f      	movs	r2, #31
 800bbca:	fa02 f303 	lsl.w	r3, r2, r3
 800bbce:	43da      	mvns	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	400a      	ands	r2, r1
 800bbd6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	685a      	ldr	r2, [r3, #4]
 800bbea:	4613      	mov	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4413      	add	r3, r2
 800bbf0:	3b23      	subs	r3, #35	@ 0x23
 800bbf2:	fa00 f203 	lsl.w	r2, r0, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	631a      	str	r2, [r3, #48]	@ 0x30
 800bbfe:	e023      	b.n	800bc48 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	4413      	add	r3, r2
 800bc10:	3b41      	subs	r3, #65	@ 0x41
 800bc12:	221f      	movs	r2, #31
 800bc14:	fa02 f303 	lsl.w	r3, r2, r3
 800bc18:	43da      	mvns	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	400a      	ands	r2, r1
 800bc20:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	4618      	mov	r0, r3
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	685a      	ldr	r2, [r3, #4]
 800bc34:	4613      	mov	r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	4413      	add	r3, r2
 800bc3a:	3b41      	subs	r3, #65	@ 0x41
 800bc3c:	fa00 f203 	lsl.w	r2, r0, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	430a      	orrs	r2, r1
 800bc46:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a30      	ldr	r2, [pc, #192]	@ (800bd10 <HAL_ADC_ConfigChannel+0x29c>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d10a      	bne.n	800bc68 <HAL_ADC_ConfigChannel+0x1f4>
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc5a:	d105      	bne.n	800bc68 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800bc5c:	4b2d      	ldr	r3, [pc, #180]	@ (800bd14 <HAL_ADC_ConfigChannel+0x2a0>)
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	4a2c      	ldr	r2, [pc, #176]	@ (800bd14 <HAL_ADC_ConfigChannel+0x2a0>)
 800bc62:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800bc66:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a28      	ldr	r2, [pc, #160]	@ (800bd10 <HAL_ADC_ConfigChannel+0x29c>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d10f      	bne.n	800bc92 <HAL_ADC_ConfigChannel+0x21e>
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b12      	cmp	r3, #18
 800bc78:	d10b      	bne.n	800bc92 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800bc7a:	4b26      	ldr	r3, [pc, #152]	@ (800bd14 <HAL_ADC_ConfigChannel+0x2a0>)
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	4a25      	ldr	r2, [pc, #148]	@ (800bd14 <HAL_ADC_ConfigChannel+0x2a0>)
 800bc80:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bc84:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800bc86:	4b23      	ldr	r3, [pc, #140]	@ (800bd14 <HAL_ADC_ConfigChannel+0x2a0>)
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	4a22      	ldr	r2, [pc, #136]	@ (800bd14 <HAL_ADC_ConfigChannel+0x2a0>)
 800bc8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bc90:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a1e      	ldr	r2, [pc, #120]	@ (800bd10 <HAL_ADC_ConfigChannel+0x29c>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d12b      	bne.n	800bcf4 <HAL_ADC_ConfigChannel+0x280>
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a1a      	ldr	r2, [pc, #104]	@ (800bd0c <HAL_ADC_ConfigChannel+0x298>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d003      	beq.n	800bcae <HAL_ADC_ConfigChannel+0x23a>
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b11      	cmp	r3, #17
 800bcac:	d122      	bne.n	800bcf4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800bcae:	4b19      	ldr	r3, [pc, #100]	@ (800bd14 <HAL_ADC_ConfigChannel+0x2a0>)
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	4a18      	ldr	r2, [pc, #96]	@ (800bd14 <HAL_ADC_ConfigChannel+0x2a0>)
 800bcb4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800bcb8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800bcba:	4b16      	ldr	r3, [pc, #88]	@ (800bd14 <HAL_ADC_ConfigChannel+0x2a0>)
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	4a15      	ldr	r2, [pc, #84]	@ (800bd14 <HAL_ADC_ConfigChannel+0x2a0>)
 800bcc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bcc4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a10      	ldr	r2, [pc, #64]	@ (800bd0c <HAL_ADC_ConfigChannel+0x298>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d111      	bne.n	800bcf4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800bcd0:	4b11      	ldr	r3, [pc, #68]	@ (800bd18 <HAL_ADC_ConfigChannel+0x2a4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a11      	ldr	r2, [pc, #68]	@ (800bd1c <HAL_ADC_ConfigChannel+0x2a8>)
 800bcd6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcda:	0c9a      	lsrs	r2, r3, #18
 800bcdc:	4613      	mov	r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	005b      	lsls	r3, r3, #1
 800bce4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800bce6:	e002      	b.n	800bcee <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1f9      	bne.n	800bce8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	10000012 	.word	0x10000012
 800bd10:	40012000 	.word	0x40012000
 800bd14:	40012300 	.word	0x40012300
 800bd18:	200000d0 	.word	0x200000d0
 800bd1c:	431bde83 	.word	0x431bde83

0800bd20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800bd28:	4b78      	ldr	r3, [pc, #480]	@ (800bf0c <ADC_Init+0x1ec>)
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	4a77      	ldr	r2, [pc, #476]	@ (800bf0c <ADC_Init+0x1ec>)
 800bd2e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800bd32:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800bd34:	4b75      	ldr	r3, [pc, #468]	@ (800bf0c <ADC_Init+0x1ec>)
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	4973      	ldr	r1, [pc, #460]	@ (800bf0c <ADC_Init+0x1ec>)
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bd50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	6859      	ldr	r1, [r3, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	021a      	lsls	r2, r3, #8
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	430a      	orrs	r2, r1
 800bd64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800bd74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6859      	ldr	r1, [r3, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	689a      	ldr	r2, [r3, #8]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	430a      	orrs	r2, r1
 800bd86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	689a      	ldr	r2, [r3, #8]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bd96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	6899      	ldr	r1, [r3, #8]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	68da      	ldr	r2, [r3, #12]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	430a      	orrs	r2, r1
 800bda8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdae:	4a58      	ldr	r2, [pc, #352]	@ (800bf10 <ADC_Init+0x1f0>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d022      	beq.n	800bdfa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	689a      	ldr	r2, [r3, #8]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800bdc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6899      	ldr	r1, [r3, #8]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	430a      	orrs	r2, r1
 800bdd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	689a      	ldr	r2, [r3, #8]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800bde4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	6899      	ldr	r1, [r3, #8]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	609a      	str	r2, [r3, #8]
 800bdf8:	e00f      	b.n	800be1a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	689a      	ldr	r2, [r3, #8]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800be08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	689a      	ldr	r2, [r3, #8]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800be18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	689a      	ldr	r2, [r3, #8]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f022 0202 	bic.w	r2, r2, #2
 800be28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	6899      	ldr	r1, [r3, #8]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	005a      	lsls	r2, r3, #1
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	430a      	orrs	r2, r1
 800be3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d01b      	beq.n	800be80 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800be66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6859      	ldr	r1, [r3, #4]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be72:	3b01      	subs	r3, #1
 800be74:	035a      	lsls	r2, r3, #13
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	430a      	orrs	r2, r1
 800be7c:	605a      	str	r2, [r3, #4]
 800be7e:	e007      	b.n	800be90 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800be8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800be9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	69db      	ldr	r3, [r3, #28]
 800beaa:	3b01      	subs	r3, #1
 800beac:	051a      	lsls	r2, r3, #20
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	430a      	orrs	r2, r1
 800beb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	689a      	ldr	r2, [r3, #8]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800bec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	6899      	ldr	r1, [r3, #8]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bed2:	025a      	lsls	r2, r3, #9
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	430a      	orrs	r2, r1
 800beda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	689a      	ldr	r2, [r3, #8]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800beea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6899      	ldr	r1, [r3, #8]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	695b      	ldr	r3, [r3, #20]
 800bef6:	029a      	lsls	r2, r3, #10
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	430a      	orrs	r2, r1
 800befe:	609a      	str	r2, [r3, #8]
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	40012300 	.word	0x40012300
 800bf10:	0f000001 	.word	0x0f000001

0800bf14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f003 0307 	and.w	r3, r3, #7
 800bf22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bf24:	4b0b      	ldr	r3, [pc, #44]	@ (800bf54 <__NVIC_SetPriorityGrouping+0x40>)
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bf30:	4013      	ands	r3, r2
 800bf32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bf3c:	4b06      	ldr	r3, [pc, #24]	@ (800bf58 <__NVIC_SetPriorityGrouping+0x44>)
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bf42:	4a04      	ldr	r2, [pc, #16]	@ (800bf54 <__NVIC_SetPriorityGrouping+0x40>)
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	60d3      	str	r3, [r2, #12]
}
 800bf48:	bf00      	nop
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	e000ed00 	.word	0xe000ed00
 800bf58:	05fa0000 	.word	0x05fa0000

0800bf5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bf60:	4b04      	ldr	r3, [pc, #16]	@ (800bf74 <__NVIC_GetPriorityGrouping+0x18>)
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	0a1b      	lsrs	r3, r3, #8
 800bf66:	f003 0307 	and.w	r3, r3, #7
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	e000ed00 	.word	0xe000ed00

0800bf78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	4603      	mov	r3, r0
 800bf80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	db0b      	blt.n	800bfa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	f003 021f 	and.w	r2, r3, #31
 800bf90:	4907      	ldr	r1, [pc, #28]	@ (800bfb0 <__NVIC_EnableIRQ+0x38>)
 800bf92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf96:	095b      	lsrs	r3, r3, #5
 800bf98:	2001      	movs	r0, #1
 800bf9a:	fa00 f202 	lsl.w	r2, r0, r2
 800bf9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bfa2:	bf00      	nop
 800bfa4:	370c      	adds	r7, #12
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	e000e100 	.word	0xe000e100

0800bfb4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	4603      	mov	r3, r0
 800bfbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	db12      	blt.n	800bfec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bfc6:	79fb      	ldrb	r3, [r7, #7]
 800bfc8:	f003 021f 	and.w	r2, r3, #31
 800bfcc:	490a      	ldr	r1, [pc, #40]	@ (800bff8 <__NVIC_DisableIRQ+0x44>)
 800bfce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfd2:	095b      	lsrs	r3, r3, #5
 800bfd4:	2001      	movs	r0, #1
 800bfd6:	fa00 f202 	lsl.w	r2, r0, r2
 800bfda:	3320      	adds	r3, #32
 800bfdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800bfe0:	f3bf 8f4f 	dsb	sy
}
 800bfe4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bfe6:	f3bf 8f6f 	isb	sy
}
 800bfea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr
 800bff8:	e000e100 	.word	0xe000e100

0800bffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	4603      	mov	r3, r0
 800c004:	6039      	str	r1, [r7, #0]
 800c006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	db0a      	blt.n	800c026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	b2da      	uxtb	r2, r3
 800c014:	490c      	ldr	r1, [pc, #48]	@ (800c048 <__NVIC_SetPriority+0x4c>)
 800c016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c01a:	0112      	lsls	r2, r2, #4
 800c01c:	b2d2      	uxtb	r2, r2
 800c01e:	440b      	add	r3, r1
 800c020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c024:	e00a      	b.n	800c03c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	4908      	ldr	r1, [pc, #32]	@ (800c04c <__NVIC_SetPriority+0x50>)
 800c02c:	79fb      	ldrb	r3, [r7, #7]
 800c02e:	f003 030f 	and.w	r3, r3, #15
 800c032:	3b04      	subs	r3, #4
 800c034:	0112      	lsls	r2, r2, #4
 800c036:	b2d2      	uxtb	r2, r2
 800c038:	440b      	add	r3, r1
 800c03a:	761a      	strb	r2, [r3, #24]
}
 800c03c:	bf00      	nop
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	e000e100 	.word	0xe000e100
 800c04c:	e000ed00 	.word	0xe000ed00

0800c050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c050:	b480      	push	{r7}
 800c052:	b089      	sub	sp, #36	@ 0x24
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f003 0307 	and.w	r3, r3, #7
 800c062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	f1c3 0307 	rsb	r3, r3, #7
 800c06a:	2b04      	cmp	r3, #4
 800c06c:	bf28      	it	cs
 800c06e:	2304      	movcs	r3, #4
 800c070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	3304      	adds	r3, #4
 800c076:	2b06      	cmp	r3, #6
 800c078:	d902      	bls.n	800c080 <NVIC_EncodePriority+0x30>
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	3b03      	subs	r3, #3
 800c07e:	e000      	b.n	800c082 <NVIC_EncodePriority+0x32>
 800c080:	2300      	movs	r3, #0
 800c082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c084:	f04f 32ff 	mov.w	r2, #4294967295
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	fa02 f303 	lsl.w	r3, r2, r3
 800c08e:	43da      	mvns	r2, r3
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	401a      	ands	r2, r3
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c098:	f04f 31ff 	mov.w	r1, #4294967295
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	fa01 f303 	lsl.w	r3, r1, r3
 800c0a2:	43d9      	mvns	r1, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c0a8:	4313      	orrs	r3, r2
         );
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3724      	adds	r7, #36	@ 0x24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b082      	sub	sp, #8
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7ff ff28 	bl	800bf14 <__NVIC_SetPriorityGrouping>
}
 800c0c4:	bf00      	nop
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b086      	sub	sp, #24
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
 800c0d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c0de:	f7ff ff3d 	bl	800bf5c <__NVIC_GetPriorityGrouping>
 800c0e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	68b9      	ldr	r1, [r7, #8]
 800c0e8:	6978      	ldr	r0, [r7, #20]
 800c0ea:	f7ff ffb1 	bl	800c050 <NVIC_EncodePriority>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7ff ff80 	bl	800bffc <__NVIC_SetPriority>
}
 800c0fc:	bf00      	nop
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	4603      	mov	r3, r0
 800c10c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c10e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c112:	4618      	mov	r0, r3
 800c114:	f7ff ff30 	bl	800bf78 <__NVIC_EnableIRQ>
}
 800c118:	bf00      	nop
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	4603      	mov	r3, r0
 800c128:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c12a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff ff40 	bl	800bfb4 <__NVIC_DisableIRQ>
}
 800c134:	bf00      	nop
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c144:	2300      	movs	r3, #0
 800c146:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c148:	f7ff faaa 	bl	800b6a0 <HAL_GetTick>
 800c14c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d101      	bne.n	800c158 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	e099      	b.n	800c28c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2202      	movs	r2, #2
 800c15c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f022 0201 	bic.w	r2, r2, #1
 800c176:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c178:	e00f      	b.n	800c19a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c17a:	f7ff fa91 	bl	800b6a0 <HAL_GetTick>
 800c17e:	4602      	mov	r2, r0
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	2b05      	cmp	r3, #5
 800c186:	d908      	bls.n	800c19a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2220      	movs	r2, #32
 800c18c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2203      	movs	r2, #3
 800c192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800c196:	2303      	movs	r3, #3
 800c198:	e078      	b.n	800c28c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 0301 	and.w	r3, r3, #1
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1e8      	bne.n	800c17a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	4b38      	ldr	r3, [pc, #224]	@ (800c294 <HAL_DMA_Init+0x158>)
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c1c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c1d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c1de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a1b      	ldr	r3, [r3, #32]
 800c1e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c1e6:	697a      	ldr	r2, [r7, #20]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	d107      	bne.n	800c204 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	4313      	orrs	r3, r2
 800c202:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	f023 0307 	bic.w	r3, r3, #7
 800c21a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c220:	697a      	ldr	r2, [r7, #20]
 800c222:	4313      	orrs	r3, r2
 800c224:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c22a:	2b04      	cmp	r3, #4
 800c22c:	d117      	bne.n	800c25e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c232:	697a      	ldr	r2, [r7, #20]
 800c234:	4313      	orrs	r3, r2
 800c236:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00e      	beq.n	800c25e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fb09 	bl	800c858 <DMA_CheckFifoParam>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d008      	beq.n	800c25e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2240      	movs	r2, #64	@ 0x40
 800c250:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2201      	movs	r2, #1
 800c256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800c25a:	2301      	movs	r3, #1
 800c25c:	e016      	b.n	800c28c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	697a      	ldr	r2, [r7, #20]
 800c264:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fac0 	bl	800c7ec <DMA_CalcBaseAndBitshift>
 800c26c:	4603      	mov	r3, r0
 800c26e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c274:	223f      	movs	r2, #63	@ 0x3f
 800c276:	409a      	lsls	r2, r3
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2201      	movs	r2, #1
 800c286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	e010803f 	.word	0xe010803f

0800c298 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d101      	bne.n	800c2be <HAL_DMA_Start_IT+0x26>
 800c2ba:	2302      	movs	r3, #2
 800c2bc:	e048      	b.n	800c350 <HAL_DMA_Start_IT+0xb8>
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d137      	bne.n	800c342 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	68b9      	ldr	r1, [r7, #8]
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f000 fa52 	bl	800c790 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2f0:	223f      	movs	r2, #63	@ 0x3f
 800c2f2:	409a      	lsls	r2, r3
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f042 0216 	orr.w	r2, r2, #22
 800c306:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	695a      	ldr	r2, [r3, #20]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c316:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d007      	beq.n	800c330 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f042 0208 	orr.w	r2, r2, #8
 800c32e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f042 0201 	orr.w	r2, r2, #1
 800c33e:	601a      	str	r2, [r3, #0]
 800c340:	e005      	b.n	800c34e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2200      	movs	r2, #0
 800c346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c34a:	2302      	movs	r3, #2
 800c34c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c34e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3718      	adds	r7, #24
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c364:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c366:	f7ff f99b 	bl	800b6a0 <HAL_GetTick>
 800c36a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b02      	cmp	r3, #2
 800c376:	d008      	beq.n	800c38a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2280      	movs	r2, #128	@ 0x80
 800c37c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e052      	b.n	800c430 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f022 0216 	bic.w	r2, r2, #22
 800c398:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	695a      	ldr	r2, [r3, #20]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d103      	bne.n	800c3ba <HAL_DMA_Abort+0x62>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d007      	beq.n	800c3ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 0208 	bic.w	r2, r2, #8
 800c3c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f022 0201 	bic.w	r2, r2, #1
 800c3d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c3da:	e013      	b.n	800c404 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c3dc:	f7ff f960 	bl	800b6a0 <HAL_GetTick>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	2b05      	cmp	r3, #5
 800c3e8:	d90c      	bls.n	800c404 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2220      	movs	r2, #32
 800c3ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2203      	movs	r2, #3
 800c3f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800c400:	2303      	movs	r3, #3
 800c402:	e015      	b.n	800c430 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1e4      	bne.n	800c3dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c416:	223f      	movs	r2, #63	@ 0x3f
 800c418:	409a      	lsls	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d004      	beq.n	800c456 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2280      	movs	r2, #128	@ 0x80
 800c450:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	e00c      	b.n	800c470 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2205      	movs	r2, #5
 800c45a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f022 0201 	bic.w	r2, r2, #1
 800c46c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800c484:	2300      	movs	r3, #0
 800c486:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800c488:	4b8e      	ldr	r3, [pc, #568]	@ (800c6c4 <HAL_DMA_IRQHandler+0x248>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a8e      	ldr	r2, [pc, #568]	@ (800c6c8 <HAL_DMA_IRQHandler+0x24c>)
 800c48e:	fba2 2303 	umull	r2, r3, r2, r3
 800c492:	0a9b      	lsrs	r3, r3, #10
 800c494:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c49a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4a6:	2208      	movs	r2, #8
 800c4a8:	409a      	lsls	r2, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d01a      	beq.n	800c4e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f003 0304 	and.w	r3, r3, #4
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d013      	beq.n	800c4e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f022 0204 	bic.w	r2, r2, #4
 800c4ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4d4:	2208      	movs	r2, #8
 800c4d6:	409a      	lsls	r2, r3
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e0:	f043 0201 	orr.w	r2, r3, #1
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	409a      	lsls	r2, r3
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4013      	ands	r3, r2
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d012      	beq.n	800c51e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00b      	beq.n	800c51e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c50a:	2201      	movs	r2, #1
 800c50c:	409a      	lsls	r2, r3
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c516:	f043 0202 	orr.w	r2, r3, #2
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c522:	2204      	movs	r2, #4
 800c524:	409a      	lsls	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	4013      	ands	r3, r2
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d012      	beq.n	800c554 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 0302 	and.w	r3, r3, #2
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00b      	beq.n	800c554 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c540:	2204      	movs	r2, #4
 800c542:	409a      	lsls	r2, r3
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c54c:	f043 0204 	orr.w	r2, r3, #4
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c558:	2210      	movs	r2, #16
 800c55a:	409a      	lsls	r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4013      	ands	r3, r2
 800c560:	2b00      	cmp	r3, #0
 800c562:	d043      	beq.n	800c5ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 0308 	and.w	r3, r3, #8
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d03c      	beq.n	800c5ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c576:	2210      	movs	r2, #16
 800c578:	409a      	lsls	r2, r3
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d018      	beq.n	800c5be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c596:	2b00      	cmp	r3, #0
 800c598:	d108      	bne.n	800c5ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d024      	beq.n	800c5ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	4798      	blx	r3
 800c5aa:	e01f      	b.n	800c5ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d01b      	beq.n	800c5ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	4798      	blx	r3
 800c5bc:	e016      	b.n	800c5ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d107      	bne.n	800c5dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f022 0208 	bic.w	r2, r2, #8
 800c5da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d003      	beq.n	800c5ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5f0:	2220      	movs	r2, #32
 800c5f2:	409a      	lsls	r2, r3
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	4013      	ands	r3, r2
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 808f 	beq.w	800c71c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 0310 	and.w	r3, r3, #16
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 8087 	beq.w	800c71c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c612:	2220      	movs	r2, #32
 800c614:	409a      	lsls	r2, r3
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c620:	b2db      	uxtb	r3, r3
 800c622:	2b05      	cmp	r3, #5
 800c624:	d136      	bne.n	800c694 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f022 0216 	bic.w	r2, r2, #22
 800c634:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	695a      	ldr	r2, [r3, #20]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c644:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d103      	bne.n	800c656 <HAL_DMA_IRQHandler+0x1da>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c652:	2b00      	cmp	r3, #0
 800c654:	d007      	beq.n	800c666 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f022 0208 	bic.w	r2, r2, #8
 800c664:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c66a:	223f      	movs	r2, #63	@ 0x3f
 800c66c:	409a      	lsls	r2, r3
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c686:	2b00      	cmp	r3, #0
 800c688:	d07e      	beq.n	800c788 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	4798      	blx	r3
        }
        return;
 800c692:	e079      	b.n	800c788 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d01d      	beq.n	800c6de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10d      	bne.n	800c6cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d031      	beq.n	800c71c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	4798      	blx	r3
 800c6c0:	e02c      	b.n	800c71c <HAL_DMA_IRQHandler+0x2a0>
 800c6c2:	bf00      	nop
 800c6c4:	200000d0 	.word	0x200000d0
 800c6c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d023      	beq.n	800c71c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	4798      	blx	r3
 800c6dc:	e01e      	b.n	800c71c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d10f      	bne.n	800c70c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f022 0210 	bic.w	r2, r2, #16
 800c6fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c710:	2b00      	cmp	r3, #0
 800c712:	d003      	beq.n	800c71c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c720:	2b00      	cmp	r3, #0
 800c722:	d032      	beq.n	800c78a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c728:	f003 0301 	and.w	r3, r3, #1
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d022      	beq.n	800c776 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2205      	movs	r2, #5
 800c734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f022 0201 	bic.w	r2, r2, #1
 800c746:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	3301      	adds	r3, #1
 800c74c:	60bb      	str	r3, [r7, #8]
 800c74e:	697a      	ldr	r2, [r7, #20]
 800c750:	429a      	cmp	r2, r3
 800c752:	d307      	bcc.n	800c764 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 0301 	and.w	r3, r3, #1
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1f2      	bne.n	800c748 <HAL_DMA_IRQHandler+0x2cc>
 800c762:	e000      	b.n	800c766 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800c764:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2201      	movs	r2, #1
 800c76a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d005      	beq.n	800c78a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	4798      	blx	r3
 800c786:	e000      	b.n	800c78a <HAL_DMA_IRQHandler+0x30e>
        return;
 800c788:	bf00      	nop
    }
  }
}
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
 800c79c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c7ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	2b40      	cmp	r3, #64	@ 0x40
 800c7bc:	d108      	bne.n	800c7d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c7ce:	e007      	b.n	800c7e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68ba      	ldr	r2, [r7, #8]
 800c7d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	60da      	str	r2, [r3, #12]
}
 800c7e0:	bf00      	nop
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	3b10      	subs	r3, #16
 800c7fc:	4a13      	ldr	r2, [pc, #76]	@ (800c84c <DMA_CalcBaseAndBitshift+0x60>)
 800c7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c802:	091b      	lsrs	r3, r3, #4
 800c804:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c806:	4a12      	ldr	r2, [pc, #72]	@ (800c850 <DMA_CalcBaseAndBitshift+0x64>)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	4413      	add	r3, r2
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	461a      	mov	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2b03      	cmp	r3, #3
 800c818:	d908      	bls.n	800c82c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	461a      	mov	r2, r3
 800c820:	4b0c      	ldr	r3, [pc, #48]	@ (800c854 <DMA_CalcBaseAndBitshift+0x68>)
 800c822:	4013      	ands	r3, r2
 800c824:	1d1a      	adds	r2, r3, #4
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	659a      	str	r2, [r3, #88]	@ 0x58
 800c82a:	e006      	b.n	800c83a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	461a      	mov	r2, r3
 800c832:	4b08      	ldr	r3, [pc, #32]	@ (800c854 <DMA_CalcBaseAndBitshift+0x68>)
 800c834:	4013      	ands	r3, r2
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3714      	adds	r7, #20
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	aaaaaaab 	.word	0xaaaaaaab
 800c850:	08012048 	.word	0x08012048
 800c854:	fffffc00 	.word	0xfffffc00

0800c858 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c860:	2300      	movs	r3, #0
 800c862:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c868:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	699b      	ldr	r3, [r3, #24]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d11f      	bne.n	800c8b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	2b03      	cmp	r3, #3
 800c876:	d856      	bhi.n	800c926 <DMA_CheckFifoParam+0xce>
 800c878:	a201      	add	r2, pc, #4	@ (adr r2, 800c880 <DMA_CheckFifoParam+0x28>)
 800c87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87e:	bf00      	nop
 800c880:	0800c891 	.word	0x0800c891
 800c884:	0800c8a3 	.word	0x0800c8a3
 800c888:	0800c891 	.word	0x0800c891
 800c88c:	0800c927 	.word	0x0800c927
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c894:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d046      	beq.n	800c92a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c89c:	2301      	movs	r3, #1
 800c89e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8a0:	e043      	b.n	800c92a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c8aa:	d140      	bne.n	800c92e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8b0:	e03d      	b.n	800c92e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8ba:	d121      	bne.n	800c900 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d837      	bhi.n	800c932 <DMA_CheckFifoParam+0xda>
 800c8c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c8c8 <DMA_CheckFifoParam+0x70>)
 800c8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c8:	0800c8d9 	.word	0x0800c8d9
 800c8cc:	0800c8df 	.word	0x0800c8df
 800c8d0:	0800c8d9 	.word	0x0800c8d9
 800c8d4:	0800c8f1 	.word	0x0800c8f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	73fb      	strb	r3, [r7, #15]
      break;
 800c8dc:	e030      	b.n	800c940 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d025      	beq.n	800c936 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8ee:	e022      	b.n	800c936 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c8f8:	d11f      	bne.n	800c93a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c8fe:	e01c      	b.n	800c93a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	2b02      	cmp	r3, #2
 800c904:	d903      	bls.n	800c90e <DMA_CheckFifoParam+0xb6>
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d003      	beq.n	800c914 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c90c:	e018      	b.n	800c940 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	73fb      	strb	r3, [r7, #15]
      break;
 800c912:	e015      	b.n	800c940 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c918:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00e      	beq.n	800c93e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c920:	2301      	movs	r3, #1
 800c922:	73fb      	strb	r3, [r7, #15]
      break;
 800c924:	e00b      	b.n	800c93e <DMA_CheckFifoParam+0xe6>
      break;
 800c926:	bf00      	nop
 800c928:	e00a      	b.n	800c940 <DMA_CheckFifoParam+0xe8>
      break;
 800c92a:	bf00      	nop
 800c92c:	e008      	b.n	800c940 <DMA_CheckFifoParam+0xe8>
      break;
 800c92e:	bf00      	nop
 800c930:	e006      	b.n	800c940 <DMA_CheckFifoParam+0xe8>
      break;
 800c932:	bf00      	nop
 800c934:	e004      	b.n	800c940 <DMA_CheckFifoParam+0xe8>
      break;
 800c936:	bf00      	nop
 800c938:	e002      	b.n	800c940 <DMA_CheckFifoParam+0xe8>
      break;   
 800c93a:	bf00      	nop
 800c93c:	e000      	b.n	800c940 <DMA_CheckFifoParam+0xe8>
      break;
 800c93e:	bf00      	nop
    }
  } 
  
  return status; 
 800c940:	7bfb      	ldrb	r3, [r7, #15]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3714      	adds	r7, #20
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop

0800c950 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c960:	695b      	ldr	r3, [r3, #20]
 800c962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c966:	2b40      	cmp	r3, #64	@ 0x40
 800c968:	d112      	bne.n	800c990 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c972:	69db      	ldr	r3, [r3, #28]
 800c974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c978:	2b40      	cmp	r3, #64	@ 0x40
 800c97a:	d109      	bne.n	800c990 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c984:	461a      	mov	r2, r3
 800c986:	4b50      	ldr	r3, [pc, #320]	@ (800cac8 <HAL_ETH_IRQHandler+0x178>)
 800c988:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f8ac 	bl	800cae8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c998:	695b      	ldr	r3, [r3, #20]
 800c99a:	f003 0301 	and.w	r3, r3, #1
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d113      	bne.n	800c9ca <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9aa:	69db      	ldr	r3, [r3, #28]
 800c9ac:	f003 0301 	and.w	r3, r3, #1
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d10a      	bne.n	800c9ca <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9bc:	461a      	mov	r2, r3
 800c9be:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800c9c2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 f885 	bl	800cad4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9d2:	695b      	ldr	r3, [r3, #20]
 800c9d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c9dc:	d14c      	bne.n	800ca78 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9e6:	69db      	ldr	r3, [r3, #28]
 800c9e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c9f0:	d142      	bne.n	800ca78 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9f8:	f043 0208 	orr.w	r2, r3, #8
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca0a:	695b      	ldr	r3, [r3, #20]
 800ca0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca14:	d11a      	bne.n	800ca4c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca1e:	695a      	ldr	r2, [r3, #20]
 800ca20:	4b2a      	ldr	r3, [pc, #168]	@ (800cacc <HAL_ETH_IRQHandler+0x17c>)
 800ca22:	4013      	ands	r3, r2
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca32:	69db      	ldr	r3, [r3, #28]
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	6812      	ldr	r2, [r2, #0]
 800ca38:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800ca3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ca40:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	22e0      	movs	r2, #224	@ 0xe0
 800ca46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800ca4a:	e012      	b.n	800ca72 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca54:	695a      	ldr	r2, [r3, #20]
 800ca56:	f248 6380 	movw	r3, #34432	@ 0x8680
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	f248 6380 	movw	r3, #34432	@ 0x8680
 800ca70:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 f842 	bl	800cafc <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca7e:	f003 0308 	and.w	r3, r3, #8
 800ca82:	2b08      	cmp	r3, #8
 800ca84:	d10e      	bne.n	800caa4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca8c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 f83a 	bl	800cb10 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800caa4:	4b0a      	ldr	r3, [pc, #40]	@ (800cad0 <HAL_ETH_IRQHandler+0x180>)
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800caac:	2b00      	cmp	r3, #0
 800caae:	d006      	beq.n	800cabe <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800cab0:	4b07      	ldr	r3, [pc, #28]	@ (800cad0 <HAL_ETH_IRQHandler+0x180>)
 800cab2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800cab6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 f833 	bl	800cb24 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800cabe:	bf00      	nop
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	00010040 	.word	0x00010040
 800cacc:	007e2000 	.word	0x007e2000
 800cad0:	40013c00 	.word	0x40013c00

0800cad4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b089      	sub	sp, #36	@ 0x24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800cb42:	2300      	movs	r3, #0
 800cb44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800cb46:	2300      	movs	r3, #0
 800cb48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800cb52:	2300      	movs	r3, #0
 800cb54:	61fb      	str	r3, [r7, #28]
 800cb56:	e175      	b.n	800ce44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800cb58:	2201      	movs	r2, #1
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	4013      	ands	r3, r2
 800cb6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	f040 8164 	bne.w	800ce3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	f003 0303 	and.w	r3, r3, #3
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d005      	beq.n	800cb8e <HAL_GPIO_Init+0x56>
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	f003 0303 	and.w	r3, r3, #3
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d130      	bne.n	800cbf0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	2203      	movs	r2, #3
 800cb9a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb9e:	43db      	mvns	r3, r3
 800cba0:	69ba      	ldr	r2, [r7, #24]
 800cba2:	4013      	ands	r3, r2
 800cba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	68da      	ldr	r2, [r3, #12]
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	005b      	lsls	r3, r3, #1
 800cbae:	fa02 f303 	lsl.w	r3, r2, r3
 800cbb2:	69ba      	ldr	r2, [r7, #24]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbcc:	43db      	mvns	r3, r3
 800cbce:	69ba      	ldr	r2, [r7, #24]
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	091b      	lsrs	r3, r3, #4
 800cbda:	f003 0201 	and.w	r2, r3, #1
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbe4:	69ba      	ldr	r2, [r7, #24]
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	69ba      	ldr	r2, [r7, #24]
 800cbee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	f003 0303 	and.w	r3, r3, #3
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d017      	beq.n	800cc2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	005b      	lsls	r3, r3, #1
 800cc06:	2203      	movs	r2, #3
 800cc08:	fa02 f303 	lsl.w	r3, r2, r3
 800cc0c:	43db      	mvns	r3, r3
 800cc0e:	69ba      	ldr	r2, [r7, #24]
 800cc10:	4013      	ands	r3, r2
 800cc12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	689a      	ldr	r2, [r3, #8]
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc20:	69ba      	ldr	r2, [r7, #24]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	69ba      	ldr	r2, [r7, #24]
 800cc2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	f003 0303 	and.w	r3, r3, #3
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d123      	bne.n	800cc80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	08da      	lsrs	r2, r3, #3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	3208      	adds	r2, #8
 800cc40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	f003 0307 	and.w	r3, r3, #7
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	220f      	movs	r2, #15
 800cc50:	fa02 f303 	lsl.w	r3, r2, r3
 800cc54:	43db      	mvns	r3, r3
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	4013      	ands	r3, r2
 800cc5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	691a      	ldr	r2, [r3, #16]
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	f003 0307 	and.w	r3, r3, #7
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	fa02 f303 	lsl.w	r3, r2, r3
 800cc6c:	69ba      	ldr	r2, [r7, #24]
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	08da      	lsrs	r2, r3, #3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3208      	adds	r2, #8
 800cc7a:	69b9      	ldr	r1, [r7, #24]
 800cc7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	005b      	lsls	r3, r3, #1
 800cc8a:	2203      	movs	r2, #3
 800cc8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc90:	43db      	mvns	r3, r3
 800cc92:	69ba      	ldr	r2, [r7, #24]
 800cc94:	4013      	ands	r3, r2
 800cc96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	f003 0203 	and.w	r2, r3, #3
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	fa02 f303 	lsl.w	r3, r2, r3
 800cca8:	69ba      	ldr	r2, [r7, #24]
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	69ba      	ldr	r2, [r7, #24]
 800ccb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f000 80be 	beq.w	800ce3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ccc2:	4b66      	ldr	r3, [pc, #408]	@ (800ce5c <HAL_GPIO_Init+0x324>)
 800ccc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccc6:	4a65      	ldr	r2, [pc, #404]	@ (800ce5c <HAL_GPIO_Init+0x324>)
 800ccc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cccc:	6453      	str	r3, [r2, #68]	@ 0x44
 800ccce:	4b63      	ldr	r3, [pc, #396]	@ (800ce5c <HAL_GPIO_Init+0x324>)
 800ccd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800ccda:	4a61      	ldr	r2, [pc, #388]	@ (800ce60 <HAL_GPIO_Init+0x328>)
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	089b      	lsrs	r3, r3, #2
 800cce0:	3302      	adds	r3, #2
 800cce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	f003 0303 	and.w	r3, r3, #3
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	220f      	movs	r2, #15
 800ccf2:	fa02 f303 	lsl.w	r3, r2, r3
 800ccf6:	43db      	mvns	r3, r3
 800ccf8:	69ba      	ldr	r2, [r7, #24]
 800ccfa:	4013      	ands	r3, r2
 800ccfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	4a58      	ldr	r2, [pc, #352]	@ (800ce64 <HAL_GPIO_Init+0x32c>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d037      	beq.n	800cd76 <HAL_GPIO_Init+0x23e>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4a57      	ldr	r2, [pc, #348]	@ (800ce68 <HAL_GPIO_Init+0x330>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d031      	beq.n	800cd72 <HAL_GPIO_Init+0x23a>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	4a56      	ldr	r2, [pc, #344]	@ (800ce6c <HAL_GPIO_Init+0x334>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d02b      	beq.n	800cd6e <HAL_GPIO_Init+0x236>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	4a55      	ldr	r2, [pc, #340]	@ (800ce70 <HAL_GPIO_Init+0x338>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d025      	beq.n	800cd6a <HAL_GPIO_Init+0x232>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4a54      	ldr	r2, [pc, #336]	@ (800ce74 <HAL_GPIO_Init+0x33c>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d01f      	beq.n	800cd66 <HAL_GPIO_Init+0x22e>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4a53      	ldr	r2, [pc, #332]	@ (800ce78 <HAL_GPIO_Init+0x340>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d019      	beq.n	800cd62 <HAL_GPIO_Init+0x22a>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4a52      	ldr	r2, [pc, #328]	@ (800ce7c <HAL_GPIO_Init+0x344>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d013      	beq.n	800cd5e <HAL_GPIO_Init+0x226>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4a51      	ldr	r2, [pc, #324]	@ (800ce80 <HAL_GPIO_Init+0x348>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d00d      	beq.n	800cd5a <HAL_GPIO_Init+0x222>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a50      	ldr	r2, [pc, #320]	@ (800ce84 <HAL_GPIO_Init+0x34c>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d007      	beq.n	800cd56 <HAL_GPIO_Init+0x21e>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a4f      	ldr	r2, [pc, #316]	@ (800ce88 <HAL_GPIO_Init+0x350>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d101      	bne.n	800cd52 <HAL_GPIO_Init+0x21a>
 800cd4e:	2309      	movs	r3, #9
 800cd50:	e012      	b.n	800cd78 <HAL_GPIO_Init+0x240>
 800cd52:	230a      	movs	r3, #10
 800cd54:	e010      	b.n	800cd78 <HAL_GPIO_Init+0x240>
 800cd56:	2308      	movs	r3, #8
 800cd58:	e00e      	b.n	800cd78 <HAL_GPIO_Init+0x240>
 800cd5a:	2307      	movs	r3, #7
 800cd5c:	e00c      	b.n	800cd78 <HAL_GPIO_Init+0x240>
 800cd5e:	2306      	movs	r3, #6
 800cd60:	e00a      	b.n	800cd78 <HAL_GPIO_Init+0x240>
 800cd62:	2305      	movs	r3, #5
 800cd64:	e008      	b.n	800cd78 <HAL_GPIO_Init+0x240>
 800cd66:	2304      	movs	r3, #4
 800cd68:	e006      	b.n	800cd78 <HAL_GPIO_Init+0x240>
 800cd6a:	2303      	movs	r3, #3
 800cd6c:	e004      	b.n	800cd78 <HAL_GPIO_Init+0x240>
 800cd6e:	2302      	movs	r3, #2
 800cd70:	e002      	b.n	800cd78 <HAL_GPIO_Init+0x240>
 800cd72:	2301      	movs	r3, #1
 800cd74:	e000      	b.n	800cd78 <HAL_GPIO_Init+0x240>
 800cd76:	2300      	movs	r3, #0
 800cd78:	69fa      	ldr	r2, [r7, #28]
 800cd7a:	f002 0203 	and.w	r2, r2, #3
 800cd7e:	0092      	lsls	r2, r2, #2
 800cd80:	4093      	lsls	r3, r2
 800cd82:	69ba      	ldr	r2, [r7, #24]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800cd88:	4935      	ldr	r1, [pc, #212]	@ (800ce60 <HAL_GPIO_Init+0x328>)
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	089b      	lsrs	r3, r3, #2
 800cd8e:	3302      	adds	r3, #2
 800cd90:	69ba      	ldr	r2, [r7, #24]
 800cd92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cd96:	4b3d      	ldr	r3, [pc, #244]	@ (800ce8c <HAL_GPIO_Init+0x354>)
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	43db      	mvns	r3, r3
 800cda0:	69ba      	ldr	r2, [r7, #24]
 800cda2:	4013      	ands	r3, r2
 800cda4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d003      	beq.n	800cdba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800cdb2:	69ba      	ldr	r2, [r7, #24]
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cdba:	4a34      	ldr	r2, [pc, #208]	@ (800ce8c <HAL_GPIO_Init+0x354>)
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cdc0:	4b32      	ldr	r3, [pc, #200]	@ (800ce8c <HAL_GPIO_Init+0x354>)
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	43db      	mvns	r3, r3
 800cdca:	69ba      	ldr	r2, [r7, #24]
 800cdcc:	4013      	ands	r3, r2
 800cdce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d003      	beq.n	800cde4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800cddc:	69ba      	ldr	r2, [r7, #24]
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cde4:	4a29      	ldr	r2, [pc, #164]	@ (800ce8c <HAL_GPIO_Init+0x354>)
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cdea:	4b28      	ldr	r3, [pc, #160]	@ (800ce8c <HAL_GPIO_Init+0x354>)
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	43db      	mvns	r3, r3
 800cdf4:	69ba      	ldr	r2, [r7, #24]
 800cdf6:	4013      	ands	r3, r2
 800cdf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d003      	beq.n	800ce0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ce06:	69ba      	ldr	r2, [r7, #24]
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ce0e:	4a1f      	ldr	r2, [pc, #124]	@ (800ce8c <HAL_GPIO_Init+0x354>)
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ce14:	4b1d      	ldr	r3, [pc, #116]	@ (800ce8c <HAL_GPIO_Init+0x354>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	43db      	mvns	r3, r3
 800ce1e:	69ba      	ldr	r2, [r7, #24]
 800ce20:	4013      	ands	r3, r2
 800ce22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d003      	beq.n	800ce38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ce30:	69ba      	ldr	r2, [r7, #24]
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	4313      	orrs	r3, r2
 800ce36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ce38:	4a14      	ldr	r2, [pc, #80]	@ (800ce8c <HAL_GPIO_Init+0x354>)
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	3301      	adds	r3, #1
 800ce42:	61fb      	str	r3, [r7, #28]
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	2b0f      	cmp	r3, #15
 800ce48:	f67f ae86 	bls.w	800cb58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800ce4c:	bf00      	nop
 800ce4e:	bf00      	nop
 800ce50:	3724      	adds	r7, #36	@ 0x24
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	40023800 	.word	0x40023800
 800ce60:	40013800 	.word	0x40013800
 800ce64:	40020000 	.word	0x40020000
 800ce68:	40020400 	.word	0x40020400
 800ce6c:	40020800 	.word	0x40020800
 800ce70:	40020c00 	.word	0x40020c00
 800ce74:	40021000 	.word	0x40021000
 800ce78:	40021400 	.word	0x40021400
 800ce7c:	40021800 	.word	0x40021800
 800ce80:	40021c00 	.word	0x40021c00
 800ce84:	40022000 	.word	0x40022000
 800ce88:	40022400 	.word	0x40022400
 800ce8c:	40013c00 	.word	0x40013c00

0800ce90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	691a      	ldr	r2, [r3, #16]
 800cea0:	887b      	ldrh	r3, [r7, #2]
 800cea2:	4013      	ands	r3, r2
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	73fb      	strb	r3, [r7, #15]
 800ceac:	e001      	b.n	800ceb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ceb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	807b      	strh	r3, [r7, #2]
 800cecc:	4613      	mov	r3, r2
 800cece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ced0:	787b      	ldrb	r3, [r7, #1]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d003      	beq.n	800cede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ced6:	887a      	ldrh	r2, [r7, #2]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800cedc:	e003      	b.n	800cee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800cede:	887b      	ldrh	r3, [r7, #2]
 800cee0:	041a      	lsls	r2, r3, #16
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	619a      	str	r2, [r3, #24]
}
 800cee6:	bf00      	nop
 800cee8:	370c      	adds	r7, #12
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr

0800cef2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cef2:	b480      	push	{r7}
 800cef4:	b085      	sub	sp, #20
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
 800cefa:	460b      	mov	r3, r1
 800cefc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	695b      	ldr	r3, [r3, #20]
 800cf02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cf04:	887a      	ldrh	r2, [r7, #2]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	4013      	ands	r3, r2
 800cf0a:	041a      	lsls	r2, r3, #16
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	43d9      	mvns	r1, r3
 800cf10:	887b      	ldrh	r3, [r7, #2]
 800cf12:	400b      	ands	r3, r1
 800cf14:	431a      	orrs	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	619a      	str	r2, [r3, #24]
}
 800cf1a:	bf00      	nop
 800cf1c:	3714      	adds	r7, #20
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
	...

0800cf28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d101      	bne.n	800cf3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cf36:	2301      	movs	r3, #1
 800cf38:	e07f      	b.n	800d03a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d106      	bne.n	800cf54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7fd feb0 	bl	800acb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2224      	movs	r2, #36	@ 0x24
 800cf58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f022 0201 	bic.w	r2, r2, #1
 800cf6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685a      	ldr	r2, [r3, #4]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800cf78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	689a      	ldr	r2, [r3, #8]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cf88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d107      	bne.n	800cfa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	689a      	ldr	r2, [r3, #8]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cf9e:	609a      	str	r2, [r3, #8]
 800cfa0:	e006      	b.n	800cfb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	689a      	ldr	r2, [r3, #8]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800cfae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d104      	bne.n	800cfc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cfc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	6859      	ldr	r1, [r3, #4]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	4b1d      	ldr	r3, [pc, #116]	@ (800d044 <HAL_I2C_Init+0x11c>)
 800cfce:	430b      	orrs	r3, r1
 800cfd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	68da      	ldr	r2, [r3, #12]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cfe0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	691a      	ldr	r2, [r3, #16]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	695b      	ldr	r3, [r3, #20]
 800cfea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	699b      	ldr	r3, [r3, #24]
 800cff2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	430a      	orrs	r2, r1
 800cffa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	69d9      	ldr	r1, [r3, #28]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6a1a      	ldr	r2, [r3, #32]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	430a      	orrs	r2, r1
 800d00a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f042 0201 	orr.w	r2, r2, #1
 800d01a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2220      	movs	r2, #32
 800d026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800d038:	2300      	movs	r3, #0
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	02008000 	.word	0x02008000

0800d048 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b088      	sub	sp, #32
 800d04c:	af02      	add	r7, sp, #8
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	4608      	mov	r0, r1
 800d052:	4611      	mov	r1, r2
 800d054:	461a      	mov	r2, r3
 800d056:	4603      	mov	r3, r0
 800d058:	817b      	strh	r3, [r7, #10]
 800d05a:	460b      	mov	r3, r1
 800d05c:	813b      	strh	r3, [r7, #8]
 800d05e:	4613      	mov	r3, r2
 800d060:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	2b20      	cmp	r3, #32
 800d06c:	f040 80f9 	bne.w	800d262 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d002      	beq.n	800d07c <HAL_I2C_Mem_Write+0x34>
 800d076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d105      	bne.n	800d088 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d082:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	e0ed      	b.n	800d264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d101      	bne.n	800d096 <HAL_I2C_Mem_Write+0x4e>
 800d092:	2302      	movs	r3, #2
 800d094:	e0e6      	b.n	800d264 <HAL_I2C_Mem_Write+0x21c>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2201      	movs	r2, #1
 800d09a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d09e:	f7fe faff 	bl	800b6a0 <HAL_GetTick>
 800d0a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	2319      	movs	r3, #25
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f000 fac3 	bl	800d63c <I2C_WaitOnFlagUntilTimeout>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e0d1      	b.n	800d264 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2221      	movs	r2, #33	@ 0x21
 800d0c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2240      	movs	r2, #64	@ 0x40
 800d0cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6a3a      	ldr	r2, [r7, #32]
 800d0da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d0e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d0e8:	88f8      	ldrh	r0, [r7, #6]
 800d0ea:	893a      	ldrh	r2, [r7, #8]
 800d0ec:	8979      	ldrh	r1, [r7, #10]
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	9301      	str	r3, [sp, #4]
 800d0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f4:	9300      	str	r3, [sp, #0]
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f000 f9d3 	bl	800d4a4 <I2C_RequestMemoryWrite>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d005      	beq.n	800d110 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	e0a9      	b.n	800d264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d114:	b29b      	uxth	r3, r3
 800d116:	2bff      	cmp	r3, #255	@ 0xff
 800d118:	d90e      	bls.n	800d138 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	22ff      	movs	r2, #255	@ 0xff
 800d11e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d124:	b2da      	uxtb	r2, r3
 800d126:	8979      	ldrh	r1, [r7, #10]
 800d128:	2300      	movs	r3, #0
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f000 fc1f 	bl	800d974 <I2C_TransferConfig>
 800d136:	e00f      	b.n	800d158 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d146:	b2da      	uxtb	r2, r3
 800d148:	8979      	ldrh	r1, [r7, #10]
 800d14a:	2300      	movs	r3, #0
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f000 fc0e 	bl	800d974 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d158:	697a      	ldr	r2, [r7, #20]
 800d15a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f000 faad 	bl	800d6bc <I2C_WaitOnTXISFlagUntilTimeout>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d001      	beq.n	800d16c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	e07b      	b.n	800d264 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d170:	781a      	ldrb	r2, [r3, #0]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d17c:	1c5a      	adds	r2, r3, #1
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d186:	b29b      	uxth	r3, r3
 800d188:	3b01      	subs	r3, #1
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d194:	3b01      	subs	r3, #1
 800d196:	b29a      	uxth	r2, r3
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d034      	beq.n	800d210 <HAL_I2C_Mem_Write+0x1c8>
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d130      	bne.n	800d210 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2180      	movs	r1, #128	@ 0x80
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f000 fa3f 	bl	800d63c <I2C_WaitOnFlagUntilTimeout>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e04d      	b.n	800d264 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	2bff      	cmp	r3, #255	@ 0xff
 800d1d0:	d90e      	bls.n	800d1f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	22ff      	movs	r2, #255	@ 0xff
 800d1d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	8979      	ldrh	r1, [r7, #10]
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f000 fbc3 	bl	800d974 <I2C_TransferConfig>
 800d1ee:	e00f      	b.n	800d210 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1f4:	b29a      	uxth	r2, r3
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	8979      	ldrh	r1, [r7, #10]
 800d202:	2300      	movs	r3, #0
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f000 fbb2 	bl	800d974 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d214:	b29b      	uxth	r3, r3
 800d216:	2b00      	cmp	r3, #0
 800d218:	d19e      	bne.n	800d158 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 fa8c 	bl	800d73c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d001      	beq.n	800d22e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e01a      	b.n	800d264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2220      	movs	r2, #32
 800d234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	6859      	ldr	r1, [r3, #4]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	4b0a      	ldr	r3, [pc, #40]	@ (800d26c <HAL_I2C_Mem_Write+0x224>)
 800d242:	400b      	ands	r3, r1
 800d244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2220      	movs	r2, #32
 800d24a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d25e:	2300      	movs	r3, #0
 800d260:	e000      	b.n	800d264 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800d262:	2302      	movs	r3, #2
  }
}
 800d264:	4618      	mov	r0, r3
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	fe00e800 	.word	0xfe00e800

0800d270 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b088      	sub	sp, #32
 800d274:	af02      	add	r7, sp, #8
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	4608      	mov	r0, r1
 800d27a:	4611      	mov	r1, r2
 800d27c:	461a      	mov	r2, r3
 800d27e:	4603      	mov	r3, r0
 800d280:	817b      	strh	r3, [r7, #10]
 800d282:	460b      	mov	r3, r1
 800d284:	813b      	strh	r3, [r7, #8]
 800d286:	4613      	mov	r3, r2
 800d288:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d290:	b2db      	uxtb	r3, r3
 800d292:	2b20      	cmp	r3, #32
 800d294:	f040 80fd 	bne.w	800d492 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800d298:	6a3b      	ldr	r3, [r7, #32]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d002      	beq.n	800d2a4 <HAL_I2C_Mem_Read+0x34>
 800d29e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d105      	bne.n	800d2b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e0f1      	b.n	800d494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d101      	bne.n	800d2be <HAL_I2C_Mem_Read+0x4e>
 800d2ba:	2302      	movs	r3, #2
 800d2bc:	e0ea      	b.n	800d494 <HAL_I2C_Mem_Read+0x224>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d2c6:	f7fe f9eb 	bl	800b6a0 <HAL_GetTick>
 800d2ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	2319      	movs	r3, #25
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f000 f9af 	bl	800d63c <I2C_WaitOnFlagUntilTimeout>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e0d5      	b.n	800d494 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2222      	movs	r2, #34	@ 0x22
 800d2ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2240      	movs	r2, #64	@ 0x40
 800d2f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6a3a      	ldr	r2, [r7, #32]
 800d302:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d308:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d310:	88f8      	ldrh	r0, [r7, #6]
 800d312:	893a      	ldrh	r2, [r7, #8]
 800d314:	8979      	ldrh	r1, [r7, #10]
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	9301      	str	r3, [sp, #4]
 800d31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	4603      	mov	r3, r0
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f000 f913 	bl	800d54c <I2C_RequestMemoryRead>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d005      	beq.n	800d338 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	e0ad      	b.n	800d494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	2bff      	cmp	r3, #255	@ 0xff
 800d340:	d90e      	bls.n	800d360 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	22ff      	movs	r2, #255	@ 0xff
 800d346:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	8979      	ldrh	r1, [r7, #10]
 800d350:	4b52      	ldr	r3, [pc, #328]	@ (800d49c <HAL_I2C_Mem_Read+0x22c>)
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f000 fb0b 	bl	800d974 <I2C_TransferConfig>
 800d35e:	e00f      	b.n	800d380 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d364:	b29a      	uxth	r2, r3
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	8979      	ldrh	r1, [r7, #10]
 800d372:	4b4a      	ldr	r3, [pc, #296]	@ (800d49c <HAL_I2C_Mem_Read+0x22c>)
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	f000 fafa 	bl	800d974 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d386:	2200      	movs	r2, #0
 800d388:	2104      	movs	r1, #4
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f000 f956 	bl	800d63c <I2C_WaitOnFlagUntilTimeout>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	e07c      	b.n	800d494 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a4:	b2d2      	uxtb	r2, r2
 800d3a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ac:	1c5a      	adds	r2, r3, #1
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	3b01      	subs	r3, #1
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d034      	beq.n	800d440 <HAL_I2C_Mem_Read+0x1d0>
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d130      	bne.n	800d440 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	2180      	movs	r1, #128	@ 0x80
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f000 f927 	bl	800d63c <I2C_WaitOnFlagUntilTimeout>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d001      	beq.n	800d3f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e04d      	b.n	800d494 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	2bff      	cmp	r3, #255	@ 0xff
 800d400:	d90e      	bls.n	800d420 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	22ff      	movs	r2, #255	@ 0xff
 800d406:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	8979      	ldrh	r1, [r7, #10]
 800d410:	2300      	movs	r3, #0
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f000 faab 	bl	800d974 <I2C_TransferConfig>
 800d41e:	e00f      	b.n	800d440 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d424:	b29a      	uxth	r2, r3
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	8979      	ldrh	r1, [r7, #10]
 800d432:	2300      	movs	r3, #0
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	f000 fa9a 	bl	800d974 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d444:	b29b      	uxth	r3, r3
 800d446:	2b00      	cmp	r3, #0
 800d448:	d19a      	bne.n	800d380 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f000 f974 	bl	800d73c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d45a:	2301      	movs	r3, #1
 800d45c:	e01a      	b.n	800d494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2220      	movs	r2, #32
 800d464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	6859      	ldr	r1, [r3, #4]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a0 <HAL_I2C_Mem_Read+0x230>)
 800d472:	400b      	ands	r3, r1
 800d474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2220      	movs	r2, #32
 800d47a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2200      	movs	r2, #0
 800d482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d48e:	2300      	movs	r3, #0
 800d490:	e000      	b.n	800d494 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d492:	2302      	movs	r3, #2
  }
}
 800d494:	4618      	mov	r0, r3
 800d496:	3718      	adds	r7, #24
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	80002400 	.word	0x80002400
 800d4a0:	fe00e800 	.word	0xfe00e800

0800d4a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af02      	add	r7, sp, #8
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	817b      	strh	r3, [r7, #10]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	813b      	strh	r3, [r7, #8]
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d4be:	88fb      	ldrh	r3, [r7, #6]
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	8979      	ldrh	r1, [r7, #10]
 800d4c4:	4b20      	ldr	r3, [pc, #128]	@ (800d548 <I2C_RequestMemoryWrite+0xa4>)
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f000 fa51 	bl	800d974 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d4d2:	69fa      	ldr	r2, [r7, #28]
 800d4d4:	69b9      	ldr	r1, [r7, #24]
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	f000 f8f0 	bl	800d6bc <I2C_WaitOnTXISFlagUntilTimeout>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d001      	beq.n	800d4e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e02c      	b.n	800d540 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d4e6:	88fb      	ldrh	r3, [r7, #6]
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d105      	bne.n	800d4f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d4ec:	893b      	ldrh	r3, [r7, #8]
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	629a      	str	r2, [r3, #40]	@ 0x28
 800d4f6:	e015      	b.n	800d524 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d4f8:	893b      	ldrh	r3, [r7, #8]
 800d4fa:	0a1b      	lsrs	r3, r3, #8
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	b2da      	uxtb	r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d506:	69fa      	ldr	r2, [r7, #28]
 800d508:	69b9      	ldr	r1, [r7, #24]
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f000 f8d6 	bl	800d6bc <I2C_WaitOnTXISFlagUntilTimeout>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e012      	b.n	800d540 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d51a:	893b      	ldrh	r3, [r7, #8]
 800d51c:	b2da      	uxtb	r2, r3
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	2200      	movs	r2, #0
 800d52c:	2180      	movs	r1, #128	@ 0x80
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f000 f884 	bl	800d63c <I2C_WaitOnFlagUntilTimeout>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	e000      	b.n	800d540 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	80002000 	.word	0x80002000

0800d54c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af02      	add	r7, sp, #8
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	4608      	mov	r0, r1
 800d556:	4611      	mov	r1, r2
 800d558:	461a      	mov	r2, r3
 800d55a:	4603      	mov	r3, r0
 800d55c:	817b      	strh	r3, [r7, #10]
 800d55e:	460b      	mov	r3, r1
 800d560:	813b      	strh	r3, [r7, #8]
 800d562:	4613      	mov	r3, r2
 800d564:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d566:	88fb      	ldrh	r3, [r7, #6]
 800d568:	b2da      	uxtb	r2, r3
 800d56a:	8979      	ldrh	r1, [r7, #10]
 800d56c:	4b20      	ldr	r3, [pc, #128]	@ (800d5f0 <I2C_RequestMemoryRead+0xa4>)
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	2300      	movs	r3, #0
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f000 f9fe 	bl	800d974 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d578:	69fa      	ldr	r2, [r7, #28]
 800d57a:	69b9      	ldr	r1, [r7, #24]
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f000 f89d 	bl	800d6bc <I2C_WaitOnTXISFlagUntilTimeout>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d001      	beq.n	800d58c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e02c      	b.n	800d5e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d58c:	88fb      	ldrh	r3, [r7, #6]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d105      	bne.n	800d59e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d592:	893b      	ldrh	r3, [r7, #8]
 800d594:	b2da      	uxtb	r2, r3
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	629a      	str	r2, [r3, #40]	@ 0x28
 800d59c:	e015      	b.n	800d5ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d59e:	893b      	ldrh	r3, [r7, #8]
 800d5a0:	0a1b      	lsrs	r3, r3, #8
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	b2da      	uxtb	r2, r3
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5ac:	69fa      	ldr	r2, [r7, #28]
 800d5ae:	69b9      	ldr	r1, [r7, #24]
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f000 f883 	bl	800d6bc <I2C_WaitOnTXISFlagUntilTimeout>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d001      	beq.n	800d5c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e012      	b.n	800d5e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d5c0:	893b      	ldrh	r3, [r7, #8]
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	2140      	movs	r1, #64	@ 0x40
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f000 f831 	bl	800d63c <I2C_WaitOnFlagUntilTimeout>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d001      	beq.n	800d5e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e000      	b.n	800d5e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d5e4:	2300      	movs	r3, #0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	80002000 	.word	0x80002000

0800d5f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	f003 0302 	and.w	r3, r3, #2
 800d606:	2b02      	cmp	r3, #2
 800d608:	d103      	bne.n	800d612 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2200      	movs	r2, #0
 800d610:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	f003 0301 	and.w	r3, r3, #1
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d007      	beq.n	800d630 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	699a      	ldr	r2, [r3, #24]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f042 0201 	orr.w	r2, r2, #1
 800d62e:	619a      	str	r2, [r3, #24]
  }
}
 800d630:	bf00      	nop
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	603b      	str	r3, [r7, #0]
 800d648:	4613      	mov	r3, r2
 800d64a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d64c:	e022      	b.n	800d694 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d654:	d01e      	beq.n	800d694 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d656:	f7fe f823 	bl	800b6a0 <HAL_GetTick>
 800d65a:	4602      	mov	r2, r0
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	429a      	cmp	r2, r3
 800d664:	d302      	bcc.n	800d66c <I2C_WaitOnFlagUntilTimeout+0x30>
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d113      	bne.n	800d694 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d670:	f043 0220 	orr.w	r2, r3, #32
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2220      	movs	r2, #32
 800d67c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2200      	movs	r2, #0
 800d684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800d690:	2301      	movs	r3, #1
 800d692:	e00f      	b.n	800d6b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	699a      	ldr	r2, [r3, #24]
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	4013      	ands	r3, r2
 800d69e:	68ba      	ldr	r2, [r7, #8]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	bf0c      	ite	eq
 800d6a4:	2301      	moveq	r3, #1
 800d6a6:	2300      	movne	r3, #0
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d0cd      	beq.n	800d64e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d6c8:	e02c      	b.n	800d724 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	68b9      	ldr	r1, [r7, #8]
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f000 f870 	bl	800d7b4 <I2C_IsErrorOccurred>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d001      	beq.n	800d6de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e02a      	b.n	800d734 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e4:	d01e      	beq.n	800d724 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6e6:	f7fd ffdb 	bl	800b6a0 <HAL_GetTick>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d302      	bcc.n	800d6fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d113      	bne.n	800d724 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d700:	f043 0220 	orr.w	r2, r3, #32
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2220      	movs	r2, #32
 800d70c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2200      	movs	r2, #0
 800d714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2200      	movs	r2, #0
 800d71c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	e007      	b.n	800d734 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	699b      	ldr	r3, [r3, #24]
 800d72a:	f003 0302 	and.w	r3, r3, #2
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d1cb      	bne.n	800d6ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d732:	2300      	movs	r3, #0
}
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d748:	e028      	b.n	800d79c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	68b9      	ldr	r1, [r7, #8]
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f000 f830 	bl	800d7b4 <I2C_IsErrorOccurred>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d75a:	2301      	movs	r3, #1
 800d75c:	e026      	b.n	800d7ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d75e:	f7fd ff9f 	bl	800b6a0 <HAL_GetTick>
 800d762:	4602      	mov	r2, r0
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	68ba      	ldr	r2, [r7, #8]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d302      	bcc.n	800d774 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d113      	bne.n	800d79c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d778:	f043 0220 	orr.w	r2, r3, #32
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2220      	movs	r2, #32
 800d784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2200      	movs	r2, #0
 800d78c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2200      	movs	r2, #0
 800d794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800d798:	2301      	movs	r3, #1
 800d79a:	e007      	b.n	800d7ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	699b      	ldr	r3, [r3, #24]
 800d7a2:	f003 0320 	and.w	r3, r3, #32
 800d7a6:	2b20      	cmp	r3, #32
 800d7a8:	d1cf      	bne.n	800d74a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b08a      	sub	sp, #40	@ 0x28
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	699b      	ldr	r3, [r3, #24]
 800d7cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	f003 0310 	and.w	r3, r3, #16
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d068      	beq.n	800d8b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2210      	movs	r2, #16
 800d7e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d7e8:	e049      	b.n	800d87e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f0:	d045      	beq.n	800d87e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d7f2:	f7fd ff55 	bl	800b6a0 <HAL_GetTick>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d302      	bcc.n	800d808 <I2C_IsErrorOccurred+0x54>
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d13a      	bne.n	800d87e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d812:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d81a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	699b      	ldr	r3, [r3, #24]
 800d822:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d82a:	d121      	bne.n	800d870 <I2C_IsErrorOccurred+0xbc>
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d832:	d01d      	beq.n	800d870 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d834:	7cfb      	ldrb	r3, [r7, #19]
 800d836:	2b20      	cmp	r3, #32
 800d838:	d01a      	beq.n	800d870 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	685a      	ldr	r2, [r3, #4]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d848:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d84a:	f7fd ff29 	bl	800b6a0 <HAL_GetTick>
 800d84e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d850:	e00e      	b.n	800d870 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d852:	f7fd ff25 	bl	800b6a0 <HAL_GetTick>
 800d856:	4602      	mov	r2, r0
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	1ad3      	subs	r3, r2, r3
 800d85c:	2b19      	cmp	r3, #25
 800d85e:	d907      	bls.n	800d870 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800d860:	6a3b      	ldr	r3, [r7, #32]
 800d862:	f043 0320 	orr.w	r3, r3, #32
 800d866:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d868:	2301      	movs	r3, #1
 800d86a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800d86e:	e006      	b.n	800d87e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	699b      	ldr	r3, [r3, #24]
 800d876:	f003 0320 	and.w	r3, r3, #32
 800d87a:	2b20      	cmp	r3, #32
 800d87c:	d1e9      	bne.n	800d852 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	699b      	ldr	r3, [r3, #24]
 800d884:	f003 0320 	and.w	r3, r3, #32
 800d888:	2b20      	cmp	r3, #32
 800d88a:	d003      	beq.n	800d894 <I2C_IsErrorOccurred+0xe0>
 800d88c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d890:	2b00      	cmp	r3, #0
 800d892:	d0aa      	beq.n	800d7ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d103      	bne.n	800d8a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2220      	movs	r2, #32
 800d8a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d8a4:	6a3b      	ldr	r3, [r7, #32]
 800d8a6:	f043 0304 	orr.w	r3, r3, #4
 800d8aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	699b      	ldr	r3, [r3, #24]
 800d8b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00b      	beq.n	800d8dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d8c4:	6a3b      	ldr	r3, [r7, #32]
 800d8c6:	f043 0301 	orr.w	r3, r3, #1
 800d8ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d8d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d8dc:	69bb      	ldr	r3, [r7, #24]
 800d8de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00b      	beq.n	800d8fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d8e6:	6a3b      	ldr	r3, [r7, #32]
 800d8e8:	f043 0308 	orr.w	r3, r3, #8
 800d8ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d8f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00b      	beq.n	800d920 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d908:	6a3b      	ldr	r3, [r7, #32]
 800d90a:	f043 0302 	orr.w	r3, r3, #2
 800d90e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d918:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d91a:	2301      	movs	r3, #1
 800d91c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800d920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d924:	2b00      	cmp	r3, #0
 800d926:	d01c      	beq.n	800d962 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f7ff fe63 	bl	800d5f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	6859      	ldr	r1, [r3, #4]
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	4b0d      	ldr	r3, [pc, #52]	@ (800d970 <I2C_IsErrorOccurred+0x1bc>)
 800d93a:	400b      	ands	r3, r1
 800d93c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d942:	6a3b      	ldr	r3, [r7, #32]
 800d944:	431a      	orrs	r2, r3
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2220      	movs	r2, #32
 800d94e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2200      	movs	r2, #0
 800d956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800d962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d966:	4618      	mov	r0, r3
 800d968:	3728      	adds	r7, #40	@ 0x28
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	fe00e800 	.word	0xfe00e800

0800d974 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d974:	b480      	push	{r7}
 800d976:	b087      	sub	sp, #28
 800d978:	af00      	add	r7, sp, #0
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	607b      	str	r3, [r7, #4]
 800d97e:	460b      	mov	r3, r1
 800d980:	817b      	strh	r3, [r7, #10]
 800d982:	4613      	mov	r3, r2
 800d984:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d986:	897b      	ldrh	r3, [r7, #10]
 800d988:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d98c:	7a7b      	ldrb	r3, [r7, #9]
 800d98e:	041b      	lsls	r3, r3, #16
 800d990:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d994:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d99a:	6a3b      	ldr	r3, [r7, #32]
 800d99c:	4313      	orrs	r3, r2
 800d99e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d9a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	685a      	ldr	r2, [r3, #4]
 800d9aa:	6a3b      	ldr	r3, [r7, #32]
 800d9ac:	0d5b      	lsrs	r3, r3, #21
 800d9ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800d9b2:	4b08      	ldr	r3, [pc, #32]	@ (800d9d4 <I2C_TransferConfig+0x60>)
 800d9b4:	430b      	orrs	r3, r1
 800d9b6:	43db      	mvns	r3, r3
 800d9b8:	ea02 0103 	and.w	r1, r2, r3
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	697a      	ldr	r2, [r7, #20]
 800d9c2:	430a      	orrs	r2, r1
 800d9c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d9c6:	bf00      	nop
 800d9c8:	371c      	adds	r7, #28
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	03ff63ff 	.word	0x03ff63ff

0800d9d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	2b20      	cmp	r3, #32
 800d9ec:	d138      	bne.n	800da60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d101      	bne.n	800d9fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	e032      	b.n	800da62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2224      	movs	r2, #36	@ 0x24
 800da08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f022 0201 	bic.w	r2, r2, #1
 800da1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800da2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	6819      	ldr	r1, [r3, #0]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	683a      	ldr	r2, [r7, #0]
 800da38:	430a      	orrs	r2, r1
 800da3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f042 0201 	orr.w	r2, r2, #1
 800da4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2220      	movs	r2, #32
 800da50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	e000      	b.n	800da62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800da60:	2302      	movs	r3, #2
  }
}
 800da62:	4618      	mov	r0, r3
 800da64:	370c      	adds	r7, #12
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr

0800da6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800da6e:	b480      	push	{r7}
 800da70:	b085      	sub	sp, #20
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b20      	cmp	r3, #32
 800da82:	d139      	bne.n	800daf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d101      	bne.n	800da92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800da8e:	2302      	movs	r3, #2
 800da90:	e033      	b.n	800dafa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2201      	movs	r2, #1
 800da96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2224      	movs	r2, #36	@ 0x24
 800da9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f022 0201 	bic.w	r2, r2, #1
 800dab0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dac0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	021b      	lsls	r3, r3, #8
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	4313      	orrs	r3, r2
 800daca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f042 0201 	orr.w	r2, r2, #1
 800dae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2220      	movs	r2, #32
 800dae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800daf4:	2300      	movs	r3, #0
 800daf6:	e000      	b.n	800dafa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800daf8:	2302      	movs	r3, #2
  }
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
	...

0800db08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800db08:	b480      	push	{r7}
 800db0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800db0c:	4b05      	ldr	r3, [pc, #20]	@ (800db24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a04      	ldr	r2, [pc, #16]	@ (800db24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800db12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db16:	6013      	str	r3, [r2, #0]
}
 800db18:	bf00      	nop
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	40007000 	.word	0x40007000

0800db28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800db2e:	2300      	movs	r3, #0
 800db30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800db32:	4b23      	ldr	r3, [pc, #140]	@ (800dbc0 <HAL_PWREx_EnableOverDrive+0x98>)
 800db34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db36:	4a22      	ldr	r2, [pc, #136]	@ (800dbc0 <HAL_PWREx_EnableOverDrive+0x98>)
 800db38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db3c:	6413      	str	r3, [r2, #64]	@ 0x40
 800db3e:	4b20      	ldr	r3, [pc, #128]	@ (800dbc0 <HAL_PWREx_EnableOverDrive+0x98>)
 800db40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800db46:	603b      	str	r3, [r7, #0]
 800db48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800db4a:	4b1e      	ldr	r3, [pc, #120]	@ (800dbc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a1d      	ldr	r2, [pc, #116]	@ (800dbc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800db50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800db56:	f7fd fda3 	bl	800b6a0 <HAL_GetTick>
 800db5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800db5c:	e009      	b.n	800db72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800db5e:	f7fd fd9f 	bl	800b6a0 <HAL_GetTick>
 800db62:	4602      	mov	r2, r0
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800db6c:	d901      	bls.n	800db72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800db6e:	2303      	movs	r3, #3
 800db70:	e022      	b.n	800dbb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800db72:	4b14      	ldr	r3, [pc, #80]	@ (800dbc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800db7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db7e:	d1ee      	bne.n	800db5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800db80:	4b10      	ldr	r3, [pc, #64]	@ (800dbc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a0f      	ldr	r2, [pc, #60]	@ (800dbc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800db86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800db8c:	f7fd fd88 	bl	800b6a0 <HAL_GetTick>
 800db90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800db92:	e009      	b.n	800dba8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800db94:	f7fd fd84 	bl	800b6a0 <HAL_GetTick>
 800db98:	4602      	mov	r2, r0
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dba2:	d901      	bls.n	800dba8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800dba4:	2303      	movs	r3, #3
 800dba6:	e007      	b.n	800dbb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800dba8:	4b06      	ldr	r3, [pc, #24]	@ (800dbc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbb4:	d1ee      	bne.n	800db94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	40023800 	.word	0x40023800
 800dbc4:	40007000 	.word	0x40007000

0800dbc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b086      	sub	sp, #24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d101      	bne.n	800dbde <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	e29b      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	f000 8087 	beq.w	800dcfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800dbec:	4b96      	ldr	r3, [pc, #600]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dbee:	689b      	ldr	r3, [r3, #8]
 800dbf0:	f003 030c 	and.w	r3, r3, #12
 800dbf4:	2b04      	cmp	r3, #4
 800dbf6:	d00c      	beq.n	800dc12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dbf8:	4b93      	ldr	r3, [pc, #588]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	f003 030c 	and.w	r3, r3, #12
 800dc00:	2b08      	cmp	r3, #8
 800dc02:	d112      	bne.n	800dc2a <HAL_RCC_OscConfig+0x62>
 800dc04:	4b90      	ldr	r3, [pc, #576]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dc0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dc10:	d10b      	bne.n	800dc2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dc12:	4b8d      	ldr	r3, [pc, #564]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d06c      	beq.n	800dcf8 <HAL_RCC_OscConfig+0x130>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d168      	bne.n	800dcf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800dc26:	2301      	movs	r3, #1
 800dc28:	e275      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc32:	d106      	bne.n	800dc42 <HAL_RCC_OscConfig+0x7a>
 800dc34:	4b84      	ldr	r3, [pc, #528]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4a83      	ldr	r2, [pc, #524]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc3e:	6013      	str	r3, [r2, #0]
 800dc40:	e02e      	b.n	800dca0 <HAL_RCC_OscConfig+0xd8>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10c      	bne.n	800dc64 <HAL_RCC_OscConfig+0x9c>
 800dc4a:	4b7f      	ldr	r3, [pc, #508]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4a7e      	ldr	r2, [pc, #504]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dc54:	6013      	str	r3, [r2, #0]
 800dc56:	4b7c      	ldr	r3, [pc, #496]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a7b      	ldr	r2, [pc, #492]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dc60:	6013      	str	r3, [r2, #0]
 800dc62:	e01d      	b.n	800dca0 <HAL_RCC_OscConfig+0xd8>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dc6c:	d10c      	bne.n	800dc88 <HAL_RCC_OscConfig+0xc0>
 800dc6e:	4b76      	ldr	r3, [pc, #472]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4a75      	ldr	r2, [pc, #468]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800dc78:	6013      	str	r3, [r2, #0]
 800dc7a:	4b73      	ldr	r3, [pc, #460]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	4a72      	ldr	r2, [pc, #456]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc84:	6013      	str	r3, [r2, #0]
 800dc86:	e00b      	b.n	800dca0 <HAL_RCC_OscConfig+0xd8>
 800dc88:	4b6f      	ldr	r3, [pc, #444]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a6e      	ldr	r2, [pc, #440]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dc92:	6013      	str	r3, [r2, #0]
 800dc94:	4b6c      	ldr	r3, [pc, #432]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a6b      	ldr	r2, [pc, #428]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dc9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dc9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d013      	beq.n	800dcd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dca8:	f7fd fcfa 	bl	800b6a0 <HAL_GetTick>
 800dcac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dcae:	e008      	b.n	800dcc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dcb0:	f7fd fcf6 	bl	800b6a0 <HAL_GetTick>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	2b64      	cmp	r3, #100	@ 0x64
 800dcbc:	d901      	bls.n	800dcc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dcbe:	2303      	movs	r3, #3
 800dcc0:	e229      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dcc2:	4b61      	ldr	r3, [pc, #388]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d0f0      	beq.n	800dcb0 <HAL_RCC_OscConfig+0xe8>
 800dcce:	e014      	b.n	800dcfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcd0:	f7fd fce6 	bl	800b6a0 <HAL_GetTick>
 800dcd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dcd6:	e008      	b.n	800dcea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dcd8:	f7fd fce2 	bl	800b6a0 <HAL_GetTick>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	2b64      	cmp	r3, #100	@ 0x64
 800dce4:	d901      	bls.n	800dcea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800dce6:	2303      	movs	r3, #3
 800dce8:	e215      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dcea:	4b57      	ldr	r3, [pc, #348]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1f0      	bne.n	800dcd8 <HAL_RCC_OscConfig+0x110>
 800dcf6:	e000      	b.n	800dcfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dcf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f003 0302 	and.w	r3, r3, #2
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d069      	beq.n	800ddda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800dd06:	4b50      	ldr	r3, [pc, #320]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	f003 030c 	and.w	r3, r3, #12
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d00b      	beq.n	800dd2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dd12:	4b4d      	ldr	r3, [pc, #308]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	f003 030c 	and.w	r3, r3, #12
 800dd1a:	2b08      	cmp	r3, #8
 800dd1c:	d11c      	bne.n	800dd58 <HAL_RCC_OscConfig+0x190>
 800dd1e:	4b4a      	ldr	r3, [pc, #296]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d116      	bne.n	800dd58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dd2a:	4b47      	ldr	r3, [pc, #284]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f003 0302 	and.w	r3, r3, #2
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d005      	beq.n	800dd42 <HAL_RCC_OscConfig+0x17a>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d001      	beq.n	800dd42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e1e9      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd42:	4b41      	ldr	r3, [pc, #260]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	691b      	ldr	r3, [r3, #16]
 800dd4e:	00db      	lsls	r3, r3, #3
 800dd50:	493d      	ldr	r1, [pc, #244]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dd52:	4313      	orrs	r3, r2
 800dd54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dd56:	e040      	b.n	800ddda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d023      	beq.n	800dda8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dd60:	4b39      	ldr	r3, [pc, #228]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a38      	ldr	r2, [pc, #224]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dd66:	f043 0301 	orr.w	r3, r3, #1
 800dd6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd6c:	f7fd fc98 	bl	800b6a0 <HAL_GetTick>
 800dd70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd72:	e008      	b.n	800dd86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd74:	f7fd fc94 	bl	800b6a0 <HAL_GetTick>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	1ad3      	subs	r3, r2, r3
 800dd7e:	2b02      	cmp	r3, #2
 800dd80:	d901      	bls.n	800dd86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800dd82:	2303      	movs	r3, #3
 800dd84:	e1c7      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd86:	4b30      	ldr	r3, [pc, #192]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f003 0302 	and.w	r3, r3, #2
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d0f0      	beq.n	800dd74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd92:	4b2d      	ldr	r3, [pc, #180]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	00db      	lsls	r3, r3, #3
 800dda0:	4929      	ldr	r1, [pc, #164]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800dda2:	4313      	orrs	r3, r2
 800dda4:	600b      	str	r3, [r1, #0]
 800dda6:	e018      	b.n	800ddda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dda8:	4b27      	ldr	r3, [pc, #156]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4a26      	ldr	r2, [pc, #152]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800ddae:	f023 0301 	bic.w	r3, r3, #1
 800ddb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddb4:	f7fd fc74 	bl	800b6a0 <HAL_GetTick>
 800ddb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ddba:	e008      	b.n	800ddce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ddbc:	f7fd fc70 	bl	800b6a0 <HAL_GetTick>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	1ad3      	subs	r3, r2, r3
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d901      	bls.n	800ddce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ddca:	2303      	movs	r3, #3
 800ddcc:	e1a3      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ddce:	4b1e      	ldr	r3, [pc, #120]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f003 0302 	and.w	r3, r3, #2
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d1f0      	bne.n	800ddbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f003 0308 	and.w	r3, r3, #8
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d038      	beq.n	800de58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	695b      	ldr	r3, [r3, #20]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d019      	beq.n	800de22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ddee:	4b16      	ldr	r3, [pc, #88]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800ddf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddf2:	4a15      	ldr	r2, [pc, #84]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800ddf4:	f043 0301 	orr.w	r3, r3, #1
 800ddf8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddfa:	f7fd fc51 	bl	800b6a0 <HAL_GetTick>
 800ddfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800de00:	e008      	b.n	800de14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800de02:	f7fd fc4d 	bl	800b6a0 <HAL_GetTick>
 800de06:	4602      	mov	r2, r0
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	1ad3      	subs	r3, r2, r3
 800de0c:	2b02      	cmp	r3, #2
 800de0e:	d901      	bls.n	800de14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800de10:	2303      	movs	r3, #3
 800de12:	e180      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800de14:	4b0c      	ldr	r3, [pc, #48]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800de16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de18:	f003 0302 	and.w	r3, r3, #2
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d0f0      	beq.n	800de02 <HAL_RCC_OscConfig+0x23a>
 800de20:	e01a      	b.n	800de58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800de22:	4b09      	ldr	r3, [pc, #36]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800de24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de26:	4a08      	ldr	r2, [pc, #32]	@ (800de48 <HAL_RCC_OscConfig+0x280>)
 800de28:	f023 0301 	bic.w	r3, r3, #1
 800de2c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de2e:	f7fd fc37 	bl	800b6a0 <HAL_GetTick>
 800de32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800de34:	e00a      	b.n	800de4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800de36:	f7fd fc33 	bl	800b6a0 <HAL_GetTick>
 800de3a:	4602      	mov	r2, r0
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	2b02      	cmp	r3, #2
 800de42:	d903      	bls.n	800de4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800de44:	2303      	movs	r3, #3
 800de46:	e166      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
 800de48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800de4c:	4b92      	ldr	r3, [pc, #584]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800de4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de50:	f003 0302 	and.w	r3, r3, #2
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1ee      	bne.n	800de36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f003 0304 	and.w	r3, r3, #4
 800de60:	2b00      	cmp	r3, #0
 800de62:	f000 80a4 	beq.w	800dfae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800de66:	4b8c      	ldr	r3, [pc, #560]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800de68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d10d      	bne.n	800de8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800de72:	4b89      	ldr	r3, [pc, #548]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800de74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de76:	4a88      	ldr	r2, [pc, #544]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800de78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de7c:	6413      	str	r3, [r2, #64]	@ 0x40
 800de7e:	4b86      	ldr	r3, [pc, #536]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800de80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de86:	60bb      	str	r3, [r7, #8]
 800de88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800de8a:	2301      	movs	r3, #1
 800de8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800de8e:	4b83      	ldr	r3, [pc, #524]	@ (800e09c <HAL_RCC_OscConfig+0x4d4>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de96:	2b00      	cmp	r3, #0
 800de98:	d118      	bne.n	800decc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800de9a:	4b80      	ldr	r3, [pc, #512]	@ (800e09c <HAL_RCC_OscConfig+0x4d4>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4a7f      	ldr	r2, [pc, #508]	@ (800e09c <HAL_RCC_OscConfig+0x4d4>)
 800dea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dea6:	f7fd fbfb 	bl	800b6a0 <HAL_GetTick>
 800deaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800deac:	e008      	b.n	800dec0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800deae:	f7fd fbf7 	bl	800b6a0 <HAL_GetTick>
 800deb2:	4602      	mov	r2, r0
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	1ad3      	subs	r3, r2, r3
 800deb8:	2b64      	cmp	r3, #100	@ 0x64
 800deba:	d901      	bls.n	800dec0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800debc:	2303      	movs	r3, #3
 800debe:	e12a      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dec0:	4b76      	ldr	r3, [pc, #472]	@ (800e09c <HAL_RCC_OscConfig+0x4d4>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d0f0      	beq.n	800deae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d106      	bne.n	800dee2 <HAL_RCC_OscConfig+0x31a>
 800ded4:	4b70      	ldr	r3, [pc, #448]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800ded6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ded8:	4a6f      	ldr	r2, [pc, #444]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800deda:	f043 0301 	orr.w	r3, r3, #1
 800dede:	6713      	str	r3, [r2, #112]	@ 0x70
 800dee0:	e02d      	b.n	800df3e <HAL_RCC_OscConfig+0x376>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	689b      	ldr	r3, [r3, #8]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d10c      	bne.n	800df04 <HAL_RCC_OscConfig+0x33c>
 800deea:	4b6b      	ldr	r3, [pc, #428]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800deec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deee:	4a6a      	ldr	r2, [pc, #424]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800def0:	f023 0301 	bic.w	r3, r3, #1
 800def4:	6713      	str	r3, [r2, #112]	@ 0x70
 800def6:	4b68      	ldr	r3, [pc, #416]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800def8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800defa:	4a67      	ldr	r2, [pc, #412]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800defc:	f023 0304 	bic.w	r3, r3, #4
 800df00:	6713      	str	r3, [r2, #112]	@ 0x70
 800df02:	e01c      	b.n	800df3e <HAL_RCC_OscConfig+0x376>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	2b05      	cmp	r3, #5
 800df0a:	d10c      	bne.n	800df26 <HAL_RCC_OscConfig+0x35e>
 800df0c:	4b62      	ldr	r3, [pc, #392]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800df0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df10:	4a61      	ldr	r2, [pc, #388]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800df12:	f043 0304 	orr.w	r3, r3, #4
 800df16:	6713      	str	r3, [r2, #112]	@ 0x70
 800df18:	4b5f      	ldr	r3, [pc, #380]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800df1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df1c:	4a5e      	ldr	r2, [pc, #376]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800df1e:	f043 0301 	orr.w	r3, r3, #1
 800df22:	6713      	str	r3, [r2, #112]	@ 0x70
 800df24:	e00b      	b.n	800df3e <HAL_RCC_OscConfig+0x376>
 800df26:	4b5c      	ldr	r3, [pc, #368]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800df28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df2a:	4a5b      	ldr	r2, [pc, #364]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800df2c:	f023 0301 	bic.w	r3, r3, #1
 800df30:	6713      	str	r3, [r2, #112]	@ 0x70
 800df32:	4b59      	ldr	r3, [pc, #356]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800df34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df36:	4a58      	ldr	r2, [pc, #352]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800df38:	f023 0304 	bic.w	r3, r3, #4
 800df3c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d015      	beq.n	800df72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df46:	f7fd fbab 	bl	800b6a0 <HAL_GetTick>
 800df4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800df4c:	e00a      	b.n	800df64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df4e:	f7fd fba7 	bl	800b6a0 <HAL_GetTick>
 800df52:	4602      	mov	r2, r0
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d901      	bls.n	800df64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800df60:	2303      	movs	r3, #3
 800df62:	e0d8      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800df64:	4b4c      	ldr	r3, [pc, #304]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800df66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df68:	f003 0302 	and.w	r3, r3, #2
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d0ee      	beq.n	800df4e <HAL_RCC_OscConfig+0x386>
 800df70:	e014      	b.n	800df9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df72:	f7fd fb95 	bl	800b6a0 <HAL_GetTick>
 800df76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800df78:	e00a      	b.n	800df90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df7a:	f7fd fb91 	bl	800b6a0 <HAL_GetTick>
 800df7e:	4602      	mov	r2, r0
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	1ad3      	subs	r3, r2, r3
 800df84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df88:	4293      	cmp	r3, r2
 800df8a:	d901      	bls.n	800df90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800df8c:	2303      	movs	r3, #3
 800df8e:	e0c2      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800df90:	4b41      	ldr	r3, [pc, #260]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800df92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df94:	f003 0302 	and.w	r3, r3, #2
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1ee      	bne.n	800df7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800df9c:	7dfb      	ldrb	r3, [r7, #23]
 800df9e:	2b01      	cmp	r3, #1
 800dfa0:	d105      	bne.n	800dfae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dfa2:	4b3d      	ldr	r3, [pc, #244]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800dfa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfa6:	4a3c      	ldr	r2, [pc, #240]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800dfa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dfac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	699b      	ldr	r3, [r3, #24]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f000 80ae 	beq.w	800e114 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dfb8:	4b37      	ldr	r3, [pc, #220]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	f003 030c 	and.w	r3, r3, #12
 800dfc0:	2b08      	cmp	r3, #8
 800dfc2:	d06d      	beq.n	800e0a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	699b      	ldr	r3, [r3, #24]
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d14b      	bne.n	800e064 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dfcc:	4b32      	ldr	r3, [pc, #200]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a31      	ldr	r2, [pc, #196]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800dfd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dfd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dfd8:	f7fd fb62 	bl	800b6a0 <HAL_GetTick>
 800dfdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dfde:	e008      	b.n	800dff2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dfe0:	f7fd fb5e 	bl	800b6a0 <HAL_GetTick>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d901      	bls.n	800dff2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800dfee:	2303      	movs	r3, #3
 800dff0:	e091      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dff2:	4b29      	ldr	r3, [pc, #164]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d1f0      	bne.n	800dfe0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	69da      	ldr	r2, [r3, #28]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a1b      	ldr	r3, [r3, #32]
 800e006:	431a      	orrs	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e00c:	019b      	lsls	r3, r3, #6
 800e00e:	431a      	orrs	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e014:	085b      	lsrs	r3, r3, #1
 800e016:	3b01      	subs	r3, #1
 800e018:	041b      	lsls	r3, r3, #16
 800e01a:	431a      	orrs	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e020:	061b      	lsls	r3, r3, #24
 800e022:	431a      	orrs	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e028:	071b      	lsls	r3, r3, #28
 800e02a:	491b      	ldr	r1, [pc, #108]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800e02c:	4313      	orrs	r3, r2
 800e02e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e030:	4b19      	ldr	r3, [pc, #100]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a18      	ldr	r2, [pc, #96]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800e036:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e03a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e03c:	f7fd fb30 	bl	800b6a0 <HAL_GetTick>
 800e040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e042:	e008      	b.n	800e056 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e044:	f7fd fb2c 	bl	800b6a0 <HAL_GetTick>
 800e048:	4602      	mov	r2, r0
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	2b02      	cmp	r3, #2
 800e050:	d901      	bls.n	800e056 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800e052:	2303      	movs	r3, #3
 800e054:	e05f      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e056:	4b10      	ldr	r3, [pc, #64]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d0f0      	beq.n	800e044 <HAL_RCC_OscConfig+0x47c>
 800e062:	e057      	b.n	800e114 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e064:	4b0c      	ldr	r3, [pc, #48]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a0b      	ldr	r2, [pc, #44]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800e06a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e06e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e070:	f7fd fb16 	bl	800b6a0 <HAL_GetTick>
 800e074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e076:	e008      	b.n	800e08a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e078:	f7fd fb12 	bl	800b6a0 <HAL_GetTick>
 800e07c:	4602      	mov	r2, r0
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	2b02      	cmp	r3, #2
 800e084:	d901      	bls.n	800e08a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800e086:	2303      	movs	r3, #3
 800e088:	e045      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e08a:	4b03      	ldr	r3, [pc, #12]	@ (800e098 <HAL_RCC_OscConfig+0x4d0>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e092:	2b00      	cmp	r3, #0
 800e094:	d1f0      	bne.n	800e078 <HAL_RCC_OscConfig+0x4b0>
 800e096:	e03d      	b.n	800e114 <HAL_RCC_OscConfig+0x54c>
 800e098:	40023800 	.word	0x40023800
 800e09c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800e0a0:	4b1f      	ldr	r3, [pc, #124]	@ (800e120 <HAL_RCC_OscConfig+0x558>)
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	699b      	ldr	r3, [r3, #24]
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d030      	beq.n	800e110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d129      	bne.n	800e110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d122      	bne.n	800e110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e0ca:	68fa      	ldr	r2, [r7, #12]
 800e0cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800e0d0:	4013      	ands	r3, r2
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e0d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d119      	bne.n	800e110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0e6:	085b      	lsrs	r3, r3, #1
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d10f      	bne.n	800e110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d107      	bne.n	800e110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e10a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d001      	beq.n	800e114 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	e000      	b.n	800e116 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800e114:	2300      	movs	r3, #0
}
 800e116:	4618      	mov	r0, r3
 800e118:	3718      	adds	r7, #24
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	40023800 	.word	0x40023800

0800e124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e12e:	2300      	movs	r3, #0
 800e130:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d101      	bne.n	800e13c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e138:	2301      	movs	r3, #1
 800e13a:	e0d0      	b.n	800e2de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e13c:	4b6a      	ldr	r3, [pc, #424]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1c4>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f003 030f 	and.w	r3, r3, #15
 800e144:	683a      	ldr	r2, [r7, #0]
 800e146:	429a      	cmp	r2, r3
 800e148:	d910      	bls.n	800e16c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e14a:	4b67      	ldr	r3, [pc, #412]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1c4>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f023 020f 	bic.w	r2, r3, #15
 800e152:	4965      	ldr	r1, [pc, #404]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1c4>)
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	4313      	orrs	r3, r2
 800e158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e15a:	4b63      	ldr	r3, [pc, #396]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1c4>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f003 030f 	and.w	r3, r3, #15
 800e162:	683a      	ldr	r2, [r7, #0]
 800e164:	429a      	cmp	r2, r3
 800e166:	d001      	beq.n	800e16c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e168:	2301      	movs	r3, #1
 800e16a:	e0b8      	b.n	800e2de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f003 0302 	and.w	r3, r3, #2
 800e174:	2b00      	cmp	r3, #0
 800e176:	d020      	beq.n	800e1ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f003 0304 	and.w	r3, r3, #4
 800e180:	2b00      	cmp	r3, #0
 800e182:	d005      	beq.n	800e190 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e184:	4b59      	ldr	r3, [pc, #356]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	4a58      	ldr	r2, [pc, #352]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e18a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e18e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f003 0308 	and.w	r3, r3, #8
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d005      	beq.n	800e1a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e19c:	4b53      	ldr	r3, [pc, #332]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	4a52      	ldr	r2, [pc, #328]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e1a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e1a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e1a8:	4b50      	ldr	r3, [pc, #320]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	494d      	ldr	r1, [pc, #308]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f003 0301 	and.w	r3, r3, #1
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d040      	beq.n	800e248 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d107      	bne.n	800e1de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e1ce:	4b47      	ldr	r3, [pc, #284]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d115      	bne.n	800e206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e07f      	b.n	800e2de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	2b02      	cmp	r3, #2
 800e1e4:	d107      	bne.n	800e1f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e1e6:	4b41      	ldr	r3, [pc, #260]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d109      	bne.n	800e206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e073      	b.n	800e2de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e1f6:	4b3d      	ldr	r3, [pc, #244]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f003 0302 	and.w	r3, r3, #2
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d101      	bne.n	800e206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e202:	2301      	movs	r3, #1
 800e204:	e06b      	b.n	800e2de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e206:	4b39      	ldr	r3, [pc, #228]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	f023 0203 	bic.w	r2, r3, #3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	4936      	ldr	r1, [pc, #216]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e214:	4313      	orrs	r3, r2
 800e216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e218:	f7fd fa42 	bl	800b6a0 <HAL_GetTick>
 800e21c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e21e:	e00a      	b.n	800e236 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e220:	f7fd fa3e 	bl	800b6a0 <HAL_GetTick>
 800e224:	4602      	mov	r2, r0
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	1ad3      	subs	r3, r2, r3
 800e22a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e22e:	4293      	cmp	r3, r2
 800e230:	d901      	bls.n	800e236 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800e232:	2303      	movs	r3, #3
 800e234:	e053      	b.n	800e2de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e236:	4b2d      	ldr	r3, [pc, #180]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	f003 020c 	and.w	r2, r3, #12
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	429a      	cmp	r2, r3
 800e246:	d1eb      	bne.n	800e220 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e248:	4b27      	ldr	r3, [pc, #156]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1c4>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f003 030f 	and.w	r3, r3, #15
 800e250:	683a      	ldr	r2, [r7, #0]
 800e252:	429a      	cmp	r2, r3
 800e254:	d210      	bcs.n	800e278 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e256:	4b24      	ldr	r3, [pc, #144]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1c4>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f023 020f 	bic.w	r2, r3, #15
 800e25e:	4922      	ldr	r1, [pc, #136]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1c4>)
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	4313      	orrs	r3, r2
 800e264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e266:	4b20      	ldr	r3, [pc, #128]	@ (800e2e8 <HAL_RCC_ClockConfig+0x1c4>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f003 030f 	and.w	r3, r3, #15
 800e26e:	683a      	ldr	r2, [r7, #0]
 800e270:	429a      	cmp	r2, r3
 800e272:	d001      	beq.n	800e278 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800e274:	2301      	movs	r3, #1
 800e276:	e032      	b.n	800e2de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f003 0304 	and.w	r3, r3, #4
 800e280:	2b00      	cmp	r3, #0
 800e282:	d008      	beq.n	800e296 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e284:	4b19      	ldr	r3, [pc, #100]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	4916      	ldr	r1, [pc, #88]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e292:	4313      	orrs	r3, r2
 800e294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f003 0308 	and.w	r3, r3, #8
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d009      	beq.n	800e2b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800e2a2:	4b12      	ldr	r3, [pc, #72]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	691b      	ldr	r3, [r3, #16]
 800e2ae:	00db      	lsls	r3, r3, #3
 800e2b0:	490e      	ldr	r1, [pc, #56]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e2b6:	f000 f821 	bl	800e2fc <HAL_RCC_GetSysClockFreq>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	091b      	lsrs	r3, r3, #4
 800e2c2:	f003 030f 	and.w	r3, r3, #15
 800e2c6:	490a      	ldr	r1, [pc, #40]	@ (800e2f0 <HAL_RCC_ClockConfig+0x1cc>)
 800e2c8:	5ccb      	ldrb	r3, [r1, r3]
 800e2ca:	fa22 f303 	lsr.w	r3, r2, r3
 800e2ce:	4a09      	ldr	r2, [pc, #36]	@ (800e2f4 <HAL_RCC_ClockConfig+0x1d0>)
 800e2d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800e2d2:	4b09      	ldr	r3, [pc, #36]	@ (800e2f8 <HAL_RCC_ClockConfig+0x1d4>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fd f85a 	bl	800b390 <HAL_InitTick>

  return HAL_OK;
 800e2dc:	2300      	movs	r3, #0
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	40023c00 	.word	0x40023c00
 800e2ec:	40023800 	.word	0x40023800
 800e2f0:	08012030 	.word	0x08012030
 800e2f4:	200000d0 	.word	0x200000d0
 800e2f8:	200000d4 	.word	0x200000d4

0800e2fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e2fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e300:	b094      	sub	sp, #80	@ 0x50
 800e302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800e304:	2300      	movs	r3, #0
 800e306:	647b      	str	r3, [r7, #68]	@ 0x44
 800e308:	2300      	movs	r3, #0
 800e30a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e30c:	2300      	movs	r3, #0
 800e30e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800e310:	2300      	movs	r3, #0
 800e312:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e314:	4b79      	ldr	r3, [pc, #484]	@ (800e4fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e316:	689b      	ldr	r3, [r3, #8]
 800e318:	f003 030c 	and.w	r3, r3, #12
 800e31c:	2b08      	cmp	r3, #8
 800e31e:	d00d      	beq.n	800e33c <HAL_RCC_GetSysClockFreq+0x40>
 800e320:	2b08      	cmp	r3, #8
 800e322:	f200 80e1 	bhi.w	800e4e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e326:	2b00      	cmp	r3, #0
 800e328:	d002      	beq.n	800e330 <HAL_RCC_GetSysClockFreq+0x34>
 800e32a:	2b04      	cmp	r3, #4
 800e32c:	d003      	beq.n	800e336 <HAL_RCC_GetSysClockFreq+0x3a>
 800e32e:	e0db      	b.n	800e4e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e330:	4b73      	ldr	r3, [pc, #460]	@ (800e500 <HAL_RCC_GetSysClockFreq+0x204>)
 800e332:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e334:	e0db      	b.n	800e4ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e336:	4b73      	ldr	r3, [pc, #460]	@ (800e504 <HAL_RCC_GetSysClockFreq+0x208>)
 800e338:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e33a:	e0d8      	b.n	800e4ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e33c:	4b6f      	ldr	r3, [pc, #444]	@ (800e4fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e344:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800e346:	4b6d      	ldr	r3, [pc, #436]	@ (800e4fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d063      	beq.n	800e41a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e352:	4b6a      	ldr	r3, [pc, #424]	@ (800e4fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	099b      	lsrs	r3, r3, #6
 800e358:	2200      	movs	r2, #0
 800e35a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e35c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800e35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e364:	633b      	str	r3, [r7, #48]	@ 0x30
 800e366:	2300      	movs	r3, #0
 800e368:	637b      	str	r3, [r7, #52]	@ 0x34
 800e36a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e36e:	4622      	mov	r2, r4
 800e370:	462b      	mov	r3, r5
 800e372:	f04f 0000 	mov.w	r0, #0
 800e376:	f04f 0100 	mov.w	r1, #0
 800e37a:	0159      	lsls	r1, r3, #5
 800e37c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e380:	0150      	lsls	r0, r2, #5
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	4621      	mov	r1, r4
 800e388:	1a51      	subs	r1, r2, r1
 800e38a:	6139      	str	r1, [r7, #16]
 800e38c:	4629      	mov	r1, r5
 800e38e:	eb63 0301 	sbc.w	r3, r3, r1
 800e392:	617b      	str	r3, [r7, #20]
 800e394:	f04f 0200 	mov.w	r2, #0
 800e398:	f04f 0300 	mov.w	r3, #0
 800e39c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e3a0:	4659      	mov	r1, fp
 800e3a2:	018b      	lsls	r3, r1, #6
 800e3a4:	4651      	mov	r1, sl
 800e3a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e3aa:	4651      	mov	r1, sl
 800e3ac:	018a      	lsls	r2, r1, #6
 800e3ae:	4651      	mov	r1, sl
 800e3b0:	ebb2 0801 	subs.w	r8, r2, r1
 800e3b4:	4659      	mov	r1, fp
 800e3b6:	eb63 0901 	sbc.w	r9, r3, r1
 800e3ba:	f04f 0200 	mov.w	r2, #0
 800e3be:	f04f 0300 	mov.w	r3, #0
 800e3c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e3c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e3ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e3ce:	4690      	mov	r8, r2
 800e3d0:	4699      	mov	r9, r3
 800e3d2:	4623      	mov	r3, r4
 800e3d4:	eb18 0303 	adds.w	r3, r8, r3
 800e3d8:	60bb      	str	r3, [r7, #8]
 800e3da:	462b      	mov	r3, r5
 800e3dc:	eb49 0303 	adc.w	r3, r9, r3
 800e3e0:	60fb      	str	r3, [r7, #12]
 800e3e2:	f04f 0200 	mov.w	r2, #0
 800e3e6:	f04f 0300 	mov.w	r3, #0
 800e3ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	024b      	lsls	r3, r1, #9
 800e3f2:	4621      	mov	r1, r4
 800e3f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e3f8:	4621      	mov	r1, r4
 800e3fa:	024a      	lsls	r2, r1, #9
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	4619      	mov	r1, r3
 800e400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e402:	2200      	movs	r2, #0
 800e404:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e406:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e40c:	f7f1 ff14 	bl	8000238 <__aeabi_uldivmod>
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	4613      	mov	r3, r2
 800e416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e418:	e058      	b.n	800e4cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e41a:	4b38      	ldr	r3, [pc, #224]	@ (800e4fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	099b      	lsrs	r3, r3, #6
 800e420:	2200      	movs	r2, #0
 800e422:	4618      	mov	r0, r3
 800e424:	4611      	mov	r1, r2
 800e426:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e42a:	623b      	str	r3, [r7, #32]
 800e42c:	2300      	movs	r3, #0
 800e42e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e430:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e434:	4642      	mov	r2, r8
 800e436:	464b      	mov	r3, r9
 800e438:	f04f 0000 	mov.w	r0, #0
 800e43c:	f04f 0100 	mov.w	r1, #0
 800e440:	0159      	lsls	r1, r3, #5
 800e442:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e446:	0150      	lsls	r0, r2, #5
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	4641      	mov	r1, r8
 800e44e:	ebb2 0a01 	subs.w	sl, r2, r1
 800e452:	4649      	mov	r1, r9
 800e454:	eb63 0b01 	sbc.w	fp, r3, r1
 800e458:	f04f 0200 	mov.w	r2, #0
 800e45c:	f04f 0300 	mov.w	r3, #0
 800e460:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e464:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e468:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e46c:	ebb2 040a 	subs.w	r4, r2, sl
 800e470:	eb63 050b 	sbc.w	r5, r3, fp
 800e474:	f04f 0200 	mov.w	r2, #0
 800e478:	f04f 0300 	mov.w	r3, #0
 800e47c:	00eb      	lsls	r3, r5, #3
 800e47e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e482:	00e2      	lsls	r2, r4, #3
 800e484:	4614      	mov	r4, r2
 800e486:	461d      	mov	r5, r3
 800e488:	4643      	mov	r3, r8
 800e48a:	18e3      	adds	r3, r4, r3
 800e48c:	603b      	str	r3, [r7, #0]
 800e48e:	464b      	mov	r3, r9
 800e490:	eb45 0303 	adc.w	r3, r5, r3
 800e494:	607b      	str	r3, [r7, #4]
 800e496:	f04f 0200 	mov.w	r2, #0
 800e49a:	f04f 0300 	mov.w	r3, #0
 800e49e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	028b      	lsls	r3, r1, #10
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e4ac:	4621      	mov	r1, r4
 800e4ae:	028a      	lsls	r2, r1, #10
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	61bb      	str	r3, [r7, #24]
 800e4ba:	61fa      	str	r2, [r7, #28]
 800e4bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e4c0:	f7f1 feba 	bl	8000238 <__aeabi_uldivmod>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800e4cc:	4b0b      	ldr	r3, [pc, #44]	@ (800e4fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	0c1b      	lsrs	r3, r3, #16
 800e4d2:	f003 0303 	and.w	r3, r3, #3
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800e4dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e4de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e4e6:	e002      	b.n	800e4ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e4e8:	4b05      	ldr	r3, [pc, #20]	@ (800e500 <HAL_RCC_GetSysClockFreq+0x204>)
 800e4ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e4ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e4ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3750      	adds	r7, #80	@ 0x50
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4fa:	bf00      	nop
 800e4fc:	40023800 	.word	0x40023800
 800e500:	00f42400 	.word	0x00f42400
 800e504:	007a1200 	.word	0x007a1200

0800e508 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e508:	b480      	push	{r7}
 800e50a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e50c:	4b03      	ldr	r3, [pc, #12]	@ (800e51c <HAL_RCC_GetHCLKFreq+0x14>)
 800e50e:	681b      	ldr	r3, [r3, #0]
}
 800e510:	4618      	mov	r0, r3
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop
 800e51c:	200000d0 	.word	0x200000d0

0800e520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e524:	f7ff fff0 	bl	800e508 <HAL_RCC_GetHCLKFreq>
 800e528:	4602      	mov	r2, r0
 800e52a:	4b05      	ldr	r3, [pc, #20]	@ (800e540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e52c:	689b      	ldr	r3, [r3, #8]
 800e52e:	0a9b      	lsrs	r3, r3, #10
 800e530:	f003 0307 	and.w	r3, r3, #7
 800e534:	4903      	ldr	r1, [pc, #12]	@ (800e544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e536:	5ccb      	ldrb	r3, [r1, r3]
 800e538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	40023800 	.word	0x40023800
 800e544:	08012040 	.word	0x08012040

0800e548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e54c:	f7ff ffdc 	bl	800e508 <HAL_RCC_GetHCLKFreq>
 800e550:	4602      	mov	r2, r0
 800e552:	4b05      	ldr	r3, [pc, #20]	@ (800e568 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	0b5b      	lsrs	r3, r3, #13
 800e558:	f003 0307 	and.w	r3, r3, #7
 800e55c:	4903      	ldr	r1, [pc, #12]	@ (800e56c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e55e:	5ccb      	ldrb	r3, [r1, r3]
 800e560:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e564:	4618      	mov	r0, r3
 800e566:	bd80      	pop	{r7, pc}
 800e568:	40023800 	.word	0x40023800
 800e56c:	08012040 	.word	0x08012040

0800e570 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	220f      	movs	r2, #15
 800e57e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e580:	4b12      	ldr	r3, [pc, #72]	@ (800e5cc <HAL_RCC_GetClockConfig+0x5c>)
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	f003 0203 	and.w	r2, r3, #3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e58c:	4b0f      	ldr	r3, [pc, #60]	@ (800e5cc <HAL_RCC_GetClockConfig+0x5c>)
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e598:	4b0c      	ldr	r3, [pc, #48]	@ (800e5cc <HAL_RCC_GetClockConfig+0x5c>)
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e5a4:	4b09      	ldr	r3, [pc, #36]	@ (800e5cc <HAL_RCC_GetClockConfig+0x5c>)
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	08db      	lsrs	r3, r3, #3
 800e5aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e5b2:	4b07      	ldr	r3, [pc, #28]	@ (800e5d0 <HAL_RCC_GetClockConfig+0x60>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f003 020f 	and.w	r2, r3, #15
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	601a      	str	r2, [r3, #0]
}
 800e5be:	bf00      	nop
 800e5c0:	370c      	adds	r7, #12
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop
 800e5cc:	40023800 	.word	0x40023800
 800e5d0:	40023c00 	.word	0x40023c00

0800e5d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b088      	sub	sp, #32
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f003 0301 	and.w	r3, r3, #1
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d012      	beq.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e5fc:	4b69      	ldr	r3, [pc, #420]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	4a68      	ldr	r2, [pc, #416]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e602:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e606:	6093      	str	r3, [r2, #8]
 800e608:	4b66      	ldr	r3, [pc, #408]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e60a:	689a      	ldr	r2, [r3, #8]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e610:	4964      	ldr	r1, [pc, #400]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e612:	4313      	orrs	r3, r2
 800e614:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d101      	bne.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e61e:	2301      	movs	r3, #1
 800e620:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d017      	beq.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e62e:	4b5d      	ldr	r3, [pc, #372]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e634:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e63c:	4959      	ldr	r1, [pc, #356]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e63e:	4313      	orrs	r3, r2
 800e640:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e648:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e64c:	d101      	bne.n	800e652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e64e:	2301      	movs	r3, #1
 800e650:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e656:	2b00      	cmp	r3, #0
 800e658:	d101      	bne.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e65a:	2301      	movs	r3, #1
 800e65c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e666:	2b00      	cmp	r3, #0
 800e668:	d017      	beq.n	800e69a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e66a:	4b4e      	ldr	r3, [pc, #312]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e66c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e670:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e678:	494a      	ldr	r1, [pc, #296]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e67a:	4313      	orrs	r3, r2
 800e67c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e688:	d101      	bne.n	800e68e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e68a:	2301      	movs	r3, #1
 800e68c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e692:	2b00      	cmp	r3, #0
 800e694:	d101      	bne.n	800e69a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e696:	2301      	movs	r3, #1
 800e698:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d001      	beq.n	800e6aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f003 0320 	and.w	r3, r3, #32
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f000 808b 	beq.w	800e7ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e6b8:	4b3a      	ldr	r3, [pc, #232]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e6ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6bc:	4a39      	ldr	r2, [pc, #228]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e6be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e6c2:	6413      	str	r3, [r2, #64]	@ 0x40
 800e6c4:	4b37      	ldr	r3, [pc, #220]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e6c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e6cc:	60bb      	str	r3, [r7, #8]
 800e6ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e6d0:	4b35      	ldr	r3, [pc, #212]	@ (800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a34      	ldr	r2, [pc, #208]	@ (800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e6d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e6da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6dc:	f7fc ffe0 	bl	800b6a0 <HAL_GetTick>
 800e6e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e6e2:	e008      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e6e4:	f7fc ffdc 	bl	800b6a0 <HAL_GetTick>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	1ad3      	subs	r3, r2, r3
 800e6ee:	2b64      	cmp	r3, #100	@ 0x64
 800e6f0:	d901      	bls.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e6f2:	2303      	movs	r3, #3
 800e6f4:	e38f      	b.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e6f6:	4b2c      	ldr	r3, [pc, #176]	@ (800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d0f0      	beq.n	800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e702:	4b28      	ldr	r3, [pc, #160]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e70a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d035      	beq.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e71a:	693a      	ldr	r2, [r7, #16]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d02e      	beq.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e720:	4b20      	ldr	r3, [pc, #128]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e728:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e72a:	4b1e      	ldr	r3, [pc, #120]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e72c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e72e:	4a1d      	ldr	r2, [pc, #116]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e734:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e736:	4b1b      	ldr	r3, [pc, #108]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e73a:	4a1a      	ldr	r2, [pc, #104]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e73c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e740:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e742:	4a18      	ldr	r2, [pc, #96]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e748:	4b16      	ldr	r3, [pc, #88]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e74a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	2b01      	cmp	r3, #1
 800e752:	d114      	bne.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e754:	f7fc ffa4 	bl	800b6a0 <HAL_GetTick>
 800e758:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e75a:	e00a      	b.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e75c:	f7fc ffa0 	bl	800b6a0 <HAL_GetTick>
 800e760:	4602      	mov	r2, r0
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d901      	bls.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e76e:	2303      	movs	r3, #3
 800e770:	e351      	b.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e772:	4b0c      	ldr	r3, [pc, #48]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e776:	f003 0302 	and.w	r3, r3, #2
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d0ee      	beq.n	800e75c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e78a:	d111      	bne.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e78c:	4b05      	ldr	r3, [pc, #20]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800e798:	4b04      	ldr	r3, [pc, #16]	@ (800e7ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e79a:	400b      	ands	r3, r1
 800e79c:	4901      	ldr	r1, [pc, #4]	@ (800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	608b      	str	r3, [r1, #8]
 800e7a2:	e00b      	b.n	800e7bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e7a4:	40023800 	.word	0x40023800
 800e7a8:	40007000 	.word	0x40007000
 800e7ac:	0ffffcff 	.word	0x0ffffcff
 800e7b0:	4bac      	ldr	r3, [pc, #688]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	4aab      	ldr	r2, [pc, #684]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e7b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800e7ba:	6093      	str	r3, [r2, #8]
 800e7bc:	4ba9      	ldr	r3, [pc, #676]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e7be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7c8:	49a6      	ldr	r1, [pc, #664]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f003 0310 	and.w	r3, r3, #16
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d010      	beq.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e7da:	4ba2      	ldr	r3, [pc, #648]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e7dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7e0:	4aa0      	ldr	r2, [pc, #640]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e7e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e7e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800e7ea:	4b9e      	ldr	r3, [pc, #632]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e7ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7f4:	499b      	ldr	r1, [pc, #620]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00a      	beq.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e808:	4b96      	ldr	r3, [pc, #600]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e80e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e816:	4993      	ldr	r1, [pc, #588]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e818:	4313      	orrs	r3, r2
 800e81a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e826:	2b00      	cmp	r3, #0
 800e828:	d00a      	beq.n	800e840 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e82a:	4b8e      	ldr	r3, [pc, #568]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e82c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e830:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e838:	498a      	ldr	r1, [pc, #552]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e83a:	4313      	orrs	r3, r2
 800e83c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d00a      	beq.n	800e862 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e84c:	4b85      	ldr	r3, [pc, #532]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e852:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e85a:	4982      	ldr	r1, [pc, #520]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e85c:	4313      	orrs	r3, r2
 800e85e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00a      	beq.n	800e884 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e86e:	4b7d      	ldr	r3, [pc, #500]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e874:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e87c:	4979      	ldr	r1, [pc, #484]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e87e:	4313      	orrs	r3, r2
 800e880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d00a      	beq.n	800e8a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e890:	4b74      	ldr	r3, [pc, #464]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e896:	f023 0203 	bic.w	r2, r3, #3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e89e:	4971      	ldr	r1, [pc, #452]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d00a      	beq.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e8b2:	4b6c      	ldr	r3, [pc, #432]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8b8:	f023 020c 	bic.w	r2, r3, #12
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8c0:	4968      	ldr	r1, [pc, #416]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00a      	beq.n	800e8ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e8d4:	4b63      	ldr	r3, [pc, #396]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8e2:	4960      	ldr	r1, [pc, #384]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d00a      	beq.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e8f6:	4b5b      	ldr	r3, [pc, #364]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8fc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e904:	4957      	ldr	r1, [pc, #348]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e906:	4313      	orrs	r3, r2
 800e908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00a      	beq.n	800e92e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e918:	4b52      	ldr	r3, [pc, #328]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e91a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e91e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e926:	494f      	ldr	r1, [pc, #316]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e928:	4313      	orrs	r3, r2
 800e92a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00a      	beq.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e93a:	4b4a      	ldr	r3, [pc, #296]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e93c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e940:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e948:	4946      	ldr	r1, [pc, #280]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e94a:	4313      	orrs	r3, r2
 800e94c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d00a      	beq.n	800e972 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e95c:	4b41      	ldr	r3, [pc, #260]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e962:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e96a:	493e      	ldr	r1, [pc, #248]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e96c:	4313      	orrs	r3, r2
 800e96e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00a      	beq.n	800e994 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e97e:	4b39      	ldr	r3, [pc, #228]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e984:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e98c:	4935      	ldr	r1, [pc, #212]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e98e:	4313      	orrs	r3, r2
 800e990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d00a      	beq.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e9a0:	4b30      	ldr	r3, [pc, #192]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e9ae:	492d      	ldr	r1, [pc, #180]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d011      	beq.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e9c2:	4b28      	ldr	r3, [pc, #160]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9c8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9d0:	4924      	ldr	r1, [pc, #144]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e9e0:	d101      	bne.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f003 0308 	and.w	r3, r3, #8
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00a      	beq.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ea02:	4b18      	ldr	r3, [pc, #96]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ea04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea08:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea10:	4914      	ldr	r1, [pc, #80]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ea12:	4313      	orrs	r3, r2
 800ea14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00b      	beq.n	800ea3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ea24:	4b0f      	ldr	r3, [pc, #60]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ea26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea2a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea34:	490b      	ldr	r1, [pc, #44]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ea36:	4313      	orrs	r3, r2
 800ea38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00f      	beq.n	800ea68 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800ea48:	4b06      	ldr	r3, [pc, #24]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ea4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea4e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea58:	4902      	ldr	r1, [pc, #8]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800ea60:	e002      	b.n	800ea68 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800ea62:	bf00      	nop
 800ea64:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00b      	beq.n	800ea8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ea74:	4b8a      	ldr	r3, [pc, #552]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ea76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea7a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea84:	4986      	ldr	r1, [pc, #536]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ea86:	4313      	orrs	r3, r2
 800ea88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00b      	beq.n	800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800ea98:	4b81      	ldr	r3, [pc, #516]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ea9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea9e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eaa8:	497d      	ldr	r1, [pc, #500]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d006      	beq.n	800eac4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	f000 80d6 	beq.w	800ec70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800eac4:	4b76      	ldr	r3, [pc, #472]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4a75      	ldr	r2, [pc, #468]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800eaca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ead0:	f7fc fde6 	bl	800b6a0 <HAL_GetTick>
 800ead4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ead6:	e008      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ead8:	f7fc fde2 	bl	800b6a0 <HAL_GetTick>
 800eadc:	4602      	mov	r2, r0
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	2b64      	cmp	r3, #100	@ 0x64
 800eae4:	d901      	bls.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800eae6:	2303      	movs	r3, #3
 800eae8:	e195      	b.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800eaea:	4b6d      	ldr	r3, [pc, #436]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1f0      	bne.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f003 0301 	and.w	r3, r3, #1
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d021      	beq.n	800eb46 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d11d      	bne.n	800eb46 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800eb0a:	4b65      	ldr	r3, [pc, #404]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800eb0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb10:	0c1b      	lsrs	r3, r3, #16
 800eb12:	f003 0303 	and.w	r3, r3, #3
 800eb16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800eb18:	4b61      	ldr	r3, [pc, #388]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800eb1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb1e:	0e1b      	lsrs	r3, r3, #24
 800eb20:	f003 030f 	and.w	r3, r3, #15
 800eb24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	019a      	lsls	r2, r3, #6
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	041b      	lsls	r3, r3, #16
 800eb30:	431a      	orrs	r2, r3
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	061b      	lsls	r3, r3, #24
 800eb36:	431a      	orrs	r2, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	071b      	lsls	r3, r3, #28
 800eb3e:	4958      	ldr	r1, [pc, #352]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800eb40:	4313      	orrs	r3, r2
 800eb42:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d004      	beq.n	800eb5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb5a:	d00a      	beq.n	800eb72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d02e      	beq.n	800ebc6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eb70:	d129      	bne.n	800ebc6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800eb72:	4b4b      	ldr	r3, [pc, #300]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800eb74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb78:	0c1b      	lsrs	r3, r3, #16
 800eb7a:	f003 0303 	and.w	r3, r3, #3
 800eb7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800eb80:	4b47      	ldr	r3, [pc, #284]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800eb82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb86:	0f1b      	lsrs	r3, r3, #28
 800eb88:	f003 0307 	and.w	r3, r3, #7
 800eb8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	019a      	lsls	r2, r3, #6
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	041b      	lsls	r3, r3, #16
 800eb98:	431a      	orrs	r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	061b      	lsls	r3, r3, #24
 800eba0:	431a      	orrs	r2, r3
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	071b      	lsls	r3, r3, #28
 800eba6:	493e      	ldr	r1, [pc, #248]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ebae:	4b3c      	ldr	r3, [pc, #240]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ebb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ebb4:	f023 021f 	bic.w	r2, r3, #31
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	4938      	ldr	r1, [pc, #224]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d01d      	beq.n	800ec0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ebd2:	4b33      	ldr	r3, [pc, #204]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ebd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebd8:	0e1b      	lsrs	r3, r3, #24
 800ebda:	f003 030f 	and.w	r3, r3, #15
 800ebde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ebe0:	4b2f      	ldr	r3, [pc, #188]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ebe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebe6:	0f1b      	lsrs	r3, r3, #28
 800ebe8:	f003 0307 	and.w	r3, r3, #7
 800ebec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	019a      	lsls	r2, r3, #6
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	691b      	ldr	r3, [r3, #16]
 800ebf8:	041b      	lsls	r3, r3, #16
 800ebfa:	431a      	orrs	r2, r3
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	061b      	lsls	r3, r3, #24
 800ec00:	431a      	orrs	r2, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	071b      	lsls	r3, r3, #28
 800ec06:	4926      	ldr	r1, [pc, #152]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d011      	beq.n	800ec3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	019a      	lsls	r2, r3, #6
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	691b      	ldr	r3, [r3, #16]
 800ec24:	041b      	lsls	r3, r3, #16
 800ec26:	431a      	orrs	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	061b      	lsls	r3, r3, #24
 800ec2e:	431a      	orrs	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	071b      	lsls	r3, r3, #28
 800ec36:	491a      	ldr	r1, [pc, #104]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ec3e:	4b18      	ldr	r3, [pc, #96]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4a17      	ldr	r2, [pc, #92]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ec44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ec48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec4a:	f7fc fd29 	bl	800b6a0 <HAL_GetTick>
 800ec4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ec50:	e008      	b.n	800ec64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ec52:	f7fc fd25 	bl	800b6a0 <HAL_GetTick>
 800ec56:	4602      	mov	r2, r0
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	2b64      	cmp	r3, #100	@ 0x64
 800ec5e:	d901      	bls.n	800ec64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ec60:	2303      	movs	r3, #3
 800ec62:	e0d8      	b.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ec64:	4b0e      	ldr	r3, [pc, #56]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d0f0      	beq.n	800ec52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	f040 80ce 	bne.w	800ee14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ec78:	4b09      	ldr	r3, [pc, #36]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4a08      	ldr	r2, [pc, #32]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ec7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec84:	f7fc fd0c 	bl	800b6a0 <HAL_GetTick>
 800ec88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ec8a:	e00b      	b.n	800eca4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ec8c:	f7fc fd08 	bl	800b6a0 <HAL_GetTick>
 800ec90:	4602      	mov	r2, r0
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	2b64      	cmp	r3, #100	@ 0x64
 800ec98:	d904      	bls.n	800eca4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ec9a:	2303      	movs	r3, #3
 800ec9c:	e0bb      	b.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ec9e:	bf00      	nop
 800eca0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800eca4:	4b5e      	ldr	r3, [pc, #376]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ecac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ecb0:	d0ec      	beq.n	800ec8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d003      	beq.n	800ecc6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d009      	beq.n	800ecda <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d02e      	beq.n	800ed30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d12a      	bne.n	800ed30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ecda:	4b51      	ldr	r3, [pc, #324]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ecdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ece0:	0c1b      	lsrs	r3, r3, #16
 800ece2:	f003 0303 	and.w	r3, r3, #3
 800ece6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ece8:	4b4d      	ldr	r3, [pc, #308]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ecea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ecee:	0f1b      	lsrs	r3, r3, #28
 800ecf0:	f003 0307 	and.w	r3, r3, #7
 800ecf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	695b      	ldr	r3, [r3, #20]
 800ecfa:	019a      	lsls	r2, r3, #6
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	041b      	lsls	r3, r3, #16
 800ed00:	431a      	orrs	r2, r3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	699b      	ldr	r3, [r3, #24]
 800ed06:	061b      	lsls	r3, r3, #24
 800ed08:	431a      	orrs	r2, r3
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	071b      	lsls	r3, r3, #28
 800ed0e:	4944      	ldr	r1, [pc, #272]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ed10:	4313      	orrs	r3, r2
 800ed12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ed16:	4b42      	ldr	r3, [pc, #264]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ed18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed1c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed24:	3b01      	subs	r3, #1
 800ed26:	021b      	lsls	r3, r3, #8
 800ed28:	493d      	ldr	r1, [pc, #244]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d022      	beq.n	800ed82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed44:	d11d      	bne.n	800ed82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ed46:	4b36      	ldr	r3, [pc, #216]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ed48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed4c:	0e1b      	lsrs	r3, r3, #24
 800ed4e:	f003 030f 	and.w	r3, r3, #15
 800ed52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ed54:	4b32      	ldr	r3, [pc, #200]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ed56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed5a:	0f1b      	lsrs	r3, r3, #28
 800ed5c:	f003 0307 	and.w	r3, r3, #7
 800ed60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	695b      	ldr	r3, [r3, #20]
 800ed66:	019a      	lsls	r2, r3, #6
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6a1b      	ldr	r3, [r3, #32]
 800ed6c:	041b      	lsls	r3, r3, #16
 800ed6e:	431a      	orrs	r2, r3
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	061b      	lsls	r3, r3, #24
 800ed74:	431a      	orrs	r2, r3
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	071b      	lsls	r3, r3, #28
 800ed7a:	4929      	ldr	r1, [pc, #164]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f003 0308 	and.w	r3, r3, #8
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d028      	beq.n	800ede0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ed8e:	4b24      	ldr	r3, [pc, #144]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ed90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed94:	0e1b      	lsrs	r3, r3, #24
 800ed96:	f003 030f 	and.w	r3, r3, #15
 800ed9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ed9c:	4b20      	ldr	r3, [pc, #128]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ed9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eda2:	0c1b      	lsrs	r3, r3, #16
 800eda4:	f003 0303 	and.w	r3, r3, #3
 800eda8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	695b      	ldr	r3, [r3, #20]
 800edae:	019a      	lsls	r2, r3, #6
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	041b      	lsls	r3, r3, #16
 800edb4:	431a      	orrs	r2, r3
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	061b      	lsls	r3, r3, #24
 800edba:	431a      	orrs	r2, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	69db      	ldr	r3, [r3, #28]
 800edc0:	071b      	lsls	r3, r3, #28
 800edc2:	4917      	ldr	r1, [pc, #92]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800edc4:	4313      	orrs	r3, r2
 800edc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800edca:	4b15      	ldr	r3, [pc, #84]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800edcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800edd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edd8:	4911      	ldr	r1, [pc, #68]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800edda:	4313      	orrs	r3, r2
 800eddc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ede0:	4b0f      	ldr	r3, [pc, #60]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4a0e      	ldr	r2, [pc, #56]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ede6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800edea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800edec:	f7fc fc58 	bl	800b6a0 <HAL_GetTick>
 800edf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800edf2:	e008      	b.n	800ee06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800edf4:	f7fc fc54 	bl	800b6a0 <HAL_GetTick>
 800edf8:	4602      	mov	r2, r0
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	1ad3      	subs	r3, r2, r3
 800edfe:	2b64      	cmp	r3, #100	@ 0x64
 800ee00:	d901      	bls.n	800ee06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ee02:	2303      	movs	r3, #3
 800ee04:	e007      	b.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ee06:	4b06      	ldr	r3, [pc, #24]	@ (800ee20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee12:	d1ef      	bne.n	800edf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3720      	adds	r7, #32
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	40023800 	.word	0x40023800

0800ee24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d101      	bne.n	800ee36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee32:	2301      	movs	r3, #1
 800ee34:	e09d      	b.n	800ef72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d108      	bne.n	800ee50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ee46:	d009      	beq.n	800ee5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	61da      	str	r2, [r3, #28]
 800ee4e:	e005      	b.n	800ee5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d106      	bne.n	800ee7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f7fb ffa0 	bl	800adbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2202      	movs	r2, #2
 800ee80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ee92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ee9c:	d902      	bls.n	800eea4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	60fb      	str	r3, [r7, #12]
 800eea2:	e002      	b.n	800eeaa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800eea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eea8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800eeb2:	d007      	beq.n	800eec4 <HAL_SPI_Init+0xa0>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68db      	ldr	r3, [r3, #12]
 800eeb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800eebc:	d002      	beq.n	800eec4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2200      	movs	r2, #0
 800eec2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800eed4:	431a      	orrs	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	691b      	ldr	r3, [r3, #16]
 800eeda:	f003 0302 	and.w	r3, r3, #2
 800eede:	431a      	orrs	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	695b      	ldr	r3, [r3, #20]
 800eee4:	f003 0301 	and.w	r3, r3, #1
 800eee8:	431a      	orrs	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eef2:	431a      	orrs	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	69db      	ldr	r3, [r3, #28]
 800eef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eefc:	431a      	orrs	r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6a1b      	ldr	r3, [r3, #32]
 800ef02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef06:	ea42 0103 	orr.w	r1, r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	430a      	orrs	r2, r1
 800ef18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	699b      	ldr	r3, [r3, #24]
 800ef1e:	0c1b      	lsrs	r3, r3, #16
 800ef20:	f003 0204 	and.w	r2, r3, #4
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef28:	f003 0310 	and.w	r3, r3, #16
 800ef2c:	431a      	orrs	r2, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef32:	f003 0308 	and.w	r3, r3, #8
 800ef36:	431a      	orrs	r2, r3
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ef40:	ea42 0103 	orr.w	r1, r2, r3
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	430a      	orrs	r2, r1
 800ef50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	69da      	ldr	r2, [r3, #28]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ef60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2200      	movs	r2, #0
 800ef66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b08a      	sub	sp, #40	@ 0x28
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	60f8      	str	r0, [r7, #12]
 800ef82:	60b9      	str	r1, [r7, #8]
 800ef84:	607a      	str	r2, [r7, #4]
 800ef86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d101      	bne.n	800efa0 <HAL_SPI_TransmitReceive+0x26>
 800ef9c:	2302      	movs	r3, #2
 800ef9e:	e1fb      	b.n	800f398 <HAL_SPI_TransmitReceive+0x41e>
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2201      	movs	r2, #1
 800efa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efa8:	f7fc fb7a 	bl	800b6a0 <HAL_GetTick>
 800efac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800efb4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800efbc:	887b      	ldrh	r3, [r7, #2]
 800efbe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800efc0:	887b      	ldrh	r3, [r7, #2]
 800efc2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800efc4:	7efb      	ldrb	r3, [r7, #27]
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d00e      	beq.n	800efe8 <HAL_SPI_TransmitReceive+0x6e>
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800efd0:	d106      	bne.n	800efe0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	689b      	ldr	r3, [r3, #8]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d102      	bne.n	800efe0 <HAL_SPI_TransmitReceive+0x66>
 800efda:	7efb      	ldrb	r3, [r7, #27]
 800efdc:	2b04      	cmp	r3, #4
 800efde:	d003      	beq.n	800efe8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800efe0:	2302      	movs	r3, #2
 800efe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800efe6:	e1cd      	b.n	800f384 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d005      	beq.n	800effa <HAL_SPI_TransmitReceive+0x80>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d002      	beq.n	800effa <HAL_SPI_TransmitReceive+0x80>
 800eff4:	887b      	ldrh	r3, [r7, #2]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d103      	bne.n	800f002 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800effa:	2301      	movs	r3, #1
 800effc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800f000:	e1c0      	b.n	800f384 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f008:	b2db      	uxtb	r3, r3
 800f00a:	2b04      	cmp	r3, #4
 800f00c:	d003      	beq.n	800f016 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2205      	movs	r2, #5
 800f012:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2200      	movs	r2, #0
 800f01a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	887a      	ldrh	r2, [r7, #2]
 800f026:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	887a      	ldrh	r2, [r7, #2]
 800f02e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	887a      	ldrh	r2, [r7, #2]
 800f03c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	887a      	ldrh	r2, [r7, #2]
 800f042:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2200      	movs	r2, #0
 800f048:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2200      	movs	r2, #0
 800f04e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	68db      	ldr	r3, [r3, #12]
 800f054:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f058:	d802      	bhi.n	800f060 <HAL_SPI_TransmitReceive+0xe6>
 800f05a:	8a3b      	ldrh	r3, [r7, #16]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d908      	bls.n	800f072 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	685a      	ldr	r2, [r3, #4]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f06e:	605a      	str	r2, [r3, #4]
 800f070:	e007      	b.n	800f082 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	685a      	ldr	r2, [r3, #4]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f080:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f08c:	2b40      	cmp	r3, #64	@ 0x40
 800f08e:	d007      	beq.n	800f0a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f09e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f0a8:	d97c      	bls.n	800f1a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d002      	beq.n	800f0b8 <HAL_SPI_TransmitReceive+0x13e>
 800f0b2:	8a7b      	ldrh	r3, [r7, #18]
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	d169      	bne.n	800f18c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0bc:	881a      	ldrh	r2, [r3, #0]
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0c8:	1c9a      	adds	r2, r3, #2
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f0dc:	e056      	b.n	800f18c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	689b      	ldr	r3, [r3, #8]
 800f0e4:	f003 0302 	and.w	r3, r3, #2
 800f0e8:	2b02      	cmp	r3, #2
 800f0ea:	d11b      	bne.n	800f124 <HAL_SPI_TransmitReceive+0x1aa>
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d016      	beq.n	800f124 <HAL_SPI_TransmitReceive+0x1aa>
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d113      	bne.n	800f124 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f100:	881a      	ldrh	r2, [r3, #0]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f10c:	1c9a      	adds	r2, r3, #2
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f116:	b29b      	uxth	r3, r3
 800f118:	3b01      	subs	r3, #1
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f120:	2300      	movs	r3, #0
 800f122:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	2b01      	cmp	r3, #1
 800f130:	d11c      	bne.n	800f16c <HAL_SPI_TransmitReceive+0x1f2>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f138:	b29b      	uxth	r3, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d016      	beq.n	800f16c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	68da      	ldr	r2, [r3, #12]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f148:	b292      	uxth	r2, r2
 800f14a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f150:	1c9a      	adds	r2, r3, #2
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	3b01      	subs	r3, #1
 800f160:	b29a      	uxth	r2, r3
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f168:	2301      	movs	r3, #1
 800f16a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f16c:	f7fc fa98 	bl	800b6a0 <HAL_GetTick>
 800f170:	4602      	mov	r2, r0
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	1ad3      	subs	r3, r2, r3
 800f176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f178:	429a      	cmp	r2, r3
 800f17a:	d807      	bhi.n	800f18c <HAL_SPI_TransmitReceive+0x212>
 800f17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f182:	d003      	beq.n	800f18c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800f184:	2303      	movs	r3, #3
 800f186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800f18a:	e0fb      	b.n	800f384 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f190:	b29b      	uxth	r3, r3
 800f192:	2b00      	cmp	r3, #0
 800f194:	d1a3      	bne.n	800f0de <HAL_SPI_TransmitReceive+0x164>
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d19d      	bne.n	800f0de <HAL_SPI_TransmitReceive+0x164>
 800f1a2:	e0df      	b.n	800f364 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d003      	beq.n	800f1b4 <HAL_SPI_TransmitReceive+0x23a>
 800f1ac:	8a7b      	ldrh	r3, [r7, #18]
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	f040 80cb 	bne.w	800f34a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d912      	bls.n	800f1e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1c2:	881a      	ldrh	r2, [r3, #0]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1ce:	1c9a      	adds	r2, r3, #2
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	3b02      	subs	r3, #2
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f1e2:	e0b2      	b.n	800f34a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	330c      	adds	r3, #12
 800f1ee:	7812      	ldrb	r2, [r2, #0]
 800f1f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1f6:	1c5a      	adds	r2, r3, #1
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f200:	b29b      	uxth	r3, r3
 800f202:	3b01      	subs	r3, #1
 800f204:	b29a      	uxth	r2, r3
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f20a:	e09e      	b.n	800f34a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	689b      	ldr	r3, [r3, #8]
 800f212:	f003 0302 	and.w	r3, r3, #2
 800f216:	2b02      	cmp	r3, #2
 800f218:	d134      	bne.n	800f284 <HAL_SPI_TransmitReceive+0x30a>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f21e:	b29b      	uxth	r3, r3
 800f220:	2b00      	cmp	r3, #0
 800f222:	d02f      	beq.n	800f284 <HAL_SPI_TransmitReceive+0x30a>
 800f224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f226:	2b01      	cmp	r3, #1
 800f228:	d12c      	bne.n	800f284 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f22e:	b29b      	uxth	r3, r3
 800f230:	2b01      	cmp	r3, #1
 800f232:	d912      	bls.n	800f25a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f238:	881a      	ldrh	r2, [r3, #0]
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f244:	1c9a      	adds	r2, r3, #2
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f24e:	b29b      	uxth	r3, r3
 800f250:	3b02      	subs	r3, #2
 800f252:	b29a      	uxth	r2, r3
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f258:	e012      	b.n	800f280 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	330c      	adds	r3, #12
 800f264:	7812      	ldrb	r2, [r2, #0]
 800f266:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f26c:	1c5a      	adds	r2, r3, #1
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f276:	b29b      	uxth	r3, r3
 800f278:	3b01      	subs	r3, #1
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f280:	2300      	movs	r3, #0
 800f282:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	f003 0301 	and.w	r3, r3, #1
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d148      	bne.n	800f324 <HAL_SPI_TransmitReceive+0x3aa>
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f298:	b29b      	uxth	r3, r3
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d042      	beq.n	800f324 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d923      	bls.n	800f2f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68da      	ldr	r2, [r3, #12]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2b4:	b292      	uxth	r2, r2
 800f2b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2bc:	1c9a      	adds	r2, r3, #2
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	3b02      	subs	r3, #2
 800f2cc:	b29a      	uxth	r2, r3
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d81f      	bhi.n	800f320 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	685a      	ldr	r2, [r3, #4]
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f2ee:	605a      	str	r2, [r3, #4]
 800f2f0:	e016      	b.n	800f320 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f103 020c 	add.w	r2, r3, #12
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2fe:	7812      	ldrb	r2, [r2, #0]
 800f300:	b2d2      	uxtb	r2, r2
 800f302:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f308:	1c5a      	adds	r2, r3, #1
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f314:	b29b      	uxth	r3, r3
 800f316:	3b01      	subs	r3, #1
 800f318:	b29a      	uxth	r2, r3
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f320:	2301      	movs	r3, #1
 800f322:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f324:	f7fc f9bc 	bl	800b6a0 <HAL_GetTick>
 800f328:	4602      	mov	r2, r0
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	1ad3      	subs	r3, r2, r3
 800f32e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f330:	429a      	cmp	r2, r3
 800f332:	d803      	bhi.n	800f33c <HAL_SPI_TransmitReceive+0x3c2>
 800f334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f33a:	d102      	bne.n	800f342 <HAL_SPI_TransmitReceive+0x3c8>
 800f33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d103      	bne.n	800f34a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800f342:	2303      	movs	r3, #3
 800f344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800f348:	e01c      	b.n	800f384 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f34e:	b29b      	uxth	r3, r3
 800f350:	2b00      	cmp	r3, #0
 800f352:	f47f af5b 	bne.w	800f20c <HAL_SPI_TransmitReceive+0x292>
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	2b00      	cmp	r3, #0
 800f360:	f47f af54 	bne.w	800f20c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f364:	69fa      	ldr	r2, [r7, #28]
 800f366:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f000 fbd9 	bl	800fb20 <SPI_EndRxTxTransaction>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d006      	beq.n	800f382 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800f374:	2301      	movs	r3, #1
 800f376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2220      	movs	r2, #32
 800f37e:	661a      	str	r2, [r3, #96]	@ 0x60
 800f380:	e000      	b.n	800f384 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800f382:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2201      	movs	r2, #1
 800f388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2200      	movs	r2, #0
 800f390:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800f394:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3728      	adds	r7, #40	@ 0x28
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}

0800f3a0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b086      	sub	sp, #24
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d101      	bne.n	800f3c0 <HAL_SPI_Transmit_DMA+0x20>
 800f3bc:	2302      	movs	r3, #2
 800f3be:	e0d8      	b.n	800f572 <HAL_SPI_Transmit_DMA+0x1d2>
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d002      	beq.n	800f3da <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800f3d4:	2302      	movs	r3, #2
 800f3d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f3d8:	e0c6      	b.n	800f568 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d002      	beq.n	800f3e6 <HAL_SPI_Transmit_DMA+0x46>
 800f3e0:	88fb      	ldrh	r3, [r7, #6]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d102      	bne.n	800f3ec <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f3ea:	e0bd      	b.n	800f568 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2203      	movs	r2, #3
 800f3f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	68ba      	ldr	r2, [r7, #8]
 800f3fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	88fa      	ldrh	r2, [r7, #6]
 800f404:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	88fa      	ldrh	r2, [r7, #6]
 800f40a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2200      	movs	r2, #0
 800f410:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2200      	movs	r2, #0
 800f416:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2200      	movs	r2, #0
 800f41c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2200      	movs	r2, #0
 800f422:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2200      	movs	r2, #0
 800f42a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	689b      	ldr	r3, [r3, #8]
 800f432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f436:	d10f      	bne.n	800f458 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f446:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f456:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f45c:	4a47      	ldr	r2, [pc, #284]	@ (800f57c <HAL_SPI_Transmit_DMA+0x1dc>)
 800f45e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f464:	4a46      	ldr	r2, [pc, #280]	@ (800f580 <HAL_SPI_Transmit_DMA+0x1e0>)
 800f466:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f46c:	4a45      	ldr	r2, [pc, #276]	@ (800f584 <HAL_SPI_Transmit_DMA+0x1e4>)
 800f46e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f474:	2200      	movs	r2, #0
 800f476:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	685a      	ldr	r2, [r3, #4]
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f486:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f490:	d82d      	bhi.n	800f4ee <HAL_SPI_Transmit_DMA+0x14e>
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f496:	699b      	ldr	r3, [r3, #24]
 800f498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f49c:	d127      	bne.n	800f4ee <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	f003 0301 	and.w	r3, r3, #1
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d10f      	bne.n	800f4cc <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	685a      	ldr	r2, [r3, #4]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f4ba:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	085b      	lsrs	r3, r3, #1
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f4ca:	e010      	b.n	800f4ee <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	685a      	ldr	r2, [r3, #4]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f4da:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	085b      	lsrs	r3, r3, #1
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	b29a      	uxth	r2, r3
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	330c      	adds	r3, #12
 800f4fe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f504:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f506:	f7fc fec7 	bl	800c298 <HAL_DMA_Start_IT>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00c      	beq.n	800f52a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f514:	f043 0210 	orr.w	r2, r3, #16
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800f51c:	2301      	movs	r3, #1
 800f51e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2201      	movs	r2, #1
 800f524:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 800f528:	e01e      	b.n	800f568 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f534:	2b40      	cmp	r3, #64	@ 0x40
 800f536:	d007      	beq.n	800f548 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f546:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	685a      	ldr	r2, [r3, #4]
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f042 0220 	orr.w	r2, r2, #32
 800f556:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	685a      	ldr	r2, [r3, #4]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f042 0202 	orr.w	r2, r2, #2
 800f566:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2200      	movs	r2, #0
 800f56c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800f570:	7dfb      	ldrb	r3, [r7, #23]
}
 800f572:	4618      	mov	r0, r3
 800f574:	3718      	adds	r7, #24
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	bf00      	nop
 800f57c:	0800f85d 	.word	0x0800f85d
 800f580:	0800f7b5 	.word	0x0800f7b5
 800f584:	0800f879 	.word	0x0800f879

0800f588 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b088      	sub	sp, #32
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d10e      	bne.n	800f5c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d009      	beq.n	800f5c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d004      	beq.n	800f5c8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	4798      	blx	r3
    return;
 800f5c6:	e0ce      	b.n	800f766 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	f003 0302 	and.w	r3, r3, #2
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d009      	beq.n	800f5e6 <HAL_SPI_IRQHandler+0x5e>
 800f5d2:	69fb      	ldr	r3, [r7, #28]
 800f5d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d004      	beq.n	800f5e6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	4798      	blx	r3
    return;
 800f5e4:	e0bf      	b.n	800f766 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	f003 0320 	and.w	r3, r3, #32
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d10a      	bne.n	800f606 <HAL_SPI_IRQHandler+0x7e>
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d105      	bne.n	800f606 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f600:	2b00      	cmp	r3, #0
 800f602:	f000 80b0 	beq.w	800f766 <HAL_SPI_IRQHandler+0x1de>
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	f003 0320 	and.w	r3, r3, #32
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f000 80aa 	beq.w	800f766 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d023      	beq.n	800f664 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f622:	b2db      	uxtb	r3, r3
 800f624:	2b03      	cmp	r3, #3
 800f626:	d011      	beq.n	800f64c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f62c:	f043 0204 	orr.w	r2, r3, #4
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f634:	2300      	movs	r3, #0
 800f636:	617b      	str	r3, [r7, #20]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	617b      	str	r3, [r7, #20]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	617b      	str	r3, [r7, #20]
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	e00b      	b.n	800f664 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f64c:	2300      	movs	r3, #0
 800f64e:	613b      	str	r3, [r7, #16]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	613b      	str	r3, [r7, #16]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	689b      	ldr	r3, [r3, #8]
 800f65e:	613b      	str	r3, [r7, #16]
 800f660:	693b      	ldr	r3, [r7, #16]
        return;
 800f662:	e080      	b.n	800f766 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	f003 0320 	and.w	r3, r3, #32
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d014      	beq.n	800f698 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f672:	f043 0201 	orr.w	r2, r3, #1
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f67a:	2300      	movs	r3, #0
 800f67c:	60fb      	str	r3, [r7, #12]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	60fb      	str	r3, [r7, #12]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f694:	601a      	str	r2, [r3, #0]
 800f696:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00c      	beq.n	800f6bc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f6a6:	f043 0208 	orr.w	r2, r3, #8
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	60bb      	str	r3, [r7, #8]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	60bb      	str	r3, [r7, #8]
 800f6ba:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d04f      	beq.n	800f764 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	685a      	ldr	r2, [r3, #4]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f6d2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	f003 0302 	and.w	r3, r3, #2
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d104      	bne.n	800f6f0 <HAL_SPI_IRQHandler+0x168>
 800f6e6:	69fb      	ldr	r3, [r7, #28]
 800f6e8:	f003 0301 	and.w	r3, r3, #1
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d034      	beq.n	800f75a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	685a      	ldr	r2, [r3, #4]
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f022 0203 	bic.w	r2, r2, #3
 800f6fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f704:	2b00      	cmp	r3, #0
 800f706:	d011      	beq.n	800f72c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f70c:	4a17      	ldr	r2, [pc, #92]	@ (800f76c <HAL_SPI_IRQHandler+0x1e4>)
 800f70e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f714:	4618      	mov	r0, r3
 800f716:	f7fc fe8f 	bl	800c438 <HAL_DMA_Abort_IT>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d005      	beq.n	800f72c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f724:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f730:	2b00      	cmp	r3, #0
 800f732:	d016      	beq.n	800f762 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f738:	4a0c      	ldr	r2, [pc, #48]	@ (800f76c <HAL_SPI_IRQHandler+0x1e4>)
 800f73a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f740:	4618      	mov	r0, r3
 800f742:	f7fc fe79 	bl	800c438 <HAL_DMA_Abort_IT>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d00a      	beq.n	800f762 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f750:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800f758:	e003      	b.n	800f762 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f000 f812 	bl	800f784 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f760:	e000      	b.n	800f764 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800f762:	bf00      	nop
    return;
 800f764:	bf00      	nop
  }
}
 800f766:	3720      	adds	r7, #32
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	0800f8b9 	.word	0x0800f8b9

0800f770 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f78c:	bf00      	nop
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f7a6:	b2db      	uxtb	r3, r3
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	370c      	adds	r7, #12
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b086      	sub	sp, #24
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f7c2:	f7fb ff6d 	bl	800b6a0 <HAL_GetTick>
 800f7c6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f7d6:	d03b      	beq.n	800f850 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	685a      	ldr	r2, [r3, #4]
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f022 0220 	bic.w	r2, r2, #32
 800f7e6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	685a      	ldr	r2, [r3, #4]
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f022 0202 	bic.w	r2, r2, #2
 800f7f6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f7f8:	693a      	ldr	r2, [r7, #16]
 800f7fa:	2164      	movs	r1, #100	@ 0x64
 800f7fc:	6978      	ldr	r0, [r7, #20]
 800f7fe:	f000 f98f 	bl	800fb20 <SPI_EndRxTxTransaction>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d005      	beq.n	800f814 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f80c:	f043 0220 	orr.w	r2, r3, #32
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	689b      	ldr	r3, [r3, #8]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d10a      	bne.n	800f832 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f81c:	2300      	movs	r3, #0
 800f81e:	60fb      	str	r3, [r7, #12]
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	60fb      	str	r3, [r7, #12]
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	689b      	ldr	r3, [r3, #8]
 800f82e:	60fb      	str	r3, [r7, #12]
 800f830:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	2200      	movs	r2, #0
 800f836:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	2201      	movs	r2, #1
 800f83c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f844:	2b00      	cmp	r3, #0
 800f846:	d003      	beq.n	800f850 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f848:	6978      	ldr	r0, [r7, #20]
 800f84a:	f7ff ff9b 	bl	800f784 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f84e:	e002      	b.n	800f856 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800f850:	6978      	ldr	r0, [r7, #20]
 800f852:	f7f2 ffcf 	bl	80027f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f856:	3718      	adds	r7, #24
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f868:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800f86a:	68f8      	ldr	r0, [r7, #12]
 800f86c:	f7ff ff80 	bl	800f770 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f870:	bf00      	nop
 800f872:	3710      	adds	r7, #16
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b084      	sub	sp, #16
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f884:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	685a      	ldr	r2, [r3, #4]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f022 0203 	bic.w	r2, r2, #3
 800f894:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f89a:	f043 0210 	orr.w	r2, r3, #16
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f7ff ff6a 	bl	800f784 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f8b0:	bf00      	nop
 800f8b2:	3710      	adds	r7, #16
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f8d4:	68f8      	ldr	r0, [r7, #12]
 800f8d6:	f7ff ff55 	bl	800f784 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f8da:	bf00      	nop
 800f8dc:	3710      	adds	r7, #16
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
	...

0800f8e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b088      	sub	sp, #32
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	603b      	str	r3, [r7, #0]
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f8f4:	f7fb fed4 	bl	800b6a0 <HAL_GetTick>
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8fc:	1a9b      	subs	r3, r3, r2
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	4413      	add	r3, r2
 800f902:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f904:	f7fb fecc 	bl	800b6a0 <HAL_GetTick>
 800f908:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f90a:	4b39      	ldr	r3, [pc, #228]	@ (800f9f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	015b      	lsls	r3, r3, #5
 800f910:	0d1b      	lsrs	r3, r3, #20
 800f912:	69fa      	ldr	r2, [r7, #28]
 800f914:	fb02 f303 	mul.w	r3, r2, r3
 800f918:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f91a:	e054      	b.n	800f9c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f922:	d050      	beq.n	800f9c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f924:	f7fb febc 	bl	800b6a0 <HAL_GetTick>
 800f928:	4602      	mov	r2, r0
 800f92a:	69bb      	ldr	r3, [r7, #24]
 800f92c:	1ad3      	subs	r3, r2, r3
 800f92e:	69fa      	ldr	r2, [r7, #28]
 800f930:	429a      	cmp	r2, r3
 800f932:	d902      	bls.n	800f93a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d13d      	bne.n	800f9b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	685a      	ldr	r2, [r3, #4]
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f952:	d111      	bne.n	800f978 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f95c:	d004      	beq.n	800f968 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	689b      	ldr	r3, [r3, #8]
 800f962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f966:	d107      	bne.n	800f978 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f97c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f980:	d10f      	bne.n	800f9a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f990:	601a      	str	r2, [r3, #0]
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	681a      	ldr	r2, [r3, #0]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f9a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f9b2:	2303      	movs	r3, #3
 800f9b4:	e017      	b.n	800f9e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d101      	bne.n	800f9c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	3b01      	subs	r3, #1
 800f9c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	689a      	ldr	r2, [r3, #8]
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	4013      	ands	r3, r2
 800f9d0:	68ba      	ldr	r2, [r7, #8]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	bf0c      	ite	eq
 800f9d6:	2301      	moveq	r3, #1
 800f9d8:	2300      	movne	r3, #0
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	461a      	mov	r2, r3
 800f9de:	79fb      	ldrb	r3, [r7, #7]
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d19b      	bne.n	800f91c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f9e4:	2300      	movs	r3, #0
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3720      	adds	r7, #32
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	200000d0 	.word	0x200000d0

0800f9f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b08a      	sub	sp, #40	@ 0x28
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
 800fa00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800fa02:	2300      	movs	r3, #0
 800fa04:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fa06:	f7fb fe4b 	bl	800b6a0 <HAL_GetTick>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa0e:	1a9b      	subs	r3, r3, r2
 800fa10:	683a      	ldr	r2, [r7, #0]
 800fa12:	4413      	add	r3, r2
 800fa14:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800fa16:	f7fb fe43 	bl	800b6a0 <HAL_GetTick>
 800fa1a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	330c      	adds	r3, #12
 800fa22:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fa24:	4b3d      	ldr	r3, [pc, #244]	@ (800fb1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	4413      	add	r3, r2
 800fa2e:	00da      	lsls	r2, r3, #3
 800fa30:	1ad3      	subs	r3, r2, r3
 800fa32:	0d1b      	lsrs	r3, r3, #20
 800fa34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa36:	fb02 f303 	mul.w	r3, r2, r3
 800fa3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800fa3c:	e060      	b.n	800fb00 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800fa44:	d107      	bne.n	800fa56 <SPI_WaitFifoStateUntilTimeout+0x62>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d104      	bne.n	800fa56 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800fa4c:	69fb      	ldr	r3, [r7, #28]
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800fa54:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa5c:	d050      	beq.n	800fb00 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fa5e:	f7fb fe1f 	bl	800b6a0 <HAL_GetTick>
 800fa62:	4602      	mov	r2, r0
 800fa64:	6a3b      	ldr	r3, [r7, #32]
 800fa66:	1ad3      	subs	r3, r2, r3
 800fa68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d902      	bls.n	800fa74 <SPI_WaitFifoStateUntilTimeout+0x80>
 800fa6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d13d      	bne.n	800faf0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	685a      	ldr	r2, [r3, #4]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fa82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fa8c:	d111      	bne.n	800fab2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	689b      	ldr	r3, [r3, #8]
 800fa92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fa96:	d004      	beq.n	800faa2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	689b      	ldr	r3, [r3, #8]
 800fa9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800faa0:	d107      	bne.n	800fab2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fab0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800faba:	d10f      	bne.n	800fadc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800faca:	601a      	str	r2, [r3, #0]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fada:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800faec:	2303      	movs	r3, #3
 800faee:	e010      	b.n	800fb12 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d101      	bne.n	800fafa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800faf6:	2300      	movs	r3, #0
 800faf8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	3b01      	subs	r3, #1
 800fafe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	689a      	ldr	r2, [r3, #8]
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	4013      	ands	r3, r2
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d196      	bne.n	800fa3e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800fb10:	2300      	movs	r3, #0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3728      	adds	r7, #40	@ 0x28
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	200000d0 	.word	0x200000d0

0800fb20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b088      	sub	sp, #32
 800fb24:	af02      	add	r7, sp, #8
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	9300      	str	r3, [sp, #0]
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	2200      	movs	r2, #0
 800fb34:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800fb38:	68f8      	ldr	r0, [r7, #12]
 800fb3a:	f7ff ff5b 	bl	800f9f4 <SPI_WaitFifoStateUntilTimeout>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d007      	beq.n	800fb54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb48:	f043 0220 	orr.w	r2, r3, #32
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fb50:	2303      	movs	r3, #3
 800fb52:	e046      	b.n	800fbe2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fb54:	4b25      	ldr	r3, [pc, #148]	@ (800fbec <SPI_EndRxTxTransaction+0xcc>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a25      	ldr	r2, [pc, #148]	@ (800fbf0 <SPI_EndRxTxTransaction+0xd0>)
 800fb5a:	fba2 2303 	umull	r2, r3, r2, r3
 800fb5e:	0d5b      	lsrs	r3, r3, #21
 800fb60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fb64:	fb02 f303 	mul.w	r3, r2, r3
 800fb68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fb72:	d112      	bne.n	800fb9a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	9300      	str	r3, [sp, #0]
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	2180      	movs	r1, #128	@ 0x80
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	f7ff feb0 	bl	800f8e4 <SPI_WaitFlagStateUntilTimeout>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d016      	beq.n	800fbb8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb8e:	f043 0220 	orr.w	r2, r3, #32
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800fb96:	2303      	movs	r3, #3
 800fb98:	e023      	b.n	800fbe2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d00a      	beq.n	800fbb6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	3b01      	subs	r3, #1
 800fba4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbb0:	2b80      	cmp	r3, #128	@ 0x80
 800fbb2:	d0f2      	beq.n	800fb9a <SPI_EndRxTxTransaction+0x7a>
 800fbb4:	e000      	b.n	800fbb8 <SPI_EndRxTxTransaction+0x98>
        break;
 800fbb6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	9300      	str	r3, [sp, #0]
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f7ff ff15 	bl	800f9f4 <SPI_WaitFifoStateUntilTimeout>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d007      	beq.n	800fbe0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fbd4:	f043 0220 	orr.w	r2, r3, #32
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fbdc:	2303      	movs	r3, #3
 800fbde:	e000      	b.n	800fbe2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800fbe0:	2300      	movs	r3, #0
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3718      	adds	r7, #24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	200000d0 	.word	0x200000d0
 800fbf0:	165e9f81 	.word	0x165e9f81

0800fbf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d101      	bne.n	800fc06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fc02:	2301      	movs	r3, #1
 800fc04:	e049      	b.n	800fc9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fc0c:	b2db      	uxtb	r3, r3
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d106      	bne.n	800fc20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2200      	movs	r2, #0
 800fc16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f7fb fa5a 	bl	800b0d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2202      	movs	r2, #2
 800fc24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	3304      	adds	r3, #4
 800fc30:	4619      	mov	r1, r3
 800fc32:	4610      	mov	r0, r2
 800fc34:	f000 fb1c 	bl	8010270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2201      	movs	r2, #1
 800fc3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2201      	movs	r2, #1
 800fc44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2201      	movs	r2, #1
 800fc54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2201      	movs	r2, #1
 800fc64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2201      	movs	r2, #1
 800fc74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2201      	movs	r2, #1
 800fc84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2201      	movs	r2, #1
 800fc94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fc98:	2300      	movs	r3, #0
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b082      	sub	sp, #8
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2202      	movs	r2, #2
 800fcae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	6a1a      	ldr	r2, [r3, #32]
 800fcb8:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fcbc:	4013      	ands	r3, r2
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d10f      	bne.n	800fce2 <HAL_TIM_Base_DeInit+0x40>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	6a1a      	ldr	r2, [r3, #32]
 800fcc8:	f240 4344 	movw	r3, #1092	@ 0x444
 800fccc:	4013      	ands	r3, r2
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d107      	bne.n	800fce2 <HAL_TIM_Base_DeInit+0x40>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f022 0201 	bic.w	r2, r2, #1
 800fce0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7fb fa6e 	bl	800b1c4 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2200      	movs	r2, #0
 800fcec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2200      	movs	r2, #0
 800fd24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fd50:	2300      	movs	r3, #0
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3708      	adds	r7, #8
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
	...

0800fd5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b085      	sub	sp, #20
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	d001      	beq.n	800fd74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fd70:	2301      	movs	r3, #1
 800fd72:	e054      	b.n	800fe1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2202      	movs	r2, #2
 800fd78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	68da      	ldr	r2, [r3, #12]
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	f042 0201 	orr.w	r2, r2, #1
 800fd8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4a26      	ldr	r2, [pc, #152]	@ (800fe2c <HAL_TIM_Base_Start_IT+0xd0>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d022      	beq.n	800fddc <HAL_TIM_Base_Start_IT+0x80>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd9e:	d01d      	beq.n	800fddc <HAL_TIM_Base_Start_IT+0x80>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4a22      	ldr	r2, [pc, #136]	@ (800fe30 <HAL_TIM_Base_Start_IT+0xd4>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d018      	beq.n	800fddc <HAL_TIM_Base_Start_IT+0x80>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	4a21      	ldr	r2, [pc, #132]	@ (800fe34 <HAL_TIM_Base_Start_IT+0xd8>)
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d013      	beq.n	800fddc <HAL_TIM_Base_Start_IT+0x80>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4a1f      	ldr	r2, [pc, #124]	@ (800fe38 <HAL_TIM_Base_Start_IT+0xdc>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d00e      	beq.n	800fddc <HAL_TIM_Base_Start_IT+0x80>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	4a1e      	ldr	r2, [pc, #120]	@ (800fe3c <HAL_TIM_Base_Start_IT+0xe0>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d009      	beq.n	800fddc <HAL_TIM_Base_Start_IT+0x80>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4a1c      	ldr	r2, [pc, #112]	@ (800fe40 <HAL_TIM_Base_Start_IT+0xe4>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d004      	beq.n	800fddc <HAL_TIM_Base_Start_IT+0x80>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	4a1b      	ldr	r2, [pc, #108]	@ (800fe44 <HAL_TIM_Base_Start_IT+0xe8>)
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d115      	bne.n	800fe08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	689a      	ldr	r2, [r3, #8]
 800fde2:	4b19      	ldr	r3, [pc, #100]	@ (800fe48 <HAL_TIM_Base_Start_IT+0xec>)
 800fde4:	4013      	ands	r3, r2
 800fde6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2b06      	cmp	r3, #6
 800fdec:	d015      	beq.n	800fe1a <HAL_TIM_Base_Start_IT+0xbe>
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fdf4:	d011      	beq.n	800fe1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f042 0201 	orr.w	r2, r2, #1
 800fe04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe06:	e008      	b.n	800fe1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f042 0201 	orr.w	r2, r2, #1
 800fe16:	601a      	str	r2, [r3, #0]
 800fe18:	e000      	b.n	800fe1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3714      	adds	r7, #20
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	40010000 	.word	0x40010000
 800fe30:	40000400 	.word	0x40000400
 800fe34:	40000800 	.word	0x40000800
 800fe38:	40000c00 	.word	0x40000c00
 800fe3c:	40010400 	.word	0x40010400
 800fe40:	40014000 	.word	0x40014000
 800fe44:	40001800 	.word	0x40001800
 800fe48:	00010007 	.word	0x00010007

0800fe4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	691b      	ldr	r3, [r3, #16]
 800fe5a:	f003 0302 	and.w	r3, r3, #2
 800fe5e:	2b02      	cmp	r3, #2
 800fe60:	d122      	bne.n	800fea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	f003 0302 	and.w	r3, r3, #2
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	d11b      	bne.n	800fea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f06f 0202 	mvn.w	r2, #2
 800fe78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2201      	movs	r2, #1
 800fe7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	699b      	ldr	r3, [r3, #24]
 800fe86:	f003 0303 	and.w	r3, r3, #3
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d003      	beq.n	800fe96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 f9d0 	bl	8010234 <HAL_TIM_IC_CaptureCallback>
 800fe94:	e005      	b.n	800fea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 f9c2 	bl	8010220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f000 f9d3 	bl	8010248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	691b      	ldr	r3, [r3, #16]
 800feae:	f003 0304 	and.w	r3, r3, #4
 800feb2:	2b04      	cmp	r3, #4
 800feb4:	d122      	bne.n	800fefc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	f003 0304 	and.w	r3, r3, #4
 800fec0:	2b04      	cmp	r3, #4
 800fec2:	d11b      	bne.n	800fefc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f06f 0204 	mvn.w	r2, #4
 800fecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2202      	movs	r2, #2
 800fed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	699b      	ldr	r3, [r3, #24]
 800feda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d003      	beq.n	800feea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 f9a6 	bl	8010234 <HAL_TIM_IC_CaptureCallback>
 800fee8:	e005      	b.n	800fef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 f998 	bl	8010220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 f9a9 	bl	8010248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	691b      	ldr	r3, [r3, #16]
 800ff02:	f003 0308 	and.w	r3, r3, #8
 800ff06:	2b08      	cmp	r3, #8
 800ff08:	d122      	bne.n	800ff50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	f003 0308 	and.w	r3, r3, #8
 800ff14:	2b08      	cmp	r3, #8
 800ff16:	d11b      	bne.n	800ff50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f06f 0208 	mvn.w	r2, #8
 800ff20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2204      	movs	r2, #4
 800ff26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	69db      	ldr	r3, [r3, #28]
 800ff2e:	f003 0303 	and.w	r3, r3, #3
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d003      	beq.n	800ff3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f000 f97c 	bl	8010234 <HAL_TIM_IC_CaptureCallback>
 800ff3c:	e005      	b.n	800ff4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f000 f96e 	bl	8010220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f000 f97f 	bl	8010248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	691b      	ldr	r3, [r3, #16]
 800ff56:	f003 0310 	and.w	r3, r3, #16
 800ff5a:	2b10      	cmp	r3, #16
 800ff5c:	d122      	bne.n	800ffa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	68db      	ldr	r3, [r3, #12]
 800ff64:	f003 0310 	and.w	r3, r3, #16
 800ff68:	2b10      	cmp	r3, #16
 800ff6a:	d11b      	bne.n	800ffa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f06f 0210 	mvn.w	r2, #16
 800ff74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2208      	movs	r2, #8
 800ff7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	69db      	ldr	r3, [r3, #28]
 800ff82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d003      	beq.n	800ff92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f000 f952 	bl	8010234 <HAL_TIM_IC_CaptureCallback>
 800ff90:	e005      	b.n	800ff9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f000 f944 	bl	8010220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 f955 	bl	8010248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	691b      	ldr	r3, [r3, #16]
 800ffaa:	f003 0301 	and.w	r3, r3, #1
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d10e      	bne.n	800ffd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	f003 0301 	and.w	r3, r3, #1
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d107      	bne.n	800ffd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f06f 0201 	mvn.w	r2, #1
 800ffc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f7f9 fd74 	bl	8009ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	691b      	ldr	r3, [r3, #16]
 800ffd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ffda:	2b80      	cmp	r3, #128	@ 0x80
 800ffdc:	d10e      	bne.n	800fffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ffe8:	2b80      	cmp	r3, #128	@ 0x80
 800ffea:	d107      	bne.n	800fffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800fff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 fb0c 	bl	8010614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	691b      	ldr	r3, [r3, #16]
 8010002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801000a:	d10e      	bne.n	801002a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	68db      	ldr	r3, [r3, #12]
 8010012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010016:	2b80      	cmp	r3, #128	@ 0x80
 8010018:	d107      	bne.n	801002a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f000 faff 	bl	8010628 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	691b      	ldr	r3, [r3, #16]
 8010030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010034:	2b40      	cmp	r3, #64	@ 0x40
 8010036:	d10e      	bne.n	8010056 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010042:	2b40      	cmp	r3, #64	@ 0x40
 8010044:	d107      	bne.n	8010056 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801004e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 f903 	bl	801025c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	f003 0320 	and.w	r3, r3, #32
 8010060:	2b20      	cmp	r3, #32
 8010062:	d10e      	bne.n	8010082 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	68db      	ldr	r3, [r3, #12]
 801006a:	f003 0320 	and.w	r3, r3, #32
 801006e:	2b20      	cmp	r3, #32
 8010070:	d107      	bne.n	8010082 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	f06f 0220 	mvn.w	r2, #32
 801007a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 fabf 	bl	8010600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010082:	bf00      	nop
 8010084:	3708      	adds	r7, #8
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
	...

0801008c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b084      	sub	sp, #16
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010096:	2300      	movs	r3, #0
 8010098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d101      	bne.n	80100a8 <HAL_TIM_ConfigClockSource+0x1c>
 80100a4:	2302      	movs	r3, #2
 80100a6:	e0b4      	b.n	8010212 <HAL_TIM_ConfigClockSource+0x186>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2201      	movs	r2, #1
 80100ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2202      	movs	r2, #2
 80100b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	689b      	ldr	r3, [r3, #8]
 80100be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80100c0:	68ba      	ldr	r2, [r7, #8]
 80100c2:	4b56      	ldr	r3, [pc, #344]	@ (801021c <HAL_TIM_ConfigClockSource+0x190>)
 80100c4:	4013      	ands	r3, r2
 80100c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80100ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	68ba      	ldr	r2, [r7, #8]
 80100d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80100e0:	d03e      	beq.n	8010160 <HAL_TIM_ConfigClockSource+0xd4>
 80100e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80100e6:	f200 8087 	bhi.w	80101f8 <HAL_TIM_ConfigClockSource+0x16c>
 80100ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80100ee:	f000 8086 	beq.w	80101fe <HAL_TIM_ConfigClockSource+0x172>
 80100f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80100f6:	d87f      	bhi.n	80101f8 <HAL_TIM_ConfigClockSource+0x16c>
 80100f8:	2b70      	cmp	r3, #112	@ 0x70
 80100fa:	d01a      	beq.n	8010132 <HAL_TIM_ConfigClockSource+0xa6>
 80100fc:	2b70      	cmp	r3, #112	@ 0x70
 80100fe:	d87b      	bhi.n	80101f8 <HAL_TIM_ConfigClockSource+0x16c>
 8010100:	2b60      	cmp	r3, #96	@ 0x60
 8010102:	d050      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0x11a>
 8010104:	2b60      	cmp	r3, #96	@ 0x60
 8010106:	d877      	bhi.n	80101f8 <HAL_TIM_ConfigClockSource+0x16c>
 8010108:	2b50      	cmp	r3, #80	@ 0x50
 801010a:	d03c      	beq.n	8010186 <HAL_TIM_ConfigClockSource+0xfa>
 801010c:	2b50      	cmp	r3, #80	@ 0x50
 801010e:	d873      	bhi.n	80101f8 <HAL_TIM_ConfigClockSource+0x16c>
 8010110:	2b40      	cmp	r3, #64	@ 0x40
 8010112:	d058      	beq.n	80101c6 <HAL_TIM_ConfigClockSource+0x13a>
 8010114:	2b40      	cmp	r3, #64	@ 0x40
 8010116:	d86f      	bhi.n	80101f8 <HAL_TIM_ConfigClockSource+0x16c>
 8010118:	2b30      	cmp	r3, #48	@ 0x30
 801011a:	d064      	beq.n	80101e6 <HAL_TIM_ConfigClockSource+0x15a>
 801011c:	2b30      	cmp	r3, #48	@ 0x30
 801011e:	d86b      	bhi.n	80101f8 <HAL_TIM_ConfigClockSource+0x16c>
 8010120:	2b20      	cmp	r3, #32
 8010122:	d060      	beq.n	80101e6 <HAL_TIM_ConfigClockSource+0x15a>
 8010124:	2b20      	cmp	r3, #32
 8010126:	d867      	bhi.n	80101f8 <HAL_TIM_ConfigClockSource+0x16c>
 8010128:	2b00      	cmp	r3, #0
 801012a:	d05c      	beq.n	80101e6 <HAL_TIM_ConfigClockSource+0x15a>
 801012c:	2b10      	cmp	r3, #16
 801012e:	d05a      	beq.n	80101e6 <HAL_TIM_ConfigClockSource+0x15a>
 8010130:	e062      	b.n	80101f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010142:	f000 f9af 	bl	80104a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	68ba      	ldr	r2, [r7, #8]
 801015c:	609a      	str	r2, [r3, #8]
      break;
 801015e:	e04f      	b.n	8010200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010170:	f000 f998 	bl	80104a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	689a      	ldr	r2, [r3, #8]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010182:	609a      	str	r2, [r3, #8]
      break;
 8010184:	e03c      	b.n	8010200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010192:	461a      	mov	r2, r3
 8010194:	f000 f90c 	bl	80103b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2150      	movs	r1, #80	@ 0x50
 801019e:	4618      	mov	r0, r3
 80101a0:	f000 f965 	bl	801046e <TIM_ITRx_SetConfig>
      break;
 80101a4:	e02c      	b.n	8010200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80101b2:	461a      	mov	r2, r3
 80101b4:	f000 f92b 	bl	801040e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	2160      	movs	r1, #96	@ 0x60
 80101be:	4618      	mov	r0, r3
 80101c0:	f000 f955 	bl	801046e <TIM_ITRx_SetConfig>
      break;
 80101c4:	e01c      	b.n	8010200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80101d2:	461a      	mov	r2, r3
 80101d4:	f000 f8ec 	bl	80103b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	2140      	movs	r1, #64	@ 0x40
 80101de:	4618      	mov	r0, r3
 80101e0:	f000 f945 	bl	801046e <TIM_ITRx_SetConfig>
      break;
 80101e4:	e00c      	b.n	8010200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681a      	ldr	r2, [r3, #0]
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	4619      	mov	r1, r3
 80101f0:	4610      	mov	r0, r2
 80101f2:	f000 f93c 	bl	801046e <TIM_ITRx_SetConfig>
      break;
 80101f6:	e003      	b.n	8010200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80101f8:	2301      	movs	r3, #1
 80101fa:	73fb      	strb	r3, [r7, #15]
      break;
 80101fc:	e000      	b.n	8010200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80101fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2201      	movs	r2, #1
 8010204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010210:	7bfb      	ldrb	r3, [r7, #15]
}
 8010212:	4618      	mov	r0, r3
 8010214:	3710      	adds	r7, #16
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	fffeff88 	.word	0xfffeff88

08010220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010228:	bf00      	nop
 801022a:	370c      	adds	r7, #12
 801022c:	46bd      	mov	sp, r7
 801022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010232:	4770      	bx	lr

08010234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801023c:	bf00      	nop
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr

08010248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010250:	bf00      	nop
 8010252:	370c      	adds	r7, #12
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr

0801025c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801025c:	b480      	push	{r7}
 801025e:	b083      	sub	sp, #12
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010264:	bf00      	nop
 8010266:	370c      	adds	r7, #12
 8010268:	46bd      	mov	sp, r7
 801026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026e:	4770      	bx	lr

08010270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010270:	b480      	push	{r7}
 8010272:	b085      	sub	sp, #20
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4a40      	ldr	r2, [pc, #256]	@ (8010384 <TIM_Base_SetConfig+0x114>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d013      	beq.n	80102b0 <TIM_Base_SetConfig+0x40>
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801028e:	d00f      	beq.n	80102b0 <TIM_Base_SetConfig+0x40>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	4a3d      	ldr	r2, [pc, #244]	@ (8010388 <TIM_Base_SetConfig+0x118>)
 8010294:	4293      	cmp	r3, r2
 8010296:	d00b      	beq.n	80102b0 <TIM_Base_SetConfig+0x40>
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	4a3c      	ldr	r2, [pc, #240]	@ (801038c <TIM_Base_SetConfig+0x11c>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d007      	beq.n	80102b0 <TIM_Base_SetConfig+0x40>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4a3b      	ldr	r2, [pc, #236]	@ (8010390 <TIM_Base_SetConfig+0x120>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d003      	beq.n	80102b0 <TIM_Base_SetConfig+0x40>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	4a3a      	ldr	r2, [pc, #232]	@ (8010394 <TIM_Base_SetConfig+0x124>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d108      	bne.n	80102c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80102b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	68fa      	ldr	r2, [r7, #12]
 80102be:	4313      	orrs	r3, r2
 80102c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	4a2f      	ldr	r2, [pc, #188]	@ (8010384 <TIM_Base_SetConfig+0x114>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d02b      	beq.n	8010322 <TIM_Base_SetConfig+0xb2>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80102d0:	d027      	beq.n	8010322 <TIM_Base_SetConfig+0xb2>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	4a2c      	ldr	r2, [pc, #176]	@ (8010388 <TIM_Base_SetConfig+0x118>)
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d023      	beq.n	8010322 <TIM_Base_SetConfig+0xb2>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	4a2b      	ldr	r2, [pc, #172]	@ (801038c <TIM_Base_SetConfig+0x11c>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d01f      	beq.n	8010322 <TIM_Base_SetConfig+0xb2>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4a2a      	ldr	r2, [pc, #168]	@ (8010390 <TIM_Base_SetConfig+0x120>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d01b      	beq.n	8010322 <TIM_Base_SetConfig+0xb2>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4a29      	ldr	r2, [pc, #164]	@ (8010394 <TIM_Base_SetConfig+0x124>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d017      	beq.n	8010322 <TIM_Base_SetConfig+0xb2>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4a28      	ldr	r2, [pc, #160]	@ (8010398 <TIM_Base_SetConfig+0x128>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d013      	beq.n	8010322 <TIM_Base_SetConfig+0xb2>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4a27      	ldr	r2, [pc, #156]	@ (801039c <TIM_Base_SetConfig+0x12c>)
 80102fe:	4293      	cmp	r3, r2
 8010300:	d00f      	beq.n	8010322 <TIM_Base_SetConfig+0xb2>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4a26      	ldr	r2, [pc, #152]	@ (80103a0 <TIM_Base_SetConfig+0x130>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d00b      	beq.n	8010322 <TIM_Base_SetConfig+0xb2>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	4a25      	ldr	r2, [pc, #148]	@ (80103a4 <TIM_Base_SetConfig+0x134>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d007      	beq.n	8010322 <TIM_Base_SetConfig+0xb2>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	4a24      	ldr	r2, [pc, #144]	@ (80103a8 <TIM_Base_SetConfig+0x138>)
 8010316:	4293      	cmp	r3, r2
 8010318:	d003      	beq.n	8010322 <TIM_Base_SetConfig+0xb2>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4a23      	ldr	r2, [pc, #140]	@ (80103ac <TIM_Base_SetConfig+0x13c>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d108      	bne.n	8010334 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	68fa      	ldr	r2, [r7, #12]
 8010330:	4313      	orrs	r3, r2
 8010332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	695b      	ldr	r3, [r3, #20]
 801033e:	4313      	orrs	r3, r2
 8010340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	68fa      	ldr	r2, [r7, #12]
 8010346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	689a      	ldr	r2, [r3, #8]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	681a      	ldr	r2, [r3, #0]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	4a0a      	ldr	r2, [pc, #40]	@ (8010384 <TIM_Base_SetConfig+0x114>)
 801035c:	4293      	cmp	r3, r2
 801035e:	d003      	beq.n	8010368 <TIM_Base_SetConfig+0xf8>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4a0c      	ldr	r2, [pc, #48]	@ (8010394 <TIM_Base_SetConfig+0x124>)
 8010364:	4293      	cmp	r3, r2
 8010366:	d103      	bne.n	8010370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	691a      	ldr	r2, [r3, #16]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2201      	movs	r2, #1
 8010374:	615a      	str	r2, [r3, #20]
}
 8010376:	bf00      	nop
 8010378:	3714      	adds	r7, #20
 801037a:	46bd      	mov	sp, r7
 801037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010380:	4770      	bx	lr
 8010382:	bf00      	nop
 8010384:	40010000 	.word	0x40010000
 8010388:	40000400 	.word	0x40000400
 801038c:	40000800 	.word	0x40000800
 8010390:	40000c00 	.word	0x40000c00
 8010394:	40010400 	.word	0x40010400
 8010398:	40014000 	.word	0x40014000
 801039c:	40014400 	.word	0x40014400
 80103a0:	40014800 	.word	0x40014800
 80103a4:	40001800 	.word	0x40001800
 80103a8:	40001c00 	.word	0x40001c00
 80103ac:	40002000 	.word	0x40002000

080103b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80103b0:	b480      	push	{r7}
 80103b2:	b087      	sub	sp, #28
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	60f8      	str	r0, [r7, #12]
 80103b8:	60b9      	str	r1, [r7, #8]
 80103ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	6a1b      	ldr	r3, [r3, #32]
 80103c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	6a1b      	ldr	r3, [r3, #32]
 80103c6:	f023 0201 	bic.w	r2, r3, #1
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	699b      	ldr	r3, [r3, #24]
 80103d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80103da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	011b      	lsls	r3, r3, #4
 80103e0:	693a      	ldr	r2, [r7, #16]
 80103e2:	4313      	orrs	r3, r2
 80103e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	f023 030a 	bic.w	r3, r3, #10
 80103ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80103ee:	697a      	ldr	r2, [r7, #20]
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	4313      	orrs	r3, r2
 80103f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	693a      	ldr	r2, [r7, #16]
 80103fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	697a      	ldr	r2, [r7, #20]
 8010400:	621a      	str	r2, [r3, #32]
}
 8010402:	bf00      	nop
 8010404:	371c      	adds	r7, #28
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr

0801040e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801040e:	b480      	push	{r7}
 8010410:	b087      	sub	sp, #28
 8010412:	af00      	add	r7, sp, #0
 8010414:	60f8      	str	r0, [r7, #12]
 8010416:	60b9      	str	r1, [r7, #8]
 8010418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	6a1b      	ldr	r3, [r3, #32]
 801041e:	f023 0210 	bic.w	r2, r3, #16
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	699b      	ldr	r3, [r3, #24]
 801042a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	6a1b      	ldr	r3, [r3, #32]
 8010430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	031b      	lsls	r3, r3, #12
 801043e:	697a      	ldr	r2, [r7, #20]
 8010440:	4313      	orrs	r3, r2
 8010442:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801044a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	011b      	lsls	r3, r3, #4
 8010450:	693a      	ldr	r2, [r7, #16]
 8010452:	4313      	orrs	r3, r2
 8010454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	697a      	ldr	r2, [r7, #20]
 801045a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	693a      	ldr	r2, [r7, #16]
 8010460:	621a      	str	r2, [r3, #32]
}
 8010462:	bf00      	nop
 8010464:	371c      	adds	r7, #28
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr

0801046e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801046e:	b480      	push	{r7}
 8010470:	b085      	sub	sp, #20
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
 8010476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	689b      	ldr	r3, [r3, #8]
 801047c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010486:	683a      	ldr	r2, [r7, #0]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	4313      	orrs	r3, r2
 801048c:	f043 0307 	orr.w	r3, r3, #7
 8010490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	68fa      	ldr	r2, [r7, #12]
 8010496:	609a      	str	r2, [r3, #8]
}
 8010498:	bf00      	nop
 801049a:	3714      	adds	r7, #20
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b087      	sub	sp, #28
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
 80104b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	689b      	ldr	r3, [r3, #8]
 80104b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80104be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	021a      	lsls	r2, r3, #8
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	431a      	orrs	r2, r3
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	4313      	orrs	r3, r2
 80104cc:	697a      	ldr	r2, [r7, #20]
 80104ce:	4313      	orrs	r3, r2
 80104d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	697a      	ldr	r2, [r7, #20]
 80104d6:	609a      	str	r2, [r3, #8]
}
 80104d8:	bf00      	nop
 80104da:	371c      	adds	r7, #28
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	4770      	bx	lr

080104e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80104e4:	b480      	push	{r7}
 80104e6:	b085      	sub	sp, #20
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80104f4:	2b01      	cmp	r3, #1
 80104f6:	d101      	bne.n	80104fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80104f8:	2302      	movs	r3, #2
 80104fa:	e06d      	b.n	80105d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2201      	movs	r2, #1
 8010500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2202      	movs	r2, #2
 8010508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4a30      	ldr	r2, [pc, #192]	@ (80105e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d004      	beq.n	8010530 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4a2f      	ldr	r2, [pc, #188]	@ (80105e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d108      	bne.n	8010542 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010536:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	685b      	ldr	r3, [r3, #4]
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	4313      	orrs	r3, r2
 8010540:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010548:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	68fa      	ldr	r2, [r7, #12]
 8010550:	4313      	orrs	r3, r2
 8010552:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	68fa      	ldr	r2, [r7, #12]
 801055a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4a20      	ldr	r2, [pc, #128]	@ (80105e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d022      	beq.n	80105ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801056e:	d01d      	beq.n	80105ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	4a1d      	ldr	r2, [pc, #116]	@ (80105ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010576:	4293      	cmp	r3, r2
 8010578:	d018      	beq.n	80105ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	4a1c      	ldr	r2, [pc, #112]	@ (80105f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d013      	beq.n	80105ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4a1a      	ldr	r2, [pc, #104]	@ (80105f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d00e      	beq.n	80105ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	4a15      	ldr	r2, [pc, #84]	@ (80105e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010594:	4293      	cmp	r3, r2
 8010596:	d009      	beq.n	80105ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4a16      	ldr	r2, [pc, #88]	@ (80105f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801059e:	4293      	cmp	r3, r2
 80105a0:	d004      	beq.n	80105ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	4a15      	ldr	r2, [pc, #84]	@ (80105fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d10c      	bne.n	80105c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80105b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	68ba      	ldr	r2, [r7, #8]
 80105ba:	4313      	orrs	r3, r2
 80105bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	68ba      	ldr	r2, [r7, #8]
 80105c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2201      	movs	r2, #1
 80105ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2200      	movs	r2, #0
 80105d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80105d6:	2300      	movs	r3, #0
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3714      	adds	r7, #20
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr
 80105e4:	40010000 	.word	0x40010000
 80105e8:	40010400 	.word	0x40010400
 80105ec:	40000400 	.word	0x40000400
 80105f0:	40000800 	.word	0x40000800
 80105f4:	40000c00 	.word	0x40000c00
 80105f8:	40014000 	.word	0x40014000
 80105fc:	40001800 	.word	0x40001800

08010600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801061c:	bf00      	nop
 801061e:	370c      	adds	r7, #12
 8010620:	46bd      	mov	sp, r7
 8010622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010626:	4770      	bx	lr

08010628 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010630:	bf00      	nop
 8010632:	370c      	adds	r7, #12
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d101      	bne.n	801064e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801064a:	2301      	movs	r3, #1
 801064c:	e040      	b.n	80106d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010652:	2b00      	cmp	r3, #0
 8010654:	d106      	bne.n	8010664 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f7fa fdfc 	bl	800b25c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2224      	movs	r2, #36	@ 0x24
 8010668:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	681a      	ldr	r2, [r3, #0]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	f022 0201 	bic.w	r2, r2, #1
 8010678:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 fbfe 	bl	8010e7c <UART_SetConfig>
 8010680:	4603      	mov	r3, r0
 8010682:	2b01      	cmp	r3, #1
 8010684:	d101      	bne.n	801068a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8010686:	2301      	movs	r3, #1
 8010688:	e022      	b.n	80106d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801068e:	2b00      	cmp	r3, #0
 8010690:	d002      	beq.n	8010698 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 fe56 	bl	8011344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	685a      	ldr	r2, [r3, #4]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80106a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	689a      	ldr	r2, [r3, #8]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80106b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f042 0201 	orr.w	r2, r2, #1
 80106c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f000 fedd 	bl	8011488 <UART_CheckIdleState>
 80106ce:	4603      	mov	r3, r0
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3708      	adds	r7, #8
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}

080106d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b08a      	sub	sp, #40	@ 0x28
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	4613      	mov	r3, r2
 80106e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106ec:	2b20      	cmp	r3, #32
 80106ee:	d132      	bne.n	8010756 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d002      	beq.n	80106fc <HAL_UART_Receive_IT+0x24>
 80106f6:	88fb      	ldrh	r3, [r7, #6]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d101      	bne.n	8010700 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80106fc:	2301      	movs	r3, #1
 80106fe:	e02b      	b.n	8010758 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2200      	movs	r2, #0
 8010704:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	685b      	ldr	r3, [r3, #4]
 801070c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010710:	2b00      	cmp	r3, #0
 8010712:	d018      	beq.n	8010746 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	e853 3f00 	ldrex	r3, [r3]
 8010720:	613b      	str	r3, [r7, #16]
   return(result);
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010728:	627b      	str	r3, [r7, #36]	@ 0x24
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	461a      	mov	r2, r3
 8010730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010732:	623b      	str	r3, [r7, #32]
 8010734:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010736:	69f9      	ldr	r1, [r7, #28]
 8010738:	6a3a      	ldr	r2, [r7, #32]
 801073a:	e841 2300 	strex	r3, r2, [r1]
 801073e:	61bb      	str	r3, [r7, #24]
   return(result);
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d1e6      	bne.n	8010714 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010746:	88fb      	ldrh	r3, [r7, #6]
 8010748:	461a      	mov	r2, r3
 801074a:	68b9      	ldr	r1, [r7, #8]
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f000 ffaf 	bl	80116b0 <UART_Start_Receive_IT>
 8010752:	4603      	mov	r3, r0
 8010754:	e000      	b.n	8010758 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8010756:	2302      	movs	r3, #2
  }
}
 8010758:	4618      	mov	r0, r3
 801075a:	3728      	adds	r7, #40	@ 0x28
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b08a      	sub	sp, #40	@ 0x28
 8010764:	af00      	add	r7, sp, #0
 8010766:	60f8      	str	r0, [r7, #12]
 8010768:	60b9      	str	r1, [r7, #8]
 801076a:	4613      	mov	r3, r2
 801076c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010772:	2b20      	cmp	r3, #32
 8010774:	d165      	bne.n	8010842 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d002      	beq.n	8010782 <HAL_UART_Transmit_DMA+0x22>
 801077c:	88fb      	ldrh	r3, [r7, #6]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d101      	bne.n	8010786 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8010782:	2301      	movs	r3, #1
 8010784:	e05e      	b.n	8010844 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	88fa      	ldrh	r2, [r7, #6]
 8010790:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	88fa      	ldrh	r2, [r7, #6]
 8010798:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2200      	movs	r2, #0
 80107a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2221      	movs	r2, #33	@ 0x21
 80107a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d027      	beq.n	8010802 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107b6:	4a25      	ldr	r2, [pc, #148]	@ (801084c <HAL_UART_Transmit_DMA+0xec>)
 80107b8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107be:	4a24      	ldr	r2, [pc, #144]	@ (8010850 <HAL_UART_Transmit_DMA+0xf0>)
 80107c0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107c6:	4a23      	ldr	r2, [pc, #140]	@ (8010854 <HAL_UART_Transmit_DMA+0xf4>)
 80107c8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107ce:	2200      	movs	r2, #0
 80107d0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107da:	4619      	mov	r1, r3
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	3328      	adds	r3, #40	@ 0x28
 80107e2:	461a      	mov	r2, r3
 80107e4:	88fb      	ldrh	r3, [r7, #6]
 80107e6:	f7fb fd57 	bl	800c298 <HAL_DMA_Start_IT>
 80107ea:	4603      	mov	r3, r0
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d008      	beq.n	8010802 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2210      	movs	r2, #16
 80107f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2220      	movs	r2, #32
 80107fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80107fe:	2301      	movs	r3, #1
 8010800:	e020      	b.n	8010844 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	2240      	movs	r2, #64	@ 0x40
 8010808:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	3308      	adds	r3, #8
 8010810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	e853 3f00 	ldrex	r3, [r3]
 8010818:	613b      	str	r3, [r7, #16]
   return(result);
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010820:	627b      	str	r3, [r7, #36]	@ 0x24
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3308      	adds	r3, #8
 8010828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801082a:	623a      	str	r2, [r7, #32]
 801082c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801082e:	69f9      	ldr	r1, [r7, #28]
 8010830:	6a3a      	ldr	r2, [r7, #32]
 8010832:	e841 2300 	strex	r3, r2, [r1]
 8010836:	61bb      	str	r3, [r7, #24]
   return(result);
 8010838:	69bb      	ldr	r3, [r7, #24]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d1e5      	bne.n	801080a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 801083e:	2300      	movs	r3, #0
 8010840:	e000      	b.n	8010844 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8010842:	2302      	movs	r3, #2
  }
}
 8010844:	4618      	mov	r0, r3
 8010846:	3728      	adds	r7, #40	@ 0x28
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	08011951 	.word	0x08011951
 8010850:	080119e7 	.word	0x080119e7
 8010854:	08011a03 	.word	0x08011a03

08010858 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b0ba      	sub	sp, #232	@ 0xe8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	69db      	ldr	r3, [r3, #28]
 8010866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	689b      	ldr	r3, [r3, #8]
 801087a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801087e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010882:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010886:	4013      	ands	r3, r2
 8010888:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801088c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010890:	2b00      	cmp	r3, #0
 8010892:	d115      	bne.n	80108c0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8010894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010898:	f003 0320 	and.w	r3, r3, #32
 801089c:	2b00      	cmp	r3, #0
 801089e:	d00f      	beq.n	80108c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80108a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80108a4:	f003 0320 	and.w	r3, r3, #32
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d009      	beq.n	80108c0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f000 82ac 	beq.w	8010e0e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	4798      	blx	r3
      }
      return;
 80108be:	e2a6      	b.n	8010e0e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80108c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	f000 8117 	beq.w	8010af8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80108ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80108ce:	f003 0301 	and.w	r3, r3, #1
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d106      	bne.n	80108e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80108d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80108da:	4b85      	ldr	r3, [pc, #532]	@ (8010af0 <HAL_UART_IRQHandler+0x298>)
 80108dc:	4013      	ands	r3, r2
 80108de:	2b00      	cmp	r3, #0
 80108e0:	f000 810a 	beq.w	8010af8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80108e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80108e8:	f003 0301 	and.w	r3, r3, #1
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d011      	beq.n	8010914 <HAL_UART_IRQHandler+0xbc>
 80108f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80108f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d00b      	beq.n	8010914 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2201      	movs	r2, #1
 8010902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801090a:	f043 0201 	orr.w	r2, r3, #1
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010918:	f003 0302 	and.w	r3, r3, #2
 801091c:	2b00      	cmp	r3, #0
 801091e:	d011      	beq.n	8010944 <HAL_UART_IRQHandler+0xec>
 8010920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010924:	f003 0301 	and.w	r3, r3, #1
 8010928:	2b00      	cmp	r3, #0
 801092a:	d00b      	beq.n	8010944 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2202      	movs	r2, #2
 8010932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801093a:	f043 0204 	orr.w	r2, r3, #4
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010948:	f003 0304 	and.w	r3, r3, #4
 801094c:	2b00      	cmp	r3, #0
 801094e:	d011      	beq.n	8010974 <HAL_UART_IRQHandler+0x11c>
 8010950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010954:	f003 0301 	and.w	r3, r3, #1
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00b      	beq.n	8010974 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2204      	movs	r2, #4
 8010962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801096a:	f043 0202 	orr.w	r2, r3, #2
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010978:	f003 0308 	and.w	r3, r3, #8
 801097c:	2b00      	cmp	r3, #0
 801097e:	d017      	beq.n	80109b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010984:	f003 0320 	and.w	r3, r3, #32
 8010988:	2b00      	cmp	r3, #0
 801098a:	d105      	bne.n	8010998 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801098c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010990:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010994:	2b00      	cmp	r3, #0
 8010996:	d00b      	beq.n	80109b0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2208      	movs	r2, #8
 801099e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109a6:	f043 0208 	orr.w	r2, r3, #8
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80109b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d012      	beq.n	80109e2 <HAL_UART_IRQHandler+0x18a>
 80109bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00c      	beq.n	80109e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80109d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109d8:	f043 0220 	orr.w	r2, r3, #32
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	f000 8212 	beq.w	8010e12 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80109ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109f2:	f003 0320 	and.w	r3, r3, #32
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00d      	beq.n	8010a16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80109fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109fe:	f003 0320 	and.w	r3, r3, #32
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d007      	beq.n	8010a16 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d003      	beq.n	8010a16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	689b      	ldr	r3, [r3, #8]
 8010a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a2a:	2b40      	cmp	r3, #64	@ 0x40
 8010a2c:	d005      	beq.n	8010a3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010a32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d04f      	beq.n	8010ada <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 ff24 	bl	8011888 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	689b      	ldr	r3, [r3, #8]
 8010a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a4a:	2b40      	cmp	r3, #64	@ 0x40
 8010a4c:	d141      	bne.n	8010ad2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	3308      	adds	r3, #8
 8010a54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010a5c:	e853 3f00 	ldrex	r3, [r3]
 8010a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	3308      	adds	r3, #8
 8010a76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010a7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010a86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010a8a:	e841 2300 	strex	r3, r2, [r1]
 8010a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d1d9      	bne.n	8010a4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d013      	beq.n	8010aca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010aa6:	4a13      	ldr	r2, [pc, #76]	@ (8010af4 <HAL_UART_IRQHandler+0x29c>)
 8010aa8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7fb fcc2 	bl	800c438 <HAL_DMA_Abort_IT>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d017      	beq.n	8010aea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ac0:	687a      	ldr	r2, [r7, #4]
 8010ac2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8010ac4:	4610      	mov	r0, r2
 8010ac6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ac8:	e00f      	b.n	8010aea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f000 f9b6 	bl	8010e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ad0:	e00b      	b.n	8010aea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f000 f9b2 	bl	8010e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ad8:	e007      	b.n	8010aea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 f9ae 	bl	8010e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8010ae8:	e193      	b.n	8010e12 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010aea:	bf00      	nop
    return;
 8010aec:	e191      	b.n	8010e12 <HAL_UART_IRQHandler+0x5ba>
 8010aee:	bf00      	nop
 8010af0:	04000120 	.word	0x04000120
 8010af4:	08011a81 	.word	0x08011a81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010afc:	2b01      	cmp	r3, #1
 8010afe:	f040 814c 	bne.w	8010d9a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b06:	f003 0310 	and.w	r3, r3, #16
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f000 8145 	beq.w	8010d9a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b14:	f003 0310 	and.w	r3, r3, #16
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	f000 813e 	beq.w	8010d9a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	2210      	movs	r2, #16
 8010b24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	689b      	ldr	r3, [r3, #8]
 8010b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b30:	2b40      	cmp	r3, #64	@ 0x40
 8010b32:	f040 80b6 	bne.w	8010ca2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010b42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	f000 8165 	beq.w	8010e16 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010b56:	429a      	cmp	r2, r3
 8010b58:	f080 815d 	bcs.w	8010e16 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010b62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b6a:	69db      	ldr	r3, [r3, #28]
 8010b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b70:	f000 8086 	beq.w	8010c80 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010b80:	e853 3f00 	ldrex	r3, [r3]
 8010b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	461a      	mov	r2, r3
 8010b9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010b9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010ba2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ba6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010baa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010bae:	e841 2300 	strex	r3, r2, [r1]
 8010bb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1da      	bne.n	8010b74 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	3308      	adds	r3, #8
 8010bc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010bc8:	e853 3f00 	ldrex	r3, [r3]
 8010bcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010bce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010bd0:	f023 0301 	bic.w	r3, r3, #1
 8010bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	3308      	adds	r3, #8
 8010bde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010be2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010be6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010be8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010bea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010bee:	e841 2300 	strex	r3, r2, [r1]
 8010bf2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010bf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d1e1      	bne.n	8010bbe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	3308      	adds	r3, #8
 8010c00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010c04:	e853 3f00 	ldrex	r3, [r3]
 8010c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	3308      	adds	r3, #8
 8010c1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010c1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010c20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010c24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010c26:	e841 2300 	strex	r3, r2, [r1]
 8010c2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d1e3      	bne.n	8010bfa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2220      	movs	r2, #32
 8010c36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c48:	e853 3f00 	ldrex	r3, [r3]
 8010c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c50:	f023 0310 	bic.w	r3, r3, #16
 8010c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010c64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010c68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010c6a:	e841 2300 	strex	r3, r2, [r1]
 8010c6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010c70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d1e4      	bne.n	8010c40 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fb fb6c 	bl	800c358 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2202      	movs	r2, #2
 8010c84:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	1ad3      	subs	r3, r2, r3
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	4619      	mov	r1, r3
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 f8d8 	bl	8010e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010ca0:	e0b9      	b.n	8010e16 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	1ad3      	subs	r3, r2, r3
 8010cb2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010cbc:	b29b      	uxth	r3, r3
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f000 80ab 	beq.w	8010e1a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8010cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f000 80a6 	beq.w	8010e1a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd6:	e853 3f00 	ldrex	r3, [r3]
 8010cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	461a      	mov	r2, r3
 8010cec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010cf2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010cf8:	e841 2300 	strex	r3, r2, [r1]
 8010cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d1e4      	bne.n	8010cce <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	3308      	adds	r3, #8
 8010d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d0e:	e853 3f00 	ldrex	r3, [r3]
 8010d12:	623b      	str	r3, [r7, #32]
   return(result);
 8010d14:	6a3b      	ldr	r3, [r7, #32]
 8010d16:	f023 0301 	bic.w	r3, r3, #1
 8010d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	3308      	adds	r3, #8
 8010d24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010d28:	633a      	str	r2, [r7, #48]	@ 0x30
 8010d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d30:	e841 2300 	strex	r3, r2, [r1]
 8010d34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d1e3      	bne.n	8010d04 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2220      	movs	r2, #32
 8010d40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	e853 3f00 	ldrex	r3, [r3]
 8010d5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	f023 0310 	bic.w	r3, r3, #16
 8010d64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010d72:	61fb      	str	r3, [r7, #28]
 8010d74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d76:	69b9      	ldr	r1, [r7, #24]
 8010d78:	69fa      	ldr	r2, [r7, #28]
 8010d7a:	e841 2300 	strex	r3, r2, [r1]
 8010d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d1e4      	bne.n	8010d50 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2202      	movs	r2, #2
 8010d8a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010d8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010d90:	4619      	mov	r1, r3
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f000 f85c 	bl	8010e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010d98:	e03f      	b.n	8010e1a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d00e      	beq.n	8010dc4 <HAL_UART_IRQHandler+0x56c>
 8010da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d008      	beq.n	8010dc4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010dba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f000 f853 	bl	8010e68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010dc2:	e02d      	b.n	8010e20 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d00e      	beq.n	8010dee <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d008      	beq.n	8010dee <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d01c      	beq.n	8010e1e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	4798      	blx	r3
    }
    return;
 8010dec:	e017      	b.n	8010e1e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d012      	beq.n	8010e20 <HAL_UART_IRQHandler+0x5c8>
 8010dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d00c      	beq.n	8010e20 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 fe50 	bl	8011aac <UART_EndTransmit_IT>
    return;
 8010e0c:	e008      	b.n	8010e20 <HAL_UART_IRQHandler+0x5c8>
      return;
 8010e0e:	bf00      	nop
 8010e10:	e006      	b.n	8010e20 <HAL_UART_IRQHandler+0x5c8>
    return;
 8010e12:	bf00      	nop
 8010e14:	e004      	b.n	8010e20 <HAL_UART_IRQHandler+0x5c8>
      return;
 8010e16:	bf00      	nop
 8010e18:	e002      	b.n	8010e20 <HAL_UART_IRQHandler+0x5c8>
      return;
 8010e1a:	bf00      	nop
 8010e1c:	e000      	b.n	8010e20 <HAL_UART_IRQHandler+0x5c8>
    return;
 8010e1e:	bf00      	nop
  }

}
 8010e20:	37e8      	adds	r7, #232	@ 0xe8
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
 8010e26:	bf00      	nop

08010e28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010e30:	bf00      	nop
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b083      	sub	sp, #12
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010e44:	bf00      	nop
 8010e46:	370c      	adds	r7, #12
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr

08010e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010e5c:	bf00      	nop
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010e70:	bf00      	nop
 8010e72:	370c      	adds	r7, #12
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr

08010e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b088      	sub	sp, #32
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010e84:	2300      	movs	r3, #0
 8010e86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	689a      	ldr	r2, [r3, #8]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	691b      	ldr	r3, [r3, #16]
 8010e90:	431a      	orrs	r2, r3
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	695b      	ldr	r3, [r3, #20]
 8010e96:	431a      	orrs	r2, r3
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	69db      	ldr	r3, [r3, #28]
 8010e9c:	4313      	orrs	r3, r2
 8010e9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	4ba6      	ldr	r3, [pc, #664]	@ (8011140 <UART_SetConfig+0x2c4>)
 8010ea8:	4013      	ands	r3, r2
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	6812      	ldr	r2, [r2, #0]
 8010eae:	6979      	ldr	r1, [r7, #20]
 8010eb0:	430b      	orrs	r3, r1
 8010eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	68da      	ldr	r2, [r3, #12]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	430a      	orrs	r2, r1
 8010ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	699b      	ldr	r3, [r3, #24]
 8010ece:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6a1b      	ldr	r3, [r3, #32]
 8010ed4:	697a      	ldr	r2, [r7, #20]
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	689b      	ldr	r3, [r3, #8]
 8010ee0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	697a      	ldr	r2, [r7, #20]
 8010eea:	430a      	orrs	r2, r1
 8010eec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	4a94      	ldr	r2, [pc, #592]	@ (8011144 <UART_SetConfig+0x2c8>)
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	d120      	bne.n	8010f3a <UART_SetConfig+0xbe>
 8010ef8:	4b93      	ldr	r3, [pc, #588]	@ (8011148 <UART_SetConfig+0x2cc>)
 8010efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010efe:	f003 0303 	and.w	r3, r3, #3
 8010f02:	2b03      	cmp	r3, #3
 8010f04:	d816      	bhi.n	8010f34 <UART_SetConfig+0xb8>
 8010f06:	a201      	add	r2, pc, #4	@ (adr r2, 8010f0c <UART_SetConfig+0x90>)
 8010f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f0c:	08010f1d 	.word	0x08010f1d
 8010f10:	08010f29 	.word	0x08010f29
 8010f14:	08010f23 	.word	0x08010f23
 8010f18:	08010f2f 	.word	0x08010f2f
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	77fb      	strb	r3, [r7, #31]
 8010f20:	e150      	b.n	80111c4 <UART_SetConfig+0x348>
 8010f22:	2302      	movs	r3, #2
 8010f24:	77fb      	strb	r3, [r7, #31]
 8010f26:	e14d      	b.n	80111c4 <UART_SetConfig+0x348>
 8010f28:	2304      	movs	r3, #4
 8010f2a:	77fb      	strb	r3, [r7, #31]
 8010f2c:	e14a      	b.n	80111c4 <UART_SetConfig+0x348>
 8010f2e:	2308      	movs	r3, #8
 8010f30:	77fb      	strb	r3, [r7, #31]
 8010f32:	e147      	b.n	80111c4 <UART_SetConfig+0x348>
 8010f34:	2310      	movs	r3, #16
 8010f36:	77fb      	strb	r3, [r7, #31]
 8010f38:	e144      	b.n	80111c4 <UART_SetConfig+0x348>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	4a83      	ldr	r2, [pc, #524]	@ (801114c <UART_SetConfig+0x2d0>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d132      	bne.n	8010faa <UART_SetConfig+0x12e>
 8010f44:	4b80      	ldr	r3, [pc, #512]	@ (8011148 <UART_SetConfig+0x2cc>)
 8010f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f4a:	f003 030c 	and.w	r3, r3, #12
 8010f4e:	2b0c      	cmp	r3, #12
 8010f50:	d828      	bhi.n	8010fa4 <UART_SetConfig+0x128>
 8010f52:	a201      	add	r2, pc, #4	@ (adr r2, 8010f58 <UART_SetConfig+0xdc>)
 8010f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f58:	08010f8d 	.word	0x08010f8d
 8010f5c:	08010fa5 	.word	0x08010fa5
 8010f60:	08010fa5 	.word	0x08010fa5
 8010f64:	08010fa5 	.word	0x08010fa5
 8010f68:	08010f99 	.word	0x08010f99
 8010f6c:	08010fa5 	.word	0x08010fa5
 8010f70:	08010fa5 	.word	0x08010fa5
 8010f74:	08010fa5 	.word	0x08010fa5
 8010f78:	08010f93 	.word	0x08010f93
 8010f7c:	08010fa5 	.word	0x08010fa5
 8010f80:	08010fa5 	.word	0x08010fa5
 8010f84:	08010fa5 	.word	0x08010fa5
 8010f88:	08010f9f 	.word	0x08010f9f
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	77fb      	strb	r3, [r7, #31]
 8010f90:	e118      	b.n	80111c4 <UART_SetConfig+0x348>
 8010f92:	2302      	movs	r3, #2
 8010f94:	77fb      	strb	r3, [r7, #31]
 8010f96:	e115      	b.n	80111c4 <UART_SetConfig+0x348>
 8010f98:	2304      	movs	r3, #4
 8010f9a:	77fb      	strb	r3, [r7, #31]
 8010f9c:	e112      	b.n	80111c4 <UART_SetConfig+0x348>
 8010f9e:	2308      	movs	r3, #8
 8010fa0:	77fb      	strb	r3, [r7, #31]
 8010fa2:	e10f      	b.n	80111c4 <UART_SetConfig+0x348>
 8010fa4:	2310      	movs	r3, #16
 8010fa6:	77fb      	strb	r3, [r7, #31]
 8010fa8:	e10c      	b.n	80111c4 <UART_SetConfig+0x348>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	4a68      	ldr	r2, [pc, #416]	@ (8011150 <UART_SetConfig+0x2d4>)
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d120      	bne.n	8010ff6 <UART_SetConfig+0x17a>
 8010fb4:	4b64      	ldr	r3, [pc, #400]	@ (8011148 <UART_SetConfig+0x2cc>)
 8010fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010fbe:	2b30      	cmp	r3, #48	@ 0x30
 8010fc0:	d013      	beq.n	8010fea <UART_SetConfig+0x16e>
 8010fc2:	2b30      	cmp	r3, #48	@ 0x30
 8010fc4:	d814      	bhi.n	8010ff0 <UART_SetConfig+0x174>
 8010fc6:	2b20      	cmp	r3, #32
 8010fc8:	d009      	beq.n	8010fde <UART_SetConfig+0x162>
 8010fca:	2b20      	cmp	r3, #32
 8010fcc:	d810      	bhi.n	8010ff0 <UART_SetConfig+0x174>
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d002      	beq.n	8010fd8 <UART_SetConfig+0x15c>
 8010fd2:	2b10      	cmp	r3, #16
 8010fd4:	d006      	beq.n	8010fe4 <UART_SetConfig+0x168>
 8010fd6:	e00b      	b.n	8010ff0 <UART_SetConfig+0x174>
 8010fd8:	2300      	movs	r3, #0
 8010fda:	77fb      	strb	r3, [r7, #31]
 8010fdc:	e0f2      	b.n	80111c4 <UART_SetConfig+0x348>
 8010fde:	2302      	movs	r3, #2
 8010fe0:	77fb      	strb	r3, [r7, #31]
 8010fe2:	e0ef      	b.n	80111c4 <UART_SetConfig+0x348>
 8010fe4:	2304      	movs	r3, #4
 8010fe6:	77fb      	strb	r3, [r7, #31]
 8010fe8:	e0ec      	b.n	80111c4 <UART_SetConfig+0x348>
 8010fea:	2308      	movs	r3, #8
 8010fec:	77fb      	strb	r3, [r7, #31]
 8010fee:	e0e9      	b.n	80111c4 <UART_SetConfig+0x348>
 8010ff0:	2310      	movs	r3, #16
 8010ff2:	77fb      	strb	r3, [r7, #31]
 8010ff4:	e0e6      	b.n	80111c4 <UART_SetConfig+0x348>
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	4a56      	ldr	r2, [pc, #344]	@ (8011154 <UART_SetConfig+0x2d8>)
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d120      	bne.n	8011042 <UART_SetConfig+0x1c6>
 8011000:	4b51      	ldr	r3, [pc, #324]	@ (8011148 <UART_SetConfig+0x2cc>)
 8011002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011006:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801100a:	2bc0      	cmp	r3, #192	@ 0xc0
 801100c:	d013      	beq.n	8011036 <UART_SetConfig+0x1ba>
 801100e:	2bc0      	cmp	r3, #192	@ 0xc0
 8011010:	d814      	bhi.n	801103c <UART_SetConfig+0x1c0>
 8011012:	2b80      	cmp	r3, #128	@ 0x80
 8011014:	d009      	beq.n	801102a <UART_SetConfig+0x1ae>
 8011016:	2b80      	cmp	r3, #128	@ 0x80
 8011018:	d810      	bhi.n	801103c <UART_SetConfig+0x1c0>
 801101a:	2b00      	cmp	r3, #0
 801101c:	d002      	beq.n	8011024 <UART_SetConfig+0x1a8>
 801101e:	2b40      	cmp	r3, #64	@ 0x40
 8011020:	d006      	beq.n	8011030 <UART_SetConfig+0x1b4>
 8011022:	e00b      	b.n	801103c <UART_SetConfig+0x1c0>
 8011024:	2300      	movs	r3, #0
 8011026:	77fb      	strb	r3, [r7, #31]
 8011028:	e0cc      	b.n	80111c4 <UART_SetConfig+0x348>
 801102a:	2302      	movs	r3, #2
 801102c:	77fb      	strb	r3, [r7, #31]
 801102e:	e0c9      	b.n	80111c4 <UART_SetConfig+0x348>
 8011030:	2304      	movs	r3, #4
 8011032:	77fb      	strb	r3, [r7, #31]
 8011034:	e0c6      	b.n	80111c4 <UART_SetConfig+0x348>
 8011036:	2308      	movs	r3, #8
 8011038:	77fb      	strb	r3, [r7, #31]
 801103a:	e0c3      	b.n	80111c4 <UART_SetConfig+0x348>
 801103c:	2310      	movs	r3, #16
 801103e:	77fb      	strb	r3, [r7, #31]
 8011040:	e0c0      	b.n	80111c4 <UART_SetConfig+0x348>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	4a44      	ldr	r2, [pc, #272]	@ (8011158 <UART_SetConfig+0x2dc>)
 8011048:	4293      	cmp	r3, r2
 801104a:	d125      	bne.n	8011098 <UART_SetConfig+0x21c>
 801104c:	4b3e      	ldr	r3, [pc, #248]	@ (8011148 <UART_SetConfig+0x2cc>)
 801104e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801105a:	d017      	beq.n	801108c <UART_SetConfig+0x210>
 801105c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011060:	d817      	bhi.n	8011092 <UART_SetConfig+0x216>
 8011062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011066:	d00b      	beq.n	8011080 <UART_SetConfig+0x204>
 8011068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801106c:	d811      	bhi.n	8011092 <UART_SetConfig+0x216>
 801106e:	2b00      	cmp	r3, #0
 8011070:	d003      	beq.n	801107a <UART_SetConfig+0x1fe>
 8011072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011076:	d006      	beq.n	8011086 <UART_SetConfig+0x20a>
 8011078:	e00b      	b.n	8011092 <UART_SetConfig+0x216>
 801107a:	2300      	movs	r3, #0
 801107c:	77fb      	strb	r3, [r7, #31]
 801107e:	e0a1      	b.n	80111c4 <UART_SetConfig+0x348>
 8011080:	2302      	movs	r3, #2
 8011082:	77fb      	strb	r3, [r7, #31]
 8011084:	e09e      	b.n	80111c4 <UART_SetConfig+0x348>
 8011086:	2304      	movs	r3, #4
 8011088:	77fb      	strb	r3, [r7, #31]
 801108a:	e09b      	b.n	80111c4 <UART_SetConfig+0x348>
 801108c:	2308      	movs	r3, #8
 801108e:	77fb      	strb	r3, [r7, #31]
 8011090:	e098      	b.n	80111c4 <UART_SetConfig+0x348>
 8011092:	2310      	movs	r3, #16
 8011094:	77fb      	strb	r3, [r7, #31]
 8011096:	e095      	b.n	80111c4 <UART_SetConfig+0x348>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	4a2f      	ldr	r2, [pc, #188]	@ (801115c <UART_SetConfig+0x2e0>)
 801109e:	4293      	cmp	r3, r2
 80110a0:	d125      	bne.n	80110ee <UART_SetConfig+0x272>
 80110a2:	4b29      	ldr	r3, [pc, #164]	@ (8011148 <UART_SetConfig+0x2cc>)
 80110a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80110a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80110ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80110b0:	d017      	beq.n	80110e2 <UART_SetConfig+0x266>
 80110b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80110b6:	d817      	bhi.n	80110e8 <UART_SetConfig+0x26c>
 80110b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80110bc:	d00b      	beq.n	80110d6 <UART_SetConfig+0x25a>
 80110be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80110c2:	d811      	bhi.n	80110e8 <UART_SetConfig+0x26c>
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d003      	beq.n	80110d0 <UART_SetConfig+0x254>
 80110c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80110cc:	d006      	beq.n	80110dc <UART_SetConfig+0x260>
 80110ce:	e00b      	b.n	80110e8 <UART_SetConfig+0x26c>
 80110d0:	2301      	movs	r3, #1
 80110d2:	77fb      	strb	r3, [r7, #31]
 80110d4:	e076      	b.n	80111c4 <UART_SetConfig+0x348>
 80110d6:	2302      	movs	r3, #2
 80110d8:	77fb      	strb	r3, [r7, #31]
 80110da:	e073      	b.n	80111c4 <UART_SetConfig+0x348>
 80110dc:	2304      	movs	r3, #4
 80110de:	77fb      	strb	r3, [r7, #31]
 80110e0:	e070      	b.n	80111c4 <UART_SetConfig+0x348>
 80110e2:	2308      	movs	r3, #8
 80110e4:	77fb      	strb	r3, [r7, #31]
 80110e6:	e06d      	b.n	80111c4 <UART_SetConfig+0x348>
 80110e8:	2310      	movs	r3, #16
 80110ea:	77fb      	strb	r3, [r7, #31]
 80110ec:	e06a      	b.n	80111c4 <UART_SetConfig+0x348>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	4a1b      	ldr	r2, [pc, #108]	@ (8011160 <UART_SetConfig+0x2e4>)
 80110f4:	4293      	cmp	r3, r2
 80110f6:	d138      	bne.n	801116a <UART_SetConfig+0x2ee>
 80110f8:	4b13      	ldr	r3, [pc, #76]	@ (8011148 <UART_SetConfig+0x2cc>)
 80110fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80110fe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8011102:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011106:	d017      	beq.n	8011138 <UART_SetConfig+0x2bc>
 8011108:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801110c:	d82a      	bhi.n	8011164 <UART_SetConfig+0x2e8>
 801110e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011112:	d00b      	beq.n	801112c <UART_SetConfig+0x2b0>
 8011114:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011118:	d824      	bhi.n	8011164 <UART_SetConfig+0x2e8>
 801111a:	2b00      	cmp	r3, #0
 801111c:	d003      	beq.n	8011126 <UART_SetConfig+0x2aa>
 801111e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011122:	d006      	beq.n	8011132 <UART_SetConfig+0x2b6>
 8011124:	e01e      	b.n	8011164 <UART_SetConfig+0x2e8>
 8011126:	2300      	movs	r3, #0
 8011128:	77fb      	strb	r3, [r7, #31]
 801112a:	e04b      	b.n	80111c4 <UART_SetConfig+0x348>
 801112c:	2302      	movs	r3, #2
 801112e:	77fb      	strb	r3, [r7, #31]
 8011130:	e048      	b.n	80111c4 <UART_SetConfig+0x348>
 8011132:	2304      	movs	r3, #4
 8011134:	77fb      	strb	r3, [r7, #31]
 8011136:	e045      	b.n	80111c4 <UART_SetConfig+0x348>
 8011138:	2308      	movs	r3, #8
 801113a:	77fb      	strb	r3, [r7, #31]
 801113c:	e042      	b.n	80111c4 <UART_SetConfig+0x348>
 801113e:	bf00      	nop
 8011140:	efff69f3 	.word	0xefff69f3
 8011144:	40011000 	.word	0x40011000
 8011148:	40023800 	.word	0x40023800
 801114c:	40004400 	.word	0x40004400
 8011150:	40004800 	.word	0x40004800
 8011154:	40004c00 	.word	0x40004c00
 8011158:	40005000 	.word	0x40005000
 801115c:	40011400 	.word	0x40011400
 8011160:	40007800 	.word	0x40007800
 8011164:	2310      	movs	r3, #16
 8011166:	77fb      	strb	r3, [r7, #31]
 8011168:	e02c      	b.n	80111c4 <UART_SetConfig+0x348>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	4a72      	ldr	r2, [pc, #456]	@ (8011338 <UART_SetConfig+0x4bc>)
 8011170:	4293      	cmp	r3, r2
 8011172:	d125      	bne.n	80111c0 <UART_SetConfig+0x344>
 8011174:	4b71      	ldr	r3, [pc, #452]	@ (801133c <UART_SetConfig+0x4c0>)
 8011176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801117a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801117e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8011182:	d017      	beq.n	80111b4 <UART_SetConfig+0x338>
 8011184:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8011188:	d817      	bhi.n	80111ba <UART_SetConfig+0x33e>
 801118a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801118e:	d00b      	beq.n	80111a8 <UART_SetConfig+0x32c>
 8011190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011194:	d811      	bhi.n	80111ba <UART_SetConfig+0x33e>
 8011196:	2b00      	cmp	r3, #0
 8011198:	d003      	beq.n	80111a2 <UART_SetConfig+0x326>
 801119a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801119e:	d006      	beq.n	80111ae <UART_SetConfig+0x332>
 80111a0:	e00b      	b.n	80111ba <UART_SetConfig+0x33e>
 80111a2:	2300      	movs	r3, #0
 80111a4:	77fb      	strb	r3, [r7, #31]
 80111a6:	e00d      	b.n	80111c4 <UART_SetConfig+0x348>
 80111a8:	2302      	movs	r3, #2
 80111aa:	77fb      	strb	r3, [r7, #31]
 80111ac:	e00a      	b.n	80111c4 <UART_SetConfig+0x348>
 80111ae:	2304      	movs	r3, #4
 80111b0:	77fb      	strb	r3, [r7, #31]
 80111b2:	e007      	b.n	80111c4 <UART_SetConfig+0x348>
 80111b4:	2308      	movs	r3, #8
 80111b6:	77fb      	strb	r3, [r7, #31]
 80111b8:	e004      	b.n	80111c4 <UART_SetConfig+0x348>
 80111ba:	2310      	movs	r3, #16
 80111bc:	77fb      	strb	r3, [r7, #31]
 80111be:	e001      	b.n	80111c4 <UART_SetConfig+0x348>
 80111c0:	2310      	movs	r3, #16
 80111c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	69db      	ldr	r3, [r3, #28]
 80111c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80111cc:	d15b      	bne.n	8011286 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80111ce:	7ffb      	ldrb	r3, [r7, #31]
 80111d0:	2b08      	cmp	r3, #8
 80111d2:	d828      	bhi.n	8011226 <UART_SetConfig+0x3aa>
 80111d4:	a201      	add	r2, pc, #4	@ (adr r2, 80111dc <UART_SetConfig+0x360>)
 80111d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111da:	bf00      	nop
 80111dc:	08011201 	.word	0x08011201
 80111e0:	08011209 	.word	0x08011209
 80111e4:	08011211 	.word	0x08011211
 80111e8:	08011227 	.word	0x08011227
 80111ec:	08011217 	.word	0x08011217
 80111f0:	08011227 	.word	0x08011227
 80111f4:	08011227 	.word	0x08011227
 80111f8:	08011227 	.word	0x08011227
 80111fc:	0801121f 	.word	0x0801121f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011200:	f7fd f98e 	bl	800e520 <HAL_RCC_GetPCLK1Freq>
 8011204:	61b8      	str	r0, [r7, #24]
        break;
 8011206:	e013      	b.n	8011230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011208:	f7fd f99e 	bl	800e548 <HAL_RCC_GetPCLK2Freq>
 801120c:	61b8      	str	r0, [r7, #24]
        break;
 801120e:	e00f      	b.n	8011230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011210:	4b4b      	ldr	r3, [pc, #300]	@ (8011340 <UART_SetConfig+0x4c4>)
 8011212:	61bb      	str	r3, [r7, #24]
        break;
 8011214:	e00c      	b.n	8011230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011216:	f7fd f871 	bl	800e2fc <HAL_RCC_GetSysClockFreq>
 801121a:	61b8      	str	r0, [r7, #24]
        break;
 801121c:	e008      	b.n	8011230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801121e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011222:	61bb      	str	r3, [r7, #24]
        break;
 8011224:	e004      	b.n	8011230 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8011226:	2300      	movs	r3, #0
 8011228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801122a:	2301      	movs	r3, #1
 801122c:	77bb      	strb	r3, [r7, #30]
        break;
 801122e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d074      	beq.n	8011320 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	005a      	lsls	r2, r3, #1
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	085b      	lsrs	r3, r3, #1
 8011240:	441a      	add	r2, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	fbb2 f3f3 	udiv	r3, r2, r3
 801124a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	2b0f      	cmp	r3, #15
 8011250:	d916      	bls.n	8011280 <UART_SetConfig+0x404>
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011258:	d212      	bcs.n	8011280 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	b29b      	uxth	r3, r3
 801125e:	f023 030f 	bic.w	r3, r3, #15
 8011262:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	085b      	lsrs	r3, r3, #1
 8011268:	b29b      	uxth	r3, r3
 801126a:	f003 0307 	and.w	r3, r3, #7
 801126e:	b29a      	uxth	r2, r3
 8011270:	89fb      	ldrh	r3, [r7, #14]
 8011272:	4313      	orrs	r3, r2
 8011274:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	89fa      	ldrh	r2, [r7, #14]
 801127c:	60da      	str	r2, [r3, #12]
 801127e:	e04f      	b.n	8011320 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8011280:	2301      	movs	r3, #1
 8011282:	77bb      	strb	r3, [r7, #30]
 8011284:	e04c      	b.n	8011320 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011286:	7ffb      	ldrb	r3, [r7, #31]
 8011288:	2b08      	cmp	r3, #8
 801128a:	d828      	bhi.n	80112de <UART_SetConfig+0x462>
 801128c:	a201      	add	r2, pc, #4	@ (adr r2, 8011294 <UART_SetConfig+0x418>)
 801128e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011292:	bf00      	nop
 8011294:	080112b9 	.word	0x080112b9
 8011298:	080112c1 	.word	0x080112c1
 801129c:	080112c9 	.word	0x080112c9
 80112a0:	080112df 	.word	0x080112df
 80112a4:	080112cf 	.word	0x080112cf
 80112a8:	080112df 	.word	0x080112df
 80112ac:	080112df 	.word	0x080112df
 80112b0:	080112df 	.word	0x080112df
 80112b4:	080112d7 	.word	0x080112d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80112b8:	f7fd f932 	bl	800e520 <HAL_RCC_GetPCLK1Freq>
 80112bc:	61b8      	str	r0, [r7, #24]
        break;
 80112be:	e013      	b.n	80112e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80112c0:	f7fd f942 	bl	800e548 <HAL_RCC_GetPCLK2Freq>
 80112c4:	61b8      	str	r0, [r7, #24]
        break;
 80112c6:	e00f      	b.n	80112e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80112c8:	4b1d      	ldr	r3, [pc, #116]	@ (8011340 <UART_SetConfig+0x4c4>)
 80112ca:	61bb      	str	r3, [r7, #24]
        break;
 80112cc:	e00c      	b.n	80112e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80112ce:	f7fd f815 	bl	800e2fc <HAL_RCC_GetSysClockFreq>
 80112d2:	61b8      	str	r0, [r7, #24]
        break;
 80112d4:	e008      	b.n	80112e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80112da:	61bb      	str	r3, [r7, #24]
        break;
 80112dc:	e004      	b.n	80112e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80112de:	2300      	movs	r3, #0
 80112e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80112e2:	2301      	movs	r3, #1
 80112e4:	77bb      	strb	r3, [r7, #30]
        break;
 80112e6:	bf00      	nop
    }

    if (pclk != 0U)
 80112e8:	69bb      	ldr	r3, [r7, #24]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d018      	beq.n	8011320 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	085a      	lsrs	r2, r3, #1
 80112f4:	69bb      	ldr	r3, [r7, #24]
 80112f6:	441a      	add	r2, r3
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011300:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	2b0f      	cmp	r3, #15
 8011306:	d909      	bls.n	801131c <UART_SetConfig+0x4a0>
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801130e:	d205      	bcs.n	801131c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	b29a      	uxth	r2, r3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	60da      	str	r2, [r3, #12]
 801131a:	e001      	b.n	8011320 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801131c:	2301      	movs	r3, #1
 801131e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2200      	movs	r2, #0
 8011324:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2200      	movs	r2, #0
 801132a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801132c:	7fbb      	ldrb	r3, [r7, #30]
}
 801132e:	4618      	mov	r0, r3
 8011330:	3720      	adds	r7, #32
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	40007c00 	.word	0x40007c00
 801133c:	40023800 	.word	0x40023800
 8011340:	00f42400 	.word	0x00f42400

08011344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011344:	b480      	push	{r7}
 8011346:	b083      	sub	sp, #12
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011350:	f003 0301 	and.w	r3, r3, #1
 8011354:	2b00      	cmp	r3, #0
 8011356:	d00a      	beq.n	801136e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	430a      	orrs	r2, r1
 801136c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011372:	f003 0302 	and.w	r3, r3, #2
 8011376:	2b00      	cmp	r3, #0
 8011378:	d00a      	beq.n	8011390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	430a      	orrs	r2, r1
 801138e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011394:	f003 0304 	and.w	r3, r3, #4
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00a      	beq.n	80113b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	430a      	orrs	r2, r1
 80113b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113b6:	f003 0308 	and.w	r3, r3, #8
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d00a      	beq.n	80113d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	430a      	orrs	r2, r1
 80113d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113d8:	f003 0310 	and.w	r3, r3, #16
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d00a      	beq.n	80113f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	689b      	ldr	r3, [r3, #8]
 80113e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	430a      	orrs	r2, r1
 80113f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113fa:	f003 0320 	and.w	r3, r3, #32
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d00a      	beq.n	8011418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	689b      	ldr	r3, [r3, #8]
 8011408:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	430a      	orrs	r2, r1
 8011416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801141c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011420:	2b00      	cmp	r3, #0
 8011422:	d01a      	beq.n	801145a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	430a      	orrs	r2, r1
 8011438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801143e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011442:	d10a      	bne.n	801145a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	430a      	orrs	r2, r1
 8011458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801145e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011462:	2b00      	cmp	r3, #0
 8011464:	d00a      	beq.n	801147c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	430a      	orrs	r2, r1
 801147a:	605a      	str	r2, [r3, #4]
  }
}
 801147c:	bf00      	nop
 801147e:	370c      	adds	r7, #12
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr

08011488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b086      	sub	sp, #24
 801148c:	af02      	add	r7, sp, #8
 801148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2200      	movs	r2, #0
 8011494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011498:	f7fa f902 	bl	800b6a0 <HAL_GetTick>
 801149c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f003 0308 	and.w	r3, r3, #8
 80114a8:	2b08      	cmp	r3, #8
 80114aa:	d10e      	bne.n	80114ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80114ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80114b0:	9300      	str	r3, [sp, #0]
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2200      	movs	r2, #0
 80114b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f000 f831 	bl	8011522 <UART_WaitOnFlagUntilTimeout>
 80114c0:	4603      	mov	r3, r0
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d001      	beq.n	80114ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80114c6:	2303      	movs	r3, #3
 80114c8:	e027      	b.n	801151a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f003 0304 	and.w	r3, r3, #4
 80114d4:	2b04      	cmp	r3, #4
 80114d6:	d10e      	bne.n	80114f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80114d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2200      	movs	r2, #0
 80114e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f000 f81b 	bl	8011522 <UART_WaitOnFlagUntilTimeout>
 80114ec:	4603      	mov	r3, r0
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d001      	beq.n	80114f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80114f2:	2303      	movs	r3, #3
 80114f4:	e011      	b.n	801151a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2220      	movs	r2, #32
 80114fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2220      	movs	r2, #32
 8011500:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2200      	movs	r2, #0
 8011508:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2200      	movs	r2, #0
 801150e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2200      	movs	r2, #0
 8011514:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8011518:	2300      	movs	r3, #0
}
 801151a:	4618      	mov	r0, r3
 801151c:	3710      	adds	r7, #16
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}

08011522 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011522:	b580      	push	{r7, lr}
 8011524:	b09c      	sub	sp, #112	@ 0x70
 8011526:	af00      	add	r7, sp, #0
 8011528:	60f8      	str	r0, [r7, #12]
 801152a:	60b9      	str	r1, [r7, #8]
 801152c:	603b      	str	r3, [r7, #0]
 801152e:	4613      	mov	r3, r2
 8011530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011532:	e0a7      	b.n	8011684 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801153a:	f000 80a3 	beq.w	8011684 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801153e:	f7fa f8af 	bl	800b6a0 <HAL_GetTick>
 8011542:	4602      	mov	r2, r0
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	1ad3      	subs	r3, r2, r3
 8011548:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801154a:	429a      	cmp	r2, r3
 801154c:	d302      	bcc.n	8011554 <UART_WaitOnFlagUntilTimeout+0x32>
 801154e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011550:	2b00      	cmp	r3, #0
 8011552:	d13f      	bne.n	80115d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801155a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801155c:	e853 3f00 	ldrex	r3, [r3]
 8011560:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011564:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011568:	667b      	str	r3, [r7, #100]	@ 0x64
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	461a      	mov	r2, r3
 8011570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011572:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011574:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011576:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011578:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801157a:	e841 2300 	strex	r3, r2, [r1]
 801157e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8011580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011582:	2b00      	cmp	r3, #0
 8011584:	d1e6      	bne.n	8011554 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	3308      	adds	r3, #8
 801158c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801158e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011590:	e853 3f00 	ldrex	r3, [r3]
 8011594:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011598:	f023 0301 	bic.w	r3, r3, #1
 801159c:	663b      	str	r3, [r7, #96]	@ 0x60
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	3308      	adds	r3, #8
 80115a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80115a6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80115a8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80115ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115ae:	e841 2300 	strex	r3, r2, [r1]
 80115b2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80115b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d1e5      	bne.n	8011586 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2220      	movs	r2, #32
 80115be:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	2220      	movs	r2, #32
 80115c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2200      	movs	r2, #0
 80115cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80115d0:	2303      	movs	r3, #3
 80115d2:	e068      	b.n	80116a6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	f003 0304 	and.w	r3, r3, #4
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d050      	beq.n	8011684 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	69db      	ldr	r3, [r3, #28]
 80115e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80115ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80115f0:	d148      	bne.n	8011684 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80115fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011604:	e853 3f00 	ldrex	r3, [r3]
 8011608:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801160c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8011610:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	461a      	mov	r2, r3
 8011618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801161a:	637b      	str	r3, [r7, #52]	@ 0x34
 801161c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801161e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011620:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011622:	e841 2300 	strex	r3, r2, [r1]
 8011626:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801162a:	2b00      	cmp	r3, #0
 801162c:	d1e6      	bne.n	80115fc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	3308      	adds	r3, #8
 8011634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	e853 3f00 	ldrex	r3, [r3]
 801163c:	613b      	str	r3, [r7, #16]
   return(result);
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	f023 0301 	bic.w	r3, r3, #1
 8011644:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	3308      	adds	r3, #8
 801164c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801164e:	623a      	str	r2, [r7, #32]
 8011650:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011652:	69f9      	ldr	r1, [r7, #28]
 8011654:	6a3a      	ldr	r2, [r7, #32]
 8011656:	e841 2300 	strex	r3, r2, [r1]
 801165a:	61bb      	str	r3, [r7, #24]
   return(result);
 801165c:	69bb      	ldr	r3, [r7, #24]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d1e5      	bne.n	801162e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2220      	movs	r2, #32
 8011666:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2220      	movs	r2, #32
 801166c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2220      	movs	r2, #32
 8011674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2200      	movs	r2, #0
 801167c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8011680:	2303      	movs	r3, #3
 8011682:	e010      	b.n	80116a6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	69da      	ldr	r2, [r3, #28]
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	4013      	ands	r3, r2
 801168e:	68ba      	ldr	r2, [r7, #8]
 8011690:	429a      	cmp	r2, r3
 8011692:	bf0c      	ite	eq
 8011694:	2301      	moveq	r3, #1
 8011696:	2300      	movne	r3, #0
 8011698:	b2db      	uxtb	r3, r3
 801169a:	461a      	mov	r2, r3
 801169c:	79fb      	ldrb	r3, [r7, #7]
 801169e:	429a      	cmp	r2, r3
 80116a0:	f43f af48 	beq.w	8011534 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80116a4:	2300      	movs	r3, #0
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3770      	adds	r7, #112	@ 0x70
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
	...

080116b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80116b0:	b480      	push	{r7}
 80116b2:	b097      	sub	sp, #92	@ 0x5c
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	4613      	mov	r3, r2
 80116bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	68ba      	ldr	r2, [r7, #8]
 80116c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	88fa      	ldrh	r2, [r7, #6]
 80116c8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	88fa      	ldrh	r2, [r7, #6]
 80116d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2200      	movs	r2, #0
 80116d8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	689b      	ldr	r3, [r3, #8]
 80116de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80116e2:	d10e      	bne.n	8011702 <UART_Start_Receive_IT+0x52>
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	691b      	ldr	r3, [r3, #16]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d105      	bne.n	80116f8 <UART_Start_Receive_IT+0x48>
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80116f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80116f6:	e02d      	b.n	8011754 <UART_Start_Receive_IT+0xa4>
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	22ff      	movs	r2, #255	@ 0xff
 80116fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011700:	e028      	b.n	8011754 <UART_Start_Receive_IT+0xa4>
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	689b      	ldr	r3, [r3, #8]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d10d      	bne.n	8011726 <UART_Start_Receive_IT+0x76>
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	691b      	ldr	r3, [r3, #16]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d104      	bne.n	801171c <UART_Start_Receive_IT+0x6c>
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	22ff      	movs	r2, #255	@ 0xff
 8011716:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801171a:	e01b      	b.n	8011754 <UART_Start_Receive_IT+0xa4>
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	227f      	movs	r2, #127	@ 0x7f
 8011720:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011724:	e016      	b.n	8011754 <UART_Start_Receive_IT+0xa4>
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	689b      	ldr	r3, [r3, #8]
 801172a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801172e:	d10d      	bne.n	801174c <UART_Start_Receive_IT+0x9c>
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	691b      	ldr	r3, [r3, #16]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d104      	bne.n	8011742 <UART_Start_Receive_IT+0x92>
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	227f      	movs	r2, #127	@ 0x7f
 801173c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011740:	e008      	b.n	8011754 <UART_Start_Receive_IT+0xa4>
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	223f      	movs	r2, #63	@ 0x3f
 8011746:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801174a:	e003      	b.n	8011754 <UART_Start_Receive_IT+0xa4>
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2200      	movs	r2, #0
 8011750:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2200      	movs	r2, #0
 8011758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2222      	movs	r2, #34	@ 0x22
 8011760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	3308      	adds	r3, #8
 801176a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801176c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801176e:	e853 3f00 	ldrex	r3, [r3]
 8011772:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011776:	f043 0301 	orr.w	r3, r3, #1
 801177a:	657b      	str	r3, [r7, #84]	@ 0x54
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	3308      	adds	r3, #8
 8011782:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011784:	64ba      	str	r2, [r7, #72]	@ 0x48
 8011786:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011788:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801178a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801178c:	e841 2300 	strex	r3, r2, [r1]
 8011790:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011794:	2b00      	cmp	r3, #0
 8011796:	d1e5      	bne.n	8011764 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	689b      	ldr	r3, [r3, #8]
 801179c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80117a0:	d107      	bne.n	80117b2 <UART_Start_Receive_IT+0x102>
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	691b      	ldr	r3, [r3, #16]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d103      	bne.n	80117b2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	4a21      	ldr	r2, [pc, #132]	@ (8011834 <UART_Start_Receive_IT+0x184>)
 80117ae:	669a      	str	r2, [r3, #104]	@ 0x68
 80117b0:	e002      	b.n	80117b8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	4a20      	ldr	r2, [pc, #128]	@ (8011838 <UART_Start_Receive_IT+0x188>)
 80117b6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	691b      	ldr	r3, [r3, #16]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d019      	beq.n	80117f4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117c8:	e853 3f00 	ldrex	r3, [r3]
 80117cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80117ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80117d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	461a      	mov	r2, r3
 80117dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117de:	637b      	str	r3, [r7, #52]	@ 0x34
 80117e0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80117e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80117e6:	e841 2300 	strex	r3, r2, [r1]
 80117ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80117ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d1e6      	bne.n	80117c0 <UART_Start_Receive_IT+0x110>
 80117f2:	e018      	b.n	8011826 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	e853 3f00 	ldrex	r3, [r3]
 8011800:	613b      	str	r3, [r7, #16]
   return(result);
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	f043 0320 	orr.w	r3, r3, #32
 8011808:	653b      	str	r3, [r7, #80]	@ 0x50
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	461a      	mov	r2, r3
 8011810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011812:	623b      	str	r3, [r7, #32]
 8011814:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011816:	69f9      	ldr	r1, [r7, #28]
 8011818:	6a3a      	ldr	r2, [r7, #32]
 801181a:	e841 2300 	strex	r3, r2, [r1]
 801181e:	61bb      	str	r3, [r7, #24]
   return(result);
 8011820:	69bb      	ldr	r3, [r7, #24]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d1e6      	bne.n	80117f4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8011826:	2300      	movs	r3, #0
}
 8011828:	4618      	mov	r0, r3
 801182a:	375c      	adds	r7, #92	@ 0x5c
 801182c:	46bd      	mov	sp, r7
 801182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011832:	4770      	bx	lr
 8011834:	08011c67 	.word	0x08011c67
 8011838:	08011b01 	.word	0x08011b01

0801183c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801183c:	b480      	push	{r7}
 801183e:	b089      	sub	sp, #36	@ 0x24
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	e853 3f00 	ldrex	r3, [r3]
 8011850:	60bb      	str	r3, [r7, #8]
   return(result);
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011858:	61fb      	str	r3, [r7, #28]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	461a      	mov	r2, r3
 8011860:	69fb      	ldr	r3, [r7, #28]
 8011862:	61bb      	str	r3, [r7, #24]
 8011864:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011866:	6979      	ldr	r1, [r7, #20]
 8011868:	69ba      	ldr	r2, [r7, #24]
 801186a:	e841 2300 	strex	r3, r2, [r1]
 801186e:	613b      	str	r3, [r7, #16]
   return(result);
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d1e6      	bne.n	8011844 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2220      	movs	r2, #32
 801187a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801187c:	bf00      	nop
 801187e:	3724      	adds	r7, #36	@ 0x24
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr

08011888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011888:	b480      	push	{r7}
 801188a:	b095      	sub	sp, #84	@ 0x54
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011898:	e853 3f00 	ldrex	r3, [r3]
 801189c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801189e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80118a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	461a      	mov	r2, r3
 80118ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80118b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80118b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80118b6:	e841 2300 	strex	r3, r2, [r1]
 80118ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80118bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d1e6      	bne.n	8011890 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	3308      	adds	r3, #8
 80118c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ca:	6a3b      	ldr	r3, [r7, #32]
 80118cc:	e853 3f00 	ldrex	r3, [r3]
 80118d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	f023 0301 	bic.w	r3, r3, #1
 80118d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	3308      	adds	r3, #8
 80118e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80118e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80118e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80118e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118ea:	e841 2300 	strex	r3, r2, [r1]
 80118ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80118f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d1e5      	bne.n	80118c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d118      	bne.n	8011930 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	e853 3f00 	ldrex	r3, [r3]
 801190a:	60bb      	str	r3, [r7, #8]
   return(result);
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	f023 0310 	bic.w	r3, r3, #16
 8011912:	647b      	str	r3, [r7, #68]	@ 0x44
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	461a      	mov	r2, r3
 801191a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801191c:	61bb      	str	r3, [r7, #24]
 801191e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011920:	6979      	ldr	r1, [r7, #20]
 8011922:	69ba      	ldr	r2, [r7, #24]
 8011924:	e841 2300 	strex	r3, r2, [r1]
 8011928:	613b      	str	r3, [r7, #16]
   return(result);
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d1e6      	bne.n	80118fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2220      	movs	r2, #32
 8011934:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2200      	movs	r2, #0
 8011942:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8011944:	bf00      	nop
 8011946:	3754      	adds	r7, #84	@ 0x54
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b090      	sub	sp, #64	@ 0x40
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801195c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	69db      	ldr	r3, [r3, #28]
 8011962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011966:	d037      	beq.n	80119d8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801196a:	2200      	movs	r2, #0
 801196c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	3308      	adds	r3, #8
 8011976:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801197a:	e853 3f00 	ldrex	r3, [r3]
 801197e:	623b      	str	r3, [r7, #32]
   return(result);
 8011980:	6a3b      	ldr	r3, [r7, #32]
 8011982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011986:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	3308      	adds	r3, #8
 801198e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011990:	633a      	str	r2, [r7, #48]	@ 0x30
 8011992:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011994:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011998:	e841 2300 	strex	r3, r2, [r1]
 801199c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801199e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d1e5      	bne.n	8011970 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80119a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	e853 3f00 	ldrex	r3, [r3]
 80119b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80119ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	461a      	mov	r2, r3
 80119c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119c2:	61fb      	str	r3, [r7, #28]
 80119c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119c6:	69b9      	ldr	r1, [r7, #24]
 80119c8:	69fa      	ldr	r2, [r7, #28]
 80119ca:	e841 2300 	strex	r3, r2, [r1]
 80119ce:	617b      	str	r3, [r7, #20]
   return(result);
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d1e6      	bne.n	80119a4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80119d6:	e002      	b.n	80119de <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80119d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80119da:	f7f6 faff 	bl	8007fdc <HAL_UART_TxCpltCallback>
}
 80119de:	bf00      	nop
 80119e0:	3740      	adds	r7, #64	@ 0x40
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}

080119e6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80119e6:	b580      	push	{r7, lr}
 80119e8:	b084      	sub	sp, #16
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	f7ff fa17 	bl	8010e28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80119fa:	bf00      	nop
 80119fc:	3710      	adds	r7, #16
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}

08011a02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011a02:	b580      	push	{r7, lr}
 8011a04:	b086      	sub	sp, #24
 8011a06:	af00      	add	r7, sp, #0
 8011a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a0e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011a14:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a1c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a28:	2b80      	cmp	r3, #128	@ 0x80
 8011a2a:	d109      	bne.n	8011a40 <UART_DMAError+0x3e>
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	2b21      	cmp	r3, #33	@ 0x21
 8011a30:	d106      	bne.n	8011a40 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	2200      	movs	r2, #0
 8011a36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8011a3a:	6978      	ldr	r0, [r7, #20]
 8011a3c:	f7ff fefe 	bl	801183c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	689b      	ldr	r3, [r3, #8]
 8011a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a4a:	2b40      	cmp	r3, #64	@ 0x40
 8011a4c:	d109      	bne.n	8011a62 <UART_DMAError+0x60>
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	2b22      	cmp	r3, #34	@ 0x22
 8011a52:	d106      	bne.n	8011a62 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	2200      	movs	r2, #0
 8011a58:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8011a5c:	6978      	ldr	r0, [r7, #20]
 8011a5e:	f7ff ff13 	bl	8011888 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a68:	f043 0210 	orr.w	r2, r3, #16
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a72:	6978      	ldr	r0, [r7, #20]
 8011a74:	f7ff f9e2 	bl	8010e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a78:	bf00      	nop
 8011a7a:	3718      	adds	r7, #24
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b084      	sub	sp, #16
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2200      	movs	r2, #0
 8011a92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a9e:	68f8      	ldr	r0, [r7, #12]
 8011aa0:	f7ff f9cc 	bl	8010e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011aa4:	bf00      	nop
 8011aa6:	3710      	adds	r7, #16
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}

08011aac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b088      	sub	sp, #32
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	e853 3f00 	ldrex	r3, [r3]
 8011ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ac8:	61fb      	str	r3, [r7, #28]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	69fb      	ldr	r3, [r7, #28]
 8011ad2:	61bb      	str	r3, [r7, #24]
 8011ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ad6:	6979      	ldr	r1, [r7, #20]
 8011ad8:	69ba      	ldr	r2, [r7, #24]
 8011ada:	e841 2300 	strex	r3, r2, [r1]
 8011ade:	613b      	str	r3, [r7, #16]
   return(result);
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d1e6      	bne.n	8011ab4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2220      	movs	r2, #32
 8011aea:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2200      	movs	r2, #0
 8011af0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f7f6 fa72 	bl	8007fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011af8:	bf00      	nop
 8011afa:	3720      	adds	r7, #32
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b096      	sub	sp, #88	@ 0x58
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011b0e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011b18:	2b22      	cmp	r3, #34	@ 0x22
 8011b1a:	f040 8098 	bne.w	8011c4e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b24:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011b28:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8011b2c:	b2d9      	uxtb	r1, r3
 8011b2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8011b32:	b2da      	uxtb	r2, r3
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b38:	400a      	ands	r2, r1
 8011b3a:	b2d2      	uxtb	r2, r2
 8011b3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b42:	1c5a      	adds	r2, r3, #1
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	3b01      	subs	r3, #1
 8011b52:	b29a      	uxth	r2, r3
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d17b      	bne.n	8011c5e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b6e:	e853 3f00 	ldrex	r3, [r3]
 8011b72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	461a      	mov	r2, r3
 8011b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b8c:	e841 2300 	strex	r3, r2, [r1]
 8011b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d1e6      	bne.n	8011b66 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	3308      	adds	r3, #8
 8011b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba2:	e853 3f00 	ldrex	r3, [r3]
 8011ba6:	623b      	str	r3, [r7, #32]
   return(result);
 8011ba8:	6a3b      	ldr	r3, [r7, #32]
 8011baa:	f023 0301 	bic.w	r3, r3, #1
 8011bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	3308      	adds	r3, #8
 8011bb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011bb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8011bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bc0:	e841 2300 	strex	r3, r2, [r1]
 8011bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1e5      	bne.n	8011b98 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2220      	movs	r2, #32
 8011bd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011be4:	2b01      	cmp	r3, #1
 8011be6:	d12e      	bne.n	8011c46 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2200      	movs	r2, #0
 8011bec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	e853 3f00 	ldrex	r3, [r3]
 8011bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	f023 0310 	bic.w	r3, r3, #16
 8011c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	461a      	mov	r2, r3
 8011c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c0c:	61fb      	str	r3, [r7, #28]
 8011c0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c10:	69b9      	ldr	r1, [r7, #24]
 8011c12:	69fa      	ldr	r2, [r7, #28]
 8011c14:	e841 2300 	strex	r3, r2, [r1]
 8011c18:	617b      	str	r3, [r7, #20]
   return(result);
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d1e6      	bne.n	8011bee <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	69db      	ldr	r3, [r3, #28]
 8011c26:	f003 0310 	and.w	r3, r3, #16
 8011c2a:	2b10      	cmp	r3, #16
 8011c2c:	d103      	bne.n	8011c36 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	2210      	movs	r2, #16
 8011c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011c3c:	4619      	mov	r1, r3
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f7ff f906 	bl	8010e50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011c44:	e00b      	b.n	8011c5e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7f6 f99c 	bl	8007f84 <HAL_UART_RxCpltCallback>
}
 8011c4c:	e007      	b.n	8011c5e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	699a      	ldr	r2, [r3, #24]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f042 0208 	orr.w	r2, r2, #8
 8011c5c:	619a      	str	r2, [r3, #24]
}
 8011c5e:	bf00      	nop
 8011c60:	3758      	adds	r7, #88	@ 0x58
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}

08011c66 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b096      	sub	sp, #88	@ 0x58
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011c74:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011c7e:	2b22      	cmp	r3, #34	@ 0x22
 8011c80:	f040 8098 	bne.w	8011db4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c8a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c92:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8011c94:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8011c98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8011c9c:	4013      	ands	r3, r2
 8011c9e:	b29a      	uxth	r2, r3
 8011ca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ca2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ca8:	1c9a      	adds	r2, r3, #2
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	3b01      	subs	r3, #1
 8011cb8:	b29a      	uxth	r2, r3
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011cc6:	b29b      	uxth	r3, r3
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d17b      	bne.n	8011dc4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cd4:	e853 3f00 	ldrex	r3, [r3]
 8011cd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cea:	643b      	str	r3, [r7, #64]	@ 0x40
 8011cec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011cf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011cf2:	e841 2300 	strex	r3, r2, [r1]
 8011cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d1e6      	bne.n	8011ccc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	3308      	adds	r3, #8
 8011d04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	e853 3f00 	ldrex	r3, [r3]
 8011d0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d0e:	69fb      	ldr	r3, [r7, #28]
 8011d10:	f023 0301 	bic.w	r3, r3, #1
 8011d14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	3308      	adds	r3, #8
 8011d1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011d1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011d20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011d24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d26:	e841 2300 	strex	r3, r2, [r1]
 8011d2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d1e5      	bne.n	8011cfe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2220      	movs	r2, #32
 8011d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2200      	movs	r2, #0
 8011d44:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d12e      	bne.n	8011dac <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2200      	movs	r2, #0
 8011d52:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	e853 3f00 	ldrex	r3, [r3]
 8011d60:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	f023 0310 	bic.w	r3, r3, #16
 8011d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	461a      	mov	r2, r3
 8011d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d72:	61bb      	str	r3, [r7, #24]
 8011d74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d76:	6979      	ldr	r1, [r7, #20]
 8011d78:	69ba      	ldr	r2, [r7, #24]
 8011d7a:	e841 2300 	strex	r3, r2, [r1]
 8011d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d1e6      	bne.n	8011d54 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	69db      	ldr	r3, [r3, #28]
 8011d8c:	f003 0310 	and.w	r3, r3, #16
 8011d90:	2b10      	cmp	r3, #16
 8011d92:	d103      	bne.n	8011d9c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2210      	movs	r2, #16
 8011d9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011da2:	4619      	mov	r1, r3
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f7ff f853 	bl	8010e50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011daa:	e00b      	b.n	8011dc4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f7f6 f8e9 	bl	8007f84 <HAL_UART_RxCpltCallback>
}
 8011db2:	e007      	b.n	8011dc4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	699a      	ldr	r2, [r3, #24]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f042 0208 	orr.w	r2, r2, #8
 8011dc2:	619a      	str	r2, [r3, #24]
}
 8011dc4:	bf00      	nop
 8011dc6:	3758      	adds	r7, #88	@ 0x58
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <memset>:
 8011dcc:	4402      	add	r2, r0
 8011dce:	4603      	mov	r3, r0
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	d100      	bne.n	8011dd6 <memset+0xa>
 8011dd4:	4770      	bx	lr
 8011dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8011dda:	e7f9      	b.n	8011dd0 <memset+0x4>

08011ddc <__libc_init_array>:
 8011ddc:	b570      	push	{r4, r5, r6, lr}
 8011dde:	4d0d      	ldr	r5, [pc, #52]	@ (8011e14 <__libc_init_array+0x38>)
 8011de0:	4c0d      	ldr	r4, [pc, #52]	@ (8011e18 <__libc_init_array+0x3c>)
 8011de2:	1b64      	subs	r4, r4, r5
 8011de4:	10a4      	asrs	r4, r4, #2
 8011de6:	2600      	movs	r6, #0
 8011de8:	42a6      	cmp	r6, r4
 8011dea:	d109      	bne.n	8011e00 <__libc_init_array+0x24>
 8011dec:	4d0b      	ldr	r5, [pc, #44]	@ (8011e1c <__libc_init_array+0x40>)
 8011dee:	4c0c      	ldr	r4, [pc, #48]	@ (8011e20 <__libc_init_array+0x44>)
 8011df0:	f000 f912 	bl	8012018 <_init>
 8011df4:	1b64      	subs	r4, r4, r5
 8011df6:	10a4      	asrs	r4, r4, #2
 8011df8:	2600      	movs	r6, #0
 8011dfa:	42a6      	cmp	r6, r4
 8011dfc:	d105      	bne.n	8011e0a <__libc_init_array+0x2e>
 8011dfe:	bd70      	pop	{r4, r5, r6, pc}
 8011e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e04:	4798      	blx	r3
 8011e06:	3601      	adds	r6, #1
 8011e08:	e7ee      	b.n	8011de8 <__libc_init_array+0xc>
 8011e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e0e:	4798      	blx	r3
 8011e10:	3601      	adds	r6, #1
 8011e12:	e7f2      	b.n	8011dfa <__libc_init_array+0x1e>
 8011e14:	08012058 	.word	0x08012058
 8011e18:	08012058 	.word	0x08012058
 8011e1c:	08012058 	.word	0x08012058
 8011e20:	0801205c 	.word	0x0801205c

08011e24 <memcpy>:
 8011e24:	440a      	add	r2, r1
 8011e26:	4291      	cmp	r1, r2
 8011e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e2c:	d100      	bne.n	8011e30 <memcpy+0xc>
 8011e2e:	4770      	bx	lr
 8011e30:	b510      	push	{r4, lr}
 8011e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e3a:	4291      	cmp	r1, r2
 8011e3c:	d1f9      	bne.n	8011e32 <memcpy+0xe>
 8011e3e:	bd10      	pop	{r4, pc}

08011e40 <ceil>:
 8011e40:	ee10 1a90 	vmov	r1, s1
 8011e44:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011e48:	ee10 0a10 	vmov	r0, s0
 8011e4c:	f2a2 33ff 	subw	r3, r2, #1023	@ 0x3ff
 8011e50:	2b13      	cmp	r3, #19
 8011e52:	b530      	push	{r4, r5, lr}
 8011e54:	4605      	mov	r5, r0
 8011e56:	dc2e      	bgt.n	8011eb6 <ceil+0x76>
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	da12      	bge.n	8011e82 <ceil+0x42>
 8011e5c:	ed9f 7b2e 	vldr	d7, [pc, #184]	@ 8011f18 <ceil+0xd8>
 8011e60:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011e64:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e6c:	dd04      	ble.n	8011e78 <ceil+0x38>
 8011e6e:	2900      	cmp	r1, #0
 8011e70:	db4b      	blt.n	8011f0a <ceil+0xca>
 8011e72:	4308      	orrs	r0, r1
 8011e74:	d14d      	bne.n	8011f12 <ceil+0xd2>
 8011e76:	4601      	mov	r1, r0
 8011e78:	460b      	mov	r3, r1
 8011e7a:	4602      	mov	r2, r0
 8011e7c:	ec43 2b10 	vmov	d0, r2, r3
 8011e80:	e020      	b.n	8011ec4 <ceil+0x84>
 8011e82:	4a27      	ldr	r2, [pc, #156]	@ (8011f20 <ceil+0xe0>)
 8011e84:	411a      	asrs	r2, r3
 8011e86:	ea01 0402 	and.w	r4, r1, r2
 8011e8a:	4304      	orrs	r4, r0
 8011e8c:	d01a      	beq.n	8011ec4 <ceil+0x84>
 8011e8e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8011f18 <ceil+0xd8>
 8011e92:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011e96:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9e:	ddeb      	ble.n	8011e78 <ceil+0x38>
 8011ea0:	2900      	cmp	r1, #0
 8011ea2:	bfc2      	ittt	gt
 8011ea4:	f44f 1080 	movgt.w	r0, #1048576	@ 0x100000
 8011ea8:	fa40 f303 	asrgt.w	r3, r0, r3
 8011eac:	18c9      	addgt	r1, r1, r3
 8011eae:	ea21 0102 	bic.w	r1, r1, r2
 8011eb2:	2000      	movs	r0, #0
 8011eb4:	e7e0      	b.n	8011e78 <ceil+0x38>
 8011eb6:	2b33      	cmp	r3, #51	@ 0x33
 8011eb8:	dd05      	ble.n	8011ec6 <ceil+0x86>
 8011eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011ebe:	d101      	bne.n	8011ec4 <ceil+0x84>
 8011ec0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011ec4:	bd30      	pop	{r4, r5, pc}
 8011ec6:	f2a2 4413 	subw	r4, r2, #1043	@ 0x413
 8011eca:	f04f 32ff 	mov.w	r2, #4294967295
 8011ece:	40e2      	lsrs	r2, r4
 8011ed0:	4210      	tst	r0, r2
 8011ed2:	d0f7      	beq.n	8011ec4 <ceil+0x84>
 8011ed4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8011f18 <ceil+0xd8>
 8011ed8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011edc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee4:	ddc8      	ble.n	8011e78 <ceil+0x38>
 8011ee6:	2900      	cmp	r1, #0
 8011ee8:	dd02      	ble.n	8011ef0 <ceil+0xb0>
 8011eea:	2b14      	cmp	r3, #20
 8011eec:	d103      	bne.n	8011ef6 <ceil+0xb6>
 8011eee:	3101      	adds	r1, #1
 8011ef0:	ea20 0002 	bic.w	r0, r0, r2
 8011ef4:	e7c0      	b.n	8011e78 <ceil+0x38>
 8011ef6:	2401      	movs	r4, #1
 8011ef8:	f1c3 0334 	rsb	r3, r3, #52	@ 0x34
 8011efc:	fa04 f303 	lsl.w	r3, r4, r3
 8011f00:	4418      	add	r0, r3
 8011f02:	4285      	cmp	r5, r0
 8011f04:	bf88      	it	hi
 8011f06:	1909      	addhi	r1, r1, r4
 8011f08:	e7f2      	b.n	8011ef0 <ceil+0xb0>
 8011f0a:	2000      	movs	r0, #0
 8011f0c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8011f10:	e7b2      	b.n	8011e78 <ceil+0x38>
 8011f12:	4904      	ldr	r1, [pc, #16]	@ (8011f24 <ceil+0xe4>)
 8011f14:	2000      	movs	r0, #0
 8011f16:	e7af      	b.n	8011e78 <ceil+0x38>
 8011f18:	8800759c 	.word	0x8800759c
 8011f1c:	7e37e43c 	.word	0x7e37e43c
 8011f20:	000fffff 	.word	0x000fffff
 8011f24:	3ff00000 	.word	0x3ff00000

08011f28 <floor>:
 8011f28:	ee10 3a90 	vmov	r3, s1
 8011f2c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8011f30:	ee10 2a10 	vmov	r2, s0
 8011f34:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8011f38:	2913      	cmp	r1, #19
 8011f3a:	b530      	push	{r4, r5, lr}
 8011f3c:	4615      	mov	r5, r2
 8011f3e:	dc33      	bgt.n	8011fa8 <floor+0x80>
 8011f40:	2900      	cmp	r1, #0
 8011f42:	da18      	bge.n	8011f76 <floor+0x4e>
 8011f44:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8012008 <floor+0xe0>
 8011f48:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011f4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f54:	dd0a      	ble.n	8011f6c <floor+0x44>
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	da50      	bge.n	8011ffc <floor+0xd4>
 8011f5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	2200      	movs	r2, #0
 8011f62:	4293      	cmp	r3, r2
 8011f64:	4b2a      	ldr	r3, [pc, #168]	@ (8012010 <floor+0xe8>)
 8011f66:	bf08      	it	eq
 8011f68:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	4610      	mov	r0, r2
 8011f70:	ec41 0b10 	vmov	d0, r0, r1
 8011f74:	e01f      	b.n	8011fb6 <floor+0x8e>
 8011f76:	4827      	ldr	r0, [pc, #156]	@ (8012014 <floor+0xec>)
 8011f78:	4108      	asrs	r0, r1
 8011f7a:	ea03 0400 	and.w	r4, r3, r0
 8011f7e:	4314      	orrs	r4, r2
 8011f80:	d019      	beq.n	8011fb6 <floor+0x8e>
 8011f82:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012008 <floor+0xe0>
 8011f86:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011f8a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f92:	ddeb      	ble.n	8011f6c <floor+0x44>
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	bfbe      	ittt	lt
 8011f98:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8011f9c:	410a      	asrlt	r2, r1
 8011f9e:	189b      	addlt	r3, r3, r2
 8011fa0:	ea23 0300 	bic.w	r3, r3, r0
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	e7e1      	b.n	8011f6c <floor+0x44>
 8011fa8:	2933      	cmp	r1, #51	@ 0x33
 8011faa:	dd05      	ble.n	8011fb8 <floor+0x90>
 8011fac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011fb0:	d101      	bne.n	8011fb6 <floor+0x8e>
 8011fb2:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011fb6:	bd30      	pop	{r4, r5, pc}
 8011fb8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8011fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc0:	40e0      	lsrs	r0, r4
 8011fc2:	4210      	tst	r0, r2
 8011fc4:	d0f7      	beq.n	8011fb6 <floor+0x8e>
 8011fc6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8012008 <floor+0xe0>
 8011fca:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011fce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd6:	ddc9      	ble.n	8011f6c <floor+0x44>
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	da02      	bge.n	8011fe2 <floor+0xba>
 8011fdc:	2914      	cmp	r1, #20
 8011fde:	d103      	bne.n	8011fe8 <floor+0xc0>
 8011fe0:	3301      	adds	r3, #1
 8011fe2:	ea22 0200 	bic.w	r2, r2, r0
 8011fe6:	e7c1      	b.n	8011f6c <floor+0x44>
 8011fe8:	2401      	movs	r4, #1
 8011fea:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8011fee:	fa04 f101 	lsl.w	r1, r4, r1
 8011ff2:	440a      	add	r2, r1
 8011ff4:	42aa      	cmp	r2, r5
 8011ff6:	bf38      	it	cc
 8011ff8:	191b      	addcc	r3, r3, r4
 8011ffa:	e7f2      	b.n	8011fe2 <floor+0xba>
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	4613      	mov	r3, r2
 8012000:	e7b4      	b.n	8011f6c <floor+0x44>
 8012002:	bf00      	nop
 8012004:	f3af 8000 	nop.w
 8012008:	8800759c 	.word	0x8800759c
 801200c:	7e37e43c 	.word	0x7e37e43c
 8012010:	bff00000 	.word	0xbff00000
 8012014:	000fffff 	.word	0x000fffff

08012018 <_init>:
 8012018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801201a:	bf00      	nop
 801201c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801201e:	bc08      	pop	{r3}
 8012020:	469e      	mov	lr, r3
 8012022:	4770      	bx	lr

08012024 <_fini>:
 8012024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012026:	bf00      	nop
 8012028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801202a:	bc08      	pop	{r3}
 801202c:	469e      	mov	lr, r3
 801202e:	4770      	bx	lr
