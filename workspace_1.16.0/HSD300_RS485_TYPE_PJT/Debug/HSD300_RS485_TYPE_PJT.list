
HSD300_RS485_TYPE_PJT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f410  080081d8  080081d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080175e8  080175e8  000105e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017630  08017630  0001104c  2**0
                  CONTENTS
  4 .ARM          00000008  08017630  08017630  00010630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017638  08017638  0001104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017638  08017638  00010638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801763c  0801763c  0001063c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08017640  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f4  20000050  0801768c  00011050  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a44  0801768c  00011a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001104c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274f8  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052ae  00000000  00000000  00038574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e58  00000000  00000000  0003d828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017ca  00000000  00000000  0003f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002963a  00000000  00000000  00040e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b65f  00000000  00000000  0006a484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001071ea  00000000  00000000  00095ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019cccd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008418  00000000  00000000  0019cd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001a5128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d8 <__do_global_dtors_aux>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	4c05      	ldr	r4, [pc, #20]	@ (80081f0 <__do_global_dtors_aux+0x18>)
 80081dc:	7823      	ldrb	r3, [r4, #0]
 80081de:	b933      	cbnz	r3, 80081ee <__do_global_dtors_aux+0x16>
 80081e0:	4b04      	ldr	r3, [pc, #16]	@ (80081f4 <__do_global_dtors_aux+0x1c>)
 80081e2:	b113      	cbz	r3, 80081ea <__do_global_dtors_aux+0x12>
 80081e4:	4804      	ldr	r0, [pc, #16]	@ (80081f8 <__do_global_dtors_aux+0x20>)
 80081e6:	f3af 8000 	nop.w
 80081ea:	2301      	movs	r3, #1
 80081ec:	7023      	strb	r3, [r4, #0]
 80081ee:	bd10      	pop	{r4, pc}
 80081f0:	20000050 	.word	0x20000050
 80081f4:	00000000 	.word	0x00000000
 80081f8:	080175d0 	.word	0x080175d0

080081fc <frame_dummy>:
 80081fc:	b508      	push	{r3, lr}
 80081fe:	4b03      	ldr	r3, [pc, #12]	@ (800820c <frame_dummy+0x10>)
 8008200:	b11b      	cbz	r3, 800820a <frame_dummy+0xe>
 8008202:	4903      	ldr	r1, [pc, #12]	@ (8008210 <frame_dummy+0x14>)
 8008204:	4803      	ldr	r0, [pc, #12]	@ (8008214 <frame_dummy+0x18>)
 8008206:	f3af 8000 	nop.w
 800820a:	bd08      	pop	{r3, pc}
 800820c:	00000000 	.word	0x00000000
 8008210:	20000054 	.word	0x20000054
 8008214:	080175d0 	.word	0x080175d0

08008218 <__aeabi_drsub>:
 8008218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800821c:	e002      	b.n	8008224 <__adddf3>
 800821e:	bf00      	nop

08008220 <__aeabi_dsub>:
 8008220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08008224 <__adddf3>:
 8008224:	b530      	push	{r4, r5, lr}
 8008226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800822a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800822e:	ea94 0f05 	teq	r4, r5
 8008232:	bf08      	it	eq
 8008234:	ea90 0f02 	teqeq	r0, r2
 8008238:	bf1f      	itttt	ne
 800823a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800823e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800824a:	f000 80e2 	beq.w	8008412 <__adddf3+0x1ee>
 800824e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008256:	bfb8      	it	lt
 8008258:	426d      	neglt	r5, r5
 800825a:	dd0c      	ble.n	8008276 <__adddf3+0x52>
 800825c:	442c      	add	r4, r5
 800825e:	ea80 0202 	eor.w	r2, r0, r2
 8008262:	ea81 0303 	eor.w	r3, r1, r3
 8008266:	ea82 0000 	eor.w	r0, r2, r0
 800826a:	ea83 0101 	eor.w	r1, r3, r1
 800826e:	ea80 0202 	eor.w	r2, r0, r2
 8008272:	ea81 0303 	eor.w	r3, r1, r3
 8008276:	2d36      	cmp	r5, #54	@ 0x36
 8008278:	bf88      	it	hi
 800827a:	bd30      	pophi	{r4, r5, pc}
 800827c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800828c:	d002      	beq.n	8008294 <__adddf3+0x70>
 800828e:	4240      	negs	r0, r0
 8008290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800829c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80082a0:	d002      	beq.n	80082a8 <__adddf3+0x84>
 80082a2:	4252      	negs	r2, r2
 80082a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80082a8:	ea94 0f05 	teq	r4, r5
 80082ac:	f000 80a7 	beq.w	80083fe <__adddf3+0x1da>
 80082b0:	f1a4 0401 	sub.w	r4, r4, #1
 80082b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80082b8:	db0d      	blt.n	80082d6 <__adddf3+0xb2>
 80082ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80082be:	fa22 f205 	lsr.w	r2, r2, r5
 80082c2:	1880      	adds	r0, r0, r2
 80082c4:	f141 0100 	adc.w	r1, r1, #0
 80082c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80082cc:	1880      	adds	r0, r0, r2
 80082ce:	fa43 f305 	asr.w	r3, r3, r5
 80082d2:	4159      	adcs	r1, r3
 80082d4:	e00e      	b.n	80082f4 <__adddf3+0xd0>
 80082d6:	f1a5 0520 	sub.w	r5, r5, #32
 80082da:	f10e 0e20 	add.w	lr, lr, #32
 80082de:	2a01      	cmp	r2, #1
 80082e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80082e4:	bf28      	it	cs
 80082e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80082ea:	fa43 f305 	asr.w	r3, r3, r5
 80082ee:	18c0      	adds	r0, r0, r3
 80082f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80082f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80082f8:	d507      	bpl.n	800830a <__adddf3+0xe6>
 80082fa:	f04f 0e00 	mov.w	lr, #0
 80082fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8008302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008306:	eb6e 0101 	sbc.w	r1, lr, r1
 800830a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800830e:	d31b      	bcc.n	8008348 <__adddf3+0x124>
 8008310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8008314:	d30c      	bcc.n	8008330 <__adddf3+0x10c>
 8008316:	0849      	lsrs	r1, r1, #1
 8008318:	ea5f 0030 	movs.w	r0, r0, rrx
 800831c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008320:	f104 0401 	add.w	r4, r4, #1
 8008324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800832c:	f080 809a 	bcs.w	8008464 <__adddf3+0x240>
 8008330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8008334:	bf08      	it	eq
 8008336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800833a:	f150 0000 	adcs.w	r0, r0, #0
 800833e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008342:	ea41 0105 	orr.w	r1, r1, r5
 8008346:	bd30      	pop	{r4, r5, pc}
 8008348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800834c:	4140      	adcs	r0, r0
 800834e:	eb41 0101 	adc.w	r1, r1, r1
 8008352:	3c01      	subs	r4, #1
 8008354:	bf28      	it	cs
 8008356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800835a:	d2e9      	bcs.n	8008330 <__adddf3+0x10c>
 800835c:	f091 0f00 	teq	r1, #0
 8008360:	bf04      	itt	eq
 8008362:	4601      	moveq	r1, r0
 8008364:	2000      	moveq	r0, #0
 8008366:	fab1 f381 	clz	r3, r1
 800836a:	bf08      	it	eq
 800836c:	3320      	addeq	r3, #32
 800836e:	f1a3 030b 	sub.w	r3, r3, #11
 8008372:	f1b3 0220 	subs.w	r2, r3, #32
 8008376:	da0c      	bge.n	8008392 <__adddf3+0x16e>
 8008378:	320c      	adds	r2, #12
 800837a:	dd08      	ble.n	800838e <__adddf3+0x16a>
 800837c:	f102 0c14 	add.w	ip, r2, #20
 8008380:	f1c2 020c 	rsb	r2, r2, #12
 8008384:	fa01 f00c 	lsl.w	r0, r1, ip
 8008388:	fa21 f102 	lsr.w	r1, r1, r2
 800838c:	e00c      	b.n	80083a8 <__adddf3+0x184>
 800838e:	f102 0214 	add.w	r2, r2, #20
 8008392:	bfd8      	it	le
 8008394:	f1c2 0c20 	rsble	ip, r2, #32
 8008398:	fa01 f102 	lsl.w	r1, r1, r2
 800839c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80083a0:	bfdc      	itt	le
 80083a2:	ea41 010c 	orrle.w	r1, r1, ip
 80083a6:	4090      	lslle	r0, r2
 80083a8:	1ae4      	subs	r4, r4, r3
 80083aa:	bfa2      	ittt	ge
 80083ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80083b0:	4329      	orrge	r1, r5
 80083b2:	bd30      	popge	{r4, r5, pc}
 80083b4:	ea6f 0404 	mvn.w	r4, r4
 80083b8:	3c1f      	subs	r4, #31
 80083ba:	da1c      	bge.n	80083f6 <__adddf3+0x1d2>
 80083bc:	340c      	adds	r4, #12
 80083be:	dc0e      	bgt.n	80083de <__adddf3+0x1ba>
 80083c0:	f104 0414 	add.w	r4, r4, #20
 80083c4:	f1c4 0220 	rsb	r2, r4, #32
 80083c8:	fa20 f004 	lsr.w	r0, r0, r4
 80083cc:	fa01 f302 	lsl.w	r3, r1, r2
 80083d0:	ea40 0003 	orr.w	r0, r0, r3
 80083d4:	fa21 f304 	lsr.w	r3, r1, r4
 80083d8:	ea45 0103 	orr.w	r1, r5, r3
 80083dc:	bd30      	pop	{r4, r5, pc}
 80083de:	f1c4 040c 	rsb	r4, r4, #12
 80083e2:	f1c4 0220 	rsb	r2, r4, #32
 80083e6:	fa20 f002 	lsr.w	r0, r0, r2
 80083ea:	fa01 f304 	lsl.w	r3, r1, r4
 80083ee:	ea40 0003 	orr.w	r0, r0, r3
 80083f2:	4629      	mov	r1, r5
 80083f4:	bd30      	pop	{r4, r5, pc}
 80083f6:	fa21 f004 	lsr.w	r0, r1, r4
 80083fa:	4629      	mov	r1, r5
 80083fc:	bd30      	pop	{r4, r5, pc}
 80083fe:	f094 0f00 	teq	r4, #0
 8008402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8008406:	bf06      	itte	eq
 8008408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800840c:	3401      	addeq	r4, #1
 800840e:	3d01      	subne	r5, #1
 8008410:	e74e      	b.n	80082b0 <__adddf3+0x8c>
 8008412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008416:	bf18      	it	ne
 8008418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800841c:	d029      	beq.n	8008472 <__adddf3+0x24e>
 800841e:	ea94 0f05 	teq	r4, r5
 8008422:	bf08      	it	eq
 8008424:	ea90 0f02 	teqeq	r0, r2
 8008428:	d005      	beq.n	8008436 <__adddf3+0x212>
 800842a:	ea54 0c00 	orrs.w	ip, r4, r0
 800842e:	bf04      	itt	eq
 8008430:	4619      	moveq	r1, r3
 8008432:	4610      	moveq	r0, r2
 8008434:	bd30      	pop	{r4, r5, pc}
 8008436:	ea91 0f03 	teq	r1, r3
 800843a:	bf1e      	ittt	ne
 800843c:	2100      	movne	r1, #0
 800843e:	2000      	movne	r0, #0
 8008440:	bd30      	popne	{r4, r5, pc}
 8008442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008446:	d105      	bne.n	8008454 <__adddf3+0x230>
 8008448:	0040      	lsls	r0, r0, #1
 800844a:	4149      	adcs	r1, r1
 800844c:	bf28      	it	cs
 800844e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8008452:	bd30      	pop	{r4, r5, pc}
 8008454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008458:	bf3c      	itt	cc
 800845a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800845e:	bd30      	popcc	{r4, r5, pc}
 8008460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800846c:	f04f 0000 	mov.w	r0, #0
 8008470:	bd30      	pop	{r4, r5, pc}
 8008472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008476:	bf1a      	itte	ne
 8008478:	4619      	movne	r1, r3
 800847a:	4610      	movne	r0, r2
 800847c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008480:	bf1c      	itt	ne
 8008482:	460b      	movne	r3, r1
 8008484:	4602      	movne	r2, r0
 8008486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800848a:	bf06      	itte	eq
 800848c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008490:	ea91 0f03 	teqeq	r1, r3
 8008494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008498:	bd30      	pop	{r4, r5, pc}
 800849a:	bf00      	nop

0800849c <__aeabi_ui2d>:
 800849c:	f090 0f00 	teq	r0, #0
 80084a0:	bf04      	itt	eq
 80084a2:	2100      	moveq	r1, #0
 80084a4:	4770      	bxeq	lr
 80084a6:	b530      	push	{r4, r5, lr}
 80084a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80084ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80084b0:	f04f 0500 	mov.w	r5, #0
 80084b4:	f04f 0100 	mov.w	r1, #0
 80084b8:	e750      	b.n	800835c <__adddf3+0x138>
 80084ba:	bf00      	nop

080084bc <__aeabi_i2d>:
 80084bc:	f090 0f00 	teq	r0, #0
 80084c0:	bf04      	itt	eq
 80084c2:	2100      	moveq	r1, #0
 80084c4:	4770      	bxeq	lr
 80084c6:	b530      	push	{r4, r5, lr}
 80084c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80084cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80084d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80084d4:	bf48      	it	mi
 80084d6:	4240      	negmi	r0, r0
 80084d8:	f04f 0100 	mov.w	r1, #0
 80084dc:	e73e      	b.n	800835c <__adddf3+0x138>
 80084de:	bf00      	nop

080084e0 <__aeabi_f2d>:
 80084e0:	0042      	lsls	r2, r0, #1
 80084e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80084e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80084ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80084ee:	bf1f      	itttt	ne
 80084f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80084f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80084f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80084fc:	4770      	bxne	lr
 80084fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8008502:	bf08      	it	eq
 8008504:	4770      	bxeq	lr
 8008506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800850a:	bf04      	itt	eq
 800850c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8008510:	4770      	bxeq	lr
 8008512:	b530      	push	{r4, r5, lr}
 8008514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8008518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800851c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008520:	e71c      	b.n	800835c <__adddf3+0x138>
 8008522:	bf00      	nop

08008524 <__aeabi_ul2d>:
 8008524:	ea50 0201 	orrs.w	r2, r0, r1
 8008528:	bf08      	it	eq
 800852a:	4770      	bxeq	lr
 800852c:	b530      	push	{r4, r5, lr}
 800852e:	f04f 0500 	mov.w	r5, #0
 8008532:	e00a      	b.n	800854a <__aeabi_l2d+0x16>

08008534 <__aeabi_l2d>:
 8008534:	ea50 0201 	orrs.w	r2, r0, r1
 8008538:	bf08      	it	eq
 800853a:	4770      	bxeq	lr
 800853c:	b530      	push	{r4, r5, lr}
 800853e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8008542:	d502      	bpl.n	800854a <__aeabi_l2d+0x16>
 8008544:	4240      	negs	r0, r0
 8008546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800854a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800854e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008556:	f43f aed8 	beq.w	800830a <__adddf3+0xe6>
 800855a:	f04f 0203 	mov.w	r2, #3
 800855e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008562:	bf18      	it	ne
 8008564:	3203      	addne	r2, #3
 8008566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800856a:	bf18      	it	ne
 800856c:	3203      	addne	r2, #3
 800856e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008572:	f1c2 0320 	rsb	r3, r2, #32
 8008576:	fa00 fc03 	lsl.w	ip, r0, r3
 800857a:	fa20 f002 	lsr.w	r0, r0, r2
 800857e:	fa01 fe03 	lsl.w	lr, r1, r3
 8008582:	ea40 000e 	orr.w	r0, r0, lr
 8008586:	fa21 f102 	lsr.w	r1, r1, r2
 800858a:	4414      	add	r4, r2
 800858c:	e6bd      	b.n	800830a <__adddf3+0xe6>
 800858e:	bf00      	nop

08008590 <__aeabi_dmul>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8008596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800859a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800859e:	bf1d      	ittte	ne
 80085a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80085a4:	ea94 0f0c 	teqne	r4, ip
 80085a8:	ea95 0f0c 	teqne	r5, ip
 80085ac:	f000 f8de 	bleq	800876c <__aeabi_dmul+0x1dc>
 80085b0:	442c      	add	r4, r5
 80085b2:	ea81 0603 	eor.w	r6, r1, r3
 80085b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80085ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80085be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80085c2:	bf18      	it	ne
 80085c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80085c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80085cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085d0:	d038      	beq.n	8008644 <__aeabi_dmul+0xb4>
 80085d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80085d6:	f04f 0500 	mov.w	r5, #0
 80085da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80085de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80085e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80085e6:	f04f 0600 	mov.w	r6, #0
 80085ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80085ee:	f09c 0f00 	teq	ip, #0
 80085f2:	bf18      	it	ne
 80085f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80085f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80085fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8008600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8008604:	d204      	bcs.n	8008610 <__aeabi_dmul+0x80>
 8008606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800860a:	416d      	adcs	r5, r5
 800860c:	eb46 0606 	adc.w	r6, r6, r6
 8008610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800861c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8008628:	bf88      	it	hi
 800862a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800862e:	d81e      	bhi.n	800866e <__aeabi_dmul+0xde>
 8008630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8008634:	bf08      	it	eq
 8008636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800863a:	f150 0000 	adcs.w	r0, r0, #0
 800863e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008648:	ea46 0101 	orr.w	r1, r6, r1
 800864c:	ea40 0002 	orr.w	r0, r0, r2
 8008650:	ea81 0103 	eor.w	r1, r1, r3
 8008654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008658:	bfc2      	ittt	gt
 800865a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800865e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008662:	bd70      	popgt	{r4, r5, r6, pc}
 8008664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008668:	f04f 0e00 	mov.w	lr, #0
 800866c:	3c01      	subs	r4, #1
 800866e:	f300 80ab 	bgt.w	80087c8 <__aeabi_dmul+0x238>
 8008672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8008676:	bfde      	ittt	le
 8008678:	2000      	movle	r0, #0
 800867a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800867e:	bd70      	pople	{r4, r5, r6, pc}
 8008680:	f1c4 0400 	rsb	r4, r4, #0
 8008684:	3c20      	subs	r4, #32
 8008686:	da35      	bge.n	80086f4 <__aeabi_dmul+0x164>
 8008688:	340c      	adds	r4, #12
 800868a:	dc1b      	bgt.n	80086c4 <__aeabi_dmul+0x134>
 800868c:	f104 0414 	add.w	r4, r4, #20
 8008690:	f1c4 0520 	rsb	r5, r4, #32
 8008694:	fa00 f305 	lsl.w	r3, r0, r5
 8008698:	fa20 f004 	lsr.w	r0, r0, r4
 800869c:	fa01 f205 	lsl.w	r2, r1, r5
 80086a0:	ea40 0002 	orr.w	r0, r0, r2
 80086a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80086a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80086ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80086b0:	fa21 f604 	lsr.w	r6, r1, r4
 80086b4:	eb42 0106 	adc.w	r1, r2, r6
 80086b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80086bc:	bf08      	it	eq
 80086be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	f1c4 040c 	rsb	r4, r4, #12
 80086c8:	f1c4 0520 	rsb	r5, r4, #32
 80086cc:	fa00 f304 	lsl.w	r3, r0, r4
 80086d0:	fa20 f005 	lsr.w	r0, r0, r5
 80086d4:	fa01 f204 	lsl.w	r2, r1, r4
 80086d8:	ea40 0002 	orr.w	r0, r0, r2
 80086dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80086e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80086e4:	f141 0100 	adc.w	r1, r1, #0
 80086e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80086ec:	bf08      	it	eq
 80086ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	f1c4 0520 	rsb	r5, r4, #32
 80086f8:	fa00 f205 	lsl.w	r2, r0, r5
 80086fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8008700:	fa20 f304 	lsr.w	r3, r0, r4
 8008704:	fa01 f205 	lsl.w	r2, r1, r5
 8008708:	ea43 0302 	orr.w	r3, r3, r2
 800870c:	fa21 f004 	lsr.w	r0, r1, r4
 8008710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008714:	fa21 f204 	lsr.w	r2, r1, r4
 8008718:	ea20 0002 	bic.w	r0, r0, r2
 800871c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008724:	bf08      	it	eq
 8008726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	f094 0f00 	teq	r4, #0
 8008730:	d10f      	bne.n	8008752 <__aeabi_dmul+0x1c2>
 8008732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8008736:	0040      	lsls	r0, r0, #1
 8008738:	eb41 0101 	adc.w	r1, r1, r1
 800873c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008740:	bf08      	it	eq
 8008742:	3c01      	subeq	r4, #1
 8008744:	d0f7      	beq.n	8008736 <__aeabi_dmul+0x1a6>
 8008746:	ea41 0106 	orr.w	r1, r1, r6
 800874a:	f095 0f00 	teq	r5, #0
 800874e:	bf18      	it	ne
 8008750:	4770      	bxne	lr
 8008752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8008756:	0052      	lsls	r2, r2, #1
 8008758:	eb43 0303 	adc.w	r3, r3, r3
 800875c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008760:	bf08      	it	eq
 8008762:	3d01      	subeq	r5, #1
 8008764:	d0f7      	beq.n	8008756 <__aeabi_dmul+0x1c6>
 8008766:	ea43 0306 	orr.w	r3, r3, r6
 800876a:	4770      	bx	lr
 800876c:	ea94 0f0c 	teq	r4, ip
 8008770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008774:	bf18      	it	ne
 8008776:	ea95 0f0c 	teqne	r5, ip
 800877a:	d00c      	beq.n	8008796 <__aeabi_dmul+0x206>
 800877c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008780:	bf18      	it	ne
 8008782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008786:	d1d1      	bne.n	800872c <__aeabi_dmul+0x19c>
 8008788:	ea81 0103 	eor.w	r1, r1, r3
 800878c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008790:	f04f 0000 	mov.w	r0, #0
 8008794:	bd70      	pop	{r4, r5, r6, pc}
 8008796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800879a:	bf06      	itte	eq
 800879c:	4610      	moveq	r0, r2
 800879e:	4619      	moveq	r1, r3
 80087a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80087a4:	d019      	beq.n	80087da <__aeabi_dmul+0x24a>
 80087a6:	ea94 0f0c 	teq	r4, ip
 80087aa:	d102      	bne.n	80087b2 <__aeabi_dmul+0x222>
 80087ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80087b0:	d113      	bne.n	80087da <__aeabi_dmul+0x24a>
 80087b2:	ea95 0f0c 	teq	r5, ip
 80087b6:	d105      	bne.n	80087c4 <__aeabi_dmul+0x234>
 80087b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80087bc:	bf1c      	itt	ne
 80087be:	4610      	movne	r0, r2
 80087c0:	4619      	movne	r1, r3
 80087c2:	d10a      	bne.n	80087da <__aeabi_dmul+0x24a>
 80087c4:	ea81 0103 	eor.w	r1, r1, r3
 80087c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80087d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80087d4:	f04f 0000 	mov.w	r0, #0
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
 80087da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80087de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80087e2:	bd70      	pop	{r4, r5, r6, pc}

080087e4 <__aeabi_ddiv>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80087ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80087ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80087f2:	bf1d      	ittte	ne
 80087f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80087f8:	ea94 0f0c 	teqne	r4, ip
 80087fc:	ea95 0f0c 	teqne	r5, ip
 8008800:	f000 f8a7 	bleq	8008952 <__aeabi_ddiv+0x16e>
 8008804:	eba4 0405 	sub.w	r4, r4, r5
 8008808:	ea81 0e03 	eor.w	lr, r1, r3
 800880c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008814:	f000 8088 	beq.w	8008928 <__aeabi_ddiv+0x144>
 8008818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800881c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800882c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800883c:	429d      	cmp	r5, r3
 800883e:	bf08      	it	eq
 8008840:	4296      	cmpeq	r6, r2
 8008842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8008846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800884a:	d202      	bcs.n	8008852 <__aeabi_ddiv+0x6e>
 800884c:	085b      	lsrs	r3, r3, #1
 800884e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008852:	1ab6      	subs	r6, r6, r2
 8008854:	eb65 0503 	sbc.w	r5, r5, r3
 8008858:	085b      	lsrs	r3, r3, #1
 800885a:	ea4f 0232 	mov.w	r2, r2, rrx
 800885e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8008866:	ebb6 0e02 	subs.w	lr, r6, r2
 800886a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800886e:	bf22      	ittt	cs
 8008870:	1ab6      	subcs	r6, r6, r2
 8008872:	4675      	movcs	r5, lr
 8008874:	ea40 000c 	orrcs.w	r0, r0, ip
 8008878:	085b      	lsrs	r3, r3, #1
 800887a:	ea4f 0232 	mov.w	r2, r2, rrx
 800887e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008886:	bf22      	ittt	cs
 8008888:	1ab6      	subcs	r6, r6, r2
 800888a:	4675      	movcs	r5, lr
 800888c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008890:	085b      	lsrs	r3, r3, #1
 8008892:	ea4f 0232 	mov.w	r2, r2, rrx
 8008896:	ebb6 0e02 	subs.w	lr, r6, r2
 800889a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800889e:	bf22      	ittt	cs
 80088a0:	1ab6      	subcs	r6, r6, r2
 80088a2:	4675      	movcs	r5, lr
 80088a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80088a8:	085b      	lsrs	r3, r3, #1
 80088aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80088ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80088b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088b6:	bf22      	ittt	cs
 80088b8:	1ab6      	subcs	r6, r6, r2
 80088ba:	4675      	movcs	r5, lr
 80088bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80088c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80088c4:	d018      	beq.n	80088f8 <__aeabi_ddiv+0x114>
 80088c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80088ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80088ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80088d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80088d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80088da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80088de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80088e2:	d1c0      	bne.n	8008866 <__aeabi_ddiv+0x82>
 80088e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80088e8:	d10b      	bne.n	8008902 <__aeabi_ddiv+0x11e>
 80088ea:	ea41 0100 	orr.w	r1, r1, r0
 80088ee:	f04f 0000 	mov.w	r0, #0
 80088f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80088f6:	e7b6      	b.n	8008866 <__aeabi_ddiv+0x82>
 80088f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80088fc:	bf04      	itt	eq
 80088fe:	4301      	orreq	r1, r0
 8008900:	2000      	moveq	r0, #0
 8008902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8008906:	bf88      	it	hi
 8008908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800890c:	f63f aeaf 	bhi.w	800866e <__aeabi_dmul+0xde>
 8008910:	ebb5 0c03 	subs.w	ip, r5, r3
 8008914:	bf04      	itt	eq
 8008916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800891a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800891e:	f150 0000 	adcs.w	r0, r0, #0
 8008922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800892c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008934:	bfc2      	ittt	gt
 8008936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800893a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800893e:	bd70      	popgt	{r4, r5, r6, pc}
 8008940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008944:	f04f 0e00 	mov.w	lr, #0
 8008948:	3c01      	subs	r4, #1
 800894a:	e690      	b.n	800866e <__aeabi_dmul+0xde>
 800894c:	ea45 0e06 	orr.w	lr, r5, r6
 8008950:	e68d      	b.n	800866e <__aeabi_dmul+0xde>
 8008952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008956:	ea94 0f0c 	teq	r4, ip
 800895a:	bf08      	it	eq
 800895c:	ea95 0f0c 	teqeq	r5, ip
 8008960:	f43f af3b 	beq.w	80087da <__aeabi_dmul+0x24a>
 8008964:	ea94 0f0c 	teq	r4, ip
 8008968:	d10a      	bne.n	8008980 <__aeabi_ddiv+0x19c>
 800896a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800896e:	f47f af34 	bne.w	80087da <__aeabi_dmul+0x24a>
 8008972:	ea95 0f0c 	teq	r5, ip
 8008976:	f47f af25 	bne.w	80087c4 <__aeabi_dmul+0x234>
 800897a:	4610      	mov	r0, r2
 800897c:	4619      	mov	r1, r3
 800897e:	e72c      	b.n	80087da <__aeabi_dmul+0x24a>
 8008980:	ea95 0f0c 	teq	r5, ip
 8008984:	d106      	bne.n	8008994 <__aeabi_ddiv+0x1b0>
 8008986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800898a:	f43f aefd 	beq.w	8008788 <__aeabi_dmul+0x1f8>
 800898e:	4610      	mov	r0, r2
 8008990:	4619      	mov	r1, r3
 8008992:	e722      	b.n	80087da <__aeabi_dmul+0x24a>
 8008994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008998:	bf18      	it	ne
 800899a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800899e:	f47f aec5 	bne.w	800872c <__aeabi_dmul+0x19c>
 80089a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80089a6:	f47f af0d 	bne.w	80087c4 <__aeabi_dmul+0x234>
 80089aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80089ae:	f47f aeeb 	bne.w	8008788 <__aeabi_dmul+0x1f8>
 80089b2:	e712      	b.n	80087da <__aeabi_dmul+0x24a>

080089b4 <__gedf2>:
 80089b4:	f04f 3cff 	mov.w	ip, #4294967295
 80089b8:	e006      	b.n	80089c8 <__cmpdf2+0x4>
 80089ba:	bf00      	nop

080089bc <__ledf2>:
 80089bc:	f04f 0c01 	mov.w	ip, #1
 80089c0:	e002      	b.n	80089c8 <__cmpdf2+0x4>
 80089c2:	bf00      	nop

080089c4 <__cmpdf2>:
 80089c4:	f04f 0c01 	mov.w	ip, #1
 80089c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80089cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089d8:	bf18      	it	ne
 80089da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80089de:	d01b      	beq.n	8008a18 <__cmpdf2+0x54>
 80089e0:	b001      	add	sp, #4
 80089e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80089e6:	bf0c      	ite	eq
 80089e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80089ec:	ea91 0f03 	teqne	r1, r3
 80089f0:	bf02      	ittt	eq
 80089f2:	ea90 0f02 	teqeq	r0, r2
 80089f6:	2000      	moveq	r0, #0
 80089f8:	4770      	bxeq	lr
 80089fa:	f110 0f00 	cmn.w	r0, #0
 80089fe:	ea91 0f03 	teq	r1, r3
 8008a02:	bf58      	it	pl
 8008a04:	4299      	cmppl	r1, r3
 8008a06:	bf08      	it	eq
 8008a08:	4290      	cmpeq	r0, r2
 8008a0a:	bf2c      	ite	cs
 8008a0c:	17d8      	asrcs	r0, r3, #31
 8008a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008a12:	f040 0001 	orr.w	r0, r0, #1
 8008a16:	4770      	bx	lr
 8008a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a20:	d102      	bne.n	8008a28 <__cmpdf2+0x64>
 8008a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008a26:	d107      	bne.n	8008a38 <__cmpdf2+0x74>
 8008a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a30:	d1d6      	bne.n	80089e0 <__cmpdf2+0x1c>
 8008a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008a36:	d0d3      	beq.n	80089e0 <__cmpdf2+0x1c>
 8008a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop

08008a40 <__aeabi_cdrcmple>:
 8008a40:	4684      	mov	ip, r0
 8008a42:	4610      	mov	r0, r2
 8008a44:	4662      	mov	r2, ip
 8008a46:	468c      	mov	ip, r1
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4663      	mov	r3, ip
 8008a4c:	e000      	b.n	8008a50 <__aeabi_cdcmpeq>
 8008a4e:	bf00      	nop

08008a50 <__aeabi_cdcmpeq>:
 8008a50:	b501      	push	{r0, lr}
 8008a52:	f7ff ffb7 	bl	80089c4 <__cmpdf2>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	bf48      	it	mi
 8008a5a:	f110 0f00 	cmnmi.w	r0, #0
 8008a5e:	bd01      	pop	{r0, pc}

08008a60 <__aeabi_dcmpeq>:
 8008a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a64:	f7ff fff4 	bl	8008a50 <__aeabi_cdcmpeq>
 8008a68:	bf0c      	ite	eq
 8008a6a:	2001      	moveq	r0, #1
 8008a6c:	2000      	movne	r0, #0
 8008a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a72:	bf00      	nop

08008a74 <__aeabi_dcmplt>:
 8008a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a78:	f7ff ffea 	bl	8008a50 <__aeabi_cdcmpeq>
 8008a7c:	bf34      	ite	cc
 8008a7e:	2001      	movcc	r0, #1
 8008a80:	2000      	movcs	r0, #0
 8008a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a86:	bf00      	nop

08008a88 <__aeabi_dcmple>:
 8008a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a8c:	f7ff ffe0 	bl	8008a50 <__aeabi_cdcmpeq>
 8008a90:	bf94      	ite	ls
 8008a92:	2001      	movls	r0, #1
 8008a94:	2000      	movhi	r0, #0
 8008a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a9a:	bf00      	nop

08008a9c <__aeabi_dcmpge>:
 8008a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008aa0:	f7ff ffce 	bl	8008a40 <__aeabi_cdrcmple>
 8008aa4:	bf94      	ite	ls
 8008aa6:	2001      	movls	r0, #1
 8008aa8:	2000      	movhi	r0, #0
 8008aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8008aae:	bf00      	nop

08008ab0 <__aeabi_dcmpgt>:
 8008ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ab4:	f7ff ffc4 	bl	8008a40 <__aeabi_cdrcmple>
 8008ab8:	bf34      	ite	cc
 8008aba:	2001      	movcc	r0, #1
 8008abc:	2000      	movcs	r0, #0
 8008abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8008ac2:	bf00      	nop

08008ac4 <__aeabi_d2iz>:
 8008ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008acc:	d215      	bcs.n	8008afa <__aeabi_d2iz+0x36>
 8008ace:	d511      	bpl.n	8008af4 <__aeabi_d2iz+0x30>
 8008ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008ad8:	d912      	bls.n	8008b00 <__aeabi_d2iz+0x3c>
 8008ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008aea:	fa23 f002 	lsr.w	r0, r3, r2
 8008aee:	bf18      	it	ne
 8008af0:	4240      	negne	r0, r0
 8008af2:	4770      	bx	lr
 8008af4:	f04f 0000 	mov.w	r0, #0
 8008af8:	4770      	bx	lr
 8008afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008afe:	d105      	bne.n	8008b0c <__aeabi_d2iz+0x48>
 8008b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008b04:	bf08      	it	eq
 8008b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008b0a:	4770      	bx	lr
 8008b0c:	f04f 0000 	mov.w	r0, #0
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop

08008b14 <__aeabi_d2uiz>:
 8008b14:	004a      	lsls	r2, r1, #1
 8008b16:	d211      	bcs.n	8008b3c <__aeabi_d2uiz+0x28>
 8008b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008b1c:	d211      	bcs.n	8008b42 <__aeabi_d2uiz+0x2e>
 8008b1e:	d50d      	bpl.n	8008b3c <__aeabi_d2uiz+0x28>
 8008b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008b28:	d40e      	bmi.n	8008b48 <__aeabi_d2uiz+0x34>
 8008b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008b36:	fa23 f002 	lsr.w	r0, r3, r2
 8008b3a:	4770      	bx	lr
 8008b3c:	f04f 0000 	mov.w	r0, #0
 8008b40:	4770      	bx	lr
 8008b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008b46:	d102      	bne.n	8008b4e <__aeabi_d2uiz+0x3a>
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	4770      	bx	lr
 8008b4e:	f04f 0000 	mov.w	r0, #0
 8008b52:	4770      	bx	lr

08008b54 <__aeabi_d2f>:
 8008b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8008b5c:	bf24      	itt	cs
 8008b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8008b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8008b66:	d90d      	bls.n	8008b84 <__aeabi_d2f+0x30>
 8008b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8008b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8008b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008b7c:	bf08      	it	eq
 8008b7e:	f020 0001 	biceq.w	r0, r0, #1
 8008b82:	4770      	bx	lr
 8008b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8008b88:	d121      	bne.n	8008bce <__aeabi_d2f+0x7a>
 8008b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8008b8e:	bfbc      	itt	lt
 8008b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8008b94:	4770      	bxlt	lr
 8008b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008b9e:	f1c2 0218 	rsb	r2, r2, #24
 8008ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8008ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8008baa:	fa20 f002 	lsr.w	r0, r0, r2
 8008bae:	bf18      	it	ne
 8008bb0:	f040 0001 	orrne.w	r0, r0, #1
 8008bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008bc0:	ea40 000c 	orr.w	r0, r0, ip
 8008bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8008bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008bcc:	e7cc      	b.n	8008b68 <__aeabi_d2f+0x14>
 8008bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008bd2:	d107      	bne.n	8008be4 <__aeabi_d2f+0x90>
 8008bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008bd8:	bf1e      	ittt	ne
 8008bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8008bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8008be2:	4770      	bxne	lr
 8008be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8008be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8008bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop

08008bf4 <__aeabi_uldivmod>:
 8008bf4:	b953      	cbnz	r3, 8008c0c <__aeabi_uldivmod+0x18>
 8008bf6:	b94a      	cbnz	r2, 8008c0c <__aeabi_uldivmod+0x18>
 8008bf8:	2900      	cmp	r1, #0
 8008bfa:	bf08      	it	eq
 8008bfc:	2800      	cmpeq	r0, #0
 8008bfe:	bf1c      	itt	ne
 8008c00:	f04f 31ff 	movne.w	r1, #4294967295
 8008c04:	f04f 30ff 	movne.w	r0, #4294967295
 8008c08:	f000 b96a 	b.w	8008ee0 <__aeabi_idiv0>
 8008c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c14:	f000 f806 	bl	8008c24 <__udivmoddi4>
 8008c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c20:	b004      	add	sp, #16
 8008c22:	4770      	bx	lr

08008c24 <__udivmoddi4>:
 8008c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c28:	9d08      	ldr	r5, [sp, #32]
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d14e      	bne.n	8008cce <__udivmoddi4+0xaa>
 8008c30:	4694      	mov	ip, r2
 8008c32:	458c      	cmp	ip, r1
 8008c34:	4686      	mov	lr, r0
 8008c36:	fab2 f282 	clz	r2, r2
 8008c3a:	d962      	bls.n	8008d02 <__udivmoddi4+0xde>
 8008c3c:	b14a      	cbz	r2, 8008c52 <__udivmoddi4+0x2e>
 8008c3e:	f1c2 0320 	rsb	r3, r2, #32
 8008c42:	4091      	lsls	r1, r2
 8008c44:	fa20 f303 	lsr.w	r3, r0, r3
 8008c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8008c4c:	4319      	orrs	r1, r3
 8008c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8008c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008c56:	fa1f f68c 	uxth.w	r6, ip
 8008c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8008c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008c62:	fb07 1114 	mls	r1, r7, r4, r1
 8008c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c6a:	fb04 f106 	mul.w	r1, r4, r6
 8008c6e:	4299      	cmp	r1, r3
 8008c70:	d90a      	bls.n	8008c88 <__udivmoddi4+0x64>
 8008c72:	eb1c 0303 	adds.w	r3, ip, r3
 8008c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8008c7a:	f080 8112 	bcs.w	8008ea2 <__udivmoddi4+0x27e>
 8008c7e:	4299      	cmp	r1, r3
 8008c80:	f240 810f 	bls.w	8008ea2 <__udivmoddi4+0x27e>
 8008c84:	3c02      	subs	r4, #2
 8008c86:	4463      	add	r3, ip
 8008c88:	1a59      	subs	r1, r3, r1
 8008c8a:	fa1f f38e 	uxth.w	r3, lr
 8008c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8008c92:	fb07 1110 	mls	r1, r7, r0, r1
 8008c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c9a:	fb00 f606 	mul.w	r6, r0, r6
 8008c9e:	429e      	cmp	r6, r3
 8008ca0:	d90a      	bls.n	8008cb8 <__udivmoddi4+0x94>
 8008ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8008ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8008caa:	f080 80fc 	bcs.w	8008ea6 <__udivmoddi4+0x282>
 8008cae:	429e      	cmp	r6, r3
 8008cb0:	f240 80f9 	bls.w	8008ea6 <__udivmoddi4+0x282>
 8008cb4:	4463      	add	r3, ip
 8008cb6:	3802      	subs	r0, #2
 8008cb8:	1b9b      	subs	r3, r3, r6
 8008cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	b11d      	cbz	r5, 8008cca <__udivmoddi4+0xa6>
 8008cc2:	40d3      	lsrs	r3, r2
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8008cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cce:	428b      	cmp	r3, r1
 8008cd0:	d905      	bls.n	8008cde <__udivmoddi4+0xba>
 8008cd2:	b10d      	cbz	r5, 8008cd8 <__udivmoddi4+0xb4>
 8008cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4608      	mov	r0, r1
 8008cdc:	e7f5      	b.n	8008cca <__udivmoddi4+0xa6>
 8008cde:	fab3 f183 	clz	r1, r3
 8008ce2:	2900      	cmp	r1, #0
 8008ce4:	d146      	bne.n	8008d74 <__udivmoddi4+0x150>
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	d302      	bcc.n	8008cf0 <__udivmoddi4+0xcc>
 8008cea:	4290      	cmp	r0, r2
 8008cec:	f0c0 80f0 	bcc.w	8008ed0 <__udivmoddi4+0x2ac>
 8008cf0:	1a86      	subs	r6, r0, r2
 8008cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8008cf6:	2001      	movs	r0, #1
 8008cf8:	2d00      	cmp	r5, #0
 8008cfa:	d0e6      	beq.n	8008cca <__udivmoddi4+0xa6>
 8008cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8008d00:	e7e3      	b.n	8008cca <__udivmoddi4+0xa6>
 8008d02:	2a00      	cmp	r2, #0
 8008d04:	f040 8090 	bne.w	8008e28 <__udivmoddi4+0x204>
 8008d08:	eba1 040c 	sub.w	r4, r1, ip
 8008d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008d10:	fa1f f78c 	uxth.w	r7, ip
 8008d14:	2101      	movs	r1, #1
 8008d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8008d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8008d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008d26:	fb07 f006 	mul.w	r0, r7, r6
 8008d2a:	4298      	cmp	r0, r3
 8008d2c:	d908      	bls.n	8008d40 <__udivmoddi4+0x11c>
 8008d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8008d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8008d36:	d202      	bcs.n	8008d3e <__udivmoddi4+0x11a>
 8008d38:	4298      	cmp	r0, r3
 8008d3a:	f200 80cd 	bhi.w	8008ed8 <__udivmoddi4+0x2b4>
 8008d3e:	4626      	mov	r6, r4
 8008d40:	1a1c      	subs	r4, r3, r0
 8008d42:	fa1f f38e 	uxth.w	r3, lr
 8008d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8008d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8008d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008d52:	fb00 f707 	mul.w	r7, r0, r7
 8008d56:	429f      	cmp	r7, r3
 8008d58:	d908      	bls.n	8008d6c <__udivmoddi4+0x148>
 8008d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8008d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8008d62:	d202      	bcs.n	8008d6a <__udivmoddi4+0x146>
 8008d64:	429f      	cmp	r7, r3
 8008d66:	f200 80b0 	bhi.w	8008eca <__udivmoddi4+0x2a6>
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	1bdb      	subs	r3, r3, r7
 8008d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008d72:	e7a5      	b.n	8008cc0 <__udivmoddi4+0x9c>
 8008d74:	f1c1 0620 	rsb	r6, r1, #32
 8008d78:	408b      	lsls	r3, r1
 8008d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8008d7e:	431f      	orrs	r7, r3
 8008d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8008d84:	fa04 f301 	lsl.w	r3, r4, r1
 8008d88:	ea43 030c 	orr.w	r3, r3, ip
 8008d8c:	40f4      	lsrs	r4, r6
 8008d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8008d92:	0c38      	lsrs	r0, r7, #16
 8008d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8008d98:	fbb4 fef0 	udiv	lr, r4, r0
 8008d9c:	fa1f fc87 	uxth.w	ip, r7
 8008da0:	fb00 441e 	mls	r4, r0, lr, r4
 8008da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008da8:	fb0e f90c 	mul.w	r9, lr, ip
 8008dac:	45a1      	cmp	r9, r4
 8008dae:	fa02 f201 	lsl.w	r2, r2, r1
 8008db2:	d90a      	bls.n	8008dca <__udivmoddi4+0x1a6>
 8008db4:	193c      	adds	r4, r7, r4
 8008db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8008dba:	f080 8084 	bcs.w	8008ec6 <__udivmoddi4+0x2a2>
 8008dbe:	45a1      	cmp	r9, r4
 8008dc0:	f240 8081 	bls.w	8008ec6 <__udivmoddi4+0x2a2>
 8008dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8008dc8:	443c      	add	r4, r7
 8008dca:	eba4 0409 	sub.w	r4, r4, r9
 8008dce:	fa1f f983 	uxth.w	r9, r3
 8008dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8008dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8008dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8008de2:	45a4      	cmp	ip, r4
 8008de4:	d907      	bls.n	8008df6 <__udivmoddi4+0x1d2>
 8008de6:	193c      	adds	r4, r7, r4
 8008de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8008dec:	d267      	bcs.n	8008ebe <__udivmoddi4+0x29a>
 8008dee:	45a4      	cmp	ip, r4
 8008df0:	d965      	bls.n	8008ebe <__udivmoddi4+0x29a>
 8008df2:	3b02      	subs	r3, #2
 8008df4:	443c      	add	r4, r7
 8008df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8008dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8008dfe:	eba4 040c 	sub.w	r4, r4, ip
 8008e02:	429c      	cmp	r4, r3
 8008e04:	46ce      	mov	lr, r9
 8008e06:	469c      	mov	ip, r3
 8008e08:	d351      	bcc.n	8008eae <__udivmoddi4+0x28a>
 8008e0a:	d04e      	beq.n	8008eaa <__udivmoddi4+0x286>
 8008e0c:	b155      	cbz	r5, 8008e24 <__udivmoddi4+0x200>
 8008e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8008e12:	eb64 040c 	sbc.w	r4, r4, ip
 8008e16:	fa04 f606 	lsl.w	r6, r4, r6
 8008e1a:	40cb      	lsrs	r3, r1
 8008e1c:	431e      	orrs	r6, r3
 8008e1e:	40cc      	lsrs	r4, r1
 8008e20:	e9c5 6400 	strd	r6, r4, [r5]
 8008e24:	2100      	movs	r1, #0
 8008e26:	e750      	b.n	8008cca <__udivmoddi4+0xa6>
 8008e28:	f1c2 0320 	rsb	r3, r2, #32
 8008e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8008e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8008e34:	fa24 f303 	lsr.w	r3, r4, r3
 8008e38:	4094      	lsls	r4, r2
 8008e3a:	430c      	orrs	r4, r1
 8008e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8008e44:	fa1f f78c 	uxth.w	r7, ip
 8008e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8008e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8008e50:	0c23      	lsrs	r3, r4, #16
 8008e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008e56:	fb00 f107 	mul.w	r1, r0, r7
 8008e5a:	4299      	cmp	r1, r3
 8008e5c:	d908      	bls.n	8008e70 <__udivmoddi4+0x24c>
 8008e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8008e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8008e66:	d22c      	bcs.n	8008ec2 <__udivmoddi4+0x29e>
 8008e68:	4299      	cmp	r1, r3
 8008e6a:	d92a      	bls.n	8008ec2 <__udivmoddi4+0x29e>
 8008e6c:	3802      	subs	r0, #2
 8008e6e:	4463      	add	r3, ip
 8008e70:	1a5b      	subs	r3, r3, r1
 8008e72:	b2a4      	uxth	r4, r4
 8008e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8008e78:	fb08 3311 	mls	r3, r8, r1, r3
 8008e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008e80:	fb01 f307 	mul.w	r3, r1, r7
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	d908      	bls.n	8008e9a <__udivmoddi4+0x276>
 8008e88:	eb1c 0404 	adds.w	r4, ip, r4
 8008e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8008e90:	d213      	bcs.n	8008eba <__udivmoddi4+0x296>
 8008e92:	42a3      	cmp	r3, r4
 8008e94:	d911      	bls.n	8008eba <__udivmoddi4+0x296>
 8008e96:	3902      	subs	r1, #2
 8008e98:	4464      	add	r4, ip
 8008e9a:	1ae4      	subs	r4, r4, r3
 8008e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ea0:	e739      	b.n	8008d16 <__udivmoddi4+0xf2>
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	e6f0      	b.n	8008c88 <__udivmoddi4+0x64>
 8008ea6:	4608      	mov	r0, r1
 8008ea8:	e706      	b.n	8008cb8 <__udivmoddi4+0x94>
 8008eaa:	45c8      	cmp	r8, r9
 8008eac:	d2ae      	bcs.n	8008e0c <__udivmoddi4+0x1e8>
 8008eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8008eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8008eb6:	3801      	subs	r0, #1
 8008eb8:	e7a8      	b.n	8008e0c <__udivmoddi4+0x1e8>
 8008eba:	4631      	mov	r1, r6
 8008ebc:	e7ed      	b.n	8008e9a <__udivmoddi4+0x276>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	e799      	b.n	8008df6 <__udivmoddi4+0x1d2>
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	e7d4      	b.n	8008e70 <__udivmoddi4+0x24c>
 8008ec6:	46d6      	mov	lr, sl
 8008ec8:	e77f      	b.n	8008dca <__udivmoddi4+0x1a6>
 8008eca:	4463      	add	r3, ip
 8008ecc:	3802      	subs	r0, #2
 8008ece:	e74d      	b.n	8008d6c <__udivmoddi4+0x148>
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	4623      	mov	r3, r4
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	e70f      	b.n	8008cf8 <__udivmoddi4+0xd4>
 8008ed8:	3e02      	subs	r6, #2
 8008eda:	4463      	add	r3, ip
 8008edc:	e730      	b.n	8008d40 <__udivmoddi4+0x11c>
 8008ede:	bf00      	nop

08008ee0 <__aeabi_idiv0>:
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	0000      	movs	r0, r0
	...

08008ee8 <HAL_ADC_ConvCpltCallback>:
/*-------Prototype Declaration----------------------------------------------*/
void SENSOR_ADC_init();
uint16_t FUN_ADC_GetValue();
uint16_t movingAverageFilter(uint16_t * buf);

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) { // 인터럽트 방식은 HAL_ADC_Start_DMA()를 안쓰니까 안쓰는듯?
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
	adc_value[a_index] = adc_val;                        // 5ms 마다 폴링방식 쓰는거 같음
 8008ef0:	4b27      	ldr	r3, [pc, #156]	@ (8008f90 <HAL_ADC_ConvCpltCallback+0xa8>)
 8008ef2:	6819      	ldr	r1, [r3, #0]
 8008ef4:	4b27      	ldr	r3, [pc, #156]	@ (8008f94 <HAL_ADC_ConvCpltCallback+0xac>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	b289      	uxth	r1, r1
 8008efc:	4b26      	ldr	r3, [pc, #152]	@ (8008f98 <HAL_ADC_ConvCpltCallback+0xb0>)
 8008efe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	vout = (float)(adc_value[a_index]/4096.0)*3.3;
 8008f02:	4b24      	ldr	r3, [pc, #144]	@ (8008f94 <HAL_ADC_ConvCpltCallback+0xac>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	4b23      	ldr	r3, [pc, #140]	@ (8008f98 <HAL_ADC_ConvCpltCallback+0xb0>)
 8008f0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fad4 	bl	80084bc <__aeabi_i2d>
 8008f14:	f04f 0200 	mov.w	r2, #0
 8008f18:	4b20      	ldr	r3, [pc, #128]	@ (8008f9c <HAL_ADC_ConvCpltCallback+0xb4>)
 8008f1a:	f7ff fc63 	bl	80087e4 <__aeabi_ddiv>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4610      	mov	r0, r2
 8008f24:	4619      	mov	r1, r3
 8008f26:	f7ff fe15 	bl	8008b54 <__aeabi_d2f>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff fad7 	bl	80084e0 <__aeabi_f2d>
 8008f32:	a315      	add	r3, pc, #84	@ (adr r3, 8008f88 <HAL_ADC_ConvCpltCallback+0xa0>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	f7ff fb2a 	bl	8008590 <__aeabi_dmul>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4610      	mov	r0, r2
 8008f42:	4619      	mov	r1, r3
 8008f44:	f7ff fe06 	bl	8008b54 <__aeabi_d2f>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	4a15      	ldr	r2, [pc, #84]	@ (8008fa0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8008f4c:	6013      	str	r3, [r2, #0]
	if(++a_index >= ADC_BUFF_MAX){
 8008f4e:	4b11      	ldr	r3, [pc, #68]	@ (8008f94 <HAL_ADC_ConvCpltCallback+0xac>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	4b0f      	ldr	r3, [pc, #60]	@ (8008f94 <HAL_ADC_ConvCpltCallback+0xac>)
 8008f58:	701a      	strb	r2, [r3, #0]
 8008f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8008f94 <HAL_ADC_ConvCpltCallback+0xac>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b1d      	cmp	r3, #29
 8008f60:	d902      	bls.n	8008f68 <HAL_ADC_ConvCpltCallback+0x80>
		a_index = 0;
 8008f62:	4b0c      	ldr	r3, [pc, #48]	@ (8008f94 <HAL_ADC_ConvCpltCallback+0xac>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	701a      	strb	r2, [r3, #0]
	}
	AdcIntCnt++;
 8008f68:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8008fa4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8008f70:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop_DMA(SENSOR_ADC);
 8008f72:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa8 <HAL_ADC_ConvCpltCallback+0xc0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f006 fca6 	bl	800f8c8 <HAL_ADC_Stop_DMA>
}
 8008f7c:	bf00      	nop
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	f3af 8000 	nop.w
 8008f88:	66666666 	.word	0x66666666
 8008f8c:	400a6666 	.word	0x400a6666
 8008f90:	20000074 	.word	0x20000074
 8008f94:	200000b4 	.word	0x200000b4
 8008f98:	20000078 	.word	0x20000078
 8008f9c:	40b00000 	.word	0x40b00000
 8008fa0:	200000b8 	.word	0x200000b8
 8008fa4:	20000070 	.word	0x20000070
 8008fa8:	2000006c 	.word	0x2000006c

08008fac <FUN_ADC_Init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	//ADC Parameter Reset
	for(int i = 0; i < ADC_BUFF_MAX; i++)
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	e007      	b.n	8008fca <FUN_ADC_Init+0x1e>
	{
		adc_value[i] = 0;
 8008fba:	4a09      	ldr	r2, [pc, #36]	@ (8008fe0 <FUN_ADC_Init+0x34>)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < ADC_BUFF_MAX; i++)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b1d      	cmp	r3, #29
 8008fce:	ddf4      	ble.n	8008fba <FUN_ADC_Init+0xe>
	}
	SENSOR_ADC_init(hadc);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f807 	bl	8008fe4 <SENSOR_ADC_init>
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000078 	.word	0x20000078

08008fe4 <SENSOR_ADC_init>:
void SENSOR_ADC_init(ADC_HandleTypeDef* hadc)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
	SENSOR_ADC = hadc;
 8008fec:	4a04      	ldr	r2, [pc, #16]	@ (8009000 <SENSOR_ADC_init+0x1c>)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6013      	str	r3, [r2, #0]
	//HAL_ADC_Start_DMA(SENSOR_ADC, (uint32_t *)adc_val, 1);       // DMA 꺼놨네?
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	2000006c 	.word	0x2000006c

08009004 <FUN_ADC_GetValue>:

uint16_t FUN_ADC_GetValue()  // 딱 SENSOR_ADC 값을 받아서 value에 넣어서 리턴
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
	uint16_t value = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	80fb      	strh	r3, [r7, #6]
	//uint8_t status = 0;
	/*status = */
	HAL_ADC_Start(SENSOR_ADC);
 800900e:	4b0e      	ldr	r3, [pc, #56]	@ (8009048 <FUN_ADC_GetValue+0x44>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f006 fa66 	bl	800f4e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(SENSOR_ADC, 100);
 8009018:	4b0b      	ldr	r3, [pc, #44]	@ (8009048 <FUN_ADC_GetValue+0x44>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2164      	movs	r1, #100	@ 0x64
 800901e:	4618      	mov	r0, r3
 8009020:	f006 fb5e 	bl	800f6e0 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(SENSOR_ADC);
 8009024:	4b08      	ldr	r3, [pc, #32]	@ (8009048 <FUN_ADC_GetValue+0x44>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f006 fcae 	bl	800f98a <HAL_ADC_GetValue>
 800902e:	4603      	mov	r3, r0
 8009030:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(SENSOR_ADC);
 8009032:	4b05      	ldr	r3, [pc, #20]	@ (8009048 <FUN_ADC_GetValue+0x44>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f006 fb1e 	bl	800f678 <HAL_ADC_Stop>
	return value;
 800903c:	88fb      	ldrh	r3, [r7, #6]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	2000006c 	.word	0x2000006c
 800904c:	00000000 	.word	0x00000000

08009050 <FUN_ADC_Routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_ADC_Routine(void)  // 5ms 마다 이리로 온다.
{
 8009050:	b598      	push	{r3, r4, r7, lr}
 8009052:	af00      	add	r7, sp, #0
	//Polling
	adc_value[a_index] = FUN_ADC_GetValue();           // 5ms마다 SENSOR_ADC값 넣어주는데. 5ms마다 a_index 증가하면서 배열 방마다 툭툭 넣어주는거지
 8009054:	4b26      	ldr	r3, [pc, #152]	@ (80090f0 <FUN_ADC_Routine+0xa0>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	461c      	mov	r4, r3
 800905a:	f7ff ffd3 	bl	8009004 <FUN_ADC_GetValue>
 800905e:	4603      	mov	r3, r0
 8009060:	461a      	mov	r2, r3
 8009062:	4b24      	ldr	r3, [pc, #144]	@ (80090f4 <FUN_ADC_Routine+0xa4>)
 8009064:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	Co_Sensor = movingAverageFilter(&adc_value[0]);    // 그 평균을 CO_Sensor에 넣어주고
 8009068:	4822      	ldr	r0, [pc, #136]	@ (80090f4 <FUN_ADC_Routine+0xa4>)
 800906a:	f000 f84d 	bl	8009108 <movingAverageFilter>
 800906e:	4603      	mov	r3, r0
 8009070:	461a      	mov	r2, r3
 8009072:	4b21      	ldr	r3, [pc, #132]	@ (80090f8 <FUN_ADC_Routine+0xa8>)
 8009074:	801a      	strh	r2, [r3, #0]
	vout = (float)(Co_Sensor/4096.0)*3.3 ;             // 아날로그 센서 값을 전압으로 치환하는거 아닐까싶음
 8009076:	4b20      	ldr	r3, [pc, #128]	@ (80090f8 <FUN_ADC_Routine+0xa8>)
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fa1e 	bl	80084bc <__aeabi_i2d>
 8009080:	f04f 0200 	mov.w	r2, #0
 8009084:	4b1d      	ldr	r3, [pc, #116]	@ (80090fc <FUN_ADC_Routine+0xac>)
 8009086:	f7ff fbad 	bl	80087e4 <__aeabi_ddiv>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4610      	mov	r0, r2
 8009090:	4619      	mov	r1, r3
 8009092:	f7ff fd5f 	bl	8008b54 <__aeabi_d2f>
 8009096:	4603      	mov	r3, r0
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff fa21 	bl	80084e0 <__aeabi_f2d>
 800909e:	a312      	add	r3, pc, #72	@ (adr r3, 80090e8 <FUN_ADC_Routine+0x98>)
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	f7ff fa74 	bl	8008590 <__aeabi_dmul>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4610      	mov	r0, r2
 80090ae:	4619      	mov	r1, r3
 80090b0:	f7ff fd50 	bl	8008b54 <__aeabi_d2f>
 80090b4:	4603      	mov	r3, r0
 80090b6:	4a12      	ldr	r2, [pc, #72]	@ (8009100 <FUN_ADC_Routine+0xb0>)
 80090b8:	6013      	str	r3, [r2, #0]
	//ppm = Co_Sensor / 100;
	ui.co_100times = Co_Sensor;                        // RS485에 있는 [2] ~ [3] NTC 온도 라는데 일단 몰라 Pass
 80090ba:	4b0f      	ldr	r3, [pc, #60]	@ (80090f8 <FUN_ADC_Routine+0xa8>)
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	b21a      	sxth	r2, r3
 80090c0:	4b10      	ldr	r3, [pc, #64]	@ (8009104 <FUN_ADC_Routine+0xb4>)
 80090c2:	809a      	strh	r2, [r3, #4]
	if(++a_index >= ADC_BUFF_MAX)                      // ADC_BUFF_MAX가 30이니까 5ms * 30 = 0.15초 마다 인덱스 초기화
 80090c4:	4b0a      	ldr	r3, [pc, #40]	@ (80090f0 <FUN_ADC_Routine+0xa0>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	3301      	adds	r3, #1
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	4b08      	ldr	r3, [pc, #32]	@ (80090f0 <FUN_ADC_Routine+0xa0>)
 80090ce:	701a      	strb	r2, [r3, #0]
 80090d0:	4b07      	ldr	r3, [pc, #28]	@ (80090f0 <FUN_ADC_Routine+0xa0>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2b1d      	cmp	r3, #29
 80090d6:	d902      	bls.n	80090de <FUN_ADC_Routine+0x8e>
	{
		a_index = 0;
 80090d8:	4b05      	ldr	r3, [pc, #20]	@ (80090f0 <FUN_ADC_Routine+0xa0>)
 80090da:	2200      	movs	r2, #0
 80090dc:	701a      	strb	r2, [r3, #0]
	}

	//DMA
	//HAL_ADC_Start_DMA(SENSOR_ADC, (uint32_t *)adc_val, 1);
}
 80090de:	bf00      	nop
 80090e0:	bd98      	pop	{r3, r4, r7, pc}
 80090e2:	bf00      	nop
 80090e4:	f3af 8000 	nop.w
 80090e8:	66666666 	.word	0x66666666
 80090ec:	400a6666 	.word	0x400a6666
 80090f0:	200000b4 	.word	0x200000b4
 80090f4:	20000078 	.word	0x20000078
 80090f8:	200000b6 	.word	0x200000b6
 80090fc:	40b00000 	.word	0x40b00000
 8009100:	200000b8 	.word	0x200000b8
 8009104:	200004f0 	.word	0x200004f0

08009108 <movingAverageFilter>:

uint16_t movingAverageFilter(uint16_t * buf)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
	uint8_t valid_cnt = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
	uint16_t totalSum = 0;
 8009114:	2300      	movs	r3, #0
 8009116:	81bb      	strh	r3, [r7, #12]
	uint16_t average = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	817b      	strh	r3, [r7, #10]

	for(uint8_t i = 0; i < ADC_BUFF_MAX; i++)
 800911c:	2300      	movs	r3, #0
 800911e:	727b      	strb	r3, [r7, #9]
 8009120:	e014      	b.n	800914c <movingAverageFilter+0x44>
	{
		if(buf[i] > 0){
 8009122:	7a7b      	ldrb	r3, [r7, #9]
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	4413      	add	r3, r2
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00a      	beq.n	8009146 <movingAverageFilter+0x3e>
			valid_cnt++;
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	3301      	adds	r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
			totalSum += buf[i];
 8009136:	7a7b      	ldrb	r3, [r7, #9]
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	4413      	add	r3, r2
 800913e:	881a      	ldrh	r2, [r3, #0]
 8009140:	89bb      	ldrh	r3, [r7, #12]
 8009142:	4413      	add	r3, r2
 8009144:	81bb      	strh	r3, [r7, #12]
	for(uint8_t i = 0; i < ADC_BUFF_MAX; i++)
 8009146:	7a7b      	ldrb	r3, [r7, #9]
 8009148:	3301      	adds	r3, #1
 800914a:	727b      	strb	r3, [r7, #9]
 800914c:	7a7b      	ldrb	r3, [r7, #9]
 800914e:	2b1d      	cmp	r3, #29
 8009150:	d9e7      	bls.n	8009122 <movingAverageFilter+0x1a>
		}
	}
	if(valid_cnt > 0)
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d004      	beq.n	8009162 <movingAverageFilter+0x5a>
	{
		average = totalSum / valid_cnt;
 8009158:	89ba      	ldrh	r2, [r7, #12]
 800915a:	7bfb      	ldrb	r3, [r7, #15]
 800915c:	fb92 f3f3 	sdiv	r3, r2, r3
 8009160:	817b      	strh	r3, [r7, #10]
	}
	return average;
 8009162:	897b      	ldrh	r3, [r7, #10]

}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <setDeviceMode>:
struct CsPin csPin = {SMK_CS__GPIO_Port, SMK_CS__Pin};


//----------------------------------------------------------------------------------------------------------------------

void setDeviceMode(SPI_HandleTypeDef hspi, DeviceStates state, struct CsPin csPin) {
 8009170:	b084      	sub	sp, #16
 8009172:	b5b0      	push	{r4, r5, r7, lr}
 8009174:	b09c      	sub	sp, #112	@ 0x70
 8009176:	af1a      	add	r7, sp, #104	@ 0x68
 8009178:	f107 0418 	add.w	r4, r7, #24
 800917c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t registerValue = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	80fb      	strh	r3, [r7, #6]
    switch (state) {
 8009184:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8009188:	2b02      	cmp	r3, #2
 800918a:	d00c      	beq.n	80091a6 <setDeviceMode+0x36>
 800918c:	2b02      	cmp	r3, #2
 800918e:	dc0d      	bgt.n	80091ac <setDeviceMode+0x3c>
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <setDeviceMode+0x2a>
 8009194:	2b01      	cmp	r3, #1
 8009196:	d003      	beq.n	80091a0 <setDeviceMode+0x30>
 8009198:	e008      	b.n	80091ac <setDeviceMode+0x3c>
        case STANDBY:
            registerValue = 0x00;
 800919a:	2300      	movs	r3, #0
 800919c:	80fb      	strh	r3, [r7, #6]
            break;
 800919e:	e008      	b.n	80091b2 <setDeviceMode+0x42>
        case PROGRAM:
            registerValue = 0x01;
 80091a0:	2301      	movs	r3, #1
 80091a2:	80fb      	strh	r3, [r7, #6]
            break;
 80091a4:	e005      	b.n	80091b2 <setDeviceMode+0x42>
        case NORMAL:
            registerValue = 0x02;
 80091a6:	2302      	movs	r3, #2
 80091a8:	80fb      	strh	r3, [r7, #6]
            break;
 80091aa:	e002      	b.n	80091b2 <setDeviceMode+0x42>
        default:
        	registerValue = 0x00;
 80091ac:	2300      	movs	r3, #0
 80091ae:	80fb      	strh	r3, [r7, #6]
            break;
 80091b0:	bf00      	nop
    }
    while(writeToRegister(MODE_REGISTER, registerValue, hspi, csPin, true) != HAL_OK);
 80091b2:	bf00      	nop
 80091b4:	2510      	movs	r5, #16
 80091b6:	88fc      	ldrh	r4, [r7, #6]
 80091b8:	2301      	movs	r3, #1
 80091ba:	9319      	str	r3, [sp, #100]	@ 0x64
 80091bc:	aa17      	add	r2, sp, #92	@ 0x5c
 80091be:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80091c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80091c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80091ca:	4668      	mov	r0, sp
 80091cc:	f107 0320 	add.w	r3, r7, #32
 80091d0:	225c      	movs	r2, #92	@ 0x5c
 80091d2:	4619      	mov	r1, r3
 80091d4:	f00e f972 	bl	80174bc <memcpy>
 80091d8:	f107 0318 	add.w	r3, r7, #24
 80091dc:	cb0c      	ldmia	r3, {r2, r3}
 80091de:	4621      	mov	r1, r4
 80091e0:	4628      	mov	r0, r5
 80091e2:	f000 f80b 	bl	80091fc <writeToRegister>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1e3      	bne.n	80091b4 <setDeviceMode+0x44>
}
 80091ec:	bf00      	nop
 80091ee:	bf00      	nop
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80091f8:	b004      	add	sp, #16
 80091fa:	4770      	bx	lr

080091fc <writeToRegister>:

//----------------------------------------------------------------------------------------------------------------------

HAL_StatusTypeDef writeToRegister(const uint8_t registerAddress, const uint16_t data, SPI_HandleTypeDef hspi, struct CsPin csPin, bool isVerifyWriting) {
 80091fc:	b082      	sub	sp, #8
 80091fe:	b590      	push	{r4, r7, lr}
 8009200:	b09d      	sub	sp, #116	@ 0x74
 8009202:	af18      	add	r7, sp, #96	@ 0x60
 8009204:	f107 0420 	add.w	r4, r7, #32
 8009208:	e884 000c 	stmia.w	r4, {r2, r3}
 800920c:	4603      	mov	r3, r0
 800920e:	71fb      	strb	r3, [r7, #7]
 8009210:	460b      	mov	r3, r1
 8009212:	80bb      	strh	r3, [r7, #4]
    uint16_t dataRead = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	81fb      	strh	r3, [r7, #14]
    // address 7bits ,1bit W/R =1
    union SpiRegisterData spiRegisterData = {.dataFormat = {0, 0, 0, 0}};
 8009218:	2300      	movs	r3, #0
 800921a:	60bb      	str	r3, [r7, #8]
    spiRegisterData.dataFormat.registerAddress = registerAddress;
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009222:	b2da      	uxtb	r2, r3
 8009224:	7a3b      	ldrb	r3, [r7, #8]
 8009226:	f362 0347 	bfi	r3, r2, #1, #7
 800922a:	723b      	strb	r3, [r7, #8]
    spiRegisterData.dataFormat.writeReadBit = 0x01;  // :1 이니까 16비트 중 하위 1비트만 들어가. 그니까 0x02를 넣어도 하위비트 1이 들어가는거지
 800922c:	7a3b      	ldrb	r3, [r7, #8]
 800922e:	f043 0301 	orr.w	r3, r3, #1
 8009232:	723b      	strb	r3, [r7, #8]
    spiRegisterData.dataFormat.msb = (data >> 8) & 0xFF; // MSB // & 0xFF는 하위 두비트만 추출하는거지
 8009234:	88bb      	ldrh	r3, [r7, #4]
 8009236:	0a1b      	lsrs	r3, r3, #8
 8009238:	b29b      	uxth	r3, r3
 800923a:	b2db      	uxtb	r3, r3
 800923c:	727b      	strb	r3, [r7, #9]
    spiRegisterData.dataFormat.lsb = data & 0xFF;    // LSB // 만약 데이터가 0001 0010 0011 0100 이라면 상위 두 비트 자르고 0011 0100만 추출
 800923e:	88bb      	ldrh	r3, [r7, #4]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	72bb      	strb	r3, [r7, #10]
	 0000 0000 1111 1111  (0x00FF)
	 -------------------
	 0000 0000 0011 0100  (0x34)
     */

    HAL_GPIO_WritePin(csPin.gpio, csPin.gpioPinMask, GPIO_PIN_RESET);
 8009244:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009248:	f8b7 1088 	ldrh.w	r1, [r7, #136]	@ 0x88
 800924c:	2200      	movs	r2, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f008 fc3e 	bl	8011ad0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, (uint8_t *) &spiRegisterData, 3, 100);
 8009254:	f107 0108 	add.w	r1, r7, #8
 8009258:	2364      	movs	r3, #100	@ 0x64
 800925a:	2203      	movs	r2, #3
 800925c:	f107 0020 	add.w	r0, r7, #32
 8009260:	f00a fb09 	bl	8013876 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(csPin.gpio, csPin.gpioPinMask, GPIO_PIN_SET);
 8009264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009268:	f8b7 1088 	ldrh.w	r1, [r7, #136]	@ 0x88
 800926c:	2201      	movs	r2, #1
 800926e:	4618      	mov	r0, r3
 8009270:	f008 fc2e 	bl	8011ad0 <HAL_GPIO_WritePin>
    if (isVerifyWriting) {
 8009274:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8009278:	2b00      	cmp	r3, #0
 800927a:	d01e      	beq.n	80092ba <writeToRegister+0xbe>
        dataRead = readRegisterData(registerAddress, hspi, csPin);
 800927c:	79fc      	ldrb	r4, [r7, #7]
 800927e:	aa16      	add	r2, sp, #88	@ 0x58
 8009280:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8009284:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009288:	e882 0003 	stmia.w	r2, {r0, r1}
 800928c:	4668      	mov	r0, sp
 800928e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009292:	2258      	movs	r2, #88	@ 0x58
 8009294:	4619      	mov	r1, r3
 8009296:	f00e f911 	bl	80174bc <memcpy>
 800929a:	f107 0320 	add.w	r3, r7, #32
 800929e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092a0:	4620      	mov	r0, r4
 80092a2:	f000 f813 	bl	80092cc <readRegisterData>
 80092a6:	4603      	mov	r3, r0
 80092a8:	81fb      	strh	r3, [r7, #14]
        if (dataRead == data) {
 80092aa:	89fa      	ldrh	r2, [r7, #14]
 80092ac:	88bb      	ldrh	r3, [r7, #4]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d101      	bne.n	80092b6 <writeToRegister+0xba>
            return HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	e002      	b.n	80092bc <writeToRegister+0xc0>
        }
        return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e000      	b.n	80092bc <writeToRegister+0xc0>
    }
    return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80092c6:	b002      	add	sp, #8
 80092c8:	4770      	bx	lr
	...

080092cc <readRegisterData>:

//----------------------------------------------------------------------------------------------------------------------

uint16_t readRegisterData(const uint8_t registerAddress, SPI_HandleTypeDef hspi, struct CsPin csPin) {
 80092cc:	b084      	sub	sp, #16
 80092ce:	b590      	push	{r4, r7, lr}
 80092d0:	b087      	sub	sp, #28
 80092d2:	af02      	add	r7, sp, #8
 80092d4:	4604      	mov	r4, r0
 80092d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80092da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80092de:	4623      	mov	r3, r4
 80092e0:	71fb      	strb	r3, [r7, #7]

    uint8_t rxData[3] = {0, 0, 0};
 80092e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009360 <readRegisterData+0x94>)
 80092e4:	f107 030c 	add.w	r3, r7, #12
 80092e8:	6812      	ldr	r2, [r2, #0]
 80092ea:	4611      	mov	r1, r2
 80092ec:	8019      	strh	r1, [r3, #0]
 80092ee:	3302      	adds	r3, #2
 80092f0:	0c12      	lsrs	r2, r2, #16
 80092f2:	701a      	strb	r2, [r3, #0]
    // address 7bits ,1bit W/R =0
    union SpiRegisterData spiRegisterData = {.dataFormat = {0, 0, 0, 0}};
 80092f4:	2300      	movs	r3, #0
 80092f6:	60bb      	str	r3, [r7, #8]
    spiRegisterData.dataFormat.registerAddress = registerAddress;
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	7a3b      	ldrb	r3, [r7, #8]
 8009302:	f362 0347 	bfi	r3, r2, #1, #7
 8009306:	723b      	strb	r3, [r7, #8]
    spiRegisterData.dataFormat.writeReadBit = 0x00;
 8009308:	7a3b      	ldrb	r3, [r7, #8]
 800930a:	f36f 0300 	bfc	r3, #0, #1
 800930e:	723b      	strb	r3, [r7, #8]


    HAL_GPIO_WritePin(csPin.gpio, csPin.gpioPinMask, GPIO_PIN_RESET);
 8009310:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009314:	f8b7 108c 	ldrh.w	r1, [r7, #140]	@ 0x8c
 8009318:	2200      	movs	r2, #0
 800931a:	4618      	mov	r0, r3
 800931c:	f008 fbd8 	bl	8011ad0 <HAL_GPIO_WritePin>
    // register size is always 2 bytes + 1 Byte for Address
    HAL_SPI_TransmitReceive(&hspi, (uint8_t *) (&spiRegisterData), rxData, 3, 100);
 8009320:	f107 020c 	add.w	r2, r7, #12
 8009324:	f107 0108 	add.w	r1, r7, #8
 8009328:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800932c:	2364      	movs	r3, #100	@ 0x64
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	2303      	movs	r3, #3
 8009332:	f00a fc0e 	bl	8013b52 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(csPin.gpio, csPin.gpioPinMask, GPIO_PIN_SET);
 8009336:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800933a:	f8b7 108c 	ldrh.w	r1, [r7, #140]	@ 0x8c
 800933e:	2201      	movs	r2, #1
 8009340:	4618      	mov	r0, r3
 8009342:	f008 fbc5 	bl	8011ad0 <HAL_GPIO_WritePin>
    return ((rxData[1] << 8) + rxData[2]);
 8009346:	7b7b      	ldrb	r3, [r7, #13]
 8009348:	021b      	lsls	r3, r3, #8
 800934a:	b29b      	uxth	r3, r3
 800934c:	7bba      	ldrb	r2, [r7, #14]
 800934e:	4413      	add	r3, r2
 8009350:	b29b      	uxth	r3, r3
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800935c:	b004      	add	sp, #16
 800935e:	4770      	bx	lr
 8009360:	080175e8 	.word	0x080175e8

08009364 <smokeSensorADPD188Init>:
    return HAL_ERROR;
}

//----------------------------------------------------------------------------------------------------------------------

HAL_StatusTypeDef smokeSensorADPD188Init(SPI_HandleTypeDef hspi, struct CsPin csPin) {
 8009364:	b084      	sub	sp, #16
 8009366:	b5b0      	push	{r4, r5, r7, lr}
 8009368:	b09c      	sub	sp, #112	@ 0x70
 800936a:	af1a      	add	r7, sp, #104	@ 0x68
 800936c:	f107 0418 	add.w	r4, r7, #24
 8009370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t mode = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	80fb      	strh	r3, [r7, #6]
    //read_fifo_state=0;
    // run  recommended start-up sequence defined in the DS P 24

    // 1- enable 32K clock
    union SampleClockRegister sampleClockRegister = {.bits = {0x12, 0, 1, 0, 0x26}};
 8009378:	4b44      	ldr	r3, [pc, #272]	@ (800948c <smokeSensorADPD188Init+0x128>)
 800937a:	881b      	ldrh	r3, [r3, #0]
 800937c:	80bb      	strh	r3, [r7, #4]
    while(writeToRegister(SAMPLE_CLK_REGISTER, sampleClockRegister.raw, hspi, csPin, true) != HAL_OK);
 800937e:	bf00      	nop
 8009380:	254b      	movs	r5, #75	@ 0x4b
 8009382:	88bc      	ldrh	r4, [r7, #4]
 8009384:	2301      	movs	r3, #1
 8009386:	9319      	str	r3, [sp, #100]	@ 0x64
 8009388:	aa17      	add	r2, sp, #92	@ 0x5c
 800938a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800938e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009392:	e882 0003 	stmia.w	r2, {r0, r1}
 8009396:	4668      	mov	r0, sp
 8009398:	f107 0320 	add.w	r3, r7, #32
 800939c:	225c      	movs	r2, #92	@ 0x5c
 800939e:	4619      	mov	r1, r3
 80093a0:	f00e f88c 	bl	80174bc <memcpy>
 80093a4:	f107 0318 	add.w	r3, r7, #24
 80093a8:	cb0c      	ldmia	r3, {r2, r3}
 80093aa:	4621      	mov	r1, r4
 80093ac:	4628      	mov	r0, r5
 80093ae:	f7ff ff25 	bl	80091fc <writeToRegister>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e3      	bne.n	8009380 <smokeSensorADPD188Init+0x1c>

    // 2- go to Program mode
    setDeviceMode(hspi, PROGRAM, csPin);
 80093b8:	aa16      	add	r2, sp, #88	@ 0x58
 80093ba:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80093be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093c2:	e882 0003 	stmia.w	r2, {r0, r1}
 80093c6:	2301      	movs	r3, #1
 80093c8:	9315      	str	r3, [sp, #84]	@ 0x54
 80093ca:	4668      	mov	r0, sp
 80093cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80093d0:	2254      	movs	r2, #84	@ 0x54
 80093d2:	4619      	mov	r1, r3
 80093d4:	f00e f872 	bl	80174bc <memcpy>
 80093d8:	f107 0318 	add.w	r3, r7, #24
 80093dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80093de:	f7ff fec7 	bl	8009170 <setDeviceMode>
    // 3-   additional configurations --> default config
    // config the sensor with recommended configurations except for sampling frequency and fifo update
    config(hspi, csPin);
 80093e2:	aa15      	add	r2, sp, #84	@ 0x54
 80093e4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80093e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80093f0:	4668      	mov	r0, sp
 80093f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80093f6:	2254      	movs	r2, #84	@ 0x54
 80093f8:	4619      	mov	r1, r3
 80093fa:	f00e f85f 	bl	80174bc <memcpy>
 80093fe:	f107 0318 	add.w	r3, r7, #24
 8009402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009404:	f000 fa74 	bl	80098f0 <config>

    // 4-go to Normal Mode
    setDeviceMode(hspi, NORMAL, csPin);
 8009408:	aa16      	add	r2, sp, #88	@ 0x58
 800940a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800940e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009412:	e882 0003 	stmia.w	r2, {r0, r1}
 8009416:	2302      	movs	r3, #2
 8009418:	9315      	str	r3, [sp, #84]	@ 0x54
 800941a:	4668      	mov	r0, sp
 800941c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009420:	2254      	movs	r2, #84	@ 0x54
 8009422:	4619      	mov	r1, r3
 8009424:	f00e f84a 	bl	80174bc <memcpy>
 8009428:	f107 0318 	add.w	r3, r7, #24
 800942c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800942e:	f7ff fe9f 	bl	8009170 <setDeviceMode>
    mode = readRegisterData(MODE_REGISTER, hspi, csPin);
 8009432:	2410      	movs	r4, #16
 8009434:	aa16      	add	r2, sp, #88	@ 0x58
 8009436:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800943a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800943e:	e882 0003 	stmia.w	r2, {r0, r1}
 8009442:	4668      	mov	r0, sp
 8009444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009448:	2258      	movs	r2, #88	@ 0x58
 800944a:	4619      	mov	r1, r3
 800944c:	f00e f836 	bl	80174bc <memcpy>
 8009450:	f107 0318 	add.w	r3, r7, #24
 8009454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009456:	4620      	mov	r0, r4
 8009458:	f7ff ff38 	bl	80092cc <readRegisterData>
 800945c:	4603      	mov	r3, r0
 800945e:	80fb      	strh	r3, [r7, #6]

    HAL_Delay(500);
 8009460:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009464:	f005 fbd6 	bl	800ec14 <HAL_Delay>

    startTime = HAL_GetTick();
 8009468:	f005 fbc8 	bl	800ebfc <HAL_GetTick>
 800946c:	4603      	mov	r3, r0
 800946e:	4a08      	ldr	r2, [pc, #32]	@ (8009490 <smokeSensorADPD188Init+0x12c>)
 8009470:	6013      	str	r3, [r2, #0]

    if (mode == 2)  // mode =2  --> Normal mode
 8009472:	88fb      	ldrh	r3, [r7, #6]
 8009474:	2b02      	cmp	r3, #2
 8009476:	d101      	bne.n	800947c <smokeSensorADPD188Init+0x118>
    {
        return HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	e000      	b.n	800947e <smokeSensorADPD188Init+0x11a>
    }
    return HAL_ERROR;
 800947c:	2301      	movs	r3, #1

    // startTime = HAL_GetTick();
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009488:	b004      	add	sp, #16
 800948a:	4770      	bx	lr
 800948c:	080175ec 	.word	0x080175ec
 8009490:	200000bc 	.word	0x200000bc

08009494 <readFifo>:


uint8_t Mode_Flag = 0;
_ADP_rawData readRawData;
_ADP_rawData readFifo(SPI_HandleTypeDef hspi, struct CsPin csPin)
{
 8009494:	b084      	sub	sp, #16
 8009496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949a:	b0a0      	sub	sp, #128	@ 0x80
 800949c:	af18      	add	r7, sp, #96	@ 0x60
 800949e:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 80094a2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  // read 64 bits of fifo  (32 bits for each slot )
    uint16_t rxData[4] = {};
 80094a6:	f107 030c 	add.w	r3, r7, #12
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	605a      	str	r2, [r3, #4]
    union FifoData fifoData = {.bytes = {0, 0}, .raw = 0};
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	e9c7 2300 	strd	r2, r3, [r7]

    // read Fifo data
     if (read_fifo_state==0)
 80094bc:	4b5e      	ldr	r3, [pc, #376]	@ (8009638 <readFifo+0x1a4>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d139      	bne.n	8009538 <readFifo+0xa4>
     {
       uint32_t cnt_1000ms_fifo=HAL_GetTick();
 80094c4:	f005 fb9a 	bl	800ebfc <HAL_GetTick>
 80094c8:	61b8      	str	r0, [r7, #24]

       // after 1000 ms, data reading start!
       if ( abs(startTime - cnt_1000ms_fifo) >= 1000 )
 80094ca:	4b5c      	ldr	r3, [pc, #368]	@ (800963c <readFifo+0x1a8>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bfb8      	it	lt
 80094d6:	425b      	neglt	r3, r3
 80094d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80094dc:	db2c      	blt.n	8009538 <readFifo+0xa4>
       {
    	 uint8_t isChange = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	77fb      	strb	r3, [r7, #31]
    	 if(abs(ui.IR_Offset - IR_Offset) > 20)
 80094e2:	4b57      	ldr	r3, [pc, #348]	@ (8009640 <readFifo+0x1ac>)
 80094e4:	899b      	ldrh	r3, [r3, #12]
 80094e6:	461a      	mov	r2, r3
 80094e8:	4b56      	ldr	r3, [pc, #344]	@ (8009644 <readFifo+0x1b0>)
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	bfb8      	it	lt
 80094f2:	425b      	neglt	r3, r3
 80094f4:	2b14      	cmp	r3, #20
 80094f6:	dd05      	ble.n	8009504 <readFifo+0x70>
    	 {
    		 ui.IR_Offset = IR_Offset;
 80094f8:	4b52      	ldr	r3, [pc, #328]	@ (8009644 <readFifo+0x1b0>)
 80094fa:	881a      	ldrh	r2, [r3, #0]
 80094fc:	4b50      	ldr	r3, [pc, #320]	@ (8009640 <readFifo+0x1ac>)
 80094fe:	819a      	strh	r2, [r3, #12]
    		 isChange = 1;
 8009500:	2301      	movs	r3, #1
 8009502:	77fb      	strb	r3, [r7, #31]
    	 }
    	 if(abs(ui.Blue_IR_Offset - Blue_IR_Offset) > 20){
 8009504:	4b4e      	ldr	r3, [pc, #312]	@ (8009640 <readFifo+0x1ac>)
 8009506:	89db      	ldrh	r3, [r3, #14]
 8009508:	461a      	mov	r2, r3
 800950a:	4b4f      	ldr	r3, [pc, #316]	@ (8009648 <readFifo+0x1b4>)
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	2b00      	cmp	r3, #0
 8009512:	bfb8      	it	lt
 8009514:	425b      	neglt	r3, r3
 8009516:	2b14      	cmp	r3, #20
 8009518:	dd05      	ble.n	8009526 <readFifo+0x92>
    		 ui.Blue_IR_Offset = Blue_IR_Offset;
 800951a:	4b4b      	ldr	r3, [pc, #300]	@ (8009648 <readFifo+0x1b4>)
 800951c:	881a      	ldrh	r2, [r3, #0]
 800951e:	4b48      	ldr	r3, [pc, #288]	@ (8009640 <readFifo+0x1ac>)
 8009520:	81da      	strh	r2, [r3, #14]
    		 isChange = 1;
 8009522:	2301      	movs	r3, #1
 8009524:	77fb      	strb	r3, [r7, #31]
    	 }
    	 if(isChange){
 8009526:	7ffb      	ldrb	r3, [r7, #31]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d002      	beq.n	8009532 <readFifo+0x9e>
             EEPROM.SaveData_Flag = 1;
 800952c:	4b47      	ldr	r3, [pc, #284]	@ (800964c <readFifo+0x1b8>)
 800952e:	2201      	movs	r2, #1
 8009530:	701a      	strb	r2, [r3, #0]
    	 }
         read_fifo_state = 1;
 8009532:	4b41      	ldr	r3, [pc, #260]	@ (8009638 <readFifo+0x1a4>)
 8009534:	2201      	movs	r2, #1
 8009536:	701a      	strb	r2, [r3, #0]
       }
     }


    for (uint8_t i = 0; i < 4; i++)
 8009538:	2300      	movs	r3, #0
 800953a:	77bb      	strb	r3, [r7, #30]
 800953c:	e020      	b.n	8009580 <readFifo+0xec>
    {
        rxData[i] = readRegisterData(FIFO_ACCESS_REGISTER, hspi, csPin);
 800953e:	f04f 0860 	mov.w	r8, #96	@ 0x60
 8009542:	7fbe      	ldrb	r6, [r7, #30]
 8009544:	aa16      	add	r2, sp, #88	@ 0x58
 8009546:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800954a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800954e:	e882 0003 	stmia.w	r2, {r0, r1}
 8009552:	4668      	mov	r0, sp
 8009554:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009558:	2258      	movs	r2, #88	@ 0x58
 800955a:	4619      	mov	r1, r3
 800955c:	f00d ffae 	bl	80174bc <memcpy>
 8009560:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009566:	4640      	mov	r0, r8
 8009568:	f7ff feb0 	bl	80092cc <readRegisterData>
 800956c:	4603      	mov	r3, r0
 800956e:	461a      	mov	r2, r3
 8009570:	0073      	lsls	r3, r6, #1
 8009572:	3320      	adds	r3, #32
 8009574:	443b      	add	r3, r7
 8009576:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < 4; i++)
 800957a:	7fbb      	ldrb	r3, [r7, #30]
 800957c:	3301      	adds	r3, #1
 800957e:	77bb      	strb	r3, [r7, #30]
 8009580:	7fbb      	ldrb	r3, [r7, #30]
 8009582:	2b03      	cmp	r3, #3
 8009584:	d9db      	bls.n	800953e <readFifo+0xaa>
    	setDeviceMode(hspi, NORMAL, csPin);
    }
    */


    setDeviceMode(hspi, PROGRAM, csPin);
 8009586:	aa16      	add	r2, sp, #88	@ 0x58
 8009588:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800958c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009590:	e882 0003 	stmia.w	r2, {r0, r1}
 8009594:	2301      	movs	r3, #1
 8009596:	9315      	str	r3, [sp, #84]	@ 0x54
 8009598:	4668      	mov	r0, sp
 800959a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800959e:	2254      	movs	r2, #84	@ 0x54
 80095a0:	4619      	mov	r1, r3
 80095a2:	f00d ff8b 	bl	80174bc <memcpy>
 80095a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80095aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095ac:	f7ff fde0 	bl	8009170 <setDeviceMode>

   // HAL_Delay(2);

    setDeviceMode(hspi, NORMAL, csPin);
 80095b0:	aa16      	add	r2, sp, #88	@ 0x58
 80095b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80095b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80095ba:	e882 0003 	stmia.w	r2, {r0, r1}
 80095be:	2302      	movs	r3, #2
 80095c0:	9315      	str	r3, [sp, #84]	@ 0x54
 80095c2:	4668      	mov	r0, sp
 80095c4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80095c8:	2254      	movs	r2, #84	@ 0x54
 80095ca:	4619      	mov	r1, r3
 80095cc:	f00d ff76 	bl	80174bc <memcpy>
 80095d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80095d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095d6:	f7ff fdcb 	bl	8009170 <setDeviceMode>



    // copy rxData into fifoData structure
    memcpy(&fifoData.raw, rxData, 8);
 80095da:	68fc      	ldr	r4, [r7, #12]
 80095dc:	693d      	ldr	r5, [r7, #16]
 80095de:	4622      	mov	r2, r4
 80095e0:	462b      	mov	r3, r5
 80095e2:	e9c7 2300 	strd	r2, r3, [r7]

    // adp raw data
    Data_A = (fifoData.raw >> 32)&0xffff;  // blue_led value default 780~790
 80095e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095ea:	f04f 0200 	mov.w	r2, #0
 80095ee:	f04f 0300 	mov.w	r3, #0
 80095f2:	000a      	movs	r2, r1
 80095f4:	2300      	movs	r3, #0
 80095f6:	b292      	uxth	r2, r2
 80095f8:	4b15      	ldr	r3, [pc, #84]	@ (8009650 <readFifo+0x1bc>)
 80095fa:	801a      	strh	r2, [r3, #0]
    Data_B = fifoData.raw&0xffff;          // infra_red_led value default 480~500
 80095fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009600:	b292      	uxth	r2, r2
 8009602:	4b14      	ldr	r3, [pc, #80]	@ (8009654 <readFifo+0x1c0>)
 8009604:	801a      	strh	r2, [r3, #0]

    // check_err_data using stop point-----
    readRawData.raw_ADP_Data_A=Data_A;
 8009606:	4b12      	ldr	r3, [pc, #72]	@ (8009650 <readFifo+0x1bc>)
 8009608:	881a      	ldrh	r2, [r3, #0]
 800960a:	4b13      	ldr	r3, [pc, #76]	@ (8009658 <readFifo+0x1c4>)
 800960c:	801a      	strh	r2, [r3, #0]
    readRawData.raw_ADP_Data_B=Data_B;
 800960e:	4b11      	ldr	r3, [pc, #68]	@ (8009654 <readFifo+0x1c0>)
 8009610:	881a      	ldrh	r2, [r3, #0]
 8009612:	4b11      	ldr	r3, [pc, #68]	@ (8009658 <readFifo+0x1c4>)
 8009614:	805a      	strh	r2, [r3, #2]

    return readRawData;
 8009616:	4b10      	ldr	r3, [pc, #64]	@ (8009658 <readFifo+0x1c4>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	617b      	str	r3, [r7, #20]
 800961c:	2300      	movs	r3, #0
 800961e:	8aba      	ldrh	r2, [r7, #20]
 8009620:	f362 030f 	bfi	r3, r2, #0, #16
 8009624:	8afa      	ldrh	r2, [r7, #22]
 8009626:	f362 431f 	bfi	r3, r2, #16, #16


}
 800962a:	4618      	mov	r0, r3
 800962c:	3720      	adds	r7, #32
 800962e:	46bd      	mov	sp, r7
 8009630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009634:	b004      	add	sp, #16
 8009636:	4770      	bx	lr
 8009638:	200000c4 	.word	0x200000c4
 800963c:	200000bc 	.word	0x200000bc
 8009640:	200004f0 	.word	0x200004f0
 8009644:	20000000 	.word	0x20000000
 8009648:	20000002 	.word	0x20000002
 800964c:	20000298 	.word	0x20000298
 8009650:	200000c0 	.word	0x200000c0
 8009654:	200000c2 	.word	0x200000c2
 8009658:	200000cc 	.word	0x200000cc

0800965c <readData>:
uint16_t Data_A_Offset = 0;
uint16_t Data_B_Offset = 0;
_result_adp_data ADP_RESULT;

_result_adp_data readData(SPI_HandleTypeDef hspi, struct CsPin csPin)    // 구조체 변수 ADP_RESULT 리턴
{
 800965c:	b084      	sub	sp, #16
 800965e:	b5b0      	push	{r4, r5, r7, lr}
 8009660:	b0a2      	sub	sp, #136	@ 0x88
 8009662:	af1a      	add	r7, sp, #104	@ 0x68
 8009664:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8009668:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  _ADP_rawData raw_adp_data = {0,0};
 800966c:	2300      	movs	r3, #0
 800966e:	813b      	strh	r3, [r7, #8]
 8009670:	2300      	movs	r3, #0
 8009672:	817b      	strh	r3, [r7, #10]
  _ADP_rawData dummy_data = {0,0};
 8009674:	2300      	movs	r3, #0
 8009676:	80bb      	strh	r3, [r7, #4]
 8009678:	2300      	movs	r3, #0
 800967a:	80fb      	strh	r3, [r7, #6]
  //update Fifo with new readings
  union DataAccessCtrl dataAccessCtrl = {.bits={0, 0, 0, 0}, .raw = 0};  // {.raw = 0}; 그냥 이렇게만 써도 된다는거 같음
 800967c:	2300      	movs	r3, #0
 800967e:	803b      	strh	r3, [r7, #0]
  writeToRegister(DATA_ACCESS_CONTROL_REGISTER, dataAccessCtrl.raw, hspi, csPin, true);
 8009680:	255f      	movs	r5, #95	@ 0x5f
 8009682:	883c      	ldrh	r4, [r7, #0]
 8009684:	2301      	movs	r3, #1
 8009686:	9319      	str	r3, [sp, #100]	@ 0x64
 8009688:	aa17      	add	r2, sp, #92	@ 0x5c
 800968a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800968e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009692:	e882 0003 	stmia.w	r2, {r0, r1}
 8009696:	4668      	mov	r0, sp
 8009698:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800969c:	225c      	movs	r2, #92	@ 0x5c
 800969e:	4619      	mov	r1, r3
 80096a0:	f00d ff0c 	bl	80174bc <memcpy>
 80096a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80096a8:	cb0c      	ldmia	r3, {r2, r3}
 80096aa:	4621      	mov	r1, r4
 80096ac:	4628      	mov	r0, r5
 80096ae:	f7ff fda5 	bl	80091fc <writeToRegister>

  // if sampling  time is elapsed Hold Samples in the Fifo
  dataAccessCtrl.bits.slotADataHold = 1;
 80096b2:	783b      	ldrb	r3, [r7, #0]
 80096b4:	f043 0302 	orr.w	r3, r3, #2
 80096b8:	703b      	strb	r3, [r7, #0]
  dataAccessCtrl.bits.slotBDataHold = 1;
 80096ba:	783b      	ldrb	r3, [r7, #0]
 80096bc:	f043 0304 	orr.w	r3, r3, #4
 80096c0:	703b      	strb	r3, [r7, #0]

  writeToRegister(DATA_ACCESS_CONTROL_REGISTER, dataAccessCtrl.raw, hspi, csPin, true);
 80096c2:	255f      	movs	r5, #95	@ 0x5f
 80096c4:	883c      	ldrh	r4, [r7, #0]
 80096c6:	2301      	movs	r3, #1
 80096c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80096ca:	aa17      	add	r2, sp, #92	@ 0x5c
 80096cc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80096d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80096d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80096d8:	4668      	mov	r0, sp
 80096da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80096de:	225c      	movs	r2, #92	@ 0x5c
 80096e0:	4619      	mov	r1, r3
 80096e2:	f00d feeb 	bl	80174bc <memcpy>
 80096e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80096ea:	cb0c      	ldmia	r3, {r2, r3}
 80096ec:	4621      	mov	r1, r4
 80096ee:	4628      	mov	r0, r5
 80096f0:	f7ff fd84 	bl	80091fc <writeToRegister>





  if (read_fifo_state==0)
 80096f4:	4b6c      	ldr	r3, [pc, #432]	@ (80098a8 <readData+0x24c>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f040 8093 	bne.w	8009824 <readData+0x1c8>
  {
    //Calc average ADP data to delete background noise
    dummy_data = readFifo(hspi,csPin);
 80096fe:	aa15      	add	r2, sp, #84	@ 0x54
 8009700:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009704:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009708:	e882 0003 	stmia.w	r2, {r0, r1}
 800970c:	4668      	mov	r0, sp
 800970e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009712:	2254      	movs	r2, #84	@ 0x54
 8009714:	4619      	mov	r1, r3
 8009716:	f00d fed1 	bl	80174bc <memcpy>
 800971a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800971e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009720:	f7ff feb8 	bl	8009494 <readFifo>
 8009724:	4603      	mov	r3, r0
 8009726:	607b      	str	r3, [r7, #4]
    for (uint8_t k=0; k<backNoiseArray; k++)
 8009728:	2300      	movs	r3, #0
 800972a:	77fb      	strb	r3, [r7, #31]
 800972c:	e014      	b.n	8009758 <readData+0xfc>
	{
		Data_A_backNoise[k]=Data_A_backNoise[k+1];
 800972e:	7ffb      	ldrb	r3, [r7, #31]
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	7ffb      	ldrb	r3, [r7, #31]
 8009734:	495d      	ldr	r1, [pc, #372]	@ (80098ac <readData+0x250>)
 8009736:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800973a:	4a5c      	ldr	r2, [pc, #368]	@ (80098ac <readData+0x250>)
 800973c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Data_B_backNoise[k]=Data_B_backNoise[k+1];
 8009740:	7ffb      	ldrb	r3, [r7, #31]
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	7ffb      	ldrb	r3, [r7, #31]
 8009746:	495a      	ldr	r1, [pc, #360]	@ (80098b0 <readData+0x254>)
 8009748:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800974c:	4a58      	ldr	r2, [pc, #352]	@ (80098b0 <readData+0x254>)
 800974e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t k=0; k<backNoiseArray; k++)
 8009752:	7ffb      	ldrb	r3, [r7, #31]
 8009754:	3301      	adds	r3, #1
 8009756:	77fb      	strb	r3, [r7, #31]
 8009758:	7ffb      	ldrb	r3, [r7, #31]
 800975a:	2b63      	cmp	r3, #99	@ 0x63
 800975c:	d9e7      	bls.n	800972e <readData+0xd2>
	}
	Data_A_backNoise[backNoiseArray-1]=dummy_data.raw_ADP_Data_A;
 800975e:	88ba      	ldrh	r2, [r7, #4]
 8009760:	4b52      	ldr	r3, [pc, #328]	@ (80098ac <readData+0x250>)
 8009762:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
	Data_B_backNoise[backNoiseArray-1]=dummy_data.raw_ADP_Data_B;
 8009766:	88fa      	ldrh	r2, [r7, #6]
 8009768:	4b51      	ldr	r3, [pc, #324]	@ (80098b0 <readData+0x254>)
 800976a:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
	Data_A_Offset_Sum += dummy_data.raw_ADP_Data_A;
 800976e:	88bb      	ldrh	r3, [r7, #4]
 8009770:	461a      	mov	r2, r3
 8009772:	4b50      	ldr	r3, [pc, #320]	@ (80098b4 <readData+0x258>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4413      	add	r3, r2
 8009778:	4a4e      	ldr	r2, [pc, #312]	@ (80098b4 <readData+0x258>)
 800977a:	6013      	str	r3, [r2, #0]
	Data_B_Offset_Sum += dummy_data.raw_ADP_Data_B;
 800977c:	88fb      	ldrh	r3, [r7, #6]
 800977e:	461a      	mov	r2, r3
 8009780:	4b4d      	ldr	r3, [pc, #308]	@ (80098b8 <readData+0x25c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4413      	add	r3, r2
 8009786:	4a4c      	ldr	r2, [pc, #304]	@ (80098b8 <readData+0x25c>)
 8009788:	6013      	str	r3, [r2, #0]
	offset_cnt++;
 800978a:	4b4c      	ldr	r3, [pc, #304]	@ (80098bc <readData+0x260>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3301      	adds	r3, #1
 8009790:	4a4a      	ldr	r2, [pc, #296]	@ (80098bc <readData+0x260>)
 8009792:	6013      	str	r3, [r2, #0]

	uint32_t sum_Data_A=0,sum_Data_B=0;
 8009794:	2300      	movs	r3, #0
 8009796:	61bb      	str	r3, [r7, #24]
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]
	for (uint8_t k=0; k<backNoiseArray; k++)
 800979c:	2300      	movs	r3, #0
 800979e:	74fb      	strb	r3, [r7, #19]
 80097a0:	e016      	b.n	80097d0 <readData+0x174>
	{
		sum_Data_A+=Data_A_backNoise[k];
 80097a2:	7cfb      	ldrb	r3, [r7, #19]
 80097a4:	4a41      	ldr	r2, [pc, #260]	@ (80098ac <readData+0x250>)
 80097a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097aa:	461a      	mov	r2, r3
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	4413      	add	r3, r2
 80097b0:	61bb      	str	r3, [r7, #24]
		sum_Data_B+=Data_B_backNoise[k];
 80097b2:	7cfb      	ldrb	r3, [r7, #19]
 80097b4:	4a3e      	ldr	r2, [pc, #248]	@ (80098b0 <readData+0x254>)
 80097b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ba:	461a      	mov	r2, r3
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	4413      	add	r3, r2
 80097c0:	617b      	str	r3, [r7, #20]
		check_A=sum_Data_A;
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	4b3e      	ldr	r3, [pc, #248]	@ (80098c0 <readData+0x264>)
 80097c8:	801a      	strh	r2, [r3, #0]
	for (uint8_t k=0; k<backNoiseArray; k++)
 80097ca:	7cfb      	ldrb	r3, [r7, #19]
 80097cc:	3301      	adds	r3, #1
 80097ce:	74fb      	strb	r3, [r7, #19]
 80097d0:	7cfb      	ldrb	r3, [r7, #19]
 80097d2:	2b63      	cmp	r3, #99	@ 0x63
 80097d4:	d9e5      	bls.n	80097a2 <readData+0x146>
	}
	Data_A_Offset = Data_A_Offset_Sum / offset_cnt;
 80097d6:	4b37      	ldr	r3, [pc, #220]	@ (80098b4 <readData+0x258>)
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	4b38      	ldr	r3, [pc, #224]	@ (80098bc <readData+0x260>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	4b37      	ldr	r3, [pc, #220]	@ (80098c4 <readData+0x268>)
 80097e6:	801a      	strh	r2, [r3, #0]
	Data_B_Offset = Data_B_Offset_Sum / offset_cnt;
 80097e8:	4b33      	ldr	r3, [pc, #204]	@ (80098b8 <readData+0x25c>)
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	4b33      	ldr	r3, [pc, #204]	@ (80098bc <readData+0x260>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	4b34      	ldr	r3, [pc, #208]	@ (80098c8 <readData+0x26c>)
 80097f8:	801a      	strh	r2, [r3, #0]
	Blue_IR_Offset=sum_Data_A/backNoiseArray; // value err
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	4a33      	ldr	r2, [pc, #204]	@ (80098cc <readData+0x270>)
 80097fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009802:	095b      	lsrs	r3, r3, #5
 8009804:	b29a      	uxth	r2, r3
 8009806:	4b32      	ldr	r3, [pc, #200]	@ (80098d0 <readData+0x274>)
 8009808:	801a      	strh	r2, [r3, #0]
	check_B=avg_data_A;
 800980a:	4b32      	ldr	r3, [pc, #200]	@ (80098d4 <readData+0x278>)
 800980c:	881a      	ldrh	r2, [r3, #0]
 800980e:	4b32      	ldr	r3, [pc, #200]	@ (80098d8 <readData+0x27c>)
 8009810:	801a      	strh	r2, [r3, #0]
	IR_Offset=sum_Data_B/backNoiseArray;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	4a2d      	ldr	r2, [pc, #180]	@ (80098cc <readData+0x270>)
 8009816:	fba2 2303 	umull	r2, r3, r2, r3
 800981a:	095b      	lsrs	r3, r3, #5
 800981c:	b29a      	uxth	r2, r3
 800981e:	4b2f      	ldr	r3, [pc, #188]	@ (80098dc <readData+0x280>)
 8009820:	801a      	strh	r2, [r3, #0]
 8009822:	e014      	b.n	800984e <readData+0x1f2>

  }
  else
  {
	  raw_adp_data = readFifo(hspi, csPin);
 8009824:	aa15      	add	r2, sp, #84	@ 0x54
 8009826:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800982a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800982e:	e882 0003 	stmia.w	r2, {r0, r1}
 8009832:	4668      	mov	r0, sp
 8009834:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009838:	2254      	movs	r2, #84	@ 0x54
 800983a:	4619      	mov	r1, r3
 800983c:	f00d fe3e 	bl	80174bc <memcpy>
 8009840:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009846:	f7ff fe25 	bl	8009494 <readFifo>
 800984a:	4603      	mov	r3, r0
 800984c:	60bb      	str	r3, [r7, #8]




  // 데이터 처리
  processed_A = raw_adp_data.raw_ADP_Data_A-ui.Blue_IR_Offset >= 0 ? raw_adp_data.raw_ADP_Data_A - ui.Blue_IR_Offset : 0;
 800984e:	893b      	ldrh	r3, [r7, #8]
 8009850:	461a      	mov	r2, r3
 8009852:	4b23      	ldr	r3, [pc, #140]	@ (80098e0 <readData+0x284>)
 8009854:	89db      	ldrh	r3, [r3, #14]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800985c:	b29a      	uxth	r2, r3
 800985e:	4b21      	ldr	r3, [pc, #132]	@ (80098e4 <readData+0x288>)
 8009860:	801a      	strh	r2, [r3, #0]
  processed_B = raw_adp_data.raw_ADP_Data_B-ui.IR_Offset >= 0 ? raw_adp_data.raw_ADP_Data_B - ui.IR_Offset : 0;
 8009862:	897b      	ldrh	r3, [r7, #10]
 8009864:	461a      	mov	r2, r3
 8009866:	4b1e      	ldr	r3, [pc, #120]	@ (80098e0 <readData+0x284>)
 8009868:	899b      	ldrh	r3, [r3, #12]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009870:	b29a      	uxth	r2, r3
 8009872:	4b1d      	ldr	r3, [pc, #116]	@ (80098e8 <readData+0x28c>)
 8009874:	801a      	strh	r2, [r3, #0]
  ADP_RESULT.result_Blue_val = filting_finish_data.final_filt_Data_A;
  ADP_RESULT.result_IR_val = filting_finish_data.final_filt_Data_B;
*/
//  ADP_RESULT.result_Blue_val = raw_adp_data.raw_ADP_Data_A;
//  ADP_RESULT.result_IR_val = raw_adp_data.raw_ADP_Data_B;
  ADP_RESULT.result_Blue_val = processed_A;
 8009876:	4b1b      	ldr	r3, [pc, #108]	@ (80098e4 <readData+0x288>)
 8009878:	881a      	ldrh	r2, [r3, #0]
 800987a:	4b1c      	ldr	r3, [pc, #112]	@ (80098ec <readData+0x290>)
 800987c:	801a      	strh	r2, [r3, #0]
  ADP_RESULT.result_IR_val = processed_B;
 800987e:	4b1a      	ldr	r3, [pc, #104]	@ (80098e8 <readData+0x28c>)
 8009880:	881a      	ldrh	r2, [r3, #0]
 8009882:	4b1a      	ldr	r3, [pc, #104]	@ (80098ec <readData+0x290>)
 8009884:	805a      	strh	r2, [r3, #2]

  //raw_adp_data.raw = 0; // initialize

  return ADP_RESULT;
 8009886:	4b19      	ldr	r3, [pc, #100]	@ (80098ec <readData+0x290>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	2300      	movs	r3, #0
 800988e:	89ba      	ldrh	r2, [r7, #12]
 8009890:	f362 030f 	bfi	r3, r2, #0, #16
 8009894:	89fa      	ldrh	r2, [r7, #14]
 8009896:	f362 431f 	bfi	r3, r2, #16, #16
}
 800989a:	4618      	mov	r0, r3
 800989c:	3720      	adds	r7, #32
 800989e:	46bd      	mov	sp, r7
 80098a0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80098a4:	b004      	add	sp, #16
 80098a6:	4770      	bx	lr
 80098a8:	200000c4 	.word	0x200000c4
 80098ac:	200000d8 	.word	0x200000d8
 80098b0:	200001a0 	.word	0x200001a0
 80098b4:	20000268 	.word	0x20000268
 80098b8:	2000026c 	.word	0x2000026c
 80098bc:	20000270 	.word	0x20000270
 80098c0:	200000d0 	.word	0x200000d0
 80098c4:	20000274 	.word	0x20000274
 80098c8:	20000276 	.word	0x20000276
 80098cc:	51eb851f 	.word	0x51eb851f
 80098d0:	20000002 	.word	0x20000002
 80098d4:	200000d4 	.word	0x200000d4
 80098d8:	200000d2 	.word	0x200000d2
 80098dc:	20000000 	.word	0x20000000
 80098e0:	200004f0 	.word	0x200004f0
 80098e4:	200000c6 	.word	0x200000c6
 80098e8:	200000c8 	.word	0x200000c8
 80098ec:	20000278 	.word	0x20000278

080098f0 <config>:

//----------------------------------------------------------------------------------------------------------------------

void config(SPI_HandleTypeDef hspi, struct CsPin csPin) {
 80098f0:	b084      	sub	sp, #16
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b09a      	sub	sp, #104	@ 0x68
 80098f6:	af1a      	add	r7, sp, #104	@ 0x68
 80098f8:	f107 0c08 	add.w	ip, r7, #8
 80098fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    // write recommanded configurations  DS P42
    //while (writeToRegister(0x11, 0x30A9, hspi, csPin, true) != HAL_OK);
    while (writeToRegister(0x11, 0x20A9, hspi, csPin, true) != HAL_OK);
 8009900:	bf00      	nop
 8009902:	2301      	movs	r3, #1
 8009904:	9319      	str	r3, [sp, #100]	@ 0x64
 8009906:	aa17      	add	r2, sp, #92	@ 0x5c
 8009908:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800990c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009910:	e882 0003 	stmia.w	r2, {r0, r1}
 8009914:	4668      	mov	r0, sp
 8009916:	f107 0310 	add.w	r3, r7, #16
 800991a:	225c      	movs	r2, #92	@ 0x5c
 800991c:	4619      	mov	r1, r3
 800991e:	f00d fdcd 	bl	80174bc <memcpy>
 8009922:	f107 0308 	add.w	r3, r7, #8
 8009926:	cb0c      	ldmia	r3, {r2, r3}
 8009928:	f242 01a9 	movw	r1, #8361	@ 0x20a9
 800992c:	2011      	movs	r0, #17
 800992e:	f7ff fc65 	bl	80091fc <writeToRegister>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e4      	bne.n	8009902 <config+0x12>
    while (writeToRegister(0x12, 0x0028, hspi, csPin, true) != HAL_OK); // 16 Hz ***********
 8009938:	bf00      	nop
 800993a:	2301      	movs	r3, #1
 800993c:	9319      	str	r3, [sp, #100]	@ 0x64
 800993e:	aa17      	add	r2, sp, #92	@ 0x5c
 8009940:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009944:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009948:	e882 0003 	stmia.w	r2, {r0, r1}
 800994c:	4668      	mov	r0, sp
 800994e:	f107 0310 	add.w	r3, r7, #16
 8009952:	225c      	movs	r2, #92	@ 0x5c
 8009954:	4619      	mov	r1, r3
 8009956:	f00d fdb1 	bl	80174bc <memcpy>
 800995a:	f107 0308 	add.w	r3, r7, #8
 800995e:	cb0c      	ldmia	r3, {r2, r3}
 8009960:	2128      	movs	r1, #40	@ 0x28
 8009962:	2012      	movs	r0, #18
 8009964:	f7ff fc4a 	bl	80091fc <writeToRegister>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1e5      	bne.n	800993a <config+0x4a>
    /*
     * Sampling frequency: fSAMPLE = 32 kHz/(Register 0x12, Bits[15:0] × 4).
For example, 100 Hz = 0x0050; 200 Hz = 0x0028
     */
    while (writeToRegister(0x14, 0x011D, hspi, csPin, true) != HAL_OK); // when using fifo data read
 800996e:	bf00      	nop
 8009970:	2301      	movs	r3, #1
 8009972:	9319      	str	r3, [sp, #100]	@ 0x64
 8009974:	aa17      	add	r2, sp, #92	@ 0x5c
 8009976:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800997a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800997e:	e882 0003 	stmia.w	r2, {r0, r1}
 8009982:	4668      	mov	r0, sp
 8009984:	f107 0310 	add.w	r3, r7, #16
 8009988:	225c      	movs	r2, #92	@ 0x5c
 800998a:	4619      	mov	r1, r3
 800998c:	f00d fd96 	bl	80174bc <memcpy>
 8009990:	f107 0308 	add.w	r3, r7, #8
 8009994:	cb0c      	ldmia	r3, {r2, r3}
 8009996:	f240 111d 	movw	r1, #285	@ 0x11d
 800999a:	2014      	movs	r0, #20
 800999c:	f7ff fc2e 	bl	80091fc <writeToRegister>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1e4      	bne.n	8009970 <config+0x80>
//    while (writeToRegister(0x14, 0x550, hspi, csPin, true) != HAL_OK);  // when using independence slot channel
    while (writeToRegister(0x15, 0x0, hspi, csPin, true) != HAL_OK);
 80099a6:	bf00      	nop
 80099a8:	2301      	movs	r3, #1
 80099aa:	9319      	str	r3, [sp, #100]	@ 0x64
 80099ac:	aa17      	add	r2, sp, #92	@ 0x5c
 80099ae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80099b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80099b6:	e882 0003 	stmia.w	r2, {r0, r1}
 80099ba:	4668      	mov	r0, sp
 80099bc:	f107 0310 	add.w	r3, r7, #16
 80099c0:	225c      	movs	r2, #92	@ 0x5c
 80099c2:	4619      	mov	r1, r3
 80099c4:	f00d fd7a 	bl	80174bc <memcpy>
 80099c8:	f107 0308 	add.w	r3, r7, #8
 80099cc:	cb0c      	ldmia	r3, {r2, r3}
 80099ce:	2100      	movs	r1, #0
 80099d0:	2015      	movs	r0, #21
 80099d2:	f7ff fc13 	bl	80091fc <writeToRegister>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e5      	bne.n	80099a8 <config+0xb8>
    while (writeToRegister(0x17, 0x09, hspi, csPin, true) != HAL_OK);
 80099dc:	bf00      	nop
 80099de:	2301      	movs	r3, #1
 80099e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80099e2:	aa17      	add	r2, sp, #92	@ 0x5c
 80099e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80099e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80099ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80099f0:	4668      	mov	r0, sp
 80099f2:	f107 0310 	add.w	r3, r7, #16
 80099f6:	225c      	movs	r2, #92	@ 0x5c
 80099f8:	4619      	mov	r1, r3
 80099fa:	f00d fd5f 	bl	80174bc <memcpy>
 80099fe:	f107 0308 	add.w	r3, r7, #8
 8009a02:	cb0c      	ldmia	r3, {r2, r3}
 8009a04:	2109      	movs	r1, #9
 8009a06:	2017      	movs	r0, #23
 8009a08:	f7ff fbf8 	bl	80091fc <writeToRegister>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e5      	bne.n	80099de <config+0xee>
    while (writeToRegister(0x18, 0x00, hspi, csPin, true) != HAL_OK);
 8009a12:	bf00      	nop
 8009a14:	2301      	movs	r3, #1
 8009a16:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a18:	aa17      	add	r2, sp, #92	@ 0x5c
 8009a1a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009a1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a22:	e882 0003 	stmia.w	r2, {r0, r1}
 8009a26:	4668      	mov	r0, sp
 8009a28:	f107 0310 	add.w	r3, r7, #16
 8009a2c:	225c      	movs	r2, #92	@ 0x5c
 8009a2e:	4619      	mov	r1, r3
 8009a30:	f00d fd44 	bl	80174bc <memcpy>
 8009a34:	f107 0308 	add.w	r3, r7, #8
 8009a38:	cb0c      	ldmia	r3, {r2, r3}
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	2018      	movs	r0, #24
 8009a3e:	f7ff fbdd 	bl	80091fc <writeToRegister>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e5      	bne.n	8009a14 <config+0x124>
    while (writeToRegister(0x19, 0x3FFF, hspi, csPin, true) != HAL_OK);
 8009a48:	bf00      	nop
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a4e:	aa17      	add	r2, sp, #92	@ 0x5c
 8009a50:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009a54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a58:	e882 0003 	stmia.w	r2, {r0, r1}
 8009a5c:	4668      	mov	r0, sp
 8009a5e:	f107 0310 	add.w	r3, r7, #16
 8009a62:	225c      	movs	r2, #92	@ 0x5c
 8009a64:	4619      	mov	r1, r3
 8009a66:	f00d fd29 	bl	80174bc <memcpy>
 8009a6a:	f107 0308 	add.w	r3, r7, #8
 8009a6e:	cb0c      	ldmia	r3, {r2, r3}
 8009a70:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8009a74:	2019      	movs	r0, #25
 8009a76:	f7ff fbc1 	bl	80091fc <writeToRegister>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1e4      	bne.n	8009a4a <config+0x15a>
    while (writeToRegister(0x1A, 0x3FFF, hspi, csPin, true) != HAL_OK);
 8009a80:	bf00      	nop
 8009a82:	2301      	movs	r3, #1
 8009a84:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a86:	aa17      	add	r2, sp, #92	@ 0x5c
 8009a88:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009a8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a90:	e882 0003 	stmia.w	r2, {r0, r1}
 8009a94:	4668      	mov	r0, sp
 8009a96:	f107 0310 	add.w	r3, r7, #16
 8009a9a:	225c      	movs	r2, #92	@ 0x5c
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	f00d fd0d 	bl	80174bc <memcpy>
 8009aa2:	f107 0308 	add.w	r3, r7, #8
 8009aa6:	cb0c      	ldmia	r3, {r2, r3}
 8009aa8:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8009aac:	201a      	movs	r0, #26
 8009aae:	f7ff fba5 	bl	80091fc <writeToRegister>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e4      	bne.n	8009a82 <config+0x192>
    while (writeToRegister(0x1B, 0x3FFF, hspi, csPin, true) != HAL_OK);
 8009ab8:	bf00      	nop
 8009aba:	2301      	movs	r3, #1
 8009abc:	9319      	str	r3, [sp, #100]	@ 0x64
 8009abe:	aa17      	add	r2, sp, #92	@ 0x5c
 8009ac0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009ac8:	e882 0003 	stmia.w	r2, {r0, r1}
 8009acc:	4668      	mov	r0, sp
 8009ace:	f107 0310 	add.w	r3, r7, #16
 8009ad2:	225c      	movs	r2, #92	@ 0x5c
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	f00d fcf1 	bl	80174bc <memcpy>
 8009ada:	f107 0308 	add.w	r3, r7, #8
 8009ade:	cb0c      	ldmia	r3, {r2, r3}
 8009ae0:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8009ae4:	201b      	movs	r0, #27
 8009ae6:	f7ff fb89 	bl	80091fc <writeToRegister>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e4      	bne.n	8009aba <config+0x1ca>
    while (writeToRegister(0x1D, 0x09, hspi, csPin, true) != HAL_OK);
 8009af0:	bf00      	nop
 8009af2:	2301      	movs	r3, #1
 8009af4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009af6:	aa17      	add	r2, sp, #92	@ 0x5c
 8009af8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009afc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b00:	e882 0003 	stmia.w	r2, {r0, r1}
 8009b04:	4668      	mov	r0, sp
 8009b06:	f107 0310 	add.w	r3, r7, #16
 8009b0a:	225c      	movs	r2, #92	@ 0x5c
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	f00d fcd5 	bl	80174bc <memcpy>
 8009b12:	f107 0308 	add.w	r3, r7, #8
 8009b16:	cb0c      	ldmia	r3, {r2, r3}
 8009b18:	2109      	movs	r1, #9
 8009b1a:	201d      	movs	r0, #29
 8009b1c:	f7ff fb6e 	bl	80091fc <writeToRegister>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1e5      	bne.n	8009af2 <config+0x202>
    while (writeToRegister(0x1E, 0x00, hspi, csPin, true) != HAL_OK);
 8009b26:	bf00      	nop
 8009b28:	2301      	movs	r3, #1
 8009b2a:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b2c:	aa17      	add	r2, sp, #92	@ 0x5c
 8009b2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009b32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b36:	e882 0003 	stmia.w	r2, {r0, r1}
 8009b3a:	4668      	mov	r0, sp
 8009b3c:	f107 0310 	add.w	r3, r7, #16
 8009b40:	225c      	movs	r2, #92	@ 0x5c
 8009b42:	4619      	mov	r1, r3
 8009b44:	f00d fcba 	bl	80174bc <memcpy>
 8009b48:	f107 0308 	add.w	r3, r7, #8
 8009b4c:	cb0c      	ldmia	r3, {r2, r3}
 8009b4e:	2100      	movs	r1, #0
 8009b50:	201e      	movs	r0, #30
 8009b52:	f7ff fb53 	bl	80091fc <writeToRegister>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e5      	bne.n	8009b28 <config+0x238>
    while (writeToRegister(0x1F, 0x3FFF, hspi, csPin, true) != HAL_OK);
 8009b5c:	bf00      	nop
 8009b5e:	2301      	movs	r3, #1
 8009b60:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b62:	aa17      	add	r2, sp, #92	@ 0x5c
 8009b64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009b70:	4668      	mov	r0, sp
 8009b72:	f107 0310 	add.w	r3, r7, #16
 8009b76:	225c      	movs	r2, #92	@ 0x5c
 8009b78:	4619      	mov	r1, r3
 8009b7a:	f00d fc9f 	bl	80174bc <memcpy>
 8009b7e:	f107 0308 	add.w	r3, r7, #8
 8009b82:	cb0c      	ldmia	r3, {r2, r3}
 8009b84:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8009b88:	201f      	movs	r0, #31
 8009b8a:	f7ff fb37 	bl	80091fc <writeToRegister>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e4      	bne.n	8009b5e <config+0x26e>
    while (writeToRegister(0x20, 0x3FFF, hspi, csPin, true) != HAL_OK);
 8009b94:	bf00      	nop
 8009b96:	2301      	movs	r3, #1
 8009b98:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b9a:	aa17      	add	r2, sp, #92	@ 0x5c
 8009b9c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009ba0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009ba4:	e882 0003 	stmia.w	r2, {r0, r1}
 8009ba8:	4668      	mov	r0, sp
 8009baa:	f107 0310 	add.w	r3, r7, #16
 8009bae:	225c      	movs	r2, #92	@ 0x5c
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	f00d fc83 	bl	80174bc <memcpy>
 8009bb6:	f107 0308 	add.w	r3, r7, #8
 8009bba:	cb0c      	ldmia	r3, {r2, r3}
 8009bbc:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8009bc0:	2020      	movs	r0, #32
 8009bc2:	f7ff fb1b 	bl	80091fc <writeToRegister>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1e4      	bne.n	8009b96 <config+0x2a6>
    while (writeToRegister(0x21, 0x3FFF, hspi, csPin, true) != HAL_OK);
 8009bcc:	bf00      	nop
 8009bce:	2301      	movs	r3, #1
 8009bd0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009bd2:	aa17      	add	r2, sp, #92	@ 0x5c
 8009bd4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009bd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009bdc:	e882 0003 	stmia.w	r2, {r0, r1}
 8009be0:	4668      	mov	r0, sp
 8009be2:	f107 0310 	add.w	r3, r7, #16
 8009be6:	225c      	movs	r2, #92	@ 0x5c
 8009be8:	4619      	mov	r1, r3
 8009bea:	f00d fc67 	bl	80174bc <memcpy>
 8009bee:	f107 0308 	add.w	r3, r7, #8
 8009bf2:	cb0c      	ldmia	r3, {r2, r3}
 8009bf4:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8009bf8:	2021      	movs	r0, #33	@ 0x21
 8009bfa:	f7ff faff 	bl	80091fc <writeToRegister>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1e4      	bne.n	8009bce <config+0x2de>
    while (writeToRegister(0x22, 0x3539, hspi, csPin, true) != HAL_OK);
 8009c04:	bf00      	nop
 8009c06:	2301      	movs	r3, #1
 8009c08:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c0a:	aa17      	add	r2, sp, #92	@ 0x5c
 8009c0c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009c10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c14:	e882 0003 	stmia.w	r2, {r0, r1}
 8009c18:	4668      	mov	r0, sp
 8009c1a:	f107 0310 	add.w	r3, r7, #16
 8009c1e:	225c      	movs	r2, #92	@ 0x5c
 8009c20:	4619      	mov	r1, r3
 8009c22:	f00d fc4b 	bl	80174bc <memcpy>
 8009c26:	f107 0308 	add.w	r3, r7, #8
 8009c2a:	cb0c      	ldmia	r3, {r2, r3}
 8009c2c:	f243 5139 	movw	r1, #13625	@ 0x3539
 8009c30:	2022      	movs	r0, #34	@ 0x22
 8009c32:	f7ff fae3 	bl	80091fc <writeToRegister>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1e4      	bne.n	8009c06 <config+0x316>
    while (writeToRegister(0x23, 0x3536, hspi, csPin, true) != HAL_OK);
 8009c3c:	bf00      	nop
 8009c3e:	2301      	movs	r3, #1
 8009c40:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c42:	aa17      	add	r2, sp, #92	@ 0x5c
 8009c44:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009c48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009c50:	4668      	mov	r0, sp
 8009c52:	f107 0310 	add.w	r3, r7, #16
 8009c56:	225c      	movs	r2, #92	@ 0x5c
 8009c58:	4619      	mov	r1, r3
 8009c5a:	f00d fc2f 	bl	80174bc <memcpy>
 8009c5e:	f107 0308 	add.w	r3, r7, #8
 8009c62:	cb0c      	ldmia	r3, {r2, r3}
 8009c64:	f243 5136 	movw	r1, #13622	@ 0x3536
 8009c68:	2023      	movs	r0, #35	@ 0x23
 8009c6a:	f7ff fac7 	bl	80091fc <writeToRegister>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e4      	bne.n	8009c3e <config+0x34e>
    while (writeToRegister(0x24, 0x1530, hspi, csPin, true) != HAL_OK);
 8009c74:	bf00      	nop
 8009c76:	2301      	movs	r3, #1
 8009c78:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c7a:	aa17      	add	r2, sp, #92	@ 0x5c
 8009c7c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009c80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c84:	e882 0003 	stmia.w	r2, {r0, r1}
 8009c88:	4668      	mov	r0, sp
 8009c8a:	f107 0310 	add.w	r3, r7, #16
 8009c8e:	225c      	movs	r2, #92	@ 0x5c
 8009c90:	4619      	mov	r1, r3
 8009c92:	f00d fc13 	bl	80174bc <memcpy>
 8009c96:	f107 0308 	add.w	r3, r7, #8
 8009c9a:	cb0c      	ldmia	r3, {r2, r3}
 8009c9c:	f241 5130 	movw	r1, #5424	@ 0x1530
 8009ca0:	2024      	movs	r0, #36	@ 0x24
 8009ca2:	f7ff faab 	bl	80091fc <writeToRegister>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e4      	bne.n	8009c76 <config+0x386>
    while (writeToRegister(0x25, 0x630C, hspi, csPin, true) != HAL_OK);
 8009cac:	bf00      	nop
 8009cae:	2301      	movs	r3, #1
 8009cb0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009cb2:	aa17      	add	r2, sp, #92	@ 0x5c
 8009cb4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009cb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009cbc:	e882 0003 	stmia.w	r2, {r0, r1}
 8009cc0:	4668      	mov	r0, sp
 8009cc2:	f107 0310 	add.w	r3, r7, #16
 8009cc6:	225c      	movs	r2, #92	@ 0x5c
 8009cc8:	4619      	mov	r1, r3
 8009cca:	f00d fbf7 	bl	80174bc <memcpy>
 8009cce:	f107 0308 	add.w	r3, r7, #8
 8009cd2:	cb0c      	ldmia	r3, {r2, r3}
 8009cd4:	f246 310c 	movw	r1, #25356	@ 0x630c
 8009cd8:	2025      	movs	r0, #37	@ 0x25
 8009cda:	f7ff fa8f 	bl	80091fc <writeToRegister>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1e4      	bne.n	8009cae <config+0x3be>
    while (writeToRegister(0x30, 0x320, hspi, csPin, true) != HAL_OK);
 8009ce4:	bf00      	nop
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009cea:	aa17      	add	r2, sp, #92	@ 0x5c
 8009cec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009cf0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009cf4:	e882 0003 	stmia.w	r2, {r0, r1}
 8009cf8:	4668      	mov	r0, sp
 8009cfa:	f107 0310 	add.w	r3, r7, #16
 8009cfe:	225c      	movs	r2, #92	@ 0x5c
 8009d00:	4619      	mov	r1, r3
 8009d02:	f00d fbdb 	bl	80174bc <memcpy>
 8009d06:	f107 0308 	add.w	r3, r7, #8
 8009d0a:	cb0c      	ldmia	r3, {r2, r3}
 8009d0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8009d10:	2030      	movs	r0, #48	@ 0x30
 8009d12:	f7ff fa73 	bl	80091fc <writeToRegister>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1e4      	bne.n	8009ce6 <config+0x3f6>
    while (writeToRegister(0x31, 0x040E, hspi, csPin, true) != HAL_OK);
 8009d1c:	bf00      	nop
 8009d1e:	2301      	movs	r3, #1
 8009d20:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d22:	aa17      	add	r2, sp, #92	@ 0x5c
 8009d24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009d28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009d30:	4668      	mov	r0, sp
 8009d32:	f107 0310 	add.w	r3, r7, #16
 8009d36:	225c      	movs	r2, #92	@ 0x5c
 8009d38:	4619      	mov	r1, r3
 8009d3a:	f00d fbbf 	bl	80174bc <memcpy>
 8009d3e:	f107 0308 	add.w	r3, r7, #8
 8009d42:	cb0c      	ldmia	r3, {r2, r3}
 8009d44:	f240 410e 	movw	r1, #1038	@ 0x40e
 8009d48:	2031      	movs	r0, #49	@ 0x31
 8009d4a:	f7ff fa57 	bl	80091fc <writeToRegister>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1e4      	bne.n	8009d1e <config+0x42e>
    while (writeToRegister(0x35, 0x320, hspi, csPin, true) != HAL_OK);
 8009d54:	bf00      	nop
 8009d56:	2301      	movs	r3, #1
 8009d58:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d5a:	aa17      	add	r2, sp, #92	@ 0x5c
 8009d5c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009d60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d64:	e882 0003 	stmia.w	r2, {r0, r1}
 8009d68:	4668      	mov	r0, sp
 8009d6a:	f107 0310 	add.w	r3, r7, #16
 8009d6e:	225c      	movs	r2, #92	@ 0x5c
 8009d70:	4619      	mov	r1, r3
 8009d72:	f00d fba3 	bl	80174bc <memcpy>
 8009d76:	f107 0308 	add.w	r3, r7, #8
 8009d7a:	cb0c      	ldmia	r3, {r2, r3}
 8009d7c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8009d80:	2035      	movs	r0, #53	@ 0x35
 8009d82:	f7ff fa3b 	bl	80091fc <writeToRegister>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1e4      	bne.n	8009d56 <config+0x466>
    while (writeToRegister(0x36, 0x040E, hspi, csPin, true) != HAL_OK);
 8009d8c:	bf00      	nop
 8009d8e:	2301      	movs	r3, #1
 8009d90:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d92:	aa17      	add	r2, sp, #92	@ 0x5c
 8009d94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009d98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d9c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009da0:	4668      	mov	r0, sp
 8009da2:	f107 0310 	add.w	r3, r7, #16
 8009da6:	225c      	movs	r2, #92	@ 0x5c
 8009da8:	4619      	mov	r1, r3
 8009daa:	f00d fb87 	bl	80174bc <memcpy>
 8009dae:	f107 0308 	add.w	r3, r7, #8
 8009db2:	cb0c      	ldmia	r3, {r2, r3}
 8009db4:	f240 410e 	movw	r1, #1038	@ 0x40e
 8009db8:	2036      	movs	r0, #54	@ 0x36
 8009dba:	f7ff fa1f 	bl	80091fc <writeToRegister>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1e4      	bne.n	8009d8e <config+0x49e>
    while (writeToRegister(0x39, 0x22F0, hspi, csPin, true) != HAL_OK);
 8009dc4:	bf00      	nop
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009dca:	aa17      	add	r2, sp, #92	@ 0x5c
 8009dcc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009dd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009dd4:	e882 0003 	stmia.w	r2, {r0, r1}
 8009dd8:	4668      	mov	r0, sp
 8009dda:	f107 0310 	add.w	r3, r7, #16
 8009dde:	225c      	movs	r2, #92	@ 0x5c
 8009de0:	4619      	mov	r1, r3
 8009de2:	f00d fb6b 	bl	80174bc <memcpy>
 8009de6:	f107 0308 	add.w	r3, r7, #8
 8009dea:	cb0c      	ldmia	r3, {r2, r3}
 8009dec:	f242 21f0 	movw	r1, #8944	@ 0x22f0
 8009df0:	2039      	movs	r0, #57	@ 0x39
 8009df2:	f7ff fa03 	bl	80091fc <writeToRegister>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1e4      	bne.n	8009dc6 <config+0x4d6>
    while (writeToRegister(0x3B, 0x22F0, hspi, csPin, true) != HAL_OK);
 8009dfc:	bf00      	nop
 8009dfe:	2301      	movs	r3, #1
 8009e00:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e02:	aa17      	add	r2, sp, #92	@ 0x5c
 8009e04:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009e08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e0c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009e10:	4668      	mov	r0, sp
 8009e12:	f107 0310 	add.w	r3, r7, #16
 8009e16:	225c      	movs	r2, #92	@ 0x5c
 8009e18:	4619      	mov	r1, r3
 8009e1a:	f00d fb4f 	bl	80174bc <memcpy>
 8009e1e:	f107 0308 	add.w	r3, r7, #8
 8009e22:	cb0c      	ldmia	r3, {r2, r3}
 8009e24:	f242 21f0 	movw	r1, #8944	@ 0x22f0
 8009e28:	203b      	movs	r0, #59	@ 0x3b
 8009e2a:	f7ff f9e7 	bl	80091fc <writeToRegister>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1e4      	bne.n	8009dfe <config+0x50e>
    while (writeToRegister(0x3C, 0x31C6, hspi, csPin, true) != HAL_OK);
 8009e34:	bf00      	nop
 8009e36:	2301      	movs	r3, #1
 8009e38:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e3a:	aa17      	add	r2, sp, #92	@ 0x5c
 8009e3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009e40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e44:	e882 0003 	stmia.w	r2, {r0, r1}
 8009e48:	4668      	mov	r0, sp
 8009e4a:	f107 0310 	add.w	r3, r7, #16
 8009e4e:	225c      	movs	r2, #92	@ 0x5c
 8009e50:	4619      	mov	r1, r3
 8009e52:	f00d fb33 	bl	80174bc <memcpy>
 8009e56:	f107 0308 	add.w	r3, r7, #8
 8009e5a:	cb0c      	ldmia	r3, {r2, r3}
 8009e5c:	f243 11c6 	movw	r1, #12742	@ 0x31c6
 8009e60:	203c      	movs	r0, #60	@ 0x3c
 8009e62:	f7ff f9cb 	bl	80091fc <writeToRegister>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e4      	bne.n	8009e36 <config+0x546>
    while (writeToRegister(0x42, 0x1C34, hspi, csPin, true) != HAL_OK);
 8009e6c:	bf00      	nop
 8009e6e:	2301      	movs	r3, #1
 8009e70:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e72:	aa17      	add	r2, sp, #92	@ 0x5c
 8009e74:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009e78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e7c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009e80:	4668      	mov	r0, sp
 8009e82:	f107 0310 	add.w	r3, r7, #16
 8009e86:	225c      	movs	r2, #92	@ 0x5c
 8009e88:	4619      	mov	r1, r3
 8009e8a:	f00d fb17 	bl	80174bc <memcpy>
 8009e8e:	f107 0308 	add.w	r3, r7, #8
 8009e92:	cb0c      	ldmia	r3, {r2, r3}
 8009e94:	f641 4134 	movw	r1, #7220	@ 0x1c34
 8009e98:	2042      	movs	r0, #66	@ 0x42
 8009e9a:	f7ff f9af 	bl	80091fc <writeToRegister>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e4      	bne.n	8009e6e <config+0x57e>
    while (writeToRegister(0x43, 0xADA5, hspi, csPin, true) != HAL_OK);
 8009ea4:	bf00      	nop
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009eaa:	aa17      	add	r2, sp, #92	@ 0x5c
 8009eac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009eb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009eb4:	e882 0003 	stmia.w	r2, {r0, r1}
 8009eb8:	4668      	mov	r0, sp
 8009eba:	f107 0310 	add.w	r3, r7, #16
 8009ebe:	225c      	movs	r2, #92	@ 0x5c
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	f00d fafb 	bl	80174bc <memcpy>
 8009ec6:	f107 0308 	add.w	r3, r7, #8
 8009eca:	cb0c      	ldmia	r3, {r2, r3}
 8009ecc:	f64a 51a5 	movw	r1, #44453	@ 0xada5
 8009ed0:	2043      	movs	r0, #67	@ 0x43
 8009ed2:	f7ff f993 	bl	80091fc <writeToRegister>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1e4      	bne.n	8009ea6 <config+0x5b6>
    while (writeToRegister(0x44, 0x1C34, hspi, csPin, true) != HAL_OK);
 8009edc:	bf00      	nop
 8009ede:	2301      	movs	r3, #1
 8009ee0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ee2:	aa17      	add	r2, sp, #92	@ 0x5c
 8009ee4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009ee8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009eec:	e882 0003 	stmia.w	r2, {r0, r1}
 8009ef0:	4668      	mov	r0, sp
 8009ef2:	f107 0310 	add.w	r3, r7, #16
 8009ef6:	225c      	movs	r2, #92	@ 0x5c
 8009ef8:	4619      	mov	r1, r3
 8009efa:	f00d fadf 	bl	80174bc <memcpy>
 8009efe:	f107 0308 	add.w	r3, r7, #8
 8009f02:	cb0c      	ldmia	r3, {r2, r3}
 8009f04:	f641 4134 	movw	r1, #7220	@ 0x1c34
 8009f08:	2044      	movs	r0, #68	@ 0x44
 8009f0a:	f7ff f977 	bl	80091fc <writeToRegister>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e4      	bne.n	8009ede <config+0x5ee>
    while (writeToRegister(0x45, 0xADA5, hspi, csPin, true) != HAL_OK);
 8009f14:	bf00      	nop
 8009f16:	2301      	movs	r3, #1
 8009f18:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f1a:	aa17      	add	r2, sp, #92	@ 0x5c
 8009f1c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009f20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f24:	e882 0003 	stmia.w	r2, {r0, r1}
 8009f28:	4668      	mov	r0, sp
 8009f2a:	f107 0310 	add.w	r3, r7, #16
 8009f2e:	225c      	movs	r2, #92	@ 0x5c
 8009f30:	4619      	mov	r1, r3
 8009f32:	f00d fac3 	bl	80174bc <memcpy>
 8009f36:	f107 0308 	add.w	r3, r7, #8
 8009f3a:	cb0c      	ldmia	r3, {r2, r3}
 8009f3c:	f64a 51a5 	movw	r1, #44453	@ 0xada5
 8009f40:	2045      	movs	r0, #69	@ 0x45
 8009f42:	f7ff f95b 	bl	80091fc <writeToRegister>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1e4      	bne.n	8009f16 <config+0x626>
    while (writeToRegister(0x58, 0x0544, hspi, csPin, true) != HAL_OK);
 8009f4c:	bf00      	nop
 8009f4e:	2301      	movs	r3, #1
 8009f50:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f52:	aa17      	add	r2, sp, #92	@ 0x5c
 8009f54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009f58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f5c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009f60:	4668      	mov	r0, sp
 8009f62:	f107 0310 	add.w	r3, r7, #16
 8009f66:	225c      	movs	r2, #92	@ 0x5c
 8009f68:	4619      	mov	r1, r3
 8009f6a:	f00d faa7 	bl	80174bc <memcpy>
 8009f6e:	f107 0308 	add.w	r3, r7, #8
 8009f72:	cb0c      	ldmia	r3, {r2, r3}
 8009f74:	f240 5144 	movw	r1, #1348	@ 0x544
 8009f78:	2058      	movs	r0, #88	@ 0x58
 8009f7a:	f7ff f93f 	bl	80091fc <writeToRegister>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1e4      	bne.n	8009f4e <config+0x65e>
    while (writeToRegister(0x54, 0x0AA0, hspi, csPin, true) != HAL_OK);
 8009f84:	bf00      	nop
 8009f86:	2301      	movs	r3, #1
 8009f88:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f8a:	aa17      	add	r2, sp, #92	@ 0x5c
 8009f8c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009f90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f94:	e882 0003 	stmia.w	r2, {r0, r1}
 8009f98:	4668      	mov	r0, sp
 8009f9a:	f107 0310 	add.w	r3, r7, #16
 8009f9e:	225c      	movs	r2, #92	@ 0x5c
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	f00d fa8b 	bl	80174bc <memcpy>
 8009fa6:	f107 0308 	add.w	r3, r7, #8
 8009faa:	cb0c      	ldmia	r3, {r2, r3}
 8009fac:	f44f 612a 	mov.w	r1, #2720	@ 0xaa0
 8009fb0:	2054      	movs	r0, #84	@ 0x54
 8009fb2:	f7ff f923 	bl	80091fc <writeToRegister>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e4      	bne.n	8009f86 <config+0x696>
}
 8009fbc:	bf00      	nop
 8009fbe:	bf00      	nop
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fc6:	b004      	add	sp, #16
 8009fc8:	4770      	bx	lr
	...

08009fcc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009fd0:	f3bf 8f4f 	dsb	sy
}
 8009fd4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009fd6:	4b06      	ldr	r3, [pc, #24]	@ (8009ff0 <__NVIC_SystemReset+0x24>)
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009fde:	4904      	ldr	r1, [pc, #16]	@ (8009ff0 <__NVIC_SystemReset+0x24>)
 8009fe0:	4b04      	ldr	r3, [pc, #16]	@ (8009ff4 <__NVIC_SystemReset+0x28>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009fe6:	f3bf 8f4f 	dsb	sy
}
 8009fea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009fec:	bf00      	nop
 8009fee:	e7fd      	b.n	8009fec <__NVIC_SystemReset+0x20>
 8009ff0:	e000ed00 	.word	0xe000ed00
 8009ff4:	05fa0004 	.word	0x05fa0004

08009ff8 <FUN_Flash_event>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
static void FUN_Flash_event(uint32_t u4f_flash_address, uint32_t u4f_flag)
{
 8009ff8:	b5b0      	push	{r4, r5, r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800a002:	f007 f8d9 	bl	80111b8 <HAL_FLASH_Unlock>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800a006:	4b16      	ldr	r3, [pc, #88]	@ (800a060 <FUN_Flash_event+0x68>)
 800a008:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a00c:	611a      	str	r2, [r3, #16]

	//uint32_t u4f_sector = FUN_Flash_GetSector(u4f_flash_address);

	//FLASH_If_Erase(u4f_flash_address);

	uint32_t PageError = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	60fb      	str	r3, [r7, #12]


	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800a012:	4b14      	ldr	r3, [pc, #80]	@ (800a064 <FUN_Flash_event+0x6c>)
 800a014:	2200      	movs	r2, #0
 800a016:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = (u4f_flash_address - ADDR_FLASH_PAGE_0)/FLASH_PAGE_SIZE;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800a01e:	0adb      	lsrs	r3, r3, #11
 800a020:	4a10      	ldr	r2, [pc, #64]	@ (800a064 <FUN_Flash_event+0x6c>)
 800a022:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = 1;
 800a024:	4b0f      	ldr	r3, [pc, #60]	@ (800a064 <FUN_Flash_event+0x6c>)
 800a026:	2201      	movs	r2, #1
 800a028:	60da      	str	r2, [r3, #12]
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800a02a:	f107 030c 	add.w	r3, r7, #12
 800a02e:	4619      	mov	r1, r3
 800a030:	480c      	ldr	r0, [pc, #48]	@ (800a064 <FUN_Flash_event+0x6c>)
 800a032:	f007 f9ab 	bl	801138c <HAL_FLASHEx_Erase>
 800a036:	4603      	mov	r3, r0
 800a038:	461a      	mov	r2, r3
 800a03a:	4b0b      	ldr	r3, [pc, #44]	@ (800a068 <FUN_Flash_event+0x70>)
 800a03c:	701a      	strb	r2, [r3, #0]

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, u4f_flash_address, u4f_flag);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2200      	movs	r2, #0
 800a042:	461c      	mov	r4, r3
 800a044:	4615      	mov	r5, r2
 800a046:	4622      	mov	r2, r4
 800a048:	462b      	mov	r3, r5
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	2000      	movs	r0, #0
 800a04e:	f007 f85d 	bl	801110c <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 800a052:	f007 f8d3 	bl	80111fc <HAL_FLASH_Lock>
}
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bdb0      	pop	{r4, r5, r7, pc}
 800a05e:	bf00      	nop
 800a060:	40022000 	.word	0x40022000
 800a064:	20000280 	.word	0x20000280
 800a068:	20000290 	.word	0x20000290

0800a06c <FUN_bootloader_init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_bootloader_init()
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	af00      	add	r7, sp, #0
	FUN_Flash_event(u4f_application_flag_address, 1);
 800a070:	4b03      	ldr	r3, [pc, #12]	@ (800a080 <FUN_bootloader_init+0x14>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2101      	movs	r1, #1
 800a076:	4618      	mov	r0, r3
 800a078:	f7ff ffbe 	bl	8009ff8 <FUN_Flash_event>
}
 800a07c:	bf00      	nop
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	2000000c 	.word	0x2000000c

0800a084 <FUN_bootloader_freerun>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_bootloader_freerun()
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
	if(reboot_flag == 1)
 800a08a:	4b23      	ldr	r3, [pc, #140]	@ (800a118 <FUN_bootloader_freerun+0x94>)
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d13d      	bne.n	800a10e <FUN_bootloader_freerun+0x8a>
	{
		// boot �δ� ��� OK
		if(u1f_bootjump_flag == 1)
 800a092:	4b22      	ldr	r3, [pc, #136]	@ (800a11c <FUN_bootloader_freerun+0x98>)
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d139      	bne.n	800a10e <FUN_bootloader_freerun+0x8a>
		{
			HAL_UART_Abort_IT(&huart5);
 800a09a:	4821      	ldr	r0, [pc, #132]	@ (800a120 <FUN_bootloader_freerun+0x9c>)
 800a09c:	f00a fec4 	bl	8014e28 <HAL_UART_Abort_IT>
			FUN_Flash_event(u4f_application_flag_address, 0);
 800a0a0:	4b20      	ldr	r3, [pc, #128]	@ (800a124 <FUN_bootloader_freerun+0xa0>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff ffa6 	bl	8009ff8 <FUN_Flash_event>

			HAL_Delay(100);
 800a0ac:	2064      	movs	r0, #100	@ 0x64
 800a0ae:	f004 fdb1 	bl	800ec14 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 800a0b2:	b672      	cpsid	i
}
 800a0b4:	bf00      	nop

			__disable_irq();


			for(volatile uint8_t i = 0; i < 8; i ++)
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	71fb      	strb	r3, [r7, #7]
 800a0ba:	e00c      	b.n	800a0d6 <FUN_bootloader_freerun+0x52>
			{
				  NVIC->ICER[i] = 0xFFFFFFFF;
 800a0bc:	4a1a      	ldr	r2, [pc, #104]	@ (800a128 <FUN_bootloader_freerun+0xa4>)
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	3320      	adds	r3, #32
 800a0c4:	f04f 31ff 	mov.w	r1, #4294967295
 800a0c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(volatile uint8_t i = 0; i < 8; i ++)
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	71fb      	strb	r3, [r7, #7]
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	2b07      	cmp	r3, #7
 800a0dc:	d9ee      	bls.n	800a0bc <FUN_bootloader_freerun+0x38>
			}
			for(volatile uint8_t i = 0; i < 8; i ++)
 800a0de:	2300      	movs	r3, #0
 800a0e0:	71bb      	strb	r3, [r7, #6]
 800a0e2:	e00c      	b.n	800a0fe <FUN_bootloader_freerun+0x7a>
			{
				  NVIC->ICPR[i] = 0xFFFFFFFF;
 800a0e4:	4a10      	ldr	r2, [pc, #64]	@ (800a128 <FUN_bootloader_freerun+0xa4>)
 800a0e6:	79bb      	ldrb	r3, [r7, #6]
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	3360      	adds	r3, #96	@ 0x60
 800a0ec:	f04f 31ff 	mov.w	r1, #4294967295
 800a0f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(volatile uint8_t i = 0; i < 8; i ++)
 800a0f4:	79bb      	ldrb	r3, [r7, #6]
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	71bb      	strb	r3, [r7, #6]
 800a0fe:	79bb      	ldrb	r3, [r7, #6]
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b07      	cmp	r3, #7
 800a104:	d9ee      	bls.n	800a0e4 <FUN_bootloader_freerun+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
 800a106:	b662      	cpsie	i
}
 800a108:	bf00      	nop
			}
			__enable_irq();

			NVIC_SystemReset();
 800a10a:	f7ff ff5f 	bl	8009fcc <__NVIC_SystemReset>
			    JumpToApplication();
			  }*/
		}
	}

}
 800a10e:	bf00      	nop
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	2000027c 	.word	0x2000027c
 800a11c:	200005c5 	.word	0x200005c5
 800a120:	200009b0 	.word	0x200009b0
 800a124:	2000000c 	.word	0x2000000c
 800a128:	e000e100 	.word	0xe000e100

0800a12c <FUN_GPIO_Routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_GPIO_Routine(void)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	af00      	add	r7, sp, #0
	ID_Detecting(); // 로터리 스위치 // 동그란 스위치 0~9
 800a130:	f000 f892 	bl	800a258 <ID_Detecting>
	DIP_Read();		// 딥 스위치 // 뒷면 왼쪽 스위치 4개
 800a134:	f000 f95e 	bl	800a3f4 <DIP_Read>

	// 밑엔 다 LED 부분인듯. RUNNING, RUNNING_OFF, 연기감지LED, 경고/알람LED
	if(ui.Status.Bit.SMOKE_DETECT == 1 || ui.temp_alarm_bit == 1 || Error.SHT30_Error == 1 || EEPROM.Error == 1)	// 넷 중 하나라도 문제 있으면
 800a138:	4b42      	ldr	r3, [pc, #264]	@ (800a244 <FUN_GPIO_Routine+0x118>)
 800a13a:	785b      	ldrb	r3, [r3, #1]
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10c      	bne.n	800a160 <FUN_GPIO_Routine+0x34>
 800a146:	4b3f      	ldr	r3, [pc, #252]	@ (800a244 <FUN_GPIO_Routine+0x118>)
 800a148:	7e1b      	ldrb	r3, [r3, #24]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d008      	beq.n	800a160 <FUN_GPIO_Routine+0x34>
 800a14e:	4b3e      	ldr	r3, [pc, #248]	@ (800a248 <FUN_GPIO_Routine+0x11c>)
 800a150:	88db      	ldrh	r3, [r3, #6]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d004      	beq.n	800a160 <FUN_GPIO_Routine+0x34>
 800a156:	4b3d      	ldr	r3, [pc, #244]	@ (800a24c <FUN_GPIO_Routine+0x120>)
 800a158:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d109      	bne.n	800a174 <FUN_GPIO_Routine+0x48>
	{
		ui.Status.Bit.RUNNING = 0;																					// RUNNING 멈추고
 800a160:	4a38      	ldr	r2, [pc, #224]	@ (800a244 <FUN_GPIO_Routine+0x118>)
 800a162:	7853      	ldrb	r3, [r2, #1]
 800a164:	f36f 0300 	bfc	r3, #0, #1
 800a168:	7053      	strb	r3, [r2, #1]
		ui.Detection_Error = 1; 																					// Detection_Error = 1
 800a16a:	4b36      	ldr	r3, [pc, #216]	@ (800a244 <FUN_GPIO_Routine+0x118>)
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800a172:	e004      	b.n	800a17e <FUN_GPIO_Routine+0x52>
	}
	else
	{
		ui.Status.Bit.RUNNING = 1;  // 저 4개 조건이 다 0이야 일로 오니까 --> 아무런 문제가 없다면 RUNNING = 1
 800a174:	4a33      	ldr	r2, [pc, #204]	@ (800a244 <FUN_GPIO_Routine+0x118>)
 800a176:	7853      	ldrb	r3, [r2, #1]
 800a178:	f043 0301 	orr.w	r3, r3, #1
 800a17c:	7053      	strb	r3, [r2, #1]
	}
	if(ui.Status.Bit.RUNNING == 1){ // 아무 문제 없고 RUNNING == 1이면
 800a17e:	4b31      	ldr	r3, [pc, #196]	@ (800a244 <FUN_GPIO_Routine+0x118>)
 800a180:	785b      	ldrb	r3, [r3, #1]
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	b2db      	uxtb	r3, r3
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00b      	beq.n	800a1a4 <FUN_GPIO_Routine+0x78>
		HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 800a18c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a194:	f007 fcb4 	bl	8011b00 <HAL_GPIO_TogglePin>
		//HAL_GPIO_WritePin(LED_STT_GPIO_Port, LED_STT_Pin, GPIO_PIN_RESET);
		RUNNING_ON(); // HAL_GPIO_WritePin(	EXT_RUN_GPIO_Port, EXT_RUN_Pin, GPIO_PIN_RESET)
 800a198:	2200      	movs	r2, #0
 800a19a:	2140      	movs	r1, #64	@ 0x40
 800a19c:	482c      	ldr	r0, [pc, #176]	@ (800a250 <FUN_GPIO_Routine+0x124>)
 800a19e:	f007 fc97 	bl	8011ad0 <HAL_GPIO_WritePin>
 800a1a2:	e00b      	b.n	800a1bc <FUN_GPIO_Routine+0x90>
	}
	else{
		HAL_GPIO_WritePin(LED_STT_GPIO_Port, LED_STT_Pin, GPIO_PIN_SET);
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a1aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a1ae:	f007 fc8f 	bl	8011ad0 <HAL_GPIO_WritePin>
		RUNNING_OFF();
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	2140      	movs	r1, #64	@ 0x40
 800a1b6:	4826      	ldr	r0, [pc, #152]	@ (800a250 <FUN_GPIO_Routine+0x124>)
 800a1b8:	f007 fc8a 	bl	8011ad0 <HAL_GPIO_WritePin>
	}
	if(ui.Status.Bit.SMOKE_DETECT == 1){
 800a1bc:	4b21      	ldr	r3, [pc, #132]	@ (800a244 <FUN_GPIO_Routine+0x118>)
 800a1be:	785b      	ldrb	r3, [r3, #1]
 800a1c0:	f003 0302 	and.w	r3, r3, #2
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00c      	beq.n	800a1e4 <FUN_GPIO_Routine+0xb8>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a1d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a1d4:	f007 fc7c 	bl	8011ad0 <HAL_GPIO_WritePin>
		SMOKE_DETECT_ON();
 800a1d8:	2201      	movs	r2, #1
 800a1da:	2180      	movs	r1, #128	@ 0x80
 800a1dc:	481c      	ldr	r0, [pc, #112]	@ (800a250 <FUN_GPIO_Routine+0x124>)
 800a1de:	f007 fc77 	bl	8011ad0 <HAL_GPIO_WritePin>
 800a1e2:	e00b      	b.n	800a1fc <FUN_GPIO_Routine+0xd0>
	}
	else{
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a1ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a1ee:	f007 fc6f 	bl	8011ad0 <HAL_GPIO_WritePin>
		SMOKE_DETECT_OFF();
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2180      	movs	r1, #128	@ 0x80
 800a1f6:	4816      	ldr	r0, [pc, #88]	@ (800a250 <FUN_GPIO_Routine+0x124>)
 800a1f8:	f007 fc6a 	bl	8011ad0 <HAL_GPIO_WritePin>
	}
	if(ui.temp_alarm_bit == 1){
 800a1fc:	4b11      	ldr	r3, [pc, #68]	@ (800a244 <FUN_GPIO_Routine+0x118>)
 800a1fe:	7e1b      	ldrb	r3, [r3, #24]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d106      	bne.n	800a212 <FUN_GPIO_Routine+0xe6>
		TEMP_ALARM_ON();
 800a204:	2201      	movs	r2, #1
 800a206:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a20a:	4812      	ldr	r0, [pc, #72]	@ (800a254 <FUN_GPIO_Routine+0x128>)
 800a20c:	f007 fc60 	bl	8011ad0 <HAL_GPIO_WritePin>
 800a210:	e005      	b.n	800a21e <FUN_GPIO_Routine+0xf2>
	}
	else{
		TEMP_ALARM_OFF();
 800a212:	2200      	movs	r2, #0
 800a214:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a218:	480e      	ldr	r0, [pc, #56]	@ (800a254 <FUN_GPIO_Routine+0x128>)
 800a21a:	f007 fc59 	bl	8011ad0 <HAL_GPIO_WritePin>
	}
	if(ui.temp_warring_bit == 1){
 800a21e:	4b09      	ldr	r3, [pc, #36]	@ (800a244 <FUN_GPIO_Routine+0x118>)
 800a220:	7ddb      	ldrb	r3, [r3, #23]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d106      	bne.n	800a234 <FUN_GPIO_Routine+0x108>
		TEMP_WARRING_ON();
 800a226:	2200      	movs	r2, #0
 800a228:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a22c:	4809      	ldr	r0, [pc, #36]	@ (800a254 <FUN_GPIO_Routine+0x128>)
 800a22e:	f007 fc4f 	bl	8011ad0 <HAL_GPIO_WritePin>
	}
	else{
		TEMP_WARRING_OFF();
	}
}
 800a232:	e005      	b.n	800a240 <FUN_GPIO_Routine+0x114>
		TEMP_WARRING_OFF();
 800a234:	2201      	movs	r2, #1
 800a236:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a23a:	4806      	ldr	r0, [pc, #24]	@ (800a254 <FUN_GPIO_Routine+0x128>)
 800a23c:	f007 fc48 	bl	8011ad0 <HAL_GPIO_WritePin>
}
 800a240:	bf00      	nop
 800a242:	bd80      	pop	{r7, pc}
 800a244:	200004f0 	.word	0x200004f0
 800a248:	200006d4 	.word	0x200006d4
 800a24c:	20000298 	.word	0x20000298
 800a250:	48000400 	.word	0x48000400
 800a254:	48000800 	.word	0x48000800

0800a258 <ID_Detecting>:


void ID_Detecting(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	af00      	add	r7, sp, #0
	if(ID_11_Input_Check() == InputPort_LOW)  // HAL_GPIO_ReadPin(ADDR_RTY11_GPIO_Port,ADDR_RTY11_Pin) == InputPort_LOW
 800a25c:	2101      	movs	r1, #1
 800a25e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a262:	f007 fc1d 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d107      	bne.n	800a27c <ID_Detecting+0x24>
	{
		ID.ID_Check_1 |= InputPort_HIGH;
 800a26c:	4b5f      	ldr	r3, [pc, #380]	@ (800a3ec <ID_Detecting+0x194>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f043 0301 	orr.w	r3, r3, #1
 800a274:	b2da      	uxtb	r2, r3
 800a276:	4b5d      	ldr	r3, [pc, #372]	@ (800a3ec <ID_Detecting+0x194>)
 800a278:	701a      	strb	r2, [r3, #0]
 800a27a:	e006      	b.n	800a28a <ID_Detecting+0x32>
	}
	else
	{
		ID.ID_Check_1 = ID.ID_Check_1 & 0xFE;
 800a27c:	4b5b      	ldr	r3, [pc, #364]	@ (800a3ec <ID_Detecting+0x194>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	f023 0301 	bic.w	r3, r3, #1
 800a284:	b2da      	uxtb	r2, r3
 800a286:	4b59      	ldr	r3, [pc, #356]	@ (800a3ec <ID_Detecting+0x194>)
 800a288:	701a      	strb	r2, [r3, #0]
	}

	if(ID_12_Input_Check() == InputPort_LOW)
 800a28a:	2102      	movs	r1, #2
 800a28c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a290:	f007 fc06 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d107      	bne.n	800a2aa <ID_Detecting+0x52>
	{
		ID.ID_Check_1 |= InputPort_HIGH << 1;
 800a29a:	4b54      	ldr	r3, [pc, #336]	@ (800a3ec <ID_Detecting+0x194>)
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	f043 0302 	orr.w	r3, r3, #2
 800a2a2:	b2da      	uxtb	r2, r3
 800a2a4:	4b51      	ldr	r3, [pc, #324]	@ (800a3ec <ID_Detecting+0x194>)
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	e006      	b.n	800a2b8 <ID_Detecting+0x60>
	}
	else
	{
		ID.ID_Check_1 = ID.ID_Check_1 & 0xFD;
 800a2aa:	4b50      	ldr	r3, [pc, #320]	@ (800a3ec <ID_Detecting+0x194>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	f023 0302 	bic.w	r3, r3, #2
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	4b4d      	ldr	r3, [pc, #308]	@ (800a3ec <ID_Detecting+0x194>)
 800a2b6:	701a      	strb	r2, [r3, #0]
	}

	if(ID_13_Input_Check() == InputPort_LOW)
 800a2b8:	2104      	movs	r1, #4
 800a2ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a2be:	f007 fbef 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d107      	bne.n	800a2d8 <ID_Detecting+0x80>
	{
		ID.ID_Check_1 |= InputPort_HIGH << 2;
 800a2c8:	4b48      	ldr	r3, [pc, #288]	@ (800a3ec <ID_Detecting+0x194>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	f043 0304 	orr.w	r3, r3, #4
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	4b46      	ldr	r3, [pc, #280]	@ (800a3ec <ID_Detecting+0x194>)
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	e006      	b.n	800a2e6 <ID_Detecting+0x8e>
	}
	else
	{
		ID.ID_Check_1 = ID.ID_Check_1 & 0xFB;
 800a2d8:	4b44      	ldr	r3, [pc, #272]	@ (800a3ec <ID_Detecting+0x194>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	f023 0304 	bic.w	r3, r3, #4
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	4b42      	ldr	r3, [pc, #264]	@ (800a3ec <ID_Detecting+0x194>)
 800a2e4:	701a      	strb	r2, [r3, #0]
	}


	if(ID_14_Input_Check() == InputPort_LOW)
 800a2e6:	2108      	movs	r1, #8
 800a2e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a2ec:	f007 fbd8 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d107      	bne.n	800a306 <ID_Detecting+0xae>
	{
		ID.ID_Check_1 |= InputPort_HIGH << 3;
 800a2f6:	4b3d      	ldr	r3, [pc, #244]	@ (800a3ec <ID_Detecting+0x194>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	f043 0308 	orr.w	r3, r3, #8
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	4b3a      	ldr	r3, [pc, #232]	@ (800a3ec <ID_Detecting+0x194>)
 800a302:	701a      	strb	r2, [r3, #0]
 800a304:	e006      	b.n	800a314 <ID_Detecting+0xbc>
	}
	else
	{
		ID.ID_Check_1 = ID.ID_Check_1 & 0xF7;
 800a306:	4b39      	ldr	r3, [pc, #228]	@ (800a3ec <ID_Detecting+0x194>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	f023 0308 	bic.w	r3, r3, #8
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	4b36      	ldr	r3, [pc, #216]	@ (800a3ec <ID_Detecting+0x194>)
 800a312:	701a      	strb	r2, [r3, #0]
	}
	// 왼쪽

	// 오른쪽이지 않을까
	if(ID_21_Input_Check() == InputPort_LOW)
 800a314:	2110      	movs	r1, #16
 800a316:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a31a:	f007 fbc1 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d107      	bne.n	800a334 <ID_Detecting+0xdc>
	{
		ID.ID_Check_2 |= InputPort_HIGH;
 800a324:	4b31      	ldr	r3, [pc, #196]	@ (800a3ec <ID_Detecting+0x194>)
 800a326:	785b      	ldrb	r3, [r3, #1]
 800a328:	f043 0301 	orr.w	r3, r3, #1
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	4b2f      	ldr	r3, [pc, #188]	@ (800a3ec <ID_Detecting+0x194>)
 800a330:	705a      	strb	r2, [r3, #1]
 800a332:	e006      	b.n	800a342 <ID_Detecting+0xea>
	}
	else
	{
		ID.ID_Check_2 = ID.ID_Check_2 & 0xFE;
 800a334:	4b2d      	ldr	r3, [pc, #180]	@ (800a3ec <ID_Detecting+0x194>)
 800a336:	785b      	ldrb	r3, [r3, #1]
 800a338:	f023 0301 	bic.w	r3, r3, #1
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	4b2b      	ldr	r3, [pc, #172]	@ (800a3ec <ID_Detecting+0x194>)
 800a340:	705a      	strb	r2, [r3, #1]
	}


	if(ID_22_Input_Check() == InputPort_LOW)
 800a342:	2120      	movs	r1, #32
 800a344:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a348:	f007 fbaa 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d107      	bne.n	800a362 <ID_Detecting+0x10a>
	{
		ID.ID_Check_2 |= InputPort_HIGH << 1;
 800a352:	4b26      	ldr	r3, [pc, #152]	@ (800a3ec <ID_Detecting+0x194>)
 800a354:	785b      	ldrb	r3, [r3, #1]
 800a356:	f043 0302 	orr.w	r3, r3, #2
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	4b23      	ldr	r3, [pc, #140]	@ (800a3ec <ID_Detecting+0x194>)
 800a35e:	705a      	strb	r2, [r3, #1]
 800a360:	e006      	b.n	800a370 <ID_Detecting+0x118>
	}
	else
	{
		ID.ID_Check_2 = ID.ID_Check_2 & 0xFD;
 800a362:	4b22      	ldr	r3, [pc, #136]	@ (800a3ec <ID_Detecting+0x194>)
 800a364:	785b      	ldrb	r3, [r3, #1]
 800a366:	f023 0302 	bic.w	r3, r3, #2
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	4b1f      	ldr	r3, [pc, #124]	@ (800a3ec <ID_Detecting+0x194>)
 800a36e:	705a      	strb	r2, [r3, #1]
	}


	if(ID_23_Input_Check() == InputPort_LOW)
 800a370:	2140      	movs	r1, #64	@ 0x40
 800a372:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a376:	f007 fb93 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d107      	bne.n	800a390 <ID_Detecting+0x138>
	{
		ID.ID_Check_2 |= InputPort_HIGH << 2;
 800a380:	4b1a      	ldr	r3, [pc, #104]	@ (800a3ec <ID_Detecting+0x194>)
 800a382:	785b      	ldrb	r3, [r3, #1]
 800a384:	f043 0304 	orr.w	r3, r3, #4
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	4b18      	ldr	r3, [pc, #96]	@ (800a3ec <ID_Detecting+0x194>)
 800a38c:	705a      	strb	r2, [r3, #1]
 800a38e:	e006      	b.n	800a39e <ID_Detecting+0x146>
	}
	else
	{
		ID.ID_Check_2 = ID.ID_Check_2 & 0xFB;
 800a390:	4b16      	ldr	r3, [pc, #88]	@ (800a3ec <ID_Detecting+0x194>)
 800a392:	785b      	ldrb	r3, [r3, #1]
 800a394:	f023 0304 	bic.w	r3, r3, #4
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	4b14      	ldr	r3, [pc, #80]	@ (800a3ec <ID_Detecting+0x194>)
 800a39c:	705a      	strb	r2, [r3, #1]
	}

	if(ID_24_Input_Check() == InputPort_LOW)
 800a39e:	2180      	movs	r1, #128	@ 0x80
 800a3a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3a4:	f007 fb7c 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d107      	bne.n	800a3be <ID_Detecting+0x166>
	{
		ID.ID_Check_2 |= InputPort_HIGH << 3;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	@ (800a3ec <ID_Detecting+0x194>)
 800a3b0:	785b      	ldrb	r3, [r3, #1]
 800a3b2:	f043 0308 	orr.w	r3, r3, #8
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ec <ID_Detecting+0x194>)
 800a3ba:	705a      	strb	r2, [r3, #1]
 800a3bc:	e006      	b.n	800a3cc <ID_Detecting+0x174>
	}
	else
	{
		ID.ID_Check_2 = ID.ID_Check_2 & 0xF7;
 800a3be:	4b0b      	ldr	r3, [pc, #44]	@ (800a3ec <ID_Detecting+0x194>)
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	f023 0308 	bic.w	r3, r3, #8
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	4b08      	ldr	r3, [pc, #32]	@ (800a3ec <ID_Detecting+0x194>)
 800a3ca:	705a      	strb	r2, [r3, #1]
	}
	ui.ID = (ID.ID_Check_2 * 10) + ID.ID_Check_1;
 800a3cc:	4b07      	ldr	r3, [pc, #28]	@ (800a3ec <ID_Detecting+0x194>)
 800a3ce:	785b      	ldrb	r3, [r3, #1]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	0092      	lsls	r2, r2, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	4b04      	ldr	r3, [pc, #16]	@ (800a3ec <ID_Detecting+0x194>)
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	4413      	add	r3, r2
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	4b03      	ldr	r3, [pc, #12]	@ (800a3f0 <ID_Detecting+0x198>)
 800a3e4:	701a      	strb	r2, [r3, #0]
}
 800a3e6:	bf00      	nop
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000294 	.word	0x20000294
 800a3f0:	200004f0 	.word	0x200004f0

0800a3f4 <DIP_Read>:
void DIP_Read()
{
 800a3f4:	b590      	push	{r4, r7, lr}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
	uint8_t SMK_Level = ui.SMK_Level;
 800a3fa:	4b35      	ldr	r3, [pc, #212]	@ (800a4d0 <DIP_Read+0xdc>)
 800a3fc:	7c1b      	ldrb	r3, [r3, #16]
 800a3fe:	71fb      	strb	r3, [r7, #7]
	uint8_t Protocol_Type = ui.Protocol_Type;
 800a400:	4b33      	ldr	r3, [pc, #204]	@ (800a4d0 <DIP_Read+0xdc>)
 800a402:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a406:	71bb      	strb	r3, [r7, #6]
	uint8_t Baudrate = ui.Baudrate;
 800a408:	4b31      	ldr	r3, [pc, #196]	@ (800a4d0 <DIP_Read+0xdc>)
 800a40a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a40e:	717b      	strb	r3, [r7, #5]
	uint8_t Baud = 0x00;
 800a410:	2300      	movs	r3, #0
 800a412:	713b      	strb	r3, [r7, #4]
	if(DIP_1_Input_Check())  // HAL_GPIO_ReadPin(SET_DIP4_GPIO_Port,SET_DIP4_Pin)
 800a414:	2108      	movs	r1, #8
 800a416:	482f      	ldr	r0, [pc, #188]	@ (800a4d4 <DIP_Read+0xe0>)
 800a418:	f007 fb42 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <DIP_Read+0x36>
	{
		ui.SMK_Level = RANK_1;
 800a422:	4b2b      	ldr	r3, [pc, #172]	@ (800a4d0 <DIP_Read+0xdc>)
 800a424:	2200      	movs	r2, #0
 800a426:	741a      	strb	r2, [r3, #16]
 800a428:	e002      	b.n	800a430 <DIP_Read+0x3c>
	}
	else{
		ui.SMK_Level = RANK_2;
 800a42a:	4b29      	ldr	r3, [pc, #164]	@ (800a4d0 <DIP_Read+0xdc>)
 800a42c:	2201      	movs	r2, #1
 800a42e:	741a      	strb	r2, [r3, #16]
	}
	if(DIP_2_Input_Check()==0)
 800a430:	2104      	movs	r1, #4
 800a432:	4828      	ldr	r0, [pc, #160]	@ (800a4d4 <DIP_Read+0xe0>)
 800a434:	f007 fb34 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d104      	bne.n	800a448 <DIP_Read+0x54>
	{
		ui.Protocol_Type = ONOFF_PROTOCOL; // 0x01
 800a43e:	4b24      	ldr	r3, [pc, #144]	@ (800a4d0 <DIP_Read+0xdc>)
 800a440:	2201      	movs	r2, #1
 800a442:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800a446:	e003      	b.n	800a450 <DIP_Read+0x5c>
	}
	else{
		ui.Protocol_Type = MODBUS_PROTOCOL; // 0x00
 800a448:	4b21      	ldr	r3, [pc, #132]	@ (800a4d0 <DIP_Read+0xdc>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
	Baud |= (!DIP_3_Input_Check() << 1) | (!DIP_4_Input_Check());
 800a450:	2102      	movs	r1, #2
 800a452:	4820      	ldr	r0, [pc, #128]	@ (800a4d4 <DIP_Read+0xe0>)
 800a454:	f007 fb24 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <DIP_Read+0x6e>
 800a45e:	2402      	movs	r4, #2
 800a460:	e000      	b.n	800a464 <DIP_Read+0x70>
 800a462:	2400      	movs	r4, #0
 800a464:	2101      	movs	r1, #1
 800a466:	481b      	ldr	r0, [pc, #108]	@ (800a4d4 <DIP_Read+0xe0>)
 800a468:	f007 fb1a 	bl	8011aa0 <HAL_GPIO_ReadPin>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	bf0c      	ite	eq
 800a472:	2301      	moveq	r3, #1
 800a474:	2300      	movne	r3, #0
 800a476:	b2db      	uxtb	r3, r3
 800a478:	4323      	orrs	r3, r4
 800a47a:	b25a      	sxtb	r2, r3
 800a47c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a480:	4313      	orrs	r3, r2
 800a482:	b25b      	sxtb	r3, r3
 800a484:	713b      	strb	r3, [r7, #4]
	ui.Baudrate = Baud;
 800a486:	4a12      	ldr	r2, [pc, #72]	@ (800a4d0 <DIP_Read+0xdc>)
 800a488:	793b      	ldrb	r3, [r7, #4]
 800a48a:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
	if(Baudrate != ui.Baudrate){
 800a48e:	4b10      	ldr	r3, [pc, #64]	@ (800a4d0 <DIP_Read+0xdc>)
 800a490:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a494:	797a      	ldrb	r2, [r7, #5]
 800a496:	429a      	cmp	r2, r3
 800a498:	d001      	beq.n	800a49e <DIP_Read+0xaa>
		RS485_Init();
 800a49a:	f001 fe89 	bl	800c1b0 <RS485_Init>
	}
	if(SMK_Level != ui.SMK_Level || Protocol_Type != ui.Protocol_Type || Baudrate != ui.Baudrate)
 800a49e:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d0 <DIP_Read+0xdc>)
 800a4a0:	7c1b      	ldrb	r3, [r3, #16]
 800a4a2:	79fa      	ldrb	r2, [r7, #7]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d10b      	bne.n	800a4c0 <DIP_Read+0xcc>
 800a4a8:	4b09      	ldr	r3, [pc, #36]	@ (800a4d0 <DIP_Read+0xdc>)
 800a4aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a4ae:	79ba      	ldrb	r2, [r7, #6]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d105      	bne.n	800a4c0 <DIP_Read+0xcc>
 800a4b4:	4b06      	ldr	r3, [pc, #24]	@ (800a4d0 <DIP_Read+0xdc>)
 800a4b6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a4ba:	797a      	ldrb	r2, [r7, #5]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d002      	beq.n	800a4c6 <DIP_Read+0xd2>
	{
		EEPROM.SaveData_Flag = 1;
 800a4c0:	4b05      	ldr	r3, [pc, #20]	@ (800a4d8 <DIP_Read+0xe4>)
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	701a      	strb	r2, [r3, #0]
	}
}
 800a4c6:	bf00      	nop
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd90      	pop	{r4, r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	200004f0 	.word	0x200004f0
 800a4d4:	48000800 	.word	0x48000800
 800a4d8:	20000298 	.word	0x20000298

0800a4dc <EEPROM_Comm>:

void EEPROM_SPI_SendInstruction(uint8_t *instruction, uint8_t size);
void EEPROM_Factory_Reset();

void EEPROM_Comm(uint8_t* T_buffer, uint8_t* R_buffer, unsigned int num)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af02      	add	r7, sp, #8
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
	EEPROM_CS_OFF(); // Hal_writePin(reset)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a4ee:	480f      	ldr	r0, [pc, #60]	@ (800a52c <EEPROM_Comm+0x50>)
 800a4f0:	f007 faee 	bl	8011ad0 <HAL_GPIO_WritePin>
	//WP_EEPROM_OFF();
	//HOLD_EEPROM_ON();    // CS low

	HAL_SPI_TransmitReceive(EEPROM_SPI, T_buffer, R_buffer, num, 10);
 800a4f4:	4b0e      	ldr	r3, [pc, #56]	@ (800a530 <EEPROM_Comm+0x54>)
 800a4f6:	6818      	ldr	r0, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	220a      	movs	r2, #10
 800a4fe:	9200      	str	r2, [sp, #0]
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	68f9      	ldr	r1, [r7, #12]
 800a504:	f009 fb25 	bl	8013b52 <HAL_SPI_TransmitReceive>
	EEPROM.Result  = EEPROM_SPI->ErrorCode;
 800a508:	4b09      	ldr	r3, [pc, #36]	@ (800a530 <EEPROM_Comm+0x54>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a50e:	b29a      	uxth	r2, r3
 800a510:	4b08      	ldr	r3, [pc, #32]	@ (800a534 <EEPROM_Comm+0x58>)
 800a512:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

   	EEPROM_CS_ON();
 800a516:	2201      	movs	r2, #1
 800a518:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a51c:	4803      	ldr	r0, [pc, #12]	@ (800a52c <EEPROM_Comm+0x50>)
 800a51e:	f007 fad7 	bl	8011ad0 <HAL_GPIO_WritePin>
   	//WP_EEPROM_ON();
   	//HOLP_EEPROM_OFF();   // CS high
}
 800a522:	bf00      	nop
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	48000400 	.word	0x48000400
 800a530:	200002e0 	.word	0x200002e0
 800a534:	20000298 	.word	0x20000298

0800a538 <EEPROM_init>:
/****************************************************************************/
/*	Overview	:										*/
/*	Return value:	void													*/
/****************************************************************************/
void EEPROM_init(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
	EEPROM_SPI_INIT(&hspi2);
 800a53e:	48a3      	ldr	r0, [pc, #652]	@ (800a7cc <EEPROM_init+0x294>)
 800a540:	f000 fa5a 	bl	800a9f8 <EEPROM_SPI_INIT>

	EEPROM.TxBuff[0] = EEPROM_RDSR;
 800a544:	4ba2      	ldr	r3, [pc, #648]	@ (800a7d0 <EEPROM_init+0x298>)
 800a546:	2205      	movs	r2, #5
 800a548:	709a      	strb	r2, [r3, #2]
	EEPROM_Comm(EEPROM.TxBuff, EEPROM.RxBuff, 2);
 800a54a:	2202      	movs	r2, #2
 800a54c:	49a1      	ldr	r1, [pc, #644]	@ (800a7d4 <EEPROM_init+0x29c>)
 800a54e:	48a2      	ldr	r0, [pc, #648]	@ (800a7d8 <EEPROM_init+0x2a0>)
 800a550:	f7ff ffc4 	bl	800a4dc <EEPROM_Comm>

	EEPROM.TxBuff[0] = EEPROM_READ;
 800a554:	4b9e      	ldr	r3, [pc, #632]	@ (800a7d0 <EEPROM_init+0x298>)
 800a556:	2203      	movs	r2, #3
 800a558:	709a      	strb	r2, [r3, #2]
	EEPROM.TxBuff[1] = (EEPROM_addr >> 8) & 0xFF;
 800a55a:	4ba0      	ldr	r3, [pc, #640]	@ (800a7dc <EEPROM_init+0x2a4>)
 800a55c:	881b      	ldrh	r3, [r3, #0]
 800a55e:	0a1b      	lsrs	r3, r3, #8
 800a560:	b29b      	uxth	r3, r3
 800a562:	b2da      	uxtb	r2, r3
 800a564:	4b9a      	ldr	r3, [pc, #616]	@ (800a7d0 <EEPROM_init+0x298>)
 800a566:	70da      	strb	r2, [r3, #3]
	EEPROM.TxBuff[2] = EEPROM_addr & 0x00FF;
 800a568:	4b9c      	ldr	r3, [pc, #624]	@ (800a7dc <EEPROM_init+0x2a4>)
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	4b98      	ldr	r3, [pc, #608]	@ (800a7d0 <EEPROM_init+0x298>)
 800a570:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 3; i < EEPROM_BUF_MAX; i++){
 800a572:	2303      	movs	r3, #3
 800a574:	71fb      	strb	r3, [r7, #7]
 800a576:	e007      	b.n	800a588 <EEPROM_init+0x50>
		EEPROM.TxBuff[i] = 0x00;
 800a578:	79fb      	ldrb	r3, [r7, #7]
 800a57a:	4a95      	ldr	r2, [pc, #596]	@ (800a7d0 <EEPROM_init+0x298>)
 800a57c:	4413      	add	r3, r2
 800a57e:	2200      	movs	r2, #0
 800a580:	709a      	strb	r2, [r3, #2]
	for(uint8_t i = 3; i < EEPROM_BUF_MAX; i++){
 800a582:	79fb      	ldrb	r3, [r7, #7]
 800a584:	3301      	adds	r3, #1
 800a586:	71fb      	strb	r3, [r7, #7]
 800a588:	79fb      	ldrb	r3, [r7, #7]
 800a58a:	2b1f      	cmp	r3, #31
 800a58c:	d9f4      	bls.n	800a578 <EEPROM_init+0x40>
	}
	EEPROM_Comm(EEPROM.TxBuff, EEPROM.RxBuff, EEPROM_BUF_MAX);
 800a58e:	2220      	movs	r2, #32
 800a590:	4990      	ldr	r1, [pc, #576]	@ (800a7d4 <EEPROM_init+0x29c>)
 800a592:	4891      	ldr	r0, [pc, #580]	@ (800a7d8 <EEPROM_init+0x2a0>)
 800a594:	f7ff ffa2 	bl	800a4dc <EEPROM_Comm>
	if(EEPROM.RxBuff[28] != 0xD8 && EEPROM.RxBuff[29] != 0xD8)
 800a598:	4b8d      	ldr	r3, [pc, #564]	@ (800a7d0 <EEPROM_init+0x298>)
 800a59a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a59e:	2bd8      	cmp	r3, #216	@ 0xd8
 800a5a0:	d007      	beq.n	800a5b2 <EEPROM_init+0x7a>
 800a5a2:	4b8b      	ldr	r3, [pc, #556]	@ (800a7d0 <EEPROM_init+0x298>)
 800a5a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a5a8:	2bd8      	cmp	r3, #216	@ 0xd8
 800a5aa:	d002      	beq.n	800a5b2 <EEPROM_init+0x7a>
	{
		EEPROM_Factory_Reset();
 800a5ac:	f000 fa34 	bl	800aa18 <EEPROM_Factory_Reset>
		{
			ui.Protocol_Type = EEPROM.RxBuff[23];
		}

	}
}
 800a5b0:	e126      	b.n	800a800 <EEPROM_init+0x2c8>
		if(EEPROM.RxBuff[4] == 0xFF && EEPROM.RxBuff[3] == 0xFF){
 800a5b2:	4b87      	ldr	r3, [pc, #540]	@ (800a7d0 <EEPROM_init+0x298>)
 800a5b4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800a5b8:	2bff      	cmp	r3, #255	@ 0xff
 800a5ba:	d10c      	bne.n	800a5d6 <EEPROM_init+0x9e>
 800a5bc:	4b84      	ldr	r3, [pc, #528]	@ (800a7d0 <EEPROM_init+0x298>)
 800a5be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a5c2:	2bff      	cmp	r3, #255	@ 0xff
 800a5c4:	d107      	bne.n	800a5d6 <EEPROM_init+0x9e>
			ui.temp_warring = 45;
 800a5c6:	4b86      	ldr	r3, [pc, #536]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a5c8:	4a86      	ldr	r2, [pc, #536]	@ (800a7e4 <EEPROM_init+0x2ac>)
 800a5ca:	61da      	str	r2, [r3, #28]
			ui.temp_warring_hex = 4500;
 800a5cc:	4b84      	ldr	r3, [pc, #528]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a5ce:	f241 1294 	movw	r2, #4500	@ 0x1194
 800a5d2:	849a      	strh	r2, [r3, #36]	@ 0x24
 800a5d4:	e025      	b.n	800a622 <EEPROM_init+0xea>
			ui.temp_warring_hex = (EEPROM.RxBuff[3] & 0xFF) | (EEPROM.RxBuff[4] << 8);
 800a5d6:	4b7e      	ldr	r3, [pc, #504]	@ (800a7d0 <EEPROM_init+0x298>)
 800a5d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a5dc:	b21a      	sxth	r2, r3
 800a5de:	4b7c      	ldr	r3, [pc, #496]	@ (800a7d0 <EEPROM_init+0x298>)
 800a5e0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800a5e4:	021b      	lsls	r3, r3, #8
 800a5e6:	b21b      	sxth	r3, r3
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	b21b      	sxth	r3, r3
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	4b7c      	ldr	r3, [pc, #496]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a5f0:	849a      	strh	r2, [r3, #36]	@ 0x24
			if(ui.temp_warring_hex > 9999){
 800a5f2:	4b7b      	ldr	r3, [pc, #492]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a5f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a5f6:	f242 720f 	movw	r2, #9999	@ 0x270f
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d903      	bls.n	800a606 <EEPROM_init+0xce>
				ui.temp_warring_hex = 9999;
 800a5fe:	4b78      	ldr	r3, [pc, #480]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a600:	f242 720f 	movw	r2, #9999	@ 0x270f
 800a604:	849a      	strh	r2, [r3, #36]	@ 0x24
			ui.temp_warring = (uint16_t)(ui.temp_warring_hex / 100);
 800a606:	4b76      	ldr	r3, [pc, #472]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a608:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a60a:	4a77      	ldr	r2, [pc, #476]	@ (800a7e8 <EEPROM_init+0x2b0>)
 800a60c:	fba2 2303 	umull	r2, r3, r2, r3
 800a610:	095b      	lsrs	r3, r3, #5
 800a612:	b29b      	uxth	r3, r3
 800a614:	ee07 3a90 	vmov	s15, r3
 800a618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61c:	4b70      	ldr	r3, [pc, #448]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a61e:	edc3 7a07 	vstr	s15, [r3, #28]
		if(EEPROM.RxBuff[5] == 0xFF && EEPROM.RxBuff[6] == 0xFF){
 800a622:	4b6b      	ldr	r3, [pc, #428]	@ (800a7d0 <EEPROM_init+0x298>)
 800a624:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800a628:	2bff      	cmp	r3, #255	@ 0xff
 800a62a:	d10c      	bne.n	800a646 <EEPROM_init+0x10e>
 800a62c:	4b68      	ldr	r3, [pc, #416]	@ (800a7d0 <EEPROM_init+0x298>)
 800a62e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a632:	2bff      	cmp	r3, #255	@ 0xff
 800a634:	d107      	bne.n	800a646 <EEPROM_init+0x10e>
			ui.temp_alarm = 60;
 800a636:	4b6a      	ldr	r3, [pc, #424]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a638:	4a6c      	ldr	r2, [pc, #432]	@ (800a7ec <EEPROM_init+0x2b4>)
 800a63a:	621a      	str	r2, [r3, #32]
			ui.temp_alarm_hex = 6000;
 800a63c:	4b68      	ldr	r3, [pc, #416]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a63e:	f241 7270 	movw	r2, #6000	@ 0x1770
 800a642:	84da      	strh	r2, [r3, #38]	@ 0x26
 800a644:	e025      	b.n	800a692 <EEPROM_init+0x15a>
			ui.temp_alarm_hex	= (EEPROM.RxBuff[5] & 0xFF) | (EEPROM.RxBuff[6] << 8);
 800a646:	4b62      	ldr	r3, [pc, #392]	@ (800a7d0 <EEPROM_init+0x298>)
 800a648:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800a64c:	b21a      	sxth	r2, r3
 800a64e:	4b60      	ldr	r3, [pc, #384]	@ (800a7d0 <EEPROM_init+0x298>)
 800a650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a654:	021b      	lsls	r3, r3, #8
 800a656:	b21b      	sxth	r3, r3
 800a658:	4313      	orrs	r3, r2
 800a65a:	b21b      	sxth	r3, r3
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	4b60      	ldr	r3, [pc, #384]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a660:	84da      	strh	r2, [r3, #38]	@ 0x26
			if(ui.temp_alarm_hex > 9999){
 800a662:	4b5f      	ldr	r3, [pc, #380]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a664:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a666:	f242 720f 	movw	r2, #9999	@ 0x270f
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d903      	bls.n	800a676 <EEPROM_init+0x13e>
				ui.temp_alarm_hex = 9999;
 800a66e:	4b5c      	ldr	r3, [pc, #368]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a670:	f242 720f 	movw	r2, #9999	@ 0x270f
 800a674:	84da      	strh	r2, [r3, #38]	@ 0x26
			ui.temp_alarm = (uint16_t)(ui.temp_alarm_hex / 100);
 800a676:	4b5a      	ldr	r3, [pc, #360]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a678:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a67a:	4a5b      	ldr	r2, [pc, #364]	@ (800a7e8 <EEPROM_init+0x2b0>)
 800a67c:	fba2 2303 	umull	r2, r3, r2, r3
 800a680:	095b      	lsrs	r3, r3, #5
 800a682:	b29b      	uxth	r3, r3
 800a684:	ee07 3a90 	vmov	s15, r3
 800a688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68c:	4b54      	ldr	r3, [pc, #336]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a68e:	edc3 7a08 	vstr	s15, [r3, #32]
		if((EEPROM.RxBuff[7] == 0xFF && EEPROM.RxBuff[8] == 0xFF) || (EEPROM.RxBuff[7] == 0x00 && EEPROM.RxBuff[8] == 0x00)){
 800a692:	4b4f      	ldr	r3, [pc, #316]	@ (800a7d0 <EEPROM_init+0x298>)
 800a694:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a698:	2bff      	cmp	r3, #255	@ 0xff
 800a69a:	d104      	bne.n	800a6a6 <EEPROM_init+0x16e>
 800a69c:	4b4c      	ldr	r3, [pc, #304]	@ (800a7d0 <EEPROM_init+0x298>)
 800a69e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a6a2:	2bff      	cmp	r3, #255	@ 0xff
 800a6a4:	d009      	beq.n	800a6ba <EEPROM_init+0x182>
 800a6a6:	4b4a      	ldr	r3, [pc, #296]	@ (800a7d0 <EEPROM_init+0x298>)
 800a6a8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d108      	bne.n	800a6c2 <EEPROM_init+0x18a>
 800a6b0:	4b47      	ldr	r3, [pc, #284]	@ (800a7d0 <EEPROM_init+0x298>)
 800a6b2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d103      	bne.n	800a6c2 <EEPROM_init+0x18a>
			read_fifo_state = 0;
 800a6ba:	4b4d      	ldr	r3, [pc, #308]	@ (800a7f0 <EEPROM_init+0x2b8>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	701a      	strb	r2, [r3, #0]
 800a6c0:	e010      	b.n	800a6e4 <EEPROM_init+0x1ac>
			read_fifo_state = 1;
 800a6c2:	4b4b      	ldr	r3, [pc, #300]	@ (800a7f0 <EEPROM_init+0x2b8>)
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	701a      	strb	r2, [r3, #0]
			ui.IR_Offset = (EEPROM.RxBuff[8] << 8) | (EEPROM.RxBuff[7] & 0xFF);
 800a6c8:	4b41      	ldr	r3, [pc, #260]	@ (800a7d0 <EEPROM_init+0x298>)
 800a6ca:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a6ce:	021b      	lsls	r3, r3, #8
 800a6d0:	b21a      	sxth	r2, r3
 800a6d2:	4b3f      	ldr	r3, [pc, #252]	@ (800a7d0 <EEPROM_init+0x298>)
 800a6d4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a6d8:	b21b      	sxth	r3, r3
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	b21b      	sxth	r3, r3
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	4b3f      	ldr	r3, [pc, #252]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a6e2:	819a      	strh	r2, [r3, #12]
		if((EEPROM.RxBuff[9] == 0xFF && EEPROM.RxBuff[10] == 0xFF) || (EEPROM.RxBuff[9] == 0x00 && EEPROM.RxBuff[10] == 0x00)){
 800a6e4:	4b3a      	ldr	r3, [pc, #232]	@ (800a7d0 <EEPROM_init+0x298>)
 800a6e6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a6ea:	2bff      	cmp	r3, #255	@ 0xff
 800a6ec:	d104      	bne.n	800a6f8 <EEPROM_init+0x1c0>
 800a6ee:	4b38      	ldr	r3, [pc, #224]	@ (800a7d0 <EEPROM_init+0x298>)
 800a6f0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a6f4:	2bff      	cmp	r3, #255	@ 0xff
 800a6f6:	d009      	beq.n	800a70c <EEPROM_init+0x1d4>
 800a6f8:	4b35      	ldr	r3, [pc, #212]	@ (800a7d0 <EEPROM_init+0x298>)
 800a6fa:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d108      	bne.n	800a714 <EEPROM_init+0x1dc>
 800a702:	4b33      	ldr	r3, [pc, #204]	@ (800a7d0 <EEPROM_init+0x298>)
 800a704:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d103      	bne.n	800a714 <EEPROM_init+0x1dc>
			read_fifo_state = 0;
 800a70c:	4b38      	ldr	r3, [pc, #224]	@ (800a7f0 <EEPROM_init+0x2b8>)
 800a70e:	2200      	movs	r2, #0
 800a710:	701a      	strb	r2, [r3, #0]
 800a712:	e010      	b.n	800a736 <EEPROM_init+0x1fe>
			read_fifo_state = 1;
 800a714:	4b36      	ldr	r3, [pc, #216]	@ (800a7f0 <EEPROM_init+0x2b8>)
 800a716:	2201      	movs	r2, #1
 800a718:	701a      	strb	r2, [r3, #0]
			ui.Blue_IR_Offset = (EEPROM.RxBuff[9] << 8) | (EEPROM.RxBuff[10] & 0xFF);
 800a71a:	4b2d      	ldr	r3, [pc, #180]	@ (800a7d0 <EEPROM_init+0x298>)
 800a71c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a720:	021b      	lsls	r3, r3, #8
 800a722:	b21a      	sxth	r2, r3
 800a724:	4b2a      	ldr	r3, [pc, #168]	@ (800a7d0 <EEPROM_init+0x298>)
 800a726:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a72a:	b21b      	sxth	r3, r3
 800a72c:	4313      	orrs	r3, r2
 800a72e:	b21b      	sxth	r3, r3
 800a730:	b29a      	uxth	r2, r3
 800a732:	4b2b      	ldr	r3, [pc, #172]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a734:	81da      	strh	r2, [r3, #14]
		if(EEPROM.RxBuff[11] == 0){
 800a736:	4b26      	ldr	r3, [pc, #152]	@ (800a7d0 <EEPROM_init+0x298>)
 800a738:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d103      	bne.n	800a748 <EEPROM_init+0x210>
			ui.temp_alarm_enable = 0;
 800a740:	4b27      	ldr	r3, [pc, #156]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a742:	2200      	movs	r2, #0
 800a744:	759a      	strb	r2, [r3, #22]
 800a746:	e002      	b.n	800a74e <EEPROM_init+0x216>
			ui.temp_alarm_enable = 1;
 800a748:	4b25      	ldr	r3, [pc, #148]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a74a:	2201      	movs	r2, #1
 800a74c:	759a      	strb	r2, [r3, #22]
		if(EEPROM.RxBuff[12] == 0){
 800a74e:	4b20      	ldr	r3, [pc, #128]	@ (800a7d0 <EEPROM_init+0x298>)
 800a750:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a754:	2b00      	cmp	r3, #0
 800a756:	d103      	bne.n	800a760 <EEPROM_init+0x228>
			ui.temp_warring_maintain_bit = 0;
 800a758:	4b21      	ldr	r3, [pc, #132]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	765a      	strb	r2, [r3, #25]
 800a75e:	e002      	b.n	800a766 <EEPROM_init+0x22e>
			ui.temp_warring_maintain_bit = 1;
 800a760:	4b1f      	ldr	r3, [pc, #124]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a762:	2201      	movs	r2, #1
 800a764:	765a      	strb	r2, [r3, #25]
		if(EEPROM.RxBuff[13] == 0){
 800a766:	4b1a      	ldr	r3, [pc, #104]	@ (800a7d0 <EEPROM_init+0x298>)
 800a768:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d103      	bne.n	800a778 <EEPROM_init+0x240>
			ui.temp_alarm_maintain_bit = 0;
 800a770:	4b1b      	ldr	r3, [pc, #108]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a772:	2200      	movs	r2, #0
 800a774:	769a      	strb	r2, [r3, #26]
 800a776:	e002      	b.n	800a77e <EEPROM_init+0x246>
			ui.temp_alarm_maintain_bit = 1;
 800a778:	4b19      	ldr	r3, [pc, #100]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a77a:	2201      	movs	r2, #1
 800a77c:	769a      	strb	r2, [r3, #26]
		if(EEPROM.RxBuff[20] == 1)
 800a77e:	4b14      	ldr	r3, [pc, #80]	@ (800a7d0 <EEPROM_init+0x298>)
 800a780:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a784:	2b01      	cmp	r3, #1
 800a786:	d104      	bne.n	800a792 <EEPROM_init+0x25a>
			ui.End_Code = 1;
 800a788:	4b15      	ldr	r3, [pc, #84]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800a790:	e003      	b.n	800a79a <EEPROM_init+0x262>
			ui.End_Code = 0;
 800a792:	4b13      	ldr	r3, [pc, #76]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		if(EEPROM.RxBuff[22] == 0xFF){
 800a79a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7d0 <EEPROM_init+0x298>)
 800a79c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a7a0:	2bff      	cmp	r3, #255	@ 0xff
 800a7a2:	d103      	bne.n	800a7ac <EEPROM_init+0x274>
			ui.SMK_Level = RANK_1;
 800a7a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	741a      	strb	r2, [r3, #16]
 800a7aa:	e004      	b.n	800a7b6 <EEPROM_init+0x27e>
			ui.SMK_Level = EEPROM.RxBuff[22];
 800a7ac:	4b08      	ldr	r3, [pc, #32]	@ (800a7d0 <EEPROM_init+0x298>)
 800a7ae:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800a7b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a7b4:	741a      	strb	r2, [r3, #16]
		if(EEPROM.RxBuff[23] == 0xff)
 800a7b6:	4b06      	ldr	r3, [pc, #24]	@ (800a7d0 <EEPROM_init+0x298>)
 800a7b8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800a7bc:	2bff      	cmp	r3, #255	@ 0xff
 800a7be:	d119      	bne.n	800a7f4 <EEPROM_init+0x2bc>
			ui.Protocol_Type = 1;
 800a7c0:	4b07      	ldr	r3, [pc, #28]	@ (800a7e0 <EEPROM_init+0x2a8>)
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 800a7c8:	e01a      	b.n	800a800 <EEPROM_init+0x2c8>
 800a7ca:	bf00      	nop
 800a7cc:	2000089c 	.word	0x2000089c
 800a7d0:	20000298 	.word	0x20000298
 800a7d4:	200002ba 	.word	0x200002ba
 800a7d8:	2000029a 	.word	0x2000029a
 800a7dc:	20000010 	.word	0x20000010
 800a7e0:	200004f0 	.word	0x200004f0
 800a7e4:	42340000 	.word	0x42340000
 800a7e8:	51eb851f 	.word	0x51eb851f
 800a7ec:	42700000 	.word	0x42700000
 800a7f0:	200000c4 	.word	0x200000c4
			ui.Protocol_Type = EEPROM.RxBuff[23];
 800a7f4:	4b04      	ldr	r3, [pc, #16]	@ (800a808 <EEPROM_init+0x2d0>)
 800a7f6:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800a7fa:	4b04      	ldr	r3, [pc, #16]	@ (800a80c <EEPROM_init+0x2d4>)
 800a7fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 800a800:	bf00      	nop
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	20000298 	.word	0x20000298
 800a80c:	200004f0 	.word	0x200004f0

0800a810 <EEPROM_routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void EEPROM_routine(void)  // 1000ms
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
	//EEPROM TEST
	//EEPROM_SPI_WriteBuffer(EEPROM.Buff, (uint16_t)0x01, EEPROM_BUFFER_SIZE);
	if(EEPROM.SaveData_Flag == 1)  // EEPROM.SaveData_Flag == 1 --> 저장할 데이터가 있음을 의미하는것이 아닌가
 800a816:	4b73      	ldr	r3, [pc, #460]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	f040 80c2 	bne.w	800a9a4 <EEPROM_routine+0x194>
	{
		EEPROM.TxBuff[0] = EEPROM_WREN;
 800a820:	4b70      	ldr	r3, [pc, #448]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a822:	2206      	movs	r2, #6
 800a824:	709a      	strb	r2, [r3, #2]
		EEPROM_Comm(EEPROM.TxBuff, EEPROM.RxBuff, 1);        // HAL_SPI_TransmitReceive()
 800a826:	2201      	movs	r2, #1
 800a828:	496f      	ldr	r1, [pc, #444]	@ (800a9e8 <EEPROM_routine+0x1d8>)
 800a82a:	4870      	ldr	r0, [pc, #448]	@ (800a9ec <EEPROM_routine+0x1dc>)
 800a82c:	f7ff fe56 	bl	800a4dc <EEPROM_Comm>
		//HAL_Delay(10);
		EEPROM.TxBuff[0] = EEPROM_RDSR;
 800a830:	4b6c      	ldr	r3, [pc, #432]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a832:	2205      	movs	r2, #5
 800a834:	709a      	strb	r2, [r3, #2]
		EEPROM_Comm(EEPROM.TxBuff, EEPROM.RxBuff, 2);
 800a836:	2202      	movs	r2, #2
 800a838:	496b      	ldr	r1, [pc, #428]	@ (800a9e8 <EEPROM_routine+0x1d8>)
 800a83a:	486c      	ldr	r0, [pc, #432]	@ (800a9ec <EEPROM_routine+0x1dc>)
 800a83c:	f7ff fe4e 	bl	800a4dc <EEPROM_Comm>

		EEPROM.TxBuff[0] = EEPROM_WRITE;          // 쓰기 명령 전송
 800a840:	4b68      	ldr	r3, [pc, #416]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a842:	2202      	movs	r2, #2
 800a844:	709a      	strb	r2, [r3, #2]
		EEPROM.TxBuff[1] = EEPROM_addr >> 8;      // high byte // 데이터를 쓸 상위 주소
 800a846:	4b6a      	ldr	r3, [pc, #424]	@ (800a9f0 <EEPROM_routine+0x1e0>)
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	0a1b      	lsrs	r3, r3, #8
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	4b64      	ldr	r3, [pc, #400]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a852:	70da      	strb	r2, [r3, #3]
		EEPROM.TxBuff[2] = EEPROM_addr & 0x00FF;  // low byte  // 데이터를 쓸 하위 주소
 800a854:	4b66      	ldr	r3, [pc, #408]	@ (800a9f0 <EEPROM_routine+0x1e0>)
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	4b62      	ldr	r3, [pc, #392]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a85c:	711a      	strb	r2, [r3, #4]
		EEPROM.TxBuff[3] = (uint16_t)(ui.temp_warring_hex & 0xFF);  // ui 구조체에 있는 변수를 버퍼에 저장
 800a85e:	4b65      	ldr	r3, [pc, #404]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a860:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a862:	b2da      	uxtb	r2, r3
 800a864:	4b5f      	ldr	r3, [pc, #380]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a866:	715a      	strb	r2, [r3, #5]
		EEPROM.TxBuff[4] = (uint16_t)(ui.temp_warring_hex >>8);
 800a868:	4b62      	ldr	r3, [pc, #392]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a86a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a86c:	0a1b      	lsrs	r3, r3, #8
 800a86e:	b29b      	uxth	r3, r3
 800a870:	b2da      	uxtb	r2, r3
 800a872:	4b5c      	ldr	r3, [pc, #368]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a874:	719a      	strb	r2, [r3, #6]
		EEPROM.TxBuff[5] = (uint16_t)(ui.temp_alarm_hex & 0xFF);
 800a876:	4b5f      	ldr	r3, [pc, #380]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a878:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a87a:	b2da      	uxtb	r2, r3
 800a87c:	4b59      	ldr	r3, [pc, #356]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a87e:	71da      	strb	r2, [r3, #7]
		EEPROM.TxBuff[6] = (uint16_t)(ui.temp_alarm_hex >>8);
 800a880:	4b5c      	ldr	r3, [pc, #368]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a882:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a884:	0a1b      	lsrs	r3, r3, #8
 800a886:	b29b      	uxth	r3, r3
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	4b56      	ldr	r3, [pc, #344]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a88c:	721a      	strb	r2, [r3, #8]
		EEPROM.TxBuff[7] = (ui.IR_Offset & 0xFF);
 800a88e:	4b59      	ldr	r3, [pc, #356]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a890:	899b      	ldrh	r3, [r3, #12]
 800a892:	b2da      	uxtb	r2, r3
 800a894:	4b53      	ldr	r3, [pc, #332]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a896:	725a      	strb	r2, [r3, #9]
		EEPROM.TxBuff[8] = (ui.IR_Offset >> 8);
 800a898:	4b56      	ldr	r3, [pc, #344]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a89a:	899b      	ldrh	r3, [r3, #12]
 800a89c:	0a1b      	lsrs	r3, r3, #8
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	4b50      	ldr	r3, [pc, #320]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8a4:	729a      	strb	r2, [r3, #10]
		EEPROM.TxBuff[9] = (ui.Blue_IR_Offset & 0xFF);
 800a8a6:	4b53      	ldr	r3, [pc, #332]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a8a8:	89db      	ldrh	r3, [r3, #14]
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	4b4d      	ldr	r3, [pc, #308]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8ae:	72da      	strb	r2, [r3, #11]
		EEPROM.TxBuff[10] = (ui.Blue_IR_Offset >> 8);
 800a8b0:	4b50      	ldr	r3, [pc, #320]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a8b2:	89db      	ldrh	r3, [r3, #14]
 800a8b4:	0a1b      	lsrs	r3, r3, #8
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	4b4a      	ldr	r3, [pc, #296]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8bc:	731a      	strb	r2, [r3, #12]
		EEPROM.TxBuff[11] = ui.temp_alarm_enable;
 800a8be:	4b4d      	ldr	r3, [pc, #308]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a8c0:	7d9a      	ldrb	r2, [r3, #22]
 800a8c2:	4b48      	ldr	r3, [pc, #288]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8c4:	735a      	strb	r2, [r3, #13]
		EEPROM.TxBuff[12] = ui.temp_warring_maintain_bit;
 800a8c6:	4b4b      	ldr	r3, [pc, #300]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a8c8:	7e5a      	ldrb	r2, [r3, #25]
 800a8ca:	4b46      	ldr	r3, [pc, #280]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8cc:	739a      	strb	r2, [r3, #14]
		EEPROM.TxBuff[13] = ui.temp_alarm_maintain_bit;
 800a8ce:	4b49      	ldr	r3, [pc, #292]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a8d0:	7e9a      	ldrb	r2, [r3, #26]
 800a8d2:	4b44      	ldr	r3, [pc, #272]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8d4:	73da      	strb	r2, [r3, #15]
		EEPROM.TxBuff[14] = 0x00;
 800a8d6:	4b43      	ldr	r3, [pc, #268]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	741a      	strb	r2, [r3, #16]
		EEPROM.TxBuff[15] = 0x00;
 800a8dc:	4b41      	ldr	r3, [pc, #260]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	745a      	strb	r2, [r3, #17]
		EEPROM.TxBuff[16] = 0x00;
 800a8e2:	4b40      	ldr	r3, [pc, #256]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	749a      	strb	r2, [r3, #18]
		EEPROM.TxBuff[17] = 0x00;
 800a8e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	74da      	strb	r2, [r3, #19]
		EEPROM.TxBuff[18] = 0x00;
 800a8ee:	4b3d      	ldr	r3, [pc, #244]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	751a      	strb	r2, [r3, #20]
		EEPROM.TxBuff[19] = 0x00;
 800a8f4:	4b3b      	ldr	r3, [pc, #236]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	755a      	strb	r2, [r3, #21]
		EEPROM.TxBuff[20] = ui.End_Code;
 800a8fa:	4b3e      	ldr	r3, [pc, #248]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a8fc:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800a900:	4b38      	ldr	r3, [pc, #224]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a902:	759a      	strb	r2, [r3, #22]
		EEPROM.TxBuff[21] = 0x00;
 800a904:	4b37      	ldr	r3, [pc, #220]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a906:	2200      	movs	r2, #0
 800a908:	75da      	strb	r2, [r3, #23]
		EEPROM.TxBuff[22] = ui.SMK_Level;
 800a90a:	4b3a      	ldr	r3, [pc, #232]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a90c:	7c1a      	ldrb	r2, [r3, #16]
 800a90e:	4b35      	ldr	r3, [pc, #212]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a910:	761a      	strb	r2, [r3, #24]
		EEPROM.TxBuff[23] = ui.Protocol_Type;
 800a912:	4b38      	ldr	r3, [pc, #224]	@ (800a9f4 <EEPROM_routine+0x1e4>)
 800a914:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800a918:	4b32      	ldr	r3, [pc, #200]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a91a:	765a      	strb	r2, [r3, #25]
		EEPROM.TxBuff[24] = 0x00;
 800a91c:	4b31      	ldr	r3, [pc, #196]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a91e:	2200      	movs	r2, #0
 800a920:	769a      	strb	r2, [r3, #26]
		EEPROM.TxBuff[25] = 0x00;
 800a922:	4b30      	ldr	r3, [pc, #192]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a924:	2200      	movs	r2, #0
 800a926:	76da      	strb	r2, [r3, #27]
		EEPROM.TxBuff[26] = 0x00;
 800a928:	4b2e      	ldr	r3, [pc, #184]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	771a      	strb	r2, [r3, #28]
		EEPROM.TxBuff[27] = 0;//Adc.ZO_flag;
 800a92e:	4b2d      	ldr	r3, [pc, #180]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a930:	2200      	movs	r2, #0
 800a932:	775a      	strb	r2, [r3, #29]

		EEPROM.TxBuff[28] = 0xD8;
 800a934:	4b2b      	ldr	r3, [pc, #172]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a936:	22d8      	movs	r2, #216	@ 0xd8
 800a938:	779a      	strb	r2, [r3, #30]
		EEPROM.TxBuff[29] = 0xD8;
 800a93a:	4b2a      	ldr	r3, [pc, #168]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a93c:	22d8      	movs	r2, #216	@ 0xd8
 800a93e:	77da      	strb	r2, [r3, #31]

		EEPROM.Checksum = 0;
 800a940:	4b28      	ldr	r3, [pc, #160]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a942:	2200      	movs	r2, #0
 800a944:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		for(int i = 3; i < 28; i++)
 800a948:	2303      	movs	r3, #3
 800a94a:	607b      	str	r3, [r7, #4]
 800a94c:	e00f      	b.n	800a96e <EEPROM_routine+0x15e>
		{
			EEPROM.Checksum += EEPROM.TxBuff[i];     // 3번부터 27번까지 데이터 다 더해서 30~31에 8바이트씩 나눠서 넣는데
 800a94e:	4b25      	ldr	r3, [pc, #148]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a954:	4923      	ldr	r1, [pc, #140]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	440a      	add	r2, r1
 800a95a:	3202      	adds	r2, #2
 800a95c:	7812      	ldrb	r2, [r2, #0]
 800a95e:	4413      	add	r3, r2
 800a960:	b29a      	uxth	r2, r3
 800a962:	4b20      	ldr	r3, [pc, #128]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a964:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		for(int i = 3; i < 28; i++)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3301      	adds	r3, #1
 800a96c:	607b      	str	r3, [r7, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b1b      	cmp	r3, #27
 800a972:	ddec      	ble.n	800a94e <EEPROM_routine+0x13e>
		}											 // 나중에 데이터가 올바르게 기록되었는지 확인 용도인거 같음

		EEPROM.TxBuff[30] = (uint16_t)(EEPROM.Checksum & 0xFF);
 800a974:	4b1b      	ldr	r3, [pc, #108]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	4b19      	ldr	r3, [pc, #100]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a97e:	f883 2020 	strb.w	r2, [r3, #32]
		EEPROM.TxBuff[31] = (uint16_t)(EEPROM.Checksum >>8);
 800a982:	4b18      	ldr	r3, [pc, #96]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a988:	0a1b      	lsrs	r3, r3, #8
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	4b15      	ldr	r3, [pc, #84]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a990:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		EEPROM_Comm(EEPROM.TxBuff, EEPROM.RxBuff, EEPROM_BUF_MAX);
 800a994:	2220      	movs	r2, #32
 800a996:	4914      	ldr	r1, [pc, #80]	@ (800a9e8 <EEPROM_routine+0x1d8>)
 800a998:	4814      	ldr	r0, [pc, #80]	@ (800a9ec <EEPROM_routine+0x1dc>)
 800a99a:	f7ff fd9f 	bl	800a4dc <EEPROM_Comm>
		//HAL_Delay(10);
		EEPROM.SaveData_Flag = 0;
 800a99e:	4b11      	ldr	r3, [pc, #68]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]
	}
	if(EEPROM.Result != 0)
 800a9a4:	4b0f      	ldr	r3, [pc, #60]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a9a6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d007      	beq.n	800a9be <EEPROM_routine+0x1ae>
	{
		EEPROM.Error_cnt ++;
 800a9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a9b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a9ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	if((EEPROM.Error_cnt == 5) && (EEPROM.Error == 0))
 800a9be:	4b09      	ldr	r3, [pc, #36]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a9c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9c4:	2b05      	cmp	r3, #5
 800a9c6:	d108      	bne.n	800a9da <EEPROM_routine+0x1ca>
 800a9c8:	4b06      	ldr	r3, [pc, #24]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a9ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d103      	bne.n	800a9da <EEPROM_routine+0x1ca>
	{
		EEPROM.Error = 1;
 800a9d2:	4b04      	ldr	r3, [pc, #16]	@ (800a9e4 <EEPROM_routine+0x1d4>)
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
}
 800a9da:	bf00      	nop
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20000298 	.word	0x20000298
 800a9e8:	200002ba 	.word	0x200002ba
 800a9ec:	2000029a 	.word	0x2000029a
 800a9f0:	20000010 	.word	0x20000010
 800a9f4:	200004f0 	.word	0x200004f0

0800a9f8 <EEPROM_SPI_INIT>:


void EEPROM_SPI_INIT(SPI_HandleTypeDef * hspi) {
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
    EEPROM_SPI = hspi;
 800aa00:	4a04      	ldr	r2, [pc, #16]	@ (800aa14 <EEPROM_SPI_INIT+0x1c>)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6013      	str	r3, [r2, #0]
}
 800aa06:	bf00      	nop
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	200002e0 	.word	0x200002e0

0800aa18 <EEPROM_Factory_Reset>:
    if (HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)instruction, (uint16_t)size, 200) != HAL_OK) {
        Error_Handler();
    }
}
void EEPROM_Factory_Reset(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
	EEPROM.TxBuff[0] = EEPROM_WREN;
 800aa1e:	4b7d      	ldr	r3, [pc, #500]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800aa20:	2206      	movs	r2, #6
 800aa22:	709a      	strb	r2, [r3, #2]
	EEPROM_Comm(EEPROM.TxBuff, EEPROM.RxBuff, 1);
 800aa24:	2201      	movs	r2, #1
 800aa26:	497c      	ldr	r1, [pc, #496]	@ (800ac18 <EEPROM_Factory_Reset+0x200>)
 800aa28:	487c      	ldr	r0, [pc, #496]	@ (800ac1c <EEPROM_Factory_Reset+0x204>)
 800aa2a:	f7ff fd57 	bl	800a4dc <EEPROM_Comm>
	//HAL_Delay(10);
	EEPROM.TxBuff[0] = EEPROM_RDSR;
 800aa2e:	4b79      	ldr	r3, [pc, #484]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800aa30:	2205      	movs	r2, #5
 800aa32:	709a      	strb	r2, [r3, #2]
	EEPROM_Comm(EEPROM.TxBuff, EEPROM.RxBuff, 2);
 800aa34:	2202      	movs	r2, #2
 800aa36:	4978      	ldr	r1, [pc, #480]	@ (800ac18 <EEPROM_Factory_Reset+0x200>)
 800aa38:	4878      	ldr	r0, [pc, #480]	@ (800ac1c <EEPROM_Factory_Reset+0x204>)
 800aa3a:	f7ff fd4f 	bl	800a4dc <EEPROM_Comm>

	ui.temp_warring_hex = 4500;
 800aa3e:	4b78      	ldr	r3, [pc, #480]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aa40:	f241 1294 	movw	r2, #4500	@ 0x1194
 800aa44:	849a      	strh	r2, [r3, #36]	@ 0x24
	ui.temp_warring = ui.temp_warring_hex / 100;
 800aa46:	4b76      	ldr	r3, [pc, #472]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aa48:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800aa4a:	4a76      	ldr	r2, [pc, #472]	@ (800ac24 <EEPROM_Factory_Reset+0x20c>)
 800aa4c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa50:	095b      	lsrs	r3, r3, #5
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	ee07 3a90 	vmov	s15, r3
 800aa58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa5c:	4b70      	ldr	r3, [pc, #448]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aa5e:	edc3 7a07 	vstr	s15, [r3, #28]
	ui.temp_alarm_hex = 6000;
 800aa62:	4b6f      	ldr	r3, [pc, #444]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aa64:	f241 7270 	movw	r2, #6000	@ 0x1770
 800aa68:	84da      	strh	r2, [r3, #38]	@ 0x26
	ui.temp_alarm = ui.temp_alarm_hex / 100;
 800aa6a:	4b6d      	ldr	r3, [pc, #436]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aa6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aa6e:	4a6d      	ldr	r2, [pc, #436]	@ (800ac24 <EEPROM_Factory_Reset+0x20c>)
 800aa70:	fba2 2303 	umull	r2, r3, r2, r3
 800aa74:	095b      	lsrs	r3, r3, #5
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	ee07 3a90 	vmov	s15, r3
 800aa7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa80:	4b67      	ldr	r3, [pc, #412]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aa82:	edc3 7a08 	vstr	s15, [r3, #32]
	ui.temp_alarm_enable = 1;
 800aa86:	4b66      	ldr	r3, [pc, #408]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aa88:	2201      	movs	r2, #1
 800aa8a:	759a      	strb	r2, [r3, #22]
	ui.temp_warring_maintain_bit = 0;
 800aa8c:	4b64      	ldr	r3, [pc, #400]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	765a      	strb	r2, [r3, #25]
	ui.temp_alarm_maintain_bit = 0;
 800aa92:	4b63      	ldr	r3, [pc, #396]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	769a      	strb	r2, [r3, #26]
	ui.SMK_Level = RANK_1;
 800aa98:	4b61      	ldr	r3, [pc, #388]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	741a      	strb	r2, [r3, #16]
	ui.Protocol_Type = 1;  // Default is OnOff Protocal
 800aa9e:	4b60      	ldr	r3, [pc, #384]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	ui.End_Code			= 1;
 800aaa6:	4b5e      	ldr	r3, [pc, #376]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	// Zero_Offset�� 2.9 ~ 3.2���� �ʱ� ���� �� ����(HSD200) - �ּҰ� Default ����

	EEPROM.TxBuff[0] = EEPROM_WRITE;
 800aaae:	4b59      	ldr	r3, [pc, #356]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800aab0:	2202      	movs	r2, #2
 800aab2:	709a      	strb	r2, [r3, #2]
	EEPROM.TxBuff[1] = EEPROM_addr >> 8;      // high byte
 800aab4:	4b5c      	ldr	r3, [pc, #368]	@ (800ac28 <EEPROM_Factory_Reset+0x210>)
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	0a1b      	lsrs	r3, r3, #8
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	4b55      	ldr	r3, [pc, #340]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800aac0:	70da      	strb	r2, [r3, #3]
	EEPROM.TxBuff[2] = EEPROM_addr & 0x00FF;  // low byte
 800aac2:	4b59      	ldr	r3, [pc, #356]	@ (800ac28 <EEPROM_Factory_Reset+0x210>)
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	4b52      	ldr	r3, [pc, #328]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800aaca:	711a      	strb	r2, [r3, #4]
	EEPROM.TxBuff[3] = (uint16_t)(ui.temp_warring_hex & 0xFF);
 800aacc:	4b54      	ldr	r3, [pc, #336]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aace:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	4b50      	ldr	r3, [pc, #320]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800aad4:	715a      	strb	r2, [r3, #5]
	EEPROM.TxBuff[4] = (uint16_t)(ui.temp_warring_hex >>8);
 800aad6:	4b52      	ldr	r3, [pc, #328]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aad8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800aada:	0a1b      	lsrs	r3, r3, #8
 800aadc:	b29b      	uxth	r3, r3
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	4b4c      	ldr	r3, [pc, #304]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800aae2:	719a      	strb	r2, [r3, #6]
	EEPROM.TxBuff[5] = (uint16_t)(ui.temp_alarm_hex & 0xFF);
 800aae4:	4b4e      	ldr	r3, [pc, #312]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aae6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	4b4a      	ldr	r3, [pc, #296]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800aaec:	71da      	strb	r2, [r3, #7]
	EEPROM.TxBuff[6] = (uint16_t)(ui.temp_alarm_hex >>8);
 800aaee:	4b4c      	ldr	r3, [pc, #304]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aaf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aaf2:	0a1b      	lsrs	r3, r3, #8
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	4b46      	ldr	r3, [pc, #280]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800aafa:	721a      	strb	r2, [r3, #8]
	EEPROM.TxBuff[7] = (ui.IR_Offset & 0xFF);
 800aafc:	4b48      	ldr	r3, [pc, #288]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800aafe:	899b      	ldrh	r3, [r3, #12]
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	4b44      	ldr	r3, [pc, #272]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab04:	725a      	strb	r2, [r3, #9]
	EEPROM.TxBuff[8] = (ui.IR_Offset >> 8);
 800ab06:	4b46      	ldr	r3, [pc, #280]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800ab08:	899b      	ldrh	r3, [r3, #12]
 800ab0a:	0a1b      	lsrs	r3, r3, #8
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	4b40      	ldr	r3, [pc, #256]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab12:	729a      	strb	r2, [r3, #10]
	EEPROM.TxBuff[9] = (ui.Blue_IR_Offset & 0xFF);
 800ab14:	4b42      	ldr	r3, [pc, #264]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800ab16:	89db      	ldrh	r3, [r3, #14]
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	4b3e      	ldr	r3, [pc, #248]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab1c:	72da      	strb	r2, [r3, #11]
	EEPROM.TxBuff[10] = (ui.Blue_IR_Offset >> 8);
 800ab1e:	4b40      	ldr	r3, [pc, #256]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800ab20:	89db      	ldrh	r3, [r3, #14]
 800ab22:	0a1b      	lsrs	r3, r3, #8
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	4b3a      	ldr	r3, [pc, #232]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab2a:	731a      	strb	r2, [r3, #12]
	EEPROM.TxBuff[11] = ui.temp_alarm_enable;
 800ab2c:	4b3c      	ldr	r3, [pc, #240]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800ab2e:	7d9a      	ldrb	r2, [r3, #22]
 800ab30:	4b38      	ldr	r3, [pc, #224]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab32:	735a      	strb	r2, [r3, #13]
	EEPROM.TxBuff[12] = ui.temp_warring_maintain_bit;
 800ab34:	4b3a      	ldr	r3, [pc, #232]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800ab36:	7e5a      	ldrb	r2, [r3, #25]
 800ab38:	4b36      	ldr	r3, [pc, #216]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab3a:	739a      	strb	r2, [r3, #14]
	EEPROM.TxBuff[13] = ui.temp_alarm_maintain_bit;
 800ab3c:	4b38      	ldr	r3, [pc, #224]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800ab3e:	7e9a      	ldrb	r2, [r3, #26]
 800ab40:	4b34      	ldr	r3, [pc, #208]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab42:	73da      	strb	r2, [r3, #15]
	EEPROM.TxBuff[14] = 0x00;
 800ab44:	4b33      	ldr	r3, [pc, #204]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	741a      	strb	r2, [r3, #16]
	EEPROM.TxBuff[15] = 0x00;
 800ab4a:	4b32      	ldr	r3, [pc, #200]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	745a      	strb	r2, [r3, #17]
	EEPROM.TxBuff[16] = 0x00;
 800ab50:	4b30      	ldr	r3, [pc, #192]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	749a      	strb	r2, [r3, #18]
	EEPROM.TxBuff[17] = 0x00;
 800ab56:	4b2f      	ldr	r3, [pc, #188]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	74da      	strb	r2, [r3, #19]
	EEPROM.TxBuff[18] = 0x00;
 800ab5c:	4b2d      	ldr	r3, [pc, #180]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	751a      	strb	r2, [r3, #20]
	EEPROM.TxBuff[19] = 0x00;
 800ab62:	4b2c      	ldr	r3, [pc, #176]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	755a      	strb	r2, [r3, #21]
	EEPROM.TxBuff[20] = ui.End_Code;
 800ab68:	4b2d      	ldr	r3, [pc, #180]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800ab6a:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800ab6e:	4b29      	ldr	r3, [pc, #164]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab70:	759a      	strb	r2, [r3, #22]
	EEPROM.TxBuff[21] = 0x00;
 800ab72:	4b28      	ldr	r3, [pc, #160]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	75da      	strb	r2, [r3, #23]
	EEPROM.TxBuff[22] = ui.SMK_Level;
 800ab78:	4b29      	ldr	r3, [pc, #164]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800ab7a:	7c1a      	ldrb	r2, [r3, #16]
 800ab7c:	4b25      	ldr	r3, [pc, #148]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab7e:	761a      	strb	r2, [r3, #24]
	EEPROM.TxBuff[23] = ui.Protocol_Type;
 800ab80:	4b27      	ldr	r3, [pc, #156]	@ (800ac20 <EEPROM_Factory_Reset+0x208>)
 800ab82:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800ab86:	4b23      	ldr	r3, [pc, #140]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab88:	765a      	strb	r2, [r3, #25]
	EEPROM.TxBuff[24] = 0x00;
 800ab8a:	4b22      	ldr	r3, [pc, #136]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	769a      	strb	r2, [r3, #26]
	EEPROM.TxBuff[25] = 0x00;
 800ab90:	4b20      	ldr	r3, [pc, #128]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	76da      	strb	r2, [r3, #27]
	EEPROM.TxBuff[26] = 0x00;
 800ab96:	4b1f      	ldr	r3, [pc, #124]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	771a      	strb	r2, [r3, #28]
	EEPROM.TxBuff[27] = 0;//Adc.ZO_flag;
 800ab9c:	4b1d      	ldr	r3, [pc, #116]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	775a      	strb	r2, [r3, #29]

	EEPROM.TxBuff[28] = 0xD8;
 800aba2:	4b1c      	ldr	r3, [pc, #112]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800aba4:	22d8      	movs	r2, #216	@ 0xd8
 800aba6:	779a      	strb	r2, [r3, #30]
	EEPROM.TxBuff[29] = 0xD8;
 800aba8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800abaa:	22d8      	movs	r2, #216	@ 0xd8
 800abac:	77da      	strb	r2, [r3, #31]

	EEPROM.Checksum = 0;
 800abae:	4b19      	ldr	r3, [pc, #100]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	for(int i = 3; i < 28; i++)
 800abb6:	2303      	movs	r3, #3
 800abb8:	607b      	str	r3, [r7, #4]
 800abba:	e00f      	b.n	800abdc <EEPROM_Factory_Reset+0x1c4>
	{
		EEPROM.Checksum += EEPROM.TxBuff[i];
 800abbc:	4b15      	ldr	r3, [pc, #84]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800abbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800abc2:	4914      	ldr	r1, [pc, #80]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	440a      	add	r2, r1
 800abc8:	3202      	adds	r2, #2
 800abca:	7812      	ldrb	r2, [r2, #0]
 800abcc:	4413      	add	r3, r2
 800abce:	b29a      	uxth	r2, r3
 800abd0:	4b10      	ldr	r3, [pc, #64]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800abd2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	for(int i = 3; i < 28; i++)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	3301      	adds	r3, #1
 800abda:	607b      	str	r3, [r7, #4]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b1b      	cmp	r3, #27
 800abe0:	ddec      	ble.n	800abbc <EEPROM_Factory_Reset+0x1a4>
	}

	EEPROM.TxBuff[30] = (uint16_t)(EEPROM.Checksum & 0xFF);
 800abe2:	4b0c      	ldr	r3, [pc, #48]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800abe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	4b0a      	ldr	r3, [pc, #40]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800abec:	f883 2020 	strb.w	r2, [r3, #32]
	EEPROM.TxBuff[31] = (uint16_t)(EEPROM.Checksum >>8);
 800abf0:	4b08      	ldr	r3, [pc, #32]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800abf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800abf6:	0a1b      	lsrs	r3, r3, #8
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	4b05      	ldr	r3, [pc, #20]	@ (800ac14 <EEPROM_Factory_Reset+0x1fc>)
 800abfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	EEPROM_Comm(EEPROM.TxBuff, EEPROM.RxBuff, EEPROM_BUF_MAX);
 800ac02:	2220      	movs	r2, #32
 800ac04:	4904      	ldr	r1, [pc, #16]	@ (800ac18 <EEPROM_Factory_Reset+0x200>)
 800ac06:	4805      	ldr	r0, [pc, #20]	@ (800ac1c <EEPROM_Factory_Reset+0x204>)
 800ac08:	f7ff fc68 	bl	800a4dc <EEPROM_Comm>
	//HAL_Delay(10);
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20000298 	.word	0x20000298
 800ac18:	200002ba 	.word	0x200002ba
 800ac1c:	2000029a 	.word	0x2000029a
 800ac20:	200004f0 	.word	0x200004f0
 800ac24:	51eb851f 	.word	0x51eb851f
 800ac28:	20000010 	.word	0x20000010

0800ac2c <FUN_I2C_SHT30_Init>:
void FUN_I2C_VL53L3CX_Init(void);
void FUN_I2C_VL53L3CX_Routine(void);
void I2C_VL53L3CX_Task(void* argument);

void FUN_I2C_SHT30_Init(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af02      	add	r7, sp, #8
	i2c3_write[0] = (uint8_t)(CMD_SINGLE_EN_HIGH >> 8);
 800ac32:	4b48      	ldr	r3, [pc, #288]	@ (800ad54 <FUN_I2C_SHT30_Init+0x128>)
 800ac34:	222c      	movs	r2, #44	@ 0x2c
 800ac36:	701a      	strb	r2, [r3, #0]
	i2c3_write[1] = (uint8_t)(CMD_SINGLE_EN_HIGH & 0xFF);
 800ac38:	4b46      	ldr	r3, [pc, #280]	@ (800ad54 <FUN_I2C_SHT30_Init+0x128>)
 800ac3a:	2206      	movs	r2, #6
 800ac3c:	705a      	strb	r2, [r3, #1]
	//구조체 추가
	Ext_SHT30.I2C_Handle = &hi2c2;
 800ac3e:	4b46      	ldr	r3, [pc, #280]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac40:	4a46      	ldr	r2, [pc, #280]	@ (800ad5c <FUN_I2C_SHT30_Init+0x130>)
 800ac42:	601a      	str	r2, [r3, #0]
	Int_SHT30.I2C_Handle = &hi2c3;
 800ac44:	4b46      	ldr	r3, [pc, #280]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800ac46:	4a47      	ldr	r2, [pc, #284]	@ (800ad64 <FUN_I2C_SHT30_Init+0x138>)
 800ac48:	601a      	str	r2, [r3, #0]

	Ext_SHT30.I2C_Addr = TEMP_SENSOR_ADDR;
 800ac4a:	4b43      	ldr	r3, [pc, #268]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac4c:	2288      	movs	r2, #136	@ 0x88
 800ac4e:	711a      	strb	r2, [r3, #4]
	Ext_SHT30.i2c_period_cnt = 1;
 800ac50:	4b41      	ldr	r3, [pc, #260]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac52:	2201      	movs	r2, #1
 800ac54:	741a      	strb	r2, [r3, #16]
	Ext_SHT30.temp_acc_cnt = 0;
 800ac56:	4b40      	ldr	r3, [pc, #256]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	745a      	strb	r2, [r3, #17]
	Ext_SHT30.i2c_total_reset = 0;
 800ac5c:	4b3e      	ldr	r3, [pc, #248]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	Ext_SHT30.i2c_success = 0;
 800ac64:	4b3c      	ldr	r3, [pc, #240]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	Ext_SHT30.i2c_error_cnt = 0;
 800ac6c:	4b3a      	ldr	r3, [pc, #232]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	Ext_SHT30.i2c_error_flag = 0;
 800ac74:	4b38      	ldr	r3, [pc, #224]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
	Ext_SHT30.temp_crc_error_cnt = 0;
 800ac7c:	4b36      	ldr	r3, [pc, #216]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
	Ext_SHT30.humi_crc_error_cnt = 0;
 800ac84:	4b34      	ldr	r3, [pc, #208]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
	Ext_SHT30.crc_error_flag = 0;
 800ac8c:	4b32      	ldr	r3, [pc, #200]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
	Ext_SHT30.sensor_error = SENSOR_NOT_ERROR;
 800ac94:	4b30      	ldr	r3, [pc, #192]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
	Ext_SHT30.warring_cnt = 0;
 800ac9c:	4b2e      	ldr	r3, [pc, #184]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
	Ext_SHT30.alarm_cnt = 0;
 800aca4:	4b2c      	ldr	r3, [pc, #176]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf


	Int_SHT30.I2C_Addr = TEMP_SENSOR_ADDR;
 800acac:	4b2c      	ldr	r3, [pc, #176]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800acae:	2288      	movs	r2, #136	@ 0x88
 800acb0:	711a      	strb	r2, [r3, #4]
	Int_SHT30.i2c_period_cnt = 1;
 800acb2:	4b2b      	ldr	r3, [pc, #172]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800acb4:	2201      	movs	r2, #1
 800acb6:	741a      	strb	r2, [r3, #16]
	Int_SHT30.humi_acc_cnt = 0;
 800acb8:	4b29      	ldr	r3, [pc, #164]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800acba:	2200      	movs	r2, #0
 800acbc:	749a      	strb	r2, [r3, #18]
	Int_SHT30.i2c_total_reset = 0;
 800acbe:	4b28      	ldr	r3, [pc, #160]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	Int_SHT30.i2c_success = 0;
 800acc6:	4b26      	ldr	r3, [pc, #152]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800acc8:	2200      	movs	r2, #0
 800acca:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	Int_SHT30.i2c_error_cnt = 0;
 800acce:	4b24      	ldr	r3, [pc, #144]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	Int_SHT30.i2c_error_flag = 0;
 800acd6:	4b22      	ldr	r3, [pc, #136]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
	Int_SHT30.temp_crc_error_cnt = 0;
 800acde:	4b20      	ldr	r3, [pc, #128]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
	Int_SHT30.humi_crc_error_cnt = 0;
 800ace6:	4b1e      	ldr	r3, [pc, #120]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
	Int_SHT30.crc_error_flag = 0;
 800acee:	4b1c      	ldr	r3, [pc, #112]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
	Int_SHT30.sensor_error = SENSOR_NOT_ERROR;
 800acf6:	4b1a      	ldr	r3, [pc, #104]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
	Int_SHT30.warring_cnt = 0;
 800acfe:	4b18      	ldr	r3, [pc, #96]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
	Int_SHT30.alarm_cnt = 0;
 800ad06:	4b16      	ldr	r3, [pc, #88]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf

	memcpy(Ext_SHT30.i2c_write_buff, i2c3_write, 2);
 800ad0e:	4b11      	ldr	r3, [pc, #68]	@ (800ad54 <FUN_I2C_SHT30_Init+0x128>)
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	4a11      	ldr	r2, [pc, #68]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ad14:	f8a2 3005 	strh.w	r3, [r2, #5]
	memcpy(Int_SHT30.i2c_write_buff, i2c3_write, 2);
 800ad18:	4b0e      	ldr	r3, [pc, #56]	@ (800ad54 <FUN_I2C_SHT30_Init+0x128>)
 800ad1a:	881b      	ldrh	r3, [r3, #0]
 800ad1c:	4a10      	ldr	r2, [pc, #64]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800ad1e:	f8a2 3005 	strh.w	r3, [r2, #5]

	HAL_I2C_Master_Transmit(Ext_SHT30.I2C_Handle, Ext_SHT30.I2C_Addr, Ext_SHT30.i2c_write_buff, 2, 100);
 800ad22:	4b0d      	ldr	r3, [pc, #52]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ad24:	6818      	ldr	r0, [r3, #0]
 800ad26:	4b0c      	ldr	r3, [pc, #48]	@ (800ad58 <FUN_I2C_SHT30_Init+0x12c>)
 800ad28:	791b      	ldrb	r3, [r3, #4]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	2364      	movs	r3, #100	@ 0x64
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	2302      	movs	r3, #2
 800ad32:	4a0d      	ldr	r2, [pc, #52]	@ (800ad68 <FUN_I2C_SHT30_Init+0x13c>)
 800ad34:	f006 ffbc 	bl	8011cb0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(Int_SHT30.I2C_Handle, Int_SHT30.I2C_Addr, Int_SHT30.i2c_write_buff, 2, 100);
 800ad38:	4b09      	ldr	r3, [pc, #36]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800ad3a:	6818      	ldr	r0, [r3, #0]
 800ad3c:	4b08      	ldr	r3, [pc, #32]	@ (800ad60 <FUN_I2C_SHT30_Init+0x134>)
 800ad3e:	791b      	ldrb	r3, [r3, #4]
 800ad40:	4619      	mov	r1, r3
 800ad42:	2364      	movs	r3, #100	@ 0x64
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	2302      	movs	r3, #2
 800ad48:	4a08      	ldr	r2, [pc, #32]	@ (800ad6c <FUN_I2C_SHT30_Init+0x140>)
 800ad4a:	f006 ffb1 	bl	8011cb0 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c2, 0x45, i2c3_write, 2, 100);
}
 800ad4e:	bf00      	nop
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	200004ac 	.word	0x200004ac
 800ad58:	200003cc 	.word	0x200003cc
 800ad5c:	20000804 	.word	0x20000804
 800ad60:	200002ec 	.word	0x200002ec
 800ad64:	20000850 	.word	0x20000850
 800ad68:	200003d1 	.word	0x200003d1
 800ad6c:	200002f1 	.word	0x200002f1

0800ad70 <FUN_SHT30_Routine>:
void FUN_SHT30_Routine(_SHT30_Dev *sht30){  	// 250ms마다 호출
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	sht30->i2c_state = HAL_I2C_GetState(sht30->I2C_Handle); // sht30->I2C_Handle->State
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f007 f981 	bl	8012084 <HAL_I2C_GetState>
 800ad82:	4603      	mov	r3, r0
 800ad84:	461a      	mov	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	sht30->i2c_error = HAL_I2C_GetError(sht30->I2C_Handle); // sht30->I2C_Handle->ErrorCode
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f007 f985 	bl	80120a0 <HAL_I2C_GetError>
 800ad96:	4602      	mov	r2, r0
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	if((sht30->i2c_state == HAL_I2C_STATE_READY) && (sht30->i2c_error == HAL_I2C_ERROR_NONE))   //sht30->i2c_state가 준비상태이고, sht30->i2c_error 에러 없으면
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ada4:	2b20      	cmp	r3, #32
 800ada6:	d12e      	bne.n	800ae06 <FUN_SHT30_Routine+0x96>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d129      	bne.n	800ae06 <FUN_SHT30_Routine+0x96>
		{
			// 주기 처리
			if(sht30->i2c_period_cnt == 4) { 			// 250ms * 4 =  // 1초마다 //
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	7c1b      	ldrb	r3, [r3, #16]
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d10e      	bne.n	800add8 <FUN_SHT30_Routine+0x68>
				sht30->i2c_period_cnt = 0;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	741a      	strb	r2, [r3, #16]

				// 측정 결과 저장 : I2C 통신 진행
				sfun_I2C_Measurement_results(sht30); 	// 이런거 호출 // 센서 데이터를 받고 다시 측정하라고 명령 보내고
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 f997 	bl	800b0f4 <sfun_I2C_Measurement_results>

				// 결과 데이터 온습도로 변환
				sfun_I2C_Measurement_conversion(sht30); // 받은 온습도 값 무결성 확인 후 값 정제후 sht30 구조체 변수에 저장
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f9ba 	bl	800b140 <sfun_I2C_Measurement_conversion>

				// 온습도 데이터 누적 저장
				sfun_I2C_Acc_Data(sht30);				// sht30->temp_acc[], sht30->humi_acc[] 배열에 차곡차곡 저장
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fadf 	bl	800b390 <sfun_I2C_Acc_Data>

				// 누적 데이터로 리셋 하는 함수 - 테스트상 현재 제외
				sfun_I2C_Measurement_Error_Check(sht30);//
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fb28 	bl	800b428 <sfun_I2C_Measurement_Error_Check>
			}

			sht30->i2c_period_cnt++;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7c1b      	ldrb	r3, [r3, #16]
 800addc:	3301      	adds	r3, #1
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	741a      	strb	r2, [r3, #16]

			// 실행 카운터 증가 - |||210825 추가|||
			sht30->i2c_success++;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800adea:	1c5a      	adds	r2, r3, #1
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

			// 실행 카운터 일정치 이상 증가시 에러 카운터 초기화 - |||210825 추가|||
			if(sht30->i2c_success >= 40)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800adf8:	2b27      	cmp	r3, #39	@ 0x27
 800adfa:	d90b      	bls.n	800ae14 <FUN_SHT30_Routine+0xa4>
			{
				sht30->i2c_error_cnt = 0;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
			if(sht30->i2c_success >= 40)
 800ae04:	e006      	b.n	800ae14 <FUN_SHT30_Routine+0xa4>
			}
		}
		//
		else
		{
			sht30->i2c_error_cnt++;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ae0c:	1c5a      	adds	r2, r3, #1
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
		}

		// 250ms * 40 = 10초
		// 에러 카운터 일정치 누적시 - |||210825 추가|||
		if(sht30->i2c_error_cnt == 40) //10초
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ae1a:	2b28      	cmp	r3, #40	@ 0x28
 800ae1c:	d132      	bne.n	800ae84 <FUN_SHT30_Routine+0x114>
		{
			HAL_I2C_DeInit(sht30->I2C_Handle);		// I2C 초기화 해제 - |||210825 추가|||
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f006 ff15 	bl	8011c52 <HAL_I2C_DeInit>

			HAL_Delay(10);				// 일정 딜레이 (10ms) - |||210825 추가|||
 800ae28:	200a      	movs	r0, #10
 800ae2a:	f003 fef3 	bl	800ec14 <HAL_Delay>

			if (HAL_I2C_Init(sht30->I2C_Handle) != HAL_OK)  // I2C 초기화 진행 - |||210825 추가|||
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f006 fe7e 	bl	8011b34 <HAL_I2C_Init>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <FUN_SHT30_Routine+0xd2>
			{
				Error_Handler();
 800ae3e:	f003 fa61 	bl	800e304 <Error_Handler>
			}
			if (HAL_I2CEx_ConfigAnalogFilter(sht30->I2C_Handle, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2100      	movs	r1, #0
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f007 fbad 	bl	80125a8 <HAL_I2CEx_ConfigAnalogFilter>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d001      	beq.n	800ae58 <FUN_SHT30_Routine+0xe8>
			{
				Error_Handler();
 800ae54:	f003 fa56 	bl	800e304 <Error_Handler>
			}
			if (HAL_I2CEx_ConfigDigitalFilter(sht30->I2C_Handle, 0) != HAL_OK)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f007 fbed 	bl	801263e <HAL_I2CEx_ConfigDigitalFilter>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <FUN_SHT30_Routine+0xfe>
			{
				Error_Handler();
 800ae6a:	f003 fa4b 	bl	800e304 <Error_Handler>
			}

			sht30->i2c_success = 0;	// 실행 카운터 제거 - |||210825 추가|||
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

			sht30->i2c_error_cnt++;		// 에러 카운터 증가 - |||210825 추가|||
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ae7c:	1c5a      	adds	r2, r3, #1
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
		}

		if(sht30->i2c_error_cnt >= 50) 	// 초기화 후에도 카운터 누적시 에러 (ex. 온도 센서 고장시)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ae8a:	2b31      	cmp	r3, #49	@ 0x31
 800ae8c:	d903      	bls.n	800ae96 <FUN_SHT30_Routine+0x126>
		{
			sht30->i2c_error_flag = 1;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
		}

		// 에러 체크
		if((sht30->crc_error_flag == 1) ||(sht30->i2c_error_flag == 1))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 30cb 	ldrb.w	r3, [r3, #203]	@ 0xcb
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d004      	beq.n	800aeaa <FUN_SHT30_Routine+0x13a>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d104      	bne.n	800aeb4 <FUN_SHT30_Routine+0x144>
		{
			sht30->sensor_error = SENSOR_ERROR;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 800aeb2:	e004      	b.n	800aebe <FUN_SHT30_Routine+0x14e>
		}
		else
		{
			sht30->sensor_error = SENSOR_NOT_ERROR;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
		}

}
 800aebc:	bf00      	nop
 800aebe:	bf00      	nop
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
	...

0800aec8 <FUN_I2C_INT_SHT30_Routine>:
{
	FUN_SHT30_Routine(&Int_SHT30);
	FUN_SHT30_Routine(&Ext_SHT30);
}

void FUN_I2C_INT_SHT30_Routine(void){  	// 250ms 마다 호출
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
	FUN_SHT30_Routine(&Int_SHT30);
 800aecc:	4811      	ldr	r0, [pc, #68]	@ (800af14 <FUN_I2C_INT_SHT30_Routine+0x4c>)
 800aece:	f7ff ff4f 	bl	800ad70 <FUN_SHT30_Routine>
	ui.i_temp_100times = (uint16_t)(Int_SHT30.temperature * 100);
 800aed2:	4b10      	ldr	r3, [pc, #64]	@ (800af14 <FUN_I2C_INT_SHT30_Routine+0x4c>)
 800aed4:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 800aed8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800af18 <FUN_I2C_INT_SHT30_Routine+0x50>
 800aedc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aee4:	ee17 3a90 	vmov	r3, s15
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	b21a      	sxth	r2, r3
 800aeec:	4b0b      	ldr	r3, [pc, #44]	@ (800af1c <FUN_I2C_INT_SHT30_Routine+0x54>)
 800aeee:	825a      	strh	r2, [r3, #18]
	ui.i_humi_100times = (uint16_t)(Int_SHT30.humidity * 100);
 800aef0:	4b08      	ldr	r3, [pc, #32]	@ (800af14 <FUN_I2C_INT_SHT30_Routine+0x4c>)
 800aef2:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800aef6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800af18 <FUN_I2C_INT_SHT30_Routine+0x50>
 800aefa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aefe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af02:	ee17 3a90 	vmov	r3, s15
 800af06:	b29b      	uxth	r3, r3
 800af08:	b21a      	sxth	r2, r3
 800af0a:	4b04      	ldr	r3, [pc, #16]	@ (800af1c <FUN_I2C_INT_SHT30_Routine+0x54>)
 800af0c:	829a      	strh	r2, [r3, #20]
}
 800af0e:	bf00      	nop
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	200002ec 	.word	0x200002ec
 800af18:	42c80000 	.word	0x42c80000
 800af1c:	200004f0 	.word	0x200004f0

0800af20 <FUN_I2C_EXT_SHT30_Routine>:
void FUN_I2C_EXT_SHT30_Routine(void){	// 250ms 마다 호출
 800af20:	b580      	push	{r7, lr}
 800af22:	af00      	add	r7, sp, #0
	FUN_SHT30_Routine(&Ext_SHT30);
 800af24:	486f      	ldr	r0, [pc, #444]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800af26:	f7ff ff23 	bl	800ad70 <FUN_SHT30_Routine>
	ui.temp_100times = (uint16_t)(Ext_SHT30.temperature * 100);
 800af2a:	4b6e      	ldr	r3, [pc, #440]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800af2c:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 800af30:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 800b0e8 <FUN_I2C_EXT_SHT30_Routine+0x1c8>
 800af34:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af3c:	ee17 3a90 	vmov	r3, s15
 800af40:	b29b      	uxth	r3, r3
 800af42:	b21a      	sxth	r2, r3
 800af44:	4b69      	ldr	r3, [pc, #420]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800af46:	80da      	strh	r2, [r3, #6]
	ui.humi_100times = (uint16_t)(Ext_SHT30.humidity * 100);
 800af48:	4b66      	ldr	r3, [pc, #408]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800af4a:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800af4e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800b0e8 <FUN_I2C_EXT_SHT30_Routine+0x1c8>
 800af52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af5a:	ee17 3a90 	vmov	r3, s15
 800af5e:	b29b      	uxth	r3, r3
 800af60:	b21a      	sxth	r2, r3
 800af62:	4b62      	ldr	r3, [pc, #392]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800af64:	811a      	strh	r2, [r3, #8]
	if(ui.temp_alarm_enable){		// ui.temp_alarm_enable이 활성화 되어 있으면
 800af66:	4b61      	ldr	r3, [pc, #388]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800af68:	7d9b      	ldrb	r3, [r3, #22]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f000 80b2 	beq.w	800b0d4 <FUN_I2C_EXT_SHT30_Routine+0x1b4>
		if(ui.temp_warring_maintain_bit == 1 && ui.temp_warring_bit != 1){  // ui.temp_warring_maintain_bit은 EEPROM.RxBuff[12] != 0 일때 1이 됨
 800af70:	4b5e      	ldr	r3, [pc, #376]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800af72:	7e5b      	ldrb	r3, [r3, #25]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d123      	bne.n	800afc0 <FUN_I2C_EXT_SHT30_Routine+0xa0>
 800af78:	4b5c      	ldr	r3, [pc, #368]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800af7a:	7ddb      	ldrb	r3, [r3, #23]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d01f      	beq.n	800afc0 <FUN_I2C_EXT_SHT30_Routine+0xa0>
																			// ui.temp_warring_maintain_bit = Data_Register[9] (void FUN_Modbus_Write_save(void)) 함수에서
			if(Ext_SHT30.temperature > ui.temp_warring){ // 설정된 온도 임계치보다 센서값이 높으면
 800af80:	4b58      	ldr	r3, [pc, #352]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800af82:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 800af86:	4b59      	ldr	r3, [pc, #356]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800af88:	edd3 7a07 	vldr	s15, [r3, #28]
 800af8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af94:	dd44      	ble.n	800b020 <FUN_I2C_EXT_SHT30_Routine+0x100>
				Ext_SHT30.warring_cnt ++;				 // warring_cnt 증가
 800af96:	4b53      	ldr	r3, [pc, #332]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800af98:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 800af9c:	3301      	adds	r3, #1
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	4b50      	ldr	r3, [pc, #320]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800afa2:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
				if(Ext_SHT30.warring_cnt >= 5){			 // warring_cnt 5 이상이 되면
 800afa6:	4b4f      	ldr	r3, [pc, #316]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800afa8:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 800afac:	2b04      	cmp	r3, #4
 800afae:	d937      	bls.n	800b020 <FUN_I2C_EXT_SHT30_Routine+0x100>
					ui.temp_warring_bit = 1;			 // warring_bit 1로
 800afb0:	4b4e      	ldr	r3, [pc, #312]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800afb2:	2201      	movs	r2, #1
 800afb4:	75da      	strb	r2, [r3, #23]
					Ext_SHT30.warring_cnt = 0;
 800afb6:	4b4b      	ldr	r3, [pc, #300]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
			if(Ext_SHT30.temperature > ui.temp_warring){ // 설정된 온도 임계치보다 센서값이 높으면
 800afbe:	e02f      	b.n	800b020 <FUN_I2C_EXT_SHT30_Routine+0x100>
				}
			}
		}
		else if(ui.temp_warring_maintain_bit == 0){
 800afc0:	4b4a      	ldr	r3, [pc, #296]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800afc2:	7e5b      	ldrb	r3, [r3, #25]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d12c      	bne.n	800b022 <FUN_I2C_EXT_SHT30_Routine+0x102>
			if(Ext_SHT30.temperature > ui.temp_warring){
 800afc8:	4b46      	ldr	r3, [pc, #280]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800afca:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 800afce:	4b47      	ldr	r3, [pc, #284]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800afd0:	edd3 7a07 	vldr	s15, [r3, #28]
 800afd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800afd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afdc:	dd14      	ble.n	800b008 <FUN_I2C_EXT_SHT30_Routine+0xe8>
				Ext_SHT30.warring_cnt ++;
 800afde:	4b41      	ldr	r3, [pc, #260]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800afe0:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 800afe4:	3301      	adds	r3, #1
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	4b3e      	ldr	r3, [pc, #248]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800afea:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
				if(Ext_SHT30.warring_cnt >= 5){
 800afee:	4b3d      	ldr	r3, [pc, #244]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800aff0:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	d914      	bls.n	800b022 <FUN_I2C_EXT_SHT30_Routine+0x102>
					ui.temp_warring_bit = 1;
 800aff8:	4b3c      	ldr	r3, [pc, #240]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800affa:	2201      	movs	r2, #1
 800affc:	75da      	strb	r2, [r3, #23]
					Ext_SHT30.warring_cnt = 0;
 800affe:	4b39      	ldr	r3, [pc, #228]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b000:	2200      	movs	r2, #0
 800b002:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
 800b006:	e00c      	b.n	800b022 <FUN_I2C_EXT_SHT30_Routine+0x102>
				}
			}
			else if(ui.temp_warring_bit == 1){
 800b008:	4b38      	ldr	r3, [pc, #224]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800b00a:	7ddb      	ldrb	r3, [r3, #23]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d108      	bne.n	800b022 <FUN_I2C_EXT_SHT30_Routine+0x102>
				ui.temp_warring_bit = 0;
 800b010:	4b36      	ldr	r3, [pc, #216]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800b012:	2200      	movs	r2, #0
 800b014:	75da      	strb	r2, [r3, #23]
				Ext_SHT30.warring_cnt = 0;
 800b016:	4b33      	ldr	r3, [pc, #204]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
 800b01e:	e000      	b.n	800b022 <FUN_I2C_EXT_SHT30_Routine+0x102>
			if(Ext_SHT30.temperature > ui.temp_warring){ // 설정된 온도 임계치보다 센서값이 높으면
 800b020:	bf00      	nop
			}
		}
		if(ui.temp_alarm_maintain_bit == 1 && ui.temp_alarm_bit != 1){
 800b022:	4b32      	ldr	r3, [pc, #200]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800b024:	7e9b      	ldrb	r3, [r3, #26]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d123      	bne.n	800b072 <FUN_I2C_EXT_SHT30_Routine+0x152>
 800b02a:	4b30      	ldr	r3, [pc, #192]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800b02c:	7e1b      	ldrb	r3, [r3, #24]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d01f      	beq.n	800b072 <FUN_I2C_EXT_SHT30_Routine+0x152>
			if(Ext_SHT30.temperature > ui.temp_alarm){
 800b032:	4b2c      	ldr	r3, [pc, #176]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b034:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 800b038:	4b2c      	ldr	r3, [pc, #176]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800b03a:	edd3 7a08 	vldr	s15, [r3, #32]
 800b03e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b046:	dd44      	ble.n	800b0d2 <FUN_I2C_EXT_SHT30_Routine+0x1b2>
				Ext_SHT30.alarm_cnt ++;
 800b048:	4b26      	ldr	r3, [pc, #152]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b04a:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 800b04e:	3301      	adds	r3, #1
 800b050:	b2da      	uxtb	r2, r3
 800b052:	4b24      	ldr	r3, [pc, #144]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b054:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
				if(Ext_SHT30.alarm_cnt >= 5){
 800b058:	4b22      	ldr	r3, [pc, #136]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b05a:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 800b05e:	2b04      	cmp	r3, #4
 800b060:	d937      	bls.n	800b0d2 <FUN_I2C_EXT_SHT30_Routine+0x1b2>
					ui.temp_alarm_bit = 1;
 800b062:	4b22      	ldr	r3, [pc, #136]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800b064:	2201      	movs	r2, #1
 800b066:	761a      	strb	r2, [r3, #24]
					Ext_SHT30.alarm_cnt = 0;
 800b068:	4b1e      	ldr	r3, [pc, #120]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
			if(Ext_SHT30.temperature > ui.temp_alarm){
 800b070:	e02f      	b.n	800b0d2 <FUN_I2C_EXT_SHT30_Routine+0x1b2>
				}
			}
		}
		else if(ui.temp_warring_maintain_bit == 0){
 800b072:	4b1e      	ldr	r3, [pc, #120]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800b074:	7e5b      	ldrb	r3, [r3, #25]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d12c      	bne.n	800b0d4 <FUN_I2C_EXT_SHT30_Routine+0x1b4>
			if(Ext_SHT30.temperature > ui.temp_alarm){
 800b07a:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b07c:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 800b080:	4b1a      	ldr	r3, [pc, #104]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800b082:	edd3 7a08 	vldr	s15, [r3, #32]
 800b086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b08e:	dd14      	ble.n	800b0ba <FUN_I2C_EXT_SHT30_Routine+0x19a>
				Ext_SHT30.alarm_cnt ++;
 800b090:	4b14      	ldr	r3, [pc, #80]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b092:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 800b096:	3301      	adds	r3, #1
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	4b12      	ldr	r3, [pc, #72]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b09c:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
				if(Ext_SHT30.alarm_cnt >= 5){
 800b0a0:	4b10      	ldr	r3, [pc, #64]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b0a2:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 800b0a6:	2b04      	cmp	r3, #4
 800b0a8:	d914      	bls.n	800b0d4 <FUN_I2C_EXT_SHT30_Routine+0x1b4>
					ui.temp_alarm_bit = 1;
 800b0aa:	4b10      	ldr	r3, [pc, #64]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	761a      	strb	r2, [r3, #24]
					Ext_SHT30.alarm_cnt = 0;
 800b0b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
 800b0b8:	e00c      	b.n	800b0d4 <FUN_I2C_EXT_SHT30_Routine+0x1b4>
				}
			}
			else if(ui.temp_alarm_bit == 1){
 800b0ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800b0bc:	7e1b      	ldrb	r3, [r3, #24]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d108      	bne.n	800b0d4 <FUN_I2C_EXT_SHT30_Routine+0x1b4>
				ui.temp_alarm_bit = 0;
 800b0c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b0ec <FUN_I2C_EXT_SHT30_Routine+0x1cc>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	761a      	strb	r2, [r3, #24]
				Ext_SHT30.alarm_cnt = 0;
 800b0c8:	4b06      	ldr	r3, [pc, #24]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
 800b0d0:	e000      	b.n	800b0d4 <FUN_I2C_EXT_SHT30_Routine+0x1b4>
			if(Ext_SHT30.temperature > ui.temp_alarm){
 800b0d2:	bf00      	nop
			}
		}
	}
	Error.SHT30_Error = Ext_SHT30.i2c_error_flag;
 800b0d4:	4b03      	ldr	r3, [pc, #12]	@ (800b0e4 <FUN_I2C_EXT_SHT30_Routine+0x1c4>)
 800b0d6:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800b0da:	461a      	mov	r2, r3
 800b0dc:	4b04      	ldr	r3, [pc, #16]	@ (800b0f0 <FUN_I2C_EXT_SHT30_Routine+0x1d0>)
 800b0de:	80da      	strh	r2, [r3, #6]
}
 800b0e0:	bf00      	nop
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	200003cc 	.word	0x200003cc
 800b0e8:	42c80000 	.word	0x42c80000
 800b0ec:	200004f0 	.word	0x200004f0
 800b0f0:	200006d4 	.word	0x200006d4

0800b0f4 <sfun_I2C_Measurement_results>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void sfun_I2C_Measurement_results(_SHT30_Dev *sht30)												// 250ms * 4 = 1초마다
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af02      	add	r7, sp, #8
 800b0fa:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive(sht30->I2C_Handle, sht30->I2C_Addr, sht30->i2c_read_buff, 6, 100);  		// 센서로부터 데이터 수신
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6818      	ldr	r0, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	791b      	ldrb	r3, [r3, #4]
 800b104:	4619      	mov	r1, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	1dda      	adds	r2, r3, #7
 800b10a:	2364      	movs	r3, #100	@ 0x64
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	2306      	movs	r3, #6
 800b110:	f006 fec2 	bl	8011e98 <HAL_I2C_Master_Receive>

	sht30->i2c_write_buff[0] = (uint8_t)(CMD_SINGLE_EN_HIGH >> 8);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	222c      	movs	r2, #44	@ 0x2c
 800b118:	715a      	strb	r2, [r3, #5]
	sht30->i2c_write_buff[1] = (uint8_t)(CMD_SINGLE_EN_HIGH & 0xFF);   						   		// buf에 저장
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2206      	movs	r2, #6
 800b11e:	719a      	strb	r2, [r3, #6]
	HAL_I2C_Master_Transmit(sht30->I2C_Handle, sht30->I2C_Addr, sht30->i2c_write_buff, 2, 100);		// 센서로 다시 측정하라는 명령인듯. 100은 타임아웃
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6818      	ldr	r0, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	791b      	ldrb	r3, [r3, #4]
 800b128:	4619      	mov	r1, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	1d5a      	adds	r2, r3, #5
 800b12e:	2364      	movs	r3, #100	@ 0x64
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	2302      	movs	r3, #2
 800b134:	f006 fdbc 	bl	8011cb0 <HAL_I2C_Master_Transmit>
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <sfun_I2C_Measurement_conversion>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void sfun_I2C_Measurement_conversion(_SHT30_Dev *sht30)  // 250ms * 4 = 1초마다
{
 800b140:	b5b0      	push	{r4, r5, r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
// 1. 온도값 CRC 계산이 맞으면
	if(sht30->i2c_read_buff[2] == sfun_sht30_crc8(&sht30->i2c_read_buff[0],2))   // sfun_sht30_crc8() : 센서에서 온도 데이터가 손상됐는지, 정확한지 확인 하는거인듯
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	7a5c      	ldrb	r4, [r3, #9]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3307      	adds	r3, #7
 800b150:	2102      	movs	r1, #2
 800b152:	4618      	mov	r0, r3
 800b154:	f000 f9cd 	bl	800b4f2 <sfun_sht30_crc8>
 800b158:	4603      	mov	r3, r0
 800b15a:	429c      	cmp	r4, r3
 800b15c:	d14c      	bne.n	800b1f8 <sfun_I2C_Measurement_conversion+0xb8>
	{
	// 1-1. 온도값 데이터 환산
		int temp = (sht30->i2c_read_buff[0] * 256 + sht30->i2c_read_buff[1]);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	79db      	ldrb	r3, [r3, #7]
 800b162:	021b      	lsls	r3, r3, #8
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	7a12      	ldrb	r2, [r2, #8]
 800b168:	4413      	add	r3, r2
 800b16a:	60fb      	str	r3, [r7, #12]
		sht30->temperature = -45 + (175 * temp / 65535.0) + temp_correction;  // 온도값 정제하는거인듯
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	22af      	movs	r2, #175	@ 0xaf
 800b170:	fb02 f303 	mul.w	r3, r2, r3
 800b174:	4618      	mov	r0, r3
 800b176:	f7fd f9a1 	bl	80084bc <__aeabi_i2d>
 800b17a:	a37b      	add	r3, pc, #492	@ (adr r3, 800b368 <sfun_I2C_Measurement_conversion+0x228>)
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	f7fd fb30 	bl	80087e4 <__aeabi_ddiv>
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	4610      	mov	r0, r2
 800b18a:	4619      	mov	r1, r3
 800b18c:	f04f 0200 	mov.w	r2, #0
 800b190:	4b77      	ldr	r3, [pc, #476]	@ (800b370 <sfun_I2C_Measurement_conversion+0x230>)
 800b192:	f7fd f845 	bl	8008220 <__aeabi_dsub>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	4614      	mov	r4, r2
 800b19c:	461d      	mov	r5, r3
 800b19e:	4b75      	ldr	r3, [pc, #468]	@ (800b374 <sfun_I2C_Measurement_conversion+0x234>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fd f99c 	bl	80084e0 <__aeabi_f2d>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	f7fd f838 	bl	8008224 <__adddf3>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4610      	mov	r0, r2
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	f7fd fcca 	bl	8008b54 <__aeabi_d2f>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
		sht30->temp_hex = (uint16_t)(sht30->temperature * 10);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 800b1ce:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800b1d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b1d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1da:	ee17 3a90 	vmov	r3, s15
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
		sht30->crc_error_flag = 0;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		sht30->temp_crc_error_cnt = 0;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800b1f6:	e007      	b.n	800b208 <sfun_I2C_Measurement_conversion+0xc8>
	} else
	{
		// 온도값 CRC 에러 카운터 증가 : 센서 데이터 에러
		sht30->temp_crc_error_cnt++;  											// sfun_sht30_crc8() 확인 해보니 무결하지 않다! -> 에러 카운트 증가
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 800b1fe:	3301      	adds	r3, #1
 800b200:	b2da      	uxtb	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

	}

// 2. 습도값 CRC 계산이 맞으면
	if(sht30->i2c_read_buff[5] == sfun_sht30_crc8(&sht30->i2c_read_buff[3],2)) {
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	7b1c      	ldrb	r4, [r3, #12]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	330a      	adds	r3, #10
 800b210:	2102      	movs	r1, #2
 800b212:	4618      	mov	r0, r3
 800b214:	f000 f96d 	bl	800b4f2 <sfun_sht30_crc8>
 800b218:	4603      	mov	r3, r0
 800b21a:	429c      	cmp	r4, r3
 800b21c:	d158      	bne.n	800b2d0 <sfun_I2C_Measurement_conversion+0x190>
	// 2-1. 습도값 데이터 환산
		sht30->humidity = (100 * (sht30->i2c_read_buff[3] * 256 + sht30->i2c_read_buff[4]) / 65535.0) + 5 + humi_correction;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	7a9b      	ldrb	r3, [r3, #10]
 800b222:	021b      	lsls	r3, r3, #8
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	7ad2      	ldrb	r2, [r2, #11]
 800b228:	4413      	add	r3, r2
 800b22a:	2264      	movs	r2, #100	@ 0x64
 800b22c:	fb02 f303 	mul.w	r3, r2, r3
 800b230:	4618      	mov	r0, r3
 800b232:	f7fd f943 	bl	80084bc <__aeabi_i2d>
 800b236:	a34c      	add	r3, pc, #304	@ (adr r3, 800b368 <sfun_I2C_Measurement_conversion+0x228>)
 800b238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23c:	f7fd fad2 	bl	80087e4 <__aeabi_ddiv>
 800b240:	4602      	mov	r2, r0
 800b242:	460b      	mov	r3, r1
 800b244:	4610      	mov	r0, r2
 800b246:	4619      	mov	r1, r3
 800b248:	f04f 0200 	mov.w	r2, #0
 800b24c:	4b4a      	ldr	r3, [pc, #296]	@ (800b378 <sfun_I2C_Measurement_conversion+0x238>)
 800b24e:	f7fc ffe9 	bl	8008224 <__adddf3>
 800b252:	4602      	mov	r2, r0
 800b254:	460b      	mov	r3, r1
 800b256:	4614      	mov	r4, r2
 800b258:	461d      	mov	r5, r3
 800b25a:	4b48      	ldr	r3, [pc, #288]	@ (800b37c <sfun_I2C_Measurement_conversion+0x23c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fd f93e 	bl	80084e0 <__aeabi_f2d>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	4620      	mov	r0, r4
 800b26a:	4629      	mov	r1, r5
 800b26c:	f7fc ffda 	bl	8008224 <__adddf3>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	4610      	mov	r0, r2
 800b276:	4619      	mov	r1, r3
 800b278:	f7fd fc6c 	bl	8008b54 <__aeabi_d2f>
 800b27c:	4602      	mov	r2, r0
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
		// 습도 보정 +5% 210826
		if(sht30->humidity >= 100)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800b28a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800b380 <sfun_I2C_Measurement_conversion+0x240>
 800b28e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b296:	db03      	blt.n	800b2a0 <sfun_I2C_Measurement_conversion+0x160>
		{
			sht30->humidity = 100;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a3a      	ldr	r2, [pc, #232]	@ (800b384 <sfun_I2C_Measurement_conversion+0x244>)
 800b29c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
		}

		sht30->humi_hex = (uint16_t)(sht30->humidity * 10);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800b2a6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800b2aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b2ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2b2:	ee17 3a90 	vmov	r3, s15
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
		sht30->crc_error_flag = 0;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		sht30->humi_crc_error_cnt = 0;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800b2ce:	e007      	b.n	800b2e0 <sfun_I2C_Measurement_conversion+0x1a0>
	} else {
		// 습도값 CRC 에러 카운터 증가 : 센서 데이터 에러
		sht30->humi_crc_error_cnt++;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	b2da      	uxtb	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
	}

	if((sht30->temp_crc_error_cnt >= 10)||
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 800b2e6:	2b09      	cmp	r3, #9
 800b2e8:	d804      	bhi.n	800b2f4 <sfun_I2C_Measurement_conversion+0x1b4>
	  (sht30->humi_crc_error_cnt >= 10)) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
	if((sht30->temp_crc_error_cnt >= 10)||
 800b2f0:	2b09      	cmp	r3, #9
 800b2f2:	d904      	bls.n	800b2fe <sfun_I2C_Measurement_conversion+0x1be>
		sht30->crc_error_flag = 1;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
 800b2fc:	e003      	b.n	800b306 <sfun_I2C_Measurement_conversion+0x1c6>
	}
	else {
		sht30->crc_error_flag = 0;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
	}
	Temp_Check_Test = ceil(sht30->temperature);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fd f8e7 	bl	80084e0 <__aeabi_f2d>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	ec43 2b10 	vmov	d0, r2, r3
 800b31a:	f00c f8dd 	bl	80174d8 <ceil>
 800b31e:	ec53 2b10 	vmov	r2, r3, d0
 800b322:	4610      	mov	r0, r2
 800b324:	4619      	mov	r1, r3
 800b326:	f7fd fbf5 	bl	8008b14 <__aeabi_d2uiz>
 800b32a:	4603      	mov	r3, r0
 800b32c:	4a16      	ldr	r2, [pc, #88]	@ (800b388 <sfun_I2C_Measurement_conversion+0x248>)
 800b32e:	6013      	str	r3, [r2, #0]
	Humi_Check_Test = ceil(sht30->humidity);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b336:	4618      	mov	r0, r3
 800b338:	f7fd f8d2 	bl	80084e0 <__aeabi_f2d>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	ec43 2b10 	vmov	d0, r2, r3
 800b344:	f00c f8c8 	bl	80174d8 <ceil>
 800b348:	ec53 2b10 	vmov	r2, r3, d0
 800b34c:	4610      	mov	r0, r2
 800b34e:	4619      	mov	r1, r3
 800b350:	f7fd fbe0 	bl	8008b14 <__aeabi_d2uiz>
 800b354:	4603      	mov	r3, r0
 800b356:	4a0d      	ldr	r2, [pc, #52]	@ (800b38c <sfun_I2C_Measurement_conversion+0x24c>)
 800b358:	6013      	str	r3, [r2, #0]
	//printf("Temp %d, Humi %d\n",Temp_Check_Test, Humi_Check_Test);
}
 800b35a:	bf00      	nop
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bdb0      	pop	{r4, r5, r7, pc}
 800b362:	bf00      	nop
 800b364:	f3af 8000 	nop.w
 800b368:	00000000 	.word	0x00000000
 800b36c:	40efffe0 	.word	0x40efffe0
 800b370:	40468000 	.word	0x40468000
 800b374:	20000014 	.word	0x20000014
 800b378:	40140000 	.word	0x40140000
 800b37c:	20000018 	.word	0x20000018
 800b380:	42c80000 	.word	0x42c80000
 800b384:	42c80000 	.word	0x42c80000
 800b388:	200002e4 	.word	0x200002e4
 800b38c:	200002e8 	.word	0x200002e8

0800b390 <sfun_I2C_Acc_Data>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void sfun_I2C_Acc_Data(_SHT30_Dev *sht30)          // sht30 구조체 변수에 넣은 값 sht30->temp_acc,humi_acc 배열에 차곡차곡 저장 250ms * 4 = 1초마다 인덱스 바뀌면서 저장될듯
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
	sht30->temp_acc[sht30->temp_acc_cnt] = (sht30->temperature * 1000);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 800b39e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800b424 <sfun_I2C_Acc_Data+0x94>
 800b3a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	7c5b      	ldrb	r3, [r3, #17]
 800b3aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3ae:	ee17 1a90 	vmov	r1, s15
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4413      	add	r3, r2
 800b3ba:	6059      	str	r1, [r3, #4]
	sht30->humi_acc[sht30->humi_acc_cnt] = (sht30->humidity * 1000);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 800b3c2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b424 <sfun_I2C_Acc_Data+0x94>
 800b3c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	7c9b      	ldrb	r3, [r3, #18]
 800b3ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3d2:	ee17 1a90 	vmov	r1, s15
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	3318      	adds	r3, #24
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	6059      	str	r1, [r3, #4]

	if(sht30->temp_acc_cnt == 19) {
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	7c5b      	ldrb	r3, [r3, #17]
 800b3e4:	2b13      	cmp	r3, #19
 800b3e6:	d103      	bne.n	800b3f0 <sfun_I2C_Acc_Data+0x60>
		sht30->temp_acc_cnt = 0;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	745a      	strb	r2, [r3, #17]
 800b3ee:	e005      	b.n	800b3fc <sfun_I2C_Acc_Data+0x6c>
	} else {
		++sht30->temp_acc_cnt;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	7c5b      	ldrb	r3, [r3, #17]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	745a      	strb	r2, [r3, #17]
	}

	if(sht30->humi_acc_cnt == 19) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	7c9b      	ldrb	r3, [r3, #18]
 800b400:	2b13      	cmp	r3, #19
 800b402:	d103      	bne.n	800b40c <sfun_I2C_Acc_Data+0x7c>
			sht30->humi_acc_cnt = 0;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	749a      	strb	r2, [r3, #18]
	} else {
			++sht30->humi_acc_cnt;
	}
}
 800b40a:	e005      	b.n	800b418 <sfun_I2C_Acc_Data+0x88>
			++sht30->humi_acc_cnt;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7c9b      	ldrb	r3, [r3, #18]
 800b410:	3301      	adds	r3, #1
 800b412:	b2da      	uxtb	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	749a      	strb	r2, [r3, #18]
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	447a0000 	.word	0x447a0000

0800b428 <sfun_I2C_Measurement_Error_Check>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void sfun_I2C_Measurement_Error_Check(_SHT30_Dev *sht30)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	6078      	str	r0, [r7, #4]
	uint8_t u1t_t_chk = 0;
 800b430:	2300      	movs	r3, #0
 800b432:	73fb      	strb	r3, [r7, #15]
	uint8_t u1t_h_chk = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i = 0; i < 19; i++) {
 800b438:	2300      	movs	r3, #0
 800b43a:	737b      	strb	r3, [r7, #13]
 800b43c:	e026      	b.n	800b48c <sfun_I2C_Measurement_Error_Check+0x64>
		if(sht30->temp_acc[i] == sht30->temp_acc[i+1]) {
 800b43e:	7b7b      	ldrb	r3, [r7, #13]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	3304      	adds	r3, #4
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	685a      	ldr	r2, [r3, #4]
 800b44a:	7b7b      	ldrb	r3, [r7, #13]
 800b44c:	3301      	adds	r3, #1
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	3304      	adds	r3, #4
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	440b      	add	r3, r1
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d11b      	bne.n	800b494 <sfun_I2C_Measurement_Error_Check+0x6c>
			u1t_t_chk++;
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	3301      	adds	r3, #1
 800b460:	73fb      	strb	r3, [r7, #15]
		} else {break;}
		if(sht30->humi_acc[i] == sht30->humi_acc[i+1]) {
 800b462:	7b7b      	ldrb	r3, [r7, #13]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	3318      	adds	r3, #24
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	685a      	ldr	r2, [r3, #4]
 800b46e:	7b7b      	ldrb	r3, [r7, #13]
 800b470:	3301      	adds	r3, #1
 800b472:	6879      	ldr	r1, [r7, #4]
 800b474:	3318      	adds	r3, #24
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	440b      	add	r3, r1
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d10b      	bne.n	800b498 <sfun_I2C_Measurement_Error_Check+0x70>
			u1t_h_chk++;
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	3301      	adds	r3, #1
 800b484:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i < 19; i++) {
 800b486:	7b7b      	ldrb	r3, [r7, #13]
 800b488:	3301      	adds	r3, #1
 800b48a:	737b      	strb	r3, [r7, #13]
 800b48c:	7b7b      	ldrb	r3, [r7, #13]
 800b48e:	2b12      	cmp	r3, #18
 800b490:	d9d5      	bls.n	800b43e <sfun_I2C_Measurement_Error_Check+0x16>
 800b492:	e002      	b.n	800b49a <sfun_I2C_Measurement_Error_Check+0x72>
		} else {break;}
 800b494:	bf00      	nop
 800b496:	e000      	b.n	800b49a <sfun_I2C_Measurement_Error_Check+0x72>
		} else {break;}
 800b498:	bf00      	nop
	}

	if((u1t_t_chk == 19) || (u1t_h_chk == 19)) {
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
 800b49c:	2b13      	cmp	r3, #19
 800b49e:	d002      	beq.n	800b4a6 <sfun_I2C_Measurement_Error_Check+0x7e>
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	2b13      	cmp	r3, #19
 800b4a4:	d121      	bne.n	800b4ea <sfun_I2C_Measurement_Error_Check+0xc2>
		// I2C RESET
		sht30->i2c_write_buff[0] = (uint8_t)(CMD_SOFT_RESET >> 8);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2230      	movs	r2, #48	@ 0x30
 800b4aa:	715a      	strb	r2, [r3, #5]
		sht30->i2c_write_buff[1] = (uint8_t)(CMD_SOFT_RESET & 0xFF);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	22a2      	movs	r2, #162	@ 0xa2
 800b4b0:	719a      	strb	r2, [r3, #6]

		HAL_I2C_Master_Transmit(sht30->I2C_Handle, sht30->I2C_Addr, sht30->i2c_write_buff, 2, 100);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6818      	ldr	r0, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	791b      	ldrb	r3, [r3, #4]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	1d5a      	adds	r2, r3, #5
 800b4c0:	2364      	movs	r3, #100	@ 0x64
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	f006 fbf3 	bl	8011cb0 <HAL_I2C_Master_Transmit>
		while(HAL_I2C_STATE_READY != HAL_I2C_GetState(sht30->I2C_Handle));
 800b4ca:	bf00      	nop
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f006 fdd7 	bl	8012084 <HAL_I2C_GetState>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b20      	cmp	r3, #32
 800b4da:	d1f7      	bne.n	800b4cc <sfun_I2C_Measurement_Error_Check+0xa4>

		sht30->i2c_total_reset++;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b4e2:	1c5a      	adds	r2, r3, #1
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	}
}
 800b4ea:	bf00      	nop
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <sfun_sht30_crc8>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
uint8_t sfun_sht30_crc8(const uint8_t *data, int len)  // 받은 온도 데이터의 무결성 확인 이라고만 일단 알아둬보자
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b085      	sub	sp, #20
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xff;
 800b4fc:	23ff      	movs	r3, #255	@ 0xff
 800b4fe:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 800b500:	2300      	movs	r3, #0
 800b502:	73bb      	strb	r3, [r7, #14]
 800b504:	e021      	b.n	800b54a <sfun_sht30_crc8+0x58>
        crc ^= data[i];
 800b506:	7bbb      	ldrb	r3, [r7, #14]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	4413      	add	r3, r2
 800b50c:	781a      	ldrb	r2, [r3, #0]
 800b50e:	7bfb      	ldrb	r3, [r7, #15]
 800b510:	4053      	eors	r3, r2
 800b512:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 800b514:	2300      	movs	r3, #0
 800b516:	737b      	strb	r3, [r7, #13]
 800b518:	e011      	b.n	800b53e <sfun_sht30_crc8+0x4c>
            if ((crc & 0x80) != 0)
 800b51a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	da07      	bge.n	800b532 <sfun_sht30_crc8+0x40>
                crc = (uint8_t)((crc << 1) ^ 0x31);
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	b25b      	sxtb	r3, r3
 800b528:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 800b52c:	b25b      	sxtb	r3, r3
 800b52e:	73fb      	strb	r3, [r7, #15]
 800b530:	e002      	b.n	800b538 <sfun_sht30_crc8+0x46>
            else
                crc <<= 1;
 800b532:	7bfb      	ldrb	r3, [r7, #15]
 800b534:	005b      	lsls	r3, r3, #1
 800b536:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 800b538:	7b7b      	ldrb	r3, [r7, #13]
 800b53a:	3301      	adds	r3, #1
 800b53c:	737b      	strb	r3, [r7, #13]
 800b53e:	7b7b      	ldrb	r3, [r7, #13]
 800b540:	2b07      	cmp	r3, #7
 800b542:	d9ea      	bls.n	800b51a <sfun_sht30_crc8+0x28>
    for (uint8_t i = 0; i < len; i++) {
 800b544:	7bbb      	ldrb	r3, [r7, #14]
 800b546:	3301      	adds	r3, #1
 800b548:	73bb      	strb	r3, [r7, #14]
 800b54a:	7bbb      	ldrb	r3, [r7, #14]
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	429a      	cmp	r2, r3
 800b550:	dcd9      	bgt.n	800b506 <sfun_sht30_crc8+0x14>
        }
    }
    return crc;
 800b552:	7bfb      	ldrb	r3, [r7, #15]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <CRC16>:
uint32_t* TESTS[6];
/* Private function prototypes -----------------------------------------------*/


uint16_t CRC16(uint8_t* buf, size_t len) // 같은 데이터가 보내졌는지 확인하는 방법이라고 gpt가 그랬음 / 데이터 무결성 검증
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  uint16_t crc = 0xFFFF;
 800b56a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b56e:	82fb      	strh	r3, [r7, #22]

  for (int pos = 0; pos < len; pos++)
 800b570:	2300      	movs	r3, #0
 800b572:	613b      	str	r3, [r7, #16]
 800b574:	e026      	b.n	800b5c4 <CRC16+0x64>
  {
    crc ^= (uint16_t)buf[pos];          // XOR byte into least sig. byte of crc
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	4413      	add	r3, r2
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	461a      	mov	r2, r3
 800b580:	8afb      	ldrh	r3, [r7, #22]
 800b582:	4053      	eors	r3, r2
 800b584:	82fb      	strh	r3, [r7, #22]

    for (int i = 8; i != 0; i--) {    // Loop over each bit
 800b586:	2308      	movs	r3, #8
 800b588:	60fb      	str	r3, [r7, #12]
 800b58a:	e015      	b.n	800b5b8 <CRC16+0x58>
      if ((crc & 0x0001) != 0) {      // If the LSB is set
 800b58c:	8afb      	ldrh	r3, [r7, #22]
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <CRC16+0x4c>
        crc >>= 1;                    // Shift right and XOR 0xA001
 800b596:	8afb      	ldrh	r3, [r7, #22]
 800b598:	085b      	lsrs	r3, r3, #1
 800b59a:	82fb      	strh	r3, [r7, #22]
        crc ^= 0xA001;
 800b59c:	8afb      	ldrh	r3, [r7, #22]
 800b59e:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800b5a2:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 800b5a6:	43db      	mvns	r3, r3
 800b5a8:	82fb      	strh	r3, [r7, #22]
 800b5aa:	e002      	b.n	800b5b2 <CRC16+0x52>
      }
      else                            // Else LSB is not set
        crc >>= 1;                    // Just shift right
 800b5ac:	8afb      	ldrh	r3, [r7, #22]
 800b5ae:	085b      	lsrs	r3, r3, #1
 800b5b0:	82fb      	strh	r3, [r7, #22]
    for (int i = 8; i != 0; i--) {    // Loop over each bit
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	60fb      	str	r3, [r7, #12]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1e6      	bne.n	800b58c <CRC16+0x2c>
  for (int pos = 0; pos < len; pos++)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	613b      	str	r3, [r7, #16]
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	683a      	ldr	r2, [r7, #0]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d8d4      	bhi.n	800b576 <CRC16+0x16>
    }
  }
  // Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
  return crc;
 800b5cc:	8afb      	ldrh	r3, [r7, #22]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	371c      	adds	r7, #28
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
	...

0800b5dc <FUN_Modbus_init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Modbus_init(void)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
	Data_Register_flag = 1;
 800b5e2:	4b12      	ldr	r3, [pc, #72]	@ (800b62c <FUN_Modbus_init+0x50>)
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	701a      	strb	r2, [r3, #0]
	uint8_t Len;
	Len=0x06;
 800b5e8:	2306      	movs	r3, #6
 800b5ea:	71fb      	strb	r3, [r7, #7]

	Test[0]= 0xFF;
 800b5ec:	4b10      	ldr	r3, [pc, #64]	@ (800b630 <FUN_Modbus_init+0x54>)
 800b5ee:	22ff      	movs	r2, #255	@ 0xff
 800b5f0:	701a      	strb	r2, [r3, #0]
	Test[1]= 0x03;
 800b5f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b630 <FUN_Modbus_init+0x54>)
 800b5f4:	2203      	movs	r2, #3
 800b5f6:	705a      	strb	r2, [r3, #1]
	Test[2]= 0x00;
 800b5f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b630 <FUN_Modbus_init+0x54>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	709a      	strb	r2, [r3, #2]
	Test[3]= 0x06;
 800b5fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b630 <FUN_Modbus_init+0x54>)
 800b600:	2206      	movs	r2, #6
 800b602:	70da      	strb	r2, [r3, #3]
	Test[4]= 0x00;
 800b604:	4b0a      	ldr	r3, [pc, #40]	@ (800b630 <FUN_Modbus_init+0x54>)
 800b606:	2200      	movs	r2, #0
 800b608:	711a      	strb	r2, [r3, #4]
	Test[5]= 0x01;
 800b60a:	4b09      	ldr	r3, [pc, #36]	@ (800b630 <FUN_Modbus_init+0x54>)
 800b60c:	2201      	movs	r2, #1
 800b60e:	715a      	strb	r2, [r3, #5]

	crc16 =CRC16((uint8_t*)&Test, Len);
 800b610:	79fb      	ldrb	r3, [r7, #7]
 800b612:	4619      	mov	r1, r3
 800b614:	4806      	ldr	r0, [pc, #24]	@ (800b630 <FUN_Modbus_init+0x54>)
 800b616:	f7ff ffa3 	bl	800b560 <CRC16>
 800b61a:	4603      	mov	r3, r0
 800b61c:	461a      	mov	r2, r3
 800b61e:	4b05      	ldr	r3, [pc, #20]	@ (800b634 <FUN_Modbus_init+0x58>)
 800b620:	801a      	strh	r2, [r3, #0]
}
 800b622:	bf00      	nop
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	200004d5 	.word	0x200004d5
 800b630:	200004e8 	.word	0x200004e8
 800b634:	2000001c 	.word	0x2000001c

0800b638 <FUN_Modbus_RxCallback_Flag>:
/****************************************************************************/
/*	Overview	:	Read Data												*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Modbus_RxCallback_Flag(void)
{
 800b638:	b480      	push	{r7}
 800b63a:	af00      	add	r7, sp, #0
	RS485Rx.ff_cTemp_warring_R = ((int16_t)(ui.temp_warring * 100));
 800b63c:	4b43      	ldr	r3, [pc, #268]	@ (800b74c <FUN_Modbus_RxCallback_Flag+0x114>)
 800b63e:	edd3 7a07 	vldr	s15, [r3, #28]
 800b642:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800b750 <FUN_Modbus_RxCallback_Flag+0x118>
 800b646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b64a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b64e:	ee17 3a90 	vmov	r3, s15
 800b652:	b21a      	sxth	r2, r3
 800b654:	4b3f      	ldr	r3, [pc, #252]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b656:	815a      	strh	r2, [r3, #10]
	RS485Rx.ff_cTemp_alarm_R = ((int16_t)(ui.temp_alarm * 100));
 800b658:	4b3c      	ldr	r3, [pc, #240]	@ (800b74c <FUN_Modbus_RxCallback_Flag+0x114>)
 800b65a:	edd3 7a08 	vldr	s15, [r3, #32]
 800b65e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800b750 <FUN_Modbus_RxCallback_Flag+0x118>
 800b662:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b66a:	ee17 3a90 	vmov	r3, s15
 800b66e:	b21a      	sxth	r2, r3
 800b670:	4b38      	ldr	r3, [pc, #224]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b672:	811a      	strh	r2, [r3, #8]
	RS485Rx.Warring_Deviation_R = ((uint16_t)(ui.Warring_Deviation * 100));
 800b674:	4b35      	ldr	r3, [pc, #212]	@ (800b74c <FUN_Modbus_RxCallback_Flag+0x114>)
 800b676:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800b67a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800b750 <FUN_Modbus_RxCallback_Flag+0x118>
 800b67e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b686:	ee17 3a90 	vmov	r3, s15
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	4b31      	ldr	r3, [pc, #196]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b68e:	865a      	strh	r2, [r3, #50]	@ 0x32
	RS485Rx.TEnable_bit_R = ui.temp_alarm_enable;
 800b690:	4b2e      	ldr	r3, [pc, #184]	@ (800b74c <FUN_Modbus_RxCallback_Flag+0x114>)
 800b692:	7d9a      	ldrb	r2, [r3, #22]
 800b694:	4b2f      	ldr	r3, [pc, #188]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b696:	775a      	strb	r2, [r3, #29]
	RS485Rx.Temp_Warring_Keep_R = ui.temp_warring_maintain_bit;
 800b698:	4b2c      	ldr	r3, [pc, #176]	@ (800b74c <FUN_Modbus_RxCallback_Flag+0x114>)
 800b69a:	7e5a      	ldrb	r2, [r3, #25]
 800b69c:	4b2d      	ldr	r3, [pc, #180]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b69e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	RS485Rx.Temp_Alram_keep_R = ui.temp_alarm_maintain_bit;
 800b6a2:	4b2a      	ldr	r3, [pc, #168]	@ (800b74c <FUN_Modbus_RxCallback_Flag+0x114>)
 800b6a4:	7e9a      	ldrb	r2, [r3, #26]
 800b6a6:	4b2b      	ldr	r3, [pc, #172]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b6a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

	Data_Register[0] = (uint8_t)(RS485Rx.ff_cTemp_warring_R >> 8);
 800b6ac:	4b29      	ldr	r3, [pc, #164]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b6ae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b6b2:	121b      	asrs	r3, r3, #8
 800b6b4:	b21b      	sxth	r3, r3
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	4b27      	ldr	r3, [pc, #156]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b6ba:	701a      	strb	r2, [r3, #0]
	Data_Register[1] = (uint8_t)(RS485Rx.ff_cTemp_warring_R  & 0xFF);
 800b6bc:	4b25      	ldr	r3, [pc, #148]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b6be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	4b24      	ldr	r3, [pc, #144]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b6c6:	705a      	strb	r2, [r3, #1]
	Data_Register[2] = (uint8_t)(RS485Rx.ff_cTemp_alarm_R >> 8);
 800b6c8:	4b22      	ldr	r3, [pc, #136]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b6ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b6ce:	121b      	asrs	r3, r3, #8
 800b6d0:	b21b      	sxth	r3, r3
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	4b20      	ldr	r3, [pc, #128]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b6d6:	709a      	strb	r2, [r3, #2]
	Data_Register[3] = (uint8_t)(RS485Rx.ff_cTemp_alarm_R  & 0xFF);
 800b6d8:	4b1e      	ldr	r3, [pc, #120]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b6da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b6e2:	70da      	strb	r2, [r3, #3]
	Data_Register[4] = (uint8_t)(RS485Rx.Warring_Deviation_R >> 8);
 800b6e4:	4b1b      	ldr	r3, [pc, #108]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b6e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b6e8:	0a1b      	lsrs	r3, r3, #8
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	b2da      	uxtb	r2, r3
 800b6ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b6f0:	711a      	strb	r2, [r3, #4]
	Data_Register[5] = (uint8_t)(RS485Rx.Warring_Deviation_R  & 0xFF);
 800b6f2:	4b18      	ldr	r3, [pc, #96]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b6f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	4b17      	ldr	r3, [pc, #92]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b6fa:	715a      	strb	r2, [r3, #5]
	Data_Register[6] = (uint8_t)(RS485Rx.TEnable_bit_R >> 8);
 800b6fc:	4b15      	ldr	r3, [pc, #84]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b6fe:	7f5b      	ldrb	r3, [r3, #29]
 800b700:	121b      	asrs	r3, r3, #8
 800b702:	b2da      	uxtb	r2, r3
 800b704:	4b14      	ldr	r3, [pc, #80]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b706:	719a      	strb	r2, [r3, #6]
	Data_Register[7] = (uint8_t)(RS485Rx.TEnable_bit_R  & 0xFF);
 800b708:	4b12      	ldr	r3, [pc, #72]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b70a:	7f5a      	ldrb	r2, [r3, #29]
 800b70c:	4b12      	ldr	r3, [pc, #72]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b70e:	71da      	strb	r2, [r3, #7]
	Data_Register[8] = (uint8_t)(RS485Rx.Temp_Warring_Keep_R >> 8);
 800b710:	4b10      	ldr	r3, [pc, #64]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b712:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b716:	121b      	asrs	r3, r3, #8
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	4b0f      	ldr	r3, [pc, #60]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b71c:	721a      	strb	r2, [r3, #8]
	Data_Register[9] = (uint8_t)(RS485Rx.Temp_Warring_Keep_R  & 0xFF);
 800b71e:	4b0d      	ldr	r3, [pc, #52]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b720:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800b724:	4b0c      	ldr	r3, [pc, #48]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b726:	725a      	strb	r2, [r3, #9]
	Data_Register[10] = (uint8_t)(RS485Rx.Temp_Alram_keep_R >> 8);
 800b728:	4b0a      	ldr	r3, [pc, #40]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b72a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b72e:	121b      	asrs	r3, r3, #8
 800b730:	b2da      	uxtb	r2, r3
 800b732:	4b09      	ldr	r3, [pc, #36]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b734:	729a      	strb	r2, [r3, #10]
	Data_Register[11] = (uint8_t)(RS485Rx.Temp_Alram_keep_R  & 0xFF);
 800b736:	4b07      	ldr	r3, [pc, #28]	@ (800b754 <FUN_Modbus_RxCallback_Flag+0x11c>)
 800b738:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800b73c:	4b06      	ldr	r3, [pc, #24]	@ (800b758 <FUN_Modbus_RxCallback_Flag+0x120>)
 800b73e:	72da      	strb	r2, [r3, #11]
}
 800b740:	bf00      	nop
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	200004f0 	.word	0x200004f0
 800b750:	42c80000 	.word	0x42c80000
 800b754:	20000574 	.word	0x20000574
 800b758:	200004d8 	.word	0x200004d8

0800b75c <FUN_Modbus_Write_save>:
void FUN_Modbus_Write_save(void)
{
 800b75c:	b480      	push	{r7}
 800b75e:	af00      	add	r7, sp, #0
	//��� �µ� ����
	ui.temp_warring_hex   = ((int16_t)Data_Register[0] << 8);
 800b760:	4b3a      	ldr	r3, [pc, #232]	@ (800b84c <FUN_Modbus_Write_save+0xf0>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	021b      	lsls	r3, r3, #8
 800b766:	b29a      	uxth	r2, r3
 800b768:	4b39      	ldr	r3, [pc, #228]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b76a:	849a      	strh	r2, [r3, #36]	@ 0x24
	ui.temp_warring_hex   |= ((int16_t)Data_Register[1] & 0xFF);
 800b76c:	4b38      	ldr	r3, [pc, #224]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b76e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b770:	4a36      	ldr	r2, [pc, #216]	@ (800b84c <FUN_Modbus_Write_save+0xf0>)
 800b772:	7852      	ldrb	r2, [r2, #1]
 800b774:	4313      	orrs	r3, r2
 800b776:	b29a      	uxth	r2, r3
 800b778:	4b35      	ldr	r3, [pc, #212]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b77a:	849a      	strh	r2, [r3, #36]	@ 0x24
	//�˶� �µ� ����
	ui.temp_alarm_hex   	 = ((int16_t)Data_Register[2] << 8);
 800b77c:	4b33      	ldr	r3, [pc, #204]	@ (800b84c <FUN_Modbus_Write_save+0xf0>)
 800b77e:	789b      	ldrb	r3, [r3, #2]
 800b780:	021b      	lsls	r3, r3, #8
 800b782:	b29a      	uxth	r2, r3
 800b784:	4b32      	ldr	r3, [pc, #200]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b786:	84da      	strh	r2, [r3, #38]	@ 0x26
	ui.temp_alarm_hex  	 |= ((int16_t)Data_Register[3] & 0xFF);
 800b788:	4b31      	ldr	r3, [pc, #196]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b78a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b78c:	4a2f      	ldr	r2, [pc, #188]	@ (800b84c <FUN_Modbus_Write_save+0xf0>)
 800b78e:	78d2      	ldrb	r2, [r2, #3]
 800b790:	4313      	orrs	r3, r2
 800b792:	b29a      	uxth	r2, r3
 800b794:	4b2e      	ldr	r3, [pc, #184]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b796:	84da      	strh	r2, [r3, #38]	@ 0x26
	//���µ� ���� ����
	//�µ� ���/�˶� En/Dis
	ui.temp_alarm_enable  		 = Data_Register[7];
 800b798:	4b2c      	ldr	r3, [pc, #176]	@ (800b84c <FUN_Modbus_Write_save+0xf0>)
 800b79a:	79da      	ldrb	r2, [r3, #7]
 800b79c:	4b2c      	ldr	r3, [pc, #176]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b79e:	759a      	strb	r2, [r3, #22]
	//�µ� ��� ���� En/Dis`
	ui.temp_warring_maintain_bit 	 = Data_Register[9];
 800b7a0:	4b2a      	ldr	r3, [pc, #168]	@ (800b84c <FUN_Modbus_Write_save+0xf0>)
 800b7a2:	7a5a      	ldrb	r2, [r3, #9]
 800b7a4:	4b2a      	ldr	r3, [pc, #168]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b7a6:	765a      	strb	r2, [r3, #25]
	//�µ� �˶� ���� En/Dis
	ui.temp_alarm_maintain_bit 	 = Data_Register[11];
 800b7a8:	4b28      	ldr	r3, [pc, #160]	@ (800b84c <FUN_Modbus_Write_save+0xf0>)
 800b7aa:	7ada      	ldrb	r2, [r3, #11]
 800b7ac:	4b28      	ldr	r3, [pc, #160]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b7ae:	769a      	strb	r2, [r3, #26]

	// �µ��� ��� ���� Update
	ui.temp_warring    = (float)(ui.temp_warring_hex) / 100;  // 만약 Modbus로부터 받은 값이 2500이라면, 실제 값 = 25.00
 800b7b0:	4b27      	ldr	r3, [pc, #156]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b7b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b7b4:	ee07 3a90 	vmov	s15, r3
 800b7b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7bc:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800b854 <FUN_Modbus_Write_save+0xf8>
 800b7c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7c4:	4b22      	ldr	r3, [pc, #136]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b7c6:	edc3 7a07 	vstr	s15, [r3, #28]
	// �µ��� �˶� ���� Update
	ui.temp_alarm      = (float)(ui.temp_alarm_hex) / 100;
 800b7ca:	4b21      	ldr	r3, [pc, #132]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b7cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b7ce:	ee07 3a90 	vmov	s15, r3
 800b7d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7d6:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800b854 <FUN_Modbus_Write_save+0xf8>
 800b7da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7de:	4b1c      	ldr	r3, [pc, #112]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b7e0:	edc3 7a08 	vstr	s15, [r3, #32]
	// �µ� ��� ���� �� Update
	//ui.Warring_Deviation     = (float)(RS485Rx.Warring_Deviation) / 100;

	if((RS485Rx.ff_cTemp_warring_R != ui.temp_warring_hex) || (RS485Rx.ff_cTemp_alarm_R != ui.temp_alarm_hex) || (RS485Rx.Warring_Deviation_R != RS485Rx.Warring_Deviation)
 800b7e4:	4b1c      	ldr	r3, [pc, #112]	@ (800b858 <FUN_Modbus_Write_save+0xfc>)
 800b7e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	4b18      	ldr	r3, [pc, #96]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b7ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d123      	bne.n	800b83c <FUN_Modbus_Write_save+0xe0>
 800b7f4:	4b18      	ldr	r3, [pc, #96]	@ (800b858 <FUN_Modbus_Write_save+0xfc>)
 800b7f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	4b14      	ldr	r3, [pc, #80]	@ (800b850 <FUN_Modbus_Write_save+0xf4>)
 800b7fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b800:	429a      	cmp	r2, r3
 800b802:	d11b      	bne.n	800b83c <FUN_Modbus_Write_save+0xe0>
 800b804:	4b14      	ldr	r3, [pc, #80]	@ (800b858 <FUN_Modbus_Write_save+0xfc>)
 800b806:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800b808:	4b13      	ldr	r3, [pc, #76]	@ (800b858 <FUN_Modbus_Write_save+0xfc>)
 800b80a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d115      	bne.n	800b83c <FUN_Modbus_Write_save+0xe0>
			|| (RS485Rx.TEnable_bit_R != RS485Rx.TEnable_bit) || (RS485Rx.Temp_Warring_Keep_R != RS485Rx.Temp_Warring_Keep) || (RS485Rx.Temp_Alram_keep_R != RS485Rx.Temp_Alram_keep))
 800b810:	4b11      	ldr	r3, [pc, #68]	@ (800b858 <FUN_Modbus_Write_save+0xfc>)
 800b812:	7f5a      	ldrb	r2, [r3, #29]
 800b814:	4b10      	ldr	r3, [pc, #64]	@ (800b858 <FUN_Modbus_Write_save+0xfc>)
 800b816:	7f1b      	ldrb	r3, [r3, #28]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d10f      	bne.n	800b83c <FUN_Modbus_Write_save+0xe0>
 800b81c:	4b0e      	ldr	r3, [pc, #56]	@ (800b858 <FUN_Modbus_Write_save+0xfc>)
 800b81e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800b822:	4b0d      	ldr	r3, [pc, #52]	@ (800b858 <FUN_Modbus_Write_save+0xfc>)
 800b824:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b828:	429a      	cmp	r2, r3
 800b82a:	d107      	bne.n	800b83c <FUN_Modbus_Write_save+0xe0>
 800b82c:	4b0a      	ldr	r3, [pc, #40]	@ (800b858 <FUN_Modbus_Write_save+0xfc>)
 800b82e:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800b832:	4b09      	ldr	r3, [pc, #36]	@ (800b858 <FUN_Modbus_Write_save+0xfc>)
 800b834:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800b838:	429a      	cmp	r2, r3
 800b83a:	d002      	beq.n	800b842 <FUN_Modbus_Write_save+0xe6>
	{
		// RS485Rx에 저장된 이전 Modbus 데이터 값과 현재 값이 다를 경우 데이터를 EEPROM에 저장하겠다는 의미. 즉, 값이 변경되었을 때만 Flag =1로
		EEPROM.SaveData_Flag = 1;
 800b83c:	4b07      	ldr	r3, [pc, #28]	@ (800b85c <FUN_Modbus_Write_save+0x100>)
 800b83e:	2201      	movs	r2, #1
 800b840:	701a      	strb	r2, [r3, #0]
	}

}
 800b842:	bf00      	nop
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	200004d8 	.word	0x200004d8
 800b850:	200004f0 	.word	0x200004f0
 800b854:	42c80000 	.word	0x42c80000
 800b858:	20000574 	.word	0x20000574
 800b85c:	20000298 	.word	0x20000298

0800b860 <FUN_Modbus_RxCallback_ERROR>:
/****************************************************************************/
/*	Overview	:	Read Data												*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Modbus_RxCallback_ERROR(uint8_t Fun, uint8_t Ex_Code)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	4603      	mov	r3, r0
 800b868:	460a      	mov	r2, r1
 800b86a:	71fb      	strb	r3, [r7, #7]
 800b86c:	4613      	mov	r3, r2
 800b86e:	71bb      	strb	r3, [r7, #6]
	Read_Data_Tx[0] = HsdID;
 800b870:	4b18      	ldr	r3, [pc, #96]	@ (800b8d4 <FUN_Modbus_RxCallback_ERROR+0x74>)
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	b2da      	uxtb	r2, r3
 800b876:	4b18      	ldr	r3, [pc, #96]	@ (800b8d8 <FUN_Modbus_RxCallback_ERROR+0x78>)
 800b878:	701a      	strb	r2, [r3, #0]
	Read_Data_Tx[1] = Fun + 0x80;
 800b87a:	79fb      	ldrb	r3, [r7, #7]
 800b87c:	3b80      	subs	r3, #128	@ 0x80
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	4b15      	ldr	r3, [pc, #84]	@ (800b8d8 <FUN_Modbus_RxCallback_ERROR+0x78>)
 800b882:	705a      	strb	r2, [r3, #1]

	Read_Data_Tx[2] = Ex_Code;
 800b884:	4a14      	ldr	r2, [pc, #80]	@ (800b8d8 <FUN_Modbus_RxCallback_ERROR+0x78>)
 800b886:	79bb      	ldrb	r3, [r7, #6]
 800b888:	7093      	strb	r3, [r2, #2]

	//CRC
	crc16 =CRC16((uint8_t*)&Read_Data_Tx, 3);
 800b88a:	2103      	movs	r1, #3
 800b88c:	4812      	ldr	r0, [pc, #72]	@ (800b8d8 <FUN_Modbus_RxCallback_ERROR+0x78>)
 800b88e:	f7ff fe67 	bl	800b560 <CRC16>
 800b892:	4603      	mov	r3, r0
 800b894:	461a      	mov	r2, r3
 800b896:	4b11      	ldr	r3, [pc, #68]	@ (800b8dc <FUN_Modbus_RxCallback_ERROR+0x7c>)
 800b898:	801a      	strh	r2, [r3, #0]

	Read_Data_Tx[4] = (uint8_t)(crc16 >> 8);
 800b89a:	4b10      	ldr	r3, [pc, #64]	@ (800b8dc <FUN_Modbus_RxCallback_ERROR+0x7c>)
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	0a1b      	lsrs	r3, r3, #8
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	b2da      	uxtb	r2, r3
 800b8a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8d8 <FUN_Modbus_RxCallback_ERROR+0x78>)
 800b8a6:	711a      	strb	r2, [r3, #4]
	Read_Data_Tx[3] = (uint8_t)(crc16 & 0xFF);
 800b8a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b8dc <FUN_Modbus_RxCallback_ERROR+0x7c>)
 800b8aa:	881b      	ldrh	r3, [r3, #0]
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b8d8 <FUN_Modbus_RxCallback_ERROR+0x78>)
 800b8b0:	70da      	strb	r2, [r3, #3]

	RS48501_TxPos++;
 800b8b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b8e0 <FUN_Modbus_RxCallback_ERROR+0x80>)
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	4b09      	ldr	r3, [pc, #36]	@ (800b8e0 <FUN_Modbus_RxCallback_ERROR+0x80>)
 800b8bc:	701a      	strb	r2, [r3, #0]
	if(RS48501_TxPos >= 20)	RS48501_TxPos = 0;
 800b8be:	4b08      	ldr	r3, [pc, #32]	@ (800b8e0 <FUN_Modbus_RxCallback_ERROR+0x80>)
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	2b13      	cmp	r3, #19
 800b8c4:	d902      	bls.n	800b8cc <FUN_Modbus_RxCallback_ERROR+0x6c>
 800b8c6:	4b06      	ldr	r3, [pc, #24]	@ (800b8e0 <FUN_Modbus_RxCallback_ERROR+0x80>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	701a      	strb	r2, [r3, #0]

}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	20000572 	.word	0x20000572
 800b8d8:	200004b0 	.word	0x200004b0
 800b8dc:	2000001c 	.word	0x2000001c
 800b8e0:	20000524 	.word	0x20000524

0800b8e4 <FUN_Modbus_RxCallback_ReadWriteData>:
/****************************************************************************/
/*	Overview	:	ReadWirte Data												*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Modbus_RxCallback_ReadWriteData(uint8_t Addrs, uint8_t Lenth, uint8_t Fun)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	71fb      	strb	r3, [r7, #7]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	71bb      	strb	r3, [r7, #6]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	717b      	strb	r3, [r7, #5]
	uint8_t Modbus_ReadWirte[16];
	int16_t intTmp;
	uint8_t ii = 0, jj = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	77fb      	strb	r3, [r7, #31]
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	77bb      	strb	r3, [r7, #30]
	uint16_t crc16, Addrs_cnt;

	// �µ����/�˶� ���ذ�, ���� ���ذ�
	RS485Rx.ff_cTemp_warring_R = ((int16_t)(ui.temp_warring * 100));
 800b8fe:	4b5d      	ldr	r3, [pc, #372]	@ (800ba74 <FUN_Modbus_RxCallback_ReadWriteData+0x190>)
 800b900:	edd3 7a07 	vldr	s15, [r3, #28]
 800b904:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800ba78 <FUN_Modbus_RxCallback_ReadWriteData+0x194>
 800b908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b90c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b910:	ee17 3a90 	vmov	r3, s15
 800b914:	b21a      	sxth	r2, r3
 800b916:	4b59      	ldr	r3, [pc, #356]	@ (800ba7c <FUN_Modbus_RxCallback_ReadWriteData+0x198>)
 800b918:	815a      	strh	r2, [r3, #10]
	RS485Rx.ff_cTemp_alarm_R = ((int16_t)(ui.temp_alarm * 100));
 800b91a:	4b56      	ldr	r3, [pc, #344]	@ (800ba74 <FUN_Modbus_RxCallback_ReadWriteData+0x190>)
 800b91c:	edd3 7a08 	vldr	s15, [r3, #32]
 800b920:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800ba78 <FUN_Modbus_RxCallback_ReadWriteData+0x194>
 800b924:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b92c:	ee17 3a90 	vmov	r3, s15
 800b930:	b21a      	sxth	r2, r3
 800b932:	4b52      	ldr	r3, [pc, #328]	@ (800ba7c <FUN_Modbus_RxCallback_ReadWriteData+0x198>)
 800b934:	811a      	strh	r2, [r3, #8]

	Addrs_cnt = Addrs - 0x10;
 800b936:	79fb      	ldrb	r3, [r7, #7]
 800b938:	b29b      	uxth	r3, r3
 800b93a:	3b10      	subs	r3, #16
 800b93c:	83bb      	strh	r3, [r7, #28]

	//Temperature_Value
	//�µ� ��� ����(�Ҽ��� ù°�ڸ������� �۽�, ��°�ڸ��� ����)
	intTmp = (RS485Rx.ff_cTemp_warring_R / 10) * 10;
 800b93e:	4b4f      	ldr	r3, [pc, #316]	@ (800ba7c <FUN_Modbus_RxCallback_ReadWriteData+0x198>)
 800b940:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b944:	4a4e      	ldr	r2, [pc, #312]	@ (800ba80 <FUN_Modbus_RxCallback_ReadWriteData+0x19c>)
 800b946:	fb82 1203 	smull	r1, r2, r2, r3
 800b94a:	1092      	asrs	r2, r2, #2
 800b94c:	17db      	asrs	r3, r3, #31
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	b21b      	sxth	r3, r3
 800b952:	b29b      	uxth	r3, r3
 800b954:	461a      	mov	r2, r3
 800b956:	0092      	lsls	r2, r2, #2
 800b958:	4413      	add	r3, r2
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	837b      	strh	r3, [r7, #26]
	Modbus_ReadWirte[0] = (uint8_t)(intTmp >> 8);
 800b960:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b964:	121b      	asrs	r3, r3, #8
 800b966:	b21b      	sxth	r3, r3
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	723b      	strb	r3, [r7, #8]
	Modbus_ReadWirte[1] = (uint8_t)(intTmp & 0xFF);
 800b96c:	8b7b      	ldrh	r3, [r7, #26]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	727b      	strb	r3, [r7, #9]

	//Humidity_value
	//�µ� �˶� ����(�Ҽ��� ù°�ڸ������� �۽�, ��°�ڸ��� ����)
	intTmp = (RS485Rx.ff_cTemp_alarm_R / 10) * 10;
 800b972:	4b42      	ldr	r3, [pc, #264]	@ (800ba7c <FUN_Modbus_RxCallback_ReadWriteData+0x198>)
 800b974:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b978:	4a41      	ldr	r2, [pc, #260]	@ (800ba80 <FUN_Modbus_RxCallback_ReadWriteData+0x19c>)
 800b97a:	fb82 1203 	smull	r1, r2, r2, r3
 800b97e:	1092      	asrs	r2, r2, #2
 800b980:	17db      	asrs	r3, r3, #31
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	b21b      	sxth	r3, r3
 800b986:	b29b      	uxth	r3, r3
 800b988:	461a      	mov	r2, r3
 800b98a:	0092      	lsls	r2, r2, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	005b      	lsls	r3, r3, #1
 800b990:	b29b      	uxth	r3, r3
 800b992:	837b      	strh	r3, [r7, #26]
	Modbus_ReadWirte[2] = (uint8_t)(intTmp >> 8);
 800b994:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b998:	121b      	asrs	r3, r3, #8
 800b99a:	b21b      	sxth	r3, r3
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	72bb      	strb	r3, [r7, #10]
	Modbus_ReadWirte[3] = (uint8_t)(intTmp & 0xFF);
 800b9a0:	8b7b      	ldrh	r3, [r7, #26]
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	72fb      	strb	r3, [r7, #11]

	//Reserve
	//�µ� ��� ���� ��(�Ҽ��� ù°�ڸ������� �۽�, ��°�ڸ��� ����)
	Modbus_ReadWirte[4] = 0x00;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	733b      	strb	r3, [r7, #12]
	Modbus_ReadWirte[5] = 0x00;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	737b      	strb	r3, [r7, #13]

	//Temp Enable/Disable
	//�µ� enable/disable
	Modbus_ReadWirte[6] = 0x00;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	73bb      	strb	r3, [r7, #14]
	Modbus_ReadWirte[7] = ui.temp_alarm_enable;
 800b9b2:	4b30      	ldr	r3, [pc, #192]	@ (800ba74 <FUN_Modbus_RxCallback_ReadWriteData+0x190>)
 800b9b4:	7d9b      	ldrb	r3, [r3, #22]
 800b9b6:	73fb      	strb	r3, [r7, #15]
	//�µ� ��� ����
	Modbus_ReadWirte[8] = 0x00;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	743b      	strb	r3, [r7, #16]
	Modbus_ReadWirte[9] = ui.temp_warring_maintain_bit;
 800b9bc:	4b2d      	ldr	r3, [pc, #180]	@ (800ba74 <FUN_Modbus_RxCallback_ReadWriteData+0x190>)
 800b9be:	7e5b      	ldrb	r3, [r3, #25]
 800b9c0:	747b      	strb	r3, [r7, #17]
	//�µ� �˶� ����
	Modbus_ReadWirte[10] = 0x00;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	74bb      	strb	r3, [r7, #18]
	Modbus_ReadWirte[11] = ui.temp_alarm_maintain_bit;
 800b9c6:	4b2b      	ldr	r3, [pc, #172]	@ (800ba74 <FUN_Modbus_RxCallback_ReadWriteData+0x190>)
 800b9c8:	7e9b      	ldrb	r3, [r3, #26]
 800b9ca:	74fb      	strb	r3, [r7, #19]

	//Reserve
	Modbus_ReadWirte[12] = 0x00;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	753b      	strb	r3, [r7, #20]
	Modbus_ReadWirte[13] = 0x00;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	757b      	strb	r3, [r7, #21]
	Modbus_ReadWirte[14] = 0x00;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	75bb      	strb	r3, [r7, #22]
	Modbus_ReadWirte[15] = 0x00;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	75fb      	strb	r3, [r7, #23]

	Read_Data_Tx[0] = HsdID;
 800b9dc:	4b29      	ldr	r3, [pc, #164]	@ (800ba84 <FUN_Modbus_RxCallback_ReadWriteData+0x1a0>)
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	4b29      	ldr	r3, [pc, #164]	@ (800ba88 <FUN_Modbus_RxCallback_ReadWriteData+0x1a4>)
 800b9e4:	701a      	strb	r2, [r3, #0]
	Read_Data_Tx[1] = Fun;
 800b9e6:	4a28      	ldr	r2, [pc, #160]	@ (800ba88 <FUN_Modbus_RxCallback_ReadWriteData+0x1a4>)
 800b9e8:	797b      	ldrb	r3, [r7, #5]
 800b9ea:	7053      	strb	r3, [r2, #1]

	Read_Data_Tx[2] = 0x00;
 800b9ec:	4b26      	ldr	r3, [pc, #152]	@ (800ba88 <FUN_Modbus_RxCallback_ReadWriteData+0x1a4>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	709a      	strb	r2, [r3, #2]
	Read_Data_Tx[3] = Addrs;
 800b9f2:	4a25      	ldr	r2, [pc, #148]	@ (800ba88 <FUN_Modbus_RxCallback_ReadWriteData+0x1a4>)
 800b9f4:	79fb      	ldrb	r3, [r7, #7]
 800b9f6:	70d3      	strb	r3, [r2, #3]
	jj = 4;
 800b9f8:	2304      	movs	r3, #4
 800b9fa:	77bb      	strb	r3, [r7, #30]
	Lenth = 1;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	71bb      	strb	r3, [r7, #6]

	for(ii = Addrs_cnt; ii < Addrs_cnt+(Lenth*2); ii++)
 800ba00:	8bbb      	ldrh	r3, [r7, #28]
 800ba02:	77fb      	strb	r3, [r7, #31]
 800ba04:	e00e      	b.n	800ba24 <FUN_Modbus_RxCallback_ReadWriteData+0x140>
	{
		Read_Data_Tx[jj++] = Modbus_ReadWirte[ii];
 800ba06:	7ffa      	ldrb	r2, [r7, #31]
 800ba08:	7fbb      	ldrb	r3, [r7, #30]
 800ba0a:	1c59      	adds	r1, r3, #1
 800ba0c:	77b9      	strb	r1, [r7, #30]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	f102 0320 	add.w	r3, r2, #32
 800ba14:	443b      	add	r3, r7
 800ba16:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800ba1a:	4b1b      	ldr	r3, [pc, #108]	@ (800ba88 <FUN_Modbus_RxCallback_ReadWriteData+0x1a4>)
 800ba1c:	545a      	strb	r2, [r3, r1]
	for(ii = Addrs_cnt; ii < Addrs_cnt+(Lenth*2); ii++)
 800ba1e:	7ffb      	ldrb	r3, [r7, #31]
 800ba20:	3301      	adds	r3, #1
 800ba22:	77fb      	strb	r3, [r7, #31]
 800ba24:	7ffa      	ldrb	r2, [r7, #31]
 800ba26:	8bb9      	ldrh	r1, [r7, #28]
 800ba28:	79bb      	ldrb	r3, [r7, #6]
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	440b      	add	r3, r1
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	dbe9      	blt.n	800ba06 <FUN_Modbus_RxCallback_ReadWriteData+0x122>
	}

	//CRC
	crc16 =CRC16((uint8_t*)&Read_Data_Tx, 6);
 800ba32:	2106      	movs	r1, #6
 800ba34:	4814      	ldr	r0, [pc, #80]	@ (800ba88 <FUN_Modbus_RxCallback_ReadWriteData+0x1a4>)
 800ba36:	f7ff fd93 	bl	800b560 <CRC16>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	833b      	strh	r3, [r7, #24]

	Read_Data_Tx[7] = (uint8_t)(crc16 >> 8);
 800ba3e:	8b3b      	ldrh	r3, [r7, #24]
 800ba40:	0a1b      	lsrs	r3, r3, #8
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	4b10      	ldr	r3, [pc, #64]	@ (800ba88 <FUN_Modbus_RxCallback_ReadWriteData+0x1a4>)
 800ba48:	71da      	strb	r2, [r3, #7]
	Read_Data_Tx[6] = (uint8_t)(crc16 & 0xFF);
 800ba4a:	8b3b      	ldrh	r3, [r7, #24]
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba88 <FUN_Modbus_RxCallback_ReadWriteData+0x1a4>)
 800ba50:	719a      	strb	r2, [r3, #6]

	RS48501_TxPos++;
 800ba52:	4b0e      	ldr	r3, [pc, #56]	@ (800ba8c <FUN_Modbus_RxCallback_ReadWriteData+0x1a8>)
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	3301      	adds	r3, #1
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba8c <FUN_Modbus_RxCallback_ReadWriteData+0x1a8>)
 800ba5c:	701a      	strb	r2, [r3, #0]
	if(RS48501_TxPos >= 20)	RS48501_TxPos = 0;
 800ba5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ba8c <FUN_Modbus_RxCallback_ReadWriteData+0x1a8>)
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	2b13      	cmp	r3, #19
 800ba64:	d902      	bls.n	800ba6c <FUN_Modbus_RxCallback_ReadWriteData+0x188>
 800ba66:	4b09      	ldr	r3, [pc, #36]	@ (800ba8c <FUN_Modbus_RxCallback_ReadWriteData+0x1a8>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	701a      	strb	r2, [r3, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	3720      	adds	r7, #32
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	200004f0 	.word	0x200004f0
 800ba78:	42c80000 	.word	0x42c80000
 800ba7c:	20000574 	.word	0x20000574
 800ba80:	66666667 	.word	0x66666667
 800ba84:	20000572 	.word	0x20000572
 800ba88:	200004b0 	.word	0x200004b0
 800ba8c:	20000524 	.word	0x20000524

0800ba90 <FUN_Modbus_RxCallback_ReadData>:
/****************************************************************************/
/*	Overview	:	Read Data												*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Modbus_RxCallback_ReadData(uint8_t Addrs, uint8_t Lenth)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08c      	sub	sp, #48	@ 0x30
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	4603      	mov	r3, r0
 800ba98:	460a      	mov	r2, r1
 800ba9a:	71fb      	strb	r3, [r7, #7]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	71bb      	strb	r3, [r7, #6]
	uint8_t ii, jj;
	uint16_t crc16;

	// Status(LSB)
	// Update Error Status
	if((Error.SHT30_Error == 1) || (EEPROM.Error == 1) || (RS485Rx.Checksum_Error == 1))
 800baa0:	4bb0      	ldr	r3, [pc, #704]	@ (800bd64 <FUN_Modbus_RxCallback_ReadData+0x2d4>)
 800baa2:	88db      	ldrh	r3, [r3, #6]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d009      	beq.n	800babc <FUN_Modbus_RxCallback_ReadData+0x2c>
 800baa8:	4baf      	ldr	r3, [pc, #700]	@ (800bd68 <FUN_Modbus_RxCallback_ReadData+0x2d8>)
 800baaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d004      	beq.n	800babc <FUN_Modbus_RxCallback_ReadData+0x2c>
 800bab2:	4bae      	ldr	r3, [pc, #696]	@ (800bd6c <FUN_Modbus_RxCallback_ReadData+0x2dc>)
 800bab4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d11e      	bne.n	800bafa <FUN_Modbus_RxCallback_ReadData+0x6a>
	{
		//ui.Detection_Error = 1;
		ui.Detection_Error = 1;
 800babc:	4bac      	ldr	r3, [pc, #688]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		if(Error.SHT30_Error == 1){
 800bac4:	4ba7      	ldr	r3, [pc, #668]	@ (800bd64 <FUN_Modbus_RxCallback_ReadData+0x2d4>)
 800bac6:	88db      	ldrh	r3, [r3, #6]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d103      	bne.n	800bad4 <FUN_Modbus_RxCallback_ReadData+0x44>
			ui.ErrorCode = 0x01;
 800bacc:	4ba8      	ldr	r3, [pc, #672]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		}
		if(EEPROM.Error == 1){
 800bad4:	4ba4      	ldr	r3, [pc, #656]	@ (800bd68 <FUN_Modbus_RxCallback_ReadData+0x2d8>)
 800bad6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bada:	2b01      	cmp	r3, #1
 800badc:	d103      	bne.n	800bae6 <FUN_Modbus_RxCallback_ReadData+0x56>
			ui.ErrorCode = 0x02;
 800bade:	4ba4      	ldr	r3, [pc, #656]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bae0:	2202      	movs	r2, #2
 800bae2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		}
		if(RS485Rx.Checksum_Error == 1){
 800bae6:	4ba1      	ldr	r3, [pc, #644]	@ (800bd6c <FUN_Modbus_RxCallback_ReadData+0x2dc>)
 800bae8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800baec:	2b01      	cmp	r3, #1
 800baee:	d10c      	bne.n	800bb0a <FUN_Modbus_RxCallback_ReadData+0x7a>
			ui.ErrorCode = 0x03;
 800baf0:	4b9f      	ldr	r3, [pc, #636]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800baf2:	2203      	movs	r2, #3
 800baf4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		if(RS485Rx.Checksum_Error == 1){
 800baf8:	e007      	b.n	800bb0a <FUN_Modbus_RxCallback_ReadData+0x7a>
		}
	}
	else{
		ui.ErrorCode = 0x00;
 800bafa:	4b9d      	ldr	r3, [pc, #628]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		ui.Detection_Error = 0;
 800bb02:	4b9b      	ldr	r3, [pc, #620]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	//   Opstatus
	//     MSB
	//Disable slip
	Modbus_Read[0] = 0x00;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	733b      	strb	r3, [r7, #12]
	//����
	Modbus_Read[0] |= 0x00 << 1;
 800bb0e:	7b3b      	ldrb	r3, [r7, #12]
 800bb10:	733b      	strb	r3, [r7, #12]
	//���� ���� LEVEL
	Modbus_Read[0] |= ui.SMK_Level << 2;
 800bb12:	7b3b      	ldrb	r3, [r7, #12]
 800bb14:	b25a      	sxtb	r2, r3
 800bb16:	4b96      	ldr	r3, [pc, #600]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bb18:	7c1b      	ldrb	r3, [r3, #16]
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	b25b      	sxtb	r3, r3
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	b25b      	sxtb	r3, r3
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	733b      	strb	r3, [r7, #12]
	//Heartbeat
	Modbus_Read[0] |= ui.HeartBit << 4;
 800bb26:	7b3b      	ldrb	r3, [r7, #12]
 800bb28:	b25a      	sxtb	r2, r3
 800bb2a:	4b91      	ldr	r3, [pc, #580]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bb2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bb30:	011b      	lsls	r3, r3, #4
 800bb32:	b25b      	sxtb	r3, r3
 800bb34:	4313      	orrs	r3, r2
 800bb36:	b25b      	sxtb	r3, r3
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	733b      	strb	r3, [r7, #12]
	//Reserved

	//    LSB
    // Running
	Modbus_Read[1] = ui.Status.Bit.RUNNING;//RS485Tx.running_bit;
 800bb3c:	4b8c      	ldr	r3, [pc, #560]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bb3e:	785b      	ldrb	r3, [r3, #1]
 800bb40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	737b      	strb	r3, [r7, #13]
	//���� ����
	Modbus_Read[1] |= (ui.Status.Bit.SMOKE_DETECT << 1);//(RS485Tx.smoke_detect_on_bit << 1);
 800bb48:	7b7b      	ldrb	r3, [r7, #13]
 800bb4a:	b25a      	sxtb	r2, r3
 800bb4c:	4b88      	ldr	r3, [pc, #544]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bb4e:	785b      	ldrb	r3, [r3, #1]
 800bb50:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	005b      	lsls	r3, r3, #1
 800bb58:	b25b      	sxtb	r3, r3
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	b25b      	sxtb	r3, r3
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	737b      	strb	r3, [r7, #13]
	//�µ� ���
	Modbus_Read[1] |= (ui.temp_warring_bit << 2);
 800bb62:	7b7b      	ldrb	r3, [r7, #13]
 800bb64:	b25a      	sxtb	r2, r3
 800bb66:	4b82      	ldr	r3, [pc, #520]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bb68:	7ddb      	ldrb	r3, [r3, #23]
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	b25b      	sxtb	r3, r3
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	b25b      	sxtb	r3, r3
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	737b      	strb	r3, [r7, #13]
	//�µ� �˶�
	Modbus_Read[1] |= (ui.temp_alarm_bit << 3);
 800bb76:	7b7b      	ldrb	r3, [r7, #13]
 800bb78:	b25a      	sxtb	r2, r3
 800bb7a:	4b7d      	ldr	r3, [pc, #500]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bb7c:	7e1b      	ldrb	r3, [r3, #24]
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	b25b      	sxtb	r3, r3
 800bb82:	4313      	orrs	r3, r2
 800bb84:	b25b      	sxtb	r3, r3
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	737b      	strb	r3, [r7, #13]
	//������ ����
	Modbus_Read[1] |= (ui.Detection_Error << 4);
 800bb8a:	7b7b      	ldrb	r3, [r7, #13]
 800bb8c:	b25a      	sxtb	r2, r3
 800bb8e:	4b78      	ldr	r3, [pc, #480]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bb90:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bb94:	011b      	lsls	r3, r3, #4
 800bb96:	b25b      	sxtb	r3, r3
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	b25b      	sxtb	r3, r3
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	737b      	strb	r3, [r7, #13]
	//Reserved
	Modbus_Read[1] |= (0 << 5);
 800bba0:	7b7b      	ldrb	r3, [r7, #13]
 800bba2:	737b      	strb	r3, [r7, #13]
	//Reserved
	Modbus_Read[1] |= (0 << 6);
 800bba4:	7b7b      	ldrb	r3, [r7, #13]
 800bba6:	737b      	strb	r3, [r7, #13]
	//Reserved
	Modbus_Read[1] |= (0 << 7);
 800bba8:	7b7b      	ldrb	r3, [r7, #13]
 800bbaa:	737b      	strb	r3, [r7, #13]

	//   Error Code
	//     MSB
	Modbus_Read[2] = 0x00;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73bb      	strb	r3, [r7, #14]
	//     LSB
	Modbus_Read[3] = ui.ErrorCode;
 800bbb0:	4b6f      	ldr	r3, [pc, #444]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bbb2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bbb6:	73fb      	strb	r3, [r7, #15]

	//Temperature_Value
	Modbus_Read[4] = (ui.temp_100times >> 8);
 800bbb8:	4b6d      	ldr	r3, [pc, #436]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bbba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bbbe:	121b      	asrs	r3, r3, #8
 800bbc0:	b21b      	sxth	r3, r3
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	743b      	strb	r3, [r7, #16]
	Modbus_Read[5] = (ui.temp_100times & 0xFF);
 800bbc6:	4b6a      	ldr	r3, [pc, #424]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bbc8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	747b      	strb	r3, [r7, #17]

	//Humidty_Value
	Modbus_Read[6] = (ui.humi_100times >> 8);
 800bbd0:	4b67      	ldr	r3, [pc, #412]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bbd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bbd6:	121b      	asrs	r3, r3, #8
 800bbd8:	b21b      	sxth	r3, r3
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	74bb      	strb	r3, [r7, #18]
	Modbus_Read[7] = (ui.humi_100times & 0xFF);
 800bbde:	4b64      	ldr	r3, [pc, #400]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bbe0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	74fb      	strb	r3, [r7, #19]

	//Reserved
	Modbus_Read[8] = 0x00;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	753b      	strb	r3, [r7, #20]
	Modbus_Read[9] = 0x00;
 800bbec:	2300      	movs	r3, #0
 800bbee:	757b      	strb	r3, [r7, #21]

	//Reserved
	Modbus_Read[10] = 0x00;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	75bb      	strb	r3, [r7, #22]
	Modbus_Read[11] = 0x00;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	75fb      	strb	r3, [r7, #23]
	//Reserved
	Modbus_Read[12] = (ui.i_temp_100times >> 8);;
 800bbf8:	4b5d      	ldr	r3, [pc, #372]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bbfa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bbfe:	121b      	asrs	r3, r3, #8
 800bc00:	b21b      	sxth	r3, r3
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	763b      	strb	r3, [r7, #24]
	Modbus_Read[13] = (ui.i_temp_100times & 0xFF);
 800bc06:	4b5a      	ldr	r3, [pc, #360]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc08:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	767b      	strb	r3, [r7, #25]
	//Reserved
	Modbus_Read[14] = (ui.i_humi_100times >> 8);
 800bc10:	4b57      	ldr	r3, [pc, #348]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc12:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bc16:	121b      	asrs	r3, r3, #8
 800bc18:	b21b      	sxth	r3, r3
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	76bb      	strb	r3, [r7, #26]
	Modbus_Read[15] = (ui.i_humi_100times & 0xFF);
 800bc1e:	4b54      	ldr	r3, [pc, #336]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc20:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	76fb      	strb	r3, [r7, #27]

	//Temperature_warring
	//�µ� ��� ����(�Ҽ��� ù°�ڸ������� �۽�, ��°�ڸ��� ����)
	Modbus_Read[16] = (ui.temp_warring_hex >> 8);
 800bc28:	4b51      	ldr	r3, [pc, #324]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bc2c:	0a1b      	lsrs	r3, r3, #8
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	773b      	strb	r3, [r7, #28]
	Modbus_Read[17] = (ui.temp_warring_hex & 0xFF);
 800bc34:	4b4e      	ldr	r3, [pc, #312]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	777b      	strb	r3, [r7, #29]

	//Temperature_alarm
	//�µ� �˶� ����(�Ҽ��� ù°�ڸ������� �۽�, ��°�ڸ��� ����)
	Modbus_Read[18] = (ui.temp_alarm_hex >> 8);
 800bc3c:	4b4c      	ldr	r3, [pc, #304]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bc40:	0a1b      	lsrs	r3, r3, #8
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	77bb      	strb	r3, [r7, #30]
	Modbus_Read[19] = (ui.temp_alarm_hex & 0xFF);
 800bc48:	4b49      	ldr	r3, [pc, #292]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	77fb      	strb	r3, [r7, #31]

	//Deviation_value
	//�µ� ��� ���� ��(�Ҽ��� ù°�ڸ������� �۽�, ��°�ڸ��� ����)
	Modbus_Read[20] = (ui.co_100times >> 8);
 800bc50:	4b47      	ldr	r3, [pc, #284]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bc56:	121b      	asrs	r3, r3, #8
 800bc58:	b21b      	sxth	r3, r3
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	f887 3020 	strb.w	r3, [r7, #32]
	Modbus_Read[21] = (ui.co_100times & 0xFF);
 800bc60:	4b43      	ldr	r3, [pc, #268]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	//Temp Enable/Disable
	//�µ� enable/disable
	Modbus_Read[22] = 0x00;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	Modbus_Read[23] = ui.temp_alarm_enable;
 800bc72:	4b3f      	ldr	r3, [pc, #252]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc74:	7d9b      	ldrb	r3, [r3, #22]
 800bc76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	//�µ� ��� ����
	Modbus_Read[24] = 0x00;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	Modbus_Read[25] = ui.temp_warring_maintain_bit;
 800bc80:	4b3b      	ldr	r3, [pc, #236]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc82:	7e5b      	ldrb	r3, [r3, #25]
 800bc84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	//�µ� �˶� ����
	Modbus_Read[26] = 0x00;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	Modbus_Read[27] = ui.temp_alarm_maintain_bit;
 800bc8e:	4b38      	ldr	r3, [pc, #224]	@ (800bd70 <FUN_Modbus_RxCallback_ReadData+0x2e0>)
 800bc90:	7e9b      	ldrb	r3, [r3, #26]
 800bc92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	//Reserve
	Modbus_Read[28] = 0x00;
 800bc96:	2300      	movs	r3, #0
 800bc98:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	Modbus_Read[29] = 0x00;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	Modbus_Read[30] = 0x00;
 800bca2:	2300      	movs	r3, #0
 800bca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	Modbus_Read[31] = 0x00;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


	Read_Data_Tx[0] = HsdID;
 800bcae:	4b31      	ldr	r3, [pc, #196]	@ (800bd74 <FUN_Modbus_RxCallback_ReadData+0x2e4>)
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	4b30      	ldr	r3, [pc, #192]	@ (800bd78 <FUN_Modbus_RxCallback_ReadData+0x2e8>)
 800bcb6:	701a      	strb	r2, [r3, #0]
	Read_Data_Tx[1] = 0x03;
 800bcb8:	4b2f      	ldr	r3, [pc, #188]	@ (800bd78 <FUN_Modbus_RxCallback_ReadData+0x2e8>)
 800bcba:	2203      	movs	r2, #3
 800bcbc:	705a      	strb	r2, [r3, #1]
	Read_Data_Tx[2] = Lenth * 2;
 800bcbe:	79bb      	ldrb	r3, [r7, #6]
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	4b2c      	ldr	r3, [pc, #176]	@ (800bd78 <FUN_Modbus_RxCallback_ReadData+0x2e8>)
 800bcc6:	709a      	strb	r2, [r3, #2]

	jj = 3;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	for(ii = Addrs; ii < Addrs+(Lenth*2); ii++)
 800bcce:	79fb      	ldrb	r3, [r7, #7]
 800bcd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bcd4:	e013      	b.n	800bcfe <FUN_Modbus_RxCallback_ReadData+0x26e>
	{
		Read_Data_Tx[jj++] = Modbus_Read[ii];
 800bcd6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bcda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bcde:	1c59      	adds	r1, r3, #1
 800bce0:	f887 102e 	strb.w	r1, [r7, #46]	@ 0x2e
 800bce4:	4619      	mov	r1, r3
 800bce6:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 800bcea:	443b      	add	r3, r7
 800bcec:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800bcf0:	4b21      	ldr	r3, [pc, #132]	@ (800bd78 <FUN_Modbus_RxCallback_ReadData+0x2e8>)
 800bcf2:	545a      	strb	r2, [r3, r1]
	for(ii = Addrs; ii < Addrs+(Lenth*2); ii++)
 800bcf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bcfe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bd02:	79f9      	ldrb	r1, [r7, #7]
 800bd04:	79bb      	ldrb	r3, [r7, #6]
 800bd06:	005b      	lsls	r3, r3, #1
 800bd08:	440b      	add	r3, r1
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	dbe3      	blt.n	800bcd6 <FUN_Modbus_RxCallback_ReadData+0x246>
	}

	crc16 =CRC16((uint8_t*)&Read_Data_Tx, (Lenth*2) +3);
 800bd0e:	79bb      	ldrb	r3, [r7, #6]
 800bd10:	005b      	lsls	r3, r3, #1
 800bd12:	3303      	adds	r3, #3
 800bd14:	4619      	mov	r1, r3
 800bd16:	4818      	ldr	r0, [pc, #96]	@ (800bd78 <FUN_Modbus_RxCallback_ReadData+0x2e8>)
 800bd18:	f7ff fc22 	bl	800b560 <CRC16>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	//CRC
	Read_Data_Tx[(Lenth*2) +4] = (uint8_t)(crc16 >> 8);
 800bd20:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	79bb      	ldrb	r3, [r7, #6]
 800bd28:	3302      	adds	r3, #2
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	b2d1      	uxtb	r1, r2
 800bd2e:	4a12      	ldr	r2, [pc, #72]	@ (800bd78 <FUN_Modbus_RxCallback_ReadData+0x2e8>)
 800bd30:	54d1      	strb	r1, [r2, r3]
	Read_Data_Tx[(Lenth*2) +3] = (uint8_t)(crc16 & 0xFF);
 800bd32:	79bb      	ldrb	r3, [r7, #6]
 800bd34:	005b      	lsls	r3, r3, #1
 800bd36:	3303      	adds	r3, #3
 800bd38:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800bd3a:	b2d1      	uxtb	r1, r2
 800bd3c:	4a0e      	ldr	r2, [pc, #56]	@ (800bd78 <FUN_Modbus_RxCallback_ReadData+0x2e8>)
 800bd3e:	54d1      	strb	r1, [r2, r3]

	RS48501_TxPos++;
 800bd40:	4b0e      	ldr	r3, [pc, #56]	@ (800bd7c <FUN_Modbus_RxCallback_ReadData+0x2ec>)
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	3301      	adds	r3, #1
 800bd46:	b2da      	uxtb	r2, r3
 800bd48:	4b0c      	ldr	r3, [pc, #48]	@ (800bd7c <FUN_Modbus_RxCallback_ReadData+0x2ec>)
 800bd4a:	701a      	strb	r2, [r3, #0]
	if(RS48501_TxPos >= 20)	RS48501_TxPos = 0;
 800bd4c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd7c <FUN_Modbus_RxCallback_ReadData+0x2ec>)
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	2b13      	cmp	r3, #19
 800bd52:	d902      	bls.n	800bd5a <FUN_Modbus_RxCallback_ReadData+0x2ca>
 800bd54:	4b09      	ldr	r3, [pc, #36]	@ (800bd7c <FUN_Modbus_RxCallback_ReadData+0x2ec>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	701a      	strb	r2, [r3, #0]
}
 800bd5a:	bf00      	nop
 800bd5c:	3730      	adds	r7, #48	@ 0x30
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	200006d4 	.word	0x200006d4
 800bd68:	20000298 	.word	0x20000298
 800bd6c:	20000574 	.word	0x20000574
 800bd70:	200004f0 	.word	0x200004f0
 800bd74:	20000572 	.word	0x20000572
 800bd78:	200004b0 	.word	0x200004b0
 800bd7c:	20000524 	.word	0x20000524

0800bd80 <FUN_Modbus_Read>:
/****************************************************************************/
/*	Overview	:	RX ������ ó�� ��� ������										*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Modbus_Read(void)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
	uint8_t ii, jj;
	uint16_t CRCReq, CRCRes, CRCCal;
	uint8_t Len;

	//[0] = Device ID 1~99
	if(RS485RxMOData[0] == HsdID)
 800bd86:	4b90      	ldr	r3, [pc, #576]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	4b8f      	ldr	r3, [pc, #572]	@ (800bfcc <FUN_Modbus_Read+0x24c>)
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	f040 81e8 	bne.w	800c166 <FUN_Modbus_Read+0x3e6>
	{
		RS485Rx.Rx_cnt = 0;
 800bd96:	4b8e      	ldr	r3, [pc, #568]	@ (800bfd0 <FUN_Modbus_Read+0x250>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	829a      	strh	r2, [r3, #20]
		RS485Rx.result_MO = 0;
 800bd9c:	4b8c      	ldr	r3, [pc, #560]	@ (800bfd0 <FUN_Modbus_Read+0x250>)
 800bd9e:	2200      	movs	r2, #0
 800bda0:	75da      	strb	r2, [r3, #23]

		if(RS485RxMOData[1] == 0x10)
 800bda2:	4b89      	ldr	r3, [pc, #548]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bda4:	785b      	ldrb	r3, [r3, #1]
 800bda6:	2b10      	cmp	r3, #16
 800bda8:	d119      	bne.n	800bdde <FUN_Modbus_Read+0x5e>
		{
			Len = RS485RxMOData[6];
 800bdaa:	4b87      	ldr	r3, [pc, #540]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bdac:	799b      	ldrb	r3, [r3, #6]
 800bdae:	737b      	strb	r3, [r7, #13]

			CRCReq = (uint16_t)(RS485RxMOData[8+Len] << 8);
 800bdb0:	7b7b      	ldrb	r3, [r7, #13]
 800bdb2:	3308      	adds	r3, #8
 800bdb4:	4a84      	ldr	r2, [pc, #528]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bdb6:	5cd3      	ldrb	r3, [r2, r3]
 800bdb8:	021b      	lsls	r3, r3, #8
 800bdba:	827b      	strh	r3, [r7, #18]
			CRCReq |= (uint16_t)(RS485RxMOData[7+Len] & 0xFF);
 800bdbc:	7b7b      	ldrb	r3, [r7, #13]
 800bdbe:	3307      	adds	r3, #7
 800bdc0:	4a81      	ldr	r2, [pc, #516]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bdc2:	5cd3      	ldrb	r3, [r2, r3]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	8a7b      	ldrh	r3, [r7, #18]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	827b      	strh	r3, [r7, #18]

			CRCCal = CRC16((uint8_t*)&RS485RxMOData, 7+Len);
 800bdcc:	7b7b      	ldrb	r3, [r7, #13]
 800bdce:	3307      	adds	r3, #7
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	487d      	ldr	r0, [pc, #500]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bdd4:	f7ff fbc4 	bl	800b560 <CRC16>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	823b      	strh	r3, [r7, #16]
 800bddc:	e00f      	b.n	800bdfe <FUN_Modbus_Read+0x7e>
		}
		else
		{
			CRCReq = (uint16_t)(RS485RxMOData[7] << 8);
 800bdde:	4b7a      	ldr	r3, [pc, #488]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bde0:	79db      	ldrb	r3, [r3, #7]
 800bde2:	021b      	lsls	r3, r3, #8
 800bde4:	827b      	strh	r3, [r7, #18]
			CRCReq |= (uint16_t)(RS485RxMOData[6] & 0xFF);
 800bde6:	4b78      	ldr	r3, [pc, #480]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bde8:	799b      	ldrb	r3, [r3, #6]
 800bdea:	461a      	mov	r2, r3
 800bdec:	8a7b      	ldrh	r3, [r7, #18]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	827b      	strh	r3, [r7, #18]

			CRCCal = CRC16((uint8_t*)&RS485RxMOData, 6);
 800bdf2:	2106      	movs	r1, #6
 800bdf4:	4874      	ldr	r0, [pc, #464]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bdf6:	f7ff fbb3 	bl	800b560 <CRC16>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	823b      	strh	r3, [r7, #16]
		}

		if(CRCReq == CRCCal)
 800bdfe:	8a7a      	ldrh	r2, [r7, #18]
 800be00:	8a3b      	ldrh	r3, [r7, #16]
 800be02:	429a      	cmp	r2, r3
 800be04:	f040 81a0 	bne.w	800c148 <FUN_Modbus_Read+0x3c8>
		{
			Function = RS485RxMOData[1];
 800be08:	4b6f      	ldr	r3, [pc, #444]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800be0a:	785b      	ldrb	r3, [r3, #1]
 800be0c:	733b      	strb	r3, [r7, #12]

			//[1] = 0x03 = Read mode
			if(RS485RxMOData[1] == 0x03)
 800be0e:	4b6e      	ldr	r3, [pc, #440]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800be10:	785b      	ldrb	r3, [r3, #1]
 800be12:	2b03      	cmp	r3, #3
 800be14:	d146      	bne.n	800bea4 <FUN_Modbus_Read+0x124>
			{
				//Address Reguster ����
				Addrs_Start = RS485RxMOData[3];
 800be16:	4b6c      	ldr	r3, [pc, #432]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800be18:	78db      	ldrb	r3, [r3, #3]
 800be1a:	72bb      	strb	r3, [r7, #10]
				//Reading Register ����
				Data_Word	= RS485RxMOData[5];
 800be1c:	4b6a      	ldr	r3, [pc, #424]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800be1e:	795b      	ldrb	r3, [r3, #5]
 800be20:	727b      	strb	r3, [r7, #9]
				//data Register �ִ� ����
				Word_Max = 16 - (Addrs_Start / 2);
 800be22:	7abb      	ldrb	r3, [r7, #10]
 800be24:	085b      	lsrs	r3, r3, #1
 800be26:	b2db      	uxtb	r3, r3
 800be28:	f1c3 0310 	rsb	r3, r3, #16
 800be2c:	75fb      	strb	r3, [r7, #23]

				if(Addrs_Start == 0)
 800be2e:	7abb      	ldrb	r3, [r7, #10]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d102      	bne.n	800be3a <FUN_Modbus_Read+0xba>
				{
					Word_Max = 16;
 800be34:	2310      	movs	r3, #16
 800be36:	75fb      	strb	r3, [r7, #23]
 800be38:	e005      	b.n	800be46 <FUN_Modbus_Read+0xc6>
				}
				else
				{
					Word_Max = 16 - (Addrs_Start / 2);
 800be3a:	7abb      	ldrb	r3, [r7, #10]
 800be3c:	085b      	lsrs	r3, r3, #1
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	f1c3 0310 	rsb	r3, r3, #16
 800be44:	75fb      	strb	r3, [r7, #23]
				}


				if(Addrs_Start <= 0x1E)
 800be46:	7abb      	ldrb	r3, [r7, #10]
 800be48:	2b1e      	cmp	r3, #30
 800be4a:	d825      	bhi.n	800be98 <FUN_Modbus_Read+0x118>
				{
					if(Addrs_Start %2 == 0)
 800be4c:	7abb      	ldrb	r3, [r7, #10]
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	b2db      	uxtb	r3, r3
 800be54:	2b00      	cmp	r3, #0
 800be56:	d119      	bne.n	800be8c <FUN_Modbus_Read+0x10c>
					{
						if(Data_Word > Word_Max)
 800be58:	7a7a      	ldrb	r2, [r7, #9]
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d905      	bls.n	800be6c <FUN_Modbus_Read+0xec>
						{
							//Slave���� ���� ���� ���� Address�� register�� ��û�� �߻�
							FUN_Modbus_RxCallback_ERROR(Function, 0x02);
 800be60:	7b3b      	ldrb	r3, [r7, #12]
 800be62:	2102      	movs	r1, #2
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff fcfb 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
		for (uint16_t i = 0; i < 25 ; i++){
			 RS485RxMOData[i] = 0x00;
		}
	}

}
 800be6a:	e191      	b.n	800c190 <FUN_Modbus_Read+0x410>
							if(Data_Word == 0)
 800be6c:	7a7b      	ldrb	r3, [r7, #9]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d105      	bne.n	800be7e <FUN_Modbus_Read+0xfe>
								FUN_Modbus_RxCallback_ERROR(Function, 0x03);
 800be72:	7b3b      	ldrb	r3, [r7, #12]
 800be74:	2103      	movs	r1, #3
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff fcf2 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
}
 800be7c:	e188      	b.n	800c190 <FUN_Modbus_Read+0x410>
								FUN_Modbus_RxCallback_ReadData(Addrs_Start, Data_Word);
 800be7e:	7a7a      	ldrb	r2, [r7, #9]
 800be80:	7abb      	ldrb	r3, [r7, #10]
 800be82:	4611      	mov	r1, r2
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff fe03 	bl	800ba90 <FUN_Modbus_RxCallback_ReadData>
}
 800be8a:	e181      	b.n	800c190 <FUN_Modbus_Read+0x410>
						FUN_Modbus_RxCallback_ERROR(Function, 0x02);
 800be8c:	7b3b      	ldrb	r3, [r7, #12]
 800be8e:	2102      	movs	r1, #2
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff fce5 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
}
 800be96:	e17b      	b.n	800c190 <FUN_Modbus_Read+0x410>
					FUN_Modbus_RxCallback_ERROR(Function, 0x02);
 800be98:	7b3b      	ldrb	r3, [r7, #12]
 800be9a:	2102      	movs	r1, #2
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff fcdf 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
}
 800bea2:	e175      	b.n	800c190 <FUN_Modbus_Read+0x410>
			else if(RS485RxMOData[1] == 0x06)
 800bea4:	4b48      	ldr	r3, [pc, #288]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bea6:	785b      	ldrb	r3, [r3, #1]
 800bea8:	2b06      	cmp	r3, #6
 800beaa:	f040 809d 	bne.w	800bfe8 <FUN_Modbus_Read+0x268>
				FUN_Modbus_RxCallback_Flag();
 800beae:	f7ff fbc3 	bl	800b638 <FUN_Modbus_RxCallback_Flag>
				Data_Register_cnt = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	72fb      	strb	r3, [r7, #11]
				Addrs_Start = RS485RxMOData[3];
 800beb6:	4b44      	ldr	r3, [pc, #272]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800beb8:	78db      	ldrb	r3, [r3, #3]
 800beba:	72bb      	strb	r3, [r7, #10]
				Data_Word	= RS485RxMOData[5];
 800bebc:	4b42      	ldr	r3, [pc, #264]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bebe:	795b      	ldrb	r3, [r3, #5]
 800bec0:	727b      	strb	r3, [r7, #9]
				if(Addrs_Start == 0x40)
 800bec2:	7abb      	ldrb	r3, [r7, #10]
 800bec4:	2b40      	cmp	r3, #64	@ 0x40
 800bec6:	d14f      	bne.n	800bf68 <FUN_Modbus_Read+0x1e8>
					if(Data_Word > 1)
 800bec8:	7a7b      	ldrb	r3, [r7, #9]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d905      	bls.n	800beda <FUN_Modbus_Read+0x15a>
						FUN_Modbus_RxCallback_ERROR(Function, 0x02);
 800bece:	7b3b      	ldrb	r3, [r7, #12]
 800bed0:	2102      	movs	r1, #2
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7ff fcc4 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
}
 800bed8:	e15a      	b.n	800c190 <FUN_Modbus_Read+0x410>
						if(RS485RxMOData[5] == 1){
 800beda:	4b3b      	ldr	r3, [pc, #236]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bedc:	795b      	ldrb	r3, [r3, #5]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d10e      	bne.n	800bf00 <FUN_Modbus_Read+0x180>
							Gas_Sensor.Gas_Detect = 0;
 800bee2:	4b3c      	ldr	r3, [pc, #240]	@ (800bfd4 <FUN_Modbus_Read+0x254>)
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
							ui.Status.Bit.SMOKE_DETECT = 0;
 800beea:	4a3b      	ldr	r2, [pc, #236]	@ (800bfd8 <FUN_Modbus_Read+0x258>)
 800beec:	7853      	ldrb	r3, [r2, #1]
 800beee:	f36f 0341 	bfc	r3, #1, #1
 800bef2:	7053      	strb	r3, [r2, #1]
							ui.temp_alarm_bit = 0;
 800bef4:	4b38      	ldr	r3, [pc, #224]	@ (800bfd8 <FUN_Modbus_Read+0x258>)
 800bef6:	2200      	movs	r2, #0
 800bef8:	761a      	strb	r2, [r3, #24]
							ui.temp_warring_bit = 0;
 800befa:	4b37      	ldr	r3, [pc, #220]	@ (800bfd8 <FUN_Modbus_Read+0x258>)
 800befc:	2200      	movs	r2, #0
 800befe:	75da      	strb	r2, [r3, #23]
						Read_Data_Tx[0] = HsdID;
 800bf00:	4b32      	ldr	r3, [pc, #200]	@ (800bfcc <FUN_Modbus_Read+0x24c>)
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	4b35      	ldr	r3, [pc, #212]	@ (800bfdc <FUN_Modbus_Read+0x25c>)
 800bf08:	701a      	strb	r2, [r3, #0]
						Read_Data_Tx[1] = 0x06;
 800bf0a:	4b34      	ldr	r3, [pc, #208]	@ (800bfdc <FUN_Modbus_Read+0x25c>)
 800bf0c:	2206      	movs	r2, #6
 800bf0e:	705a      	strb	r2, [r3, #1]
						Read_Data_Tx[2] = 0xA0;
 800bf10:	4b32      	ldr	r3, [pc, #200]	@ (800bfdc <FUN_Modbus_Read+0x25c>)
 800bf12:	22a0      	movs	r2, #160	@ 0xa0
 800bf14:	709a      	strb	r2, [r3, #2]
						Read_Data_Tx[3] = Addrs_Start;
 800bf16:	4a31      	ldr	r2, [pc, #196]	@ (800bfdc <FUN_Modbus_Read+0x25c>)
 800bf18:	7abb      	ldrb	r3, [r7, #10]
 800bf1a:	70d3      	strb	r3, [r2, #3]
						Read_Data_Tx[4] = 0x00;
 800bf1c:	4b2f      	ldr	r3, [pc, #188]	@ (800bfdc <FUN_Modbus_Read+0x25c>)
 800bf1e:	2200      	movs	r2, #0
 800bf20:	711a      	strb	r2, [r3, #4]
						Read_Data_Tx[5] = RS485RxMOData[5];
 800bf22:	4b29      	ldr	r3, [pc, #164]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bf24:	795a      	ldrb	r2, [r3, #5]
 800bf26:	4b2d      	ldr	r3, [pc, #180]	@ (800bfdc <FUN_Modbus_Read+0x25c>)
 800bf28:	715a      	strb	r2, [r3, #5]
						CRCRes =CRC16((uint8_t*)&RS485RxMOData, 6);
 800bf2a:	2106      	movs	r1, #6
 800bf2c:	4826      	ldr	r0, [pc, #152]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bf2e:	f7ff fb17 	bl	800b560 <CRC16>
 800bf32:	4603      	mov	r3, r0
 800bf34:	80bb      	strh	r3, [r7, #4]
						Read_Data_Tx[7] = (uint8_t)(CRCRes >> 8);
 800bf36:	88bb      	ldrh	r3, [r7, #4]
 800bf38:	0a1b      	lsrs	r3, r3, #8
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	4b27      	ldr	r3, [pc, #156]	@ (800bfdc <FUN_Modbus_Read+0x25c>)
 800bf40:	71da      	strb	r2, [r3, #7]
						Read_Data_Tx[6] = (uint8_t)(CRCRes & 0xFF);
 800bf42:	88bb      	ldrh	r3, [r7, #4]
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	4b25      	ldr	r3, [pc, #148]	@ (800bfdc <FUN_Modbus_Read+0x25c>)
 800bf48:	719a      	strb	r2, [r3, #6]
						RS48501_TxPos++;
 800bf4a:	4b25      	ldr	r3, [pc, #148]	@ (800bfe0 <FUN_Modbus_Read+0x260>)
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	4b23      	ldr	r3, [pc, #140]	@ (800bfe0 <FUN_Modbus_Read+0x260>)
 800bf54:	701a      	strb	r2, [r3, #0]
						if(RS48501_TxPos >= 20)	RS48501_TxPos = 0;
 800bf56:	4b22      	ldr	r3, [pc, #136]	@ (800bfe0 <FUN_Modbus_Read+0x260>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	2b13      	cmp	r3, #19
 800bf5c:	f240 8118 	bls.w	800c190 <FUN_Modbus_Read+0x410>
 800bf60:	4b1f      	ldr	r3, [pc, #124]	@ (800bfe0 <FUN_Modbus_Read+0x260>)
 800bf62:	2200      	movs	r2, #0
 800bf64:	701a      	strb	r2, [r3, #0]
}
 800bf66:	e113      	b.n	800c190 <FUN_Modbus_Read+0x410>
					if((Addrs_Start >= 0x10) && (Addrs_Start <= 0x1E))
 800bf68:	7abb      	ldrb	r3, [r7, #10]
 800bf6a:	2b0f      	cmp	r3, #15
 800bf6c:	d925      	bls.n	800bfba <FUN_Modbus_Read+0x23a>
 800bf6e:	7abb      	ldrb	r3, [r7, #10]
 800bf70:	2b1e      	cmp	r3, #30
 800bf72:	d822      	bhi.n	800bfba <FUN_Modbus_Read+0x23a>
						if(Addrs_Start %2 == 0)
 800bf74:	7abb      	ldrb	r3, [r7, #10]
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d116      	bne.n	800bfae <FUN_Modbus_Read+0x22e>
							Data_Register_cnt = Addrs_Start - 0x10;
 800bf80:	7abb      	ldrb	r3, [r7, #10]
 800bf82:	3b10      	subs	r3, #16
 800bf84:	72fb      	strb	r3, [r7, #11]
							Data_Register[Data_Register_cnt] 	= RS485RxMOData[4];
 800bf86:	7afb      	ldrb	r3, [r7, #11]
 800bf88:	4a0f      	ldr	r2, [pc, #60]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bf8a:	7911      	ldrb	r1, [r2, #4]
 800bf8c:	4a15      	ldr	r2, [pc, #84]	@ (800bfe4 <FUN_Modbus_Read+0x264>)
 800bf8e:	54d1      	strb	r1, [r2, r3]
							Data_Register[Data_Register_cnt+1] 	= RS485RxMOData[5];
 800bf90:	7afb      	ldrb	r3, [r7, #11]
 800bf92:	3301      	adds	r3, #1
 800bf94:	4a0c      	ldr	r2, [pc, #48]	@ (800bfc8 <FUN_Modbus_Read+0x248>)
 800bf96:	7951      	ldrb	r1, [r2, #5]
 800bf98:	4a12      	ldr	r2, [pc, #72]	@ (800bfe4 <FUN_Modbus_Read+0x264>)
 800bf9a:	54d1      	strb	r1, [r2, r3]
							FUN_Modbus_Write_save();
 800bf9c:	f7ff fbde 	bl	800b75c <FUN_Modbus_Write_save>
							FUN_Modbus_RxCallback_ReadWriteData(Addrs_Start, 0x01, Function);
 800bfa0:	7b3a      	ldrb	r2, [r7, #12]
 800bfa2:	7abb      	ldrb	r3, [r7, #10]
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7ff fc9c 	bl	800b8e4 <FUN_Modbus_RxCallback_ReadWriteData>
						if(Addrs_Start %2 == 0)
 800bfac:	e0f0      	b.n	800c190 <FUN_Modbus_Read+0x410>
							FUN_Modbus_RxCallback_ERROR(Function, 0x02);
 800bfae:	7b3b      	ldrb	r3, [r7, #12]
 800bfb0:	2102      	movs	r1, #2
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fc54 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
						if(Addrs_Start %2 == 0)
 800bfb8:	e0ea      	b.n	800c190 <FUN_Modbus_Read+0x410>
						FUN_Modbus_RxCallback_ERROR(Function, 0x02);
 800bfba:	7b3b      	ldrb	r3, [r7, #12]
 800bfbc:	2102      	movs	r1, #2
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7ff fc4e 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
}
 800bfc4:	e0e4      	b.n	800c190 <FUN_Modbus_Read+0x410>
 800bfc6:	bf00      	nop
 800bfc8:	20000558 	.word	0x20000558
 800bfcc:	20000572 	.word	0x20000572
 800bfd0:	20000574 	.word	0x20000574
 800bfd4:	200005c8 	.word	0x200005c8
 800bfd8:	200004f0 	.word	0x200004f0
 800bfdc:	200004b0 	.word	0x200004b0
 800bfe0:	20000524 	.word	0x20000524
 800bfe4:	200004d8 	.word	0x200004d8
			else if(RS485RxMOData[1] == 0x10)
 800bfe8:	4b6b      	ldr	r3, [pc, #428]	@ (800c198 <FUN_Modbus_Read+0x418>)
 800bfea:	785b      	ldrb	r3, [r3, #1]
 800bfec:	2b10      	cmp	r3, #16
 800bfee:	f040 80a5 	bne.w	800c13c <FUN_Modbus_Read+0x3bc>
				FUN_Modbus_RxCallback_Flag();
 800bff2:	f7ff fb21 	bl	800b638 <FUN_Modbus_RxCallback_Flag>
				Data_Register_cnt = 0;
 800bff6:	2300      	movs	r3, #0
 800bff8:	72fb      	strb	r3, [r7, #11]
				Addrs_Start = RS485RxMOData[3];
 800bffa:	4b67      	ldr	r3, [pc, #412]	@ (800c198 <FUN_Modbus_Read+0x418>)
 800bffc:	78db      	ldrb	r3, [r3, #3]
 800bffe:	72bb      	strb	r3, [r7, #10]
				Data_Word	= RS485RxMOData[5];
 800c000:	4b65      	ldr	r3, [pc, #404]	@ (800c198 <FUN_Modbus_Read+0x418>)
 800c002:	795b      	ldrb	r3, [r3, #5]
 800c004:	727b      	strb	r3, [r7, #9]
				ByteCount	= RS485RxMOData[6];
 800c006:	4b64      	ldr	r3, [pc, #400]	@ (800c198 <FUN_Modbus_Read+0x418>)
 800c008:	799b      	ldrb	r3, [r3, #6]
 800c00a:	723b      	strb	r3, [r7, #8]
				byteCountTo = Data_Word * 2;
 800c00c:	7a7b      	ldrb	r3, [r7, #9]
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	71fb      	strb	r3, [r7, #7]
				Word_Max = 8 - ((Addrs_Start - 0x10) / 2);
 800c012:	7abb      	ldrb	r3, [r7, #10]
 800c014:	3b10      	subs	r3, #16
 800c016:	0fda      	lsrs	r2, r3, #31
 800c018:	4413      	add	r3, r2
 800c01a:	105b      	asrs	r3, r3, #1
 800c01c:	425b      	negs	r3, r3
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	3308      	adds	r3, #8
 800c022:	75fb      	strb	r3, [r7, #23]
				Data_Register_cnt = Addrs_Start - 0x10;
 800c024:	7abb      	ldrb	r3, [r7, #10]
 800c026:	3b10      	subs	r3, #16
 800c028:	72fb      	strb	r3, [r7, #11]
				if((Addrs_Start >= 0x10) && (Addrs_Start <= 0x1E))
 800c02a:	7abb      	ldrb	r3, [r7, #10]
 800c02c:	2b0f      	cmp	r3, #15
 800c02e:	d97f      	bls.n	800c130 <FUN_Modbus_Read+0x3b0>
 800c030:	7abb      	ldrb	r3, [r7, #10]
 800c032:	2b1e      	cmp	r3, #30
 800c034:	d87c      	bhi.n	800c130 <FUN_Modbus_Read+0x3b0>
					if(Addrs_Start %2 == 0)
 800c036:	7abb      	ldrb	r3, [r7, #10]
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d170      	bne.n	800c124 <FUN_Modbus_Read+0x3a4>
						if(Data_Word < 9)
 800c042:	7a7b      	ldrb	r3, [r7, #9]
 800c044:	2b08      	cmp	r3, #8
 800c046:	d867      	bhi.n	800c118 <FUN_Modbus_Read+0x398>
							if(Data_Word > Word_Max)
 800c048:	7a7a      	ldrb	r2, [r7, #9]
 800c04a:	7dfb      	ldrb	r3, [r7, #23]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d905      	bls.n	800c05c <FUN_Modbus_Read+0x2dc>
								FUN_Modbus_RxCallback_ERROR(Function, 0x02);
 800c050:	7b3b      	ldrb	r3, [r7, #12]
 800c052:	2102      	movs	r1, #2
 800c054:	4618      	mov	r0, r3
 800c056:	f7ff fc03 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
					if(Addrs_Start %2 == 0)
 800c05a:	e098      	b.n	800c18e <FUN_Modbus_Read+0x40e>
								if(ByteCount == byteCountTo)
 800c05c:	7a3a      	ldrb	r2, [r7, #8]
 800c05e:	79fb      	ldrb	r3, [r7, #7]
 800c060:	429a      	cmp	r2, r3
 800c062:	d153      	bne.n	800c10c <FUN_Modbus_Read+0x38c>
									if(Data_Word == 0)
 800c064:	7a7b      	ldrb	r3, [r7, #9]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d105      	bne.n	800c076 <FUN_Modbus_Read+0x2f6>
										FUN_Modbus_RxCallback_ERROR(Function, 0x03);
 800c06a:	7b3b      	ldrb	r3, [r7, #12]
 800c06c:	2103      	movs	r1, #3
 800c06e:	4618      	mov	r0, r3
 800c070:	f7ff fbf6 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
					if(Addrs_Start %2 == 0)
 800c074:	e08b      	b.n	800c18e <FUN_Modbus_Read+0x40e>
										jj = 7;
 800c076:	2307      	movs	r3, #7
 800c078:	757b      	strb	r3, [r7, #21]
										for(ii = Data_Register_cnt; ii < Data_Register_cnt + ByteCount; ii++)
 800c07a:	7afb      	ldrb	r3, [r7, #11]
 800c07c:	75bb      	strb	r3, [r7, #22]
 800c07e:	e00b      	b.n	800c098 <FUN_Modbus_Read+0x318>
											Data_Register[ii] = RS485RxMOData[jj++];
 800c080:	7d7b      	ldrb	r3, [r7, #21]
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	757a      	strb	r2, [r7, #21]
 800c086:	4619      	mov	r1, r3
 800c088:	7dbb      	ldrb	r3, [r7, #22]
 800c08a:	4a43      	ldr	r2, [pc, #268]	@ (800c198 <FUN_Modbus_Read+0x418>)
 800c08c:	5c51      	ldrb	r1, [r2, r1]
 800c08e:	4a43      	ldr	r2, [pc, #268]	@ (800c19c <FUN_Modbus_Read+0x41c>)
 800c090:	54d1      	strb	r1, [r2, r3]
										for(ii = Data_Register_cnt; ii < Data_Register_cnt + ByteCount; ii++)
 800c092:	7dbb      	ldrb	r3, [r7, #22]
 800c094:	3301      	adds	r3, #1
 800c096:	75bb      	strb	r3, [r7, #22]
 800c098:	7dba      	ldrb	r2, [r7, #22]
 800c09a:	7af9      	ldrb	r1, [r7, #11]
 800c09c:	7a3b      	ldrb	r3, [r7, #8]
 800c09e:	440b      	add	r3, r1
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	dbed      	blt.n	800c080 <FUN_Modbus_Read+0x300>
										FUN_Modbus_Write_save();
 800c0a4:	f7ff fb5a 	bl	800b75c <FUN_Modbus_Write_save>
										Read_Data_Tx[0] = HsdID;
 800c0a8:	4b3d      	ldr	r3, [pc, #244]	@ (800c1a0 <FUN_Modbus_Read+0x420>)
 800c0aa:	881b      	ldrh	r3, [r3, #0]
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	4b3d      	ldr	r3, [pc, #244]	@ (800c1a4 <FUN_Modbus_Read+0x424>)
 800c0b0:	701a      	strb	r2, [r3, #0]
										Read_Data_Tx[1] = 0x10;
 800c0b2:	4b3c      	ldr	r3, [pc, #240]	@ (800c1a4 <FUN_Modbus_Read+0x424>)
 800c0b4:	2210      	movs	r2, #16
 800c0b6:	705a      	strb	r2, [r3, #1]
										Read_Data_Tx[2] = 0xA0;
 800c0b8:	4b3a      	ldr	r3, [pc, #232]	@ (800c1a4 <FUN_Modbus_Read+0x424>)
 800c0ba:	22a0      	movs	r2, #160	@ 0xa0
 800c0bc:	709a      	strb	r2, [r3, #2]
										Read_Data_Tx[3] = Addrs_Start;
 800c0be:	4a39      	ldr	r2, [pc, #228]	@ (800c1a4 <FUN_Modbus_Read+0x424>)
 800c0c0:	7abb      	ldrb	r3, [r7, #10]
 800c0c2:	70d3      	strb	r3, [r2, #3]
										Read_Data_Tx[4] = 0x00;
 800c0c4:	4b37      	ldr	r3, [pc, #220]	@ (800c1a4 <FUN_Modbus_Read+0x424>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	711a      	strb	r2, [r3, #4]
										Read_Data_Tx[5] = Data_Word;
 800c0ca:	4a36      	ldr	r2, [pc, #216]	@ (800c1a4 <FUN_Modbus_Read+0x424>)
 800c0cc:	7a7b      	ldrb	r3, [r7, #9]
 800c0ce:	7153      	strb	r3, [r2, #5]
										CRCRes =CRC16((uint8_t*)&RS485RxMOData, 6);
 800c0d0:	2106      	movs	r1, #6
 800c0d2:	4831      	ldr	r0, [pc, #196]	@ (800c198 <FUN_Modbus_Read+0x418>)
 800c0d4:	f7ff fa44 	bl	800b560 <CRC16>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	80bb      	strh	r3, [r7, #4]
										Read_Data_Tx[7] = (uint8_t)(CRCRes >> 8);
 800c0dc:	88bb      	ldrh	r3, [r7, #4]
 800c0de:	0a1b      	lsrs	r3, r3, #8
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	b2da      	uxtb	r2, r3
 800c0e4:	4b2f      	ldr	r3, [pc, #188]	@ (800c1a4 <FUN_Modbus_Read+0x424>)
 800c0e6:	71da      	strb	r2, [r3, #7]
										Read_Data_Tx[6] = (uint8_t)(CRCRes & 0xFF);
 800c0e8:	88bb      	ldrh	r3, [r7, #4]
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	4b2d      	ldr	r3, [pc, #180]	@ (800c1a4 <FUN_Modbus_Read+0x424>)
 800c0ee:	719a      	strb	r2, [r3, #6]
										RS48501_TxPos++;
 800c0f0:	4b2d      	ldr	r3, [pc, #180]	@ (800c1a8 <FUN_Modbus_Read+0x428>)
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	4b2b      	ldr	r3, [pc, #172]	@ (800c1a8 <FUN_Modbus_Read+0x428>)
 800c0fa:	701a      	strb	r2, [r3, #0]
										if(RS48501_TxPos >= 20)	RS48501_TxPos = 0;
 800c0fc:	4b2a      	ldr	r3, [pc, #168]	@ (800c1a8 <FUN_Modbus_Read+0x428>)
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	2b13      	cmp	r3, #19
 800c102:	d944      	bls.n	800c18e <FUN_Modbus_Read+0x40e>
 800c104:	4b28      	ldr	r3, [pc, #160]	@ (800c1a8 <FUN_Modbus_Read+0x428>)
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
					if(Addrs_Start %2 == 0)
 800c10a:	e040      	b.n	800c18e <FUN_Modbus_Read+0x40e>
									FUN_Modbus_RxCallback_ERROR(Function, 0x02);
 800c10c:	7b3b      	ldrb	r3, [r7, #12]
 800c10e:	2102      	movs	r1, #2
 800c110:	4618      	mov	r0, r3
 800c112:	f7ff fba5 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
					if(Addrs_Start %2 == 0)
 800c116:	e03a      	b.n	800c18e <FUN_Modbus_Read+0x40e>
							FUN_Modbus_RxCallback_ERROR(Function, 0x02);
 800c118:	7b3b      	ldrb	r3, [r7, #12]
 800c11a:	2102      	movs	r1, #2
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7ff fb9f 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
					if(Addrs_Start %2 == 0)
 800c122:	e034      	b.n	800c18e <FUN_Modbus_Read+0x40e>
						FUN_Modbus_RxCallback_ERROR(Function, 0x02);
 800c124:	7b3b      	ldrb	r3, [r7, #12]
 800c126:	2102      	movs	r1, #2
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff fb99 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
					if(Addrs_Start %2 == 0)
 800c12e:	e02e      	b.n	800c18e <FUN_Modbus_Read+0x40e>
					FUN_Modbus_RxCallback_ERROR(Function, 0x02);
 800c130:	7b3b      	ldrb	r3, [r7, #12]
 800c132:	2102      	movs	r1, #2
 800c134:	4618      	mov	r0, r3
 800c136:	f7ff fb93 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
}
 800c13a:	e029      	b.n	800c190 <FUN_Modbus_Read+0x410>
				FUN_Modbus_RxCallback_ERROR(Function, 0x01);
 800c13c:	7b3b      	ldrb	r3, [r7, #12]
 800c13e:	2101      	movs	r1, #1
 800c140:	4618      	mov	r0, r3
 800c142:	f7ff fb8d 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
}
 800c146:	e023      	b.n	800c190 <FUN_Modbus_Read+0x410>
			Function = RS485RxMOData[1];
 800c148:	4b13      	ldr	r3, [pc, #76]	@ (800c198 <FUN_Modbus_Read+0x418>)
 800c14a:	785b      	ldrb	r3, [r3, #1]
 800c14c:	733b      	strb	r3, [r7, #12]
			FUN_Modbus_RxCallback_ERROR(Function, 0x03);
 800c14e:	7b3b      	ldrb	r3, [r7, #12]
 800c150:	2103      	movs	r1, #3
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff fb84 	bl	800b860 <FUN_Modbus_RxCallback_ERROR>
			RS485Rx.Rx_cnt = 0;
 800c158:	4b14      	ldr	r3, [pc, #80]	@ (800c1ac <FUN_Modbus_Read+0x42c>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	829a      	strh	r2, [r3, #20]
			RS485Rx.result_MO = 0;
 800c15e:	4b13      	ldr	r3, [pc, #76]	@ (800c1ac <FUN_Modbus_Read+0x42c>)
 800c160:	2200      	movs	r2, #0
 800c162:	75da      	strb	r2, [r3, #23]
}
 800c164:	e014      	b.n	800c190 <FUN_Modbus_Read+0x410>
		RS485Rx.Rx_cnt = 0;
 800c166:	4b11      	ldr	r3, [pc, #68]	@ (800c1ac <FUN_Modbus_Read+0x42c>)
 800c168:	2200      	movs	r2, #0
 800c16a:	829a      	strh	r2, [r3, #20]
		RS485Rx.result_MO = 0;
 800c16c:	4b0f      	ldr	r3, [pc, #60]	@ (800c1ac <FUN_Modbus_Read+0x42c>)
 800c16e:	2200      	movs	r2, #0
 800c170:	75da      	strb	r2, [r3, #23]
		for (uint16_t i = 0; i < 25 ; i++){
 800c172:	2300      	movs	r3, #0
 800c174:	81fb      	strh	r3, [r7, #14]
 800c176:	e006      	b.n	800c186 <FUN_Modbus_Read+0x406>
			 RS485RxMOData[i] = 0x00;
 800c178:	89fb      	ldrh	r3, [r7, #14]
 800c17a:	4a07      	ldr	r2, [pc, #28]	@ (800c198 <FUN_Modbus_Read+0x418>)
 800c17c:	2100      	movs	r1, #0
 800c17e:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < 25 ; i++){
 800c180:	89fb      	ldrh	r3, [r7, #14]
 800c182:	3301      	adds	r3, #1
 800c184:	81fb      	strh	r3, [r7, #14]
 800c186:	89fb      	ldrh	r3, [r7, #14]
 800c188:	2b18      	cmp	r3, #24
 800c18a:	d9f5      	bls.n	800c178 <FUN_Modbus_Read+0x3f8>
}
 800c18c:	e000      	b.n	800c190 <FUN_Modbus_Read+0x410>
					if(Addrs_Start %2 == 0)
 800c18e:	bf00      	nop
}
 800c190:	bf00      	nop
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	20000558 	.word	0x20000558
 800c19c:	200004d8 	.word	0x200004d8
 800c1a0:	20000572 	.word	0x20000572
 800c1a4:	200004b0 	.word	0x200004b0
 800c1a8:	20000524 	.word	0x20000524
 800c1ac:	20000574 	.word	0x20000574

0800c1b0 <RS485_Init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void RS485_Init(void)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	af00      	add	r7, sp, #0
	// Init ID
	HsdID = ui.ID;
 800c1b4:	4b19      	ldr	r3, [pc, #100]	@ (800c21c <RS485_Init+0x6c>)
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	4b19      	ldr	r3, [pc, #100]	@ (800c220 <RS485_Init+0x70>)
 800c1bc:	801a      	strh	r2, [r3, #0]
	// Init Status
	//RS485Tx.running_bit = 1;
	ui.Status.Bit.RUNNING = 1;
 800c1be:	4a17      	ldr	r2, [pc, #92]	@ (800c21c <RS485_Init+0x6c>)
 800c1c0:	7853      	ldrb	r3, [r2, #1]
 800c1c2:	f043 0301 	orr.w	r3, r3, #1
 800c1c6:	7053      	strb	r3, [r2, #1]
	RS485Rx.detect_staet_reset_bit = 0;
 800c1c8:	4b16      	ldr	r3, [pc, #88]	@ (800c224 <RS485_Init+0x74>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	801a      	strh	r2, [r3, #0]
	RS485Rx.smoke_detect_set_bit = 0;
 800c1ce:	4b15      	ldr	r3, [pc, #84]	@ (800c224 <RS485_Init+0x74>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	709a      	strb	r2, [r3, #2]
	RS485Rx.smoke_detect_set_val = 0;
 800c1d4:	4b13      	ldr	r3, [pc, #76]	@ (800c224 <RS485_Init+0x74>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	809a      	strh	r2, [r3, #4]
	ui.TxCount = 0;
 800c1da:	4b10      	ldr	r3, [pc, #64]	@ (800c21c <RS485_Init+0x6c>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	RS485Rx.Rx_cnt = 0;
 800c1e2:	4b10      	ldr	r3, [pc, #64]	@ (800c224 <RS485_Init+0x74>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	829a      	strh	r2, [r3, #20]
	RS485Rx.Detection_Error = 0;
 800c1e8:	4b0e      	ldr	r3, [pc, #56]	@ (800c224 <RS485_Init+0x74>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	841a      	strh	r2, [r3, #32]
	EEPROM.SaveData_Flag = 0;
 800c1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c228 <RS485_Init+0x78>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	701a      	strb	r2, [r3, #0]
	//ui.temp_warring_bit = 0;
	//ui.SMK_Level = RANK_1;
	//ui.Protocol_Type = 1;
	RS485_Baudrate_Init(ui.Baudrate);
 800c1f4:	4b09      	ldr	r3, [pc, #36]	@ (800c21c <RS485_Init+0x6c>)
 800c1f6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f001 f892 	bl	800d324 <RS485_Baudrate_Init>
	HAL_UART_Receive_IT(&huart5, &RS485RxA, 1);
 800c200:	2201      	movs	r2, #1
 800c202:	490a      	ldr	r1, [pc, #40]	@ (800c22c <RS485_Init+0x7c>)
 800c204:	480a      	ldr	r0, [pc, #40]	@ (800c230 <RS485_Init+0x80>)
 800c206:	f008 fdb9 	bl	8014d7c <HAL_UART_Receive_IT>
	RS485_RE();
 800c20a:	2200      	movs	r2, #0
 800c20c:	2110      	movs	r1, #16
 800c20e:	4809      	ldr	r0, [pc, #36]	@ (800c234 <RS485_Init+0x84>)
 800c210:	f005 fc5e 	bl	8011ad0 <HAL_GPIO_WritePin>

	FUN_Modbus_init();
 800c214:	f7ff f9e2 	bl	800b5dc <FUN_Modbus_init>
}
 800c218:	bf00      	nop
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	200004f0 	.word	0x200004f0
 800c220:	20000572 	.word	0x20000572
 800c224:	20000574 	.word	0x20000574
 800c228:	20000298 	.word	0x20000298
 800c22c:	200005c4 	.word	0x200005c4
 800c230:	200009b0 	.word	0x200009b0
 800c234:	48000400 	.word	0x48000400

0800c238 <FUN_RS485_routine>:
/****************************************************************************/
/*	Overview	:	변경 ID 값 Update, RS485 통신 에러 점검                                          */
/*	Return value:	void													*/
/****************************************************************************/
void FUN_RS485_routine(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	af00      	add	r7, sp, #0
	HsdID = ui.ID;
 800c23c:	4b04      	ldr	r3, [pc, #16]	@ (800c250 <FUN_RS485_routine+0x18>)
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	461a      	mov	r2, r3
 800c242:	4b04      	ldr	r3, [pc, #16]	@ (800c254 <FUN_RS485_routine+0x1c>)
 800c244:	801a      	strh	r2, [r3, #0]
	FUN_RS485_Error_routine();
 800c246:	f000 fff1 	bl	800d22c <FUN_RS485_Error_routine>
}
 800c24a:	bf00      	nop
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	200004f0 	.word	0x200004f0
 800c254:	20000572 	.word	0x20000572

0800c258 <AddF_ReqDataToPC>:
/*	Overview	:	RS485-01 - Make Frame and Send to 상위 제어기(PC or PLC) 	*/
/*	Return value:	void													*/
/****************************************************************************/
/* Example: Sensor --> PC : AddF_ReqDataToPC(0,18,0x05A1,0x01); */
void AddF_ReqDataToPC(uint16_t size, uint16_t cmd, uint8_t code )  // 데이터 송신을 위한 프레임 구성 / 전송 준비 인듯 // RxCallback
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08a      	sub	sp, #40	@ 0x28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	4603      	mov	r3, r0
 800c260:	80fb      	strh	r3, [r7, #6]
 800c262:	460b      	mov	r3, r1
 800c264:	80bb      	strh	r3, [r7, #4]
 800c266:	4613      	mov	r3, r2
 800c268:	70fb      	strb	r3, [r7, #3]
	uint8_t RS48501_TxBuf[26];
	uint16_t checksum, ii;
	int16_t intTmp;

	//프레임
	RS48501_TxBuf[0] = PACKET_STX;
 800c26a:	2353      	movs	r3, #83	@ 0x53
 800c26c:	723b      	strb	r3, [r7, #8]
	//Length 길이
	RS48501_TxBuf[1] = (uint8_t)(size>> 8);
 800c26e:	88fb      	ldrh	r3, [r7, #6]
 800c270:	0a1b      	lsrs	r3, r3, #8
 800c272:	b29b      	uxth	r3, r3
 800c274:	b2db      	uxtb	r3, r3
 800c276:	727b      	strb	r3, [r7, #9]
	RS48501_TxBuf[2] = (uint8_t)(size & 0xFF);
 800c278:	88fb      	ldrh	r3, [r7, #6]
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	72bb      	strb	r3, [r7, #10]
	//CMD
	RS48501_TxBuf[3] = (uint8_t)(cmd>> 8);
 800c27e:	88bb      	ldrh	r3, [r7, #4]
 800c280:	0a1b      	lsrs	r3, r3, #8
 800c282:	b29b      	uxth	r3, r3
 800c284:	b2db      	uxtb	r3, r3
 800c286:	72fb      	strb	r3, [r7, #11]
	RS48501_TxBuf[4] = (uint8_t)(cmd & 0xFF);
 800c288:	88bb      	ldrh	r3, [r7, #4]
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	733b      	strb	r3, [r7, #12]
	//Code
	RS48501_TxBuf[5] = code;
 800c28e:	78fb      	ldrb	r3, [r7, #3]
 800c290:	737b      	strb	r3, [r7, #13]

	// Tx Count
	ui.TxCount++;
 800c292:	4b2c      	ldr	r3, [pc, #176]	@ (800c344 <AddF_ReqDataToPC+0xec>)
 800c294:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c298:	3301      	adds	r3, #1
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	4b29      	ldr	r3, [pc, #164]	@ (800c344 <AddF_ReqDataToPC+0xec>)
 800c29e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	RS48501_TxBuf[6] = ui.TxCount;
 800c2a2:	4b28      	ldr	r3, [pc, #160]	@ (800c344 <AddF_ReqDataToPC+0xec>)
 800c2a4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c2a8:	73bb      	strb	r3, [r7, #14]

	// HSD ID Update
	RS48501_TxBuf[7] = HsdID;
 800c2aa:	4b27      	ldr	r3, [pc, #156]	@ (800c348 <AddF_ReqDataToPC+0xf0>)
 800c2ac:	881b      	ldrh	r3, [r3, #0]
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	73fb      	strb	r3, [r7, #15]

	/* Data Range */
	// Status(MSB)
	// 상태 추가에 대해서 고민 필요(Display Slip, Buzzer 설정, 연기감지농도 설정, End_Code 설정, HeartBit 설정)
	RS48501_TxBuf[8] = 0x00;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	743b      	strb	r3, [r7, #16]
	//Disable slip
	RS48501_TxBuf[8] = 0x00;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	743b      	strb	r3, [r7, #16]
	//부저
	RS48501_TxBuf[8] |= 0x00 << 1;
 800c2ba:	7c3b      	ldrb	r3, [r7, #16]
 800c2bc:	743b      	strb	r3, [r7, #16]
	//연기 감지 LEVEL
	RS48501_TxBuf[8] |= ui.SMK_Level << 2;
 800c2be:	7c3b      	ldrb	r3, [r7, #16]
 800c2c0:	b25a      	sxtb	r2, r3
 800c2c2:	4b20      	ldr	r3, [pc, #128]	@ (800c344 <AddF_ReqDataToPC+0xec>)
 800c2c4:	7c1b      	ldrb	r3, [r3, #16]
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	b25b      	sxtb	r3, r3
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	b25b      	sxtb	r3, r3
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	743b      	strb	r3, [r7, #16]
//	RS48501_TxBuf[8] |= Adc.SMK_Level << 2;
	//Heartbeat
	RS48501_TxBuf[8] |= ui.HeartBit << 4;
 800c2d2:	7c3b      	ldrb	r3, [r7, #16]
 800c2d4:	b25a      	sxtb	r2, r3
 800c2d6:	4b1b      	ldr	r3, [pc, #108]	@ (800c344 <AddF_ReqDataToPC+0xec>)
 800c2d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c2dc:	011b      	lsls	r3, r3, #4
 800c2de:	b25b      	sxtb	r3, r3
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	b25b      	sxtb	r3, r3
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	743b      	strb	r3, [r7, #16]
//	RS48501_TxBuf[8] |= Button.Heatbit << 4;
//	RS48501_TxBuf[8] |= Button.Heatbit << 4;

	// Status(LSB)
	// Update Error Status
	if((Error.SHT30_Error == 1) || (EEPROM.Error == 1) || (RS485Rx.Checksum_Error == 1))
 800c2e8:	4b18      	ldr	r3, [pc, #96]	@ (800c34c <AddF_ReqDataToPC+0xf4>)
 800c2ea:	88db      	ldrh	r3, [r3, #6]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d009      	beq.n	800c304 <AddF_ReqDataToPC+0xac>
 800c2f0:	4b17      	ldr	r3, [pc, #92]	@ (800c350 <AddF_ReqDataToPC+0xf8>)
 800c2f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d004      	beq.n	800c304 <AddF_ReqDataToPC+0xac>
 800c2fa:	4b16      	ldr	r3, [pc, #88]	@ (800c354 <AddF_ReqDataToPC+0xfc>)
 800c2fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c300:	2b01      	cmp	r3, #1
 800c302:	d129      	bne.n	800c358 <AddF_ReqDataToPC+0x100>
	{
		ui.Detection_Error = 1;
 800c304:	4b0f      	ldr	r3, [pc, #60]	@ (800c344 <AddF_ReqDataToPC+0xec>)
 800c306:	2201      	movs	r2, #1
 800c308:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		if(Error.SHT30_Error == 1){
 800c30c:	4b0f      	ldr	r3, [pc, #60]	@ (800c34c <AddF_ReqDataToPC+0xf4>)
 800c30e:	88db      	ldrh	r3, [r3, #6]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d103      	bne.n	800c31c <AddF_ReqDataToPC+0xc4>
			ui.ErrorCode = 0x01;
 800c314:	4b0b      	ldr	r3, [pc, #44]	@ (800c344 <AddF_ReqDataToPC+0xec>)
 800c316:	2201      	movs	r2, #1
 800c318:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		}
		if(EEPROM.Error == 1){
 800c31c:	4b0c      	ldr	r3, [pc, #48]	@ (800c350 <AddF_ReqDataToPC+0xf8>)
 800c31e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c322:	2b01      	cmp	r3, #1
 800c324:	d103      	bne.n	800c32e <AddF_ReqDataToPC+0xd6>
			ui.ErrorCode = 0x02;
 800c326:	4b07      	ldr	r3, [pc, #28]	@ (800c344 <AddF_ReqDataToPC+0xec>)
 800c328:	2202      	movs	r2, #2
 800c32a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		}
		if(RS485Rx.Checksum_Error == 1){
 800c32e:	4b09      	ldr	r3, [pc, #36]	@ (800c354 <AddF_ReqDataToPC+0xfc>)
 800c330:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c334:	2b01      	cmp	r3, #1
 800c336:	d117      	bne.n	800c368 <AddF_ReqDataToPC+0x110>
			ui.ErrorCode = 0x03;
 800c338:	4b02      	ldr	r3, [pc, #8]	@ (800c344 <AddF_ReqDataToPC+0xec>)
 800c33a:	2203      	movs	r2, #3
 800c33c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		if(RS485Rx.Checksum_Error == 1){
 800c340:	e012      	b.n	800c368 <AddF_ReqDataToPC+0x110>
 800c342:	bf00      	nop
 800c344:	200004f0 	.word	0x200004f0
 800c348:	20000572 	.word	0x20000572
 800c34c:	200006d4 	.word	0x200006d4
 800c350:	20000298 	.word	0x20000298
 800c354:	20000574 	.word	0x20000574
		}
	}
	else{
		ui.ErrorCode = 0x00;
 800c358:	4bad      	ldr	r3, [pc, #692]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		ui.Detection_Error = 0;
 800c360:	4bab      	ldr	r3, [pc, #684]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c362:	2200      	movs	r2, #0
 800c364:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}
	RS48501_TxBuf[9] = 0x00;	// Status byte init
 800c368:	2300      	movs	r3, #0
 800c36a:	747b      	strb	r3, [r7, #17]
    // Running
	RS48501_TxBuf[9] = ui.Status.Bit.RUNNING;
 800c36c:	4ba8      	ldr	r3, [pc, #672]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c36e:	785b      	ldrb	r3, [r3, #1]
 800c370:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c374:	b2db      	uxtb	r3, r3
 800c376:	747b      	strb	r3, [r7, #17]
	//연기 감지
	RS48501_TxBuf[9] |= (ui.Status.Bit.SMOKE_DETECT << 1);//(RS485Tx.smoke_detect_on_bit << 1);
 800c378:	7c7b      	ldrb	r3, [r7, #17]
 800c37a:	b25a      	sxtb	r2, r3
 800c37c:	4ba4      	ldr	r3, [pc, #656]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c37e:	785b      	ldrb	r3, [r3, #1]
 800c380:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c384:	b2db      	uxtb	r3, r3
 800c386:	005b      	lsls	r3, r3, #1
 800c388:	b25b      	sxtb	r3, r3
 800c38a:	4313      	orrs	r3, r2
 800c38c:	b25b      	sxtb	r3, r3
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	747b      	strb	r3, [r7, #17]
	//온도 경고
	RS48501_TxBuf[9] |= (ui.temp_warring_bit << 2);
 800c392:	7c7b      	ldrb	r3, [r7, #17]
 800c394:	b25a      	sxtb	r2, r3
 800c396:	4b9e      	ldr	r3, [pc, #632]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c398:	7ddb      	ldrb	r3, [r3, #23]
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	b25b      	sxtb	r3, r3
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	b25b      	sxtb	r3, r3
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	747b      	strb	r3, [r7, #17]
	//온도 알람
	RS48501_TxBuf[9] |= (ui.temp_alarm_bit << 3);
 800c3a6:	7c7b      	ldrb	r3, [r7, #17]
 800c3a8:	b25a      	sxtb	r2, r3
 800c3aa:	4b99      	ldr	r3, [pc, #612]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c3ac:	7e1b      	ldrb	r3, [r3, #24]
 800c3ae:	00db      	lsls	r3, r3, #3
 800c3b0:	b25b      	sxtb	r3, r3
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	b25b      	sxtb	r3, r3
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	747b      	strb	r3, [r7, #17]
	//감지기 에러
	RS48501_TxBuf[9] |= (ui.Detection_Error << 4);
 800c3ba:	7c7b      	ldrb	r3, [r7, #17]
 800c3bc:	b25a      	sxtb	r2, r3
 800c3be:	4b94      	ldr	r3, [pc, #592]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c3c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c3c4:	011b      	lsls	r3, r3, #4
 800c3c6:	b25b      	sxtb	r3, r3
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	b25b      	sxtb	r3, r3
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	747b      	strb	r3, [r7, #17]
	//온도 enable/disable
	RS48501_TxBuf[9] |= (ui.temp_alarm_enable << 5);
 800c3d0:	7c7b      	ldrb	r3, [r7, #17]
 800c3d2:	b25a      	sxtb	r2, r3
 800c3d4:	4b8e      	ldr	r3, [pc, #568]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c3d6:	7d9b      	ldrb	r3, [r3, #22]
 800c3d8:	015b      	lsls	r3, r3, #5
 800c3da:	b25b      	sxtb	r3, r3
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	b25b      	sxtb	r3, r3
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	747b      	strb	r3, [r7, #17]
	//온도 경고 동작
	RS48501_TxBuf[9] |= (ui.temp_warring_maintain_bit << 6);
 800c3e4:	7c7b      	ldrb	r3, [r7, #17]
 800c3e6:	b25a      	sxtb	r2, r3
 800c3e8:	4b89      	ldr	r3, [pc, #548]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c3ea:	7e5b      	ldrb	r3, [r3, #25]
 800c3ec:	019b      	lsls	r3, r3, #6
 800c3ee:	b25b      	sxtb	r3, r3
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	b25b      	sxtb	r3, r3
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	747b      	strb	r3, [r7, #17]
	//온도 알람 동작
	RS48501_TxBuf[9] |= (ui.temp_alarm_maintain_bit << 7);
 800c3f8:	7c7b      	ldrb	r3, [r7, #17]
 800c3fa:	b25a      	sxtb	r2, r3
 800c3fc:	4b84      	ldr	r3, [pc, #528]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c3fe:	7e9b      	ldrb	r3, [r3, #26]
 800c400:	01db      	lsls	r3, r3, #7
 800c402:	b25b      	sxtb	r3, r3
 800c404:	4313      	orrs	r3, r2
 800c406:	b25b      	sxtb	r3, r3
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	747b      	strb	r3, [r7, #17]

	//ErrorCode
	RS48501_TxBuf[10] = ui.ErrorCode;
 800c40c:	4b80      	ldr	r3, [pc, #512]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c40e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c412:	74bb      	strb	r3, [r7, #18]

	// Update Analog Data
	// 온도/습도 값
	// 온도경고/알람 기준값, 편차 기준값
	RS485Rx.ff_cTemp_warring_R = ((int16_t)((ui.temp_warring+0.001) * 100));
 800c414:	4b7e      	ldr	r3, [pc, #504]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c416:	69db      	ldr	r3, [r3, #28]
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fc f861 	bl	80084e0 <__aeabi_f2d>
 800c41e:	a37a      	add	r3, pc, #488	@ (adr r3, 800c608 <AddF_ReqDataToPC+0x3b0>)
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	f7fb fefe 	bl	8008224 <__adddf3>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	4610      	mov	r0, r2
 800c42e:	4619      	mov	r1, r3
 800c430:	f04f 0200 	mov.w	r2, #0
 800c434:	4b77      	ldr	r3, [pc, #476]	@ (800c614 <AddF_ReqDataToPC+0x3bc>)
 800c436:	f7fc f8ab 	bl	8008590 <__aeabi_dmul>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4610      	mov	r0, r2
 800c440:	4619      	mov	r1, r3
 800c442:	f7fc fb3f 	bl	8008ac4 <__aeabi_d2iz>
 800c446:	4603      	mov	r3, r0
 800c448:	b21a      	sxth	r2, r3
 800c44a:	4b73      	ldr	r3, [pc, #460]	@ (800c618 <AddF_ReqDataToPC+0x3c0>)
 800c44c:	815a      	strh	r2, [r3, #10]
	RS485Rx.ff_cTemp_alarm_R = ((int16_t)((ui.temp_alarm+0.001) * 100));
 800c44e:	4b70      	ldr	r3, [pc, #448]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c450:	6a1b      	ldr	r3, [r3, #32]
 800c452:	4618      	mov	r0, r3
 800c454:	f7fc f844 	bl	80084e0 <__aeabi_f2d>
 800c458:	a36b      	add	r3, pc, #428	@ (adr r3, 800c608 <AddF_ReqDataToPC+0x3b0>)
 800c45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45e:	f7fb fee1 	bl	8008224 <__adddf3>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	4610      	mov	r0, r2
 800c468:	4619      	mov	r1, r3
 800c46a:	f04f 0200 	mov.w	r2, #0
 800c46e:	4b69      	ldr	r3, [pc, #420]	@ (800c614 <AddF_ReqDataToPC+0x3bc>)
 800c470:	f7fc f88e 	bl	8008590 <__aeabi_dmul>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	4610      	mov	r0, r2
 800c47a:	4619      	mov	r1, r3
 800c47c:	f7fc fb22 	bl	8008ac4 <__aeabi_d2iz>
 800c480:	4603      	mov	r3, r0
 800c482:	b21a      	sxth	r2, r3
 800c484:	4b64      	ldr	r3, [pc, #400]	@ (800c618 <AddF_ReqDataToPC+0x3c0>)
 800c486:	811a      	strh	r2, [r3, #8]
	//ui.co_100times = ((uint16_t)((ui.Warring_Deviation+0.001) * 100));

	//온도 값(소수점 첫째자리까지만 송신, 둘째자리는 버림)
	intTmp = (ui.temp_100times / 10) * 10;
 800c488:	4b61      	ldr	r3, [pc, #388]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c48a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c48e:	4a63      	ldr	r2, [pc, #396]	@ (800c61c <AddF_ReqDataToPC+0x3c4>)
 800c490:	fb82 1203 	smull	r1, r2, r2, r3
 800c494:	1092      	asrs	r2, r2, #2
 800c496:	17db      	asrs	r3, r3, #31
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	b21b      	sxth	r3, r3
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	461a      	mov	r2, r3
 800c4a0:	0092      	lsls	r2, r2, #2
 800c4a2:	4413      	add	r3, r2
 800c4a4:	005b      	lsls	r3, r3, #1
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	847b      	strh	r3, [r7, #34]	@ 0x22
	RS48501_TxBuf[11] = (uint8_t)(intTmp >> 8);
 800c4aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c4ae:	121b      	asrs	r3, r3, #8
 800c4b0:	b21b      	sxth	r3, r3
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	74fb      	strb	r3, [r7, #19]
	RS48501_TxBuf[12] = (uint8_t)(intTmp & 0xFF);
 800c4b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	753b      	strb	r3, [r7, #20]
	//습도 값(소수점 첫째자리까지만 송신, 둘째자리는 버림)
	intTmp = (ui.humi_100times / 10) * 10;
 800c4bc:	4b54      	ldr	r3, [pc, #336]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c4be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c4c2:	4a56      	ldr	r2, [pc, #344]	@ (800c61c <AddF_ReqDataToPC+0x3c4>)
 800c4c4:	fb82 1203 	smull	r1, r2, r2, r3
 800c4c8:	1092      	asrs	r2, r2, #2
 800c4ca:	17db      	asrs	r3, r3, #31
 800c4cc:	1ad3      	subs	r3, r2, r3
 800c4ce:	b21b      	sxth	r3, r3
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	0092      	lsls	r2, r2, #2
 800c4d6:	4413      	add	r3, r2
 800c4d8:	005b      	lsls	r3, r3, #1
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	847b      	strh	r3, [r7, #34]	@ 0x22
	RS48501_TxBuf[13] = (uint8_t)(intTmp >> 8);
 800c4de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c4e2:	121b      	asrs	r3, r3, #8
 800c4e4:	b21b      	sxth	r3, r3
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	757b      	strb	r3, [r7, #21]
	RS48501_TxBuf[14] = (uint8_t)(intTmp & 0xFF);
 800c4ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	75bb      	strb	r3, [r7, #22]
		}
	}
	else
	{*/
		//온도 경고 기준(소수점 첫째자리까지만 송신, 둘째자리는 버림)
		intTmp = (RS485Rx.ff_cTemp_warring_R / 10) * 10;
 800c4f0:	4b49      	ldr	r3, [pc, #292]	@ (800c618 <AddF_ReqDataToPC+0x3c0>)
 800c4f2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c4f6:	4a49      	ldr	r2, [pc, #292]	@ (800c61c <AddF_ReqDataToPC+0x3c4>)
 800c4f8:	fb82 1203 	smull	r1, r2, r2, r3
 800c4fc:	1092      	asrs	r2, r2, #2
 800c4fe:	17db      	asrs	r3, r3, #31
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	b21b      	sxth	r3, r3
 800c504:	b29b      	uxth	r3, r3
 800c506:	461a      	mov	r2, r3
 800c508:	0092      	lsls	r2, r2, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	005b      	lsls	r3, r3, #1
 800c50e:	b29b      	uxth	r3, r3
 800c510:	847b      	strh	r3, [r7, #34]	@ 0x22
		RS48501_TxBuf[15] = (uint8_t)(intTmp >> 8);
 800c512:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c516:	121b      	asrs	r3, r3, #8
 800c518:	b21b      	sxth	r3, r3
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	75fb      	strb	r3, [r7, #23]
		RS48501_TxBuf[16] = (uint8_t)(intTmp & 0xFF);
 800c51e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c520:	b2db      	uxtb	r3, r3
 800c522:	763b      	strb	r3, [r7, #24]
		//온도 알람 기준(소수점 첫째자리까지만 송신, 둘째자리는 버림)
		intTmp = (RS485Rx.ff_cTemp_alarm_R / 10) * 10;
 800c524:	4b3c      	ldr	r3, [pc, #240]	@ (800c618 <AddF_ReqDataToPC+0x3c0>)
 800c526:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c52a:	4a3c      	ldr	r2, [pc, #240]	@ (800c61c <AddF_ReqDataToPC+0x3c4>)
 800c52c:	fb82 1203 	smull	r1, r2, r2, r3
 800c530:	1092      	asrs	r2, r2, #2
 800c532:	17db      	asrs	r3, r3, #31
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	b21b      	sxth	r3, r3
 800c538:	b29b      	uxth	r3, r3
 800c53a:	461a      	mov	r2, r3
 800c53c:	0092      	lsls	r2, r2, #2
 800c53e:	4413      	add	r3, r2
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	b29b      	uxth	r3, r3
 800c544:	847b      	strh	r3, [r7, #34]	@ 0x22
		RS48501_TxBuf[17] = (uint8_t)(intTmp >> 8);
 800c546:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c54a:	121b      	asrs	r3, r3, #8
 800c54c:	b21b      	sxth	r3, r3
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	767b      	strb	r3, [r7, #25]
		RS48501_TxBuf[18] = (uint8_t)(intTmp & 0xFF);
 800c552:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c554:	b2db      	uxtb	r3, r3
 800c556:	76bb      	strb	r3, [r7, #26]
		//온도 경고 편차 값(소수점 첫째자리까지만 송신, 둘째자리는 버림)
		intTmp = (ui.co_100times / 10) * 10;
 800c558:	4b2d      	ldr	r3, [pc, #180]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c55a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c55e:	4a2f      	ldr	r2, [pc, #188]	@ (800c61c <AddF_ReqDataToPC+0x3c4>)
 800c560:	fb82 1203 	smull	r1, r2, r2, r3
 800c564:	1092      	asrs	r2, r2, #2
 800c566:	17db      	asrs	r3, r3, #31
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	b21b      	sxth	r3, r3
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	461a      	mov	r2, r3
 800c570:	0092      	lsls	r2, r2, #2
 800c572:	4413      	add	r3, r2
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	b29b      	uxth	r3, r3
 800c578:	847b      	strh	r3, [r7, #34]	@ 0x22
		RS48501_TxBuf[19] = (uint8_t)(intTmp >> 8);
 800c57a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c57e:	121b      	asrs	r3, r3, #8
 800c580:	b21b      	sxth	r3, r3
 800c582:	b2db      	uxtb	r3, r3
 800c584:	76fb      	strb	r3, [r7, #27]
		RS48501_TxBuf[20] = (uint8_t)(intTmp & 0xFF);
 800c586:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	773b      	strb	r3, [r7, #28]
	//}

	// 체크섬 계산
	checksum = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (ii = 1; ii < 21 ; ii++)
 800c590:	2301      	movs	r3, #1
 800c592:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c594:	e00b      	b.n	800c5ae <AddF_ReqDataToPC+0x356>
	{
		checksum += RS48501_TxBuf[ii];
 800c596:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c598:	3328      	adds	r3, #40	@ 0x28
 800c59a:	443b      	add	r3, r7
 800c59c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c5a4:	4413      	add	r3, r2
 800c5a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (ii = 1; ii < 21 ; ii++)
 800c5a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c5ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5b0:	2b14      	cmp	r3, #20
 800c5b2:	d9f0      	bls.n	800c596 <AddF_ReqDataToPC+0x33e>
	}
	RS48501_TxBuf[21] = (uint8_t)(checksum >> 8);
 800c5b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c5b6:	0a1b      	lsrs	r3, r3, #8
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	777b      	strb	r3, [r7, #29]
	RS48501_TxBuf[22] = (uint8_t)(checksum & 0xFF);
 800c5be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	77bb      	strb	r3, [r7, #30]
	//프레임 끝
	RS48501_TxBuf[23] = PACKET_ETX;
 800c5c4:	2345      	movs	r3, #69	@ 0x45
 800c5c6:	77fb      	strb	r3, [r7, #31]

	if(ui.End_Code == 1)
 800c5c8:	4b11      	ldr	r3, [pc, #68]	@ (800c610 <AddF_ReqDataToPC+0x3b8>)
 800c5ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d117      	bne.n	800c602 <AddF_ReqDataToPC+0x3aa>
	{
		RS48501_TxBuf[24] = ECODE_CR;
 800c5d2:	230d      	movs	r3, #13
 800c5d4:	f887 3020 	strb.w	r3, [r7, #32]
		RS48501_TxBuf[25] = ECODE_LF;
 800c5d8:	230a      	movs	r3, #10
 800c5da:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		// Add Request Data Frame to RS485-1 SendFrame
		for (ii = 0; ii < 26 ; ii++)
 800c5de:	2300      	movs	r3, #0
 800c5e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c5e2:	e00a      	b.n	800c5fa <AddF_ReqDataToPC+0x3a2>
		{
			RS48501_TxSendFrame[ii] = RS48501_TxBuf[ii];
 800c5e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c5e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5e8:	3228      	adds	r2, #40	@ 0x28
 800c5ea:	443a      	add	r2, r7
 800c5ec:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800c5f0:	4a0b      	ldr	r2, [pc, #44]	@ (800c620 <AddF_ReqDataToPC+0x3c8>)
 800c5f2:	54d1      	strb	r1, [r2, r3]
		for (ii = 0; ii < 26 ; ii++)
 800c5f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c5fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5fc:	2b19      	cmp	r3, #25
 800c5fe:	d9f1      	bls.n	800c5e4 <AddF_ReqDataToPC+0x38c>
 800c600:	e01e      	b.n	800c640 <AddF_ReqDataToPC+0x3e8>
		}
	}
	else
	{
		// Add Request Data Frame to RS485-1 SendFrame
		for (ii = 0; ii < 24 ; ii++)
 800c602:	2300      	movs	r3, #0
 800c604:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c606:	e018      	b.n	800c63a <AddF_ReqDataToPC+0x3e2>
 800c608:	d2f1a9fc 	.word	0xd2f1a9fc
 800c60c:	3f50624d 	.word	0x3f50624d
 800c610:	200004f0 	.word	0x200004f0
 800c614:	40590000 	.word	0x40590000
 800c618:	20000574 	.word	0x20000574
 800c61c:	66666667 	.word	0x66666667
 800c620:	20000528 	.word	0x20000528
		{
			RS48501_TxSendFrame[ii] = RS48501_TxBuf[ii];
 800c624:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c626:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c628:	3228      	adds	r2, #40	@ 0x28
 800c62a:	443a      	add	r2, r7
 800c62c:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800c630:	4a0c      	ldr	r2, [pc, #48]	@ (800c664 <AddF_ReqDataToPC+0x40c>)
 800c632:	54d1      	strb	r1, [r2, r3]
		for (ii = 0; ii < 24 ; ii++)
 800c634:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c636:	3301      	adds	r3, #1
 800c638:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c63a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c63c:	2b17      	cmp	r3, #23
 800c63e:	d9f1      	bls.n	800c624 <AddF_ReqDataToPC+0x3cc>
		}
	}

	RS48501_TxPos++;
 800c640:	4b09      	ldr	r3, [pc, #36]	@ (800c668 <AddF_ReqDataToPC+0x410>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	3301      	adds	r3, #1
 800c646:	b2da      	uxtb	r2, r3
 800c648:	4b07      	ldr	r3, [pc, #28]	@ (800c668 <AddF_ReqDataToPC+0x410>)
 800c64a:	701a      	strb	r2, [r3, #0]
	if(RS48501_TxPos >= 20)	RS48501_TxPos = 0;
 800c64c:	4b06      	ldr	r3, [pc, #24]	@ (800c668 <AddF_ReqDataToPC+0x410>)
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b13      	cmp	r3, #19
 800c652:	d902      	bls.n	800c65a <AddF_ReqDataToPC+0x402>
 800c654:	4b04      	ldr	r3, [pc, #16]	@ (800c668 <AddF_ReqDataToPC+0x410>)
 800c656:	2200      	movs	r2, #0
 800c658:	701a      	strb	r2, [r3, #0]
}
 800c65a:	bf00      	nop
 800c65c:	3728      	adds	r7, #40	@ 0x28
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	20000528 	.word	0x20000528
 800c668:	20000524 	.word	0x20000524

0800c66c <AddF_CmdReqToPC>:

/* Example: Sensor --> PC : AddF_CmdReqToPC(0,18,0x05A1,0x01~); */
void AddF_CmdReqToPC(uint16_t size, uint16_t cmd, uint8_t code, uint8_t error, uint8_t cmdAck)  // 일단 명령 요청을 위한 패킷 만드는거라고 생각해보자 //RxCallback
{
 800c66c:	b490      	push	{r4, r7}
 800c66e:	b088      	sub	sp, #32
 800c670:	af00      	add	r7, sp, #0
 800c672:	4604      	mov	r4, r0
 800c674:	4608      	mov	r0, r1
 800c676:	4611      	mov	r1, r2
 800c678:	461a      	mov	r2, r3
 800c67a:	4623      	mov	r3, r4
 800c67c:	80fb      	strh	r3, [r7, #6]
 800c67e:	4603      	mov	r3, r0
 800c680:	80bb      	strh	r3, [r7, #4]
 800c682:	460b      	mov	r3, r1
 800c684:	70fb      	strb	r3, [r7, #3]
 800c686:	4613      	mov	r3, r2
 800c688:	70bb      	strb	r3, [r7, #2]
	uint8_t RS48502_TxBuf[20];
	uint16_t checksum;
	uint16_t ii;

	//프레임
	RS48502_TxBuf[0] = PACKET_STX;
 800c68a:	2353      	movs	r3, #83	@ 0x53
 800c68c:	723b      	strb	r3, [r7, #8]
	//Length 길이 // CMD ~ DATA 까지의 바이트 수
	RS48502_TxBuf[1] = (uint8_t)(size>> 8);
 800c68e:	88fb      	ldrh	r3, [r7, #6]
 800c690:	0a1b      	lsrs	r3, r3, #8
 800c692:	b29b      	uxth	r3, r3
 800c694:	b2db      	uxtb	r3, r3
 800c696:	727b      	strb	r3, [r7, #9]
	RS48502_TxBuf[2] = (uint8_t)(size & 0xFF);
 800c698:	88fb      	ldrh	r3, [r7, #6]
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	72bb      	strb	r3, [r7, #10]
	//CMD		// 통신 명령
	RS48502_TxBuf[3] = (uint8_t)(cmd>> 8);
 800c69e:	88bb      	ldrh	r3, [r7, #4]
 800c6a0:	0a1b      	lsrs	r3, r3, #8
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	72fb      	strb	r3, [r7, #11]
	RS48502_TxBuf[4] = (uint8_t)(cmd & 0xFF);
 800c6a8:	88bb      	ldrh	r3, [r7, #4]
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	733b      	strb	r3, [r7, #12]
	//code		// 명령 구분
	RS48502_TxBuf[5] = code;
 800c6ae:	78fb      	ldrb	r3, [r7, #3]
 800c6b0:	737b      	strb	r3, [r7, #13]

	// Count	// 송신 Count(0~255 반복)
	 ui.TxCount ++;
 800c6b2:	4b3d      	ldr	r3, [pc, #244]	@ (800c7a8 <AddF_CmdReqToPC+0x13c>)
 800c6b4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	b2da      	uxtb	r2, r3
 800c6bc:	4b3a      	ldr	r3, [pc, #232]	@ (800c7a8 <AddF_CmdReqToPC+0x13c>)
 800c6be:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	RS48502_TxBuf[6] = ui.TxCount;
 800c6c2:	4b39      	ldr	r3, [pc, #228]	@ (800c7a8 <AddF_CmdReqToPC+0x13c>)
 800c6c4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c6c8:	73bb      	strb	r3, [r7, #14]
	// ID
	RS48502_TxBuf[7] = HsdID;
 800c6ca:	4b38      	ldr	r3, [pc, #224]	@ (800c7ac <AddF_CmdReqToPC+0x140>)
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	73fb      	strb	r3, [r7, #15]

	// 온도 습도 등 데이터
	/* Data Range */
	RS48502_TxBuf[8] = error;	 // 에러 상태
 800c6d2:	78bb      	ldrb	r3, [r7, #2]
 800c6d4:	743b      	strb	r3, [r7, #16]
	RS48502_TxBuf[9] = cmdAck;   // 수신 명령 확인 회신
 800c6d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c6da:	747b      	strb	r3, [r7, #17]
	// Dummy Data
	RS48502_TxBuf[10] = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	74bb      	strb	r3, [r7, #18]
	RS48502_TxBuf[11] = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	74fb      	strb	r3, [r7, #19]
	RS48502_TxBuf[12] = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	753b      	strb	r3, [r7, #20]
	RS48502_TxBuf[13] = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	757b      	strb	r3, [r7, #21]
	RS48502_TxBuf[14] = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	75bb      	strb	r3, [r7, #22]

	// 체크섬 계산 // length ~ Data 까지의 1Byte 씩 합한 값
	checksum = 0;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	83fb      	strh	r3, [r7, #30]
	for (ii = 1; ii < 15 ; ii++)
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	83bb      	strh	r3, [r7, #28]
 800c6f8:	e00b      	b.n	800c712 <AddF_CmdReqToPC+0xa6>
	{
		checksum += RS48502_TxBuf[ii];
 800c6fa:	8bbb      	ldrh	r3, [r7, #28]
 800c6fc:	3320      	adds	r3, #32
 800c6fe:	443b      	add	r3, r7
 800c700:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800c704:	461a      	mov	r2, r3
 800c706:	8bfb      	ldrh	r3, [r7, #30]
 800c708:	4413      	add	r3, r2
 800c70a:	83fb      	strh	r3, [r7, #30]
	for (ii = 1; ii < 15 ; ii++)
 800c70c:	8bbb      	ldrh	r3, [r7, #28]
 800c70e:	3301      	adds	r3, #1
 800c710:	83bb      	strh	r3, [r7, #28]
 800c712:	8bbb      	ldrh	r3, [r7, #28]
 800c714:	2b0e      	cmp	r3, #14
 800c716:	d9f0      	bls.n	800c6fa <AddF_CmdReqToPC+0x8e>
	}
	RS48502_TxBuf[15] = (uint8_t)(checksum >> 8);
 800c718:	8bfb      	ldrh	r3, [r7, #30]
 800c71a:	0a1b      	lsrs	r3, r3, #8
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	75fb      	strb	r3, [r7, #23]
	RS48502_TxBuf[16] = (uint8_t)(checksum & 0xFF);
 800c722:	8bfb      	ldrh	r3, [r7, #30]
 800c724:	b2db      	uxtb	r3, r3
 800c726:	763b      	strb	r3, [r7, #24]
	//프레임 끝
	RS48502_TxBuf[17] = PACKET_ETX;
 800c728:	2345      	movs	r3, #69	@ 0x45
 800c72a:	767b      	strb	r3, [r7, #25]

	if(ui.End_Code == 1)
 800c72c:	4b1e      	ldr	r3, [pc, #120]	@ (800c7a8 <AddF_CmdReqToPC+0x13c>)
 800c72e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c732:	2b01      	cmp	r3, #1
 800c734:	d115      	bne.n	800c762 <AddF_CmdReqToPC+0xf6>
	{
		RS48502_TxBuf[18] = ECODE_CR;
 800c736:	230d      	movs	r3, #13
 800c738:	76bb      	strb	r3, [r7, #26]
		RS48502_TxBuf[19] = ECODE_LF;
 800c73a:	230a      	movs	r3, #10
 800c73c:	76fb      	strb	r3, [r7, #27]
		// Add Request Data Frame to RS485-1 SendFrame
		for (ii = 0; ii < 20 ; ii++)
 800c73e:	2300      	movs	r3, #0
 800c740:	83bb      	strh	r3, [r7, #28]
 800c742:	e00a      	b.n	800c75a <AddF_CmdReqToPC+0xee>
		{
			RS48501_TxSendFrame[ii] = RS48502_TxBuf[ii];
 800c744:	8bba      	ldrh	r2, [r7, #28]
 800c746:	8bbb      	ldrh	r3, [r7, #28]
 800c748:	3220      	adds	r2, #32
 800c74a:	443a      	add	r2, r7
 800c74c:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 800c750:	4a17      	ldr	r2, [pc, #92]	@ (800c7b0 <AddF_CmdReqToPC+0x144>)
 800c752:	54d1      	strb	r1, [r2, r3]
		for (ii = 0; ii < 20 ; ii++)
 800c754:	8bbb      	ldrh	r3, [r7, #28]
 800c756:	3301      	adds	r3, #1
 800c758:	83bb      	strh	r3, [r7, #28]
 800c75a:	8bbb      	ldrh	r3, [r7, #28]
 800c75c:	2b13      	cmp	r3, #19
 800c75e:	d9f1      	bls.n	800c744 <AddF_CmdReqToPC+0xd8>
 800c760:	e010      	b.n	800c784 <AddF_CmdReqToPC+0x118>
		}
	}
	else
	{
		// Add Data Request Frame to RS485-1 SendFrame
		for (ii = 0; ii < 18 ; ii++)
 800c762:	2300      	movs	r3, #0
 800c764:	83bb      	strh	r3, [r7, #28]
 800c766:	e00a      	b.n	800c77e <AddF_CmdReqToPC+0x112>
		{
			RS48501_TxSendFrame[ii] = RS48502_TxBuf[ii];
 800c768:	8bba      	ldrh	r2, [r7, #28]
 800c76a:	8bbb      	ldrh	r3, [r7, #28]
 800c76c:	3220      	adds	r2, #32
 800c76e:	443a      	add	r2, r7
 800c770:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 800c774:	4a0e      	ldr	r2, [pc, #56]	@ (800c7b0 <AddF_CmdReqToPC+0x144>)
 800c776:	54d1      	strb	r1, [r2, r3]
		for (ii = 0; ii < 18 ; ii++)
 800c778:	8bbb      	ldrh	r3, [r7, #28]
 800c77a:	3301      	adds	r3, #1
 800c77c:	83bb      	strh	r3, [r7, #28]
 800c77e:	8bbb      	ldrh	r3, [r7, #28]
 800c780:	2b11      	cmp	r3, #17
 800c782:	d9f1      	bls.n	800c768 <AddF_CmdReqToPC+0xfc>
		}
	}

	RS48501_TxPos++;
 800c784:	4b0b      	ldr	r3, [pc, #44]	@ (800c7b4 <AddF_CmdReqToPC+0x148>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	3301      	adds	r3, #1
 800c78a:	b2da      	uxtb	r2, r3
 800c78c:	4b09      	ldr	r3, [pc, #36]	@ (800c7b4 <AddF_CmdReqToPC+0x148>)
 800c78e:	701a      	strb	r2, [r3, #0]
	if(RS48501_TxPos >= 20)	RS48501_TxPos = 0;
 800c790:	4b08      	ldr	r3, [pc, #32]	@ (800c7b4 <AddF_CmdReqToPC+0x148>)
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	2b13      	cmp	r3, #19
 800c796:	d902      	bls.n	800c79e <AddF_CmdReqToPC+0x132>
 800c798:	4b06      	ldr	r3, [pc, #24]	@ (800c7b4 <AddF_CmdReqToPC+0x148>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	701a      	strb	r2, [r3, #0]
}
 800c79e:	bf00      	nop
 800c7a0:	3720      	adds	r7, #32
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bc90      	pop	{r4, r7}
 800c7a6:	4770      	bx	lr
 800c7a8:	200004f0 	.word	0x200004f0
 800c7ac:	20000572 	.word	0x20000572
 800c7b0:	20000528 	.word	0x20000528
 800c7b4:	20000524 	.word	0x20000524

0800c7b8 <AddF_CmdReqToPC_Val>:
void AddF_CmdReqToPC_Val(uint16_t size, uint16_t cmd, uint8_t code, uint8_t error, int16_t data1, int16_t data2) // RxCallback
{
 800c7b8:	b490      	push	{r4, r7}
 800c7ba:	b08a      	sub	sp, #40	@ 0x28
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	4604      	mov	r4, r0
 800c7c0:	4608      	mov	r0, r1
 800c7c2:	4611      	mov	r1, r2
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	4623      	mov	r3, r4
 800c7c8:	80fb      	strh	r3, [r7, #6]
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	80bb      	strh	r3, [r7, #4]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	70fb      	strb	r3, [r7, #3]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	70bb      	strb	r3, [r7, #2]
	uint8_t RS48502_TxBuf[20];
	uint16_t checksum, ii;
	int16_t  intTmp;;

	//프레임
	RS48502_TxBuf[0] = PACKET_STX;
 800c7d6:	2353      	movs	r3, #83	@ 0x53
 800c7d8:	733b      	strb	r3, [r7, #12]
	//Length 길이
	RS48502_TxBuf[1] = (uint8_t)(size>> 8);
 800c7da:	88fb      	ldrh	r3, [r7, #6]
 800c7dc:	0a1b      	lsrs	r3, r3, #8
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	737b      	strb	r3, [r7, #13]
	RS48502_TxBuf[2] = (uint8_t)(size & 0xFF);
 800c7e4:	88fb      	ldrh	r3, [r7, #6]
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	73bb      	strb	r3, [r7, #14]
	//CMD
	RS48502_TxBuf[3] = (uint8_t)(cmd>> 8);
 800c7ea:	88bb      	ldrh	r3, [r7, #4]
 800c7ec:	0a1b      	lsrs	r3, r3, #8
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	73fb      	strb	r3, [r7, #15]
	RS48502_TxBuf[4] = (uint8_t)(cmd & 0xFF);
 800c7f4:	88bb      	ldrh	r3, [r7, #4]
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	743b      	strb	r3, [r7, #16]
	//code
	RS48502_TxBuf[5] = code;
 800c7fa:	78fb      	ldrb	r3, [r7, #3]
 800c7fc:	747b      	strb	r3, [r7, #17]
	// Count
	ui.TxCount ++;
 800c7fe:	4b52      	ldr	r3, [pc, #328]	@ (800c948 <AddF_CmdReqToPC_Val+0x190>)
 800c800:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c804:	3301      	adds	r3, #1
 800c806:	b2da      	uxtb	r2, r3
 800c808:	4b4f      	ldr	r3, [pc, #316]	@ (800c948 <AddF_CmdReqToPC_Val+0x190>)
 800c80a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	RS48502_TxBuf[6] = ui.TxCount;
 800c80e:	4b4e      	ldr	r3, [pc, #312]	@ (800c948 <AddF_CmdReqToPC_Val+0x190>)
 800c810:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c814:	74bb      	strb	r3, [r7, #18]

	// ID
	RS48502_TxBuf[7] = HsdID; // ui.ID
 800c816:	4b4d      	ldr	r3, [pc, #308]	@ (800c94c <AddF_CmdReqToPC_Val+0x194>)
 800c818:	881b      	ldrh	r3, [r3, #0]
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	74fb      	strb	r3, [r7, #19]

	/* Data Range */
	RS48502_TxBuf[8] = error;	 // 에러 상태
 800c81e:	78bb      	ldrb	r3, [r7, #2]
 800c820:	753b      	strb	r3, [r7, #20]
	intTmp = (data1 / 10) * 10;	 // 소수점 둘째자리 제거
 800c822:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800c826:	4a4a      	ldr	r2, [pc, #296]	@ (800c950 <AddF_CmdReqToPC_Val+0x198>)
 800c828:	fb82 1203 	smull	r1, r2, r2, r3
 800c82c:	1092      	asrs	r2, r2, #2
 800c82e:	17db      	asrs	r3, r3, #31
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	b21b      	sxth	r3, r3
 800c834:	b29b      	uxth	r3, r3
 800c836:	461a      	mov	r2, r3
 800c838:	0092      	lsls	r2, r2, #2
 800c83a:	4413      	add	r3, r2
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	b29b      	uxth	r3, r3
 800c840:	847b      	strh	r3, [r7, #34]	@ 0x22
	RS48502_TxBuf[9] = (uint8_t)(intTmp >> 8);
 800c842:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c846:	121b      	asrs	r3, r3, #8
 800c848:	b21b      	sxth	r3, r3
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	757b      	strb	r3, [r7, #21]
	RS48502_TxBuf[10] = (uint8_t)(intTmp  & 0xFF);
 800c84e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c850:	b2db      	uxtb	r3, r3
 800c852:	75bb      	strb	r3, [r7, #22]
	intTmp = (data2 / 10) * 10;  // 소수점 둘째자리 제거
 800c854:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800c858:	4a3d      	ldr	r2, [pc, #244]	@ (800c950 <AddF_CmdReqToPC_Val+0x198>)
 800c85a:	fb82 1203 	smull	r1, r2, r2, r3
 800c85e:	1092      	asrs	r2, r2, #2
 800c860:	17db      	asrs	r3, r3, #31
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	b21b      	sxth	r3, r3
 800c866:	b29b      	uxth	r3, r3
 800c868:	461a      	mov	r2, r3
 800c86a:	0092      	lsls	r2, r2, #2
 800c86c:	4413      	add	r3, r2
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	b29b      	uxth	r3, r3
 800c872:	847b      	strh	r3, [r7, #34]	@ 0x22
	RS48502_TxBuf[11] = (uint8_t)(intTmp >> 8);
 800c874:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c878:	121b      	asrs	r3, r3, #8
 800c87a:	b21b      	sxth	r3, r3
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	75fb      	strb	r3, [r7, #23]
	RS48502_TxBuf[12] = (uint8_t)(intTmp  & 0xFF);
 800c880:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c882:	b2db      	uxtb	r3, r3
 800c884:	763b      	strb	r3, [r7, #24]
	// Dummy Data
	RS48502_TxBuf[13] = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	767b      	strb	r3, [r7, #25]
	RS48502_TxBuf[14] = 0;
 800c88a:	2300      	movs	r3, #0
 800c88c:	76bb      	strb	r3, [r7, #26]

	// 체크섬 계산
	checksum = 0;
 800c88e:	2300      	movs	r3, #0
 800c890:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (ii = 1; ii < 15 ; ii++)
 800c892:	2301      	movs	r3, #1
 800c894:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c896:	e00b      	b.n	800c8b0 <AddF_CmdReqToPC_Val+0xf8>
	{
		checksum += RS48502_TxBuf[ii];
 800c898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c89a:	3328      	adds	r3, #40	@ 0x28
 800c89c:	443b      	add	r3, r7
 800c89e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c8a6:	4413      	add	r3, r2
 800c8a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (ii = 1; ii < 15 ; ii++)
 800c8aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c8b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8b2:	2b0e      	cmp	r3, #14
 800c8b4:	d9f0      	bls.n	800c898 <AddF_CmdReqToPC_Val+0xe0>
	}
	RS48502_TxBuf[15] = (uint8_t)(checksum >> 8);
 800c8b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c8b8:	0a1b      	lsrs	r3, r3, #8
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	76fb      	strb	r3, [r7, #27]
	RS48502_TxBuf[16] = (uint8_t)(checksum & 0xFF);
 800c8c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	773b      	strb	r3, [r7, #28]
	//프레임 끝
	RS48502_TxBuf[17] = PACKET_ETX;
 800c8c6:	2345      	movs	r3, #69	@ 0x45
 800c8c8:	777b      	strb	r3, [r7, #29]

	if(ui.End_Code == 1)
 800c8ca:	4b1f      	ldr	r3, [pc, #124]	@ (800c948 <AddF_CmdReqToPC_Val+0x190>)
 800c8cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d115      	bne.n	800c900 <AddF_CmdReqToPC_Val+0x148>
	{
		RS48502_TxBuf[18] = ECODE_CR;
 800c8d4:	230d      	movs	r3, #13
 800c8d6:	77bb      	strb	r3, [r7, #30]
		RS48502_TxBuf[19] = ECODE_LF;
 800c8d8:	230a      	movs	r3, #10
 800c8da:	77fb      	strb	r3, [r7, #31]
		// Add Request Data Frame to RS485-1 SendFrame
		for (ii = 0; ii < 20 ; ii++)
 800c8dc:	2300      	movs	r3, #0
 800c8de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c8e0:	e00a      	b.n	800c8f8 <AddF_CmdReqToPC_Val+0x140>
		{
			RS48501_TxSendFrame[ii] = RS48502_TxBuf[ii];
 800c8e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c8e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8e6:	3228      	adds	r2, #40	@ 0x28
 800c8e8:	443a      	add	r2, r7
 800c8ea:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 800c8ee:	4a19      	ldr	r2, [pc, #100]	@ (800c954 <AddF_CmdReqToPC_Val+0x19c>)
 800c8f0:	54d1      	strb	r1, [r2, r3]
		for (ii = 0; ii < 20 ; ii++)
 800c8f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c8f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8fa:	2b13      	cmp	r3, #19
 800c8fc:	d9f1      	bls.n	800c8e2 <AddF_CmdReqToPC_Val+0x12a>
 800c8fe:	e010      	b.n	800c922 <AddF_CmdReqToPC_Val+0x16a>
		}
	}
	else
	{
		// Add Data Request Frame to RS485-1 SendFrame
		for (ii = 0; ii < 18 ; ii++)
 800c900:	2300      	movs	r3, #0
 800c902:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c904:	e00a      	b.n	800c91c <AddF_CmdReqToPC_Val+0x164>
		{
			RS48501_TxSendFrame[ii] = RS48502_TxBuf[ii];
 800c906:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c908:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c90a:	3228      	adds	r2, #40	@ 0x28
 800c90c:	443a      	add	r2, r7
 800c90e:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 800c912:	4a10      	ldr	r2, [pc, #64]	@ (800c954 <AddF_CmdReqToPC_Val+0x19c>)
 800c914:	54d1      	strb	r1, [r2, r3]
		for (ii = 0; ii < 18 ; ii++)
 800c916:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c918:	3301      	adds	r3, #1
 800c91a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c91c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c91e:	2b11      	cmp	r3, #17
 800c920:	d9f1      	bls.n	800c906 <AddF_CmdReqToPC_Val+0x14e>
		}
	}
	RS48501_TxPos++;
 800c922:	4b0d      	ldr	r3, [pc, #52]	@ (800c958 <AddF_CmdReqToPC_Val+0x1a0>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	3301      	adds	r3, #1
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	4b0b      	ldr	r3, [pc, #44]	@ (800c958 <AddF_CmdReqToPC_Val+0x1a0>)
 800c92c:	701a      	strb	r2, [r3, #0]
	if(RS48501_TxPos >= 20)	RS48501_TxPos = 0;
 800c92e:	4b0a      	ldr	r3, [pc, #40]	@ (800c958 <AddF_CmdReqToPC_Val+0x1a0>)
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	2b13      	cmp	r3, #19
 800c934:	d902      	bls.n	800c93c <AddF_CmdReqToPC_Val+0x184>
 800c936:	4b08      	ldr	r3, [pc, #32]	@ (800c958 <AddF_CmdReqToPC_Val+0x1a0>)
 800c938:	2200      	movs	r2, #0
 800c93a:	701a      	strb	r2, [r3, #0]
}
 800c93c:	bf00      	nop
 800c93e:	3728      	adds	r7, #40	@ 0x28
 800c940:	46bd      	mov	sp, r7
 800c942:	bc90      	pop	{r4, r7}
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	200004f0 	.word	0x200004f0
 800c94c:	20000572 	.word	0x20000572
 800c950:	66666667 	.word	0x66666667
 800c954:	20000528 	.word	0x20000528
 800c958:	20000524 	.word	0x20000524

0800c95c <RS48501_TxData>:
/* Example: Sensor --> PC : AddF_CmdReqToPC(0,18,0x05A1,0x01); */


void RS48501_TxData(void)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
	uint16_t dataSize = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	80fb      	strh	r3, [r7, #6]
	// RS48501 TX Start
	if(RS48501_TxPos != RS48501_TxEnd)
 800c966:	4b34      	ldr	r3, [pc, #208]	@ (800ca38 <RS48501_TxData+0xdc>)
 800c968:	781a      	ldrb	r2, [r3, #0]
 800c96a:	4b34      	ldr	r3, [pc, #208]	@ (800ca3c <RS48501_TxData+0xe0>)
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d05e      	beq.n	800ca30 <RS48501_TxData+0xd4>
	{

		RS485_DE(); // HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET)  // RS485핀을 데이터를 송신할 수 있게 활성화
 800c972:	2201      	movs	r2, #1
 800c974:	2110      	movs	r1, #16
 800c976:	4832      	ldr	r0, [pc, #200]	@ (800ca40 <RS48501_TxData+0xe4>)
 800c978:	f005 f8aa 	bl	8011ad0 <HAL_GPIO_WritePin>

		 if(ui.Protocol_Type == 0)
 800c97c:	4b31      	ldr	r3, [pc, #196]	@ (800ca44 <RS48501_TxData+0xe8>)
 800c97e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c982:	2b00      	cmp	r3, #0
 800c984:	d123      	bne.n	800c9ce <RS48501_TxData+0x72>
		 {
			 if(Read_Data_Tx[1] == 0x03)
 800c986:	4b30      	ldr	r3, [pc, #192]	@ (800ca48 <RS48501_TxData+0xec>)
 800c988:	785b      	ldrb	r3, [r3, #1]
 800c98a:	2b03      	cmp	r3, #3
 800c98c:	d10b      	bne.n	800c9a6 <RS48501_TxData+0x4a>
			 {
				 dataSize = Read_Data_Tx[2];
 800c98e:	4b2e      	ldr	r3, [pc, #184]	@ (800ca48 <RS48501_TxData+0xec>)
 800c990:	789b      	ldrb	r3, [r3, #2]
 800c992:	80fb      	strh	r3, [r7, #6]
				 HAL_UART_Transmit_IT(&huart5, &Read_Data_Tx[0], dataSize+5);
 800c994:	88fb      	ldrh	r3, [r7, #6]
 800c996:	3305      	adds	r3, #5
 800c998:	b29b      	uxth	r3, r3
 800c99a:	461a      	mov	r2, r3
 800c99c:	492a      	ldr	r1, [pc, #168]	@ (800ca48 <RS48501_TxData+0xec>)
 800c99e:	482b      	ldr	r0, [pc, #172]	@ (800ca4c <RS48501_TxData+0xf0>)
 800c9a0:	f008 f944 	bl	8014c2c <HAL_UART_Transmit_IT>
 800c9a4:	e033      	b.n	800ca0e <RS48501_TxData+0xb2>
			 }
			 else if((Read_Data_Tx[1] == 0x06) || (Read_Data_Tx[1] == 0x10))
 800c9a6:	4b28      	ldr	r3, [pc, #160]	@ (800ca48 <RS48501_TxData+0xec>)
 800c9a8:	785b      	ldrb	r3, [r3, #1]
 800c9aa:	2b06      	cmp	r3, #6
 800c9ac:	d003      	beq.n	800c9b6 <RS48501_TxData+0x5a>
 800c9ae:	4b26      	ldr	r3, [pc, #152]	@ (800ca48 <RS48501_TxData+0xec>)
 800c9b0:	785b      	ldrb	r3, [r3, #1]
 800c9b2:	2b10      	cmp	r3, #16
 800c9b4:	d105      	bne.n	800c9c2 <RS48501_TxData+0x66>
			 {
				 HAL_UART_Transmit_IT(&huart5, &Read_Data_Tx[0], 8);
 800c9b6:	2208      	movs	r2, #8
 800c9b8:	4923      	ldr	r1, [pc, #140]	@ (800ca48 <RS48501_TxData+0xec>)
 800c9ba:	4824      	ldr	r0, [pc, #144]	@ (800ca4c <RS48501_TxData+0xf0>)
 800c9bc:	f008 f936 	bl	8014c2c <HAL_UART_Transmit_IT>
 800c9c0:	e025      	b.n	800ca0e <RS48501_TxData+0xb2>
			 }
			 else
			 {
				 HAL_UART_Transmit_IT(&huart5, &Read_Data_Tx[0], 5);
 800c9c2:	2205      	movs	r2, #5
 800c9c4:	4920      	ldr	r1, [pc, #128]	@ (800ca48 <RS48501_TxData+0xec>)
 800c9c6:	4821      	ldr	r0, [pc, #132]	@ (800ca4c <RS48501_TxData+0xf0>)
 800c9c8:	f008 f930 	bl	8014c2c <HAL_UART_Transmit_IT>
 800c9cc:	e01f      	b.n	800ca0e <RS48501_TxData+0xb2>
			 }
		 }
		 else   // ui.Protocol_Type == 0 이 아닌 경우
		 {
			dataSize = ((uint16_t)RS48501_TxSendFrame[1] << 8);
 800c9ce:	4b20      	ldr	r3, [pc, #128]	@ (800ca50 <RS48501_TxData+0xf4>)
 800c9d0:	785b      	ldrb	r3, [r3, #1]
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	80fb      	strh	r3, [r7, #6]
			dataSize |= ((uint16_t)RS48501_TxSendFrame[2] & 0xFF);
 800c9d6:	4b1e      	ldr	r3, [pc, #120]	@ (800ca50 <RS48501_TxData+0xf4>)
 800c9d8:	789b      	ldrb	r3, [r3, #2]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	88fb      	ldrh	r3, [r7, #6]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	80fb      	strh	r3, [r7, #6]

			// Request Data Frame size = 18, Ack Data Frame size = 12
			if(ui.End_Code == 1){
 800c9e2:	4b18      	ldr	r3, [pc, #96]	@ (800ca44 <RS48501_TxData+0xe8>)
 800c9e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d108      	bne.n	800c9fe <RS48501_TxData+0xa2>
				HAL_UART_Transmit_IT(&huart5, &RS48501_TxSendFrame[0], dataSize+8);
 800c9ec:	88fb      	ldrh	r3, [r7, #6]
 800c9ee:	3308      	adds	r3, #8
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	4916      	ldr	r1, [pc, #88]	@ (800ca50 <RS48501_TxData+0xf4>)
 800c9f6:	4815      	ldr	r0, [pc, #84]	@ (800ca4c <RS48501_TxData+0xf0>)
 800c9f8:	f008 f918 	bl	8014c2c <HAL_UART_Transmit_IT>
 800c9fc:	e007      	b.n	800ca0e <RS48501_TxData+0xb2>

			}
			else
			{
				HAL_UART_Transmit_IT(&huart5, &RS48501_TxSendFrame[0], dataSize+6);
 800c9fe:	88fb      	ldrh	r3, [r7, #6]
 800ca00:	3306      	adds	r3, #6
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	461a      	mov	r2, r3
 800ca06:	4912      	ldr	r1, [pc, #72]	@ (800ca50 <RS48501_TxData+0xf4>)
 800ca08:	4810      	ldr	r0, [pc, #64]	@ (800ca4c <RS48501_TxData+0xf0>)
 800ca0a:	f008 f90f 	bl	8014c2c <HAL_UART_Transmit_IT>
			}
		 }
		RS485Rx.boot_send = 1;
 800ca0e:	4b11      	ldr	r3, [pc, #68]	@ (800ca54 <RS48501_TxData+0xf8>)
 800ca10:	2201      	movs	r2, #1
 800ca12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46



		RS48501_TxEnd++;
 800ca16:	4b09      	ldr	r3, [pc, #36]	@ (800ca3c <RS48501_TxData+0xe0>)
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	4b07      	ldr	r3, [pc, #28]	@ (800ca3c <RS48501_TxData+0xe0>)
 800ca20:	701a      	strb	r2, [r3, #0]
		if(RS48501_TxEnd >= 20)	RS48501_TxEnd = 0;
 800ca22:	4b06      	ldr	r3, [pc, #24]	@ (800ca3c <RS48501_TxData+0xe0>)
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	2b13      	cmp	r3, #19
 800ca28:	d902      	bls.n	800ca30 <RS48501_TxData+0xd4>
 800ca2a:	4b04      	ldr	r3, [pc, #16]	@ (800ca3c <RS48501_TxData+0xe0>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	701a      	strb	r2, [r3, #0]
	}

}
 800ca30:	bf00      	nop
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	20000524 	.word	0x20000524
 800ca3c:	20000525 	.word	0x20000525
 800ca40:	48000400 	.word	0x48000400
 800ca44:	200004f0 	.word	0x200004f0
 800ca48:	200004b0 	.word	0x200004b0
 800ca4c:	200009b0 	.word	0x200009b0
 800ca50:	20000528 	.word	0x20000528
 800ca54:	20000574 	.word	0x20000574

0800ca58 <HAL_UART_TxCpltCallback>:
/****************************************************************************/
/*	Overview	:	Tx 데이터 송신 이후 RX 준비             							*/
/*	Return value:	void													*/
/****************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
	 if(huart->Instance==UART5)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a09      	ldr	r2, [pc, #36]	@ (800ca8c <HAL_UART_TxCpltCallback+0x34>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d10c      	bne.n	800ca84 <HAL_UART_TxCpltCallback+0x2c>
	 {	// RS485_DE : 송신
		RS485_RE(); // 송신이 완료되면 자동으로 GPIO 핀 활성화해서 수신모드로..
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	2110      	movs	r1, #16
 800ca6e:	4808      	ldr	r0, [pc, #32]	@ (800ca90 <HAL_UART_TxCpltCallback+0x38>)
 800ca70:	f005 f82e 	bl	8011ad0 <HAL_GPIO_WritePin>
		if(RS485Rx.boot_send == 1){
 800ca74:	4b07      	ldr	r3, [pc, #28]	@ (800ca94 <HAL_UART_TxCpltCallback+0x3c>)
 800ca76:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d102      	bne.n	800ca84 <HAL_UART_TxCpltCallback+0x2c>
			reboot_flag = 1;
 800ca7e:	4b06      	ldr	r3, [pc, #24]	@ (800ca98 <HAL_UART_TxCpltCallback+0x40>)
 800ca80:	2201      	movs	r2, #1
 800ca82:	701a      	strb	r2, [r3, #0]
		}
	 }
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	40005000 	.word	0x40005000
 800ca90:	48000400 	.word	0x48000400
 800ca94:	20000574 	.word	0x20000574
 800ca98:	2000027c 	.word	0x2000027c

0800ca9c <FUN_Rx_data_check>:
/****************************************************************************/
/*	Overview	:	RX 데이터 처리 통신 프레임										*/
/*	Return value:	void													*/
/****************************************************************************/
uint8_t FUN_Rx_data_check(void)  // 실패한 수신 0 리턴 / 성공 RS485Rx.result 리턴
{								 // 프레임 각 부분이 올바른지 확인 하는거 같음 --> RS485 통신의 안정성 확보 역할인듯
 800ca9c:	b480      	push	{r7}
 800ca9e:	af00      	add	r7, sp, #0
	//STX 체크
	if(RS485Rx0Data[0] != PACKET_STX) //'S')
 800caa0:	4b75      	ldr	r3, [pc, #468]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b53      	cmp	r3, #83	@ 0x53
 800caa6:	d004      	beq.n	800cab2 <FUN_Rx_data_check+0x16>
	{
		RS485Rx.Rx_cnt = 0;
 800caa8:	4b74      	ldr	r3, [pc, #464]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800caaa:	2200      	movs	r2, #0
 800caac:	829a      	strh	r2, [r3, #20]
		// 실패한 수신
		return 0;
 800caae:	2300      	movs	r3, #0
 800cab0:	e0dd      	b.n	800cc6e <FUN_Rx_data_check+0x1d2>
	}
	else
	{
		if(RS485Rx.Rx_cnt == 1){
 800cab2:	4b72      	ldr	r3, [pc, #456]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cab4:	8a9b      	ldrh	r3, [r3, #20]
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d103      	bne.n	800cac2 <FUN_Rx_data_check+0x26>
			RS485Rx.Rx_Data_flag = 1;  //Frame start is received
 800caba:	4b70      	ldr	r3, [pc, #448]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cabc:	2201      	movs	r2, #1
 800cabe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		}
	}
	if(RS485Rx.Rx_cnt >= 3)
 800cac2:	4b6e      	ldr	r3, [pc, #440]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cac4:	8a9b      	ldrh	r3, [r3, #20]
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d910      	bls.n	800caec <FUN_Rx_data_check+0x50>
	{
		// Length 체크
		if((RS485Rx0Data[1] != 0x00) && (RS485Rx0Data[2] != 0x0C))
 800caca:	4b6b      	ldr	r3, [pc, #428]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cacc:	785b      	ldrb	r3, [r3, #1]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00c      	beq.n	800caec <FUN_Rx_data_check+0x50>
 800cad2:	4b69      	ldr	r3, [pc, #420]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cad4:	789b      	ldrb	r3, [r3, #2]
 800cad6:	2b0c      	cmp	r3, #12
 800cad8:	d008      	beq.n	800caec <FUN_Rx_data_check+0x50>
		{
			RS485Rx.Rx_cnt = 0;
 800cada:	4b68      	ldr	r3, [pc, #416]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cadc:	2200      	movs	r2, #0
 800cade:	829a      	strh	r2, [r3, #20]
			RS485Rx.Rx_Data_flag = 0;  //Frame start reset
 800cae0:	4b66      	ldr	r3, [pc, #408]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			// 실패한 수신
			return 0;
 800cae8:	2300      	movs	r3, #0
 800caea:	e0c0      	b.n	800cc6e <FUN_Rx_data_check+0x1d2>
		}
	}

	if(RS485Rx.Rx_cnt >= 4)
 800caec:	4b63      	ldr	r3, [pc, #396]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800caee:	8a9b      	ldrh	r3, [r3, #20]
 800caf0:	2b03      	cmp	r3, #3
 800caf2:	d90c      	bls.n	800cb0e <FUN_Rx_data_check+0x72>
	{
		//TYPE 체크
		// 0x05: 판넬형 열연기감지기 제품군
		if(RS485Rx0Data[3] != 0x05)
 800caf4:	4b60      	ldr	r3, [pc, #384]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800caf6:	78db      	ldrb	r3, [r3, #3]
 800caf8:	2b05      	cmp	r3, #5
 800cafa:	d008      	beq.n	800cb0e <FUN_Rx_data_check+0x72>
		{
			RS485Rx.Rx_cnt = 0;
 800cafc:	4b5f      	ldr	r3, [pc, #380]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	829a      	strh	r2, [r3, #20]
			RS485Rx.Rx_Data_flag = 0;  //Frame start reset
 800cb02:	4b5e      	ldr	r3, [pc, #376]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			// 실패한 수신
			return 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e0af      	b.n	800cc6e <FUN_Rx_data_check+0x1d2>
		}
	}

	if(RS485Rx.Rx_cnt >= 6)
 800cb0e:	4b5b      	ldr	r3, [pc, #364]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cb10:	8a9b      	ldrh	r3, [r3, #20]
 800cb12:	2b05      	cmp	r3, #5
 800cb14:	f240 8093 	bls.w	800cc3e <FUN_Rx_data_check+0x1a2>
	{
		// CMD 체크 result는 명령 순번을 나타냄
		if((RS485Rx0Data[4] == 0x01) && (RS485Rx0Data[5] == 0x01))
 800cb18:	4b57      	ldr	r3, [pc, #348]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cb1a:	791b      	ldrb	r3, [r3, #4]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d10a      	bne.n	800cb36 <FUN_Rx_data_check+0x9a>
 800cb20:	4b55      	ldr	r3, [pc, #340]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cb22:	795b      	ldrb	r3, [r3, #5]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d106      	bne.n	800cb36 <FUN_Rx_data_check+0x9a>
		{
			RS485Rx.result += 1;
 800cb28:	4b54      	ldr	r3, [pc, #336]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cb2a:	7d9b      	ldrb	r3, [r3, #22]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	4b52      	ldr	r3, [pc, #328]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cb32:	759a      	strb	r2, [r3, #22]
 800cb34:	e083      	b.n	800cc3e <FUN_Rx_data_check+0x1a2>
		}
		else if((RS485Rx0Data[4] == 0x03) && (RS485Rx0Data[5] == 0x01))
 800cb36:	4b50      	ldr	r3, [pc, #320]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cb38:	791b      	ldrb	r3, [r3, #4]
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d10a      	bne.n	800cb54 <FUN_Rx_data_check+0xb8>
 800cb3e:	4b4e      	ldr	r3, [pc, #312]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cb40:	795b      	ldrb	r3, [r3, #5]
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d106      	bne.n	800cb54 <FUN_Rx_data_check+0xb8>
		{
			RS485Rx.result += 2;
 800cb46:	4b4d      	ldr	r3, [pc, #308]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cb48:	7d9b      	ldrb	r3, [r3, #22]
 800cb4a:	3302      	adds	r3, #2
 800cb4c:	b2da      	uxtb	r2, r3
 800cb4e:	4b4b      	ldr	r3, [pc, #300]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cb50:	759a      	strb	r2, [r3, #22]
 800cb52:	e074      	b.n	800cc3e <FUN_Rx_data_check+0x1a2>
		}
		else if((RS485Rx0Data[4] == 0x03) && (RS485Rx0Data[5] == 0x02))
 800cb54:	4b48      	ldr	r3, [pc, #288]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cb56:	791b      	ldrb	r3, [r3, #4]
 800cb58:	2b03      	cmp	r3, #3
 800cb5a:	d10a      	bne.n	800cb72 <FUN_Rx_data_check+0xd6>
 800cb5c:	4b46      	ldr	r3, [pc, #280]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cb5e:	795b      	ldrb	r3, [r3, #5]
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d106      	bne.n	800cb72 <FUN_Rx_data_check+0xd6>
		{
			RS485Rx.result += 3;
 800cb64:	4b45      	ldr	r3, [pc, #276]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cb66:	7d9b      	ldrb	r3, [r3, #22]
 800cb68:	3303      	adds	r3, #3
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	4b43      	ldr	r3, [pc, #268]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cb6e:	759a      	strb	r2, [r3, #22]
 800cb70:	e065      	b.n	800cc3e <FUN_Rx_data_check+0x1a2>
		}
		else if((RS485Rx0Data[4] == 0x03) && (RS485Rx0Data[5] == 0x03))
 800cb72:	4b41      	ldr	r3, [pc, #260]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cb74:	791b      	ldrb	r3, [r3, #4]
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d10a      	bne.n	800cb90 <FUN_Rx_data_check+0xf4>
 800cb7a:	4b3f      	ldr	r3, [pc, #252]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cb7c:	795b      	ldrb	r3, [r3, #5]
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	d106      	bne.n	800cb90 <FUN_Rx_data_check+0xf4>
		{
			RS485Rx.result += 4;
 800cb82:	4b3e      	ldr	r3, [pc, #248]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cb84:	7d9b      	ldrb	r3, [r3, #22]
 800cb86:	3304      	adds	r3, #4
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	4b3c      	ldr	r3, [pc, #240]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cb8c:	759a      	strb	r2, [r3, #22]
 800cb8e:	e056      	b.n	800cc3e <FUN_Rx_data_check+0x1a2>
		}
		else if((RS485Rx0Data[4] == 0x03) && (RS485Rx0Data[5] == 0x04))
 800cb90:	4b39      	ldr	r3, [pc, #228]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cb92:	791b      	ldrb	r3, [r3, #4]
 800cb94:	2b03      	cmp	r3, #3
 800cb96:	d10a      	bne.n	800cbae <FUN_Rx_data_check+0x112>
 800cb98:	4b37      	ldr	r3, [pc, #220]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cb9a:	795b      	ldrb	r3, [r3, #5]
 800cb9c:	2b04      	cmp	r3, #4
 800cb9e:	d106      	bne.n	800cbae <FUN_Rx_data_check+0x112>
		{
			RS485Rx.result += 5;
 800cba0:	4b36      	ldr	r3, [pc, #216]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cba2:	7d9b      	ldrb	r3, [r3, #22]
 800cba4:	3305      	adds	r3, #5
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	4b34      	ldr	r3, [pc, #208]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cbaa:	759a      	strb	r2, [r3, #22]
 800cbac:	e047      	b.n	800cc3e <FUN_Rx_data_check+0x1a2>
		}
		else if((RS485Rx0Data[4] == 0x03) && (RS485Rx0Data[5] == 0x05))
 800cbae:	4b32      	ldr	r3, [pc, #200]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cbb0:	791b      	ldrb	r3, [r3, #4]
 800cbb2:	2b03      	cmp	r3, #3
 800cbb4:	d10a      	bne.n	800cbcc <FUN_Rx_data_check+0x130>
 800cbb6:	4b30      	ldr	r3, [pc, #192]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cbb8:	795b      	ldrb	r3, [r3, #5]
 800cbba:	2b05      	cmp	r3, #5
 800cbbc:	d106      	bne.n	800cbcc <FUN_Rx_data_check+0x130>
		{
			RS485Rx.result += 6;
 800cbbe:	4b2f      	ldr	r3, [pc, #188]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cbc0:	7d9b      	ldrb	r3, [r3, #22]
 800cbc2:	3306      	adds	r3, #6
 800cbc4:	b2da      	uxtb	r2, r3
 800cbc6:	4b2d      	ldr	r3, [pc, #180]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cbc8:	759a      	strb	r2, [r3, #22]
 800cbca:	e038      	b.n	800cc3e <FUN_Rx_data_check+0x1a2>
		}
		else if((RS485Rx0Data[4] == 0x03) && (RS485Rx0Data[5] == 0x06))
 800cbcc:	4b2a      	ldr	r3, [pc, #168]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cbce:	791b      	ldrb	r3, [r3, #4]
 800cbd0:	2b03      	cmp	r3, #3
 800cbd2:	d10a      	bne.n	800cbea <FUN_Rx_data_check+0x14e>
 800cbd4:	4b28      	ldr	r3, [pc, #160]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cbd6:	795b      	ldrb	r3, [r3, #5]
 800cbd8:	2b06      	cmp	r3, #6
 800cbda:	d106      	bne.n	800cbea <FUN_Rx_data_check+0x14e>
		{
			RS485Rx.result += 7;
 800cbdc:	4b27      	ldr	r3, [pc, #156]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cbde:	7d9b      	ldrb	r3, [r3, #22]
 800cbe0:	3307      	adds	r3, #7
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	4b25      	ldr	r3, [pc, #148]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cbe6:	759a      	strb	r2, [r3, #22]
 800cbe8:	e029      	b.n	800cc3e <FUN_Rx_data_check+0x1a2>
		}
		else if((RS485Rx0Data[4] == 0x03) && (RS485Rx0Data[5] == 0x19))
 800cbea:	4b23      	ldr	r3, [pc, #140]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cbec:	791b      	ldrb	r3, [r3, #4]
 800cbee:	2b03      	cmp	r3, #3
 800cbf0:	d10a      	bne.n	800cc08 <FUN_Rx_data_check+0x16c>
 800cbf2:	4b21      	ldr	r3, [pc, #132]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cbf4:	795b      	ldrb	r3, [r3, #5]
 800cbf6:	2b19      	cmp	r3, #25
 800cbf8:	d106      	bne.n	800cc08 <FUN_Rx_data_check+0x16c>
		{
			RS485Rx.result += 8;
 800cbfa:	4b20      	ldr	r3, [pc, #128]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cbfc:	7d9b      	ldrb	r3, [r3, #22]
 800cbfe:	3308      	adds	r3, #8
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	4b1e      	ldr	r3, [pc, #120]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cc04:	759a      	strb	r2, [r3, #22]
 800cc06:	e01a      	b.n	800cc3e <FUN_Rx_data_check+0x1a2>
		}
		else if((RS485Rx0Data[4] == 0xE3) && (RS485Rx0Data[5] == 0x60))
 800cc08:	4b1b      	ldr	r3, [pc, #108]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cc0a:	791b      	ldrb	r3, [r3, #4]
 800cc0c:	2be3      	cmp	r3, #227	@ 0xe3
 800cc0e:	d10a      	bne.n	800cc26 <FUN_Rx_data_check+0x18a>
 800cc10:	4b19      	ldr	r3, [pc, #100]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cc12:	795b      	ldrb	r3, [r3, #5]
 800cc14:	2b60      	cmp	r3, #96	@ 0x60
 800cc16:	d106      	bne.n	800cc26 <FUN_Rx_data_check+0x18a>
		{
			RS485Rx.result += 9;
 800cc18:	4b18      	ldr	r3, [pc, #96]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cc1a:	7d9b      	ldrb	r3, [r3, #22]
 800cc1c:	3309      	adds	r3, #9
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	4b16      	ldr	r3, [pc, #88]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cc22:	759a      	strb	r2, [r3, #22]
 800cc24:	e00b      	b.n	800cc3e <FUN_Rx_data_check+0x1a2>
		}
		else
		{
			RS485Rx.Rx_cnt = 0;
 800cc26:	4b15      	ldr	r3, [pc, #84]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cc28:	2200      	movs	r2, #0
 800cc2a:	829a      	strh	r2, [r3, #20]
			RS485Rx.Rx_Data_flag = 0;  //Frame start reset
 800cc2c:	4b13      	ldr	r3, [pc, #76]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			RS485Rx.result = 0;
 800cc34:	4b11      	ldr	r3, [pc, #68]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	759a      	strb	r2, [r3, #22]
			// 실패한 수신
			return 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	e017      	b.n	800cc6e <FUN_Rx_data_check+0x1d2>
		}
	}
	if(RS485Rx.Rx_cnt >= 18)
 800cc3e:	4b0f      	ldr	r3, [pc, #60]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cc40:	8a9b      	ldrh	r3, [r3, #20]
 800cc42:	2b11      	cmp	r3, #17
 800cc44:	d912      	bls.n	800cc6c <FUN_Rx_data_check+0x1d0>
	{
		//ETX 체크
		if(RS485Rx0Data[17] != PACKET_ETX)
 800cc46:	4b0c      	ldr	r3, [pc, #48]	@ (800cc78 <FUN_Rx_data_check+0x1dc>)
 800cc48:	7c5b      	ldrb	r3, [r3, #17]
 800cc4a:	2b45      	cmp	r3, #69	@ 0x45
 800cc4c:	d00b      	beq.n	800cc66 <FUN_Rx_data_check+0x1ca>
		{
			RS485Rx.Rx_cnt = 0;
 800cc4e:	4b0b      	ldr	r3, [pc, #44]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	829a      	strh	r2, [r3, #20]
			RS485Rx.Rx_Data_flag = 0;  //Frame start reset
 800cc54:	4b09      	ldr	r3, [pc, #36]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			RS485Rx.result = 0;
 800cc5c:	4b07      	ldr	r3, [pc, #28]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	759a      	strb	r2, [r3, #22]
			// 실패한 수신
			return 0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	e003      	b.n	800cc6e <FUN_Rx_data_check+0x1d2>
		}
		else
		{
			// 성공적인 수신
			return RS485Rx.result;
 800cc66:	4b05      	ldr	r3, [pc, #20]	@ (800cc7c <FUN_Rx_data_check+0x1e0>)
 800cc68:	7d9b      	ldrb	r3, [r3, #22]
 800cc6a:	e000      	b.n	800cc6e <FUN_Rx_data_check+0x1d2>
		}
	}
	// 데이터가 더 남아있다
	return 0;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr
 800cc78:	20000544 	.word	0x20000544
 800cc7c:	20000574 	.word	0x20000574

0800cc80 <FUN_Rx_data_Modbus_check>:
uint8_t FUN_Rx_data_Modbus_check(void)  // 얘도 패킷 검사하고 실패 0 리턴 같음. 근데 얘는 성공 리턴 1임
{
 800cc80:	b480      	push	{r7}
 800cc82:	af00      	add	r7, sp, #0
	static uint8_t writeLen = 0;

	//[0] = Device ID Check
	if(RS485RxMOData[0] != HsdID){
 800cc84:	4b2f      	ldr	r3, [pc, #188]	@ (800cd44 <FUN_Rx_data_Modbus_check+0xc4>)
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	461a      	mov	r2, r3
 800cc8a:	4b2f      	ldr	r3, [pc, #188]	@ (800cd48 <FUN_Rx_data_Modbus_check+0xc8>)
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d004      	beq.n	800cc9c <FUN_Rx_data_Modbus_check+0x1c>
		RS485Rx.Rx_cnt = 0;
 800cc92:	4b2e      	ldr	r3, [pc, #184]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800cc94:	2200      	movs	r2, #0
 800cc96:	829a      	strh	r2, [r3, #20]
		// 실패한 수신
		return 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	e04e      	b.n	800cd3a <FUN_Rx_data_Modbus_check+0xba>
	}
	else{
		if(RS485Rx.Rx_cnt == 1){
 800cc9c:	4b2b      	ldr	r3, [pc, #172]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800cc9e:	8a9b      	ldrh	r3, [r3, #20]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d103      	bne.n	800ccac <FUN_Rx_data_Modbus_check+0x2c>
			RS485Rx.Rx_Data_flag = 1;  //Frame start is received
 800cca4:	4b29      	ldr	r3, [pc, #164]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		}
	}
	//[1] = Function Check
	if(RS485Rx.Rx_cnt >= 2)
 800ccac:	4b27      	ldr	r3, [pc, #156]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800ccae:	8a9b      	ldrh	r3, [r3, #20]
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d914      	bls.n	800ccde <FUN_Rx_data_Modbus_check+0x5e>
	{
		// Function 체크
		if((RS485RxMOData[1] != 0x03) && (RS485RxMOData[1] != 0x06) && (RS485RxMOData[1] != 0x10)){
 800ccb4:	4b23      	ldr	r3, [pc, #140]	@ (800cd44 <FUN_Rx_data_Modbus_check+0xc4>)
 800ccb6:	785b      	ldrb	r3, [r3, #1]
 800ccb8:	2b03      	cmp	r3, #3
 800ccba:	d010      	beq.n	800ccde <FUN_Rx_data_Modbus_check+0x5e>
 800ccbc:	4b21      	ldr	r3, [pc, #132]	@ (800cd44 <FUN_Rx_data_Modbus_check+0xc4>)
 800ccbe:	785b      	ldrb	r3, [r3, #1]
 800ccc0:	2b06      	cmp	r3, #6
 800ccc2:	d00c      	beq.n	800ccde <FUN_Rx_data_Modbus_check+0x5e>
 800ccc4:	4b1f      	ldr	r3, [pc, #124]	@ (800cd44 <FUN_Rx_data_Modbus_check+0xc4>)
 800ccc6:	785b      	ldrb	r3, [r3, #1]
 800ccc8:	2b10      	cmp	r3, #16
 800ccca:	d008      	beq.n	800ccde <FUN_Rx_data_Modbus_check+0x5e>
			RS485Rx.Rx_cnt = 0;
 800cccc:	4b1f      	ldr	r3, [pc, #124]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	829a      	strh	r2, [r3, #20]
			RS485Rx.Rx_Data_flag = 0;  //Frame start reset
 800ccd2:	4b1e      	ldr	r3, [pc, #120]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			// 실패한 수신
			return 0;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	e02d      	b.n	800cd3a <FUN_Rx_data_Modbus_check+0xba>
		}
	}
	//[2] = Address Register
	if(RS485Rx.Rx_cnt >= 3)
 800ccde:	4b1b      	ldr	r3, [pc, #108]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800cce0:	8a9b      	ldrh	r3, [r3, #20]
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d90c      	bls.n	800cd00 <FUN_Rx_data_Modbus_check+0x80>
	{
		// Address 0x0A 체크
		if(RS485RxMOData[2] != 0xA0){
 800cce6:	4b17      	ldr	r3, [pc, #92]	@ (800cd44 <FUN_Rx_data_Modbus_check+0xc4>)
 800cce8:	789b      	ldrb	r3, [r3, #2]
 800ccea:	2ba0      	cmp	r3, #160	@ 0xa0
 800ccec:	d008      	beq.n	800cd00 <FUN_Rx_data_Modbus_check+0x80>
			RS485Rx.Rx_cnt = 0;
 800ccee:	4b17      	ldr	r3, [pc, #92]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	829a      	strh	r2, [r3, #20]
			RS485Rx.Rx_Data_flag = 0;  //Frame start reset
 800ccf4:	4b15      	ldr	r3, [pc, #84]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			// 실패한 수신
			return 0;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	e01c      	b.n	800cd3a <FUN_Rx_data_Modbus_check+0xba>
		}
	}
	//[6] = Length Check
	if(RS485Rx.Rx_cnt >= 8)
 800cd00:	4b12      	ldr	r3, [pc, #72]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800cd02:	8a9b      	ldrh	r3, [r3, #20]
 800cd04:	2b07      	cmp	r3, #7
 800cd06:	d90a      	bls.n	800cd1e <FUN_Rx_data_Modbus_check+0x9e>
	{
		// Function Code is 0x10(Write Multiple Registers)
		if(RS485RxMOData[1] == 0x10){
 800cd08:	4b0e      	ldr	r3, [pc, #56]	@ (800cd44 <FUN_Rx_data_Modbus_check+0xc4>)
 800cd0a:	785b      	ldrb	r3, [r3, #1]
 800cd0c:	2b10      	cmp	r3, #16
 800cd0e:	d104      	bne.n	800cd1a <FUN_Rx_data_Modbus_check+0x9a>
			// 데이터가 더 남아있다
			writeLen = RS485RxMOData[6];
 800cd10:	4b0c      	ldr	r3, [pc, #48]	@ (800cd44 <FUN_Rx_data_Modbus_check+0xc4>)
 800cd12:	799a      	ldrb	r2, [r3, #6]
 800cd14:	4b0e      	ldr	r3, [pc, #56]	@ (800cd50 <FUN_Rx_data_Modbus_check+0xd0>)
 800cd16:	701a      	strb	r2, [r3, #0]
 800cd18:	e001      	b.n	800cd1e <FUN_Rx_data_Modbus_check+0x9e>
		}
		else{
			// 성공적인 수신
			return 1;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e00d      	b.n	800cd3a <FUN_Rx_data_Modbus_check+0xba>
		}
	}
	//0x10: Write Multiple Registers Max Length Check <-- Modbus_Map(Max is 25 byte)
	if((RS485Rx.Rx_cnt >= (writeLen + 9)) || (RS485Rx.Rx_cnt >= 25))
 800cd1e:	4b0c      	ldr	r3, [pc, #48]	@ (800cd50 <FUN_Rx_data_Modbus_check+0xd0>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	3308      	adds	r3, #8
 800cd24:	4a09      	ldr	r2, [pc, #36]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800cd26:	8a92      	ldrh	r2, [r2, #20]
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	db03      	blt.n	800cd34 <FUN_Rx_data_Modbus_check+0xb4>
 800cd2c:	4b07      	ldr	r3, [pc, #28]	@ (800cd4c <FUN_Rx_data_Modbus_check+0xcc>)
 800cd2e:	8a9b      	ldrh	r3, [r3, #20]
 800cd30:	2b18      	cmp	r3, #24
 800cd32:	d901      	bls.n	800cd38 <FUN_Rx_data_Modbus_check+0xb8>
	{
		// 성공적인 수신
		return 1;
 800cd34:	2301      	movs	r3, #1
 800cd36:	e000      	b.n	800cd3a <FUN_Rx_data_Modbus_check+0xba>
	}
	// 데이터가 더 남아있다
	return 0;
 800cd38:	2300      	movs	r3, #0
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr
 800cd44:	20000558 	.word	0x20000558
 800cd48:	20000572 	.word	0x20000572
 800cd4c:	20000574 	.word	0x20000574
 800cd50:	200005c6 	.word	0x200005c6

0800cd54 <HAL_UART_RxCpltCallback>:
/****************************************************************************/
/*	Overview	:	Rx 데이터 ICD 해석 부분										*/
/*	Return value:	void													*/
/****************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b088      	sub	sp, #32
 800cd58:	af02      	add	r7, sp, #8
 800cd5a:	6078      	str	r0, [r7, #4]
    uint16_t checkSumA;
    uint16_t rxCheckSumA;
	 if(huart->Instance==UART5)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4aa4      	ldr	r2, [pc, #656]	@ (800cff4 <HAL_UART_RxCpltCallback+0x2a0>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	f040 824e 	bne.w	800d204 <HAL_UART_RxCpltCallback+0x4b0>
	 {
		 if(ui.Protocol_Type == 0)
 800cd68:	4ba3      	ldr	r3, [pc, #652]	@ (800cff8 <HAL_UART_RxCpltCallback+0x2a4>)
 800cd6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d121      	bne.n	800cdb6 <HAL_UART_RxCpltCallback+0x62>
		 {
			 RS485RxMOData[RS485Rx.Rx_cnt++] = RS485RxA;
 800cd72:	4ba2      	ldr	r3, [pc, #648]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cd74:	8a9b      	ldrh	r3, [r3, #20]
 800cd76:	1c5a      	adds	r2, r3, #1
 800cd78:	b291      	uxth	r1, r2
 800cd7a:	4aa0      	ldr	r2, [pc, #640]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cd7c:	8291      	strh	r1, [r2, #20]
 800cd7e:	461a      	mov	r2, r3
 800cd80:	4b9f      	ldr	r3, [pc, #636]	@ (800d000 <HAL_UART_RxCpltCallback+0x2ac>)
 800cd82:	7819      	ldrb	r1, [r3, #0]
 800cd84:	4b9f      	ldr	r3, [pc, #636]	@ (800d004 <HAL_UART_RxCpltCallback+0x2b0>)
 800cd86:	5499      	strb	r1, [r3, r2]

			 RS485Rx.result_MO = FUN_Rx_data_Modbus_check();
 800cd88:	f7ff ff7a 	bl	800cc80 <FUN_Rx_data_Modbus_check>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	461a      	mov	r2, r3
 800cd90:	4b9a      	ldr	r3, [pc, #616]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cd92:	75da      	strb	r2, [r3, #23]

			 if(RS485Rx.result_MO == 1) {
 800cd94:	4b99      	ldr	r3, [pc, #612]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cd96:	7ddb      	ldrb	r3, [r3, #23]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	f040 822e 	bne.w	800d1fa <HAL_UART_RxCpltCallback+0x4a6>
				 RS485Rx.Rx_cnt = 0;
 800cd9e:	4b97      	ldr	r3, [pc, #604]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cda0:	2200      	movs	r2, #0
 800cda2:	829a      	strh	r2, [r3, #20]
				 RS485Rx.Rx_Data_flag = 0;
 800cda4:	4b95      	ldr	r3, [pc, #596]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cda6:	2200      	movs	r2, #0
 800cda8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
				 FUN_Modbus_Read();
 800cdac:	f7fe ffe8 	bl	800bd80 <FUN_Modbus_Read>
				 RS48501_TxData();
 800cdb0:	f7ff fdd4 	bl	800c95c <RS48501_TxData>
 800cdb4:	e221      	b.n	800d1fa <HAL_UART_RxCpltCallback+0x4a6>
			 }
		 }
		 else
		 {
			 RS485Rx0Data[RS485Rx.Rx_cnt++] = RS485RxA;
 800cdb6:	4b91      	ldr	r3, [pc, #580]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cdb8:	8a9b      	ldrh	r3, [r3, #20]
 800cdba:	1c5a      	adds	r2, r3, #1
 800cdbc:	b291      	uxth	r1, r2
 800cdbe:	4a8f      	ldr	r2, [pc, #572]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cdc0:	8291      	strh	r1, [r2, #20]
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	4b8e      	ldr	r3, [pc, #568]	@ (800d000 <HAL_UART_RxCpltCallback+0x2ac>)
 800cdc6:	7819      	ldrb	r1, [r3, #0]
 800cdc8:	4b8f      	ldr	r3, [pc, #572]	@ (800d008 <HAL_UART_RxCpltCallback+0x2b4>)
 800cdca:	5499      	strb	r1, [r3, r2]

			 RS485Rx.result = FUN_Rx_data_check();
 800cdcc:	f7ff fe66 	bl	800ca9c <FUN_Rx_data_check>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	4b89      	ldr	r3, [pc, #548]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cdd6:	759a      	strb	r2, [r3, #22]

			 uint8_t rsdCode;
			 // CheckSum Check after One Frame Receive and Id check OK
			 if(RS485Rx.result != 0)
 800cdd8:	4b88      	ldr	r3, [pc, #544]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cdda:	7d9b      	ldrb	r3, [r3, #22]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f000 820c 	beq.w	800d1fa <HAL_UART_RxCpltCallback+0x4a6>
			 {
				 RS485Rx.Rx_Data_flag = 0;
 800cde2:	4b86      	ldr	r3, [pc, #536]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cde4:	2200      	movs	r2, #0
 800cde6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
				 RS485Rx.Rx_cnt = 0;
 800cdea:	4b84      	ldr	r3, [pc, #528]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cdec:	2200      	movs	r2, #0
 800cdee:	829a      	strh	r2, [r3, #20]
				 // 수신데이터 처리하지 않음(목적지가 ID가 맞지 않음)
				 if(RS485Rx0Data[7] == HsdID)
 800cdf0:	4b85      	ldr	r3, [pc, #532]	@ (800d008 <HAL_UART_RxCpltCallback+0x2b4>)
 800cdf2:	79db      	ldrb	r3, [r3, #7]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	4b85      	ldr	r3, [pc, #532]	@ (800d00c <HAL_UART_RxCpltCallback+0x2b8>)
 800cdf8:	881b      	ldrh	r3, [r3, #0]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	f040 81f6 	bne.w	800d1ec <HAL_UART_RxCpltCallback+0x498>
				 {
					 // CheckSum
					 checkSumA = 0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	82fb      	strh	r3, [r7, #22]
					 for (uint16_t i = 1; i < 15 ; i++)
 800ce04:	2301      	movs	r3, #1
 800ce06:	82bb      	strh	r3, [r7, #20]
 800ce08:	e009      	b.n	800ce1e <HAL_UART_RxCpltCallback+0xca>
					 {
						 checkSumA += RS485Rx0Data[i];
 800ce0a:	8abb      	ldrh	r3, [r7, #20]
 800ce0c:	4a7e      	ldr	r2, [pc, #504]	@ (800d008 <HAL_UART_RxCpltCallback+0x2b4>)
 800ce0e:	5cd3      	ldrb	r3, [r2, r3]
 800ce10:	461a      	mov	r2, r3
 800ce12:	8afb      	ldrh	r3, [r7, #22]
 800ce14:	4413      	add	r3, r2
 800ce16:	82fb      	strh	r3, [r7, #22]
					 for (uint16_t i = 1; i < 15 ; i++)
 800ce18:	8abb      	ldrh	r3, [r7, #20]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	82bb      	strh	r3, [r7, #20]
 800ce1e:	8abb      	ldrh	r3, [r7, #20]
 800ce20:	2b0e      	cmp	r3, #14
 800ce22:	d9f2      	bls.n	800ce0a <HAL_UART_RxCpltCallback+0xb6>
					 }
					 rxCheckSumA   = ((int16_t)RS485Rx0Data[15] << 8);
 800ce24:	4b78      	ldr	r3, [pc, #480]	@ (800d008 <HAL_UART_RxCpltCallback+0x2b4>)
 800ce26:	7bdb      	ldrb	r3, [r3, #15]
 800ce28:	021b      	lsls	r3, r3, #8
 800ce2a:	823b      	strh	r3, [r7, #16]
					 rxCheckSumA   |= ((int16_t)RS485Rx0Data[16] & 0xFF);
 800ce2c:	4b76      	ldr	r3, [pc, #472]	@ (800d008 <HAL_UART_RxCpltCallback+0x2b4>)
 800ce2e:	7c1b      	ldrb	r3, [r3, #16]
 800ce30:	461a      	mov	r2, r3
 800ce32:	8a3b      	ldrh	r3, [r7, #16]
 800ce34:	4313      	orrs	r3, r2
 800ce36:	823b      	strh	r3, [r7, #16]

					 // CheckSum
					 if(checkSumA != rxCheckSumA){
 800ce38:	8afa      	ldrh	r2, [r7, #22]
 800ce3a:	8a3b      	ldrh	r3, [r7, #16]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d030      	beq.n	800cea2 <HAL_UART_RxCpltCallback+0x14e>
						 RS485Rx.Checksum_Error_Cnt++;
 800ce40:	4b6e      	ldr	r3, [pc, #440]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800ce42:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	3301      	adds	r3, #1
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	b21a      	sxth	r2, r3
 800ce4e:	4b6b      	ldr	r3, [pc, #428]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800ce50:	84da      	strh	r2, [r3, #38]	@ 0x26
					 	if(RS485Rx.Checksum_Error_Cnt >= 3)
 800ce52:	4b6a      	ldr	r3, [pc, #424]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800ce54:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	dd1e      	ble.n	800ce9a <HAL_UART_RxCpltCallback+0x146>
					 	{
					 		// 3회 연속 발생시 내부 알람 발생, LCD에 에러 Display
							RS485Rx.Checksum_Error = 1;  // 하기 State를 활용하여 LCD 에러 Display 등 수행
 800ce5c:	4b67      	ldr	r3, [pc, #412]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
							// Ack To PC or PLC
							rsdCode = (uint8_t)RS485Rx.result;
 800ce64:	4b65      	ldr	r3, [pc, #404]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800ce66:	7d9b      	ldrb	r3, [r3, #22]
 800ce68:	73fb      	strb	r3, [r7, #15]
							if(rsdCode == 1){
 800ce6a:	7bfb      	ldrb	r3, [r7, #15]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d109      	bne.n	800ce84 <HAL_UART_RxCpltCallback+0x130>
								// 비정상 명령수신 에러응답 CMD: 0x05A1, Code: rsdCode
								AddF_CmdReqToPC(0x0C,0x05A3,rsdCode,0xFF,0x00);
 800ce70:	7bfa      	ldrb	r2, [r7, #15]
 800ce72:	2300      	movs	r3, #0
 800ce74:	9300      	str	r3, [sp, #0]
 800ce76:	23ff      	movs	r3, #255	@ 0xff
 800ce78:	f240 51a3 	movw	r1, #1443	@ 0x5a3
 800ce7c:	200c      	movs	r0, #12
 800ce7e:	f7ff fbf5 	bl	800c66c <AddF_CmdReqToPC>
 800ce82:	e00a      	b.n	800ce9a <HAL_UART_RxCpltCallback+0x146>
							}
							else{
								// 비정상 명령수신 에러응답 CMD: 0x05A3, Code: (rsdCode-1)
								AddF_CmdReqToPC(0x0C,0x05A3,(rsdCode-1),0xFF,0x00);
 800ce84:	7bfb      	ldrb	r3, [r7, #15]
 800ce86:	3b01      	subs	r3, #1
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	23ff      	movs	r3, #255	@ 0xff
 800ce90:	f240 51a3 	movw	r1, #1443	@ 0x5a3
 800ce94:	200c      	movs	r0, #12
 800ce96:	f7ff fbe9 	bl	800c66c <AddF_CmdReqToPC>
							}
					 	}
					 	// CheckSum이 맞지 않으면 정상응답 하지 않음
					 	RS485Rx.result = 0;
 800ce9a:	4b58      	ldr	r3, [pc, #352]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	759a      	strb	r2, [r3, #22]
 800cea0:	e006      	b.n	800ceb0 <HAL_UART_RxCpltCallback+0x15c>
					 }
					 else	//Pass, HsdData Update
					 {
						 // 정상 Packet 수신시 자동 리셋
						 // 정상 Packet 미 수신시 리셋 버튼에 의한 리셋 필요
						 RS485Rx.Checksum_Error = 0;
 800cea2:	4b56      	ldr	r3, [pc, #344]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
						 RS485Rx.Checksum_Error_Cnt = 0;
 800ceaa:	4b54      	ldr	r3, [pc, #336]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800ceac:	2200      	movs	r2, #0
 800ceae:	84da      	strh	r2, [r3, #38]	@ 0x26
					 }

					 uint8_t cmd_Ack; //, Error_bit, reset_bit, MSG_SYS;
					 int16_t tempVal1, tempVal2; //, DEVVal;
					 // 정상명령 수신 후 응답
					 switch(RS485Rx.result){
 800ceb0:	4b52      	ldr	r3, [pc, #328]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800ceb2:	7d9b      	ldrb	r3, [r3, #22]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	2b08      	cmp	r3, #8
 800ceb8:	f200 819c 	bhi.w	800d1f4 <HAL_UART_RxCpltCallback+0x4a0>
 800cebc:	a201      	add	r2, pc, #4	@ (adr r2, 800cec4 <HAL_UART_RxCpltCallback+0x170>)
 800cebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec2:	bf00      	nop
 800cec4:	0800cee9 	.word	0x0800cee9
 800cec8:	0800cef7 	.word	0x0800cef7
 800cecc:	0800cf3b 	.word	0x0800cf3b
 800ced0:	0800d0af 	.word	0x0800d0af
 800ced4:	0800d0f5 	.word	0x0800d0f5
 800ced8:	0800d13b 	.word	0x0800d13b
 800cedc:	0800d1f5 	.word	0x0800d1f5
 800cee0:	0800d181 	.word	0x0800d181
 800cee4:	0800d1a1 	.word	0x0800d1a1
						 case 1:
							 // Request a Data frame
							 AddF_ReqDataToPC(0x12, 0x05A1, 0x01);
 800cee8:	2201      	movs	r2, #1
 800ceea:	f240 51a1 	movw	r1, #1441	@ 0x5a1
 800ceee:	2012      	movs	r0, #18
 800cef0:	f7ff f9b2 	bl	800c258 <AddF_ReqDataToPC>
							 break;
 800cef4:	e17f      	b.n	800d1f6 <HAL_UART_RxCpltCallback+0x4a2>
						 case 2:
							// 수신 명령 수행, 감지상태 RESET
							if(RS485Rx0Data[9] == 1){
 800cef6:	4b44      	ldr	r3, [pc, #272]	@ (800d008 <HAL_UART_RxCpltCallback+0x2b4>)
 800cef8:	7a5b      	ldrb	r3, [r3, #9]
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d111      	bne.n	800cf22 <HAL_UART_RxCpltCallback+0x1ce>
								Gas_Sensor.Gas_Detect = 0;
 800cefe:	4b44      	ldr	r3, [pc, #272]	@ (800d010 <HAL_UART_RxCpltCallback+0x2bc>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
								ui.Status.Bit.SMOKE_DETECT = 0;
 800cf06:	4a3c      	ldr	r2, [pc, #240]	@ (800cff8 <HAL_UART_RxCpltCallback+0x2a4>)
 800cf08:	7853      	ldrb	r3, [r2, #1]
 800cf0a:	f36f 0341 	bfc	r3, #1, #1
 800cf0e:	7053      	strb	r3, [r2, #1]
								ui.temp_alarm_bit = 0;
 800cf10:	4b39      	ldr	r3, [pc, #228]	@ (800cff8 <HAL_UART_RxCpltCallback+0x2a4>)
 800cf12:	2200      	movs	r2, #0
 800cf14:	761a      	strb	r2, [r3, #24]
								ui.temp_warring_bit = 0;
 800cf16:	4b38      	ldr	r3, [pc, #224]	@ (800cff8 <HAL_UART_RxCpltCallback+0x2a4>)
 800cf18:	2200      	movs	r2, #0
 800cf1a:	75da      	strb	r2, [r3, #23]
								cmd_Ack = 1;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	74fb      	strb	r3, [r7, #19]
 800cf20:	e001      	b.n	800cf26 <HAL_UART_RxCpltCallback+0x1d2>
							}
							else{
								cmd_Ack = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	74fb      	strb	r3, [r7, #19]
							}
							AddF_CmdReqToPC(0x0C,0x05A3,0x01,0x00,cmd_Ack);
 800cf26:	7cfb      	ldrb	r3, [r7, #19]
 800cf28:	9300      	str	r3, [sp, #0]
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	f240 51a3 	movw	r1, #1443	@ 0x5a3
 800cf32:	200c      	movs	r0, #12
 800cf34:	f7ff fb9a 	bl	800c66c <AddF_CmdReqToPC>
							 break;
 800cf38:	e15d      	b.n	800d1f6 <HAL_UART_RxCpltCallback+0x4a2>
						 case 3:
							 // 수신 명령 수행, 온도 경고/알람 기준값 변경
							// 온도 경고 발생 기준값
							RS485Rx.ff_cTemp_warring_R = ((int16_t)(ui.temp_warring * 100));
 800cf3a:	4b2f      	ldr	r3, [pc, #188]	@ (800cff8 <HAL_UART_RxCpltCallback+0x2a4>)
 800cf3c:	edd3 7a07 	vldr	s15, [r3, #28]
 800cf40:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d014 <HAL_UART_RxCpltCallback+0x2c0>
 800cf44:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf4c:	ee17 3a90 	vmov	r3, s15
 800cf50:	b21a      	sxth	r2, r3
 800cf52:	4b2a      	ldr	r3, [pc, #168]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cf54:	815a      	strh	r2, [r3, #10]
							RS485Rx.ff_cTemp_alarm_R = ((int16_t)(ui.temp_alarm * 100));
 800cf56:	4b28      	ldr	r3, [pc, #160]	@ (800cff8 <HAL_UART_RxCpltCallback+0x2a4>)
 800cf58:	edd3 7a08 	vldr	s15, [r3, #32]
 800cf5c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800d014 <HAL_UART_RxCpltCallback+0x2c0>
 800cf60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf68:	ee17 3a90 	vmov	r3, s15
 800cf6c:	b21a      	sxth	r2, r3
 800cf6e:	4b23      	ldr	r3, [pc, #140]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cf70:	811a      	strh	r2, [r3, #8]

							RS485Rx.ff_cTemp_warring = ((int16_t)RS485Rx0Data[9] << 8);
 800cf72:	4b25      	ldr	r3, [pc, #148]	@ (800d008 <HAL_UART_RxCpltCallback+0x2b4>)
 800cf74:	7a5b      	ldrb	r3, [r3, #9]
 800cf76:	021b      	lsls	r3, r3, #8
 800cf78:	b21a      	sxth	r2, r3
 800cf7a:	4b20      	ldr	r3, [pc, #128]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cf7c:	81da      	strh	r2, [r3, #14]
							RS485Rx.ff_cTemp_warring |= ((int16_t)RS485Rx0Data[10] & 0xFF);
 800cf7e:	4b1f      	ldr	r3, [pc, #124]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cf80:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800cf84:	4b20      	ldr	r3, [pc, #128]	@ (800d008 <HAL_UART_RxCpltCallback+0x2b4>)
 800cf86:	7a9b      	ldrb	r3, [r3, #10]
 800cf88:	b21b      	sxth	r3, r3
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	b21a      	sxth	r2, r3
 800cf8e:	4b1b      	ldr	r3, [pc, #108]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cf90:	81da      	strh	r2, [r3, #14]
							// 온도 알람 발생 기준값
							RS485Rx.ff_cTemp_alarm   = ((int16_t)RS485Rx0Data[11] << 8);
 800cf92:	4b1d      	ldr	r3, [pc, #116]	@ (800d008 <HAL_UART_RxCpltCallback+0x2b4>)
 800cf94:	7adb      	ldrb	r3, [r3, #11]
 800cf96:	021b      	lsls	r3, r3, #8
 800cf98:	b21a      	sxth	r2, r3
 800cf9a:	4b18      	ldr	r3, [pc, #96]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cf9c:	819a      	strh	r2, [r3, #12]
							RS485Rx.ff_cTemp_alarm   |= ((int16_t)RS485Rx0Data[12] & 0xFF);
 800cf9e:	4b17      	ldr	r3, [pc, #92]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cfa0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800cfa4:	4b18      	ldr	r3, [pc, #96]	@ (800d008 <HAL_UART_RxCpltCallback+0x2b4>)
 800cfa6:	7b1b      	ldrb	r3, [r3, #12]
 800cfa8:	b21b      	sxth	r3, r3
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	b21a      	sxth	r2, r3
 800cfae:	4b13      	ldr	r3, [pc, #76]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cfb0:	819a      	strh	r2, [r3, #12]
							// Limit
							if(RS485Rx.ff_cTemp_warring > 9999){
 800cfb2:	4b12      	ldr	r3, [pc, #72]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cfb4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800cfb8:	f242 720f 	movw	r2, #9999	@ 0x270f
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	dd04      	ble.n	800cfca <HAL_UART_RxCpltCallback+0x276>
								RS485Rx.ff_cTemp_warring = 9999;
 800cfc0:	4b0e      	ldr	r3, [pc, #56]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cfc2:	f242 720f 	movw	r2, #9999	@ 0x270f
 800cfc6:	81da      	strh	r2, [r3, #14]
 800cfc8:	e007      	b.n	800cfda <HAL_UART_RxCpltCallback+0x286>
							}
							else if(RS485Rx.ff_cTemp_warring < 0){
 800cfca:	4b0c      	ldr	r3, [pc, #48]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cfcc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	da02      	bge.n	800cfda <HAL_UART_RxCpltCallback+0x286>
								RS485Rx.ff_cTemp_warring = 0;
 800cfd4:	4b09      	ldr	r3, [pc, #36]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	81da      	strh	r2, [r3, #14]
							}
							else;
							if(RS485Rx.ff_cTemp_alarm > 9999){
 800cfda:	4b08      	ldr	r3, [pc, #32]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cfdc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800cfe0:	f242 720f 	movw	r2, #9999	@ 0x270f
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	dd17      	ble.n	800d018 <HAL_UART_RxCpltCallback+0x2c4>
								RS485Rx.ff_cTemp_alarm = 9999;
 800cfe8:	4b04      	ldr	r3, [pc, #16]	@ (800cffc <HAL_UART_RxCpltCallback+0x2a8>)
 800cfea:	f242 720f 	movw	r2, #9999	@ 0x270f
 800cfee:	819a      	strh	r2, [r3, #12]
 800cff0:	e01a      	b.n	800d028 <HAL_UART_RxCpltCallback+0x2d4>
 800cff2:	bf00      	nop
 800cff4:	40005000 	.word	0x40005000
 800cff8:	200004f0 	.word	0x200004f0
 800cffc:	20000574 	.word	0x20000574
 800d000:	200005c4 	.word	0x200005c4
 800d004:	20000558 	.word	0x20000558
 800d008:	20000544 	.word	0x20000544
 800d00c:	20000572 	.word	0x20000572
 800d010:	200005c8 	.word	0x200005c8
 800d014:	42c80000 	.word	0x42c80000
							}
							else if(RS485Rx.ff_cTemp_alarm < 0){
 800d018:	4b7c      	ldr	r3, [pc, #496]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d01a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	da02      	bge.n	800d028 <HAL_UART_RxCpltCallback+0x2d4>
								RS485Rx.ff_cTemp_alarm = 0;
 800d022:	4b7a      	ldr	r3, [pc, #488]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d024:	2200      	movs	r2, #0
 800d026:	819a      	strh	r2, [r3, #12]
							}
							else;
							// 온도값 경고 기준 Update
							ui.temp_warring    = (float)(RS485Rx.ff_cTemp_warring) / 100;
 800d028:	4b78      	ldr	r3, [pc, #480]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d02a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d02e:	ee07 3a90 	vmov	s15, r3
 800d032:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d036:	eddf 6a76 	vldr	s13, [pc, #472]	@ 800d210 <HAL_UART_RxCpltCallback+0x4bc>
 800d03a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d03e:	4b75      	ldr	r3, [pc, #468]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d040:	edc3 7a07 	vstr	s15, [r3, #28]
							// 온도값 알람 기준 Update
							ui.temp_alarm      = (float)(RS485Rx.ff_cTemp_alarm) / 100;
 800d044:	4b71      	ldr	r3, [pc, #452]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d046:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800d04a:	ee07 3a90 	vmov	s15, r3
 800d04e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d052:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d210 <HAL_UART_RxCpltCallback+0x4bc>
 800d056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d05a:	4b6e      	ldr	r3, [pc, #440]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d05c:	edc3 7a08 	vstr	s15, [r3, #32]

							if((RS485Rx.ff_cTemp_warring_R != RS485Rx.ff_cTemp_warring) || (RS485Rx.ff_cTemp_alarm_R != RS485Rx.ff_cTemp_alarm))
 800d060:	4b6a      	ldr	r3, [pc, #424]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d062:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800d066:	4b69      	ldr	r3, [pc, #420]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d068:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d107      	bne.n	800d080 <HAL_UART_RxCpltCallback+0x32c>
 800d070:	4b66      	ldr	r3, [pc, #408]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d072:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800d076:	4b65      	ldr	r3, [pc, #404]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d078:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d002      	beq.n	800d086 <HAL_UART_RxCpltCallback+0x332>
							{
								// 온도 경고/알람 기준값 EEPROM 저장
								EEPROM.SaveData_Flag = 1;
 800d080:	4b65      	ldr	r3, [pc, #404]	@ (800d218 <HAL_UART_RxCpltCallback+0x4c4>)
 800d082:	2201      	movs	r2, #1
 800d084:	701a      	strb	r2, [r3, #0]
							}

							// 정상명령 응답 (소주점 둘째자리 제거)
							tempVal1 = RS485Rx.ff_cTemp_warring;
 800d086:	4b61      	ldr	r3, [pc, #388]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d088:	89db      	ldrh	r3, [r3, #14]
 800d08a:	817b      	strh	r3, [r7, #10]
							tempVal2 = RS485Rx.ff_cTemp_alarm;
 800d08c:	4b5f      	ldr	r3, [pc, #380]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d08e:	899b      	ldrh	r3, [r3, #12]
 800d090:	813b      	strh	r3, [r7, #8]
							AddF_CmdReqToPC_Val(0x0C, 0x05A3, 0x02, 0x00, tempVal1, tempVal2);
 800d092:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800d096:	9301      	str	r3, [sp, #4]
 800d098:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	2300      	movs	r3, #0
 800d0a0:	2202      	movs	r2, #2
 800d0a2:	f240 51a3 	movw	r1, #1443	@ 0x5a3
 800d0a6:	200c      	movs	r0, #12
 800d0a8:	f7ff fb86 	bl	800c7b8 <AddF_CmdReqToPC_Val>
							break;
 800d0ac:	e0a3      	b.n	800d1f6 <HAL_UART_RxCpltCallback+0x4a2>
						 case 4:
							// 수신명령 수행: 온도 경고,알람 Enable / Disable
							uint8_t alarm_enable = ui.temp_alarm_enable;
 800d0ae:	4b59      	ldr	r3, [pc, #356]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d0b0:	7d9b      	ldrb	r3, [r3, #22]
 800d0b2:	733b      	strb	r3, [r7, #12]

							if(RS485Rx0Data[9] == 0){
 800d0b4:	4b59      	ldr	r3, [pc, #356]	@ (800d21c <HAL_UART_RxCpltCallback+0x4c8>)
 800d0b6:	7a5b      	ldrb	r3, [r3, #9]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d103      	bne.n	800d0c4 <HAL_UART_RxCpltCallback+0x370>
								ui.temp_alarm_enable = 0;
 800d0bc:	4b55      	ldr	r3, [pc, #340]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	759a      	strb	r2, [r3, #22]
 800d0c2:	e002      	b.n	800d0ca <HAL_UART_RxCpltCallback+0x376>
							}
							else{
								ui.temp_alarm_enable = 1;
 800d0c4:	4b53      	ldr	r3, [pc, #332]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	759a      	strb	r2, [r3, #22]
							}

							if(alarm_enable != ui.temp_alarm_enable)
 800d0ca:	4b52      	ldr	r3, [pc, #328]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d0cc:	7d9b      	ldrb	r3, [r3, #22]
 800d0ce:	7b3a      	ldrb	r2, [r7, #12]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d002      	beq.n	800d0da <HAL_UART_RxCpltCallback+0x386>
							{
								// 온도 경고/알람 Enable/Disable EEPROM 저장
								EEPROM.SaveData_Flag = 1;
 800d0d4:	4b50      	ldr	r3, [pc, #320]	@ (800d218 <HAL_UART_RxCpltCallback+0x4c4>)
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	701a      	strb	r2, [r3, #0]
							}

							// 정상명령 응답
							cmd_Ack = ui.temp_alarm_enable;
 800d0da:	4b4e      	ldr	r3, [pc, #312]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d0dc:	7d9b      	ldrb	r3, [r3, #22]
 800d0de:	74fb      	strb	r3, [r7, #19]
							AddF_CmdReqToPC(0x0C,0x05A3,0x03,0x00,cmd_Ack);
 800d0e0:	7cfb      	ldrb	r3, [r7, #19]
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	2203      	movs	r2, #3
 800d0e8:	f240 51a3 	movw	r1, #1443	@ 0x5a3
 800d0ec:	200c      	movs	r0, #12
 800d0ee:	f7ff fabd 	bl	800c66c <AddF_CmdReqToPC>
							 break;
 800d0f2:	e080      	b.n	800d1f6 <HAL_UART_RxCpltCallback+0x4a2>
						 case 5:
							uint8_t warring_maintain_bit = ui.temp_warring_maintain_bit;
 800d0f4:	4b47      	ldr	r3, [pc, #284]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d0f6:	7e5b      	ldrb	r3, [r3, #25]
 800d0f8:	737b      	strb	r3, [r7, #13]
							// 수신명령 수행: 온도 경고 유지 Enable / Disable
							if(RS485Rx0Data[9] == 1){
 800d0fa:	4b48      	ldr	r3, [pc, #288]	@ (800d21c <HAL_UART_RxCpltCallback+0x4c8>)
 800d0fc:	7a5b      	ldrb	r3, [r3, #9]
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d103      	bne.n	800d10a <HAL_UART_RxCpltCallback+0x3b6>
								ui.temp_warring_maintain_bit = 1;
 800d102:	4b44      	ldr	r3, [pc, #272]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d104:	2201      	movs	r2, #1
 800d106:	765a      	strb	r2, [r3, #25]
 800d108:	e002      	b.n	800d110 <HAL_UART_RxCpltCallback+0x3bc>
							}
							else{
								ui.temp_warring_maintain_bit = 0;
 800d10a:	4b42      	ldr	r3, [pc, #264]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	765a      	strb	r2, [r3, #25]
							}

							if(warring_maintain_bit != ui.temp_warring_maintain_bit)
 800d110:	4b40      	ldr	r3, [pc, #256]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d112:	7e5b      	ldrb	r3, [r3, #25]
 800d114:	7b7a      	ldrb	r2, [r7, #13]
 800d116:	429a      	cmp	r2, r3
 800d118:	d002      	beq.n	800d120 <HAL_UART_RxCpltCallback+0x3cc>
							{
								// 온도 경고온도유지 설정 EEPROM 저장
								EEPROM.SaveData_Flag = 1;
 800d11a:	4b3f      	ldr	r3, [pc, #252]	@ (800d218 <HAL_UART_RxCpltCallback+0x4c4>)
 800d11c:	2201      	movs	r2, #1
 800d11e:	701a      	strb	r2, [r3, #0]
							}

							// 정상명령 응답
							cmd_Ack = ui.temp_warring_maintain_bit;
 800d120:	4b3c      	ldr	r3, [pc, #240]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d122:	7e5b      	ldrb	r3, [r3, #25]
 800d124:	74fb      	strb	r3, [r7, #19]
							AddF_CmdReqToPC(0x0C,0x05A3,0x04,0x00,cmd_Ack);
 800d126:	7cfb      	ldrb	r3, [r7, #19]
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	2300      	movs	r3, #0
 800d12c:	2204      	movs	r2, #4
 800d12e:	f240 51a3 	movw	r1, #1443	@ 0x5a3
 800d132:	200c      	movs	r0, #12
 800d134:	f7ff fa9a 	bl	800c66c <AddF_CmdReqToPC>
							break;
 800d138:	e05d      	b.n	800d1f6 <HAL_UART_RxCpltCallback+0x4a2>
						 case 6:
							uint8_t alarm_maintain_bit = ui.temp_alarm_maintain_bit;
 800d13a:	4b36      	ldr	r3, [pc, #216]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d13c:	7e9b      	ldrb	r3, [r3, #26]
 800d13e:	73bb      	strb	r3, [r7, #14]
							// 수신명령 수행: 온도 알람 유지 Enable/Disable
							if(RS485Rx0Data[9] == 1){
 800d140:	4b36      	ldr	r3, [pc, #216]	@ (800d21c <HAL_UART_RxCpltCallback+0x4c8>)
 800d142:	7a5b      	ldrb	r3, [r3, #9]
 800d144:	2b01      	cmp	r3, #1
 800d146:	d103      	bne.n	800d150 <HAL_UART_RxCpltCallback+0x3fc>
								ui.temp_alarm_maintain_bit = 1;
 800d148:	4b32      	ldr	r3, [pc, #200]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d14a:	2201      	movs	r2, #1
 800d14c:	769a      	strb	r2, [r3, #26]
 800d14e:	e002      	b.n	800d156 <HAL_UART_RxCpltCallback+0x402>
							}
							else{
								ui.temp_alarm_maintain_bit = 0;
 800d150:	4b30      	ldr	r3, [pc, #192]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d152:	2200      	movs	r2, #0
 800d154:	769a      	strb	r2, [r3, #26]
							}
							if(alarm_maintain_bit != ui.temp_alarm_maintain_bit)
 800d156:	4b2f      	ldr	r3, [pc, #188]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d158:	7e9b      	ldrb	r3, [r3, #26]
 800d15a:	7bba      	ldrb	r2, [r7, #14]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d002      	beq.n	800d166 <HAL_UART_RxCpltCallback+0x412>
							{
								// 온도 경고알람유지 설정 EEPROM 저장
								EEPROM.SaveData_Flag = 1;
 800d160:	4b2d      	ldr	r3, [pc, #180]	@ (800d218 <HAL_UART_RxCpltCallback+0x4c4>)
 800d162:	2201      	movs	r2, #1
 800d164:	701a      	strb	r2, [r3, #0]
							}

							// 정상명령 응답
							cmd_Ack = ui.temp_alarm_maintain_bit;
 800d166:	4b2b      	ldr	r3, [pc, #172]	@ (800d214 <HAL_UART_RxCpltCallback+0x4c0>)
 800d168:	7e9b      	ldrb	r3, [r3, #26]
 800d16a:	74fb      	strb	r3, [r7, #19]
							AddF_CmdReqToPC(0x0C,0x05A3,0x04,0x00,cmd_Ack);
 800d16c:	7cfb      	ldrb	r3, [r7, #19]
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	2300      	movs	r3, #0
 800d172:	2204      	movs	r2, #4
 800d174:	f240 51a3 	movw	r1, #1443	@ 0x5a3
 800d178:	200c      	movs	r0, #12
 800d17a:	f7ff fa77 	bl	800c66c <AddF_CmdReqToPC>
							break;
 800d17e:	e03a      	b.n	800d1f6 <HAL_UART_RxCpltCallback+0x4a2>
							tempVal1 = (int16_t)ui.co_100times;
							AddF_CmdReqToPC_Val(0x0C, 0x05A3, 0x06, 0x00, tempVal1,0x00);*/
							break;
						 case 8:
							 //부트로더 저장
							 u1f_bootjump_flag = 1;
 800d180:	4b27      	ldr	r3, [pc, #156]	@ (800d220 <HAL_UART_RxCpltCallback+0x4cc>)
 800d182:	2201      	movs	r2, #1
 800d184:	701a      	strb	r2, [r3, #0]
							 cmd_Ack = RS485Rx0Data[7];
 800d186:	4b25      	ldr	r3, [pc, #148]	@ (800d21c <HAL_UART_RxCpltCallback+0x4c8>)
 800d188:	79db      	ldrb	r3, [r3, #7]
 800d18a:	74fb      	strb	r3, [r7, #19]
							 AddF_CmdReqToPC(0x0C,0x0504,0x66,0x00,cmd_Ack);
 800d18c:	7cfb      	ldrb	r3, [r7, #19]
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	2300      	movs	r3, #0
 800d192:	2266      	movs	r2, #102	@ 0x66
 800d194:	f240 5104 	movw	r1, #1284	@ 0x504
 800d198:	200c      	movs	r0, #12
 800d19a:	f7ff fa67 	bl	800c66c <AddF_CmdReqToPC>
							 break;
 800d19e:	e02a      	b.n	800d1f6 <HAL_UART_RxCpltCallback+0x4a2>
						 case 9:
							 //ADC Offset Check Enable/Disable
							if(RS485Rx0Data[9] == 1)
 800d1a0:	4b1e      	ldr	r3, [pc, #120]	@ (800d21c <HAL_UART_RxCpltCallback+0x4c8>)
 800d1a2:	7a5b      	ldrb	r3, [r3, #9]
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d108      	bne.n	800d1ba <HAL_UART_RxCpltCallback+0x466>
							{
								 RS485Rx.ADC_Offset_Flag = 1;
 800d1a8:	4b18      	ldr	r3, [pc, #96]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
								 RS485Rx.ADC_Offset_Check_1 = 1;
 800d1b0:	4b16      	ldr	r3, [pc, #88]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 800d1b8:	e00b      	b.n	800d1d2 <HAL_UART_RxCpltCallback+0x47e>
							}
							else
							{
								 RS485Rx.ADC_Offset_Flag = 0;
 800d1ba:	4b14      	ldr	r3, [pc, #80]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
								 RS485Rx.ADC_Offset_Check_1 = 0;
 800d1c2:	4b12      	ldr	r3, [pc, #72]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
								 RS485Rx.ADC_Offset_Check_2 = 0;
 800d1ca:	4b10      	ldr	r3, [pc, #64]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
							}

							 cmd_Ack = RS485Rx0Data[9];
 800d1d2:	4b12      	ldr	r3, [pc, #72]	@ (800d21c <HAL_UART_RxCpltCallback+0x4c8>)
 800d1d4:	7a5b      	ldrb	r3, [r3, #9]
 800d1d6:	74fb      	strb	r3, [r7, #19]
							AddF_CmdReqToPC(0x0C,0x05A3,0x60,0x00,cmd_Ack);
 800d1d8:	7cfb      	ldrb	r3, [r7, #19]
 800d1da:	9300      	str	r3, [sp, #0]
 800d1dc:	2300      	movs	r3, #0
 800d1de:	2260      	movs	r2, #96	@ 0x60
 800d1e0:	f240 51a3 	movw	r1, #1443	@ 0x5a3
 800d1e4:	200c      	movs	r0, #12
 800d1e6:	f7ff fa41 	bl	800c66c <AddF_CmdReqToPC>
							 break;
 800d1ea:	e004      	b.n	800d1f6 <HAL_UART_RxCpltCallback+0x4a2>
						 default:  	 break;
					 }
				 }
				 else{
					 // 수신데이터 처리하지 않음(목적지가 ID가 맞지 않음)
					 RS485Rx.result = 0;
 800d1ec:	4b07      	ldr	r3, [pc, #28]	@ (800d20c <HAL_UART_RxCpltCallback+0x4b8>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	759a      	strb	r2, [r3, #22]
 800d1f2:	e000      	b.n	800d1f6 <HAL_UART_RxCpltCallback+0x4a2>
						 default:  	 break;
 800d1f4:	bf00      	nop
				 }
				 RS48501_TxData();
 800d1f6:	f7ff fbb1 	bl	800c95c <RS48501_TxData>
			 }
		 }
		 HAL_UART_Receive_IT(&huart5, &RS485RxA, 1);
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	4909      	ldr	r1, [pc, #36]	@ (800d224 <HAL_UART_RxCpltCallback+0x4d0>)
 800d1fe:	480a      	ldr	r0, [pc, #40]	@ (800d228 <HAL_UART_RxCpltCallback+0x4d4>)
 800d200:	f007 fdbc 	bl	8014d7c <HAL_UART_Receive_IT>
	 }
}
 800d204:	bf00      	nop
 800d206:	3718      	adds	r7, #24
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	20000574 	.word	0x20000574
 800d210:	42c80000 	.word	0x42c80000
 800d214:	200004f0 	.word	0x200004f0
 800d218:	20000298 	.word	0x20000298
 800d21c:	20000544 	.word	0x20000544
 800d220:	200005c5 	.word	0x200005c5
 800d224:	200005c4 	.word	0x200005c4
 800d228:	200009b0 	.word	0x200009b0

0800d22c <FUN_RS485_Error_routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_RS485_Error_routine(void)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	af00      	add	r7, sp, #0
	Error.RS485_error_chk = HAL_UART_GetError(&huart5);
 800d230:	4817      	ldr	r0, [pc, #92]	@ (800d290 <FUN_RS485_Error_routine+0x64>)
 800d232:	f008 fa7c 	bl	801572e <HAL_UART_GetError>
 800d236:	4603      	mov	r3, r0
 800d238:	4a16      	ldr	r2, [pc, #88]	@ (800d294 <FUN_RS485_Error_routine+0x68>)
 800d23a:	60d3      	str	r3, [r2, #12]
	Error.RS485_State = HAL_UART_GetState(&huart5);
 800d23c:	4814      	ldr	r0, [pc, #80]	@ (800d290 <FUN_RS485_Error_routine+0x64>)
 800d23e:	f008 fa61 	bl	8015704 <HAL_UART_GetState>
 800d242:	4603      	mov	r3, r0
 800d244:	4a13      	ldr	r2, [pc, #76]	@ (800d294 <FUN_RS485_Error_routine+0x68>)
 800d246:	6153      	str	r3, [r2, #20]
	if(Error.RS485_error_chk != 0)
 800d248:	4b12      	ldr	r3, [pc, #72]	@ (800d294 <FUN_RS485_Error_routine+0x68>)
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d01a      	beq.n	800d286 <FUN_RS485_Error_routine+0x5a>
	{
		Error.RS485_error_Cnt  ++;
 800d250:	4b10      	ldr	r3, [pc, #64]	@ (800d294 <FUN_RS485_Error_routine+0x68>)
 800d252:	8a1b      	ldrh	r3, [r3, #16]
 800d254:	3301      	adds	r3, #1
 800d256:	b29a      	uxth	r2, r3
 800d258:	4b0e      	ldr	r3, [pc, #56]	@ (800d294 <FUN_RS485_Error_routine+0x68>)
 800d25a:	821a      	strh	r2, [r3, #16]
		// 5회 연속 에러 발생시
		if(Error.RS485_error_Cnt >= 5)
 800d25c:	4b0d      	ldr	r3, [pc, #52]	@ (800d294 <FUN_RS485_Error_routine+0x68>)
 800d25e:	8a1b      	ldrh	r3, [r3, #16]
 800d260:	2b04      	cmp	r3, #4
 800d262:	d913      	bls.n	800d28c <FUN_RS485_Error_routine+0x60>
		{
			//
			HAL_UART_Receive_IT(&huart5, &RS485RxA, 1);
 800d264:	2201      	movs	r2, #1
 800d266:	490c      	ldr	r1, [pc, #48]	@ (800d298 <FUN_RS485_Error_routine+0x6c>)
 800d268:	4809      	ldr	r0, [pc, #36]	@ (800d290 <FUN_RS485_Error_routine+0x64>)
 800d26a:	f007 fd87 	bl	8014d7c <HAL_UART_Receive_IT>
			RS485_RE();
 800d26e:	2200      	movs	r2, #0
 800d270:	2110      	movs	r1, #16
 800d272:	480a      	ldr	r0, [pc, #40]	@ (800d29c <FUN_RS485_Error_routine+0x70>)
 800d274:	f004 fc2c 	bl	8011ad0 <HAL_GPIO_WritePin>
			//
			Error.RS485_error = 1;
 800d278:	4b06      	ldr	r3, [pc, #24]	@ (800d294 <FUN_RS485_Error_routine+0x68>)
 800d27a:	2201      	movs	r2, #1
 800d27c:	825a      	strh	r2, [r3, #18]
			Error.RS485_error_Cnt = 0;
 800d27e:	4b05      	ldr	r3, [pc, #20]	@ (800d294 <FUN_RS485_Error_routine+0x68>)
 800d280:	2200      	movs	r2, #0
 800d282:	821a      	strh	r2, [r3, #16]
		}
	}
	else{
		Error.RS485_error_Cnt = 0;
	}
}
 800d284:	e002      	b.n	800d28c <FUN_RS485_Error_routine+0x60>
		Error.RS485_error_Cnt = 0;
 800d286:	4b03      	ldr	r3, [pc, #12]	@ (800d294 <FUN_RS485_Error_routine+0x68>)
 800d288:	2200      	movs	r2, #0
 800d28a:	821a      	strh	r2, [r3, #16]
}
 800d28c:	bf00      	nop
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	200009b0 	.word	0x200009b0
 800d294:	200006d4 	.word	0x200006d4
 800d298:	200005c4 	.word	0x200005c4
 800d29c:	48000400 	.word	0x48000400

0800d2a0 <FUN_RS485_Rx_Timeout_Check>:
void FUN_RS485_Rx_Timeout_Check(void)     	// 10ms마다 호출
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
	// Data Head 수신 이후 정상종료가 이루어지지 않았을 때 Time Out(Rx)
	if(RS485Rx.Rx_Data_flag == 1){  	// 데이터 수신이 시작되면 1이 되는거 같음
 800d2a6:	4b1c      	ldr	r3, [pc, #112]	@ (800d318 <FUN_RS485_Rx_Timeout_Check+0x78>)
 800d2a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d128      	bne.n	800d302 <FUN_RS485_Rx_Timeout_Check+0x62>
		RS485Rx.Rx_Data_cnt ++;
 800d2b0:	4b19      	ldr	r3, [pc, #100]	@ (800d318 <FUN_RS485_Rx_Timeout_Check+0x78>)
 800d2b2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	4b17      	ldr	r3, [pc, #92]	@ (800d318 <FUN_RS485_Rx_Timeout_Check+0x78>)
 800d2bc:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		// Time OUt : 250ms
		if(RS485Rx.Rx_Data_cnt > 25){   // 250ms(25번 호출) 지나면 전부 0으로.. 이게 타임아웃인거 같음
 800d2c0:	4b15      	ldr	r3, [pc, #84]	@ (800d318 <FUN_RS485_Rx_Timeout_Check+0x78>)
 800d2c2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800d2c6:	2b19      	cmp	r3, #25
 800d2c8:	d91f      	bls.n	800d30a <FUN_RS485_Rx_Timeout_Check+0x6a>
			RS485Rx.Rx_cnt = 0;	       //Buff Index Clear
 800d2ca:	4b13      	ldr	r3, [pc, #76]	@ (800d318 <FUN_RS485_Rx_Timeout_Check+0x78>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	829a      	strh	r2, [r3, #20]
			RS485Rx.Rx_Data_flag = 0;
 800d2d0:	4b11      	ldr	r3, [pc, #68]	@ (800d318 <FUN_RS485_Rx_Timeout_Check+0x78>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			for (uint16_t i = 0; i < 25 ; i++){
 800d2d8:	2300      	movs	r3, #0
 800d2da:	80fb      	strh	r3, [r7, #6]
 800d2dc:	e00d      	b.n	800d2fa <FUN_RS485_Rx_Timeout_Check+0x5a>
				 RS485RxMOData[i] = 0x00;
 800d2de:	88fb      	ldrh	r3, [r7, #6]
 800d2e0:	4a0e      	ldr	r2, [pc, #56]	@ (800d31c <FUN_RS485_Rx_Timeout_Check+0x7c>)
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	54d1      	strb	r1, [r2, r3]
				 if(i<18){
 800d2e6:	88fb      	ldrh	r3, [r7, #6]
 800d2e8:	2b11      	cmp	r3, #17
 800d2ea:	d803      	bhi.n	800d2f4 <FUN_RS485_Rx_Timeout_Check+0x54>
					 RS485Rx0Data[i] = 0x00;
 800d2ec:	88fb      	ldrh	r3, [r7, #6]
 800d2ee:	4a0c      	ldr	r2, [pc, #48]	@ (800d320 <FUN_RS485_Rx_Timeout_Check+0x80>)
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	54d1      	strb	r1, [r2, r3]
			for (uint16_t i = 0; i < 25 ; i++){
 800d2f4:	88fb      	ldrh	r3, [r7, #6]
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	80fb      	strh	r3, [r7, #6]
 800d2fa:	88fb      	ldrh	r3, [r7, #6]
 800d2fc:	2b18      	cmp	r3, #24
 800d2fe:	d9ee      	bls.n	800d2de <FUN_RS485_Rx_Timeout_Check+0x3e>
		}
	}
	else{
		RS485Rx.Rx_Data_cnt = 0;      // 수신중이 아니면 cnt = 0
	}
}
 800d300:	e003      	b.n	800d30a <FUN_RS485_Rx_Timeout_Check+0x6a>
		RS485Rx.Rx_Data_cnt = 0;      // 수신중이 아니면 cnt = 0
 800d302:	4b05      	ldr	r3, [pc, #20]	@ (800d318 <FUN_RS485_Rx_Timeout_Check+0x78>)
 800d304:	2200      	movs	r2, #0
 800d306:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
}
 800d30a:	bf00      	nop
 800d30c:	370c      	adds	r7, #12
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	20000574 	.word	0x20000574
 800d31c:	20000558 	.word	0x20000558
 800d320:	20000544 	.word	0x20000544

0800d324 <RS485_Baudrate_Init>:
void RS485_Baudrate_Init(uint8_t baudrate)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	4603      	mov	r3, r0
 800d32c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800d32e:	4b33      	ldr	r3, [pc, #204]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d330:	4a33      	ldr	r2, [pc, #204]	@ (800d400 <RS485_Baudrate_Init+0xdc>)
 800d332:	601a      	str	r2, [r3, #0]
  if(baudrate == BAUD_115200){
 800d334:	79fb      	ldrb	r3, [r7, #7]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d104      	bne.n	800d344 <RS485_Baudrate_Init+0x20>
	  huart5.Init.BaudRate = 115200;
 800d33a:	4b30      	ldr	r3, [pc, #192]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d33c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d340:	605a      	str	r2, [r3, #4]
 800d342:	e016      	b.n	800d372 <RS485_Baudrate_Init+0x4e>
  }
  else if(baudrate == BAUD_38400){
 800d344:	79fb      	ldrb	r3, [r7, #7]
 800d346:	2b01      	cmp	r3, #1
 800d348:	d104      	bne.n	800d354 <RS485_Baudrate_Init+0x30>
	  huart5.Init.BaudRate = 38400;
 800d34a:	4b2c      	ldr	r3, [pc, #176]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d34c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800d350:	605a      	str	r2, [r3, #4]
 800d352:	e00e      	b.n	800d372 <RS485_Baudrate_Init+0x4e>
  }
  else if(baudrate == BAUD_19200){
 800d354:	79fb      	ldrb	r3, [r7, #7]
 800d356:	2b02      	cmp	r3, #2
 800d358:	d104      	bne.n	800d364 <RS485_Baudrate_Init+0x40>
  	  huart5.Init.BaudRate = 19200;
 800d35a:	4b28      	ldr	r3, [pc, #160]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d35c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800d360:	605a      	str	r2, [r3, #4]
 800d362:	e006      	b.n	800d372 <RS485_Baudrate_Init+0x4e>
  }
  else if(baudrate == BAUD_9600){
 800d364:	79fb      	ldrb	r3, [r7, #7]
 800d366:	2b03      	cmp	r3, #3
 800d368:	d103      	bne.n	800d372 <RS485_Baudrate_Init+0x4e>
	  huart5.Init.BaudRate = 9600;
 800d36a:	4b24      	ldr	r3, [pc, #144]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d36c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800d370:	605a      	str	r2, [r3, #4]
  }
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d372:	4b22      	ldr	r3, [pc, #136]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d374:	2200      	movs	r2, #0
 800d376:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d378:	4b20      	ldr	r3, [pc, #128]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d37a:	2200      	movs	r2, #0
 800d37c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d37e:	4b1f      	ldr	r3, [pc, #124]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d380:	2200      	movs	r2, #0
 800d382:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d384:	4b1d      	ldr	r3, [pc, #116]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d386:	220c      	movs	r2, #12
 800d388:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d38a:	4b1c      	ldr	r3, [pc, #112]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d38c:	2200      	movs	r2, #0
 800d38e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d390:	4b1a      	ldr	r3, [pc, #104]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d392:	2200      	movs	r2, #0
 800d394:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d396:	4b19      	ldr	r3, [pc, #100]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d398:	2200      	movs	r2, #0
 800d39a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800d39c:	4b17      	ldr	r3, [pc, #92]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d39e:	2200      	movs	r2, #0
 800d3a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d3a2:	4b16      	ldr	r3, [pc, #88]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart5, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	4813      	ldr	r0, [pc, #76]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d3b0:	f009 fece 	bl	8017150 <HAL_RS485Ex_Init>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d001      	beq.n	800d3be <RS485_Baudrate_Init+0x9a>
  {
    Error_Handler();
 800d3ba:	f000 ffa3 	bl	800e304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800d3be:	2100      	movs	r1, #0
 800d3c0:	480e      	ldr	r0, [pc, #56]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d3c2:	f009 ff85 	bl	80172d0 <HAL_UARTEx_SetTxFifoThreshold>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <RS485_Baudrate_Init+0xac>
  {
    Error_Handler();
 800d3cc:	f000 ff9a 	bl	800e304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	480a      	ldr	r0, [pc, #40]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d3d4:	f009 ffba 	bl	801734c <HAL_UARTEx_SetRxFifoThreshold>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <RS485_Baudrate_Init+0xbe>
  {
    Error_Handler();
 800d3de:	f000 ff91 	bl	800e304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800d3e2:	4806      	ldr	r0, [pc, #24]	@ (800d3fc <RS485_Baudrate_Init+0xd8>)
 800d3e4:	f009 ff3b 	bl	801725e <HAL_UARTEx_DisableFifoMode>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <RS485_Baudrate_Init+0xce>
  {
    Error_Handler();
 800d3ee:	f000 ff89 	bl	800e304 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800d3f2:	bf00      	nop
 800d3f4:	3708      	adds	r7, #8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	200009b0 	.word	0x200009b0
 800d400:	40005000 	.word	0x40005000

0800d404 <SMK_MovingAverageFilter>:
float  IR_MovBuff[Moving_Average_Buff_Size] ={0,};
float  Blue_IR_MovBuff[Moving_Average_Buff_Size] ={0,};


float SMK_MovingAverageFilter(float f_data, float *f_buf) // 버퍼 값 평균 // 버퍼 안에 값이 언제 들어가는지 모르겠음
{
 800d404:	b480      	push	{r7}
 800d406:	b087      	sub	sp, #28
 800d408:	af00      	add	r7, sp, #0
 800d40a:	ed87 0a01 	vstr	s0, [r7, #4]
 800d40e:	6038      	str	r0, [r7, #0]
    //버퍼가   5이라고 하면
   //카운트는 1부터 4까지 증가

   float Value_Sum = 0;
 800d410:	f04f 0300 	mov.w	r3, #0
 800d414:	617b      	str	r3, [r7, #20]
   float Value_Mov = 0;
 800d416:	f04f 0300 	mov.w	r3, #0
 800d41a:	60fb      	str	r3, [r7, #12]
   uint8_t i;

   for(i = 1; i <Moving_Average_Buff_Size; i++)
 800d41c:	2301      	movs	r3, #1
 800d41e:	74fb      	strb	r3, [r7, #19]
 800d420:	e01e      	b.n	800d460 <SMK_MovingAverageFilter+0x5c>
   {
      f_buf[i-1] = f_buf[i];
 800d422:	7cfb      	ldrb	r3, [r7, #19]
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	441a      	add	r2, r3
 800d42a:	7cfb      	ldrb	r3, [r7, #19]
 800d42c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d430:	3b01      	subs	r3, #1
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	6839      	ldr	r1, [r7, #0]
 800d436:	440b      	add	r3, r1
 800d438:	6812      	ldr	r2, [r2, #0]
 800d43a:	601a      	str	r2, [r3, #0]
      Value_Sum += f_buf[i-1];
 800d43c:	7cfb      	ldrb	r3, [r7, #19]
 800d43e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d442:	3b01      	subs	r3, #1
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	683a      	ldr	r2, [r7, #0]
 800d448:	4413      	add	r3, r2
 800d44a:	edd3 7a00 	vldr	s15, [r3]
 800d44e:	ed97 7a05 	vldr	s14, [r7, #20]
 800d452:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d456:	edc7 7a05 	vstr	s15, [r7, #20]
   for(i = 1; i <Moving_Average_Buff_Size; i++)
 800d45a:	7cfb      	ldrb	r3, [r7, #19]
 800d45c:	3301      	adds	r3, #1
 800d45e:	74fb      	strb	r3, [r7, #19]
 800d460:	7cfb      	ldrb	r3, [r7, #19]
 800d462:	2b09      	cmp	r3, #9
 800d464:	d9dd      	bls.n	800d422 <SMK_MovingAverageFilter+0x1e>
      //4일때  3번에  4번 값을 넣음
   }

   //4번 위치에 값을 계속 넣음

   f_buf[Moving_Average_Buff_Size-1] = f_data;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	3324      	adds	r3, #36	@ 0x24
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	601a      	str	r2, [r3, #0]
   Value_Sum += f_buf[Moving_Average_Buff_Size-1];
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	3324      	adds	r3, #36	@ 0x24
 800d472:	edd3 7a00 	vldr	s15, [r3]
 800d476:	ed97 7a05 	vldr	s14, [r7, #20]
 800d47a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d47e:	edc7 7a05 	vstr	s15, [r7, #20]

   Value_Mov = (float)(Value_Sum / Moving_Average_Buff_Size);
 800d482:	ed97 7a05 	vldr	s14, [r7, #20]
 800d486:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800d48a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d48e:	edc7 7a03 	vstr	s15, [r7, #12]
   return Value_Mov;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	ee07 3a90 	vmov	s15, r3
}
 800d498:	eeb0 0a67 	vmov.f32	s0, s15
 800d49c:	371c      	adds	r7, #28
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
	...

0800d4a8 <Gas_Sensor_Init>:


void Gas_Sensor_Init(){
 800d4a8:	b590      	push	{r4, r7, lr}
 800d4aa:	b099      	sub	sp, #100	@ 0x64
 800d4ac:	af18      	add	r7, sp, #96	@ 0x60
	smokeSensorADPD188Init(hspi3, csPin);
 800d4ae:	4c24      	ldr	r4, [pc, #144]	@ (800d540 <Gas_Sensor_Init+0x98>)
 800d4b0:	4a24      	ldr	r2, [pc, #144]	@ (800d544 <Gas_Sensor_Init+0x9c>)
 800d4b2:	ab15      	add	r3, sp, #84	@ 0x54
 800d4b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4b8:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4bc:	4668      	mov	r0, sp
 800d4be:	f104 0310 	add.w	r3, r4, #16
 800d4c2:	2254      	movs	r2, #84	@ 0x54
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	f009 fff9 	bl	80174bc <memcpy>
 800d4ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d4ce:	f7fb ff49 	bl	8009364 <smokeSensorADPD188Init>
	Gas_Sensor.Gas_Detect = 0;
 800d4d2:	4b1d      	ldr	r3, [pc, #116]	@ (800d548 <Gas_Sensor_Init+0xa0>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
#if SMK_Level == 1

	Gas_Sensor.IR_Cumulative = 4.25;
 800d4da:	4b1b      	ldr	r3, [pc, #108]	@ (800d548 <Gas_Sensor_Init+0xa0>)
 800d4dc:	4a1b      	ldr	r2, [pc, #108]	@ (800d54c <Gas_Sensor_Init+0xa4>)
 800d4de:	609a      	str	r2, [r3, #8]

	Gas_Sensor.Blue_IR_Cumulative = 4.25;
 800d4e0:	4b19      	ldr	r3, [pc, #100]	@ (800d548 <Gas_Sensor_Init+0xa0>)
 800d4e2:	4a1a      	ldr	r2, [pc, #104]	@ (800d54c <Gas_Sensor_Init+0xa4>)
 800d4e4:	60da      	str	r2, [r3, #12]

	Gas_Sensor.IR_Cumulative_Error_Int_Limit = Gas_Sensor.IR_Cumulative * 0.5;           //튀는 값방지
 800d4e6:	4b18      	ldr	r3, [pc, #96]	@ (800d548 <Gas_Sensor_Init+0xa0>)
 800d4e8:	edd3 7a02 	vldr	s15, [r3, #8]
 800d4ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d4f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d4f4:	4b14      	ldr	r3, [pc, #80]	@ (800d548 <Gas_Sensor_Init+0xa0>)
 800d4f6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	Gas_Sensor.Blue_IR_Cumulative_Error_Int_Limit = Gas_Sensor.Blue_IR_Cumulative * 0.5; //튀는 값방지
 800d4fa:	4b13      	ldr	r3, [pc, #76]	@ (800d548 <Gas_Sensor_Init+0xa0>)
 800d4fc:	edd3 7a03 	vldr	s15, [r3, #12]
 800d500:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d504:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d508:	4b0f      	ldr	r3, [pc, #60]	@ (800d548 <Gas_Sensor_Init+0xa0>)
 800d50a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c


	Gas_Sensor.IR_Cumulative_Int = Gas_Sensor.IR_Cumulative_Error_Int_Limit * 0.5;  //감지 시간
 800d50e:	4b0e      	ldr	r3, [pc, #56]	@ (800d548 <Gas_Sensor_Init+0xa0>)
 800d510:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d514:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d51c:	4b0a      	ldr	r3, [pc, #40]	@ (800d548 <Gas_Sensor_Init+0xa0>)
 800d51e:	edc3 7a04 	vstr	s15, [r3, #16]



	Gas_Sensor.Blue_IR_Cumulative_Int = Gas_Sensor.Blue_IR_Cumulative_Error_Int_Limit * 0.5;
 800d522:	4b09      	ldr	r3, [pc, #36]	@ (800d548 <Gas_Sensor_Init+0xa0>)
 800d524:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d528:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d52c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d530:	4b05      	ldr	r3, [pc, #20]	@ (800d548 <Gas_Sensor_Init+0xa0>)
 800d532:	edc3 7a05 	vstr	s15, [r3, #20]
#endif
}
 800d536:	bf00      	nop
 800d538:	3704      	adds	r7, #4
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd90      	pop	{r4, r7, pc}
 800d53e:	bf00      	nop
 800d540:	20000900 	.word	0x20000900
 800d544:	20000004 	.word	0x20000004
 800d548:	200005c8 	.word	0x200005c8
 800d54c:	40880000 	.word	0x40880000

0800d550 <Gas_Detecting>:

void Gas_Detecting(SPI_HandleTypeDef hspi, struct CsPin csPin) // 5ms마다 호출
{
 800d550:	b084      	sub	sp, #16
 800d552:	b580      	push	{r7, lr}
 800d554:	b09a      	sub	sp, #104	@ 0x68
 800d556:	af18      	add	r7, sp, #96	@ 0x60
 800d558:	f107 0c10 	add.w	ip, r7, #16
 800d55c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	_result_adp_data IR_Data = readData(hspi, csPin);		 // IR 투과율 측정 이부분인거 같음. 바닥에 있는거		// 뭔지 모르겠지만 구조체 변수 ADP_RESULT를 리턴 받아오는데	이게 IR값인가 싶기도
 800d560:	aa15      	add	r2, sp, #84	@ 0x54
 800d562:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800d566:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d56a:	e882 0003 	stmia.w	r2, {r0, r1}
 800d56e:	4668      	mov	r0, sp
 800d570:	f107 0320 	add.w	r3, r7, #32
 800d574:	2254      	movs	r2, #84	@ 0x54
 800d576:	4619      	mov	r1, r3
 800d578:	f009 ffa0 	bl	80174bc <memcpy>
 800d57c:	f107 0310 	add.w	r3, r7, #16
 800d580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d582:	f7fc f86b 	bl	800965c <readData>
 800d586:	4603      	mov	r3, r0
 800d588:	607b      	str	r3, [r7, #4]
//	Gas_Sensor.IR_Data = SMK_MovingAverageFilter((float)IR_Data.result_IR_val * 0.1);
//	Gas_Sensor.Blue_IR_Data = SMK_MovingAverageFilter((float)IR_Data.result_Blue_val * 0.1);
	Gas_Sensor.IR_Data = SMK_MovingAverageFilter(IR_Data.result_IR_val, &IR_MovBuff[0]);                // 받아온 ADP_RESULT 구조체의 각각 멤버변수를 Gas_Sensor에 넣어준다. 5ms마다
 800d58a:	88fb      	ldrh	r3, [r7, #6]
 800d58c:	ee07 3a90 	vmov	s15, r3
 800d590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d594:	480f      	ldr	r0, [pc, #60]	@ (800d5d4 <Gas_Detecting+0x84>)
 800d596:	eeb0 0a67 	vmov.f32	s0, s15
 800d59a:	f7ff ff33 	bl	800d404 <SMK_MovingAverageFilter>
 800d59e:	eef0 7a40 	vmov.f32	s15, s0
 800d5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d5d8 <Gas_Detecting+0x88>)
 800d5a4:	edc3 7a00 	vstr	s15, [r3]
	Gas_Sensor.Blue_IR_Data = SMK_MovingAverageFilter(IR_Data.result_Blue_val, &Blue_IR_MovBuff[0]);    // 근데 버퍼에 값이 언제 들어가는지.
 800d5a8:	88bb      	ldrh	r3, [r7, #4]
 800d5aa:	ee07 3a90 	vmov	s15, r3
 800d5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b2:	480a      	ldr	r0, [pc, #40]	@ (800d5dc <Gas_Detecting+0x8c>)
 800d5b4:	eeb0 0a67 	vmov.f32	s0, s15
 800d5b8:	f7ff ff24 	bl	800d404 <SMK_MovingAverageFilter>
 800d5bc:	eef0 7a40 	vmov.f32	s15, s0
 800d5c0:	4b05      	ldr	r3, [pc, #20]	@ (800d5d8 <Gas_Detecting+0x88>)
 800d5c2:	edc3 7a01 	vstr	s15, [r3, #4]
	//Gas_Sensor_Detect();
}
 800d5c6:	bf00      	nop
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d5d0:	b004      	add	sp, #16
 800d5d2:	4770      	bx	lr
 800d5d4:	20000604 	.word	0x20000604
 800d5d8:	200005c8 	.word	0x200005c8
 800d5dc:	2000062c 	.word	0x2000062c

0800d5e0 <Gas_Sensor_Detect>:


void Gas_Sensor_Detect()    //  100ms마다 호출
{
 800d5e0:	b5b0      	push	{r4, r5, r7, lr}
 800d5e2:	af00      	add	r7, sp, #0
	// 오차 누적값 계산
	Gas_Sensor.IR_Cumulative_Error = (Gas_Sensor.IR_Data * 0.1) - Gas_Sensor.IR_Cumulative;  			 // SMK_MovingAverageFilter() 리턴값 - 4.25(인듯? 다른데서 받는부분이 없음)
 800d5e4:	4b82      	ldr	r3, [pc, #520]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7fa ff79 	bl	80084e0 <__aeabi_f2d>
 800d5ee:	a37c      	add	r3, pc, #496	@ (adr r3, 800d7e0 <Gas_Sensor_Detect+0x200>)
 800d5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f4:	f7fa ffcc 	bl	8008590 <__aeabi_dmul>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	4614      	mov	r4, r2
 800d5fe:	461d      	mov	r5, r3
 800d600:	4b7b      	ldr	r3, [pc, #492]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	4618      	mov	r0, r3
 800d606:	f7fa ff6b 	bl	80084e0 <__aeabi_f2d>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	4620      	mov	r0, r4
 800d610:	4629      	mov	r1, r5
 800d612:	f7fa fe05 	bl	8008220 <__aeabi_dsub>
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	4610      	mov	r0, r2
 800d61c:	4619      	mov	r1, r3
 800d61e:	f7fb fa99 	bl	8008b54 <__aeabi_d2f>
 800d622:	4603      	mov	r3, r0
 800d624:	4a72      	ldr	r2, [pc, #456]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d626:	6193      	str	r3, [r2, #24]
	Gas_Sensor.Blue_IR_Cumulative_Error = Gas_Sensor.Blue_IR_Data * 0.1 - Gas_Sensor.Blue_IR_Cumulative; // 이것도 똑같
 800d628:	4b71      	ldr	r3, [pc, #452]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fa ff57 	bl	80084e0 <__aeabi_f2d>
 800d632:	a36b      	add	r3, pc, #428	@ (adr r3, 800d7e0 <Gas_Sensor_Detect+0x200>)
 800d634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d638:	f7fa ffaa 	bl	8008590 <__aeabi_dmul>
 800d63c:	4602      	mov	r2, r0
 800d63e:	460b      	mov	r3, r1
 800d640:	4614      	mov	r4, r2
 800d642:	461d      	mov	r5, r3
 800d644:	4b6a      	ldr	r3, [pc, #424]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fa ff49 	bl	80084e0 <__aeabi_f2d>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4620      	mov	r0, r4
 800d654:	4629      	mov	r1, r5
 800d656:	f7fa fde3 	bl	8008220 <__aeabi_dsub>
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	4610      	mov	r0, r2
 800d660:	4619      	mov	r1, r3
 800d662:	f7fb fa77 	bl	8008b54 <__aeabi_d2f>
 800d666:	4603      	mov	r3, r0
 800d668:	4a61      	ldr	r2, [pc, #388]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d66a:	61d3      	str	r3, [r2, #28]

	if(Gas_Sensor.IR_Cumulative_Error > Gas_Sensor.IR_Cumulative_Error_Int_Limit)
 800d66c:	4b60      	ldr	r3, [pc, #384]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d66e:	ed93 7a06 	vldr	s14, [r3, #24]
 800d672:	4b5f      	ldr	r3, [pc, #380]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d674:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d680:	dd03      	ble.n	800d68a <Gas_Sensor_Detect+0xaa>
	{
		Gas_Sensor.IR_Cumulative_Error = Gas_Sensor.IR_Cumulative_Error_Int_Limit;
 800d682:	4b5b      	ldr	r3, [pc, #364]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d686:	4a5a      	ldr	r2, [pc, #360]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d688:	6193      	str	r3, [r2, #24]
	}
	if(Gas_Sensor.Blue_IR_Cumulative_Error > Gas_Sensor.Blue_IR_Cumulative_Error_Int_Limit)
 800d68a:	4b59      	ldr	r3, [pc, #356]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d68c:	ed93 7a07 	vldr	s14, [r3, #28]
 800d690:	4b57      	ldr	r3, [pc, #348]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d692:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d69e:	dd03      	ble.n	800d6a8 <Gas_Sensor_Detect+0xc8>
	{
		Gas_Sensor.Blue_IR_Cumulative_Error = Gas_Sensor.Blue_IR_Cumulative_Error_Int_Limit;
 800d6a0:	4b53      	ldr	r3, [pc, #332]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6a4:	4a52      	ldr	r2, [pc, #328]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d6a6:	61d3      	str	r3, [r2, #28]
	}


	Gas_Sensor.IR_Cumulative_Error_Int = Gas_Sensor.IR_Cumulative_Error * 0.2 + Gas_Sensor.IR_Cumulative_Error_Int_K;
 800d6a8:	4b51      	ldr	r3, [pc, #324]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d6aa:	699b      	ldr	r3, [r3, #24]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fa ff17 	bl	80084e0 <__aeabi_f2d>
 800d6b2:	a34d      	add	r3, pc, #308	@ (adr r3, 800d7e8 <Gas_Sensor_Detect+0x208>)
 800d6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b8:	f7fa ff6a 	bl	8008590 <__aeabi_dmul>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	460b      	mov	r3, r1
 800d6c0:	4614      	mov	r4, r2
 800d6c2:	461d      	mov	r5, r3
 800d6c4:	4b4a      	ldr	r3, [pc, #296]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d6c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fa ff09 	bl	80084e0 <__aeabi_f2d>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	4629      	mov	r1, r5
 800d6d6:	f7fa fda5 	bl	8008224 <__adddf3>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	460b      	mov	r3, r1
 800d6de:	4610      	mov	r0, r2
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	f7fb fa37 	bl	8008b54 <__aeabi_d2f>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	4a41      	ldr	r2, [pc, #260]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d6ea:	6213      	str	r3, [r2, #32]

	if(Gas_Sensor.IR_Cumulative_Error_Int > 1.2)
 800d6ec:	4b40      	ldr	r3, [pc, #256]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d6ee:	6a1b      	ldr	r3, [r3, #32]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fa fef5 	bl	80084e0 <__aeabi_f2d>
 800d6f6:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800d6fa:	4b3e      	ldr	r3, [pc, #248]	@ (800d7f4 <Gas_Sensor_Detect+0x214>)
 800d6fc:	f7fb f9d8 	bl	8008ab0 <__aeabi_dcmpgt>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d002      	beq.n	800d70c <Gas_Sensor_Detect+0x12c>
	{
	   Gas_Sensor.IR_Cumulative_Error_Int = 1.2;
 800d706:	4b3a      	ldr	r3, [pc, #232]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d708:	4a3b      	ldr	r2, [pc, #236]	@ (800d7f8 <Gas_Sensor_Detect+0x218>)
 800d70a:	621a      	str	r2, [r3, #32]
	}

	if(Gas_Sensor.IR_Cumulative_Error_Int < 0)
 800d70c:	4b38      	ldr	r3, [pc, #224]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d70e:	edd3 7a08 	vldr	s15, [r3, #32]
 800d712:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d71a:	d508      	bpl.n	800d72e <Gas_Sensor_Detect+0x14e>
	{
		Gas_Sensor.IR_Cumulative_Error_Int = 0;
 800d71c:	4b34      	ldr	r3, [pc, #208]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d71e:	f04f 0200 	mov.w	r2, #0
 800d722:	621a      	str	r2, [r3, #32]
		Gas_Sensor.IR_Cumulative_Error_Int_K = 0;
 800d724:	4b32      	ldr	r3, [pc, #200]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d726:	f04f 0200 	mov.w	r2, #0
 800d72a:	631a      	str	r2, [r3, #48]	@ 0x30
 800d72c:	e003      	b.n	800d736 <Gas_Sensor_Detect+0x156>
	}
	else
	{
		Gas_Sensor.IR_Cumulative_Error_Int_K = Gas_Sensor.IR_Cumulative_Error_Int;
 800d72e:	4b30      	ldr	r3, [pc, #192]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d730:	6a1b      	ldr	r3, [r3, #32]
 800d732:	4a2f      	ldr	r2, [pc, #188]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d734:	6313      	str	r3, [r2, #48]	@ 0x30
	}



	Gas_Sensor.Blue_IR_Cumulative_Error_Int = Gas_Sensor.Blue_IR_Cumulative_Error * 0.2 + Gas_Sensor.Blue_IR_Cumulative_Error_Int_K;
 800d736:	4b2e      	ldr	r3, [pc, #184]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d738:	69db      	ldr	r3, [r3, #28]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fa fed0 	bl	80084e0 <__aeabi_f2d>
 800d740:	a329      	add	r3, pc, #164	@ (adr r3, 800d7e8 <Gas_Sensor_Detect+0x208>)
 800d742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d746:	f7fa ff23 	bl	8008590 <__aeabi_dmul>
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	4614      	mov	r4, r2
 800d750:	461d      	mov	r5, r3
 800d752:	4b27      	ldr	r3, [pc, #156]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d756:	4618      	mov	r0, r3
 800d758:	f7fa fec2 	bl	80084e0 <__aeabi_f2d>
 800d75c:	4602      	mov	r2, r0
 800d75e:	460b      	mov	r3, r1
 800d760:	4620      	mov	r0, r4
 800d762:	4629      	mov	r1, r5
 800d764:	f7fa fd5e 	bl	8008224 <__adddf3>
 800d768:	4602      	mov	r2, r0
 800d76a:	460b      	mov	r3, r1
 800d76c:	4610      	mov	r0, r2
 800d76e:	4619      	mov	r1, r3
 800d770:	f7fb f9f0 	bl	8008b54 <__aeabi_d2f>
 800d774:	4603      	mov	r3, r0
 800d776:	4a1e      	ldr	r2, [pc, #120]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d778:	6253      	str	r3, [r2, #36]	@ 0x24


	if(Gas_Sensor.Blue_IR_Cumulative_Error_Int < 0)
 800d77a:	4b1d      	ldr	r3, [pc, #116]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d77c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800d780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d788:	d508      	bpl.n	800d79c <Gas_Sensor_Detect+0x1bc>
	{
		Gas_Sensor.Blue_IR_Cumulative_Error_Int = 0;
 800d78a:	4b19      	ldr	r3, [pc, #100]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d78c:	f04f 0200 	mov.w	r2, #0
 800d790:	625a      	str	r2, [r3, #36]	@ 0x24
		Gas_Sensor.Blue_IR_Cumulative_Error_Int_K = 0;
 800d792:	4b17      	ldr	r3, [pc, #92]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d794:	f04f 0200 	mov.w	r2, #0
 800d798:	635a      	str	r2, [r3, #52]	@ 0x34
 800d79a:	e003      	b.n	800d7a4 <Gas_Sensor_Detect+0x1c4>
	}
	else
	{
		Gas_Sensor.Blue_IR_Cumulative_Error_Int_K = Gas_Sensor.Blue_IR_Cumulative_Error_Int;
 800d79c:	4b14      	ldr	r3, [pc, #80]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a0:	4a13      	ldr	r2, [pc, #76]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d7a2:	6353      	str	r3, [r2, #52]	@ 0x34
	}


	if(Gas_Sensor.IR_Cumulative_Error_Int > Gas_Sensor.IR_Cumulative_Int)
 800d7a4:	4b12      	ldr	r3, [pc, #72]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d7a6:	ed93 7a08 	vldr	s14, [r3, #32]
 800d7aa:	4b11      	ldr	r3, [pc, #68]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d7ac:	edd3 7a04 	vldr	s15, [r3, #16]
 800d7b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b8:	dd03      	ble.n	800d7c2 <Gas_Sensor_Detect+0x1e2>
	{
		Gas_Sensor.Gas_Detect = 1;
 800d7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d7bc:	2201      	movs	r2, #1
 800d7be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	}


	ui.Status.Bit.SMOKE_DETECT = Gas_Sensor.Gas_Detect;
 800d7c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f0 <Gas_Sensor_Detect+0x210>)
 800d7c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d7c8:	f003 0301 	and.w	r3, r3, #1
 800d7cc:	b2d9      	uxtb	r1, r3
 800d7ce:	4a0b      	ldr	r2, [pc, #44]	@ (800d7fc <Gas_Sensor_Detect+0x21c>)
 800d7d0:	7853      	ldrb	r3, [r2, #1]
 800d7d2:	f361 0341 	bfi	r3, r1, #1, #1
 800d7d6:	7053      	strb	r3, [r2, #1]
}
 800d7d8:	bf00      	nop
 800d7da:	bdb0      	pop	{r4, r5, r7, pc}
 800d7dc:	f3af 8000 	nop.w
 800d7e0:	9999999a 	.word	0x9999999a
 800d7e4:	3fb99999 	.word	0x3fb99999
 800d7e8:	9999999a 	.word	0x9999999a
 800d7ec:	3fc99999 	.word	0x3fc99999
 800d7f0:	200005c8 	.word	0x200005c8
 800d7f4:	3ff33333 	.word	0x3ff33333
 800d7f8:	3f99999a 	.word	0x3f99999a
 800d7fc:	200004f0 	.word	0x200004f0

0800d800 <FUN_TIM_init>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_TIM_init(void)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	af00      	add	r7, sp, #0
	//HAL_TIM_Base_Init(&htim6);
	HAL_TIM_Base_Start_IT(&htim6);
 800d804:	4802      	ldr	r0, [pc, #8]	@ (800d810 <FUN_TIM_init+0x10>)
 800d806:	f006 fe87 	bl	8014518 <HAL_TIM_Base_Start_IT>
}
 800d80a:	bf00      	nop
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	20000964 	.word	0x20000964

0800d814 <FUN_Tim6_1ms_routine>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void FUN_Tim6_1ms_routine(void)
{
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0
        CountCheck1ms++; // 어디다 쓰이진 않는듯
 800d818:	4b06      	ldr	r3, [pc, #24]	@ (800d834 <FUN_Tim6_1ms_routine+0x20>)
 800d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81e:	1c50      	adds	r0, r2, #1
 800d820:	f143 0100 	adc.w	r1, r3, #0
 800d824:	4b03      	ldr	r3, [pc, #12]	@ (800d834 <FUN_Tim6_1ms_routine+0x20>)
 800d826:	e9c3 0100 	strd	r0, r1, [r3]
#ifdef HSS300
        RS485_AnalyzePacket();
#endif
        //readData(hspi3, csPin);
}
 800d82a:	bf00      	nop
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr
 800d834:	20000690 	.word	0x20000690

0800d838 <FUN_Tim6_5ms_routine>:




void FUN_Tim6_5ms_routine(void)
{
 800d838:	b590      	push	{r4, r7, lr}
 800d83a:	b099      	sub	sp, #100	@ 0x64
 800d83c:	af18      	add	r7, sp, #96	@ 0x60
        CountCheck5ms++;
 800d83e:	4b10      	ldr	r3, [pc, #64]	@ (800d880 <FUN_Tim6_5ms_routine+0x48>)
 800d840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d844:	1c50      	adds	r0, r2, #1
 800d846:	f143 0100 	adc.w	r1, r3, #0
 800d84a:	4b0d      	ldr	r3, [pc, #52]	@ (800d880 <FUN_Tim6_5ms_routine+0x48>)
 800d84c:	e9c3 0100 	strd	r0, r1, [r3]
        FUN_ADC_Routine();              // CO Sensor
 800d850:	f7fb fbfe 	bl	8009050 <FUN_ADC_Routine>
        //readData(hspi3, csPin);
        Gas_Detecting(hspi3, csPin);    // IR 투과율 측정?
 800d854:	4c0b      	ldr	r4, [pc, #44]	@ (800d884 <FUN_Tim6_5ms_routine+0x4c>)
 800d856:	4a0c      	ldr	r2, [pc, #48]	@ (800d888 <FUN_Tim6_5ms_routine+0x50>)
 800d858:	ab15      	add	r3, sp, #84	@ 0x54
 800d85a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d85e:	e883 0003 	stmia.w	r3, {r0, r1}
 800d862:	4668      	mov	r0, sp
 800d864:	f104 0310 	add.w	r3, r4, #16
 800d868:	2254      	movs	r2, #84	@ 0x54
 800d86a:	4619      	mov	r1, r3
 800d86c:	f009 fe26 	bl	80174bc <memcpy>
 800d870:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d874:	f7ff fe6c 	bl	800d550 <Gas_Detecting>
}
 800d878:	bf00      	nop
 800d87a:	3704      	adds	r7, #4
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd90      	pop	{r4, r7, pc}
 800d880:	20000698 	.word	0x20000698
 800d884:	20000900 	.word	0x20000900
 800d888:	20000004 	.word	0x20000004

0800d88c <FUN_Tim6_10ms_routine>:




void FUN_Tim6_10ms_routine(void)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	af00      	add	r7, sp, #0
        CountCheck10ms++;
 800d890:	4b06      	ldr	r3, [pc, #24]	@ (800d8ac <FUN_Tim6_10ms_routine+0x20>)
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	1c50      	adds	r0, r2, #1
 800d898:	f143 0100 	adc.w	r1, r3, #0
 800d89c:	4b03      	ldr	r3, [pc, #12]	@ (800d8ac <FUN_Tim6_10ms_routine+0x20>)
 800d89e:	e9c3 0100 	strd	r0, r1, [r3]
        //RS485_Make_Send_Packet();
        FUN_RS485_Rx_Timeout_Check();  // 타임아웃 250ms
 800d8a2:	f7ff fcfd 	bl	800d2a0 <FUN_RS485_Rx_Timeout_Check>
}
 800d8a6:	bf00      	nop
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	200006a0 	.word	0x200006a0

0800d8b0 <FUN_Tim6_100ms_routine>:

void FUN_Tim6_100ms_routine(void)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	af00      	add	r7, sp, #0
        CountCheck100ms++;
 800d8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d8e8 <FUN_Tim6_100ms_routine+0x38>)
 800d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ba:	1c50      	adds	r0, r2, #1
 800d8bc:	f143 0100 	adc.w	r1, r3, #0
 800d8c0:	4b09      	ldr	r3, [pc, #36]	@ (800d8e8 <FUN_Tim6_100ms_routine+0x38>)
 800d8c2:	e9c3 0100 	strd	r0, r1, [r3]
        count_200ms++;
 800d8c6:	4b09      	ldr	r3, [pc, #36]	@ (800d8ec <FUN_Tim6_100ms_routine+0x3c>)
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	4b07      	ldr	r3, [pc, #28]	@ (800d8ec <FUN_Tim6_100ms_routine+0x3c>)
 800d8d0:	701a      	strb	r2, [r3, #0]
        //readData(hspi3, csPin);
        //tx_test(huart5);
        if(count_200ms > 1){
 800d8d2:	4b06      	ldr	r3, [pc, #24]	@ (800d8ec <FUN_Tim6_100ms_routine+0x3c>)
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d904      	bls.n	800d8e4 <FUN_Tim6_100ms_routine+0x34>
        	count_200ms = 0;
 800d8da:	4b04      	ldr	r3, [pc, #16]	@ (800d8ec <FUN_Tim6_100ms_routine+0x3c>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	701a      	strb	r2, [r3, #0]
        	Gas_Sensor_Detect();       // 가스 누적값 계산 이라고만 알고 Pass
 800d8e0:	f7ff fe7e 	bl	800d5e0 <Gas_Sensor_Detect>
        }
}
 800d8e4:	bf00      	nop
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	200006a8 	.word	0x200006a8
 800d8ec:	200006d0 	.word	0x200006d0

0800d8f0 <FUN_Tim6_250ms_routine>:



void FUN_Tim6_250ms_routine(void)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	af00      	add	r7, sp, #0
        CountCheck250ms++;
 800d8f4:	4b07      	ldr	r3, [pc, #28]	@ (800d914 <FUN_Tim6_250ms_routine+0x24>)
 800d8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fa:	1c50      	adds	r0, r2, #1
 800d8fc:	f143 0100 	adc.w	r1, r3, #0
 800d900:	4b04      	ldr	r3, [pc, #16]	@ (800d914 <FUN_Tim6_250ms_routine+0x24>)
 800d902:	e9c3 0100 	strd	r0, r1, [r3]
        //swtich_test();

        FUN_I2C_INT_SHT30_Routine(); // 온습도값 sht30->temp_acc[]    sht30->humi_acc[]에 저장
 800d906:	f7fd fadf 	bl	800aec8 <FUN_I2C_INT_SHT30_Routine>
    	FUN_I2C_EXT_SHT30_Routine(); // 온습도값 sht30->temp_acc[]    sht30->humi_acc[]에 저장 // 경고랑 알람 처리까지 하는거같음
 800d90a:	f7fd fb09 	bl	800af20 <FUN_I2C_EXT_SHT30_Routine>
        }
        else{
        	FUN_I2C_VL53L3CX_Routine();
        	DS_ActiveFlag = !DS_ActiveFlag;
        }*/
}
 800d90e:	bf00      	nop
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	200006b0 	.word	0x200006b0

0800d918 <FUN_Tim6_500ms_routine>:




void FUN_Tim6_500ms_routine(void)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	af00      	add	r7, sp, #0
        CountCheck500ms++;
 800d91c:	4b06      	ldr	r3, [pc, #24]	@ (800d938 <FUN_Tim6_500ms_routine+0x20>)
 800d91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d922:	1c50      	adds	r0, r2, #1
 800d924:	f143 0100 	adc.w	r1, r3, #0
 800d928:	4b03      	ldr	r3, [pc, #12]	@ (800d938 <FUN_Tim6_500ms_routine+0x20>)
 800d92a:	e9c3 0100 	strd	r0, r1, [r3]
        FUN_GPIO_Routine();        // 로터리/딥 스위치
 800d92e:	f7fc fbfd 	bl	800a12c <FUN_GPIO_Routine>
        					       // if(ui.Status.Bit.SMOKE_DETECT == 1 || ui.temp_alarm_bit == 1 || Error.SHT30_Error == 1 || EEPROM.Error == 1)
        //readData(hspi3, csPin);
        //FUN_ADC_Routine();

}
 800d932:	bf00      	nop
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	200006b8 	.word	0x200006b8

0800d93c <FUN_Tim6_1000ms_routine>:



void FUN_Tim6_1000ms_routine(void)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	af00      	add	r7, sp, #0
        CountCheck1000ms++;
 800d940:	4b23      	ldr	r3, [pc, #140]	@ (800d9d0 <FUN_Tim6_1000ms_routine+0x94>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	1c50      	adds	r0, r2, #1
 800d948:	f143 0100 	adc.w	r1, r3, #0
 800d94c:	4b20      	ldr	r3, [pc, #128]	@ (800d9d0 <FUN_Tim6_1000ms_routine+0x94>)
 800d94e:	e9c3 0100 	strd	r0, r1, [r3]
        EEPROM_routine();
 800d952:	f7fc ff5d 	bl	800a810 <EEPROM_routine>
    	FUN_RS485_routine();   // HsdID = ui.ID --> 변경 ID 값 Update  //  FUN_RS485_Error_routine() -->  RS485 통신 에러 점검
 800d956:	f7fe fc6f 	bl	800c238 <FUN_RS485_routine>
        //readData(hspi3, csPin);


        if(CountCheck1000ms > 86400)  //하루 24시간
 800d95a:	4b1d      	ldr	r3, [pc, #116]	@ (800d9d0 <FUN_Tim6_1000ms_routine+0x94>)
 800d95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d960:	491c      	ldr	r1, [pc, #112]	@ (800d9d4 <FUN_Tim6_1000ms_routine+0x98>)
 800d962:	428a      	cmp	r2, r1
 800d964:	f173 0300 	sbcs.w	r3, r3, #0
 800d968:	d330      	bcc.n	800d9cc <FUN_Tim6_1000ms_routine+0x90>
        {
                CountCheck1ms    = 0;
 800d96a:	491b      	ldr	r1, [pc, #108]	@ (800d9d8 <FUN_Tim6_1000ms_routine+0x9c>)
 800d96c:	f04f 0200 	mov.w	r2, #0
 800d970:	f04f 0300 	mov.w	r3, #0
 800d974:	e9c1 2300 	strd	r2, r3, [r1]
                CountCheck5ms    = 0;
 800d978:	4918      	ldr	r1, [pc, #96]	@ (800d9dc <FUN_Tim6_1000ms_routine+0xa0>)
 800d97a:	f04f 0200 	mov.w	r2, #0
 800d97e:	f04f 0300 	mov.w	r3, #0
 800d982:	e9c1 2300 	strd	r2, r3, [r1]
                CountCheck10ms   = 0;
 800d986:	4916      	ldr	r1, [pc, #88]	@ (800d9e0 <FUN_Tim6_1000ms_routine+0xa4>)
 800d988:	f04f 0200 	mov.w	r2, #0
 800d98c:	f04f 0300 	mov.w	r3, #0
 800d990:	e9c1 2300 	strd	r2, r3, [r1]
                CountCheck100ms  = 0;
 800d994:	4913      	ldr	r1, [pc, #76]	@ (800d9e4 <FUN_Tim6_1000ms_routine+0xa8>)
 800d996:	f04f 0200 	mov.w	r2, #0
 800d99a:	f04f 0300 	mov.w	r3, #0
 800d99e:	e9c1 2300 	strd	r2, r3, [r1]
                CountCheck250ms  = 0;
 800d9a2:	4911      	ldr	r1, [pc, #68]	@ (800d9e8 <FUN_Tim6_1000ms_routine+0xac>)
 800d9a4:	f04f 0200 	mov.w	r2, #0
 800d9a8:	f04f 0300 	mov.w	r3, #0
 800d9ac:	e9c1 2300 	strd	r2, r3, [r1]
                CountCheck500ms  = 0;
 800d9b0:	490e      	ldr	r1, [pc, #56]	@ (800d9ec <FUN_Tim6_1000ms_routine+0xb0>)
 800d9b2:	f04f 0200 	mov.w	r2, #0
 800d9b6:	f04f 0300 	mov.w	r3, #0
 800d9ba:	e9c1 2300 	strd	r2, r3, [r1]
                CountCheck1000ms = 0;
 800d9be:	4904      	ldr	r1, [pc, #16]	@ (800d9d0 <FUN_Tim6_1000ms_routine+0x94>)
 800d9c0:	f04f 0200 	mov.w	r2, #0
 800d9c4:	f04f 0300 	mov.w	r3, #0
 800d9c8:	e9c1 2300 	strd	r2, r3, [r1]

        }

}
 800d9cc:	bf00      	nop
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	200006c0 	.word	0x200006c0
 800d9d4:	00015181 	.word	0x00015181
 800d9d8:	20000690 	.word	0x20000690
 800d9dc:	20000698 	.word	0x20000698
 800d9e0:	200006a0 	.word	0x200006a0
 800d9e4:	200006a8 	.word	0x200006a8
 800d9e8:	200006b0 	.word	0x200006b0
 800d9ec:	200006b8 	.word	0x200006b8

0800d9f0 <HAL_TIM_PeriodElapsedCallback>:
/****************************************************************************/
/*	Overview	:															*/
/*	Return value:	void													*/
/****************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)   // 1ms 마다 타이머(TIM6) 인터럽트 발생
{
 800d9f0:	b5b0      	push	{r4, r5, r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]

	if(htim -> Instance == TIM6)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a3c      	ldr	r2, [pc, #240]	@ (800daf0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d171      	bne.n	800dae6 <HAL_TIM_PeriodElapsedCallback+0xf6>
	{
		//If Main Loop is error for 1000ms, Watchdog Reset
		// If timer interrupt loop is error, Watchdog Reset
		TimeTaskCnt.TimeScheduleCnt++;
 800da02:	4b3c      	ldr	r3, [pc, #240]	@ (800daf4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da08:	1c54      	adds	r4, r2, #1
 800da0a:	f143 0500 	adc.w	r5, r3, #0
 800da0e:	4b39      	ldr	r3, [pc, #228]	@ (800daf4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800da10:	e9c3 4500 	strd	r4, r5, [r3]


		TimeTask.bit.Task_1ms = 1;
 800da14:	4a38      	ldr	r2, [pc, #224]	@ (800daf8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800da16:	7813      	ldrb	r3, [r2, #0]
 800da18:	f043 0301 	orr.w	r3, r3, #1
 800da1c:	7013      	strb	r3, [r2, #0]


		if((TimeTaskCnt.TimeScheduleCnt%5) == 0)     //5ms 카운터 체크
 800da1e:	4b35      	ldr	r3, [pc, #212]	@ (800daf4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800da20:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da24:	f04f 0205 	mov.w	r2, #5
 800da28:	f04f 0300 	mov.w	r3, #0
 800da2c:	f7fb f8e2 	bl	8008bf4 <__aeabi_uldivmod>
 800da30:	4313      	orrs	r3, r2
 800da32:	d104      	bne.n	800da3e <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
				TimeTask.bit.Task_5ms = 1;
 800da34:	4a30      	ldr	r2, [pc, #192]	@ (800daf8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800da36:	7813      	ldrb	r3, [r2, #0]
 800da38:	f043 0302 	orr.w	r3, r3, #2
 800da3c:	7013      	strb	r3, [r2, #0]
		}


		if((TimeTaskCnt.TimeScheduleCnt%10) == 0)     //10ms 카운터 체크
 800da3e:	4b2d      	ldr	r3, [pc, #180]	@ (800daf4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800da40:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da44:	f04f 020a 	mov.w	r2, #10
 800da48:	f04f 0300 	mov.w	r3, #0
 800da4c:	f7fb f8d2 	bl	8008bf4 <__aeabi_uldivmod>
 800da50:	4313      	orrs	r3, r2
 800da52:	d104      	bne.n	800da5e <HAL_TIM_PeriodElapsedCallback+0x6e>
		{
				TimeTask.bit.Task_10ms = 1;
 800da54:	4a28      	ldr	r2, [pc, #160]	@ (800daf8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800da56:	7813      	ldrb	r3, [r2, #0]
 800da58:	f043 0304 	orr.w	r3, r3, #4
 800da5c:	7013      	strb	r3, [r2, #0]
		}


		if((TimeTaskCnt.TimeScheduleCnt%100) == 0)    //100ms 카운터 체크
 800da5e:	4b25      	ldr	r3, [pc, #148]	@ (800daf4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800da60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da64:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800da68:	f04f 0300 	mov.w	r3, #0
 800da6c:	f7fb f8c2 	bl	8008bf4 <__aeabi_uldivmod>
 800da70:	4313      	orrs	r3, r2
 800da72:	d104      	bne.n	800da7e <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
				TimeTask.bit.Task_100ms = 1;
 800da74:	4a20      	ldr	r2, [pc, #128]	@ (800daf8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800da76:	7813      	ldrb	r3, [r2, #0]
 800da78:	f043 0308 	orr.w	r3, r3, #8
 800da7c:	7013      	strb	r3, [r2, #0]
		}


		if((TimeTaskCnt.TimeScheduleCnt%250) == 0)    //100ms 카운터 체크
 800da7e:	4b1d      	ldr	r3, [pc, #116]	@ (800daf4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800da80:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da84:	f04f 02fa 	mov.w	r2, #250	@ 0xfa
 800da88:	f04f 0300 	mov.w	r3, #0
 800da8c:	f7fb f8b2 	bl	8008bf4 <__aeabi_uldivmod>
 800da90:	4313      	orrs	r3, r2
 800da92:	d104      	bne.n	800da9e <HAL_TIM_PeriodElapsedCallback+0xae>
		{
				TimeTask.bit.Task_250ms = 1;
 800da94:	4a18      	ldr	r2, [pc, #96]	@ (800daf8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800da96:	7813      	ldrb	r3, [r2, #0]
 800da98:	f043 0310 	orr.w	r3, r3, #16
 800da9c:	7013      	strb	r3, [r2, #0]
		}


		if((TimeTaskCnt.TimeScheduleCnt%500) == 0)    //500ms 카운터 체크
 800da9e:	4b15      	ldr	r3, [pc, #84]	@ (800daf4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800daa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800daa4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800daa8:	f04f 0300 	mov.w	r3, #0
 800daac:	f7fb f8a2 	bl	8008bf4 <__aeabi_uldivmod>
 800dab0:	4313      	orrs	r3, r2
 800dab2:	d104      	bne.n	800dabe <HAL_TIM_PeriodElapsedCallback+0xce>
		{
				TimeTask.bit.Task_500ms = 1;
 800dab4:	4a10      	ldr	r2, [pc, #64]	@ (800daf8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800dab6:	7813      	ldrb	r3, [r2, #0]
 800dab8:	f043 0320 	orr.w	r3, r3, #32
 800dabc:	7013      	strb	r3, [r2, #0]
		}


		if(TimeTaskCnt.TimeScheduleCnt >= 1000)       //1sec 카운터 체크
 800dabe:	4b0d      	ldr	r3, [pc, #52]	@ (800daf4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800dac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac4:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800dac8:	f173 0300 	sbcs.w	r3, r3, #0
 800dacc:	d30b      	bcc.n	800dae6 <HAL_TIM_PeriodElapsedCallback+0xf6>
		{
				TimeTask.bit.Task_1000ms = 1;
 800dace:	4a0a      	ldr	r2, [pc, #40]	@ (800daf8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800dad0:	7813      	ldrb	r3, [r2, #0]
 800dad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dad6:	7013      	strb	r3, [r2, #0]

				TimeTaskCnt.TimeScheduleCnt = 0;
 800dad8:	4906      	ldr	r1, [pc, #24]	@ (800daf4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800dada:	f04f 0200 	mov.w	r2, #0
 800dade:	f04f 0300 	mov.w	r3, #0
 800dae2:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}
}
 800dae6:	bf00      	nop
 800dae8:	3708      	adds	r7, #8
 800daea:	46bd      	mov	sp, r7
 800daec:	bdb0      	pop	{r4, r5, r7, pc}
 800daee:	bf00      	nop
 800daf0:	40001000 	.word	0x40001000
 800daf4:	20000658 	.word	0x20000658
 800daf8:	20000654 	.word	0x20000654

0800dafc <Task_Schedule_freerun>:


void Task_Schedule_freerun(void)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	af00      	add	r7, sp, #0
	TimeFreeRunTaskCnt++;
 800db00:	4b36      	ldr	r3, [pc, #216]	@ (800dbdc <Task_Schedule_freerun+0xe0>)
 800db02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db06:	1c50      	adds	r0, r2, #1
 800db08:	f143 0100 	adc.w	r1, r3, #0
 800db0c:	4b33      	ldr	r3, [pc, #204]	@ (800dbdc <Task_Schedule_freerun+0xe0>)
 800db0e:	e9c3 0100 	strd	r0, r1, [r3]
	if(TimeTask.bit.Task_1ms==1)                // 1ms  체크
 800db12:	4b33      	ldr	r3, [pc, #204]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	f003 0301 	and.w	r3, r3, #1
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d006      	beq.n	800db2e <Task_Schedule_freerun+0x32>
	{
			FUN_Tim6_1ms_routine();
 800db20:	f7ff fe78 	bl	800d814 <FUN_Tim6_1ms_routine>

			TimeTask.bit.Task_1ms = 0;
 800db24:	4a2e      	ldr	r2, [pc, #184]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800db26:	7813      	ldrb	r3, [r2, #0]
 800db28:	f36f 0300 	bfc	r3, #0, #1
 800db2c:	7013      	strb	r3, [r2, #0]
	}


	if(TimeTask.bit.Task_5ms==1)                // 5ms  체크
 800db2e:	4b2c      	ldr	r3, [pc, #176]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	f003 0302 	and.w	r3, r3, #2
 800db36:	b2db      	uxtb	r3, r3
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d006      	beq.n	800db4a <Task_Schedule_freerun+0x4e>
	{
			FUN_Tim6_5ms_routine();
 800db3c:	f7ff fe7c 	bl	800d838 <FUN_Tim6_5ms_routine>

			TimeTask.bit.Task_5ms = 0;
 800db40:	4a27      	ldr	r2, [pc, #156]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800db42:	7813      	ldrb	r3, [r2, #0]
 800db44:	f36f 0341 	bfc	r3, #1, #1
 800db48:	7013      	strb	r3, [r2, #0]
	}


	if(TimeTask.bit.Task_10ms==1)                // 10ms  체크
 800db4a:	4b25      	ldr	r3, [pc, #148]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	f003 0304 	and.w	r3, r3, #4
 800db52:	b2db      	uxtb	r3, r3
 800db54:	2b00      	cmp	r3, #0
 800db56:	d006      	beq.n	800db66 <Task_Schedule_freerun+0x6a>
	{
			FUN_Tim6_10ms_routine();
 800db58:	f7ff fe98 	bl	800d88c <FUN_Tim6_10ms_routine>

			TimeTask.bit.Task_10ms = 0;
 800db5c:	4a20      	ldr	r2, [pc, #128]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800db5e:	7813      	ldrb	r3, [r2, #0]
 800db60:	f36f 0382 	bfc	r3, #2, #1
 800db64:	7013      	strb	r3, [r2, #0]
	}

	if(TimeTask.bit.Task_100ms==1)               // 100ms 체크
 800db66:	4b1e      	ldr	r3, [pc, #120]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	f003 0308 	and.w	r3, r3, #8
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	2b00      	cmp	r3, #0
 800db72:	d006      	beq.n	800db82 <Task_Schedule_freerun+0x86>
	{
			FUN_Tim6_100ms_routine();
 800db74:	f7ff fe9c 	bl	800d8b0 <FUN_Tim6_100ms_routine>

			TimeTask.bit.Task_100ms = 0;
 800db78:	4a19      	ldr	r2, [pc, #100]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800db7a:	7813      	ldrb	r3, [r2, #0]
 800db7c:	f36f 03c3 	bfc	r3, #3, #1
 800db80:	7013      	strb	r3, [r2, #0]
	}


	if(TimeTask.bit.Task_250ms==1)               // 100ms 체크
 800db82:	4b17      	ldr	r3, [pc, #92]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	f003 0310 	and.w	r3, r3, #16
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d006      	beq.n	800db9e <Task_Schedule_freerun+0xa2>
	{
			FUN_Tim6_250ms_routine();
 800db90:	f7ff feae 	bl	800d8f0 <FUN_Tim6_250ms_routine>

			TimeTask.bit.Task_250ms = 0;
 800db94:	4a12      	ldr	r2, [pc, #72]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800db96:	7813      	ldrb	r3, [r2, #0]
 800db98:	f36f 1304 	bfc	r3, #4, #1
 800db9c:	7013      	strb	r3, [r2, #0]
	}


	if(TimeTask.bit.Task_500ms==1)               // 500ms 체크
 800db9e:	4b10      	ldr	r3, [pc, #64]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d006      	beq.n	800dbba <Task_Schedule_freerun+0xbe>
	{
			FUN_Tim6_500ms_routine();
 800dbac:	f7ff feb4 	bl	800d918 <FUN_Tim6_500ms_routine>

			TimeTask.bit.Task_500ms = 0;
 800dbb0:	4a0b      	ldr	r2, [pc, #44]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800dbb2:	7813      	ldrb	r3, [r2, #0]
 800dbb4:	f36f 1345 	bfc	r3, #5, #1
 800dbb8:	7013      	strb	r3, [r2, #0]
	}


	if(TimeTask.bit.Task_1000ms==1)              // 1sec  체크
 800dbba:	4b09      	ldr	r3, [pc, #36]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d006      	beq.n	800dbd6 <Task_Schedule_freerun+0xda>
	{
			FUN_Tim6_1000ms_routine();
 800dbc8:	f7ff feb8 	bl	800d93c <FUN_Tim6_1000ms_routine>

			TimeTask.bit.Task_1000ms = 0;
 800dbcc:	4a04      	ldr	r2, [pc, #16]	@ (800dbe0 <Task_Schedule_freerun+0xe4>)
 800dbce:	7813      	ldrb	r3, [r2, #0]
 800dbd0:	f36f 1386 	bfc	r3, #6, #1
 800dbd4:	7013      	strb	r3, [r2, #0]
	}

}
 800dbd6:	bf00      	nop
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	200006c8 	.word	0x200006c8
 800dbe0:	20000654 	.word	0x20000654

0800dbe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = 0x8008000;  //매우 중요 Vector Table Offset Register
 800dbe8:	4b17      	ldr	r3, [pc, #92]	@ (800dc48 <main+0x64>)
 800dbea:	4a18      	ldr	r2, [pc, #96]	@ (800dc4c <main+0x68>)
 800dbec:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800dbee:	f000 ffa0 	bl	800eb32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800dbf2:	f000 f82f 	bl	800dc54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800dbf6:	f000 fac9 	bl	800e18c <MX_GPIO_Init>
  MX_DMA_Init();
 800dbfa:	f000 fa9d 	bl	800e138 <MX_DMA_Init>
  MX_ADC2_Init();
 800dbfe:	f000 f873 	bl	800dce8 <MX_ADC2_Init>
  MX_I2C1_Init();
 800dc02:	f000 f8d7 	bl	800ddb4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800dc06:	f000 f915 	bl	800de34 <MX_I2C2_Init>
  MX_SPI3_Init();
 800dc0a:	f000 f9d1 	bl	800dfb0 <MX_SPI3_Init>
  MX_UART5_Init();
 800dc0e:	f000 fa43 	bl	800e098 <MX_UART5_Init>
  MX_TIM6_Init();
 800dc12:	f000 fa0b 	bl	800e02c <MX_TIM6_Init>
  MX_I2C3_Init();
 800dc16:	f000 f94d 	bl	800deb4 <MX_I2C3_Init>
  MX_SPI2_Init();
 800dc1a:	f000 f98b 	bl	800df34 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(250);
  FUN_bootloader_init();
 800dc1e:	f7fc fa25 	bl	800a06c <FUN_bootloader_init>
  FUN_TIM_init();
 800dc22:	f7ff fded 	bl	800d800 <FUN_TIM_init>
  EEPROM_init();
 800dc26:	f7fc fc87 	bl	800a538 <EEPROM_init>
  RS485_Init();
 800dc2a:	f7fe fac1 	bl	800c1b0 <RS485_Init>
  FUN_ADC_Init(&hadc2);
 800dc2e:	4808      	ldr	r0, [pc, #32]	@ (800dc50 <main+0x6c>)
 800dc30:	f7fb f9bc 	bl	8008fac <FUN_ADC_Init>
  FUN_I2C_SHT30_Init();
 800dc34:	f7fc fffa 	bl	800ac2c <FUN_I2C_SHT30_Init>
  Gas_Sensor_Init();
 800dc38:	f7ff fc36 	bl	800d4a8 <Gas_Sensor_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
	Task_Schedule_freerun();
 800dc3c:	f7ff ff5e 	bl	800dafc <Task_Schedule_freerun>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	FUN_bootloader_freerun();
 800dc40:	f7fc fa20 	bl	800a084 <FUN_bootloader_freerun>
	Task_Schedule_freerun();
 800dc44:	bf00      	nop
 800dc46:	e7f9      	b.n	800dc3c <main+0x58>
 800dc48:	e000ed00 	.word	0xe000ed00
 800dc4c:	08008000 	.word	0x08008000
 800dc50:	200006ec 	.word	0x200006ec

0800dc54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b094      	sub	sp, #80	@ 0x50
 800dc58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800dc5a:	f107 0318 	add.w	r3, r7, #24
 800dc5e:	2238      	movs	r2, #56	@ 0x38
 800dc60:	2100      	movs	r1, #0
 800dc62:	4618      	mov	r0, r3
 800dc64:	f009 fbfe 	bl	8017464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800dc68:	1d3b      	adds	r3, r7, #4
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	601a      	str	r2, [r3, #0]
 800dc6e:	605a      	str	r2, [r3, #4]
 800dc70:	609a      	str	r2, [r3, #8]
 800dc72:	60da      	str	r2, [r3, #12]
 800dc74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800dc76:	2000      	movs	r0, #0
 800dc78:	f004 fd2e 	bl	80126d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800dc80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800dc84:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800dc86:	2302      	movs	r3, #2
 800dc88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800dc8e:	2302      	movs	r3, #2
 800dc90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800dc92:	2350      	movs	r3, #80	@ 0x50
 800dc94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800dc96:	2302      	movs	r3, #2
 800dc98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800dc9a:	2302      	movs	r3, #2
 800dc9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800dc9e:	2302      	movs	r3, #2
 800dca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800dca2:	f107 0318 	add.w	r3, r7, #24
 800dca6:	4618      	mov	r0, r3
 800dca8:	f004 fdca 	bl	8012840 <HAL_RCC_OscConfig>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d001      	beq.n	800dcb6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800dcb2:	f000 fb27 	bl	800e304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dcb6:	230f      	movs	r3, #15
 800dcb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dcba:	2303      	movs	r3, #3
 800dcbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800dcca:	1d3b      	adds	r3, r7, #4
 800dccc:	2104      	movs	r1, #4
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f005 f8ce 	bl	8012e70 <HAL_RCC_ClockConfig>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d001      	beq.n	800dcde <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800dcda:	f000 fb13 	bl	800e304 <Error_Handler>
  }
}
 800dcde:	bf00      	nop
 800dce0:	3750      	adds	r7, #80	@ 0x50
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
	...

0800dce8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b088      	sub	sp, #32
 800dcec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800dcee:	463b      	mov	r3, r7
 800dcf0:	2220      	movs	r2, #32
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f009 fbb5 	bl	8017464 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800dcfa:	4b2b      	ldr	r3, [pc, #172]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dcfc:	4a2b      	ldr	r2, [pc, #172]	@ (800ddac <MX_ADC2_Init+0xc4>)
 800dcfe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800dd00:	4b29      	ldr	r3, [pc, #164]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd02:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800dd06:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800dd08:	4b27      	ldr	r3, [pc, #156]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dd0e:	4b26      	ldr	r3, [pc, #152]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd10:	2200      	movs	r2, #0
 800dd12:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800dd14:	4b24      	ldr	r3, [pc, #144]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd16:	2200      	movs	r2, #0
 800dd18:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800dd1a:	4b23      	ldr	r3, [pc, #140]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800dd20:	4b21      	ldr	r3, [pc, #132]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd22:	2204      	movs	r2, #4
 800dd24:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800dd26:	4b20      	ldr	r3, [pc, #128]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd28:	2200      	movs	r2, #0
 800dd2a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800dd2c:	4b1e      	ldr	r3, [pc, #120]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd2e:	2201      	movs	r2, #1
 800dd30:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800dd32:	4b1d      	ldr	r3, [pc, #116]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd34:	2201      	movs	r2, #1
 800dd36:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800dd38:	4b1b      	ldr	r3, [pc, #108]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800dd40:	4b19      	ldr	r3, [pc, #100]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800dd46:	4b18      	ldr	r3, [pc, #96]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd48:	2200      	movs	r2, #0
 800dd4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800dd4c:	4b16      	ldr	r3, [pc, #88]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd4e:	2201      	movs	r2, #1
 800dd50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800dd54:	4b14      	ldr	r3, [pc, #80]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd56:	2200      	movs	r2, #0
 800dd58:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800dd5a:	4b13      	ldr	r3, [pc, #76]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800dd62:	4811      	ldr	r0, [pc, #68]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd64:	f001 fa0a 	bl	800f17c <HAL_ADC_Init>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800dd6e:	f000 fac9 	bl	800e304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800dd72:	4b0f      	ldr	r3, [pc, #60]	@ (800ddb0 <MX_ADC2_Init+0xc8>)
 800dd74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800dd76:	2306      	movs	r3, #6
 800dd78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800dd7a:	2303      	movs	r3, #3
 800dd7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800dd7e:	237f      	movs	r3, #127	@ 0x7f
 800dd80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800dd82:	2304      	movs	r3, #4
 800dd84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800dd86:	2300      	movs	r3, #0
 800dd88:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800dd8a:	463b      	mov	r3, r7
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	4806      	ldr	r0, [pc, #24]	@ (800dda8 <MX_ADC2_Init+0xc0>)
 800dd90:	f002 f856 	bl	800fe40 <HAL_ADC_ConfigChannel>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d001      	beq.n	800dd9e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800dd9a:	f000 fab3 	bl	800e304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800dd9e:	bf00      	nop
 800dda0:	3720      	adds	r7, #32
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	200006ec 	.word	0x200006ec
 800ddac:	50000100 	.word	0x50000100
 800ddb0:	32601000 	.word	0x32601000

0800ddb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800ddb8:	4b1b      	ldr	r3, [pc, #108]	@ (800de28 <MX_I2C1_Init+0x74>)
 800ddba:	4a1c      	ldr	r2, [pc, #112]	@ (800de2c <MX_I2C1_Init+0x78>)
 800ddbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 800ddbe:	4b1a      	ldr	r3, [pc, #104]	@ (800de28 <MX_I2C1_Init+0x74>)
 800ddc0:	4a1b      	ldr	r2, [pc, #108]	@ (800de30 <MX_I2C1_Init+0x7c>)
 800ddc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800ddc4:	4b18      	ldr	r3, [pc, #96]	@ (800de28 <MX_I2C1_Init+0x74>)
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ddca:	4b17      	ldr	r3, [pc, #92]	@ (800de28 <MX_I2C1_Init+0x74>)
 800ddcc:	2201      	movs	r2, #1
 800ddce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ddd0:	4b15      	ldr	r3, [pc, #84]	@ (800de28 <MX_I2C1_Init+0x74>)
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800ddd6:	4b14      	ldr	r3, [pc, #80]	@ (800de28 <MX_I2C1_Init+0x74>)
 800ddd8:	2200      	movs	r2, #0
 800ddda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800dddc:	4b12      	ldr	r3, [pc, #72]	@ (800de28 <MX_I2C1_Init+0x74>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800dde2:	4b11      	ldr	r3, [pc, #68]	@ (800de28 <MX_I2C1_Init+0x74>)
 800dde4:	2200      	movs	r2, #0
 800dde6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800dde8:	4b0f      	ldr	r3, [pc, #60]	@ (800de28 <MX_I2C1_Init+0x74>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ddee:	480e      	ldr	r0, [pc, #56]	@ (800de28 <MX_I2C1_Init+0x74>)
 800ddf0:	f003 fea0 	bl	8011b34 <HAL_I2C_Init>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800ddfa:	f000 fa83 	bl	800e304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ddfe:	2100      	movs	r1, #0
 800de00:	4809      	ldr	r0, [pc, #36]	@ (800de28 <MX_I2C1_Init+0x74>)
 800de02:	f004 fbd1 	bl	80125a8 <HAL_I2CEx_ConfigAnalogFilter>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d001      	beq.n	800de10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800de0c:	f000 fa7a 	bl	800e304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800de10:	2100      	movs	r1, #0
 800de12:	4805      	ldr	r0, [pc, #20]	@ (800de28 <MX_I2C1_Init+0x74>)
 800de14:	f004 fc13 	bl	801263e <HAL_I2CEx_ConfigDigitalFilter>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800de1e:	f000 fa71 	bl	800e304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800de22:	bf00      	nop
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	200007b8 	.word	0x200007b8
 800de2c:	40005400 	.word	0x40005400
 800de30:	00f07bff 	.word	0x00f07bff

0800de34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800de38:	4b1b      	ldr	r3, [pc, #108]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de3a:	4a1c      	ldr	r2, [pc, #112]	@ (800deac <MX_I2C2_Init+0x78>)
 800de3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 800de3e:	4b1a      	ldr	r3, [pc, #104]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de40:	4a1b      	ldr	r2, [pc, #108]	@ (800deb0 <MX_I2C2_Init+0x7c>)
 800de42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800de44:	4b18      	ldr	r3, [pc, #96]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de46:	2200      	movs	r2, #0
 800de48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800de4a:	4b17      	ldr	r3, [pc, #92]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de4c:	2201      	movs	r2, #1
 800de4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800de50:	4b15      	ldr	r3, [pc, #84]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de52:	2200      	movs	r2, #0
 800de54:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800de56:	4b14      	ldr	r3, [pc, #80]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de58:	2200      	movs	r2, #0
 800de5a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800de5c:	4b12      	ldr	r3, [pc, #72]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de5e:	2200      	movs	r2, #0
 800de60:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800de62:	4b11      	ldr	r3, [pc, #68]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de64:	2200      	movs	r2, #0
 800de66:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800de68:	4b0f      	ldr	r3, [pc, #60]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de6a:	2200      	movs	r2, #0
 800de6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800de6e:	480e      	ldr	r0, [pc, #56]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de70:	f003 fe60 	bl	8011b34 <HAL_I2C_Init>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800de7a:	f000 fa43 	bl	800e304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800de7e:	2100      	movs	r1, #0
 800de80:	4809      	ldr	r0, [pc, #36]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de82:	f004 fb91 	bl	80125a8 <HAL_I2CEx_ConfigAnalogFilter>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800de8c:	f000 fa3a 	bl	800e304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800de90:	2100      	movs	r1, #0
 800de92:	4805      	ldr	r0, [pc, #20]	@ (800dea8 <MX_I2C2_Init+0x74>)
 800de94:	f004 fbd3 	bl	801263e <HAL_I2CEx_ConfigDigitalFilter>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d001      	beq.n	800dea2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800de9e:	f000 fa31 	bl	800e304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800dea2:	bf00      	nop
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	20000804 	.word	0x20000804
 800deac:	40005800 	.word	0x40005800
 800deb0:	00f07bff 	.word	0x00f07bff

0800deb4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800deb8:	4b1b      	ldr	r3, [pc, #108]	@ (800df28 <MX_I2C3_Init+0x74>)
 800deba:	4a1c      	ldr	r2, [pc, #112]	@ (800df2c <MX_I2C3_Init+0x78>)
 800debc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00F07BFF;
 800debe:	4b1a      	ldr	r3, [pc, #104]	@ (800df28 <MX_I2C3_Init+0x74>)
 800dec0:	4a1b      	ldr	r2, [pc, #108]	@ (800df30 <MX_I2C3_Init+0x7c>)
 800dec2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800dec4:	4b18      	ldr	r3, [pc, #96]	@ (800df28 <MX_I2C3_Init+0x74>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800deca:	4b17      	ldr	r3, [pc, #92]	@ (800df28 <MX_I2C3_Init+0x74>)
 800decc:	2201      	movs	r2, #1
 800dece:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ded0:	4b15      	ldr	r3, [pc, #84]	@ (800df28 <MX_I2C3_Init+0x74>)
 800ded2:	2200      	movs	r2, #0
 800ded4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800ded6:	4b14      	ldr	r3, [pc, #80]	@ (800df28 <MX_I2C3_Init+0x74>)
 800ded8:	2200      	movs	r2, #0
 800deda:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800dedc:	4b12      	ldr	r3, [pc, #72]	@ (800df28 <MX_I2C3_Init+0x74>)
 800dede:	2200      	movs	r2, #0
 800dee0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800dee2:	4b11      	ldr	r3, [pc, #68]	@ (800df28 <MX_I2C3_Init+0x74>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800dee8:	4b0f      	ldr	r3, [pc, #60]	@ (800df28 <MX_I2C3_Init+0x74>)
 800deea:	2200      	movs	r2, #0
 800deec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800deee:	480e      	ldr	r0, [pc, #56]	@ (800df28 <MX_I2C3_Init+0x74>)
 800def0:	f003 fe20 	bl	8011b34 <HAL_I2C_Init>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d001      	beq.n	800defe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800defa:	f000 fa03 	bl	800e304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800defe:	2100      	movs	r1, #0
 800df00:	4809      	ldr	r0, [pc, #36]	@ (800df28 <MX_I2C3_Init+0x74>)
 800df02:	f004 fb51 	bl	80125a8 <HAL_I2CEx_ConfigAnalogFilter>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d001      	beq.n	800df10 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800df0c:	f000 f9fa 	bl	800e304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800df10:	2100      	movs	r1, #0
 800df12:	4805      	ldr	r0, [pc, #20]	@ (800df28 <MX_I2C3_Init+0x74>)
 800df14:	f004 fb93 	bl	801263e <HAL_I2CEx_ConfigDigitalFilter>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d001      	beq.n	800df22 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800df1e:	f000 f9f1 	bl	800e304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800df22:	bf00      	nop
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	20000850 	.word	0x20000850
 800df2c:	40007800 	.word	0x40007800
 800df30:	00f07bff 	.word	0x00f07bff

0800df34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800df38:	4b1b      	ldr	r3, [pc, #108]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df3a:	4a1c      	ldr	r2, [pc, #112]	@ (800dfac <MX_SPI2_Init+0x78>)
 800df3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800df3e:	4b1a      	ldr	r3, [pc, #104]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800df44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800df46:	4b18      	ldr	r3, [pc, #96]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df48:	2200      	movs	r2, #0
 800df4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800df4c:	4b16      	ldr	r3, [pc, #88]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df4e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800df52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800df54:	4b14      	ldr	r3, [pc, #80]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df56:	2200      	movs	r2, #0
 800df58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800df5a:	4b13      	ldr	r3, [pc, #76]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800df60:	4b11      	ldr	r3, [pc, #68]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800df68:	4b0f      	ldr	r3, [pc, #60]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df6a:	2218      	movs	r2, #24
 800df6c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800df6e:	4b0e      	ldr	r3, [pc, #56]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df70:	2200      	movs	r2, #0
 800df72:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800df74:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df76:	2200      	movs	r2, #0
 800df78:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df7a:	4b0b      	ldr	r3, [pc, #44]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df7c:	2200      	movs	r2, #0
 800df7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800df80:	4b09      	ldr	r3, [pc, #36]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df82:	2207      	movs	r2, #7
 800df84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800df86:	4b08      	ldr	r3, [pc, #32]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df88:	2200      	movs	r2, #0
 800df8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800df8c:	4b06      	ldr	r3, [pc, #24]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df8e:	2208      	movs	r2, #8
 800df90:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800df92:	4805      	ldr	r0, [pc, #20]	@ (800dfa8 <MX_SPI2_Init+0x74>)
 800df94:	f005 fbc4 	bl	8013720 <HAL_SPI_Init>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d001      	beq.n	800dfa2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800df9e:	f000 f9b1 	bl	800e304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800dfa2:	bf00      	nop
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	2000089c 	.word	0x2000089c
 800dfac:	40003800 	.word	0x40003800

0800dfb0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800dfb4:	4b1b      	ldr	r3, [pc, #108]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dfb6:	4a1c      	ldr	r2, [pc, #112]	@ (800e028 <MX_SPI3_Init+0x78>)
 800dfb8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800dfba:	4b1a      	ldr	r3, [pc, #104]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dfbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800dfc0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800dfc2:	4b18      	ldr	r3, [pc, #96]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800dfc8:	4b16      	ldr	r3, [pc, #88]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dfca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800dfce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800dfd0:	4b14      	ldr	r3, [pc, #80]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dfd2:	2202      	movs	r2, #2
 800dfd4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800dfd6:	4b13      	ldr	r3, [pc, #76]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dfd8:	2201      	movs	r2, #1
 800dfda:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800dfdc:	4b11      	ldr	r3, [pc, #68]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dfde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dfe2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800dfe4:	4b0f      	ldr	r3, [pc, #60]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dfe6:	2218      	movs	r2, #24
 800dfe8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800dfea:	4b0e      	ldr	r3, [pc, #56]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dfec:	2200      	movs	r2, #0
 800dfee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800dff0:	4b0c      	ldr	r3, [pc, #48]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dff6:	4b0b      	ldr	r3, [pc, #44]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800dffc:	4b09      	ldr	r3, [pc, #36]	@ (800e024 <MX_SPI3_Init+0x74>)
 800dffe:	2207      	movs	r2, #7
 800e000:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800e002:	4b08      	ldr	r3, [pc, #32]	@ (800e024 <MX_SPI3_Init+0x74>)
 800e004:	2200      	movs	r2, #0
 800e006:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800e008:	4b06      	ldr	r3, [pc, #24]	@ (800e024 <MX_SPI3_Init+0x74>)
 800e00a:	2200      	movs	r2, #0
 800e00c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800e00e:	4805      	ldr	r0, [pc, #20]	@ (800e024 <MX_SPI3_Init+0x74>)
 800e010:	f005 fb86 	bl	8013720 <HAL_SPI_Init>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800e01a:	f000 f973 	bl	800e304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800e01e:	bf00      	nop
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	20000900 	.word	0x20000900
 800e028:	40003c00 	.word	0x40003c00

0800e02c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e032:	1d3b      	adds	r3, r7, #4
 800e034:	2200      	movs	r2, #0
 800e036:	601a      	str	r2, [r3, #0]
 800e038:	605a      	str	r2, [r3, #4]
 800e03a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e03c:	4b14      	ldr	r3, [pc, #80]	@ (800e090 <MX_TIM6_Init+0x64>)
 800e03e:	4a15      	ldr	r2, [pc, #84]	@ (800e094 <MX_TIM6_Init+0x68>)
 800e040:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 160-1;
 800e042:	4b13      	ldr	r3, [pc, #76]	@ (800e090 <MX_TIM6_Init+0x64>)
 800e044:	229f      	movs	r2, #159	@ 0x9f
 800e046:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e048:	4b11      	ldr	r3, [pc, #68]	@ (800e090 <MX_TIM6_Init+0x64>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800e04e:	4b10      	ldr	r3, [pc, #64]	@ (800e090 <MX_TIM6_Init+0x64>)
 800e050:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800e054:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e056:	4b0e      	ldr	r3, [pc, #56]	@ (800e090 <MX_TIM6_Init+0x64>)
 800e058:	2200      	movs	r2, #0
 800e05a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e05c:	480c      	ldr	r0, [pc, #48]	@ (800e090 <MX_TIM6_Init+0x64>)
 800e05e:	f006 fa03 	bl	8014468 <HAL_TIM_Base_Init>
 800e062:	4603      	mov	r3, r0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d001      	beq.n	800e06c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800e068:	f000 f94c 	bl	800e304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e06c:	2300      	movs	r3, #0
 800e06e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e070:	2300      	movs	r3, #0
 800e072:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e074:	1d3b      	adds	r3, r7, #4
 800e076:	4619      	mov	r1, r3
 800e078:	4805      	ldr	r0, [pc, #20]	@ (800e090 <MX_TIM6_Init+0x64>)
 800e07a:	f006 fd03 	bl	8014a84 <HAL_TIMEx_MasterConfigSynchronization>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800e084:	f000 f93e 	bl	800e304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e088:	bf00      	nop
 800e08a:	3710      	adds	r7, #16
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	20000964 	.word	0x20000964
 800e094:	40001000 	.word	0x40001000

0800e098 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800e09c:	4b24      	ldr	r3, [pc, #144]	@ (800e130 <MX_UART5_Init+0x98>)
 800e09e:	4a25      	ldr	r2, [pc, #148]	@ (800e134 <MX_UART5_Init+0x9c>)
 800e0a0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800e0a2:	4b23      	ldr	r3, [pc, #140]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800e0a8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e0aa:	4b21      	ldr	r3, [pc, #132]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800e0b0:	4b1f      	ldr	r3, [pc, #124]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800e0b6:	4b1e      	ldr	r3, [pc, #120]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800e0bc:	4b1c      	ldr	r3, [pc, #112]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0be:	220c      	movs	r2, #12
 800e0c0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e0c2:	4b1b      	ldr	r3, [pc, #108]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800e0c8:	4b19      	ldr	r3, [pc, #100]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e0ce:	4b18      	ldr	r3, [pc, #96]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800e0d4:	4b16      	ldr	r3, [pc, #88]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e0da:	4b15      	ldr	r3, [pc, #84]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0dc:	2200      	movs	r2, #0
 800e0de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart5, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	2100      	movs	r1, #0
 800e0e6:	4812      	ldr	r0, [pc, #72]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0e8:	f009 f832 	bl	8017150 <HAL_RS485Ex_Init>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d001      	beq.n	800e0f6 <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 800e0f2:	f000 f907 	bl	800e304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	480d      	ldr	r0, [pc, #52]	@ (800e130 <MX_UART5_Init+0x98>)
 800e0fa:	f009 f8e9 	bl	80172d0 <HAL_UARTEx_SetTxFifoThreshold>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 800e104:	f000 f8fe 	bl	800e304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800e108:	2100      	movs	r1, #0
 800e10a:	4809      	ldr	r0, [pc, #36]	@ (800e130 <MX_UART5_Init+0x98>)
 800e10c:	f009 f91e 	bl	801734c <HAL_UARTEx_SetRxFifoThreshold>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d001      	beq.n	800e11a <MX_UART5_Init+0x82>
  {
    Error_Handler();
 800e116:	f000 f8f5 	bl	800e304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800e11a:	4805      	ldr	r0, [pc, #20]	@ (800e130 <MX_UART5_Init+0x98>)
 800e11c:	f009 f89f 	bl	801725e <HAL_UARTEx_DisableFifoMode>
 800e120:	4603      	mov	r3, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d001      	beq.n	800e12a <MX_UART5_Init+0x92>
  {
    Error_Handler();
 800e126:	f000 f8ed 	bl	800e304 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800e12a:	bf00      	nop
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	200009b0 	.word	0x200009b0
 800e134:	40005000 	.word	0x40005000

0800e138 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800e13e:	4b12      	ldr	r3, [pc, #72]	@ (800e188 <MX_DMA_Init+0x50>)
 800e140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e142:	4a11      	ldr	r2, [pc, #68]	@ (800e188 <MX_DMA_Init+0x50>)
 800e144:	f043 0304 	orr.w	r3, r3, #4
 800e148:	6493      	str	r3, [r2, #72]	@ 0x48
 800e14a:	4b0f      	ldr	r3, [pc, #60]	@ (800e188 <MX_DMA_Init+0x50>)
 800e14c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e14e:	f003 0304 	and.w	r3, r3, #4
 800e152:	607b      	str	r3, [r7, #4]
 800e154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800e156:	4b0c      	ldr	r3, [pc, #48]	@ (800e188 <MX_DMA_Init+0x50>)
 800e158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e15a:	4a0b      	ldr	r2, [pc, #44]	@ (800e188 <MX_DMA_Init+0x50>)
 800e15c:	f043 0301 	orr.w	r3, r3, #1
 800e160:	6493      	str	r3, [r2, #72]	@ 0x48
 800e162:	4b09      	ldr	r3, [pc, #36]	@ (800e188 <MX_DMA_Init+0x50>)
 800e164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e166:	f003 0301 	and.w	r3, r3, #1
 800e16a:	603b      	str	r3, [r7, #0]
 800e16c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800e16e:	2200      	movs	r2, #0
 800e170:	2105      	movs	r1, #5
 800e172:	200b      	movs	r0, #11
 800e174:	f002 fd1b 	bl	8010bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800e178:	200b      	movs	r0, #11
 800e17a:	f002 fd32 	bl	8010be2 <HAL_NVIC_EnableIRQ>

}
 800e17e:	bf00      	nop
 800e180:	3708      	adds	r7, #8
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	40021000 	.word	0x40021000

0800e18c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08a      	sub	sp, #40	@ 0x28
 800e190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e192:	f107 0314 	add.w	r3, r7, #20
 800e196:	2200      	movs	r2, #0
 800e198:	601a      	str	r2, [r3, #0]
 800e19a:	605a      	str	r2, [r3, #4]
 800e19c:	609a      	str	r2, [r3, #8]
 800e19e:	60da      	str	r2, [r3, #12]
 800e1a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e1a2:	4b55      	ldr	r3, [pc, #340]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1a6:	4a54      	ldr	r2, [pc, #336]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1a8:	f043 0304 	orr.w	r3, r3, #4
 800e1ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e1ae:	4b52      	ldr	r3, [pc, #328]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1b2:	f003 0304 	and.w	r3, r3, #4
 800e1b6:	613b      	str	r3, [r7, #16]
 800e1b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800e1ba:	4b4f      	ldr	r3, [pc, #316]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1be:	4a4e      	ldr	r2, [pc, #312]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1c0:	f043 0320 	orr.w	r3, r3, #32
 800e1c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e1c6:	4b4c      	ldr	r3, [pc, #304]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1ca:	f003 0320 	and.w	r3, r3, #32
 800e1ce:	60fb      	str	r3, [r7, #12]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1d2:	4b49      	ldr	r3, [pc, #292]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1d6:	4a48      	ldr	r2, [pc, #288]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1d8:	f043 0301 	orr.w	r3, r3, #1
 800e1dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e1de:	4b46      	ldr	r3, [pc, #280]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1e2:	f003 0301 	and.w	r3, r3, #1
 800e1e6:	60bb      	str	r3, [r7, #8]
 800e1e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e1ea:	4b43      	ldr	r3, [pc, #268]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1ee:	4a42      	ldr	r2, [pc, #264]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1f0:	f043 0302 	orr.w	r3, r3, #2
 800e1f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e1f6:	4b40      	ldr	r3, [pc, #256]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e1f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1fa:	f003 0302 	and.w	r3, r3, #2
 800e1fe:	607b      	str	r3, [r7, #4]
 800e200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e202:	4b3d      	ldr	r3, [pc, #244]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e206:	4a3c      	ldr	r2, [pc, #240]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e208:	f043 0308 	orr.w	r3, r3, #8
 800e20c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e20e:	4b3a      	ldr	r3, [pc, #232]	@ (800e2f8 <MX_GPIO_Init+0x16c>)
 800e210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e212:	f003 0308 	and.w	r3, r3, #8
 800e216:	603b      	str	r3, [r7, #0]
 800e218:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXT_TEMP1_Pin|EXT_TEMP2_Pin, GPIO_PIN_RESET);
 800e21a:	2200      	movs	r2, #0
 800e21c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800e220:	4836      	ldr	r0, [pc, #216]	@ (800e2fc <MX_GPIO_Init+0x170>)
 800e222:	f003 fc55 	bl	8011ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_XSHUT_Pin|EEPROM_CS_Pin|EXT_RUN_Pin|EXT_SMK_Pin, GPIO_PIN_RESET);
 800e226:	2200      	movs	r2, #0
 800e228:	f44f 51c6 	mov.w	r1, #6336	@ 0x18c0
 800e22c:	4834      	ldr	r0, [pc, #208]	@ (800e300 <MX_GPIO_Init+0x174>)
 800e22e:	f003 fc4f 	bl	8011ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EEPROM_HOLD_Pin|EEPROM_WP_Pin, GPIO_PIN_SET);
 800e232:	2201      	movs	r2, #1
 800e234:	21c0      	movs	r1, #192	@ 0xc0
 800e236:	4831      	ldr	r0, [pc, #196]	@ (800e2fc <MX_GPIO_Init+0x170>)
 800e238:	f003 fc4a 	bl	8011ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STT_Pin|LED_ERR_Pin, GPIO_PIN_SET);
 800e23c:	2201      	movs	r2, #1
 800e23e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 800e242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e246:	f003 fc43 	bl	8011ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEAT_EN_GPIO_Port, HEAT_EN_Pin, GPIO_PIN_RESET);
 800e24a:	2200      	movs	r2, #0
 800e24c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e254:	f003 fc3c 	bl	8011ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SMK_CS__GPIO_Port, SMK_CS__Pin, GPIO_PIN_SET);
 800e258:	2201      	movs	r2, #1
 800e25a:	2108      	movs	r1, #8
 800e25c:	4828      	ldr	r0, [pc, #160]	@ (800e300 <MX_GPIO_Init+0x174>)
 800e25e:	f003 fc37 	bl	8011ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXT_TEMP1_Pin EXT_TEMP2_Pin EEPROM_HOLD_Pin EEPROM_WP_Pin */
  GPIO_InitStruct.Pin = EXT_TEMP1_Pin|EXT_TEMP2_Pin|EEPROM_HOLD_Pin|EEPROM_WP_Pin;
 800e262:	f24c 03c0 	movw	r3, #49344	@ 0xc0c0
 800e266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e268:	2301      	movs	r3, #1
 800e26a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e26c:	2300      	movs	r3, #0
 800e26e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e270:	2300      	movs	r3, #0
 800e272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e274:	f107 0314 	add.w	r3, r7, #20
 800e278:	4619      	mov	r1, r3
 800e27a:	4820      	ldr	r0, [pc, #128]	@ (800e2fc <MX_GPIO_Init+0x170>)
 800e27c:	f003 f9ac 	bl	80115d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_DIP1_Pin SET_DIP2_Pin SET_DIP3_Pin SET_DIP4_Pin */
  GPIO_InitStruct.Pin = SET_DIP1_Pin|SET_DIP2_Pin|SET_DIP3_Pin|SET_DIP4_Pin;
 800e280:	230f      	movs	r3, #15
 800e282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e284:	2300      	movs	r3, #0
 800e286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e288:	2300      	movs	r3, #0
 800e28a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e28c:	f107 0314 	add.w	r3, r7, #20
 800e290:	4619      	mov	r1, r3
 800e292:	481a      	ldr	r0, [pc, #104]	@ (800e2fc <MX_GPIO_Init+0x170>)
 800e294:	f003 f9a0 	bl	80115d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADDR_RTY11_Pin ADDR_RTY12_Pin ADDR_RTY13_Pin ADDR_RTY14_Pin
                           ADDR_RTY21_Pin ADDR_RTY22_Pin ADDR_RTY23_Pin ADDR_RTY24_Pin */
  GPIO_InitStruct.Pin = ADDR_RTY11_Pin|ADDR_RTY12_Pin|ADDR_RTY13_Pin|ADDR_RTY14_Pin
 800e298:	23ff      	movs	r3, #255	@ 0xff
 800e29a:	617b      	str	r3, [r7, #20]
                          |ADDR_RTY21_Pin|ADDR_RTY22_Pin|ADDR_RTY23_Pin|ADDR_RTY24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e29c:	2300      	movs	r3, #0
 800e29e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2a4:	f107 0314 	add.w	r3, r7, #20
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e2ae:	f003 f993 	bl	80115d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_XSHUT_Pin EEPROM_CS_Pin SMK_CS__Pin EXT_RUN_Pin
                           EXT_SMK_Pin */
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin|EEPROM_CS_Pin|SMK_CS__Pin|EXT_RUN_Pin
 800e2b2:	f641 03c8 	movw	r3, #6344	@ 0x18c8
 800e2b6:	617b      	str	r3, [r7, #20]
                          |EXT_SMK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e2c4:	f107 0314 	add.w	r3, r7, #20
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	480d      	ldr	r0, [pc, #52]	@ (800e300 <MX_GPIO_Init+0x174>)
 800e2cc:	f003 f984 	bl	80115d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STT_Pin LED_ERR_Pin HEAT_EN_Pin */
  GPIO_InitStruct.Pin = LED_STT_Pin|LED_ERR_Pin|HEAT_EN_Pin;
 800e2d0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800e2d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2e2:	f107 0314 	add.w	r3, r7, #20
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e2ec:	f003 f974 	bl	80115d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800e2f0:	bf00      	nop
 800e2f2:	3728      	adds	r7, #40	@ 0x28
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	40021000 	.word	0x40021000
 800e2fc:	48000800 	.word	0x48000800
 800e300:	48000400 	.word	0x48000400

0800e304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e304:	b480      	push	{r7}
 800e306:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e308:	b672      	cpsid	i
}
 800e30a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e30c:	bf00      	nop
 800e30e:	e7fd      	b.n	800e30c <Error_Handler+0x8>

0800e310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e316:	4b0f      	ldr	r3, [pc, #60]	@ (800e354 <HAL_MspInit+0x44>)
 800e318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e31a:	4a0e      	ldr	r2, [pc, #56]	@ (800e354 <HAL_MspInit+0x44>)
 800e31c:	f043 0301 	orr.w	r3, r3, #1
 800e320:	6613      	str	r3, [r2, #96]	@ 0x60
 800e322:	4b0c      	ldr	r3, [pc, #48]	@ (800e354 <HAL_MspInit+0x44>)
 800e324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e326:	f003 0301 	and.w	r3, r3, #1
 800e32a:	607b      	str	r3, [r7, #4]
 800e32c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e32e:	4b09      	ldr	r3, [pc, #36]	@ (800e354 <HAL_MspInit+0x44>)
 800e330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e332:	4a08      	ldr	r2, [pc, #32]	@ (800e354 <HAL_MspInit+0x44>)
 800e334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e338:	6593      	str	r3, [r2, #88]	@ 0x58
 800e33a:	4b06      	ldr	r3, [pc, #24]	@ (800e354 <HAL_MspInit+0x44>)
 800e33c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e33e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e342:	603b      	str	r3, [r7, #0]
 800e344:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800e346:	f004 fa6b 	bl	8012820 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e34a:	bf00      	nop
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	40021000 	.word	0x40021000

0800e358 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b09e      	sub	sp, #120	@ 0x78
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e360:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800e364:	2200      	movs	r2, #0
 800e366:	601a      	str	r2, [r3, #0]
 800e368:	605a      	str	r2, [r3, #4]
 800e36a:	609a      	str	r2, [r3, #8]
 800e36c:	60da      	str	r2, [r3, #12]
 800e36e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e370:	f107 0314 	add.w	r3, r7, #20
 800e374:	2250      	movs	r2, #80	@ 0x50
 800e376:	2100      	movs	r1, #0
 800e378:	4618      	mov	r0, r3
 800e37a:	f009 f873 	bl	8017464 <memset>
  if(hadc->Instance==ADC2)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a37      	ldr	r2, [pc, #220]	@ (800e460 <HAL_ADC_MspInit+0x108>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d167      	bne.n	800e458 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800e388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e38c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800e38e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e392:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e394:	f107 0314 	add.w	r3, r7, #20
 800e398:	4618      	mov	r0, r3
 800e39a:	f004 ff85 	bl	80132a8 <HAL_RCCEx_PeriphCLKConfig>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d001      	beq.n	800e3a8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800e3a4:	f7ff ffae 	bl	800e304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800e3a8:	4b2e      	ldr	r3, [pc, #184]	@ (800e464 <HAL_ADC_MspInit+0x10c>)
 800e3aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3ac:	4a2d      	ldr	r2, [pc, #180]	@ (800e464 <HAL_ADC_MspInit+0x10c>)
 800e3ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e3b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e3b4:	4b2b      	ldr	r3, [pc, #172]	@ (800e464 <HAL_ADC_MspInit+0x10c>)
 800e3b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e3bc:	613b      	str	r3, [r7, #16]
 800e3be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e3c0:	4b28      	ldr	r3, [pc, #160]	@ (800e464 <HAL_ADC_MspInit+0x10c>)
 800e3c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3c4:	4a27      	ldr	r2, [pc, #156]	@ (800e464 <HAL_ADC_MspInit+0x10c>)
 800e3c6:	f043 0302 	orr.w	r3, r3, #2
 800e3ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e3cc:	4b25      	ldr	r3, [pc, #148]	@ (800e464 <HAL_ADC_MspInit+0x10c>)
 800e3ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3d0:	f003 0302 	and.w	r3, r3, #2
 800e3d4:	60fb      	str	r3, [r7, #12]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PB2     ------> ADC2_IN12
    */
    GPIO_InitStruct.Pin = CO_SENSOR_Pin;
 800e3d8:	2304      	movs	r3, #4
 800e3da:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e3dc:	2303      	movs	r3, #3
 800e3de:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(CO_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800e3e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	481f      	ldr	r0, [pc, #124]	@ (800e468 <HAL_ADC_MspInit+0x110>)
 800e3ec:	f003 f8f4 	bl	80115d8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 800e3f0:	4b1e      	ldr	r3, [pc, #120]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e3f2:	4a1f      	ldr	r2, [pc, #124]	@ (800e470 <HAL_ADC_MspInit+0x118>)
 800e3f4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800e3f6:	4b1d      	ldr	r3, [pc, #116]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e3f8:	2224      	movs	r2, #36	@ 0x24
 800e3fa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e3fc:	4b1b      	ldr	r3, [pc, #108]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e402:	4b1a      	ldr	r3, [pc, #104]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e404:	2200      	movs	r2, #0
 800e406:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e408:	4b18      	ldr	r3, [pc, #96]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e40a:	2280      	movs	r2, #128	@ 0x80
 800e40c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e40e:	4b17      	ldr	r3, [pc, #92]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e410:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e414:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e416:	4b15      	ldr	r3, [pc, #84]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e418:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e41c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e41e:	4b13      	ldr	r3, [pc, #76]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e420:	2220      	movs	r2, #32
 800e422:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800e424:	4b11      	ldr	r3, [pc, #68]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e426:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e42a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e42c:	480f      	ldr	r0, [pc, #60]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e42e:	f002 fbf3 	bl	8010c18 <HAL_DMA_Init>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800e438:	f7ff ff64 	bl	800e304 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	4a0b      	ldr	r2, [pc, #44]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e440:	655a      	str	r2, [r3, #84]	@ 0x54
 800e442:	4a0a      	ldr	r2, [pc, #40]	@ (800e46c <HAL_ADC_MspInit+0x114>)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800e448:	2200      	movs	r2, #0
 800e44a:	2105      	movs	r1, #5
 800e44c:	2012      	movs	r0, #18
 800e44e:	f002 fbae 	bl	8010bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800e452:	2012      	movs	r0, #18
 800e454:	f002 fbc5 	bl	8010be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800e458:	bf00      	nop
 800e45a:	3778      	adds	r7, #120	@ 0x78
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	50000100 	.word	0x50000100
 800e464:	40021000 	.word	0x40021000
 800e468:	48000400 	.word	0x48000400
 800e46c:	20000758 	.word	0x20000758
 800e470:	40020008 	.word	0x40020008

0800e474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b0a2      	sub	sp, #136	@ 0x88
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e47c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e480:	2200      	movs	r2, #0
 800e482:	601a      	str	r2, [r3, #0]
 800e484:	605a      	str	r2, [r3, #4]
 800e486:	609a      	str	r2, [r3, #8]
 800e488:	60da      	str	r2, [r3, #12]
 800e48a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e48c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e490:	2250      	movs	r2, #80	@ 0x50
 800e492:	2100      	movs	r1, #0
 800e494:	4618      	mov	r0, r3
 800e496:	f008 ffe5 	bl	8017464 <memset>
  if(hi2c->Instance==I2C1)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4a73      	ldr	r2, [pc, #460]	@ (800e66c <HAL_I2C_MspInit+0x1f8>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d15f      	bne.n	800e564 <HAL_I2C_MspInit+0xf0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800e4a4:	2340      	movs	r3, #64	@ 0x40
 800e4a6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e4ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f004 fef9 	bl	80132a8 <HAL_RCCEx_PeriphCLKConfig>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d001      	beq.n	800e4c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800e4bc:	f7ff ff22 	bl	800e304 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4c0:	4b6b      	ldr	r3, [pc, #428]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e4c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4c4:	4a6a      	ldr	r2, [pc, #424]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e4c6:	f043 0301 	orr.w	r3, r3, #1
 800e4ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e4cc:	4b68      	ldr	r3, [pc, #416]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e4ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4d0:	f003 0301 	and.w	r3, r3, #1
 800e4d4:	623b      	str	r3, [r7, #32]
 800e4d6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e4d8:	4b65      	ldr	r3, [pc, #404]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e4da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4dc:	4a64      	ldr	r2, [pc, #400]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e4de:	f043 0302 	orr.w	r3, r3, #2
 800e4e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e4e4:	4b62      	ldr	r3, [pc, #392]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e4e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4e8:	f003 0302 	and.w	r3, r3, #2
 800e4ec:	61fb      	str	r3, [r7, #28]
 800e4ee:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SMK_SCL_Pin;
 800e4f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e4f4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e4f6:	2312      	movs	r3, #18
 800e4f8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e4fe:	2300      	movs	r3, #0
 800e500:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e504:	2304      	movs	r3, #4
 800e506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(SMK_SCL_GPIO_Port, &GPIO_InitStruct);
 800e50a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e50e:	4619      	mov	r1, r3
 800e510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e514:	f003 f860 	bl	80115d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SMK_SDA_Pin;
 800e518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e51c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e51e:	2312      	movs	r3, #18
 800e520:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e522:	2301      	movs	r3, #1
 800e524:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e526:	2300      	movs	r3, #0
 800e528:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e52c:	2304      	movs	r3, #4
 800e52e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(SMK_SDA_GPIO_Port, &GPIO_InitStruct);
 800e532:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e536:	4619      	mov	r1, r3
 800e538:	484e      	ldr	r0, [pc, #312]	@ (800e674 <HAL_I2C_MspInit+0x200>)
 800e53a:	f003 f84d 	bl	80115d8 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 800e53e:	4b4e      	ldr	r3, [pc, #312]	@ (800e678 <HAL_I2C_MspInit+0x204>)
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	4a4d      	ldr	r2, [pc, #308]	@ (800e678 <HAL_I2C_MspInit+0x204>)
 800e544:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e548:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e54a:	4b49      	ldr	r3, [pc, #292]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e54c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e54e:	4a48      	ldr	r2, [pc, #288]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e550:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e554:	6593      	str	r3, [r2, #88]	@ 0x58
 800e556:	4b46      	ldr	r3, [pc, #280]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e55a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e55e:	61bb      	str	r3, [r7, #24]
 800e560:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800e562:	e07e      	b.n	800e662 <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a44      	ldr	r2, [pc, #272]	@ (800e67c <HAL_I2C_MspInit+0x208>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d13a      	bne.n	800e5e4 <HAL_I2C_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800e56e:	2380      	movs	r3, #128	@ 0x80
 800e570:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800e572:	2300      	movs	r3, #0
 800e574:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e57a:	4618      	mov	r0, r3
 800e57c:	f004 fe94 	bl	80132a8 <HAL_RCCEx_PeriphCLKConfig>
 800e580:	4603      	mov	r3, r0
 800e582:	2b00      	cmp	r3, #0
 800e584:	d001      	beq.n	800e58a <HAL_I2C_MspInit+0x116>
      Error_Handler();
 800e586:	f7ff febd 	bl	800e304 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e58a:	4b39      	ldr	r3, [pc, #228]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e58c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e58e:	4a38      	ldr	r2, [pc, #224]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e590:	f043 0301 	orr.w	r3, r3, #1
 800e594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e596:	4b36      	ldr	r3, [pc, #216]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e59a:	f003 0301 	and.w	r3, r3, #1
 800e59e:	617b      	str	r3, [r7, #20]
 800e5a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TNH_SDA_Pin|TNH_SCL_Pin;
 800e5a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e5a6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e5a8:	2312      	movs	r3, #18
 800e5aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800e5b6:	2304      	movs	r3, #4
 800e5b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5bc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e5c6:	f003 f807 	bl	80115d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800e5ca:	4b29      	ldr	r3, [pc, #164]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e5cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5ce:	4a28      	ldr	r2, [pc, #160]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e5d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e5d4:	6593      	str	r3, [r2, #88]	@ 0x58
 800e5d6:	4b26      	ldr	r3, [pc, #152]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e5d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e5de:	613b      	str	r3, [r7, #16]
 800e5e0:	693b      	ldr	r3, [r7, #16]
}
 800e5e2:	e03e      	b.n	800e662 <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C3)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a25      	ldr	r2, [pc, #148]	@ (800e680 <HAL_I2C_MspInit+0x20c>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d139      	bne.n	800e662 <HAL_I2C_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800e5ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e5f2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e5f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f004 fe53 	bl	80132a8 <HAL_RCCEx_PeriphCLKConfig>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d001      	beq.n	800e60c <HAL_I2C_MspInit+0x198>
      Error_Handler();
 800e608:	f7ff fe7c 	bl	800e304 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e60c:	4b18      	ldr	r3, [pc, #96]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e60e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e610:	4a17      	ldr	r2, [pc, #92]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e612:	f043 0304 	orr.w	r3, r3, #4
 800e616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e618:	4b15      	ldr	r3, [pc, #84]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e61a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e61c:	f003 0304 	and.w	r3, r3, #4
 800e620:	60fb      	str	r3, [r7, #12]
 800e622:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800e624:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e628:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e62a:	2312      	movs	r3, #18
 800e62c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e62e:	2301      	movs	r3, #1
 800e630:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e632:	2300      	movs	r3, #0
 800e634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800e638:	2308      	movs	r3, #8
 800e63a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e63e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e642:	4619      	mov	r1, r3
 800e644:	480f      	ldr	r0, [pc, #60]	@ (800e684 <HAL_I2C_MspInit+0x210>)
 800e646:	f002 ffc7 	bl	80115d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800e64a:	4b09      	ldr	r3, [pc, #36]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e64c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e64e:	4a08      	ldr	r2, [pc, #32]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e650:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e654:	6593      	str	r3, [r2, #88]	@ 0x58
 800e656:	4b06      	ldr	r3, [pc, #24]	@ (800e670 <HAL_I2C_MspInit+0x1fc>)
 800e658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e65a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e65e:	60bb      	str	r3, [r7, #8]
 800e660:	68bb      	ldr	r3, [r7, #8]
}
 800e662:	bf00      	nop
 800e664:	3788      	adds	r7, #136	@ 0x88
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	40005400 	.word	0x40005400
 800e670:	40021000 	.word	0x40021000
 800e674:	48000400 	.word	0x48000400
 800e678:	40010000 	.word	0x40010000
 800e67c:	40005800 	.word	0x40005800
 800e680:	40007800 	.word	0x40007800
 800e684:	48000800 	.word	0x48000800

0800e688 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a22      	ldr	r2, [pc, #136]	@ (800e720 <HAL_I2C_MspDeInit+0x98>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d111      	bne.n	800e6be <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800e69a:	4b22      	ldr	r3, [pc, #136]	@ (800e724 <HAL_I2C_MspDeInit+0x9c>)
 800e69c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e69e:	4a21      	ldr	r2, [pc, #132]	@ (800e724 <HAL_I2C_MspDeInit+0x9c>)
 800e6a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e6a4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SMK_SCL_GPIO_Port, SMK_SCL_Pin);
 800e6a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e6aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e6ae:	f003 f915 	bl	80118dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SMK_SDA_GPIO_Port, SMK_SDA_Pin);
 800e6b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e6b6:	481c      	ldr	r0, [pc, #112]	@ (800e728 <HAL_I2C_MspDeInit+0xa0>)
 800e6b8:	f003 f910 	bl	80118dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800e6bc:	e02c      	b.n	800e718 <HAL_I2C_MspDeInit+0x90>
  else if(hi2c->Instance==I2C2)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4a1a      	ldr	r2, [pc, #104]	@ (800e72c <HAL_I2C_MspDeInit+0xa4>)
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d112      	bne.n	800e6ee <HAL_I2C_MspDeInit+0x66>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800e6c8:	4b16      	ldr	r3, [pc, #88]	@ (800e724 <HAL_I2C_MspDeInit+0x9c>)
 800e6ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6cc:	4a15      	ldr	r2, [pc, #84]	@ (800e724 <HAL_I2C_MspDeInit+0x9c>)
 800e6ce:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800e6d2:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(TNH_SDA_GPIO_Port, TNH_SDA_Pin);
 800e6d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e6d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e6dc:	f003 f8fe 	bl	80118dc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(TNH_SCL_GPIO_Port, TNH_SCL_Pin);
 800e6e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e6e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e6e8:	f003 f8f8 	bl	80118dc <HAL_GPIO_DeInit>
}
 800e6ec:	e014      	b.n	800e718 <HAL_I2C_MspDeInit+0x90>
  else if(hi2c->Instance==I2C3)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a0f      	ldr	r2, [pc, #60]	@ (800e730 <HAL_I2C_MspDeInit+0xa8>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d10f      	bne.n	800e718 <HAL_I2C_MspDeInit+0x90>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800e6f8:	4b0a      	ldr	r3, [pc, #40]	@ (800e724 <HAL_I2C_MspDeInit+0x9c>)
 800e6fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6fc:	4a09      	ldr	r2, [pc, #36]	@ (800e724 <HAL_I2C_MspDeInit+0x9c>)
 800e6fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e702:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 800e704:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e708:	480a      	ldr	r0, [pc, #40]	@ (800e734 <HAL_I2C_MspDeInit+0xac>)
 800e70a:	f003 f8e7 	bl	80118dc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800e70e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e712:	4808      	ldr	r0, [pc, #32]	@ (800e734 <HAL_I2C_MspDeInit+0xac>)
 800e714:	f003 f8e2 	bl	80118dc <HAL_GPIO_DeInit>
}
 800e718:	bf00      	nop
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	40005400 	.word	0x40005400
 800e724:	40021000 	.word	0x40021000
 800e728:	48000400 	.word	0x48000400
 800e72c:	40005800 	.word	0x40005800
 800e730:	40007800 	.word	0x40007800
 800e734:	48000800 	.word	0x48000800

0800e738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b08c      	sub	sp, #48	@ 0x30
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e740:	f107 031c 	add.w	r3, r7, #28
 800e744:	2200      	movs	r2, #0
 800e746:	601a      	str	r2, [r3, #0]
 800e748:	605a      	str	r2, [r3, #4]
 800e74a:	609a      	str	r2, [r3, #8]
 800e74c:	60da      	str	r2, [r3, #12]
 800e74e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4a41      	ldr	r2, [pc, #260]	@ (800e85c <HAL_SPI_MspInit+0x124>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d129      	bne.n	800e7ae <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e75a:	4b41      	ldr	r3, [pc, #260]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e75c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e75e:	4a40      	ldr	r2, [pc, #256]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e764:	6593      	str	r3, [r2, #88]	@ 0x58
 800e766:	4b3e      	ldr	r3, [pc, #248]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e76a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e76e:	61bb      	str	r3, [r7, #24]
 800e770:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e772:	4b3b      	ldr	r3, [pc, #236]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e776:	4a3a      	ldr	r2, [pc, #232]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e778:	f043 0302 	orr.w	r3, r3, #2
 800e77c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e77e:	4b38      	ldr	r3, [pc, #224]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e782:	f003 0302 	and.w	r3, r3, #2
 800e786:	617b      	str	r3, [r7, #20]
 800e788:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = EEPROM_SCK_Pin|EEPROM_MISO_Pin|EEPROM_MOSI_Pin;
 800e78a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800e78e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e790:	2302      	movs	r3, #2
 800e792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e794:	2300      	movs	r3, #0
 800e796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e798:	2300      	movs	r3, #0
 800e79a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e79c:	2305      	movs	r3, #5
 800e79e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e7a0:	f107 031c 	add.w	r3, r7, #28
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	482f      	ldr	r0, [pc, #188]	@ (800e864 <HAL_SPI_MspInit+0x12c>)
 800e7a8:	f002 ff16 	bl	80115d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800e7ac:	e051      	b.n	800e852 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI3)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4a2d      	ldr	r2, [pc, #180]	@ (800e868 <HAL_SPI_MspInit+0x130>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d14c      	bne.n	800e852 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800e7b8:	4b29      	ldr	r3, [pc, #164]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e7ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7bc:	4a28      	ldr	r2, [pc, #160]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e7be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7c2:	6593      	str	r3, [r2, #88]	@ 0x58
 800e7c4:	4b26      	ldr	r3, [pc, #152]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e7c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e7cc:	613b      	str	r3, [r7, #16]
 800e7ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e7d0:	4b23      	ldr	r3, [pc, #140]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e7d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7d4:	4a22      	ldr	r2, [pc, #136]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e7d6:	f043 0304 	orr.w	r3, r3, #4
 800e7da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e7dc:	4b20      	ldr	r3, [pc, #128]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e7de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7e0:	f003 0304 	and.w	r3, r3, #4
 800e7e4:	60fb      	str	r3, [r7, #12]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e7e8:	4b1d      	ldr	r3, [pc, #116]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e7ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7ec:	4a1c      	ldr	r2, [pc, #112]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e7ee:	f043 0302 	orr.w	r3, r3, #2
 800e7f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e7f4:	4b1a      	ldr	r3, [pc, #104]	@ (800e860 <HAL_SPI_MspInit+0x128>)
 800e7f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7f8:	f003 0302 	and.w	r3, r3, #2
 800e7fc:	60bb      	str	r3, [r7, #8]
 800e7fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SMK_SCLK_Pin|SMK_MISO_Pin;
 800e800:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800e804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e806:	2302      	movs	r3, #2
 800e808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e80a:	2300      	movs	r3, #0
 800e80c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e80e:	2300      	movs	r3, #0
 800e810:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e812:	2306      	movs	r3, #6
 800e814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e816:	f107 031c 	add.w	r3, r7, #28
 800e81a:	4619      	mov	r1, r3
 800e81c:	4813      	ldr	r0, [pc, #76]	@ (800e86c <HAL_SPI_MspInit+0x134>)
 800e81e:	f002 fedb 	bl	80115d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SMK_MOSI_Pin;
 800e822:	2320      	movs	r3, #32
 800e824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e826:	2302      	movs	r3, #2
 800e828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e82a:	2300      	movs	r3, #0
 800e82c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e82e:	2300      	movs	r3, #0
 800e830:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e832:	2306      	movs	r3, #6
 800e834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SMK_MOSI_GPIO_Port, &GPIO_InitStruct);
 800e836:	f107 031c 	add.w	r3, r7, #28
 800e83a:	4619      	mov	r1, r3
 800e83c:	4809      	ldr	r0, [pc, #36]	@ (800e864 <HAL_SPI_MspInit+0x12c>)
 800e83e:	f002 fecb 	bl	80115d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800e842:	2200      	movs	r2, #0
 800e844:	2100      	movs	r1, #0
 800e846:	2033      	movs	r0, #51	@ 0x33
 800e848:	f002 f9b1 	bl	8010bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800e84c:	2033      	movs	r0, #51	@ 0x33
 800e84e:	f002 f9c8 	bl	8010be2 <HAL_NVIC_EnableIRQ>
}
 800e852:	bf00      	nop
 800e854:	3730      	adds	r7, #48	@ 0x30
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	40003800 	.word	0x40003800
 800e860:	40021000 	.word	0x40021000
 800e864:	48000400 	.word	0x48000400
 800e868:	40003c00 	.word	0x40003c00
 800e86c:	48000800 	.word	0x48000800

0800e870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a0d      	ldr	r2, [pc, #52]	@ (800e8b4 <HAL_TIM_Base_MspInit+0x44>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d113      	bne.n	800e8aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e882:	4b0d      	ldr	r3, [pc, #52]	@ (800e8b8 <HAL_TIM_Base_MspInit+0x48>)
 800e884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e886:	4a0c      	ldr	r2, [pc, #48]	@ (800e8b8 <HAL_TIM_Base_MspInit+0x48>)
 800e888:	f043 0310 	orr.w	r3, r3, #16
 800e88c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e88e:	4b0a      	ldr	r3, [pc, #40]	@ (800e8b8 <HAL_TIM_Base_MspInit+0x48>)
 800e890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e892:	f003 0310 	and.w	r3, r3, #16
 800e896:	60fb      	str	r3, [r7, #12]
 800e898:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800e89a:	2200      	movs	r2, #0
 800e89c:	2105      	movs	r1, #5
 800e89e:	2036      	movs	r0, #54	@ 0x36
 800e8a0:	f002 f985 	bl	8010bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800e8a4:	2036      	movs	r0, #54	@ 0x36
 800e8a6:	f002 f99c 	bl	8010be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800e8aa:	bf00      	nop
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	40001000 	.word	0x40001000
 800e8b8:	40021000 	.word	0x40021000

0800e8bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b0a0      	sub	sp, #128	@ 0x80
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	601a      	str	r2, [r3, #0]
 800e8cc:	605a      	str	r2, [r3, #4]
 800e8ce:	609a      	str	r2, [r3, #8]
 800e8d0:	60da      	str	r2, [r3, #12]
 800e8d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e8d4:	f107 031c 	add.w	r3, r7, #28
 800e8d8:	2250      	movs	r2, #80	@ 0x50
 800e8da:	2100      	movs	r1, #0
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f008 fdc1 	bl	8017464 <memset>
  if(huart->Instance==UART5)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	4a3f      	ldr	r2, [pc, #252]	@ (800e9e4 <HAL_UART_MspInit+0x128>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d176      	bne.n	800e9da <HAL_UART_MspInit+0x11e>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800e8ec:	2310      	movs	r3, #16
 800e8ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e8f4:	f107 031c 	add.w	r3, r7, #28
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f004 fcd5 	bl	80132a8 <HAL_RCCEx_PeriphCLKConfig>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d001      	beq.n	800e908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800e904:	f7ff fcfe 	bl	800e304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800e908:	4b37      	ldr	r3, [pc, #220]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e90a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e90c:	4a36      	ldr	r2, [pc, #216]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e90e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e912:	6593      	str	r3, [r2, #88]	@ 0x58
 800e914:	4b34      	ldr	r3, [pc, #208]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e91c:	61bb      	str	r3, [r7, #24]
 800e91e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e920:	4b31      	ldr	r3, [pc, #196]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e924:	4a30      	ldr	r2, [pc, #192]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e926:	f043 0304 	orr.w	r3, r3, #4
 800e92a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e92c:	4b2e      	ldr	r3, [pc, #184]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e92e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e930:	f003 0304 	and.w	r3, r3, #4
 800e934:	617b      	str	r3, [r7, #20]
 800e936:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e938:	4b2b      	ldr	r3, [pc, #172]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e93a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e93c:	4a2a      	ldr	r2, [pc, #168]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e93e:	f043 0308 	orr.w	r3, r3, #8
 800e942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e944:	4b28      	ldr	r3, [pc, #160]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e948:	f003 0308 	and.w	r3, r3, #8
 800e94c:	613b      	str	r3, [r7, #16]
 800e94e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e950:	4b25      	ldr	r3, [pc, #148]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e954:	4a24      	ldr	r2, [pc, #144]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e956:	f043 0302 	orr.w	r3, r3, #2
 800e95a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e95c:	4b22      	ldr	r3, [pc, #136]	@ (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e95e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e960:	f003 0302 	and.w	r3, r3, #2
 800e964:	60fb      	str	r3, [r7, #12]
 800e966:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    PB4     ------> UART5_DE
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 800e968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e96c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e96e:	2302      	movs	r3, #2
 800e970:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e972:	2300      	movs	r3, #0
 800e974:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e976:	2300      	movs	r3, #0
 800e978:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800e97a:	2305      	movs	r3, #5
 800e97c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 800e97e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800e982:	4619      	mov	r1, r3
 800e984:	4819      	ldr	r0, [pc, #100]	@ (800e9ec <HAL_UART_MspInit+0x130>)
 800e986:	f002 fe27 	bl	80115d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX_Pin;
 800e98a:	2304      	movs	r3, #4
 800e98c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e98e:	2302      	movs	r3, #2
 800e990:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e992:	2300      	movs	r3, #0
 800e994:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e996:	2300      	movs	r3, #0
 800e998:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800e99a:	2305      	movs	r3, #5
 800e99c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 800e99e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	4812      	ldr	r0, [pc, #72]	@ (800e9f0 <HAL_UART_MspInit+0x134>)
 800e9a6:	f002 fe17 	bl	80115d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_DE_Pin;
 800e9aa:	2310      	movs	r3, #16
 800e9ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9ae:	2302      	movs	r3, #2
 800e9b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800e9ba:	2308      	movs	r3, #8
 800e9bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(RS485_DE_GPIO_Port, &GPIO_InitStruct);
 800e9be:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	480b      	ldr	r0, [pc, #44]	@ (800e9f4 <HAL_UART_MspInit+0x138>)
 800e9c6:	f002 fe07 	bl	80115d8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	2105      	movs	r1, #5
 800e9ce:	2035      	movs	r0, #53	@ 0x35
 800e9d0:	f002 f8ed 	bl	8010bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800e9d4:	2035      	movs	r0, #53	@ 0x35
 800e9d6:	f002 f904 	bl	8010be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800e9da:	bf00      	nop
 800e9dc:	3780      	adds	r7, #128	@ 0x80
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	40005000 	.word	0x40005000
 800e9e8:	40021000 	.word	0x40021000
 800e9ec:	48000800 	.word	0x48000800
 800e9f0:	48000c00 	.word	0x48000c00
 800e9f4:	48000400 	.word	0x48000400

0800e9f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800e9fc:	bf00      	nop
 800e9fe:	e7fd      	b.n	800e9fc <NMI_Handler+0x4>

0800ea00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ea00:	b480      	push	{r7}
 800ea02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ea04:	bf00      	nop
 800ea06:	e7fd      	b.n	800ea04 <HardFault_Handler+0x4>

0800ea08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ea0c:	bf00      	nop
 800ea0e:	e7fd      	b.n	800ea0c <MemManage_Handler+0x4>

0800ea10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ea10:	b480      	push	{r7}
 800ea12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ea14:	bf00      	nop
 800ea16:	e7fd      	b.n	800ea14 <BusFault_Handler+0x4>

0800ea18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ea1c:	bf00      	nop
 800ea1e:	e7fd      	b.n	800ea1c <UsageFault_Handler+0x4>

0800ea20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ea20:	b480      	push	{r7}
 800ea22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ea24:	bf00      	nop
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr

0800ea2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ea2e:	b480      	push	{r7}
 800ea30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ea32:	bf00      	nop
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ea40:	bf00      	nop
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ea4a:	b580      	push	{r7, lr}
 800ea4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ea4e:	f000 f8c3 	bl	800ebd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ea52:	bf00      	nop
 800ea54:	bd80      	pop	{r7, pc}
	...

0800ea58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800ea5c:	4802      	ldr	r0, [pc, #8]	@ (800ea68 <DMA1_Channel1_IRQHandler+0x10>)
 800ea5e:	f002 fa43 	bl	8010ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800ea62:	bf00      	nop
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	20000758 	.word	0x20000758

0800ea6c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 800ea70:	4802      	ldr	r0, [pc, #8]	@ (800ea7c <ADC1_2_IRQHandler+0x10>)
 800ea72:	f000 ff97 	bl	800f9a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800ea76:	bf00      	nop
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	200006ec 	.word	0x200006ec

0800ea80 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800ea84:	4802      	ldr	r0, [pc, #8]	@ (800ea90 <SPI3_IRQHandler+0x10>)
 800ea86:	f005 fa77 	bl	8013f78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800ea8a:	bf00      	nop
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	20000900 	.word	0x20000900

0800ea94 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800ea98:	4802      	ldr	r0, [pc, #8]	@ (800eaa4 <UART5_IRQHandler+0x10>)
 800ea9a:	f006 fafb 	bl	8015094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800ea9e:	bf00      	nop
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	200009b0 	.word	0x200009b0

0800eaa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800eaac:	4802      	ldr	r0, [pc, #8]	@ (800eab8 <TIM6_DAC_IRQHandler+0x10>)
 800eaae:	f005 fda3 	bl	80145f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800eab2:	bf00      	nop
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	20000964 	.word	0x20000964

0800eabc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800eabc:	b480      	push	{r7}
 800eabe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800eac0:	4b06      	ldr	r3, [pc, #24]	@ (800eadc <SystemInit+0x20>)
 800eac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eac6:	4a05      	ldr	r2, [pc, #20]	@ (800eadc <SystemInit+0x20>)
 800eac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800eacc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ead0:	bf00      	nop
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	e000ed00 	.word	0xe000ed00

0800eae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800eae0:	480d      	ldr	r0, [pc, #52]	@ (800eb18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800eae2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800eae4:	480d      	ldr	r0, [pc, #52]	@ (800eb1c <LoopForever+0x6>)
  ldr r1, =_edata
 800eae6:	490e      	ldr	r1, [pc, #56]	@ (800eb20 <LoopForever+0xa>)
  ldr r2, =_sidata
 800eae8:	4a0e      	ldr	r2, [pc, #56]	@ (800eb24 <LoopForever+0xe>)
  movs r3, #0
 800eaea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800eaec:	e002      	b.n	800eaf4 <LoopCopyDataInit>

0800eaee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800eaee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800eaf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800eaf2:	3304      	adds	r3, #4

0800eaf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800eaf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800eaf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800eaf8:	d3f9      	bcc.n	800eaee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800eafa:	4a0b      	ldr	r2, [pc, #44]	@ (800eb28 <LoopForever+0x12>)
  ldr r4, =_ebss
 800eafc:	4c0b      	ldr	r4, [pc, #44]	@ (800eb2c <LoopForever+0x16>)
  movs r3, #0
 800eafe:	2300      	movs	r3, #0
  b LoopFillZerobss
 800eb00:	e001      	b.n	800eb06 <LoopFillZerobss>

0800eb02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800eb02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800eb04:	3204      	adds	r2, #4

0800eb06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800eb06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800eb08:	d3fb      	bcc.n	800eb02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800eb0a:	f7ff ffd7 	bl	800eabc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800eb0e:	f008 fcb1 	bl	8017474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800eb12:	f7ff f867 	bl	800dbe4 <main>

0800eb16 <LoopForever>:

LoopForever:
    b LoopForever
 800eb16:	e7fe      	b.n	800eb16 <LoopForever>
  ldr   r0, =_estack
 800eb18:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800eb1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800eb20:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 800eb24:	08017640 	.word	0x08017640
  ldr r2, =_sbss
 800eb28:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800eb2c:	20000a44 	.word	0x20000a44

0800eb30 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800eb30:	e7fe      	b.n	800eb30 <ADC3_IRQHandler>

0800eb32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b082      	sub	sp, #8
 800eb36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800eb3c:	2003      	movs	r0, #3
 800eb3e:	f002 f82b 	bl	8010b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800eb42:	200f      	movs	r0, #15
 800eb44:	f000 f80e 	bl	800eb64 <HAL_InitTick>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d002      	beq.n	800eb54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	71fb      	strb	r3, [r7, #7]
 800eb52:	e001      	b.n	800eb58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800eb54:	f7ff fbdc 	bl	800e310 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800eb58:	79fb      	ldrb	r3, [r7, #7]

}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
	...

0800eb64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800eb70:	4b16      	ldr	r3, [pc, #88]	@ (800ebcc <HAL_InitTick+0x68>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d022      	beq.n	800ebbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800eb78:	4b15      	ldr	r3, [pc, #84]	@ (800ebd0 <HAL_InitTick+0x6c>)
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	4b13      	ldr	r3, [pc, #76]	@ (800ebcc <HAL_InitTick+0x68>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800eb84:	fbb1 f3f3 	udiv	r3, r1, r3
 800eb88:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f002 f836 	bl	8010bfe <HAL_SYSTICK_Config>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10f      	bne.n	800ebb8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2b0f      	cmp	r3, #15
 800eb9c:	d809      	bhi.n	800ebb2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800eb9e:	2200      	movs	r2, #0
 800eba0:	6879      	ldr	r1, [r7, #4]
 800eba2:	f04f 30ff 	mov.w	r0, #4294967295
 800eba6:	f002 f802 	bl	8010bae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ebaa:	4a0a      	ldr	r2, [pc, #40]	@ (800ebd4 <HAL_InitTick+0x70>)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6013      	str	r3, [r2, #0]
 800ebb0:	e007      	b.n	800ebc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	73fb      	strb	r3, [r7, #15]
 800ebb6:	e004      	b.n	800ebc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	73fb      	strb	r3, [r7, #15]
 800ebbc:	e001      	b.n	800ebc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ebc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3710      	adds	r7, #16
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	20000028 	.word	0x20000028
 800ebd0:	20000020 	.word	0x20000020
 800ebd4:	20000024 	.word	0x20000024

0800ebd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ebdc:	4b05      	ldr	r3, [pc, #20]	@ (800ebf4 <HAL_IncTick+0x1c>)
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	4b05      	ldr	r3, [pc, #20]	@ (800ebf8 <HAL_IncTick+0x20>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	4a03      	ldr	r2, [pc, #12]	@ (800ebf4 <HAL_IncTick+0x1c>)
 800ebe8:	6013      	str	r3, [r2, #0]
}
 800ebea:	bf00      	nop
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	20000a40 	.word	0x20000a40
 800ebf8:	20000028 	.word	0x20000028

0800ebfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	af00      	add	r7, sp, #0
  return uwTick;
 800ec00:	4b03      	ldr	r3, [pc, #12]	@ (800ec10 <HAL_GetTick+0x14>)
 800ec02:	681b      	ldr	r3, [r3, #0]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop
 800ec10:	20000a40 	.word	0x20000a40

0800ec14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ec1c:	f7ff ffee 	bl	800ebfc <HAL_GetTick>
 800ec20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec2c:	d004      	beq.n	800ec38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800ec2e:	4b09      	ldr	r3, [pc, #36]	@ (800ec54 <HAL_Delay+0x40>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	4413      	add	r3, r2
 800ec36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ec38:	bf00      	nop
 800ec3a:	f7ff ffdf 	bl	800ebfc <HAL_GetTick>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	1ad3      	subs	r3, r2, r3
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d8f7      	bhi.n	800ec3a <HAL_Delay+0x26>
  {
  }
}
 800ec4a:	bf00      	nop
 800ec4c:	bf00      	nop
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	20000028 	.word	0x20000028

0800ec58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	431a      	orrs	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	609a      	str	r2, [r3, #8]
}
 800ec72:	bf00      	nop
 800ec74:	370c      	adds	r7, #12
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr

0800ec7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800ec7e:	b480      	push	{r7}
 800ec80:	b083      	sub	sp, #12
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
 800ec86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	689b      	ldr	r3, [r3, #8]
 800ec8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	431a      	orrs	r2, r3
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	609a      	str	r2, [r3, #8]
}
 800ec98:	bf00      	nop
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	689b      	ldr	r3, [r3, #8]
 800ecb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b087      	sub	sp, #28
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	607a      	str	r2, [r7, #4]
 800eccc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	3360      	adds	r3, #96	@ 0x60
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	009b      	lsls	r3, r3, #2
 800ecd8:	4413      	add	r3, r2
 800ecda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	4b08      	ldr	r3, [pc, #32]	@ (800ed04 <LL_ADC_SetOffset+0x44>)
 800ece2:	4013      	ands	r3, r2
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800ecea:	683a      	ldr	r2, [r7, #0]
 800ecec:	430a      	orrs	r2, r1
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800ecf8:	bf00      	nop
 800ecfa:	371c      	adds	r7, #28
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr
 800ed04:	03fff000 	.word	0x03fff000

0800ed08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b085      	sub	sp, #20
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	3360      	adds	r3, #96	@ 0x60
 800ed16:	461a      	mov	r2, r3
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	4413      	add	r3, r2
 800ed1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3714      	adds	r7, #20
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b087      	sub	sp, #28
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	3360      	adds	r3, #96	@ 0x60
 800ed44:	461a      	mov	r2, r3
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	4413      	add	r3, r2
 800ed4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	431a      	orrs	r2, r3
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800ed5e:	bf00      	nop
 800ed60:	371c      	adds	r7, #28
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr

0800ed6a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800ed6a:	b480      	push	{r7}
 800ed6c:	b087      	sub	sp, #28
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	60f8      	str	r0, [r7, #12]
 800ed72:	60b9      	str	r1, [r7, #8]
 800ed74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	3360      	adds	r3, #96	@ 0x60
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	4413      	add	r3, r2
 800ed82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	431a      	orrs	r2, r3
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800ed94:	bf00      	nop
 800ed96:	371c      	adds	r7, #28
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b087      	sub	sp, #28
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	3360      	adds	r3, #96	@ 0x60
 800edb0:	461a      	mov	r2, r3
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	4413      	add	r3, r2
 800edb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	431a      	orrs	r2, r3
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800edca:	bf00      	nop
 800edcc:	371c      	adds	r7, #28
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr

0800edd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800edd6:	b480      	push	{r7}
 800edd8:	b083      	sub	sp, #12
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	695b      	ldr	r3, [r3, #20]
 800ede4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	431a      	orrs	r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	615a      	str	r2, [r3, #20]
}
 800edf0:	bf00      	nop
 800edf2:	370c      	adds	r7, #12
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b083      	sub	sp, #12
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d101      	bne.n	800ee14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800ee10:	2301      	movs	r3, #1
 800ee12:	e000      	b.n	800ee16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	370c      	adds	r7, #12
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800ee22:	b480      	push	{r7}
 800ee24:	b087      	sub	sp, #28
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	60f8      	str	r0, [r7, #12]
 800ee2a:	60b9      	str	r1, [r7, #8]
 800ee2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	3330      	adds	r3, #48	@ 0x30
 800ee32:	461a      	mov	r2, r3
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	0a1b      	lsrs	r3, r3, #8
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	f003 030c 	and.w	r3, r3, #12
 800ee3e:	4413      	add	r3, r2
 800ee40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	f003 031f 	and.w	r3, r3, #31
 800ee4c:	211f      	movs	r1, #31
 800ee4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ee52:	43db      	mvns	r3, r3
 800ee54:	401a      	ands	r2, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	0e9b      	lsrs	r3, r3, #26
 800ee5a:	f003 011f 	and.w	r1, r3, #31
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	f003 031f 	and.w	r3, r3, #31
 800ee64:	fa01 f303 	lsl.w	r3, r1, r3
 800ee68:	431a      	orrs	r2, r3
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800ee6e:	bf00      	nop
 800ee70:	371c      	adds	r7, #28
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr

0800ee7a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800ee7a:	b480      	push	{r7}
 800ee7c:	b083      	sub	sp, #12
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee86:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d101      	bne.n	800ee92 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e000      	b.n	800ee94 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800ee92:	2300      	movs	r3, #0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	370c      	adds	r7, #12
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b087      	sub	sp, #28
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	3314      	adds	r3, #20
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	0e5b      	lsrs	r3, r3, #25
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	f003 0304 	and.w	r3, r3, #4
 800eebc:	4413      	add	r3, r2
 800eebe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	681a      	ldr	r2, [r3, #0]
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	0d1b      	lsrs	r3, r3, #20
 800eec8:	f003 031f 	and.w	r3, r3, #31
 800eecc:	2107      	movs	r1, #7
 800eece:	fa01 f303 	lsl.w	r3, r1, r3
 800eed2:	43db      	mvns	r3, r3
 800eed4:	401a      	ands	r2, r3
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	0d1b      	lsrs	r3, r3, #20
 800eeda:	f003 031f 	and.w	r3, r3, #31
 800eede:	6879      	ldr	r1, [r7, #4]
 800eee0:	fa01 f303 	lsl.w	r3, r1, r3
 800eee4:	431a      	orrs	r2, r3
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800eeea:	bf00      	nop
 800eeec:	371c      	adds	r7, #28
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr
	...

0800eef8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b085      	sub	sp, #20
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a0f      	ldr	r2, [pc, #60]	@ (800ef44 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d10a      	bne.n	800ef22 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef18:	431a      	orrs	r2, r3
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800ef20:	e00a      	b.n	800ef38 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef2e:	43db      	mvns	r3, r3
 800ef30:	401a      	ands	r2, r3
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 800ef38:	bf00      	nop
 800ef3a:	3714      	adds	r7, #20
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr
 800ef44:	407f0000 	.word	0x407f0000

0800ef48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	f003 031f 	and.w	r3, r3, #31
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	370c      	adds	r7, #12
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b083      	sub	sp, #12
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	689b      	ldr	r3, [r3, #8]
 800ef8c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800ef90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	6093      	str	r3, [r2, #8]
}
 800ef98:	bf00      	nop
 800ef9a:	370c      	adds	r7, #12
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	689b      	ldr	r3, [r3, #8]
 800efb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800efb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efb8:	d101      	bne.n	800efbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800efba:	2301      	movs	r3, #1
 800efbc:	e000      	b.n	800efc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800efbe:	2300      	movs	r3, #0
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	370c      	adds	r7, #12
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr

0800efcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800efdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800efe0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800efe8:	bf00      	nop
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr

0800eff4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	689b      	ldr	r3, [r3, #8]
 800f000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f008:	d101      	bne.n	800f00e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800f00a:	2301      	movs	r3, #1
 800f00c:	e000      	b.n	800f010 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	689b      	ldr	r3, [r3, #8]
 800f028:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f02c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800f030:	f043 0201 	orr.w	r2, r3, #1
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800f038:	bf00      	nop
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f054:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800f058:	f043 0202 	orr.w	r2, r3, #2
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800f060:	bf00      	nop
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	f003 0301 	and.w	r3, r3, #1
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d101      	bne.n	800f084 <LL_ADC_IsEnabled+0x18>
 800f080:	2301      	movs	r3, #1
 800f082:	e000      	b.n	800f086 <LL_ADC_IsEnabled+0x1a>
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	370c      	adds	r7, #12
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr

0800f092 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800f092:	b480      	push	{r7}
 800f094:	b083      	sub	sp, #12
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	f003 0302 	and.w	r3, r3, #2
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d101      	bne.n	800f0aa <LL_ADC_IsDisableOngoing+0x18>
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	e000      	b.n	800f0ac <LL_ADC_IsDisableOngoing+0x1a>
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	370c      	adds	r7, #12
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr

0800f0b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b083      	sub	sp, #12
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	689b      	ldr	r3, [r3, #8]
 800f0c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f0c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800f0cc:	f043 0204 	orr.w	r2, r3, #4
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800f0d4:	bf00      	nop
 800f0d6:	370c      	adds	r7, #12
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr

0800f0e0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f0f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800f0f4:	f043 0210 	orr.w	r2, r3, #16
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800f0fc:	bf00      	nop
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	689b      	ldr	r3, [r3, #8]
 800f114:	f003 0304 	and.w	r3, r3, #4
 800f118:	2b04      	cmp	r3, #4
 800f11a:	d101      	bne.n	800f120 <LL_ADC_REG_IsConversionOngoing+0x18>
 800f11c:	2301      	movs	r3, #1
 800f11e:	e000      	b.n	800f122 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800f120:	2300      	movs	r3, #0
}
 800f122:	4618      	mov	r0, r3
 800f124:	370c      	adds	r7, #12
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr

0800f12e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800f12e:	b480      	push	{r7}
 800f130:	b083      	sub	sp, #12
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	689b      	ldr	r3, [r3, #8]
 800f13a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f13e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800f142:	f043 0220 	orr.w	r2, r3, #32
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800f14a:	bf00      	nop
 800f14c:	370c      	adds	r7, #12
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr

0800f156 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800f156:	b480      	push	{r7}
 800f158:	b083      	sub	sp, #12
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	689b      	ldr	r3, [r3, #8]
 800f162:	f003 0308 	and.w	r3, r3, #8
 800f166:	2b08      	cmp	r3, #8
 800f168:	d101      	bne.n	800f16e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800f16a:	2301      	movs	r3, #1
 800f16c:	e000      	b.n	800f170 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800f16e:	2300      	movs	r3, #0
}
 800f170:	4618      	mov	r0, r3
 800f172:	370c      	adds	r7, #12
 800f174:	46bd      	mov	sp, r7
 800f176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17a:	4770      	bx	lr

0800f17c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f17c:	b590      	push	{r4, r7, lr}
 800f17e:	b089      	sub	sp, #36	@ 0x24
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f184:	2300      	movs	r3, #0
 800f186:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800f188:	2300      	movs	r3, #0
 800f18a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d101      	bne.n	800f196 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800f192:	2301      	movs	r3, #1
 800f194:	e1a1      	b.n	800f4da <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	695b      	ldr	r3, [r3, #20]
 800f19a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d109      	bne.n	800f1b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f7ff f8d7 	bl	800e358 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7ff fef1 	bl	800efa4 <LL_ADC_IsDeepPowerDownEnabled>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d004      	beq.n	800f1d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7ff fed7 	bl	800ef80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7ff ff0c 	bl	800eff4 <LL_ADC_IsInternalRegulatorEnabled>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d115      	bne.n	800f20e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7ff fef0 	bl	800efcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800f1ec:	4b9a      	ldr	r3, [pc, #616]	@ (800f458 <HAL_ADC_Init+0x2dc>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	099b      	lsrs	r3, r3, #6
 800f1f2:	4a9a      	ldr	r2, [pc, #616]	@ (800f45c <HAL_ADC_Init+0x2e0>)
 800f1f4:	fba2 2303 	umull	r2, r3, r2, r3
 800f1f8:	099b      	lsrs	r3, r3, #6
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	005b      	lsls	r3, r3, #1
 800f1fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800f200:	e002      	b.n	800f208 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	3b01      	subs	r3, #1
 800f206:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d1f9      	bne.n	800f202 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff feee 	bl	800eff4 <LL_ADC_IsInternalRegulatorEnabled>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d10d      	bne.n	800f23a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f222:	f043 0210 	orr.w	r2, r3, #16
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f22e:	f043 0201 	orr.w	r2, r3, #1
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800f236:	2301      	movs	r3, #1
 800f238:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	4618      	mov	r0, r3
 800f240:	f7ff ff62 	bl	800f108 <LL_ADC_REG_IsConversionOngoing>
 800f244:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f24a:	f003 0310 	and.w	r3, r3, #16
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f040 813a 	bne.w	800f4c8 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	2b00      	cmp	r3, #0
 800f258:	f040 8136 	bne.w	800f4c8 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f260:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800f264:	f043 0202 	orr.w	r2, r3, #2
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4618      	mov	r0, r3
 800f272:	f7ff fefb 	bl	800f06c <LL_ADC_IsEnabled>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d137      	bne.n	800f2ec <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f284:	d004      	beq.n	800f290 <HAL_ADC_Init+0x114>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4a75      	ldr	r2, [pc, #468]	@ (800f460 <HAL_ADC_Init+0x2e4>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d10f      	bne.n	800f2b0 <HAL_ADC_Init+0x134>
 800f290:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800f294:	f7ff feea 	bl	800f06c <LL_ADC_IsEnabled>
 800f298:	4604      	mov	r4, r0
 800f29a:	4871      	ldr	r0, [pc, #452]	@ (800f460 <HAL_ADC_Init+0x2e4>)
 800f29c:	f7ff fee6 	bl	800f06c <LL_ADC_IsEnabled>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	4323      	orrs	r3, r4
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	bf0c      	ite	eq
 800f2a8:	2301      	moveq	r3, #1
 800f2aa:	2300      	movne	r3, #0
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	e008      	b.n	800f2c2 <HAL_ADC_Init+0x146>
 800f2b0:	486c      	ldr	r0, [pc, #432]	@ (800f464 <HAL_ADC_Init+0x2e8>)
 800f2b2:	f7ff fedb 	bl	800f06c <LL_ADC_IsEnabled>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	bf0c      	ite	eq
 800f2bc:	2301      	moveq	r3, #1
 800f2be:	2300      	movne	r3, #0
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d012      	beq.n	800f2ec <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f2ce:	d004      	beq.n	800f2da <HAL_ADC_Init+0x15e>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4a62      	ldr	r2, [pc, #392]	@ (800f460 <HAL_ADC_Init+0x2e4>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d101      	bne.n	800f2de <HAL_ADC_Init+0x162>
 800f2da:	4a63      	ldr	r2, [pc, #396]	@ (800f468 <HAL_ADC_Init+0x2ec>)
 800f2dc:	e000      	b.n	800f2e0 <HAL_ADC_Init+0x164>
 800f2de:	4a63      	ldr	r2, [pc, #396]	@ (800f46c <HAL_ADC_Init+0x2f0>)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	4610      	mov	r0, r2
 800f2e8:	f7ff fcb6 	bl	800ec58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	7f5b      	ldrb	r3, [r3, #29]
 800f2f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f2f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800f2fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800f302:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f30a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f30c:	4313      	orrs	r3, r2
 800f30e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f316:	2b01      	cmp	r3, #1
 800f318:	d106      	bne.n	800f328 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f31e:	3b01      	subs	r3, #1
 800f320:	045b      	lsls	r3, r3, #17
 800f322:	69ba      	ldr	r2, [r7, #24]
 800f324:	4313      	orrs	r3, r2
 800f326:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d009      	beq.n	800f344 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f334:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f33c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800f33e:	69ba      	ldr	r2, [r7, #24]
 800f340:	4313      	orrs	r3, r2
 800f342:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	68da      	ldr	r2, [r3, #12]
 800f34a:	4b49      	ldr	r3, [pc, #292]	@ (800f470 <HAL_ADC_Init+0x2f4>)
 800f34c:	4013      	ands	r3, r2
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	6812      	ldr	r2, [r2, #0]
 800f352:	69b9      	ldr	r1, [r7, #24]
 800f354:	430b      	orrs	r3, r1
 800f356:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	430a      	orrs	r2, r1
 800f36c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4618      	mov	r0, r3
 800f374:	f7ff fec8 	bl	800f108 <LL_ADC_REG_IsConversionOngoing>
 800f378:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4618      	mov	r0, r3
 800f380:	f7ff fee9 	bl	800f156 <LL_ADC_INJ_IsConversionOngoing>
 800f384:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d17b      	bne.n	800f484 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d178      	bne.n	800f484 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800f396:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f39e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f3ae:	f023 0302 	bic.w	r3, r3, #2
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	6812      	ldr	r2, [r2, #0]
 800f3b6:	69b9      	ldr	r1, [r7, #24]
 800f3b8:	430b      	orrs	r3, r1
 800f3ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	691b      	ldr	r3, [r3, #16]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d017      	beq.n	800f3f4 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	691a      	ldr	r2, [r3, #16]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f3d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f3dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800f3e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	6911      	ldr	r1, [r2, #16]
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	6812      	ldr	r2, [r2, #0]
 800f3ec:	430b      	orrs	r3, r1
 800f3ee:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800f3f2:	e013      	b.n	800f41c <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	691a      	ldr	r2, [r3, #16]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f402:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	6812      	ldr	r2, [r2, #0]
 800f410:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800f414:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800f418:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f422:	2b01      	cmp	r3, #1
 800f424:	d126      	bne.n	800f474 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	691b      	ldr	r3, [r3, #16]
 800f42c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800f430:	f023 0304 	bic.w	r3, r3, #4
 800f434:	687a      	ldr	r2, [r7, #4]
 800f436:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800f43c:	4311      	orrs	r1, r2
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800f442:	4311      	orrs	r1, r2
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f448:	430a      	orrs	r2, r1
 800f44a:	431a      	orrs	r2, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f042 0201 	orr.w	r2, r2, #1
 800f454:	611a      	str	r2, [r3, #16]
 800f456:	e015      	b.n	800f484 <HAL_ADC_Init+0x308>
 800f458:	20000020 	.word	0x20000020
 800f45c:	053e2d63 	.word	0x053e2d63
 800f460:	50000100 	.word	0x50000100
 800f464:	50000400 	.word	0x50000400
 800f468:	50000300 	.word	0x50000300
 800f46c:	50000700 	.word	0x50000700
 800f470:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	691a      	ldr	r2, [r3, #16]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f022 0201 	bic.w	r2, r2, #1
 800f482:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	695b      	ldr	r3, [r3, #20]
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d10c      	bne.n	800f4a6 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f492:	f023 010f 	bic.w	r1, r3, #15
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6a1b      	ldr	r3, [r3, #32]
 800f49a:	1e5a      	subs	r2, r3, #1
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	430a      	orrs	r2, r1
 800f4a2:	631a      	str	r2, [r3, #48]	@ 0x30
 800f4a4:	e007      	b.n	800f4b6 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f022 020f 	bic.w	r2, r2, #15
 800f4b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f4ba:	f023 0303 	bic.w	r3, r3, #3
 800f4be:	f043 0201 	orr.w	r2, r3, #1
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f4c6:	e007      	b.n	800f4d8 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f4cc:	f043 0210 	orr.w	r2, r3, #16
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800f4d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3724      	adds	r7, #36	@ 0x24
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd90      	pop	{r4, r7, pc}
 800f4e2:	bf00      	nop

0800f4e4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b086      	sub	sp, #24
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4f4:	d004      	beq.n	800f500 <HAL_ADC_Start+0x1c>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a5c      	ldr	r2, [pc, #368]	@ (800f66c <HAL_ADC_Start+0x188>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d101      	bne.n	800f504 <HAL_ADC_Start+0x20>
 800f500:	4b5b      	ldr	r3, [pc, #364]	@ (800f670 <HAL_ADC_Start+0x18c>)
 800f502:	e000      	b.n	800f506 <HAL_ADC_Start+0x22>
 800f504:	4b5b      	ldr	r3, [pc, #364]	@ (800f674 <HAL_ADC_Start+0x190>)
 800f506:	4618      	mov	r0, r3
 800f508:	f7ff fd1e 	bl	800ef48 <LL_ADC_GetMultimode>
 800f50c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	4618      	mov	r0, r3
 800f514:	f7ff fdf8 	bl	800f108 <LL_ADC_REG_IsConversionOngoing>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f040 809f 	bne.w	800f65e <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800f526:	2b01      	cmp	r3, #1
 800f528:	d101      	bne.n	800f52e <HAL_ADC_Start+0x4a>
 800f52a:	2302      	movs	r3, #2
 800f52c:	e09a      	b.n	800f664 <HAL_ADC_Start+0x180>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2201      	movs	r2, #1
 800f532:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f001 f96a 	bl	8010810 <ADC_Enable>
 800f53c:	4603      	mov	r3, r0
 800f53e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f540:	7dfb      	ldrb	r3, [r7, #23]
 800f542:	2b00      	cmp	r3, #0
 800f544:	f040 8086 	bne.w	800f654 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f54c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800f550:	f023 0301 	bic.w	r3, r3, #1
 800f554:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4a42      	ldr	r2, [pc, #264]	@ (800f66c <HAL_ADC_Start+0x188>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d002      	beq.n	800f56c <HAL_ADC_Start+0x88>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	e001      	b.n	800f570 <HAL_ADC_Start+0x8c>
 800f56c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	6812      	ldr	r2, [r2, #0]
 800f574:	4293      	cmp	r3, r2
 800f576:	d002      	beq.n	800f57e <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d105      	bne.n	800f58a <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f582:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f58e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f596:	d106      	bne.n	800f5a6 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f59c:	f023 0206 	bic.w	r2, r3, #6
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	661a      	str	r2, [r3, #96]	@ 0x60
 800f5a4:	e002      	b.n	800f5ac <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	221c      	movs	r2, #28
 800f5b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a2a      	ldr	r2, [pc, #168]	@ (800f66c <HAL_ADC_Start+0x188>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d002      	beq.n	800f5cc <HAL_ADC_Start+0xe8>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	e001      	b.n	800f5d0 <HAL_ADC_Start+0xec>
 800f5cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800f5d0:	687a      	ldr	r2, [r7, #4]
 800f5d2:	6812      	ldr	r2, [r2, #0]
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d008      	beq.n	800f5ea <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d005      	beq.n	800f5ea <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	2b05      	cmp	r3, #5
 800f5e2:	d002      	beq.n	800f5ea <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	2b09      	cmp	r3, #9
 800f5e8:	d114      	bne.n	800f614 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d007      	beq.n	800f608 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f5fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800f600:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7ff fd53 	bl	800f0b8 <LL_ADC_REG_StartConversion>
 800f612:	e026      	b.n	800f662 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f618:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a11      	ldr	r2, [pc, #68]	@ (800f66c <HAL_ADC_Start+0x188>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d002      	beq.n	800f630 <HAL_ADC_Start+0x14c>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	e001      	b.n	800f634 <HAL_ADC_Start+0x150>
 800f630:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800f634:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d00f      	beq.n	800f662 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f646:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800f64a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f652:	e006      	b.n	800f662 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800f65c:	e001      	b.n	800f662 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f65e:	2302      	movs	r3, #2
 800f660:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800f662:	7dfb      	ldrb	r3, [r7, #23]
}
 800f664:	4618      	mov	r0, r3
 800f666:	3718      	adds	r7, #24
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	50000100 	.word	0x50000100
 800f670:	50000300 	.word	0x50000300
 800f674:	50000700 	.word	0x50000700

0800f678 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800f686:	2b01      	cmp	r3, #1
 800f688:	d101      	bne.n	800f68e <HAL_ADC_Stop+0x16>
 800f68a:	2302      	movs	r3, #2
 800f68c:	e023      	b.n	800f6d6 <HAL_ADC_Stop+0x5e>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2201      	movs	r2, #1
 800f692:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800f696:	2103      	movs	r1, #3
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 fffd 	bl	8010698 <ADC_ConversionStop>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800f6a2:	7bfb      	ldrb	r3, [r7, #15]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d111      	bne.n	800f6cc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f001 f913 	bl	80108d4 <ADC_Disable>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800f6b2:	7bfb      	ldrb	r3, [r7, #15]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d109      	bne.n	800f6cc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f6bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800f6c0:	f023 0301 	bic.w	r3, r3, #1
 800f6c4:	f043 0201 	orr.w	r2, r3, #1
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800f6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3710      	adds	r7, #16
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
	...

0800f6e0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b088      	sub	sp, #32
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f6f2:	d004      	beq.n	800f6fe <HAL_ADC_PollForConversion+0x1e>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a70      	ldr	r2, [pc, #448]	@ (800f8bc <HAL_ADC_PollForConversion+0x1dc>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d101      	bne.n	800f702 <HAL_ADC_PollForConversion+0x22>
 800f6fe:	4b70      	ldr	r3, [pc, #448]	@ (800f8c0 <HAL_ADC_PollForConversion+0x1e0>)
 800f700:	e000      	b.n	800f704 <HAL_ADC_PollForConversion+0x24>
 800f702:	4b70      	ldr	r3, [pc, #448]	@ (800f8c4 <HAL_ADC_PollForConversion+0x1e4>)
 800f704:	4618      	mov	r0, r3
 800f706:	f7ff fc1f 	bl	800ef48 <LL_ADC_GetMultimode>
 800f70a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	699b      	ldr	r3, [r3, #24]
 800f710:	2b08      	cmp	r3, #8
 800f712:	d102      	bne.n	800f71a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800f714:	2308      	movs	r3, #8
 800f716:	61fb      	str	r3, [r7, #28]
 800f718:	e037      	b.n	800f78a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d005      	beq.n	800f72c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	2b05      	cmp	r3, #5
 800f724:	d002      	beq.n	800f72c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	2b09      	cmp	r3, #9
 800f72a:	d111      	bne.n	800f750 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	68db      	ldr	r3, [r3, #12]
 800f732:	f003 0301 	and.w	r3, r3, #1
 800f736:	2b00      	cmp	r3, #0
 800f738:	d007      	beq.n	800f74a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f73e:	f043 0220 	orr.w	r2, r3, #32
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800f746:	2301      	movs	r3, #1
 800f748:	e0b3      	b.n	800f8b2 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800f74a:	2304      	movs	r3, #4
 800f74c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800f74e:	e01c      	b.n	800f78a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f758:	d004      	beq.n	800f764 <HAL_ADC_PollForConversion+0x84>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	4a57      	ldr	r2, [pc, #348]	@ (800f8bc <HAL_ADC_PollForConversion+0x1dc>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d101      	bne.n	800f768 <HAL_ADC_PollForConversion+0x88>
 800f764:	4b56      	ldr	r3, [pc, #344]	@ (800f8c0 <HAL_ADC_PollForConversion+0x1e0>)
 800f766:	e000      	b.n	800f76a <HAL_ADC_PollForConversion+0x8a>
 800f768:	4b56      	ldr	r3, [pc, #344]	@ (800f8c4 <HAL_ADC_PollForConversion+0x1e4>)
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7ff fbfa 	bl	800ef64 <LL_ADC_GetMultiDMATransfer>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d007      	beq.n	800f786 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f77a:	f043 0220 	orr.w	r2, r3, #32
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800f782:	2301      	movs	r3, #1
 800f784:	e095      	b.n	800f8b2 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800f786:	2304      	movs	r3, #4
 800f788:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f78a:	f7ff fa37 	bl	800ebfc <HAL_GetTick>
 800f78e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800f790:	e021      	b.n	800f7d6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f798:	d01d      	beq.n	800f7d6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800f79a:	f7ff fa2f 	bl	800ebfc <HAL_GetTick>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	1ad3      	subs	r3, r2, r3
 800f7a4:	683a      	ldr	r2, [r7, #0]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d302      	bcc.n	800f7b0 <HAL_ADC_PollForConversion+0xd0>
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d112      	bne.n	800f7d6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	4013      	ands	r3, r2
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d10b      	bne.n	800f7d6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7c2:	f043 0204 	orr.w	r2, r3, #4
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800f7d2:	2303      	movs	r3, #3
 800f7d4:	e06d      	b.n	800f8b2 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	4013      	ands	r3, r2
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d0d6      	beq.n	800f792 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7ff fb01 	bl	800edfc <LL_ADC_REG_IsTriggerSourceSWStart>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d01c      	beq.n	800f83a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	7f5b      	ldrb	r3, [r3, #29]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d118      	bne.n	800f83a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f003 0308 	and.w	r3, r3, #8
 800f812:	2b08      	cmp	r3, #8
 800f814:	d111      	bne.n	800f83a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f81a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f826:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d105      	bne.n	800f83a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f832:	f043 0201 	orr.w	r2, r3, #1
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4a1f      	ldr	r2, [pc, #124]	@ (800f8bc <HAL_ADC_PollForConversion+0x1dc>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d002      	beq.n	800f84a <HAL_ADC_PollForConversion+0x16a>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	e001      	b.n	800f84e <HAL_ADC_PollForConversion+0x16e>
 800f84a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	6812      	ldr	r2, [r2, #0]
 800f852:	4293      	cmp	r3, r2
 800f854:	d008      	beq.n	800f868 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d005      	beq.n	800f868 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	2b05      	cmp	r3, #5
 800f860:	d002      	beq.n	800f868 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	2b09      	cmp	r3, #9
 800f866:	d104      	bne.n	800f872 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	61bb      	str	r3, [r7, #24]
 800f870:	e00d      	b.n	800f88e <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	4a11      	ldr	r2, [pc, #68]	@ (800f8bc <HAL_ADC_PollForConversion+0x1dc>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d002      	beq.n	800f882 <HAL_ADC_PollForConversion+0x1a2>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	e001      	b.n	800f886 <HAL_ADC_PollForConversion+0x1a6>
 800f882:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800f886:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	2b08      	cmp	r3, #8
 800f892:	d104      	bne.n	800f89e <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2208      	movs	r2, #8
 800f89a:	601a      	str	r2, [r3, #0]
 800f89c:	e008      	b.n	800f8b0 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800f89e:	69bb      	ldr	r3, [r7, #24]
 800f8a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d103      	bne.n	800f8b0 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	220c      	movs	r2, #12
 800f8ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800f8b0:	2300      	movs	r3, #0
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3720      	adds	r7, #32
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	50000100 	.word	0x50000100
 800f8c0:	50000300 	.word	0x50000300
 800f8c4:	50000700 	.word	0x50000700

0800f8c8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	d101      	bne.n	800f8de <HAL_ADC_Stop_DMA+0x16>
 800f8da:	2302      	movs	r3, #2
 800f8dc:	e051      	b.n	800f982 <HAL_ADC_Stop_DMA+0xba>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800f8e6:	2103      	movs	r1, #3
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 fed5 	bl	8010698 <ADC_ConversionStop>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800f8f2:	7bfb      	ldrb	r3, [r7, #15]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d13f      	bne.n	800f978 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	68da      	ldr	r2, [r3, #12]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f022 0201 	bic.w	r2, r2, #1
 800f906:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f90c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800f910:	b2db      	uxtb	r3, r3
 800f912:	2b02      	cmp	r3, #2
 800f914:	d10f      	bne.n	800f936 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f91a:	4618      	mov	r0, r3
 800f91c:	f001 fa24 	bl	8010d68 <HAL_DMA_Abort>
 800f920:	4603      	mov	r3, r0
 800f922:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800f924:	7bfb      	ldrb	r3, [r7, #15]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d005      	beq.n	800f936 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f92e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	685a      	ldr	r2, [r3, #4]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f022 0210 	bic.w	r2, r2, #16
 800f944:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800f946:	7bfb      	ldrb	r3, [r7, #15]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d105      	bne.n	800f958 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 ffc1 	bl	80108d4 <ADC_Disable>
 800f952:	4603      	mov	r3, r0
 800f954:	73fb      	strb	r3, [r7, #15]
 800f956:	e002      	b.n	800f95e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 ffbb 	bl	80108d4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800f95e:	7bfb      	ldrb	r3, [r7, #15]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d109      	bne.n	800f978 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f968:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800f96c:	f023 0301 	bic.w	r3, r3, #1
 800f970:	f043 0201 	orr.w	r2, r3, #1
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2200      	movs	r2, #0
 800f97c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800f980:	7bfb      	ldrb	r3, [r7, #15]
}
 800f982:	4618      	mov	r0, r3
 800f984:	3710      	adds	r7, #16
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}

0800f98a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f98a:	b480      	push	{r7}
 800f98c:	b083      	sub	sp, #12
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f998:	4618      	mov	r0, r3
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b08a      	sub	sp, #40	@ 0x28
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f9c8:	d004      	beq.n	800f9d4 <HAL_ADC_IRQHandler+0x30>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	4a87      	ldr	r2, [pc, #540]	@ (800fbec <HAL_ADC_IRQHandler+0x248>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d101      	bne.n	800f9d8 <HAL_ADC_IRQHandler+0x34>
 800f9d4:	4b86      	ldr	r3, [pc, #536]	@ (800fbf0 <HAL_ADC_IRQHandler+0x24c>)
 800f9d6:	e000      	b.n	800f9da <HAL_ADC_IRQHandler+0x36>
 800f9d8:	4b86      	ldr	r3, [pc, #536]	@ (800fbf4 <HAL_ADC_IRQHandler+0x250>)
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7ff fab4 	bl	800ef48 <LL_ADC_GetMultimode>
 800f9e0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800f9e2:	69fb      	ldr	r3, [r7, #28]
 800f9e4:	f003 0302 	and.w	r3, r3, #2
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d017      	beq.n	800fa1c <HAL_ADC_IRQHandler+0x78>
 800f9ec:	69bb      	ldr	r3, [r7, #24]
 800f9ee:	f003 0302 	and.w	r3, r3, #2
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d012      	beq.n	800fa1c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f9fa:	f003 0310 	and.w	r3, r3, #16
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d105      	bne.n	800fa0e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fa06:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 ffe7 	bl	80109e2 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2202      	movs	r2, #2
 800fa1a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	f003 0304 	and.w	r3, r3, #4
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d004      	beq.n	800fa30 <HAL_ADC_IRQHandler+0x8c>
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	f003 0304 	and.w	r3, r3, #4
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d10a      	bne.n	800fa46 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	f000 8085 	beq.w	800fb46 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800fa3c:	69bb      	ldr	r3, [r7, #24]
 800fa3e:	f003 0308 	and.w	r3, r3, #8
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d07f      	beq.n	800fb46 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fa4a:	f003 0310 	and.w	r3, r3, #16
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d105      	bne.n	800fa5e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fa56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7ff f9ca 	bl	800edfc <LL_ADC_REG_IsTriggerSourceSWStart>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d064      	beq.n	800fb38 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	4a5e      	ldr	r2, [pc, #376]	@ (800fbec <HAL_ADC_IRQHandler+0x248>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d002      	beq.n	800fa7e <HAL_ADC_IRQHandler+0xda>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	e001      	b.n	800fa82 <HAL_ADC_IRQHandler+0xde>
 800fa7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	6812      	ldr	r2, [r2, #0]
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d008      	beq.n	800fa9c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d005      	beq.n	800fa9c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	2b05      	cmp	r3, #5
 800fa94:	d002      	beq.n	800fa9c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	2b09      	cmp	r3, #9
 800fa9a:	d104      	bne.n	800faa6 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	623b      	str	r3, [r7, #32]
 800faa4:	e00d      	b.n	800fac2 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4a50      	ldr	r2, [pc, #320]	@ (800fbec <HAL_ADC_IRQHandler+0x248>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d002      	beq.n	800fab6 <HAL_ADC_IRQHandler+0x112>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	e001      	b.n	800faba <HAL_ADC_IRQHandler+0x116>
 800fab6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800faba:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800fac2:	6a3b      	ldr	r3, [r7, #32]
 800fac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d135      	bne.n	800fb38 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f003 0308 	and.w	r3, r3, #8
 800fad6:	2b08      	cmp	r3, #8
 800fad8:	d12e      	bne.n	800fb38 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	4618      	mov	r0, r3
 800fae0:	f7ff fb12 	bl	800f108 <LL_ADC_REG_IsConversionOngoing>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d11a      	bne.n	800fb20 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	685a      	ldr	r2, [r3, #4]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	f022 020c 	bic.w	r2, r2, #12
 800faf8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fafe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d112      	bne.n	800fb38 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb16:	f043 0201 	orr.w	r2, r3, #1
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800fb1e:	e00b      	b.n	800fb38 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb24:	f043 0210 	orr.w	r2, r3, #16
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb30:	f043 0201 	orr.w	r2, r3, #1
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f7f9 f9d5 	bl	8008ee8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	220c      	movs	r2, #12
 800fb44:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	f003 0320 	and.w	r3, r3, #32
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d004      	beq.n	800fb5a <HAL_ADC_IRQHandler+0x1b6>
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	f003 0320 	and.w	r3, r3, #32
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10b      	bne.n	800fb72 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	f000 80a1 	beq.w	800fca8 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	f000 809b 	beq.w	800fca8 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb76:	f003 0310 	and.w	r3, r3, #16
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d105      	bne.n	800fb8a <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb82:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7ff f973 	bl	800ee7a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800fb94:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7ff f92e 	bl	800edfc <LL_ADC_REG_IsTriggerSourceSWStart>
 800fba0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4a11      	ldr	r2, [pc, #68]	@ (800fbec <HAL_ADC_IRQHandler+0x248>)
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	d002      	beq.n	800fbb2 <HAL_ADC_IRQHandler+0x20e>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	e001      	b.n	800fbb6 <HAL_ADC_IRQHandler+0x212>
 800fbb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	6812      	ldr	r2, [r2, #0]
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d008      	beq.n	800fbd0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d005      	beq.n	800fbd0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	2b06      	cmp	r3, #6
 800fbc8:	d002      	beq.n	800fbd0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	2b07      	cmp	r3, #7
 800fbce:	d104      	bne.n	800fbda <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	68db      	ldr	r3, [r3, #12]
 800fbd6:	623b      	str	r3, [r7, #32]
 800fbd8:	e014      	b.n	800fc04 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	4a03      	ldr	r2, [pc, #12]	@ (800fbec <HAL_ADC_IRQHandler+0x248>)
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d009      	beq.n	800fbf8 <HAL_ADC_IRQHandler+0x254>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	e008      	b.n	800fbfc <HAL_ADC_IRQHandler+0x258>
 800fbea:	bf00      	nop
 800fbec:	50000100 	.word	0x50000100
 800fbf0:	50000300 	.word	0x50000300
 800fbf4:	50000700 	.word	0x50000700
 800fbf8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800fbfc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d047      	beq.n	800fc9a <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800fc0a:	6a3b      	ldr	r3, [r7, #32]
 800fc0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d007      	beq.n	800fc24 <HAL_ADC_IRQHandler+0x280>
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d03f      	beq.n	800fc9a <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800fc1a:	6a3b      	ldr	r3, [r7, #32]
 800fc1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d13a      	bne.n	800fc9a <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc2e:	2b40      	cmp	r3, #64	@ 0x40
 800fc30:	d133      	bne.n	800fc9a <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800fc32:	6a3b      	ldr	r3, [r7, #32]
 800fc34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d12e      	bne.n	800fc9a <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7ff fa88 	bl	800f156 <LL_ADC_INJ_IsConversionOngoing>
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d11a      	bne.n	800fc82 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	685a      	ldr	r2, [r3, #4]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800fc5a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d112      	bne.n	800fc9a <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc78:	f043 0201 	orr.w	r2, r3, #1
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800fc80:	e00b      	b.n	800fc9a <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc86:	f043 0210 	orr.w	r2, r3, #16
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fc92:	f043 0201 	orr.w	r2, r3, #1
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 fe79 	bl	8010992 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	2260      	movs	r2, #96	@ 0x60
 800fca6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d011      	beq.n	800fcd6 <HAL_ADC_IRQHandler+0x332>
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00c      	beq.n	800fcd6 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fcc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f000 f8a5 	bl	800fe18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2280      	movs	r2, #128	@ 0x80
 800fcd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d012      	beq.n	800fd06 <HAL_ADC_IRQHandler+0x362>
 800fce0:	69bb      	ldr	r3, [r7, #24]
 800fce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d00d      	beq.n	800fd06 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fcee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 fe5f 	bl	80109ba <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fd04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800fd06:	69fb      	ldr	r3, [r7, #28]
 800fd08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d012      	beq.n	800fd36 <HAL_ADC_IRQHandler+0x392>
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00d      	beq.n	800fd36 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fd1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 fe51 	bl	80109ce <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	f003 0310 	and.w	r3, r3, #16
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d043      	beq.n	800fdc8 <HAL_ADC_IRQHandler+0x424>
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	f003 0310 	and.w	r3, r3, #16
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d03e      	beq.n	800fdc8 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d102      	bne.n	800fd58 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 800fd52:	2301      	movs	r3, #1
 800fd54:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd56:	e021      	b.n	800fd9c <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d015      	beq.n	800fd8a <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fd66:	d004      	beq.n	800fd72 <HAL_ADC_IRQHandler+0x3ce>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	4a27      	ldr	r2, [pc, #156]	@ (800fe0c <HAL_ADC_IRQHandler+0x468>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d101      	bne.n	800fd76 <HAL_ADC_IRQHandler+0x3d2>
 800fd72:	4b27      	ldr	r3, [pc, #156]	@ (800fe10 <HAL_ADC_IRQHandler+0x46c>)
 800fd74:	e000      	b.n	800fd78 <HAL_ADC_IRQHandler+0x3d4>
 800fd76:	4b27      	ldr	r3, [pc, #156]	@ (800fe14 <HAL_ADC_IRQHandler+0x470>)
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7ff f8f3 	bl	800ef64 <LL_ADC_GetMultiDMATransfer>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d00b      	beq.n	800fd9c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 800fd84:	2301      	movs	r3, #1
 800fd86:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd88:	e008      	b.n	800fd9c <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	f003 0301 	and.w	r3, r3, #1
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d001      	beq.n	800fd9c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800fd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d10e      	bne.n	800fdc0 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fda6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fdb2:	f043 0202 	orr.w	r2, r3, #2
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 f836 	bl	800fe2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2210      	movs	r2, #16
 800fdc6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800fdc8:	69fb      	ldr	r3, [r7, #28]
 800fdca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d018      	beq.n	800fe04 <HAL_ADC_IRQHandler+0x460>
 800fdd2:	69bb      	ldr	r3, [r7, #24]
 800fdd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d013      	beq.n	800fe04 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fde0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fdec:	f043 0208 	orr.w	r2, r3, #8
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fdfc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 fdd1 	bl	80109a6 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800fe04:	bf00      	nop
 800fe06:	3728      	adds	r7, #40	@ 0x28
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	50000100 	.word	0x50000100
 800fe10:	50000300 	.word	0x50000300
 800fe14:	50000700 	.word	0x50000700

0800fe18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800fe20:	bf00      	nop
 800fe22:	370c      	adds	r7, #12
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr

0800fe2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b083      	sub	sp, #12
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800fe34:	bf00      	nop
 800fe36:	370c      	adds	r7, #12
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b0b6      	sub	sp, #216	@ 0xd8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800fe50:	2300      	movs	r3, #0
 800fe52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d102      	bne.n	800fe64 <HAL_ADC_ConfigChannel+0x24>
 800fe5e:	2302      	movs	r3, #2
 800fe60:	f000 bc04 	b.w	801066c <HAL_ADC_ConfigChannel+0x82c>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2201      	movs	r2, #1
 800fe68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7ff f949 	bl	800f108 <LL_ADC_REG_IsConversionOngoing>
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f040 83e8 	bne.w	801064e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6818      	ldr	r0, [r3, #0]
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	6859      	ldr	r1, [r3, #4]
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	f7fe ffc9 	bl	800ee22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7ff f937 	bl	800f108 <LL_ADC_REG_IsConversionOngoing>
 800fe9a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7ff f957 	bl	800f156 <LL_ADC_INJ_IsConversionOngoing>
 800fea8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800feac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	f040 81d9 	bne.w	8010268 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800feb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800feba:	2b00      	cmp	r3, #0
 800febc:	f040 81d4 	bne.w	8010268 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	689b      	ldr	r3, [r3, #8]
 800fec4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fec8:	d10f      	bne.n	800feea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6818      	ldr	r0, [r3, #0]
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	2200      	movs	r2, #0
 800fed4:	4619      	mov	r1, r3
 800fed6:	f7fe ffe3 	bl	800eea0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fe ff77 	bl	800edd6 <LL_ADC_SetSamplingTimeCommonConfig>
 800fee8:	e00e      	b.n	800ff08 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6818      	ldr	r0, [r3, #0]
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	6819      	ldr	r1, [r3, #0]
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	689b      	ldr	r3, [r3, #8]
 800fef6:	461a      	mov	r2, r3
 800fef8:	f7fe ffd2 	bl	800eea0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2100      	movs	r1, #0
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fe ff67 	bl	800edd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	695a      	ldr	r2, [r3, #20]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	68db      	ldr	r3, [r3, #12]
 800ff12:	08db      	lsrs	r3, r3, #3
 800ff14:	f003 0303 	and.w	r3, r3, #3
 800ff18:	005b      	lsls	r3, r3, #1
 800ff1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ff1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	691b      	ldr	r3, [r3, #16]
 800ff26:	2b04      	cmp	r3, #4
 800ff28:	d022      	beq.n	800ff70 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6818      	ldr	r0, [r3, #0]
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	6919      	ldr	r1, [r3, #16]
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ff3a:	f7fe fec1 	bl	800ecc0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6818      	ldr	r0, [r3, #0]
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	6919      	ldr	r1, [r3, #16]
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	699b      	ldr	r3, [r3, #24]
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	f7fe ff0d 	bl	800ed6a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6818      	ldr	r0, [r3, #0]
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	6919      	ldr	r1, [r3, #16]
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	7f1b      	ldrb	r3, [r3, #28]
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d102      	bne.n	800ff66 <HAL_ADC_ConfigChannel+0x126>
 800ff60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ff64:	e000      	b.n	800ff68 <HAL_ADC_ConfigChannel+0x128>
 800ff66:	2300      	movs	r3, #0
 800ff68:	461a      	mov	r2, r3
 800ff6a:	f7fe ff19 	bl	800eda0 <LL_ADC_SetOffsetSaturation>
 800ff6e:	e17b      	b.n	8010268 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2100      	movs	r1, #0
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fe fec6 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d10a      	bne.n	800ff9c <HAL_ADC_ConfigChannel+0x15c>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	2100      	movs	r1, #0
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fe febb 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 800ff92:	4603      	mov	r3, r0
 800ff94:	0e9b      	lsrs	r3, r3, #26
 800ff96:	f003 021f 	and.w	r2, r3, #31
 800ff9a:	e01e      	b.n	800ffda <HAL_ADC_ConfigChannel+0x19a>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe feb0 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ffae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ffb2:	fa93 f3a3 	rbit	r3, r3
 800ffb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ffba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ffbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ffc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d101      	bne.n	800ffce <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800ffca:	2320      	movs	r3, #32
 800ffcc:	e004      	b.n	800ffd8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800ffce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ffd2:	fab3 f383 	clz	r3, r3
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d105      	bne.n	800fff2 <HAL_ADC_ConfigChannel+0x1b2>
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	0e9b      	lsrs	r3, r3, #26
 800ffec:	f003 031f 	and.w	r3, r3, #31
 800fff0:	e018      	b.n	8010024 <HAL_ADC_ConfigChannel+0x1e4>
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fffe:	fa93 f3a3 	rbit	r3, r3
 8010002:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8010006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801000a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 801000e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010012:	2b00      	cmp	r3, #0
 8010014:	d101      	bne.n	801001a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8010016:	2320      	movs	r3, #32
 8010018:	e004      	b.n	8010024 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 801001a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801001e:	fab3 f383 	clz	r3, r3
 8010022:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8010024:	429a      	cmp	r2, r3
 8010026:	d106      	bne.n	8010036 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	2200      	movs	r2, #0
 801002e:	2100      	movs	r1, #0
 8010030:	4618      	mov	r0, r3
 8010032:	f7fe fe7f 	bl	800ed34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2101      	movs	r1, #1
 801003c:	4618      	mov	r0, r3
 801003e:	f7fe fe63 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 8010042:	4603      	mov	r3, r0
 8010044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010048:	2b00      	cmp	r3, #0
 801004a:	d10a      	bne.n	8010062 <HAL_ADC_ConfigChannel+0x222>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2101      	movs	r1, #1
 8010052:	4618      	mov	r0, r3
 8010054:	f7fe fe58 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 8010058:	4603      	mov	r3, r0
 801005a:	0e9b      	lsrs	r3, r3, #26
 801005c:	f003 021f 	and.w	r2, r3, #31
 8010060:	e01e      	b.n	80100a0 <HAL_ADC_ConfigChannel+0x260>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2101      	movs	r1, #1
 8010068:	4618      	mov	r0, r3
 801006a:	f7fe fe4d 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 801006e:	4603      	mov	r3, r0
 8010070:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010074:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010078:	fa93 f3a3 	rbit	r3, r3
 801007c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8010080:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010084:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8010088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801008c:	2b00      	cmp	r3, #0
 801008e:	d101      	bne.n	8010094 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8010090:	2320      	movs	r3, #32
 8010092:	e004      	b.n	801009e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8010094:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010098:	fab3 f383 	clz	r3, r3
 801009c:	b2db      	uxtb	r3, r3
 801009e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d105      	bne.n	80100b8 <HAL_ADC_ConfigChannel+0x278>
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	0e9b      	lsrs	r3, r3, #26
 80100b2:	f003 031f 	and.w	r3, r3, #31
 80100b6:	e018      	b.n	80100ea <HAL_ADC_ConfigChannel+0x2aa>
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80100c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80100c4:	fa93 f3a3 	rbit	r3, r3
 80100c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80100cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80100d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80100d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d101      	bne.n	80100e0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80100dc:	2320      	movs	r3, #32
 80100de:	e004      	b.n	80100ea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80100e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80100e4:	fab3 f383 	clz	r3, r3
 80100e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d106      	bne.n	80100fc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	2200      	movs	r2, #0
 80100f4:	2101      	movs	r1, #1
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7fe fe1c 	bl	800ed34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2102      	movs	r1, #2
 8010102:	4618      	mov	r0, r3
 8010104:	f7fe fe00 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 8010108:	4603      	mov	r3, r0
 801010a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801010e:	2b00      	cmp	r3, #0
 8010110:	d10a      	bne.n	8010128 <HAL_ADC_ConfigChannel+0x2e8>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2102      	movs	r1, #2
 8010118:	4618      	mov	r0, r3
 801011a:	f7fe fdf5 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 801011e:	4603      	mov	r3, r0
 8010120:	0e9b      	lsrs	r3, r3, #26
 8010122:	f003 021f 	and.w	r2, r3, #31
 8010126:	e01e      	b.n	8010166 <HAL_ADC_ConfigChannel+0x326>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	2102      	movs	r1, #2
 801012e:	4618      	mov	r0, r3
 8010130:	f7fe fdea 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 8010134:	4603      	mov	r3, r0
 8010136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801013a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801013e:	fa93 f3a3 	rbit	r3, r3
 8010142:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8010146:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801014a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 801014e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010152:	2b00      	cmp	r3, #0
 8010154:	d101      	bne.n	801015a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8010156:	2320      	movs	r3, #32
 8010158:	e004      	b.n	8010164 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 801015a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801015e:	fab3 f383 	clz	r3, r3
 8010162:	b2db      	uxtb	r3, r3
 8010164:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801016e:	2b00      	cmp	r3, #0
 8010170:	d105      	bne.n	801017e <HAL_ADC_ConfigChannel+0x33e>
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	0e9b      	lsrs	r3, r3, #26
 8010178:	f003 031f 	and.w	r3, r3, #31
 801017c:	e016      	b.n	80101ac <HAL_ADC_ConfigChannel+0x36c>
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010186:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801018a:	fa93 f3a3 	rbit	r3, r3
 801018e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8010190:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010192:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8010196:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801019a:	2b00      	cmp	r3, #0
 801019c:	d101      	bne.n	80101a2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801019e:	2320      	movs	r3, #32
 80101a0:	e004      	b.n	80101ac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80101a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80101a6:	fab3 f383 	clz	r3, r3
 80101aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d106      	bne.n	80101be <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2200      	movs	r2, #0
 80101b6:	2102      	movs	r1, #2
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7fe fdbb 	bl	800ed34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	2103      	movs	r1, #3
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7fe fd9f 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 80101ca:	4603      	mov	r3, r0
 80101cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d10a      	bne.n	80101ea <HAL_ADC_ConfigChannel+0x3aa>
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	2103      	movs	r1, #3
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fe fd94 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 80101e0:	4603      	mov	r3, r0
 80101e2:	0e9b      	lsrs	r3, r3, #26
 80101e4:	f003 021f 	and.w	r2, r3, #31
 80101e8:	e017      	b.n	801021a <HAL_ADC_ConfigChannel+0x3da>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	2103      	movs	r1, #3
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7fe fd89 	bl	800ed08 <LL_ADC_GetOffsetChannel>
 80101f6:	4603      	mov	r3, r0
 80101f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80101fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80101fc:	fa93 f3a3 	rbit	r3, r3
 8010200:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8010202:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010204:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8010206:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010208:	2b00      	cmp	r3, #0
 801020a:	d101      	bne.n	8010210 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 801020c:	2320      	movs	r3, #32
 801020e:	e003      	b.n	8010218 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8010210:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010212:	fab3 f383 	clz	r3, r3
 8010216:	b2db      	uxtb	r3, r3
 8010218:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010222:	2b00      	cmp	r3, #0
 8010224:	d105      	bne.n	8010232 <HAL_ADC_ConfigChannel+0x3f2>
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	0e9b      	lsrs	r3, r3, #26
 801022c:	f003 031f 	and.w	r3, r3, #31
 8010230:	e011      	b.n	8010256 <HAL_ADC_ConfigChannel+0x416>
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801023a:	fa93 f3a3 	rbit	r3, r3
 801023e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8010240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010242:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8010244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010246:	2b00      	cmp	r3, #0
 8010248:	d101      	bne.n	801024e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801024a:	2320      	movs	r3, #32
 801024c:	e003      	b.n	8010256 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801024e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010250:	fab3 f383 	clz	r3, r3
 8010254:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8010256:	429a      	cmp	r2, r3
 8010258:	d106      	bne.n	8010268 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	2200      	movs	r2, #0
 8010260:	2103      	movs	r1, #3
 8010262:	4618      	mov	r0, r3
 8010264:	f7fe fd66 	bl	800ed34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4618      	mov	r0, r3
 801026e:	f7fe fefd 	bl	800f06c <LL_ADC_IsEnabled>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	f040 813d 	bne.w	80104f4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6818      	ldr	r0, [r3, #0]
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	6819      	ldr	r1, [r3, #0]
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	461a      	mov	r2, r3
 8010288:	f7fe fe36 	bl	800eef8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	4aa2      	ldr	r2, [pc, #648]	@ (801051c <HAL_ADC_ConfigChannel+0x6dc>)
 8010292:	4293      	cmp	r3, r2
 8010294:	f040 812e 	bne.w	80104f4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d10b      	bne.n	80102c0 <HAL_ADC_ConfigChannel+0x480>
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	0e9b      	lsrs	r3, r3, #26
 80102ae:	3301      	adds	r3, #1
 80102b0:	f003 031f 	and.w	r3, r3, #31
 80102b4:	2b09      	cmp	r3, #9
 80102b6:	bf94      	ite	ls
 80102b8:	2301      	movls	r3, #1
 80102ba:	2300      	movhi	r3, #0
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	e019      	b.n	80102f4 <HAL_ADC_ConfigChannel+0x4b4>
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80102c8:	fa93 f3a3 	rbit	r3, r3
 80102cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80102ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80102d0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80102d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d101      	bne.n	80102dc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80102d8:	2320      	movs	r3, #32
 80102da:	e003      	b.n	80102e4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80102dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102de:	fab3 f383 	clz	r3, r3
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	3301      	adds	r3, #1
 80102e6:	f003 031f 	and.w	r3, r3, #31
 80102ea:	2b09      	cmp	r3, #9
 80102ec:	bf94      	ite	ls
 80102ee:	2301      	movls	r3, #1
 80102f0:	2300      	movhi	r3, #0
 80102f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d079      	beq.n	80103ec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010300:	2b00      	cmp	r3, #0
 8010302:	d107      	bne.n	8010314 <HAL_ADC_ConfigChannel+0x4d4>
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	0e9b      	lsrs	r3, r3, #26
 801030a:	3301      	adds	r3, #1
 801030c:	069b      	lsls	r3, r3, #26
 801030e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8010312:	e015      	b.n	8010340 <HAL_ADC_ConfigChannel+0x500>
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801031a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801031c:	fa93 f3a3 	rbit	r3, r3
 8010320:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8010322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010324:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8010326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010328:	2b00      	cmp	r3, #0
 801032a:	d101      	bne.n	8010330 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801032c:	2320      	movs	r3, #32
 801032e:	e003      	b.n	8010338 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8010330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010332:	fab3 f383 	clz	r3, r3
 8010336:	b2db      	uxtb	r3, r3
 8010338:	3301      	adds	r3, #1
 801033a:	069b      	lsls	r3, r3, #26
 801033c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010348:	2b00      	cmp	r3, #0
 801034a:	d109      	bne.n	8010360 <HAL_ADC_ConfigChannel+0x520>
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	0e9b      	lsrs	r3, r3, #26
 8010352:	3301      	adds	r3, #1
 8010354:	f003 031f 	and.w	r3, r3, #31
 8010358:	2101      	movs	r1, #1
 801035a:	fa01 f303 	lsl.w	r3, r1, r3
 801035e:	e017      	b.n	8010390 <HAL_ADC_ConfigChannel+0x550>
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010368:	fa93 f3a3 	rbit	r3, r3
 801036c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 801036e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010370:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8010372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010374:	2b00      	cmp	r3, #0
 8010376:	d101      	bne.n	801037c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8010378:	2320      	movs	r3, #32
 801037a:	e003      	b.n	8010384 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801037c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801037e:	fab3 f383 	clz	r3, r3
 8010382:	b2db      	uxtb	r3, r3
 8010384:	3301      	adds	r3, #1
 8010386:	f003 031f 	and.w	r3, r3, #31
 801038a:	2101      	movs	r1, #1
 801038c:	fa01 f303 	lsl.w	r3, r1, r3
 8010390:	ea42 0103 	orr.w	r1, r2, r3
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801039c:	2b00      	cmp	r3, #0
 801039e:	d10a      	bne.n	80103b6 <HAL_ADC_ConfigChannel+0x576>
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	0e9b      	lsrs	r3, r3, #26
 80103a6:	3301      	adds	r3, #1
 80103a8:	f003 021f 	and.w	r2, r3, #31
 80103ac:	4613      	mov	r3, r2
 80103ae:	005b      	lsls	r3, r3, #1
 80103b0:	4413      	add	r3, r2
 80103b2:	051b      	lsls	r3, r3, #20
 80103b4:	e018      	b.n	80103e8 <HAL_ADC_ConfigChannel+0x5a8>
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103be:	fa93 f3a3 	rbit	r3, r3
 80103c2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80103c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80103c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d101      	bne.n	80103d2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80103ce:	2320      	movs	r3, #32
 80103d0:	e003      	b.n	80103da <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80103d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103d4:	fab3 f383 	clz	r3, r3
 80103d8:	b2db      	uxtb	r3, r3
 80103da:	3301      	adds	r3, #1
 80103dc:	f003 021f 	and.w	r2, r3, #31
 80103e0:	4613      	mov	r3, r2
 80103e2:	005b      	lsls	r3, r3, #1
 80103e4:	4413      	add	r3, r2
 80103e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80103e8:	430b      	orrs	r3, r1
 80103ea:	e07e      	b.n	80104ea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d107      	bne.n	8010408 <HAL_ADC_ConfigChannel+0x5c8>
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	0e9b      	lsrs	r3, r3, #26
 80103fe:	3301      	adds	r3, #1
 8010400:	069b      	lsls	r3, r3, #26
 8010402:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8010406:	e015      	b.n	8010434 <HAL_ADC_ConfigChannel+0x5f4>
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801040e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010410:	fa93 f3a3 	rbit	r3, r3
 8010414:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8010416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010418:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 801041a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801041c:	2b00      	cmp	r3, #0
 801041e:	d101      	bne.n	8010424 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8010420:	2320      	movs	r3, #32
 8010422:	e003      	b.n	801042c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8010424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010426:	fab3 f383 	clz	r3, r3
 801042a:	b2db      	uxtb	r3, r3
 801042c:	3301      	adds	r3, #1
 801042e:	069b      	lsls	r3, r3, #26
 8010430:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801043c:	2b00      	cmp	r3, #0
 801043e:	d109      	bne.n	8010454 <HAL_ADC_ConfigChannel+0x614>
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	0e9b      	lsrs	r3, r3, #26
 8010446:	3301      	adds	r3, #1
 8010448:	f003 031f 	and.w	r3, r3, #31
 801044c:	2101      	movs	r1, #1
 801044e:	fa01 f303 	lsl.w	r3, r1, r3
 8010452:	e017      	b.n	8010484 <HAL_ADC_ConfigChannel+0x644>
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801045a:	6a3b      	ldr	r3, [r7, #32]
 801045c:	fa93 f3a3 	rbit	r3, r3
 8010460:	61fb      	str	r3, [r7, #28]
  return result;
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8010466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010468:	2b00      	cmp	r3, #0
 801046a:	d101      	bne.n	8010470 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801046c:	2320      	movs	r3, #32
 801046e:	e003      	b.n	8010478 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8010470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010472:	fab3 f383 	clz	r3, r3
 8010476:	b2db      	uxtb	r3, r3
 8010478:	3301      	adds	r3, #1
 801047a:	f003 031f 	and.w	r3, r3, #31
 801047e:	2101      	movs	r1, #1
 8010480:	fa01 f303 	lsl.w	r3, r1, r3
 8010484:	ea42 0103 	orr.w	r1, r2, r3
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010490:	2b00      	cmp	r3, #0
 8010492:	d10d      	bne.n	80104b0 <HAL_ADC_ConfigChannel+0x670>
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	0e9b      	lsrs	r3, r3, #26
 801049a:	3301      	adds	r3, #1
 801049c:	f003 021f 	and.w	r2, r3, #31
 80104a0:	4613      	mov	r3, r2
 80104a2:	005b      	lsls	r3, r3, #1
 80104a4:	4413      	add	r3, r2
 80104a6:	3b1e      	subs	r3, #30
 80104a8:	051b      	lsls	r3, r3, #20
 80104aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80104ae:	e01b      	b.n	80104e8 <HAL_ADC_ConfigChannel+0x6a8>
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	fa93 f3a3 	rbit	r3, r3
 80104bc:	613b      	str	r3, [r7, #16]
  return result;
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80104c2:	69bb      	ldr	r3, [r7, #24]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d101      	bne.n	80104cc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80104c8:	2320      	movs	r3, #32
 80104ca:	e003      	b.n	80104d4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80104cc:	69bb      	ldr	r3, [r7, #24]
 80104ce:	fab3 f383 	clz	r3, r3
 80104d2:	b2db      	uxtb	r3, r3
 80104d4:	3301      	adds	r3, #1
 80104d6:	f003 021f 	and.w	r2, r3, #31
 80104da:	4613      	mov	r3, r2
 80104dc:	005b      	lsls	r3, r3, #1
 80104de:	4413      	add	r3, r2
 80104e0:	3b1e      	subs	r3, #30
 80104e2:	051b      	lsls	r3, r3, #20
 80104e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80104e8:	430b      	orrs	r3, r1
 80104ea:	683a      	ldr	r2, [r7, #0]
 80104ec:	6892      	ldr	r2, [r2, #8]
 80104ee:	4619      	mov	r1, r3
 80104f0:	f7fe fcd6 	bl	800eea0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	4b09      	ldr	r3, [pc, #36]	@ (8010520 <HAL_ADC_ConfigChannel+0x6e0>)
 80104fa:	4013      	ands	r3, r2
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f000 80af 	beq.w	8010660 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801050a:	d004      	beq.n	8010516 <HAL_ADC_ConfigChannel+0x6d6>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4a04      	ldr	r2, [pc, #16]	@ (8010524 <HAL_ADC_ConfigChannel+0x6e4>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d10a      	bne.n	801052c <HAL_ADC_ConfigChannel+0x6ec>
 8010516:	4b04      	ldr	r3, [pc, #16]	@ (8010528 <HAL_ADC_ConfigChannel+0x6e8>)
 8010518:	e009      	b.n	801052e <HAL_ADC_ConfigChannel+0x6ee>
 801051a:	bf00      	nop
 801051c:	407f0000 	.word	0x407f0000
 8010520:	80080000 	.word	0x80080000
 8010524:	50000100 	.word	0x50000100
 8010528:	50000300 	.word	0x50000300
 801052c:	4b51      	ldr	r3, [pc, #324]	@ (8010674 <HAL_ADC_ConfigChannel+0x834>)
 801052e:	4618      	mov	r0, r3
 8010530:	f7fe fbb8 	bl	800eca4 <LL_ADC_GetCommonPathInternalCh>
 8010534:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4a4e      	ldr	r2, [pc, #312]	@ (8010678 <HAL_ADC_ConfigChannel+0x838>)
 801053e:	4293      	cmp	r3, r2
 8010540:	d004      	beq.n	801054c <HAL_ADC_ConfigChannel+0x70c>
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4a4d      	ldr	r2, [pc, #308]	@ (801067c <HAL_ADC_ConfigChannel+0x83c>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d134      	bne.n	80105b6 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801054c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010554:	2b00      	cmp	r3, #0
 8010556:	d12e      	bne.n	80105b6 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010560:	d17e      	bne.n	8010660 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801056a:	d004      	beq.n	8010576 <HAL_ADC_ConfigChannel+0x736>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	4a43      	ldr	r2, [pc, #268]	@ (8010680 <HAL_ADC_ConfigChannel+0x840>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d101      	bne.n	801057a <HAL_ADC_ConfigChannel+0x73a>
 8010576:	4a43      	ldr	r2, [pc, #268]	@ (8010684 <HAL_ADC_ConfigChannel+0x844>)
 8010578:	e000      	b.n	801057c <HAL_ADC_ConfigChannel+0x73c>
 801057a:	4a3e      	ldr	r2, [pc, #248]	@ (8010674 <HAL_ADC_ConfigChannel+0x834>)
 801057c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010580:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010584:	4619      	mov	r1, r3
 8010586:	4610      	mov	r0, r2
 8010588:	f7fe fb79 	bl	800ec7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801058c:	4b3e      	ldr	r3, [pc, #248]	@ (8010688 <HAL_ADC_ConfigChannel+0x848>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	099b      	lsrs	r3, r3, #6
 8010592:	4a3e      	ldr	r2, [pc, #248]	@ (801068c <HAL_ADC_ConfigChannel+0x84c>)
 8010594:	fba2 2303 	umull	r2, r3, r2, r3
 8010598:	099b      	lsrs	r3, r3, #6
 801059a:	1c5a      	adds	r2, r3, #1
 801059c:	4613      	mov	r3, r2
 801059e:	005b      	lsls	r3, r3, #1
 80105a0:	4413      	add	r3, r2
 80105a2:	009b      	lsls	r3, r3, #2
 80105a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80105a6:	e002      	b.n	80105ae <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	3b01      	subs	r3, #1
 80105ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d1f9      	bne.n	80105a8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80105b4:	e054      	b.n	8010660 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	4a35      	ldr	r2, [pc, #212]	@ (8010690 <HAL_ADC_ConfigChannel+0x850>)
 80105bc:	4293      	cmp	r3, r2
 80105be:	d120      	bne.n	8010602 <HAL_ADC_ConfigChannel+0x7c2>
 80105c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80105c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d11a      	bne.n	8010602 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80105d4:	d144      	bne.n	8010660 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80105de:	d004      	beq.n	80105ea <HAL_ADC_ConfigChannel+0x7aa>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4a26      	ldr	r2, [pc, #152]	@ (8010680 <HAL_ADC_ConfigChannel+0x840>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d101      	bne.n	80105ee <HAL_ADC_ConfigChannel+0x7ae>
 80105ea:	4a26      	ldr	r2, [pc, #152]	@ (8010684 <HAL_ADC_ConfigChannel+0x844>)
 80105ec:	e000      	b.n	80105f0 <HAL_ADC_ConfigChannel+0x7b0>
 80105ee:	4a21      	ldr	r2, [pc, #132]	@ (8010674 <HAL_ADC_ConfigChannel+0x834>)
 80105f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80105f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80105f8:	4619      	mov	r1, r3
 80105fa:	4610      	mov	r0, r2
 80105fc:	f7fe fb3f 	bl	800ec7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8010600:	e02e      	b.n	8010660 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4a23      	ldr	r2, [pc, #140]	@ (8010694 <HAL_ADC_ConfigChannel+0x854>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d129      	bne.n	8010660 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801060c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010614:	2b00      	cmp	r3, #0
 8010616:	d123      	bne.n	8010660 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4a18      	ldr	r2, [pc, #96]	@ (8010680 <HAL_ADC_ConfigChannel+0x840>)
 801061e:	4293      	cmp	r3, r2
 8010620:	d01e      	beq.n	8010660 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801062a:	d004      	beq.n	8010636 <HAL_ADC_ConfigChannel+0x7f6>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	4a13      	ldr	r2, [pc, #76]	@ (8010680 <HAL_ADC_ConfigChannel+0x840>)
 8010632:	4293      	cmp	r3, r2
 8010634:	d101      	bne.n	801063a <HAL_ADC_ConfigChannel+0x7fa>
 8010636:	4a13      	ldr	r2, [pc, #76]	@ (8010684 <HAL_ADC_ConfigChannel+0x844>)
 8010638:	e000      	b.n	801063c <HAL_ADC_ConfigChannel+0x7fc>
 801063a:	4a0e      	ldr	r2, [pc, #56]	@ (8010674 <HAL_ADC_ConfigChannel+0x834>)
 801063c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010640:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010644:	4619      	mov	r1, r3
 8010646:	4610      	mov	r0, r2
 8010648:	f7fe fb19 	bl	800ec7e <LL_ADC_SetCommonPathInternalCh>
 801064c:	e008      	b.n	8010660 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010652:	f043 0220 	orr.w	r2, r3, #32
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 801065a:	2301      	movs	r3, #1
 801065c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8010668:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 801066c:	4618      	mov	r0, r3
 801066e:	37d8      	adds	r7, #216	@ 0xd8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	50000700 	.word	0x50000700
 8010678:	c3210000 	.word	0xc3210000
 801067c:	90c00010 	.word	0x90c00010
 8010680:	50000100 	.word	0x50000100
 8010684:	50000300 	.word	0x50000300
 8010688:	20000020 	.word	0x20000020
 801068c:	053e2d63 	.word	0x053e2d63
 8010690:	c7520000 	.word	0xc7520000
 8010694:	cb840000 	.word	0xcb840000

08010698 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b088      	sub	sp, #32
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80106a2:	2300      	movs	r3, #0
 80106a4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7fe fd2a 	bl	800f108 <LL_ADC_REG_IsConversionOngoing>
 80106b4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7fe fd4b 	bl	800f156 <LL_ADC_INJ_IsConversionOngoing>
 80106c0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d103      	bne.n	80106d0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f000 8098 	beq.w	8010800 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	68db      	ldr	r3, [r3, #12]
 80106d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d02a      	beq.n	8010734 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	7f5b      	ldrb	r3, [r3, #29]
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d126      	bne.n	8010734 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	7f1b      	ldrb	r3, [r3, #28]
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	d122      	bne.n	8010734 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80106ee:	2301      	movs	r3, #1
 80106f0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80106f2:	e014      	b.n	801071e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	4a45      	ldr	r2, [pc, #276]	@ (801080c <ADC_ConversionStop+0x174>)
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d90d      	bls.n	8010718 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010700:	f043 0210 	orr.w	r2, r3, #16
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801070c:	f043 0201 	orr.w	r2, r3, #1
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8010714:	2301      	movs	r3, #1
 8010716:	e074      	b.n	8010802 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	3301      	adds	r3, #1
 801071c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010728:	2b40      	cmp	r3, #64	@ 0x40
 801072a:	d1e3      	bne.n	80106f4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2240      	movs	r2, #64	@ 0x40
 8010732:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8010734:	69bb      	ldr	r3, [r7, #24]
 8010736:	2b02      	cmp	r3, #2
 8010738:	d014      	beq.n	8010764 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	4618      	mov	r0, r3
 8010740:	f7fe fce2 	bl	800f108 <LL_ADC_REG_IsConversionOngoing>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00c      	beq.n	8010764 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	4618      	mov	r0, r3
 8010750:	f7fe fc9f 	bl	800f092 <LL_ADC_IsDisableOngoing>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d104      	bne.n	8010764 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	4618      	mov	r0, r3
 8010760:	f7fe fcbe 	bl	800f0e0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8010764:	69bb      	ldr	r3, [r7, #24]
 8010766:	2b01      	cmp	r3, #1
 8010768:	d014      	beq.n	8010794 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	4618      	mov	r0, r3
 8010770:	f7fe fcf1 	bl	800f156 <LL_ADC_INJ_IsConversionOngoing>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d00c      	beq.n	8010794 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	4618      	mov	r0, r3
 8010780:	f7fe fc87 	bl	800f092 <LL_ADC_IsDisableOngoing>
 8010784:	4603      	mov	r3, r0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d104      	bne.n	8010794 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4618      	mov	r0, r3
 8010790:	f7fe fccd 	bl	800f12e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	2b02      	cmp	r3, #2
 8010798:	d005      	beq.n	80107a6 <ADC_ConversionStop+0x10e>
 801079a:	69bb      	ldr	r3, [r7, #24]
 801079c:	2b03      	cmp	r3, #3
 801079e:	d105      	bne.n	80107ac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80107a0:	230c      	movs	r3, #12
 80107a2:	617b      	str	r3, [r7, #20]
        break;
 80107a4:	e005      	b.n	80107b2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80107a6:	2308      	movs	r3, #8
 80107a8:	617b      	str	r3, [r7, #20]
        break;
 80107aa:	e002      	b.n	80107b2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80107ac:	2304      	movs	r3, #4
 80107ae:	617b      	str	r3, [r7, #20]
        break;
 80107b0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80107b2:	f7fe fa23 	bl	800ebfc <HAL_GetTick>
 80107b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80107b8:	e01b      	b.n	80107f2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80107ba:	f7fe fa1f 	bl	800ebfc <HAL_GetTick>
 80107be:	4602      	mov	r2, r0
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	2b05      	cmp	r3, #5
 80107c6:	d914      	bls.n	80107f2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	689a      	ldr	r2, [r3, #8]
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	4013      	ands	r3, r2
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d00d      	beq.n	80107f2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80107da:	f043 0210 	orr.w	r2, r3, #16
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80107e6:	f043 0201 	orr.w	r2, r3, #1
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80107ee:	2301      	movs	r3, #1
 80107f0:	e007      	b.n	8010802 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	689a      	ldr	r2, [r3, #8]
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	4013      	ands	r3, r2
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d1dc      	bne.n	80107ba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8010800:	2300      	movs	r3, #0
}
 8010802:	4618      	mov	r0, r3
 8010804:	3720      	adds	r7, #32
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	a33fffff 	.word	0xa33fffff

08010810 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	4618      	mov	r0, r3
 801081e:	f7fe fc25 	bl	800f06c <LL_ADC_IsEnabled>
 8010822:	4603      	mov	r3, r0
 8010824:	2b00      	cmp	r3, #0
 8010826:	d14d      	bne.n	80108c4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	689a      	ldr	r2, [r3, #8]
 801082e:	4b28      	ldr	r3, [pc, #160]	@ (80108d0 <ADC_Enable+0xc0>)
 8010830:	4013      	ands	r3, r2
 8010832:	2b00      	cmp	r3, #0
 8010834:	d00d      	beq.n	8010852 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801083a:	f043 0210 	orr.w	r2, r3, #16
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010846:	f043 0201 	orr.w	r2, r3, #1
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 801084e:	2301      	movs	r3, #1
 8010850:	e039      	b.n	80108c6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4618      	mov	r0, r3
 8010858:	f7fe fbe0 	bl	800f01c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801085c:	f7fe f9ce 	bl	800ebfc <HAL_GetTick>
 8010860:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8010862:	e028      	b.n	80108b6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4618      	mov	r0, r3
 801086a:	f7fe fbff 	bl	800f06c <LL_ADC_IsEnabled>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d104      	bne.n	801087e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4618      	mov	r0, r3
 801087a:	f7fe fbcf 	bl	800f01c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801087e:	f7fe f9bd 	bl	800ebfc <HAL_GetTick>
 8010882:	4602      	mov	r2, r0
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	1ad3      	subs	r3, r2, r3
 8010888:	2b02      	cmp	r3, #2
 801088a:	d914      	bls.n	80108b6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f003 0301 	and.w	r3, r3, #1
 8010896:	2b01      	cmp	r3, #1
 8010898:	d00d      	beq.n	80108b6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801089e:	f043 0210 	orr.w	r2, r3, #16
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80108aa:	f043 0201 	orr.w	r2, r3, #1
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80108b2:	2301      	movs	r3, #1
 80108b4:	e007      	b.n	80108c6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	f003 0301 	and.w	r3, r3, #1
 80108c0:	2b01      	cmp	r3, #1
 80108c2:	d1cf      	bne.n	8010864 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80108c4:	2300      	movs	r3, #0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	8000003f 	.word	0x8000003f

080108d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fe fbd6 	bl	800f092 <LL_ADC_IsDisableOngoing>
 80108e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7fe fbbd 	bl	800f06c <LL_ADC_IsEnabled>
 80108f2:	4603      	mov	r3, r0
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d047      	beq.n	8010988 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d144      	bne.n	8010988 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	f003 030d 	and.w	r3, r3, #13
 8010908:	2b01      	cmp	r3, #1
 801090a:	d10c      	bne.n	8010926 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4618      	mov	r0, r3
 8010912:	f7fe fb97 	bl	800f044 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2203      	movs	r2, #3
 801091c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801091e:	f7fe f96d 	bl	800ebfc <HAL_GetTick>
 8010922:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8010924:	e029      	b.n	801097a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801092a:	f043 0210 	orr.w	r2, r3, #16
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010936:	f043 0201 	orr.w	r2, r3, #1
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 801093e:	2301      	movs	r3, #1
 8010940:	e023      	b.n	801098a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8010942:	f7fe f95b 	bl	800ebfc <HAL_GetTick>
 8010946:	4602      	mov	r2, r0
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	1ad3      	subs	r3, r2, r3
 801094c:	2b02      	cmp	r3, #2
 801094e:	d914      	bls.n	801097a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	689b      	ldr	r3, [r3, #8]
 8010956:	f003 0301 	and.w	r3, r3, #1
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00d      	beq.n	801097a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010962:	f043 0210 	orr.w	r2, r3, #16
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801096e:	f043 0201 	orr.w	r2, r3, #1
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8010976:	2301      	movs	r3, #1
 8010978:	e007      	b.n	801098a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	689b      	ldr	r3, [r3, #8]
 8010980:	f003 0301 	and.w	r3, r3, #1
 8010984:	2b00      	cmp	r3, #0
 8010986:	d1dc      	bne.n	8010942 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8010988:	2300      	movs	r3, #0
}
 801098a:	4618      	mov	r0, r3
 801098c:	3710      	adds	r7, #16
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}

08010992 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8010992:	b480      	push	{r7}
 8010994:	b083      	sub	sp, #12
 8010996:	af00      	add	r7, sp, #0
 8010998:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801099a:	bf00      	nop
 801099c:	370c      	adds	r7, #12
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr

080109a6 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80109a6:	b480      	push	{r7}
 80109a8:	b083      	sub	sp, #12
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80109ae:	bf00      	nop
 80109b0:	370c      	adds	r7, #12
 80109b2:	46bd      	mov	sp, r7
 80109b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b8:	4770      	bx	lr

080109ba <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80109ba:	b480      	push	{r7}
 80109bc:	b083      	sub	sp, #12
 80109be:	af00      	add	r7, sp, #0
 80109c0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80109c2:	bf00      	nop
 80109c4:	370c      	adds	r7, #12
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr

080109ce <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80109ce:	b480      	push	{r7}
 80109d0:	b083      	sub	sp, #12
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80109d6:	bf00      	nop
 80109d8:	370c      	adds	r7, #12
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr

080109e2 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80109e2:	b480      	push	{r7}
 80109e4:	b083      	sub	sp, #12
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80109ea:	bf00      	nop
 80109ec:	370c      	adds	r7, #12
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr
	...

080109f8 <__NVIC_SetPriorityGrouping>:
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f003 0307 	and.w	r3, r3, #7
 8010a06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010a08:	4b0c      	ldr	r3, [pc, #48]	@ (8010a3c <__NVIC_SetPriorityGrouping+0x44>)
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010a0e:	68ba      	ldr	r2, [r7, #8]
 8010a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010a14:	4013      	ands	r3, r2
 8010a16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8010a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010a2a:	4a04      	ldr	r2, [pc, #16]	@ (8010a3c <__NVIC_SetPriorityGrouping+0x44>)
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	60d3      	str	r3, [r2, #12]
}
 8010a30:	bf00      	nop
 8010a32:	3714      	adds	r7, #20
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr
 8010a3c:	e000ed00 	.word	0xe000ed00

08010a40 <__NVIC_GetPriorityGrouping>:
{
 8010a40:	b480      	push	{r7}
 8010a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010a44:	4b04      	ldr	r3, [pc, #16]	@ (8010a58 <__NVIC_GetPriorityGrouping+0x18>)
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	0a1b      	lsrs	r3, r3, #8
 8010a4a:	f003 0307 	and.w	r3, r3, #7
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr
 8010a58:	e000ed00 	.word	0xe000ed00

08010a5c <__NVIC_EnableIRQ>:
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	4603      	mov	r3, r0
 8010a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	db0b      	blt.n	8010a86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010a6e:	79fb      	ldrb	r3, [r7, #7]
 8010a70:	f003 021f 	and.w	r2, r3, #31
 8010a74:	4907      	ldr	r1, [pc, #28]	@ (8010a94 <__NVIC_EnableIRQ+0x38>)
 8010a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a7a:	095b      	lsrs	r3, r3, #5
 8010a7c:	2001      	movs	r0, #1
 8010a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8010a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010a86:	bf00      	nop
 8010a88:	370c      	adds	r7, #12
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr
 8010a92:	bf00      	nop
 8010a94:	e000e100 	.word	0xe000e100

08010a98 <__NVIC_SetPriority>:
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	6039      	str	r1, [r7, #0]
 8010aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	db0a      	blt.n	8010ac2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	490c      	ldr	r1, [pc, #48]	@ (8010ae4 <__NVIC_SetPriority+0x4c>)
 8010ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ab6:	0112      	lsls	r2, r2, #4
 8010ab8:	b2d2      	uxtb	r2, r2
 8010aba:	440b      	add	r3, r1
 8010abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010ac0:	e00a      	b.n	8010ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	b2da      	uxtb	r2, r3
 8010ac6:	4908      	ldr	r1, [pc, #32]	@ (8010ae8 <__NVIC_SetPriority+0x50>)
 8010ac8:	79fb      	ldrb	r3, [r7, #7]
 8010aca:	f003 030f 	and.w	r3, r3, #15
 8010ace:	3b04      	subs	r3, #4
 8010ad0:	0112      	lsls	r2, r2, #4
 8010ad2:	b2d2      	uxtb	r2, r2
 8010ad4:	440b      	add	r3, r1
 8010ad6:	761a      	strb	r2, [r3, #24]
}
 8010ad8:	bf00      	nop
 8010ada:	370c      	adds	r7, #12
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr
 8010ae4:	e000e100 	.word	0xe000e100
 8010ae8:	e000ed00 	.word	0xe000ed00

08010aec <NVIC_EncodePriority>:
{
 8010aec:	b480      	push	{r7}
 8010aee:	b089      	sub	sp, #36	@ 0x24
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	60f8      	str	r0, [r7, #12]
 8010af4:	60b9      	str	r1, [r7, #8]
 8010af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	f003 0307 	and.w	r3, r3, #7
 8010afe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	f1c3 0307 	rsb	r3, r3, #7
 8010b06:	2b04      	cmp	r3, #4
 8010b08:	bf28      	it	cs
 8010b0a:	2304      	movcs	r3, #4
 8010b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010b0e:	69fb      	ldr	r3, [r7, #28]
 8010b10:	3304      	adds	r3, #4
 8010b12:	2b06      	cmp	r3, #6
 8010b14:	d902      	bls.n	8010b1c <NVIC_EncodePriority+0x30>
 8010b16:	69fb      	ldr	r3, [r7, #28]
 8010b18:	3b03      	subs	r3, #3
 8010b1a:	e000      	b.n	8010b1e <NVIC_EncodePriority+0x32>
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010b20:	f04f 32ff 	mov.w	r2, #4294967295
 8010b24:	69bb      	ldr	r3, [r7, #24]
 8010b26:	fa02 f303 	lsl.w	r3, r2, r3
 8010b2a:	43da      	mvns	r2, r3
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	401a      	ands	r2, r3
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010b34:	f04f 31ff 	mov.w	r1, #4294967295
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8010b3e:	43d9      	mvns	r1, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010b44:	4313      	orrs	r3, r2
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3724      	adds	r7, #36	@ 0x24
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr
	...

08010b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	3b01      	subs	r3, #1
 8010b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010b64:	d301      	bcc.n	8010b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010b66:	2301      	movs	r3, #1
 8010b68:	e00f      	b.n	8010b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8010b94 <SysTick_Config+0x40>)
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	3b01      	subs	r3, #1
 8010b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010b72:	210f      	movs	r1, #15
 8010b74:	f04f 30ff 	mov.w	r0, #4294967295
 8010b78:	f7ff ff8e 	bl	8010a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010b7c:	4b05      	ldr	r3, [pc, #20]	@ (8010b94 <SysTick_Config+0x40>)
 8010b7e:	2200      	movs	r2, #0
 8010b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010b82:	4b04      	ldr	r3, [pc, #16]	@ (8010b94 <SysTick_Config+0x40>)
 8010b84:	2207      	movs	r2, #7
 8010b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010b88:	2300      	movs	r3, #0
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3708      	adds	r7, #8
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	e000e010 	.word	0xe000e010

08010b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7ff ff29 	bl	80109f8 <__NVIC_SetPriorityGrouping>
}
 8010ba6:	bf00      	nop
 8010ba8:	3708      	adds	r7, #8
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}

08010bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b086      	sub	sp, #24
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	60b9      	str	r1, [r7, #8]
 8010bb8:	607a      	str	r2, [r7, #4]
 8010bba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010bbc:	f7ff ff40 	bl	8010a40 <__NVIC_GetPriorityGrouping>
 8010bc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010bc2:	687a      	ldr	r2, [r7, #4]
 8010bc4:	68b9      	ldr	r1, [r7, #8]
 8010bc6:	6978      	ldr	r0, [r7, #20]
 8010bc8:	f7ff ff90 	bl	8010aec <NVIC_EncodePriority>
 8010bcc:	4602      	mov	r2, r0
 8010bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bd2:	4611      	mov	r1, r2
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7ff ff5f 	bl	8010a98 <__NVIC_SetPriority>
}
 8010bda:	bf00      	nop
 8010bdc:	3718      	adds	r7, #24
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}

08010be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010be2:	b580      	push	{r7, lr}
 8010be4:	b082      	sub	sp, #8
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	4603      	mov	r3, r0
 8010bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7ff ff33 	bl	8010a5c <__NVIC_EnableIRQ>
}
 8010bf6:	bf00      	nop
 8010bf8:	3708      	adds	r7, #8
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b082      	sub	sp, #8
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f7ff ffa4 	bl	8010b54 <SysTick_Config>
 8010c0c:	4603      	mov	r3, r0
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3708      	adds	r7, #8
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
	...

08010c18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d101      	bne.n	8010c2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8010c26:	2301      	movs	r3, #1
 8010c28:	e08d      	b.n	8010d46 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	461a      	mov	r2, r3
 8010c30:	4b47      	ldr	r3, [pc, #284]	@ (8010d50 <HAL_DMA_Init+0x138>)
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d80f      	bhi.n	8010c56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	4b45      	ldr	r3, [pc, #276]	@ (8010d54 <HAL_DMA_Init+0x13c>)
 8010c3e:	4413      	add	r3, r2
 8010c40:	4a45      	ldr	r2, [pc, #276]	@ (8010d58 <HAL_DMA_Init+0x140>)
 8010c42:	fba2 2303 	umull	r2, r3, r2, r3
 8010c46:	091b      	lsrs	r3, r3, #4
 8010c48:	009a      	lsls	r2, r3, #2
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	4a42      	ldr	r2, [pc, #264]	@ (8010d5c <HAL_DMA_Init+0x144>)
 8010c52:	641a      	str	r2, [r3, #64]	@ 0x40
 8010c54:	e00e      	b.n	8010c74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	4b40      	ldr	r3, [pc, #256]	@ (8010d60 <HAL_DMA_Init+0x148>)
 8010c5e:	4413      	add	r3, r2
 8010c60:	4a3d      	ldr	r2, [pc, #244]	@ (8010d58 <HAL_DMA_Init+0x140>)
 8010c62:	fba2 2303 	umull	r2, r3, r2, r3
 8010c66:	091b      	lsrs	r3, r3, #4
 8010c68:	009a      	lsls	r2, r3, #2
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	4a3c      	ldr	r2, [pc, #240]	@ (8010d64 <HAL_DMA_Init+0x14c>)
 8010c72:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2202      	movs	r2, #2
 8010c78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8010c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8010c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	691b      	ldr	r3, [r3, #16]
 8010c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	699b      	ldr	r3, [r3, #24]
 8010caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010cb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6a1b      	ldr	r3, [r3, #32]
 8010cb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	4313      	orrs	r3, r2
 8010cbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	68fa      	ldr	r2, [r7, #12]
 8010cc4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f000 f9be 	bl	8011048 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	689b      	ldr	r3, [r3, #8]
 8010cd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010cd4:	d102      	bne.n	8010cdc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	685a      	ldr	r2, [r3, #4]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010ce4:	b2d2      	uxtb	r2, r2
 8010ce6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8010cf0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d010      	beq.n	8010d1c <HAL_DMA_Init+0x104>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	2b04      	cmp	r3, #4
 8010d00:	d80c      	bhi.n	8010d1c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f000 f9de 	bl	80110c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8010d18:	605a      	str	r2, [r3, #4]
 8010d1a:	e008      	b.n	8010d2e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2200      	movs	r2, #0
 8010d26:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2200      	movs	r2, #0
 8010d32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2201      	movs	r2, #1
 8010d38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8010d44:	2300      	movs	r3, #0
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3710      	adds	r7, #16
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	40020407 	.word	0x40020407
 8010d54:	bffdfff8 	.word	0xbffdfff8
 8010d58:	cccccccd 	.word	0xcccccccd
 8010d5c:	40020000 	.word	0x40020000
 8010d60:	bffdfbf8 	.word	0xbffdfbf8
 8010d64:	40020400 	.word	0x40020400

08010d68 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b085      	sub	sp, #20
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d70:	2300      	movs	r3, #0
 8010d72:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	2b02      	cmp	r3, #2
 8010d7e:	d005      	beq.n	8010d8c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2204      	movs	r2, #4
 8010d84:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8010d86:	2301      	movs	r3, #1
 8010d88:	73fb      	strb	r3, [r7, #15]
 8010d8a:	e037      	b.n	8010dfc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	681a      	ldr	r2, [r3, #0]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	f022 020e 	bic.w	r2, r2, #14
 8010d9a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010da6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010daa:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f022 0201 	bic.w	r2, r2, #1
 8010dba:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dc0:	f003 021f 	and.w	r2, r3, #31
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010dc8:	2101      	movs	r1, #1
 8010dca:	fa01 f202 	lsl.w	r2, r1, r2
 8010dce:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8010dd8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d00c      	beq.n	8010dfc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010de6:	681a      	ldr	r2, [r3, #0]
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010dec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010df0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8010dfa:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2201      	movs	r2, #1
 8010e00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8010e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3714      	adds	r7, #20
 8010e12:	46bd      	mov	sp, r7
 8010e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e18:	4770      	bx	lr

08010e1a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b084      	sub	sp, #16
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010e22:	2300      	movs	r3, #0
 8010e24:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8010e2c:	b2db      	uxtb	r3, r3
 8010e2e:	2b02      	cmp	r3, #2
 8010e30:	d00d      	beq.n	8010e4e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2204      	movs	r2, #4
 8010e36:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2200      	movs	r2, #0
 8010e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	73fb      	strb	r3, [r7, #15]
 8010e4c:	e047      	b.n	8010ede <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	681a      	ldr	r2, [r3, #0]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f022 020e 	bic.w	r2, r2, #14
 8010e5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f022 0201 	bic.w	r2, r2, #1
 8010e6c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010e7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e82:	f003 021f 	and.w	r2, r3, #31
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e8a:	2101      	movs	r1, #1
 8010e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8010e90:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8010e9a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d00c      	beq.n	8010ebe <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010eae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010eb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8010ebc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d003      	beq.n	8010ede <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	4798      	blx	r3
    }
  }
  return status;
 8010ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3710      	adds	r7, #16
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f04:	f003 031f 	and.w	r3, r3, #31
 8010f08:	2204      	movs	r2, #4
 8010f0a:	409a      	lsls	r2, r3
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	4013      	ands	r3, r2
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d026      	beq.n	8010f62 <HAL_DMA_IRQHandler+0x7a>
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	f003 0304 	and.w	r3, r3, #4
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d021      	beq.n	8010f62 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f003 0320 	and.w	r3, r3, #32
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d107      	bne.n	8010f3c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f022 0204 	bic.w	r2, r2, #4
 8010f3a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f40:	f003 021f 	and.w	r2, r3, #31
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f48:	2104      	movs	r1, #4
 8010f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8010f4e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d071      	beq.n	801103c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8010f60:	e06c      	b.n	801103c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f66:	f003 031f 	and.w	r3, r3, #31
 8010f6a:	2202      	movs	r2, #2
 8010f6c:	409a      	lsls	r2, r3
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	4013      	ands	r3, r2
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d02e      	beq.n	8010fd4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	f003 0302 	and.w	r3, r3, #2
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d029      	beq.n	8010fd4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f003 0320 	and.w	r3, r3, #32
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d10b      	bne.n	8010fa6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	681a      	ldr	r2, [r3, #0]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	f022 020a 	bic.w	r2, r2, #10
 8010f9c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010faa:	f003 021f 	and.w	r2, r3, #31
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fb2:	2102      	movs	r1, #2
 8010fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8010fb8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d038      	beq.n	801103c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8010fd2:	e033      	b.n	801103c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fd8:	f003 031f 	and.w	r3, r3, #31
 8010fdc:	2208      	movs	r2, #8
 8010fde:	409a      	lsls	r2, r3
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	4013      	ands	r3, r2
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d02a      	beq.n	801103e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	f003 0308 	and.w	r3, r3, #8
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d025      	beq.n	801103e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	681a      	ldr	r2, [r3, #0]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f022 020e 	bic.w	r2, r2, #14
 8011000:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011006:	f003 021f 	and.w	r2, r3, #31
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801100e:	2101      	movs	r1, #1
 8011010:	fa01 f202 	lsl.w	r2, r1, r2
 8011014:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2201      	movs	r2, #1
 801101a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2201      	movs	r2, #1
 8011020:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2200      	movs	r2, #0
 8011028:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011030:	2b00      	cmp	r3, #0
 8011032:	d004      	beq.n	801103e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801103c:	bf00      	nop
 801103e:	bf00      	nop
}
 8011040:	3710      	adds	r7, #16
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}
	...

08011048 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8011048:	b480      	push	{r7}
 801104a:	b087      	sub	sp, #28
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	461a      	mov	r2, r3
 8011056:	4b16      	ldr	r3, [pc, #88]	@ (80110b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8011058:	429a      	cmp	r2, r3
 801105a:	d802      	bhi.n	8011062 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801105c:	4b15      	ldr	r3, [pc, #84]	@ (80110b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801105e:	617b      	str	r3, [r7, #20]
 8011060:	e001      	b.n	8011066 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8011062:	4b15      	ldr	r3, [pc, #84]	@ (80110b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8011064:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	b2db      	uxtb	r3, r3
 8011070:	3b08      	subs	r3, #8
 8011072:	4a12      	ldr	r2, [pc, #72]	@ (80110bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8011074:	fba2 2303 	umull	r2, r3, r2, r3
 8011078:	091b      	lsrs	r3, r3, #4
 801107a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011080:	089b      	lsrs	r3, r3, #2
 8011082:	009a      	lsls	r2, r3, #2
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	4413      	add	r3, r2
 8011088:	461a      	mov	r2, r3
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	4a0b      	ldr	r2, [pc, #44]	@ (80110c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8011092:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	f003 031f 	and.w	r3, r3, #31
 801109a:	2201      	movs	r2, #1
 801109c:	409a      	lsls	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80110a2:	bf00      	nop
 80110a4:	371c      	adds	r7, #28
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr
 80110ae:	bf00      	nop
 80110b0:	40020407 	.word	0x40020407
 80110b4:	40020800 	.word	0x40020800
 80110b8:	40020820 	.word	0x40020820
 80110bc:	cccccccd 	.word	0xcccccccd
 80110c0:	40020880 	.word	0x40020880

080110c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80110c4:	b480      	push	{r7}
 80110c6:	b085      	sub	sp, #20
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	4b0b      	ldr	r3, [pc, #44]	@ (8011104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80110d8:	4413      	add	r3, r2
 80110da:	009b      	lsls	r3, r3, #2
 80110dc:	461a      	mov	r2, r3
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	4a08      	ldr	r2, [pc, #32]	@ (8011108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80110e6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	3b01      	subs	r3, #1
 80110ec:	f003 031f 	and.w	r3, r3, #31
 80110f0:	2201      	movs	r2, #1
 80110f2:	409a      	lsls	r2, r3
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80110f8:	bf00      	nop
 80110fa:	3714      	adds	r7, #20
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr
 8011104:	1000823f 	.word	0x1000823f
 8011108:	40020940 	.word	0x40020940

0801110c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b086      	sub	sp, #24
 8011110:	af00      	add	r7, sp, #0
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801111a:	2300      	movs	r3, #0
 801111c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801111e:	4b24      	ldr	r3, [pc, #144]	@ (80111b0 <HAL_FLASH_Program+0xa4>)
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	2b01      	cmp	r3, #1
 8011124:	d101      	bne.n	801112a <HAL_FLASH_Program+0x1e>
 8011126:	2302      	movs	r3, #2
 8011128:	e03e      	b.n	80111a8 <HAL_FLASH_Program+0x9c>
 801112a:	4b21      	ldr	r3, [pc, #132]	@ (80111b0 <HAL_FLASH_Program+0xa4>)
 801112c:	2201      	movs	r2, #1
 801112e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011130:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011134:	f000 f87c 	bl	8011230 <FLASH_WaitForLastOperation>
 8011138:	4603      	mov	r3, r0
 801113a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801113c:	7dfb      	ldrb	r3, [r7, #23]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d12e      	bne.n	80111a0 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011142:	4b1b      	ldr	r3, [pc, #108]	@ (80111b0 <HAL_FLASH_Program+0xa4>)
 8011144:	2200      	movs	r2, #0
 8011146:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d107      	bne.n	801115e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801114e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011152:	68b8      	ldr	r0, [r7, #8]
 8011154:	f000 f8be 	bl	80112d4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8011158:	2301      	movs	r3, #1
 801115a:	613b      	str	r3, [r7, #16]
 801115c:	e010      	b.n	8011180 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2b01      	cmp	r3, #1
 8011162:	d002      	beq.n	801116a <HAL_FLASH_Program+0x5e>
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	2b02      	cmp	r3, #2
 8011168:	d10a      	bne.n	8011180 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	4619      	mov	r1, r3
 801116e:	68b8      	ldr	r0, [r7, #8]
 8011170:	f000 f8d6 	bl	8011320 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2b02      	cmp	r3, #2
 8011178:	d102      	bne.n	8011180 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801117a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801117e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011180:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011184:	f000 f854 	bl	8011230 <FLASH_WaitForLastOperation>
 8011188:	4603      	mov	r3, r0
 801118a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d006      	beq.n	80111a0 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8011192:	4b08      	ldr	r3, [pc, #32]	@ (80111b4 <HAL_FLASH_Program+0xa8>)
 8011194:	695a      	ldr	r2, [r3, #20]
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	43db      	mvns	r3, r3
 801119a:	4906      	ldr	r1, [pc, #24]	@ (80111b4 <HAL_FLASH_Program+0xa8>)
 801119c:	4013      	ands	r3, r2
 801119e:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80111a0:	4b03      	ldr	r3, [pc, #12]	@ (80111b0 <HAL_FLASH_Program+0xa4>)
 80111a2:	2200      	movs	r2, #0
 80111a4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80111a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3718      	adds	r7, #24
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	2000002c 	.word	0x2000002c
 80111b4:	40022000 	.word	0x40022000

080111b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80111b8:	b480      	push	{r7}
 80111ba:	b083      	sub	sp, #12
 80111bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80111be:	2300      	movs	r3, #0
 80111c0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80111c2:	4b0b      	ldr	r3, [pc, #44]	@ (80111f0 <HAL_FLASH_Unlock+0x38>)
 80111c4:	695b      	ldr	r3, [r3, #20]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	da0b      	bge.n	80111e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80111ca:	4b09      	ldr	r3, [pc, #36]	@ (80111f0 <HAL_FLASH_Unlock+0x38>)
 80111cc:	4a09      	ldr	r2, [pc, #36]	@ (80111f4 <HAL_FLASH_Unlock+0x3c>)
 80111ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80111d0:	4b07      	ldr	r3, [pc, #28]	@ (80111f0 <HAL_FLASH_Unlock+0x38>)
 80111d2:	4a09      	ldr	r2, [pc, #36]	@ (80111f8 <HAL_FLASH_Unlock+0x40>)
 80111d4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80111d6:	4b06      	ldr	r3, [pc, #24]	@ (80111f0 <HAL_FLASH_Unlock+0x38>)
 80111d8:	695b      	ldr	r3, [r3, #20]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	da01      	bge.n	80111e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80111de:	2301      	movs	r3, #1
 80111e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80111e2:	79fb      	ldrb	r3, [r7, #7]
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	370c      	adds	r7, #12
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	4770      	bx	lr
 80111f0:	40022000 	.word	0x40022000
 80111f4:	45670123 	.word	0x45670123
 80111f8:	cdef89ab 	.word	0xcdef89ab

080111fc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8011202:	2301      	movs	r3, #1
 8011204:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011206:	4b09      	ldr	r3, [pc, #36]	@ (801122c <HAL_FLASH_Lock+0x30>)
 8011208:	695b      	ldr	r3, [r3, #20]
 801120a:	4a08      	ldr	r2, [pc, #32]	@ (801122c <HAL_FLASH_Lock+0x30>)
 801120c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011210:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8011212:	4b06      	ldr	r3, [pc, #24]	@ (801122c <HAL_FLASH_Lock+0x30>)
 8011214:	695b      	ldr	r3, [r3, #20]
 8011216:	2b00      	cmp	r3, #0
 8011218:	da01      	bge.n	801121e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801121a:	2300      	movs	r3, #0
 801121c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801121e:	79fb      	ldrb	r3, [r7, #7]
}
 8011220:	4618      	mov	r0, r3
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr
 801122c:	40022000 	.word	0x40022000

08011230 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8011238:	f7fd fce0 	bl	800ebfc <HAL_GetTick>
 801123c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801123e:	e009      	b.n	8011254 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8011240:	f7fd fcdc 	bl	800ebfc <HAL_GetTick>
 8011244:	4602      	mov	r2, r0
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	1ad3      	subs	r3, r2, r3
 801124a:	687a      	ldr	r2, [r7, #4]
 801124c:	429a      	cmp	r2, r3
 801124e:	d201      	bcs.n	8011254 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8011250:	2303      	movs	r3, #3
 8011252:	e037      	b.n	80112c4 <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8011254:	4b1d      	ldr	r3, [pc, #116]	@ (80112cc <FLASH_WaitForLastOperation+0x9c>)
 8011256:	691b      	ldr	r3, [r3, #16]
 8011258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801125c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011260:	d0ee      	beq.n	8011240 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8011262:	4b1a      	ldr	r3, [pc, #104]	@ (80112cc <FLASH_WaitForLastOperation+0x9c>)
 8011264:	691a      	ldr	r2, [r3, #16]
 8011266:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 801126a:	4013      	ands	r3, r2
 801126c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d01d      	beq.n	80112b0 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8011274:	4b16      	ldr	r3, [pc, #88]	@ (80112d0 <FLASH_WaitForLastOperation+0xa0>)
 8011276:	685a      	ldr	r2, [r3, #4]
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	4313      	orrs	r3, r2
 801127c:	4a14      	ldr	r2, [pc, #80]	@ (80112d0 <FLASH_WaitForLastOperation+0xa0>)
 801127e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011286:	d307      	bcc.n	8011298 <FLASH_WaitForLastOperation+0x68>
 8011288:	4b10      	ldr	r3, [pc, #64]	@ (80112cc <FLASH_WaitForLastOperation+0x9c>)
 801128a:	699a      	ldr	r2, [r3, #24]
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8011292:	490e      	ldr	r1, [pc, #56]	@ (80112cc <FLASH_WaitForLastOperation+0x9c>)
 8011294:	4313      	orrs	r3, r2
 8011296:	618b      	str	r3, [r1, #24]
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d004      	beq.n	80112ac <FLASH_WaitForLastOperation+0x7c>
 80112a2:	4a0a      	ldr	r2, [pc, #40]	@ (80112cc <FLASH_WaitForLastOperation+0x9c>)
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80112aa:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80112ac:	2301      	movs	r3, #1
 80112ae:	e009      	b.n	80112c4 <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80112b0:	4b06      	ldr	r3, [pc, #24]	@ (80112cc <FLASH_WaitForLastOperation+0x9c>)
 80112b2:	691b      	ldr	r3, [r3, #16]
 80112b4:	f003 0301 	and.w	r3, r3, #1
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	d102      	bne.n	80112c2 <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80112bc:	4b03      	ldr	r3, [pc, #12]	@ (80112cc <FLASH_WaitForLastOperation+0x9c>)
 80112be:	2201      	movs	r2, #1
 80112c0:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80112c2:	2300      	movs	r3, #0
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3710      	adds	r7, #16
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}
 80112cc:	40022000 	.word	0x40022000
 80112d0:	2000002c 	.word	0x2000002c

080112d4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b085      	sub	sp, #20
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80112e0:	4b0e      	ldr	r3, [pc, #56]	@ (801131c <FLASH_Program_DoubleWord+0x48>)
 80112e2:	695b      	ldr	r3, [r3, #20]
 80112e4:	4a0d      	ldr	r2, [pc, #52]	@ (801131c <FLASH_Program_DoubleWord+0x48>)
 80112e6:	f043 0301 	orr.w	r3, r3, #1
 80112ea:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	683a      	ldr	r2, [r7, #0]
 80112f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80112f2:	f3bf 8f6f 	isb	sy
}
 80112f6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80112f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80112fc:	f04f 0200 	mov.w	r2, #0
 8011300:	f04f 0300 	mov.w	r3, #0
 8011304:	000a      	movs	r2, r1
 8011306:	2300      	movs	r3, #0
 8011308:	68f9      	ldr	r1, [r7, #12]
 801130a:	3104      	adds	r1, #4
 801130c:	4613      	mov	r3, r2
 801130e:	600b      	str	r3, [r1, #0]
}
 8011310:	bf00      	nop
 8011312:	3714      	adds	r7, #20
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr
 801131c:	40022000 	.word	0x40022000

08011320 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8011320:	b480      	push	{r7}
 8011322:	b089      	sub	sp, #36	@ 0x24
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801132a:	2340      	movs	r3, #64	@ 0x40
 801132c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8011336:	4b14      	ldr	r3, [pc, #80]	@ (8011388 <FLASH_Program_Fast+0x68>)
 8011338:	695b      	ldr	r3, [r3, #20]
 801133a:	4a13      	ldr	r2, [pc, #76]	@ (8011388 <FLASH_Program_Fast+0x68>)
 801133c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011340:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011342:	f3ef 8310 	mrs	r3, PRIMASK
 8011346:	60fb      	str	r3, [r7, #12]
  return(result);
 8011348:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801134a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801134c:	b672      	cpsid	i
}
 801134e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8011358:	69bb      	ldr	r3, [r7, #24]
 801135a:	3304      	adds	r3, #4
 801135c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	3304      	adds	r3, #4
 8011362:	617b      	str	r3, [r7, #20]
    row_index--;
 8011364:	7ffb      	ldrb	r3, [r7, #31]
 8011366:	3b01      	subs	r3, #1
 8011368:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801136a:	7ffb      	ldrb	r3, [r7, #31]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d1ef      	bne.n	8011350 <FLASH_Program_Fast+0x30>
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	f383 8810 	msr	PRIMASK, r3
}
 801137a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801137c:	bf00      	nop
 801137e:	3724      	adds	r7, #36	@ 0x24
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr
 8011388:	40022000 	.word	0x40022000

0801138c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011396:	4b48      	ldr	r3, [pc, #288]	@ (80114b8 <HAL_FLASHEx_Erase+0x12c>)
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	2b01      	cmp	r3, #1
 801139c:	d101      	bne.n	80113a2 <HAL_FLASHEx_Erase+0x16>
 801139e:	2302      	movs	r3, #2
 80113a0:	e085      	b.n	80114ae <HAL_FLASHEx_Erase+0x122>
 80113a2:	4b45      	ldr	r3, [pc, #276]	@ (80114b8 <HAL_FLASHEx_Erase+0x12c>)
 80113a4:	2201      	movs	r2, #1
 80113a6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80113a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113ac:	f7ff ff40 	bl	8011230 <FLASH_WaitForLastOperation>
 80113b0:	4603      	mov	r3, r0
 80113b2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80113b4:	7bfb      	ldrb	r3, [r7, #15]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d175      	bne.n	80114a6 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80113ba:	4b3f      	ldr	r3, [pc, #252]	@ (80114b8 <HAL_FLASHEx_Erase+0x12c>)
 80113bc:	2200      	movs	r2, #0
 80113be:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80113c0:	4b3e      	ldr	r3, [pc, #248]	@ (80114bc <HAL_FLASHEx_Erase+0x130>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d013      	beq.n	80113f4 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80113cc:	4b3b      	ldr	r3, [pc, #236]	@ (80114bc <HAL_FLASHEx_Erase+0x130>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d009      	beq.n	80113ec <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80113d8:	4b38      	ldr	r3, [pc, #224]	@ (80114bc <HAL_FLASHEx_Erase+0x130>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4a37      	ldr	r2, [pc, #220]	@ (80114bc <HAL_FLASHEx_Erase+0x130>)
 80113de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80113e2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80113e4:	4b34      	ldr	r3, [pc, #208]	@ (80114b8 <HAL_FLASHEx_Erase+0x12c>)
 80113e6:	2203      	movs	r2, #3
 80113e8:	771a      	strb	r2, [r3, #28]
 80113ea:	e016      	b.n	801141a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80113ec:	4b32      	ldr	r3, [pc, #200]	@ (80114b8 <HAL_FLASHEx_Erase+0x12c>)
 80113ee:	2201      	movs	r2, #1
 80113f0:	771a      	strb	r2, [r3, #28]
 80113f2:	e012      	b.n	801141a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80113f4:	4b31      	ldr	r3, [pc, #196]	@ (80114bc <HAL_FLASHEx_Erase+0x130>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d009      	beq.n	8011414 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8011400:	4b2e      	ldr	r3, [pc, #184]	@ (80114bc <HAL_FLASHEx_Erase+0x130>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	4a2d      	ldr	r2, [pc, #180]	@ (80114bc <HAL_FLASHEx_Erase+0x130>)
 8011406:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801140a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801140c:	4b2a      	ldr	r3, [pc, #168]	@ (80114b8 <HAL_FLASHEx_Erase+0x12c>)
 801140e:	2202      	movs	r2, #2
 8011410:	771a      	strb	r2, [r3, #28]
 8011412:	e002      	b.n	801141a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8011414:	4b28      	ldr	r3, [pc, #160]	@ (80114b8 <HAL_FLASHEx_Erase+0x12c>)
 8011416:	2200      	movs	r2, #0
 8011418:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	2b01      	cmp	r3, #1
 8011420:	d111      	bne.n	8011446 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	4618      	mov	r0, r3
 8011428:	f000 f84a 	bl	80114c0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801142c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011430:	f7ff fefe 	bl	8011230 <FLASH_WaitForLastOperation>
 8011434:	4603      	mov	r3, r0
 8011436:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8011438:	4b20      	ldr	r3, [pc, #128]	@ (80114bc <HAL_FLASHEx_Erase+0x130>)
 801143a:	695b      	ldr	r3, [r3, #20]
 801143c:	4a1f      	ldr	r2, [pc, #124]	@ (80114bc <HAL_FLASHEx_Erase+0x130>)
 801143e:	f023 0304 	bic.w	r3, r3, #4
 8011442:	6153      	str	r3, [r2, #20]
 8011444:	e02d      	b.n	80114a2 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	f04f 32ff 	mov.w	r2, #4294967295
 801144c:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	689b      	ldr	r3, [r3, #8]
 8011452:	60bb      	str	r3, [r7, #8]
 8011454:	e01d      	b.n	8011492 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	4619      	mov	r1, r3
 801145c:	68b8      	ldr	r0, [r7, #8]
 801145e:	f000 f84d 	bl	80114fc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011462:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011466:	f7ff fee3 	bl	8011230 <FLASH_WaitForLastOperation>
 801146a:	4603      	mov	r3, r0
 801146c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801146e:	4b13      	ldr	r3, [pc, #76]	@ (80114bc <HAL_FLASHEx_Erase+0x130>)
 8011470:	695b      	ldr	r3, [r3, #20]
 8011472:	4a12      	ldr	r2, [pc, #72]	@ (80114bc <HAL_FLASHEx_Erase+0x130>)
 8011474:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8011478:	f023 0302 	bic.w	r3, r3, #2
 801147c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801147e:	7bfb      	ldrb	r3, [r7, #15]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d003      	beq.n	801148c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	68ba      	ldr	r2, [r7, #8]
 8011488:	601a      	str	r2, [r3, #0]
          break;
 801148a:	e00a      	b.n	80114a2 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	3301      	adds	r3, #1
 8011490:	60bb      	str	r3, [r7, #8]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	689a      	ldr	r2, [r3, #8]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	68db      	ldr	r3, [r3, #12]
 801149a:	4413      	add	r3, r2
 801149c:	68ba      	ldr	r2, [r7, #8]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d3d9      	bcc.n	8011456 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80114a2:	f000 f84f 	bl	8011544 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80114a6:	4b04      	ldr	r3, [pc, #16]	@ (80114b8 <HAL_FLASHEx_Erase+0x12c>)
 80114a8:	2200      	movs	r2, #0
 80114aa:	701a      	strb	r2, [r3, #0]

  return status;
 80114ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3710      	adds	r7, #16
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	2000002c 	.word	0x2000002c
 80114bc:	40022000 	.word	0x40022000

080114c0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b083      	sub	sp, #12
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f003 0301 	and.w	r3, r3, #1
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d005      	beq.n	80114de <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80114d2:	4b09      	ldr	r3, [pc, #36]	@ (80114f8 <FLASH_MassErase+0x38>)
 80114d4:	695b      	ldr	r3, [r3, #20]
 80114d6:	4a08      	ldr	r2, [pc, #32]	@ (80114f8 <FLASH_MassErase+0x38>)
 80114d8:	f043 0304 	orr.w	r3, r3, #4
 80114dc:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80114de:	4b06      	ldr	r3, [pc, #24]	@ (80114f8 <FLASH_MassErase+0x38>)
 80114e0:	695b      	ldr	r3, [r3, #20]
 80114e2:	4a05      	ldr	r2, [pc, #20]	@ (80114f8 <FLASH_MassErase+0x38>)
 80114e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80114e8:	6153      	str	r3, [r2, #20]
}
 80114ea:	bf00      	nop
 80114ec:	370c      	adds	r7, #12
 80114ee:	46bd      	mov	sp, r7
 80114f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f4:	4770      	bx	lr
 80114f6:	bf00      	nop
 80114f8:	40022000 	.word	0x40022000

080114fc <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80114fc:	b480      	push	{r7}
 80114fe:	b083      	sub	sp, #12
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8011506:	4b0e      	ldr	r3, [pc, #56]	@ (8011540 <FLASH_PageErase+0x44>)
 8011508:	695b      	ldr	r3, [r3, #20]
 801150a:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	00db      	lsls	r3, r3, #3
 8011512:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8011516:	490a      	ldr	r1, [pc, #40]	@ (8011540 <FLASH_PageErase+0x44>)
 8011518:	4313      	orrs	r3, r2
 801151a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801151c:	4b08      	ldr	r3, [pc, #32]	@ (8011540 <FLASH_PageErase+0x44>)
 801151e:	695b      	ldr	r3, [r3, #20]
 8011520:	4a07      	ldr	r2, [pc, #28]	@ (8011540 <FLASH_PageErase+0x44>)
 8011522:	f043 0302 	orr.w	r3, r3, #2
 8011526:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011528:	4b05      	ldr	r3, [pc, #20]	@ (8011540 <FLASH_PageErase+0x44>)
 801152a:	695b      	ldr	r3, [r3, #20]
 801152c:	4a04      	ldr	r2, [pc, #16]	@ (8011540 <FLASH_PageErase+0x44>)
 801152e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011532:	6153      	str	r3, [r2, #20]
}
 8011534:	bf00      	nop
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr
 8011540:	40022000 	.word	0x40022000

08011544 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8011544:	b480      	push	{r7}
 8011546:	b083      	sub	sp, #12
 8011548:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801154a:	4b21      	ldr	r3, [pc, #132]	@ (80115d0 <FLASH_FlushCaches+0x8c>)
 801154c:	7f1b      	ldrb	r3, [r3, #28]
 801154e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8011550:	79fb      	ldrb	r3, [r7, #7]
 8011552:	2b01      	cmp	r3, #1
 8011554:	d002      	beq.n	801155c <FLASH_FlushCaches+0x18>
 8011556:	79fb      	ldrb	r3, [r7, #7]
 8011558:	2b03      	cmp	r3, #3
 801155a:	d117      	bne.n	801158c <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801155c:	4b1d      	ldr	r3, [pc, #116]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	4a1c      	ldr	r2, [pc, #112]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 8011562:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011566:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8011568:	4b1a      	ldr	r3, [pc, #104]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	4a19      	ldr	r2, [pc, #100]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 801156e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8011572:	6013      	str	r3, [r2, #0]
 8011574:	4b17      	ldr	r3, [pc, #92]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4a16      	ldr	r2, [pc, #88]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 801157a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801157e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011580:	4b14      	ldr	r3, [pc, #80]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	4a13      	ldr	r2, [pc, #76]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 8011586:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801158a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801158c:	79fb      	ldrb	r3, [r7, #7]
 801158e:	2b02      	cmp	r3, #2
 8011590:	d002      	beq.n	8011598 <FLASH_FlushCaches+0x54>
 8011592:	79fb      	ldrb	r3, [r7, #7]
 8011594:	2b03      	cmp	r3, #3
 8011596:	d111      	bne.n	80115bc <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8011598:	4b0e      	ldr	r3, [pc, #56]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4a0d      	ldr	r2, [pc, #52]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 801159e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80115a2:	6013      	str	r3, [r2, #0]
 80115a4:	4b0b      	ldr	r3, [pc, #44]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	4a0a      	ldr	r2, [pc, #40]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 80115aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80115b0:	4b08      	ldr	r3, [pc, #32]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	4a07      	ldr	r2, [pc, #28]	@ (80115d4 <FLASH_FlushCaches+0x90>)
 80115b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80115ba:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80115bc:	4b04      	ldr	r3, [pc, #16]	@ (80115d0 <FLASH_FlushCaches+0x8c>)
 80115be:	2200      	movs	r2, #0
 80115c0:	771a      	strb	r2, [r3, #28]
}
 80115c2:	bf00      	nop
 80115c4:	370c      	adds	r7, #12
 80115c6:	46bd      	mov	sp, r7
 80115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115cc:	4770      	bx	lr
 80115ce:	bf00      	nop
 80115d0:	2000002c 	.word	0x2000002c
 80115d4:	40022000 	.word	0x40022000

080115d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80115d8:	b480      	push	{r7}
 80115da:	b087      	sub	sp, #28
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80115e2:	2300      	movs	r3, #0
 80115e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80115e6:	e15a      	b.n	801189e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	681a      	ldr	r2, [r3, #0]
 80115ec:	2101      	movs	r1, #1
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	fa01 f303 	lsl.w	r3, r1, r3
 80115f4:	4013      	ands	r3, r2
 80115f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	f000 814c 	beq.w	8011898 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	685b      	ldr	r3, [r3, #4]
 8011604:	f003 0303 	and.w	r3, r3, #3
 8011608:	2b01      	cmp	r3, #1
 801160a:	d005      	beq.n	8011618 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8011614:	2b02      	cmp	r3, #2
 8011616:	d130      	bne.n	801167a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	689b      	ldr	r3, [r3, #8]
 801161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	005b      	lsls	r3, r3, #1
 8011622:	2203      	movs	r2, #3
 8011624:	fa02 f303 	lsl.w	r3, r2, r3
 8011628:	43db      	mvns	r3, r3
 801162a:	693a      	ldr	r2, [r7, #16]
 801162c:	4013      	ands	r3, r2
 801162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	68da      	ldr	r2, [r3, #12]
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	005b      	lsls	r3, r3, #1
 8011638:	fa02 f303 	lsl.w	r3, r2, r3
 801163c:	693a      	ldr	r2, [r7, #16]
 801163e:	4313      	orrs	r3, r2
 8011640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	693a      	ldr	r2, [r7, #16]
 8011646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801164e:	2201      	movs	r2, #1
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	fa02 f303 	lsl.w	r3, r2, r3
 8011656:	43db      	mvns	r3, r3
 8011658:	693a      	ldr	r2, [r7, #16]
 801165a:	4013      	ands	r3, r2
 801165c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	091b      	lsrs	r3, r3, #4
 8011664:	f003 0201 	and.w	r2, r3, #1
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	fa02 f303 	lsl.w	r3, r2, r3
 801166e:	693a      	ldr	r2, [r7, #16]
 8011670:	4313      	orrs	r3, r2
 8011672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	693a      	ldr	r2, [r7, #16]
 8011678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	f003 0303 	and.w	r3, r3, #3
 8011682:	2b03      	cmp	r3, #3
 8011684:	d017      	beq.n	80116b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	005b      	lsls	r3, r3, #1
 8011690:	2203      	movs	r2, #3
 8011692:	fa02 f303 	lsl.w	r3, r2, r3
 8011696:	43db      	mvns	r3, r3
 8011698:	693a      	ldr	r2, [r7, #16]
 801169a:	4013      	ands	r3, r2
 801169c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	689a      	ldr	r2, [r3, #8]
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	005b      	lsls	r3, r3, #1
 80116a6:	fa02 f303 	lsl.w	r3, r2, r3
 80116aa:	693a      	ldr	r2, [r7, #16]
 80116ac:	4313      	orrs	r3, r2
 80116ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	693a      	ldr	r2, [r7, #16]
 80116b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	f003 0303 	and.w	r3, r3, #3
 80116be:	2b02      	cmp	r3, #2
 80116c0:	d123      	bne.n	801170a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	08da      	lsrs	r2, r3, #3
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	3208      	adds	r2, #8
 80116ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	f003 0307 	and.w	r3, r3, #7
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	220f      	movs	r2, #15
 80116da:	fa02 f303 	lsl.w	r3, r2, r3
 80116de:	43db      	mvns	r3, r3
 80116e0:	693a      	ldr	r2, [r7, #16]
 80116e2:	4013      	ands	r3, r2
 80116e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	691a      	ldr	r2, [r3, #16]
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	f003 0307 	and.w	r3, r3, #7
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	fa02 f303 	lsl.w	r3, r2, r3
 80116f6:	693a      	ldr	r2, [r7, #16]
 80116f8:	4313      	orrs	r3, r2
 80116fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	08da      	lsrs	r2, r3, #3
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	3208      	adds	r2, #8
 8011704:	6939      	ldr	r1, [r7, #16]
 8011706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	005b      	lsls	r3, r3, #1
 8011714:	2203      	movs	r2, #3
 8011716:	fa02 f303 	lsl.w	r3, r2, r3
 801171a:	43db      	mvns	r3, r3
 801171c:	693a      	ldr	r2, [r7, #16]
 801171e:	4013      	ands	r3, r2
 8011720:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	f003 0203 	and.w	r2, r3, #3
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	005b      	lsls	r3, r3, #1
 801172e:	fa02 f303 	lsl.w	r3, r2, r3
 8011732:	693a      	ldr	r2, [r7, #16]
 8011734:	4313      	orrs	r3, r2
 8011736:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	693a      	ldr	r2, [r7, #16]
 801173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011746:	2b00      	cmp	r3, #0
 8011748:	f000 80a6 	beq.w	8011898 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801174c:	4b5b      	ldr	r3, [pc, #364]	@ (80118bc <HAL_GPIO_Init+0x2e4>)
 801174e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011750:	4a5a      	ldr	r2, [pc, #360]	@ (80118bc <HAL_GPIO_Init+0x2e4>)
 8011752:	f043 0301 	orr.w	r3, r3, #1
 8011756:	6613      	str	r3, [r2, #96]	@ 0x60
 8011758:	4b58      	ldr	r3, [pc, #352]	@ (80118bc <HAL_GPIO_Init+0x2e4>)
 801175a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801175c:	f003 0301 	and.w	r3, r3, #1
 8011760:	60bb      	str	r3, [r7, #8]
 8011762:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011764:	4a56      	ldr	r2, [pc, #344]	@ (80118c0 <HAL_GPIO_Init+0x2e8>)
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	089b      	lsrs	r3, r3, #2
 801176a:	3302      	adds	r3, #2
 801176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	f003 0303 	and.w	r3, r3, #3
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	220f      	movs	r2, #15
 801177c:	fa02 f303 	lsl.w	r3, r2, r3
 8011780:	43db      	mvns	r3, r3
 8011782:	693a      	ldr	r2, [r7, #16]
 8011784:	4013      	ands	r3, r2
 8011786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801178e:	d01f      	beq.n	80117d0 <HAL_GPIO_Init+0x1f8>
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	4a4c      	ldr	r2, [pc, #304]	@ (80118c4 <HAL_GPIO_Init+0x2ec>)
 8011794:	4293      	cmp	r3, r2
 8011796:	d019      	beq.n	80117cc <HAL_GPIO_Init+0x1f4>
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	4a4b      	ldr	r2, [pc, #300]	@ (80118c8 <HAL_GPIO_Init+0x2f0>)
 801179c:	4293      	cmp	r3, r2
 801179e:	d013      	beq.n	80117c8 <HAL_GPIO_Init+0x1f0>
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	4a4a      	ldr	r2, [pc, #296]	@ (80118cc <HAL_GPIO_Init+0x2f4>)
 80117a4:	4293      	cmp	r3, r2
 80117a6:	d00d      	beq.n	80117c4 <HAL_GPIO_Init+0x1ec>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	4a49      	ldr	r2, [pc, #292]	@ (80118d0 <HAL_GPIO_Init+0x2f8>)
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d007      	beq.n	80117c0 <HAL_GPIO_Init+0x1e8>
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	4a48      	ldr	r2, [pc, #288]	@ (80118d4 <HAL_GPIO_Init+0x2fc>)
 80117b4:	4293      	cmp	r3, r2
 80117b6:	d101      	bne.n	80117bc <HAL_GPIO_Init+0x1e4>
 80117b8:	2305      	movs	r3, #5
 80117ba:	e00a      	b.n	80117d2 <HAL_GPIO_Init+0x1fa>
 80117bc:	2306      	movs	r3, #6
 80117be:	e008      	b.n	80117d2 <HAL_GPIO_Init+0x1fa>
 80117c0:	2304      	movs	r3, #4
 80117c2:	e006      	b.n	80117d2 <HAL_GPIO_Init+0x1fa>
 80117c4:	2303      	movs	r3, #3
 80117c6:	e004      	b.n	80117d2 <HAL_GPIO_Init+0x1fa>
 80117c8:	2302      	movs	r3, #2
 80117ca:	e002      	b.n	80117d2 <HAL_GPIO_Init+0x1fa>
 80117cc:	2301      	movs	r3, #1
 80117ce:	e000      	b.n	80117d2 <HAL_GPIO_Init+0x1fa>
 80117d0:	2300      	movs	r3, #0
 80117d2:	697a      	ldr	r2, [r7, #20]
 80117d4:	f002 0203 	and.w	r2, r2, #3
 80117d8:	0092      	lsls	r2, r2, #2
 80117da:	4093      	lsls	r3, r2
 80117dc:	693a      	ldr	r2, [r7, #16]
 80117de:	4313      	orrs	r3, r2
 80117e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80117e2:	4937      	ldr	r1, [pc, #220]	@ (80118c0 <HAL_GPIO_Init+0x2e8>)
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	089b      	lsrs	r3, r3, #2
 80117e8:	3302      	adds	r3, #2
 80117ea:	693a      	ldr	r2, [r7, #16]
 80117ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80117f0:	4b39      	ldr	r3, [pc, #228]	@ (80118d8 <HAL_GPIO_Init+0x300>)
 80117f2:	689b      	ldr	r3, [r3, #8]
 80117f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	43db      	mvns	r3, r3
 80117fa:	693a      	ldr	r2, [r7, #16]
 80117fc:	4013      	ands	r3, r2
 80117fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011808:	2b00      	cmp	r3, #0
 801180a:	d003      	beq.n	8011814 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801180c:	693a      	ldr	r2, [r7, #16]
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	4313      	orrs	r3, r2
 8011812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8011814:	4a30      	ldr	r2, [pc, #192]	@ (80118d8 <HAL_GPIO_Init+0x300>)
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801181a:	4b2f      	ldr	r3, [pc, #188]	@ (80118d8 <HAL_GPIO_Init+0x300>)
 801181c:	68db      	ldr	r3, [r3, #12]
 801181e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	43db      	mvns	r3, r3
 8011824:	693a      	ldr	r2, [r7, #16]
 8011826:	4013      	ands	r3, r2
 8011828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011832:	2b00      	cmp	r3, #0
 8011834:	d003      	beq.n	801183e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8011836:	693a      	ldr	r2, [r7, #16]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	4313      	orrs	r3, r2
 801183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801183e:	4a26      	ldr	r2, [pc, #152]	@ (80118d8 <HAL_GPIO_Init+0x300>)
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8011844:	4b24      	ldr	r3, [pc, #144]	@ (80118d8 <HAL_GPIO_Init+0x300>)
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	43db      	mvns	r3, r3
 801184e:	693a      	ldr	r2, [r7, #16]
 8011850:	4013      	ands	r3, r2
 8011852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801185c:	2b00      	cmp	r3, #0
 801185e:	d003      	beq.n	8011868 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8011860:	693a      	ldr	r2, [r7, #16]
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	4313      	orrs	r3, r2
 8011866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8011868:	4a1b      	ldr	r2, [pc, #108]	@ (80118d8 <HAL_GPIO_Init+0x300>)
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801186e:	4b1a      	ldr	r3, [pc, #104]	@ (80118d8 <HAL_GPIO_Init+0x300>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	43db      	mvns	r3, r3
 8011878:	693a      	ldr	r2, [r7, #16]
 801187a:	4013      	ands	r3, r2
 801187c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011886:	2b00      	cmp	r3, #0
 8011888:	d003      	beq.n	8011892 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801188a:	693a      	ldr	r2, [r7, #16]
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	4313      	orrs	r3, r2
 8011890:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8011892:	4a11      	ldr	r2, [pc, #68]	@ (80118d8 <HAL_GPIO_Init+0x300>)
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	3301      	adds	r3, #1
 801189c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	681a      	ldr	r2, [r3, #0]
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	fa22 f303 	lsr.w	r3, r2, r3
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	f47f ae9d 	bne.w	80115e8 <HAL_GPIO_Init+0x10>
  }
}
 80118ae:	bf00      	nop
 80118b0:	bf00      	nop
 80118b2:	371c      	adds	r7, #28
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr
 80118bc:	40021000 	.word	0x40021000
 80118c0:	40010000 	.word	0x40010000
 80118c4:	48000400 	.word	0x48000400
 80118c8:	48000800 	.word	0x48000800
 80118cc:	48000c00 	.word	0x48000c00
 80118d0:	48001000 	.word	0x48001000
 80118d4:	48001400 	.word	0x48001400
 80118d8:	40010400 	.word	0x40010400

080118dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80118dc:	b480      	push	{r7}
 80118de:	b087      	sub	sp, #28
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80118e6:	2300      	movs	r3, #0
 80118e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80118ea:	e0bd      	b.n	8011a68 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80118ec:	2201      	movs	r2, #1
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	fa02 f303 	lsl.w	r3, r2, r3
 80118f4:	683a      	ldr	r2, [r7, #0]
 80118f6:	4013      	ands	r3, r2
 80118f8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	f000 80b0 	beq.w	8011a62 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8011902:	4a60      	ldr	r2, [pc, #384]	@ (8011a84 <HAL_GPIO_DeInit+0x1a8>)
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	089b      	lsrs	r3, r3, #2
 8011908:	3302      	adds	r3, #2
 801190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801190e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	f003 0303 	and.w	r3, r3, #3
 8011916:	009b      	lsls	r3, r3, #2
 8011918:	220f      	movs	r2, #15
 801191a:	fa02 f303 	lsl.w	r3, r2, r3
 801191e:	68fa      	ldr	r2, [r7, #12]
 8011920:	4013      	ands	r3, r2
 8011922:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801192a:	d01f      	beq.n	801196c <HAL_GPIO_DeInit+0x90>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	4a56      	ldr	r2, [pc, #344]	@ (8011a88 <HAL_GPIO_DeInit+0x1ac>)
 8011930:	4293      	cmp	r3, r2
 8011932:	d019      	beq.n	8011968 <HAL_GPIO_DeInit+0x8c>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	4a55      	ldr	r2, [pc, #340]	@ (8011a8c <HAL_GPIO_DeInit+0x1b0>)
 8011938:	4293      	cmp	r3, r2
 801193a:	d013      	beq.n	8011964 <HAL_GPIO_DeInit+0x88>
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	4a54      	ldr	r2, [pc, #336]	@ (8011a90 <HAL_GPIO_DeInit+0x1b4>)
 8011940:	4293      	cmp	r3, r2
 8011942:	d00d      	beq.n	8011960 <HAL_GPIO_DeInit+0x84>
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	4a53      	ldr	r2, [pc, #332]	@ (8011a94 <HAL_GPIO_DeInit+0x1b8>)
 8011948:	4293      	cmp	r3, r2
 801194a:	d007      	beq.n	801195c <HAL_GPIO_DeInit+0x80>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	4a52      	ldr	r2, [pc, #328]	@ (8011a98 <HAL_GPIO_DeInit+0x1bc>)
 8011950:	4293      	cmp	r3, r2
 8011952:	d101      	bne.n	8011958 <HAL_GPIO_DeInit+0x7c>
 8011954:	2305      	movs	r3, #5
 8011956:	e00a      	b.n	801196e <HAL_GPIO_DeInit+0x92>
 8011958:	2306      	movs	r3, #6
 801195a:	e008      	b.n	801196e <HAL_GPIO_DeInit+0x92>
 801195c:	2304      	movs	r3, #4
 801195e:	e006      	b.n	801196e <HAL_GPIO_DeInit+0x92>
 8011960:	2303      	movs	r3, #3
 8011962:	e004      	b.n	801196e <HAL_GPIO_DeInit+0x92>
 8011964:	2302      	movs	r3, #2
 8011966:	e002      	b.n	801196e <HAL_GPIO_DeInit+0x92>
 8011968:	2301      	movs	r3, #1
 801196a:	e000      	b.n	801196e <HAL_GPIO_DeInit+0x92>
 801196c:	2300      	movs	r3, #0
 801196e:	697a      	ldr	r2, [r7, #20]
 8011970:	f002 0203 	and.w	r2, r2, #3
 8011974:	0092      	lsls	r2, r2, #2
 8011976:	4093      	lsls	r3, r2
 8011978:	68fa      	ldr	r2, [r7, #12]
 801197a:	429a      	cmp	r2, r3
 801197c:	d132      	bne.n	80119e4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801197e:	4b47      	ldr	r3, [pc, #284]	@ (8011a9c <HAL_GPIO_DeInit+0x1c0>)
 8011980:	681a      	ldr	r2, [r3, #0]
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	43db      	mvns	r3, r3
 8011986:	4945      	ldr	r1, [pc, #276]	@ (8011a9c <HAL_GPIO_DeInit+0x1c0>)
 8011988:	4013      	ands	r3, r2
 801198a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 801198c:	4b43      	ldr	r3, [pc, #268]	@ (8011a9c <HAL_GPIO_DeInit+0x1c0>)
 801198e:	685a      	ldr	r2, [r3, #4]
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	43db      	mvns	r3, r3
 8011994:	4941      	ldr	r1, [pc, #260]	@ (8011a9c <HAL_GPIO_DeInit+0x1c0>)
 8011996:	4013      	ands	r3, r2
 8011998:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 801199a:	4b40      	ldr	r3, [pc, #256]	@ (8011a9c <HAL_GPIO_DeInit+0x1c0>)
 801199c:	68da      	ldr	r2, [r3, #12]
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	43db      	mvns	r3, r3
 80119a2:	493e      	ldr	r1, [pc, #248]	@ (8011a9c <HAL_GPIO_DeInit+0x1c0>)
 80119a4:	4013      	ands	r3, r2
 80119a6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80119a8:	4b3c      	ldr	r3, [pc, #240]	@ (8011a9c <HAL_GPIO_DeInit+0x1c0>)
 80119aa:	689a      	ldr	r2, [r3, #8]
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	43db      	mvns	r3, r3
 80119b0:	493a      	ldr	r1, [pc, #232]	@ (8011a9c <HAL_GPIO_DeInit+0x1c0>)
 80119b2:	4013      	ands	r3, r2
 80119b4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	f003 0303 	and.w	r3, r3, #3
 80119bc:	009b      	lsls	r3, r3, #2
 80119be:	220f      	movs	r2, #15
 80119c0:	fa02 f303 	lsl.w	r3, r2, r3
 80119c4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80119c6:	4a2f      	ldr	r2, [pc, #188]	@ (8011a84 <HAL_GPIO_DeInit+0x1a8>)
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	089b      	lsrs	r3, r3, #2
 80119cc:	3302      	adds	r3, #2
 80119ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	43da      	mvns	r2, r3
 80119d6:	482b      	ldr	r0, [pc, #172]	@ (8011a84 <HAL_GPIO_DeInit+0x1a8>)
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	089b      	lsrs	r3, r3, #2
 80119dc:	400a      	ands	r2, r1
 80119de:	3302      	adds	r3, #2
 80119e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681a      	ldr	r2, [r3, #0]
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	005b      	lsls	r3, r3, #1
 80119ec:	2103      	movs	r1, #3
 80119ee:	fa01 f303 	lsl.w	r3, r1, r3
 80119f2:	431a      	orrs	r2, r3
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	08da      	lsrs	r2, r3, #3
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	3208      	adds	r2, #8
 8011a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	f003 0307 	and.w	r3, r3, #7
 8011a0a:	009b      	lsls	r3, r3, #2
 8011a0c:	220f      	movs	r2, #15
 8011a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8011a12:	43db      	mvns	r3, r3
 8011a14:	697a      	ldr	r2, [r7, #20]
 8011a16:	08d2      	lsrs	r2, r2, #3
 8011a18:	4019      	ands	r1, r3
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	3208      	adds	r2, #8
 8011a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	68da      	ldr	r2, [r3, #12]
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	005b      	lsls	r3, r3, #1
 8011a2a:	2103      	movs	r1, #3
 8011a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8011a30:	43db      	mvns	r3, r3
 8011a32:	401a      	ands	r2, r3
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	685a      	ldr	r2, [r3, #4]
 8011a3c:	2101      	movs	r1, #1
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	fa01 f303 	lsl.w	r3, r1, r3
 8011a44:	43db      	mvns	r3, r3
 8011a46:	401a      	ands	r2, r3
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	689a      	ldr	r2, [r3, #8]
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	005b      	lsls	r3, r3, #1
 8011a54:	2103      	movs	r1, #3
 8011a56:	fa01 f303 	lsl.w	r3, r1, r3
 8011a5a:	43db      	mvns	r3, r3
 8011a5c:	401a      	ands	r2, r3
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	609a      	str	r2, [r3, #8]
    }

    position++;
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	3301      	adds	r3, #1
 8011a66:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8011a68:	683a      	ldr	r2, [r7, #0]
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	f47f af3b 	bne.w	80118ec <HAL_GPIO_DeInit+0x10>
  }
}
 8011a76:	bf00      	nop
 8011a78:	bf00      	nop
 8011a7a:	371c      	adds	r7, #28
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr
 8011a84:	40010000 	.word	0x40010000
 8011a88:	48000400 	.word	0x48000400
 8011a8c:	48000800 	.word	0x48000800
 8011a90:	48000c00 	.word	0x48000c00
 8011a94:	48001000 	.word	0x48001000
 8011a98:	48001400 	.word	0x48001400
 8011a9c:	40010400 	.word	0x40010400

08011aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	691a      	ldr	r2, [r3, #16]
 8011ab0:	887b      	ldrh	r3, [r7, #2]
 8011ab2:	4013      	ands	r3, r2
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d002      	beq.n	8011abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011ab8:	2301      	movs	r3, #1
 8011aba:	73fb      	strb	r3, [r7, #15]
 8011abc:	e001      	b.n	8011ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3714      	adds	r7, #20
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr

08011ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b083      	sub	sp, #12
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	460b      	mov	r3, r1
 8011ada:	807b      	strh	r3, [r7, #2]
 8011adc:	4613      	mov	r3, r2
 8011ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011ae0:	787b      	ldrb	r3, [r7, #1]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d003      	beq.n	8011aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011ae6:	887a      	ldrh	r2, [r7, #2]
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011aec:	e002      	b.n	8011af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011aee:	887a      	ldrh	r2, [r7, #2]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011af4:	bf00      	nop
 8011af6:	370c      	adds	r7, #12
 8011af8:	46bd      	mov	sp, r7
 8011afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afe:	4770      	bx	lr

08011b00 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011b00:	b480      	push	{r7}
 8011b02:	b085      	sub	sp, #20
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	460b      	mov	r3, r1
 8011b0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	695b      	ldr	r3, [r3, #20]
 8011b10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011b12:	887a      	ldrh	r2, [r7, #2]
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	4013      	ands	r3, r2
 8011b18:	041a      	lsls	r2, r3, #16
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	43d9      	mvns	r1, r3
 8011b1e:	887b      	ldrh	r3, [r7, #2]
 8011b20:	400b      	ands	r3, r1
 8011b22:	431a      	orrs	r2, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	619a      	str	r2, [r3, #24]
}
 8011b28:	bf00      	nop
 8011b2a:	3714      	adds	r7, #20
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr

08011b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d101      	bne.n	8011b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011b42:	2301      	movs	r3, #1
 8011b44:	e081      	b.n	8011c4a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d106      	bne.n	8011b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2200      	movs	r2, #0
 8011b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f7fc fc8a 	bl	800e474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2224      	movs	r2, #36	@ 0x24
 8011b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	681a      	ldr	r2, [r3, #0]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f022 0201 	bic.w	r2, r2, #1
 8011b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	685a      	ldr	r2, [r3, #4]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8011b84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	689a      	ldr	r2, [r3, #8]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011b94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d107      	bne.n	8011bae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	689a      	ldr	r2, [r3, #8]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011baa:	609a      	str	r2, [r3, #8]
 8011bac:	e006      	b.n	8011bbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	689a      	ldr	r2, [r3, #8]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8011bba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	2b02      	cmp	r3, #2
 8011bc2:	d104      	bne.n	8011bce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011bcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	6812      	ldr	r2, [r2, #0]
 8011bd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8011bdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011be0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	68da      	ldr	r2, [r3, #12]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011bf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	691a      	ldr	r2, [r3, #16]
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	695b      	ldr	r3, [r3, #20]
 8011bfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	699b      	ldr	r3, [r3, #24]
 8011c02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	430a      	orrs	r2, r1
 8011c0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	69d9      	ldr	r1, [r3, #28]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6a1a      	ldr	r2, [r3, #32]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	430a      	orrs	r2, r1
 8011c1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	681a      	ldr	r2, [r3, #0]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	f042 0201 	orr.w	r2, r2, #1
 8011c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2220      	movs	r2, #32
 8011c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2200      	movs	r2, #0
 8011c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8011c48:	2300      	movs	r3, #0
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3708      	adds	r7, #8
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}

08011c52 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8011c52:	b580      	push	{r7, lr}
 8011c54:	b082      	sub	sp, #8
 8011c56:	af00      	add	r7, sp, #0
 8011c58:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d101      	bne.n	8011c64 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8011c60:	2301      	movs	r3, #1
 8011c62:	e021      	b.n	8011ca8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2224      	movs	r2, #36	@ 0x24
 8011c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f022 0201 	bic.w	r2, r2, #1
 8011c7a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f7fc fd03 	bl	800e688 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2200      	movs	r2, #0
 8011c86:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2200      	movs	r2, #0
 8011c94:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011ca6:	2300      	movs	r3, #0
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3708      	adds	r7, #8
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b088      	sub	sp, #32
 8011cb4:	af02      	add	r7, sp, #8
 8011cb6:	60f8      	str	r0, [r7, #12]
 8011cb8:	607a      	str	r2, [r7, #4]
 8011cba:	461a      	mov	r2, r3
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	817b      	strh	r3, [r7, #10]
 8011cc0:	4613      	mov	r3, r2
 8011cc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	2b20      	cmp	r3, #32
 8011cce:	f040 80da 	bne.w	8011e86 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	d101      	bne.n	8011ce0 <HAL_I2C_Master_Transmit+0x30>
 8011cdc:	2302      	movs	r3, #2
 8011cde:	e0d3      	b.n	8011e88 <HAL_I2C_Master_Transmit+0x1d8>
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2201      	movs	r2, #1
 8011ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011ce8:	f7fc ff88 	bl	800ebfc <HAL_GetTick>
 8011cec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	9300      	str	r3, [sp, #0]
 8011cf2:	2319      	movs	r3, #25
 8011cf4:	2201      	movs	r2, #1
 8011cf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011cfa:	68f8      	ldr	r0, [r7, #12]
 8011cfc:	f000 fa00 	bl	8012100 <I2C_WaitOnFlagUntilTimeout>
 8011d00:	4603      	mov	r3, r0
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d001      	beq.n	8011d0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8011d06:	2301      	movs	r3, #1
 8011d08:	e0be      	b.n	8011e88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2221      	movs	r2, #33	@ 0x21
 8011d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2210      	movs	r2, #16
 8011d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	687a      	ldr	r2, [r7, #4]
 8011d24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	893a      	ldrh	r2, [r7, #8]
 8011d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	2bff      	cmp	r3, #255	@ 0xff
 8011d3a:	d90e      	bls.n	8011d5a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	22ff      	movs	r2, #255	@ 0xff
 8011d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	8979      	ldrh	r1, [r7, #10]
 8011d4a:	4b51      	ldr	r3, [pc, #324]	@ (8011e90 <HAL_I2C_Master_Transmit+0x1e0>)
 8011d4c:	9300      	str	r3, [sp, #0]
 8011d4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011d52:	68f8      	ldr	r0, [r7, #12]
 8011d54:	f000 fbf6 	bl	8012544 <I2C_TransferConfig>
 8011d58:	e06c      	b.n	8011e34 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d5e:	b29a      	uxth	r2, r3
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d68:	b2da      	uxtb	r2, r3
 8011d6a:	8979      	ldrh	r1, [r7, #10]
 8011d6c:	4b48      	ldr	r3, [pc, #288]	@ (8011e90 <HAL_I2C_Master_Transmit+0x1e0>)
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011d74:	68f8      	ldr	r0, [r7, #12]
 8011d76:	f000 fbe5 	bl	8012544 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8011d7a:	e05b      	b.n	8011e34 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011d7c:	697a      	ldr	r2, [r7, #20]
 8011d7e:	6a39      	ldr	r1, [r7, #32]
 8011d80:	68f8      	ldr	r0, [r7, #12]
 8011d82:	f000 f9fd 	bl	8012180 <I2C_WaitOnTXISFlagUntilTimeout>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d001      	beq.n	8011d90 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	e07b      	b.n	8011e88 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d94:	781a      	ldrb	r2, [r3, #0]
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011da0:	1c5a      	adds	r2, r3, #1
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	3b01      	subs	r3, #1
 8011dae:	b29a      	uxth	r2, r3
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011db8:	3b01      	subs	r3, #1
 8011dba:	b29a      	uxth	r2, r3
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d034      	beq.n	8011e34 <HAL_I2C_Master_Transmit+0x184>
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d130      	bne.n	8011e34 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	6a3b      	ldr	r3, [r7, #32]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	2180      	movs	r1, #128	@ 0x80
 8011ddc:	68f8      	ldr	r0, [r7, #12]
 8011dde:	f000 f98f 	bl	8012100 <I2C_WaitOnFlagUntilTimeout>
 8011de2:	4603      	mov	r3, r0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d001      	beq.n	8011dec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8011de8:	2301      	movs	r3, #1
 8011dea:	e04d      	b.n	8011e88 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	2bff      	cmp	r3, #255	@ 0xff
 8011df4:	d90e      	bls.n	8011e14 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	22ff      	movs	r2, #255	@ 0xff
 8011dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e00:	b2da      	uxtb	r2, r3
 8011e02:	8979      	ldrh	r1, [r7, #10]
 8011e04:	2300      	movs	r3, #0
 8011e06:	9300      	str	r3, [sp, #0]
 8011e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011e0c:	68f8      	ldr	r0, [r7, #12]
 8011e0e:	f000 fb99 	bl	8012544 <I2C_TransferConfig>
 8011e12:	e00f      	b.n	8011e34 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e22:	b2da      	uxtb	r2, r3
 8011e24:	8979      	ldrh	r1, [r7, #10]
 8011e26:	2300      	movs	r3, #0
 8011e28:	9300      	str	r3, [sp, #0]
 8011e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	f000 fb88 	bl	8012544 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d19e      	bne.n	8011d7c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011e3e:	697a      	ldr	r2, [r7, #20]
 8011e40:	6a39      	ldr	r1, [r7, #32]
 8011e42:	68f8      	ldr	r0, [r7, #12]
 8011e44:	f000 f9dc 	bl	8012200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d001      	beq.n	8011e52 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8011e4e:	2301      	movs	r3, #1
 8011e50:	e01a      	b.n	8011e88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	2220      	movs	r2, #32
 8011e58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	6859      	ldr	r1, [r3, #4]
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	4b0b      	ldr	r3, [pc, #44]	@ (8011e94 <HAL_I2C_Master_Transmit+0x1e4>)
 8011e66:	400b      	ands	r3, r1
 8011e68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	2220      	movs	r2, #32
 8011e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	2200      	movs	r2, #0
 8011e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011e82:	2300      	movs	r3, #0
 8011e84:	e000      	b.n	8011e88 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8011e86:	2302      	movs	r3, #2
  }
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3718      	adds	r7, #24
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	80002000 	.word	0x80002000
 8011e94:	fe00e800 	.word	0xfe00e800

08011e98 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b088      	sub	sp, #32
 8011e9c:	af02      	add	r7, sp, #8
 8011e9e:	60f8      	str	r0, [r7, #12]
 8011ea0:	607a      	str	r2, [r7, #4]
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	817b      	strh	r3, [r7, #10]
 8011ea8:	4613      	mov	r3, r2
 8011eaa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	2b20      	cmp	r3, #32
 8011eb6:	f040 80db 	bne.w	8012070 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	d101      	bne.n	8011ec8 <HAL_I2C_Master_Receive+0x30>
 8011ec4:	2302      	movs	r3, #2
 8011ec6:	e0d4      	b.n	8012072 <HAL_I2C_Master_Receive+0x1da>
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2201      	movs	r2, #1
 8011ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011ed0:	f7fc fe94 	bl	800ebfc <HAL_GetTick>
 8011ed4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	9300      	str	r3, [sp, #0]
 8011eda:	2319      	movs	r3, #25
 8011edc:	2201      	movs	r2, #1
 8011ede:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	f000 f90c 	bl	8012100 <I2C_WaitOnFlagUntilTimeout>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d001      	beq.n	8011ef2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e0bf      	b.n	8012072 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	2222      	movs	r2, #34	@ 0x22
 8011ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	2210      	movs	r2, #16
 8011efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2200      	movs	r2, #0
 8011f06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	893a      	ldrh	r2, [r7, #8]
 8011f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	2200      	movs	r2, #0
 8011f18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	2bff      	cmp	r3, #255	@ 0xff
 8011f22:	d90e      	bls.n	8011f42 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	22ff      	movs	r2, #255	@ 0xff
 8011f28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f2e:	b2da      	uxtb	r2, r3
 8011f30:	8979      	ldrh	r1, [r7, #10]
 8011f32:	4b52      	ldr	r3, [pc, #328]	@ (801207c <HAL_I2C_Master_Receive+0x1e4>)
 8011f34:	9300      	str	r3, [sp, #0]
 8011f36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f000 fb02 	bl	8012544 <I2C_TransferConfig>
 8011f40:	e06d      	b.n	801201e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f46:	b29a      	uxth	r2, r3
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f50:	b2da      	uxtb	r2, r3
 8011f52:	8979      	ldrh	r1, [r7, #10]
 8011f54:	4b49      	ldr	r3, [pc, #292]	@ (801207c <HAL_I2C_Master_Receive+0x1e4>)
 8011f56:	9300      	str	r3, [sp, #0]
 8011f58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011f5c:	68f8      	ldr	r0, [r7, #12]
 8011f5e:	f000 faf1 	bl	8012544 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8011f62:	e05c      	b.n	801201e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011f64:	697a      	ldr	r2, [r7, #20]
 8011f66:	6a39      	ldr	r1, [r7, #32]
 8011f68:	68f8      	ldr	r0, [r7, #12]
 8011f6a:	f000 f985 	bl	8012278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d001      	beq.n	8011f78 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8011f74:	2301      	movs	r3, #1
 8011f76:	e07c      	b.n	8012072 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f82:	b2d2      	uxtb	r2, r2
 8011f84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f8a:	1c5a      	adds	r2, r3, #1
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f94:	3b01      	subs	r3, #1
 8011f96:	b29a      	uxth	r2, r3
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	3b01      	subs	r3, #1
 8011fa4:	b29a      	uxth	r2, r3
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011fae:	b29b      	uxth	r3, r3
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d034      	beq.n	801201e <HAL_I2C_Master_Receive+0x186>
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d130      	bne.n	801201e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	9300      	str	r3, [sp, #0]
 8011fc0:	6a3b      	ldr	r3, [r7, #32]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	2180      	movs	r1, #128	@ 0x80
 8011fc6:	68f8      	ldr	r0, [r7, #12]
 8011fc8:	f000 f89a 	bl	8012100 <I2C_WaitOnFlagUntilTimeout>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d001      	beq.n	8011fd6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	e04d      	b.n	8012072 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	2bff      	cmp	r3, #255	@ 0xff
 8011fde:	d90e      	bls.n	8011ffe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	22ff      	movs	r2, #255	@ 0xff
 8011fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011fea:	b2da      	uxtb	r2, r3
 8011fec:	8979      	ldrh	r1, [r7, #10]
 8011fee:	2300      	movs	r3, #0
 8011ff0:	9300      	str	r3, [sp, #0]
 8011ff2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011ff6:	68f8      	ldr	r0, [r7, #12]
 8011ff8:	f000 faa4 	bl	8012544 <I2C_TransferConfig>
 8011ffc:	e00f      	b.n	801201e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012002:	b29a      	uxth	r2, r3
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801200c:	b2da      	uxtb	r2, r3
 801200e:	8979      	ldrh	r1, [r7, #10]
 8012010:	2300      	movs	r3, #0
 8012012:	9300      	str	r3, [sp, #0]
 8012014:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012018:	68f8      	ldr	r0, [r7, #12]
 801201a:	f000 fa93 	bl	8012544 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012022:	b29b      	uxth	r3, r3
 8012024:	2b00      	cmp	r3, #0
 8012026:	d19d      	bne.n	8011f64 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012028:	697a      	ldr	r2, [r7, #20]
 801202a:	6a39      	ldr	r1, [r7, #32]
 801202c:	68f8      	ldr	r0, [r7, #12]
 801202e:	f000 f8e7 	bl	8012200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012032:	4603      	mov	r3, r0
 8012034:	2b00      	cmp	r3, #0
 8012036:	d001      	beq.n	801203c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8012038:	2301      	movs	r3, #1
 801203a:	e01a      	b.n	8012072 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	2220      	movs	r2, #32
 8012042:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	6859      	ldr	r1, [r3, #4]
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	4b0c      	ldr	r3, [pc, #48]	@ (8012080 <HAL_I2C_Master_Receive+0x1e8>)
 8012050:	400b      	ands	r3, r1
 8012052:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	2220      	movs	r2, #32
 8012058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	2200      	movs	r2, #0
 8012060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	2200      	movs	r2, #0
 8012068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801206c:	2300      	movs	r3, #0
 801206e:	e000      	b.n	8012072 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8012070:	2302      	movs	r3, #2
  }
}
 8012072:	4618      	mov	r0, r3
 8012074:	3718      	adds	r7, #24
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	80002400 	.word	0x80002400
 8012080:	fe00e800 	.word	0xfe00e800

08012084 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8012084:	b480      	push	{r7}
 8012086:	b083      	sub	sp, #12
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012092:	b2db      	uxtb	r3, r3
}
 8012094:	4618      	mov	r0, r3
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr

080120a0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80120a0:	b480      	push	{r7}
 80120a2:	b083      	sub	sp, #12
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	370c      	adds	r7, #12
 80120b0:	46bd      	mov	sp, r7
 80120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b6:	4770      	bx	lr

080120b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80120b8:	b480      	push	{r7}
 80120ba:	b083      	sub	sp, #12
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	699b      	ldr	r3, [r3, #24]
 80120c6:	f003 0302 	and.w	r3, r3, #2
 80120ca:	2b02      	cmp	r3, #2
 80120cc:	d103      	bne.n	80120d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	2200      	movs	r2, #0
 80120d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	699b      	ldr	r3, [r3, #24]
 80120dc:	f003 0301 	and.w	r3, r3, #1
 80120e0:	2b01      	cmp	r3, #1
 80120e2:	d007      	beq.n	80120f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	699a      	ldr	r2, [r3, #24]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	f042 0201 	orr.w	r2, r2, #1
 80120f2:	619a      	str	r2, [r3, #24]
  }
}
 80120f4:	bf00      	nop
 80120f6:	370c      	adds	r7, #12
 80120f8:	46bd      	mov	sp, r7
 80120fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fe:	4770      	bx	lr

08012100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b084      	sub	sp, #16
 8012104:	af00      	add	r7, sp, #0
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	60b9      	str	r1, [r7, #8]
 801210a:	603b      	str	r3, [r7, #0]
 801210c:	4613      	mov	r3, r2
 801210e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012110:	e022      	b.n	8012158 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012118:	d01e      	beq.n	8012158 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801211a:	f7fc fd6f 	bl	800ebfc <HAL_GetTick>
 801211e:	4602      	mov	r2, r0
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	1ad3      	subs	r3, r2, r3
 8012124:	683a      	ldr	r2, [r7, #0]
 8012126:	429a      	cmp	r2, r3
 8012128:	d302      	bcc.n	8012130 <I2C_WaitOnFlagUntilTimeout+0x30>
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d113      	bne.n	8012158 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012134:	f043 0220 	orr.w	r2, r3, #32
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	2220      	movs	r2, #32
 8012140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	2200      	movs	r2, #0
 8012148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	2200      	movs	r2, #0
 8012150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8012154:	2301      	movs	r3, #1
 8012156:	e00f      	b.n	8012178 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	699a      	ldr	r2, [r3, #24]
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	4013      	ands	r3, r2
 8012162:	68ba      	ldr	r2, [r7, #8]
 8012164:	429a      	cmp	r2, r3
 8012166:	bf0c      	ite	eq
 8012168:	2301      	moveq	r3, #1
 801216a:	2300      	movne	r3, #0
 801216c:	b2db      	uxtb	r3, r3
 801216e:	461a      	mov	r2, r3
 8012170:	79fb      	ldrb	r3, [r7, #7]
 8012172:	429a      	cmp	r2, r3
 8012174:	d0cd      	beq.n	8012112 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012176:	2300      	movs	r3, #0
}
 8012178:	4618      	mov	r0, r3
 801217a:	3710      	adds	r7, #16
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	60b9      	str	r1, [r7, #8]
 801218a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801218c:	e02c      	b.n	80121e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801218e:	687a      	ldr	r2, [r7, #4]
 8012190:	68b9      	ldr	r1, [r7, #8]
 8012192:	68f8      	ldr	r0, [r7, #12]
 8012194:	f000 f8ea 	bl	801236c <I2C_IsErrorOccurred>
 8012198:	4603      	mov	r3, r0
 801219a:	2b00      	cmp	r3, #0
 801219c:	d001      	beq.n	80121a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801219e:	2301      	movs	r3, #1
 80121a0:	e02a      	b.n	80121f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121a8:	d01e      	beq.n	80121e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80121aa:	f7fc fd27 	bl	800ebfc <HAL_GetTick>
 80121ae:	4602      	mov	r2, r0
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	1ad3      	subs	r3, r2, r3
 80121b4:	68ba      	ldr	r2, [r7, #8]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d302      	bcc.n	80121c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d113      	bne.n	80121e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80121c4:	f043 0220 	orr.w	r2, r3, #32
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2220      	movs	r2, #32
 80121d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2200      	movs	r2, #0
 80121d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2200      	movs	r2, #0
 80121e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80121e4:	2301      	movs	r3, #1
 80121e6:	e007      	b.n	80121f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	699b      	ldr	r3, [r3, #24]
 80121ee:	f003 0302 	and.w	r3, r3, #2
 80121f2:	2b02      	cmp	r3, #2
 80121f4:	d1cb      	bne.n	801218e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80121f6:	2300      	movs	r3, #0
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3710      	adds	r7, #16
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}

08012200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	60f8      	str	r0, [r7, #12]
 8012208:	60b9      	str	r1, [r7, #8]
 801220a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801220c:	e028      	b.n	8012260 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	68b9      	ldr	r1, [r7, #8]
 8012212:	68f8      	ldr	r0, [r7, #12]
 8012214:	f000 f8aa 	bl	801236c <I2C_IsErrorOccurred>
 8012218:	4603      	mov	r3, r0
 801221a:	2b00      	cmp	r3, #0
 801221c:	d001      	beq.n	8012222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801221e:	2301      	movs	r3, #1
 8012220:	e026      	b.n	8012270 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012222:	f7fc fceb 	bl	800ebfc <HAL_GetTick>
 8012226:	4602      	mov	r2, r0
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	1ad3      	subs	r3, r2, r3
 801222c:	68ba      	ldr	r2, [r7, #8]
 801222e:	429a      	cmp	r2, r3
 8012230:	d302      	bcc.n	8012238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d113      	bne.n	8012260 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801223c:	f043 0220 	orr.w	r2, r3, #32
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2220      	movs	r2, #32
 8012248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2200      	movs	r2, #0
 8012250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	2200      	movs	r2, #0
 8012258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 801225c:	2301      	movs	r3, #1
 801225e:	e007      	b.n	8012270 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	699b      	ldr	r3, [r3, #24]
 8012266:	f003 0320 	and.w	r3, r3, #32
 801226a:	2b20      	cmp	r3, #32
 801226c:	d1cf      	bne.n	801220e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801226e:	2300      	movs	r3, #0
}
 8012270:	4618      	mov	r0, r3
 8012272:	3710      	adds	r7, #16
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012284:	e064      	b.n	8012350 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	68b9      	ldr	r1, [r7, #8]
 801228a:	68f8      	ldr	r0, [r7, #12]
 801228c:	f000 f86e 	bl	801236c <I2C_IsErrorOccurred>
 8012290:	4603      	mov	r3, r0
 8012292:	2b00      	cmp	r3, #0
 8012294:	d001      	beq.n	801229a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012296:	2301      	movs	r3, #1
 8012298:	e062      	b.n	8012360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	699b      	ldr	r3, [r3, #24]
 80122a0:	f003 0320 	and.w	r3, r3, #32
 80122a4:	2b20      	cmp	r3, #32
 80122a6:	d138      	bne.n	801231a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	699b      	ldr	r3, [r3, #24]
 80122ae:	f003 0304 	and.w	r3, r3, #4
 80122b2:	2b04      	cmp	r3, #4
 80122b4:	d105      	bne.n	80122c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d001      	beq.n	80122c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80122be:	2300      	movs	r3, #0
 80122c0:	e04e      	b.n	8012360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	699b      	ldr	r3, [r3, #24]
 80122c8:	f003 0310 	and.w	r3, r3, #16
 80122cc:	2b10      	cmp	r3, #16
 80122ce:	d107      	bne.n	80122e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2210      	movs	r2, #16
 80122d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	2204      	movs	r2, #4
 80122dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80122de:	e002      	b.n	80122e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2200      	movs	r2, #0
 80122e4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	2220      	movs	r2, #32
 80122ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	6859      	ldr	r1, [r3, #4]
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	4b1b      	ldr	r3, [pc, #108]	@ (8012368 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80122fa:	400b      	ands	r3, r1
 80122fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	2220      	movs	r2, #32
 8012302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	2200      	movs	r2, #0
 801230a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	2200      	movs	r2, #0
 8012312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8012316:	2301      	movs	r3, #1
 8012318:	e022      	b.n	8012360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801231a:	f7fc fc6f 	bl	800ebfc <HAL_GetTick>
 801231e:	4602      	mov	r2, r0
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	1ad3      	subs	r3, r2, r3
 8012324:	68ba      	ldr	r2, [r7, #8]
 8012326:	429a      	cmp	r2, r3
 8012328:	d302      	bcc.n	8012330 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d10f      	bne.n	8012350 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012334:	f043 0220 	orr.w	r2, r3, #32
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2220      	movs	r2, #32
 8012340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2200      	movs	r2, #0
 8012348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 801234c:	2301      	movs	r3, #1
 801234e:	e007      	b.n	8012360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	699b      	ldr	r3, [r3, #24]
 8012356:	f003 0304 	and.w	r3, r3, #4
 801235a:	2b04      	cmp	r3, #4
 801235c:	d193      	bne.n	8012286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801235e:	2300      	movs	r3, #0
}
 8012360:	4618      	mov	r0, r3
 8012362:	3710      	adds	r7, #16
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}
 8012368:	fe00e800 	.word	0xfe00e800

0801236c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b08a      	sub	sp, #40	@ 0x28
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012378:	2300      	movs	r3, #0
 801237a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	699b      	ldr	r3, [r3, #24]
 8012384:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8012386:	2300      	movs	r3, #0
 8012388:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801238e:	69bb      	ldr	r3, [r7, #24]
 8012390:	f003 0310 	and.w	r3, r3, #16
 8012394:	2b00      	cmp	r3, #0
 8012396:	d075      	beq.n	8012484 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	2210      	movs	r2, #16
 801239e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80123a0:	e056      	b.n	8012450 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123a8:	d052      	beq.n	8012450 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80123aa:	f7fc fc27 	bl	800ebfc <HAL_GetTick>
 80123ae:	4602      	mov	r2, r0
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	1ad3      	subs	r3, r2, r3
 80123b4:	68ba      	ldr	r2, [r7, #8]
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d302      	bcc.n	80123c0 <I2C_IsErrorOccurred+0x54>
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d147      	bne.n	8012450 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80123ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80123d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	699b      	ldr	r3, [r3, #24]
 80123da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80123de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80123e2:	d12e      	bne.n	8012442 <I2C_IsErrorOccurred+0xd6>
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80123ea:	d02a      	beq.n	8012442 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80123ec:	7cfb      	ldrb	r3, [r7, #19]
 80123ee:	2b20      	cmp	r3, #32
 80123f0:	d027      	beq.n	8012442 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	685a      	ldr	r2, [r3, #4]
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012400:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012402:	f7fc fbfb 	bl	800ebfc <HAL_GetTick>
 8012406:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012408:	e01b      	b.n	8012442 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801240a:	f7fc fbf7 	bl	800ebfc <HAL_GetTick>
 801240e:	4602      	mov	r2, r0
 8012410:	69fb      	ldr	r3, [r7, #28]
 8012412:	1ad3      	subs	r3, r2, r3
 8012414:	2b19      	cmp	r3, #25
 8012416:	d914      	bls.n	8012442 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801241c:	f043 0220 	orr.w	r2, r3, #32
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2220      	movs	r2, #32
 8012428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	2200      	movs	r2, #0
 8012430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2200      	movs	r2, #0
 8012438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              
              status = HAL_ERROR;
 801243c:	2301      	movs	r3, #1
 801243e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	699b      	ldr	r3, [r3, #24]
 8012448:	f003 0320 	and.w	r3, r3, #32
 801244c:	2b20      	cmp	r3, #32
 801244e:	d1dc      	bne.n	801240a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	699b      	ldr	r3, [r3, #24]
 8012456:	f003 0320 	and.w	r3, r3, #32
 801245a:	2b20      	cmp	r3, #32
 801245c:	d003      	beq.n	8012466 <I2C_IsErrorOccurred+0xfa>
 801245e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012462:	2b00      	cmp	r3, #0
 8012464:	d09d      	beq.n	80123a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012466:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801246a:	2b00      	cmp	r3, #0
 801246c:	d103      	bne.n	8012476 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	2220      	movs	r2, #32
 8012474:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012476:	6a3b      	ldr	r3, [r7, #32]
 8012478:	f043 0304 	orr.w	r3, r3, #4
 801247c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801247e:	2301      	movs	r3, #1
 8012480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	699b      	ldr	r3, [r3, #24]
 801248a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801248c:	69bb      	ldr	r3, [r7, #24]
 801248e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012492:	2b00      	cmp	r3, #0
 8012494:	d00b      	beq.n	80124ae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012496:	6a3b      	ldr	r3, [r7, #32]
 8012498:	f043 0301 	orr.w	r3, r3, #1
 801249c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80124a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80124a8:	2301      	movs	r3, #1
 80124aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80124ae:	69bb      	ldr	r3, [r7, #24]
 80124b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00b      	beq.n	80124d0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80124b8:	6a3b      	ldr	r3, [r7, #32]
 80124ba:	f043 0308 	orr.w	r3, r3, #8
 80124be:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80124c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80124ca:	2301      	movs	r3, #1
 80124cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80124d0:	69bb      	ldr	r3, [r7, #24]
 80124d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00b      	beq.n	80124f2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80124da:	6a3b      	ldr	r3, [r7, #32]
 80124dc:	f043 0302 	orr.w	r3, r3, #2
 80124e0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80124ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80124ec:	2301      	movs	r3, #1
 80124ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80124f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d01c      	beq.n	8012534 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f7ff fddc 	bl	80120b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	6859      	ldr	r1, [r3, #4]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	4b0d      	ldr	r3, [pc, #52]	@ (8012540 <I2C_IsErrorOccurred+0x1d4>)
 801250c:	400b      	ands	r3, r1
 801250e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012514:	6a3b      	ldr	r3, [r7, #32]
 8012516:	431a      	orrs	r2, r3
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	2220      	movs	r2, #32
 8012520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2200      	movs	r2, #0
 8012528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2200      	movs	r2, #0
 8012530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8012534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012538:	4618      	mov	r0, r3
 801253a:	3728      	adds	r7, #40	@ 0x28
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	fe00e800 	.word	0xfe00e800

08012544 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012544:	b480      	push	{r7}
 8012546:	b087      	sub	sp, #28
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	607b      	str	r3, [r7, #4]
 801254e:	460b      	mov	r3, r1
 8012550:	817b      	strh	r3, [r7, #10]
 8012552:	4613      	mov	r3, r2
 8012554:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012556:	897b      	ldrh	r3, [r7, #10]
 8012558:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801255c:	7a7b      	ldrb	r3, [r7, #9]
 801255e:	041b      	lsls	r3, r3, #16
 8012560:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012564:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801256a:	6a3b      	ldr	r3, [r7, #32]
 801256c:	4313      	orrs	r3, r2
 801256e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012572:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	685a      	ldr	r2, [r3, #4]
 801257a:	6a3b      	ldr	r3, [r7, #32]
 801257c:	0d5b      	lsrs	r3, r3, #21
 801257e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8012582:	4b08      	ldr	r3, [pc, #32]	@ (80125a4 <I2C_TransferConfig+0x60>)
 8012584:	430b      	orrs	r3, r1
 8012586:	43db      	mvns	r3, r3
 8012588:	ea02 0103 	and.w	r1, r2, r3
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	697a      	ldr	r2, [r7, #20]
 8012592:	430a      	orrs	r2, r1
 8012594:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8012596:	bf00      	nop
 8012598:	371c      	adds	r7, #28
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	03ff63ff 	.word	0x03ff63ff

080125a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	2b20      	cmp	r3, #32
 80125bc:	d138      	bne.n	8012630 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d101      	bne.n	80125cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80125c8:	2302      	movs	r3, #2
 80125ca:	e032      	b.n	8012632 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2201      	movs	r2, #1
 80125d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2224      	movs	r2, #36	@ 0x24
 80125d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f022 0201 	bic.w	r2, r2, #1
 80125ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	681a      	ldr	r2, [r3, #0]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80125fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	6819      	ldr	r1, [r3, #0]
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	683a      	ldr	r2, [r7, #0]
 8012608:	430a      	orrs	r2, r1
 801260a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	681a      	ldr	r2, [r3, #0]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	f042 0201 	orr.w	r2, r2, #1
 801261a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2220      	movs	r2, #32
 8012620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2200      	movs	r2, #0
 8012628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801262c:	2300      	movs	r3, #0
 801262e:	e000      	b.n	8012632 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012630:	2302      	movs	r3, #2
  }
}
 8012632:	4618      	mov	r0, r3
 8012634:	370c      	adds	r7, #12
 8012636:	46bd      	mov	sp, r7
 8012638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263c:	4770      	bx	lr

0801263e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801263e:	b480      	push	{r7}
 8012640:	b085      	sub	sp, #20
 8012642:	af00      	add	r7, sp, #0
 8012644:	6078      	str	r0, [r7, #4]
 8012646:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801264e:	b2db      	uxtb	r3, r3
 8012650:	2b20      	cmp	r3, #32
 8012652:	d139      	bne.n	80126c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801265a:	2b01      	cmp	r3, #1
 801265c:	d101      	bne.n	8012662 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801265e:	2302      	movs	r3, #2
 8012660:	e033      	b.n	80126ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2201      	movs	r2, #1
 8012666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2224      	movs	r2, #36	@ 0x24
 801266e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f022 0201 	bic.w	r2, r2, #1
 8012680:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8012690:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	021b      	lsls	r3, r3, #8
 8012696:	68fa      	ldr	r2, [r7, #12]
 8012698:	4313      	orrs	r3, r2
 801269a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	68fa      	ldr	r2, [r7, #12]
 80126a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	681a      	ldr	r2, [r3, #0]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f042 0201 	orr.w	r2, r2, #1
 80126b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2220      	movs	r2, #32
 80126b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2200      	movs	r2, #0
 80126c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80126c4:	2300      	movs	r3, #0
 80126c6:	e000      	b.n	80126ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80126c8:	2302      	movs	r3, #2
  }
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3714      	adds	r7, #20
 80126ce:	46bd      	mov	sp, r7
 80126d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d4:	4770      	bx	lr
	...

080126d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80126d8:	b480      	push	{r7}
 80126da:	b085      	sub	sp, #20
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d141      	bne.n	801276a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80126e6:	4b4b      	ldr	r3, [pc, #300]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80126ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80126f2:	d131      	bne.n	8012758 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80126f4:	4b47      	ldr	r3, [pc, #284]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80126f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126fa:	4a46      	ldr	r2, [pc, #280]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80126fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012700:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8012704:	4b43      	ldr	r3, [pc, #268]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801270c:	4a41      	ldr	r2, [pc, #260]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801270e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8012712:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8012714:	4b40      	ldr	r3, [pc, #256]	@ (8012818 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	2232      	movs	r2, #50	@ 0x32
 801271a:	fb02 f303 	mul.w	r3, r2, r3
 801271e:	4a3f      	ldr	r2, [pc, #252]	@ (801281c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8012720:	fba2 2303 	umull	r2, r3, r2, r3
 8012724:	0c9b      	lsrs	r3, r3, #18
 8012726:	3301      	adds	r3, #1
 8012728:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801272a:	e002      	b.n	8012732 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	3b01      	subs	r3, #1
 8012730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8012732:	4b38      	ldr	r3, [pc, #224]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8012734:	695b      	ldr	r3, [r3, #20]
 8012736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801273a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801273e:	d102      	bne.n	8012746 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d1f2      	bne.n	801272c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8012746:	4b33      	ldr	r3, [pc, #204]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8012748:	695b      	ldr	r3, [r3, #20]
 801274a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801274e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012752:	d158      	bne.n	8012806 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8012754:	2303      	movs	r3, #3
 8012756:	e057      	b.n	8012808 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8012758:	4b2e      	ldr	r3, [pc, #184]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801275a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801275e:	4a2d      	ldr	r2, [pc, #180]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8012760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012764:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8012768:	e04d      	b.n	8012806 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012770:	d141      	bne.n	80127f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8012772:	4b28      	ldr	r3, [pc, #160]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801277a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801277e:	d131      	bne.n	80127e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8012780:	4b24      	ldr	r3, [pc, #144]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8012782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012786:	4a23      	ldr	r2, [pc, #140]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8012788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801278c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8012790:	4b20      	ldr	r3, [pc, #128]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8012798:	4a1e      	ldr	r2, [pc, #120]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801279a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801279e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80127a0:	4b1d      	ldr	r3, [pc, #116]	@ (8012818 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2232      	movs	r2, #50	@ 0x32
 80127a6:	fb02 f303 	mul.w	r3, r2, r3
 80127aa:	4a1c      	ldr	r2, [pc, #112]	@ (801281c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80127ac:	fba2 2303 	umull	r2, r3, r2, r3
 80127b0:	0c9b      	lsrs	r3, r3, #18
 80127b2:	3301      	adds	r3, #1
 80127b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80127b6:	e002      	b.n	80127be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	3b01      	subs	r3, #1
 80127bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80127be:	4b15      	ldr	r3, [pc, #84]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80127c0:	695b      	ldr	r3, [r3, #20]
 80127c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80127c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80127ca:	d102      	bne.n	80127d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d1f2      	bne.n	80127b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80127d2:	4b10      	ldr	r3, [pc, #64]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80127d4:	695b      	ldr	r3, [r3, #20]
 80127d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80127da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80127de:	d112      	bne.n	8012806 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80127e0:	2303      	movs	r3, #3
 80127e2:	e011      	b.n	8012808 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80127e4:	4b0b      	ldr	r3, [pc, #44]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80127e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127ea:	4a0a      	ldr	r2, [pc, #40]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80127ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80127f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80127f4:	e007      	b.n	8012806 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80127f6:	4b07      	ldr	r3, [pc, #28]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80127fe:	4a05      	ldr	r2, [pc, #20]	@ (8012814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8012800:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8012804:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8012806:	2300      	movs	r3, #0
}
 8012808:	4618      	mov	r0, r3
 801280a:	3714      	adds	r7, #20
 801280c:	46bd      	mov	sp, r7
 801280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012812:	4770      	bx	lr
 8012814:	40007000 	.word	0x40007000
 8012818:	20000020 	.word	0x20000020
 801281c:	431bde83 	.word	0x431bde83

08012820 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8012820:	b480      	push	{r7}
 8012822:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8012824:	4b05      	ldr	r3, [pc, #20]	@ (801283c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8012826:	689b      	ldr	r3, [r3, #8]
 8012828:	4a04      	ldr	r2, [pc, #16]	@ (801283c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801282a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801282e:	6093      	str	r3, [r2, #8]
}
 8012830:	bf00      	nop
 8012832:	46bd      	mov	sp, r7
 8012834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012838:	4770      	bx	lr
 801283a:	bf00      	nop
 801283c:	40007000 	.word	0x40007000

08012840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b088      	sub	sp, #32
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d101      	bne.n	8012852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801284e:	2301      	movs	r3, #1
 8012850:	e306      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f003 0301 	and.w	r3, r3, #1
 801285a:	2b00      	cmp	r3, #0
 801285c:	d075      	beq.n	801294a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801285e:	4b97      	ldr	r3, [pc, #604]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012860:	689b      	ldr	r3, [r3, #8]
 8012862:	f003 030c 	and.w	r3, r3, #12
 8012866:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012868:	4b94      	ldr	r3, [pc, #592]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 801286a:	68db      	ldr	r3, [r3, #12]
 801286c:	f003 0303 	and.w	r3, r3, #3
 8012870:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	2b0c      	cmp	r3, #12
 8012876:	d102      	bne.n	801287e <HAL_RCC_OscConfig+0x3e>
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	2b03      	cmp	r3, #3
 801287c:	d002      	beq.n	8012884 <HAL_RCC_OscConfig+0x44>
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	2b08      	cmp	r3, #8
 8012882:	d10b      	bne.n	801289c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012884:	4b8d      	ldr	r3, [pc, #564]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801288c:	2b00      	cmp	r3, #0
 801288e:	d05b      	beq.n	8012948 <HAL_RCC_OscConfig+0x108>
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d157      	bne.n	8012948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012898:	2301      	movs	r3, #1
 801289a:	e2e1      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80128a4:	d106      	bne.n	80128b4 <HAL_RCC_OscConfig+0x74>
 80128a6:	4b85      	ldr	r3, [pc, #532]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	4a84      	ldr	r2, [pc, #528]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80128ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80128b0:	6013      	str	r3, [r2, #0]
 80128b2:	e01d      	b.n	80128f0 <HAL_RCC_OscConfig+0xb0>
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80128bc:	d10c      	bne.n	80128d8 <HAL_RCC_OscConfig+0x98>
 80128be:	4b7f      	ldr	r3, [pc, #508]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	4a7e      	ldr	r2, [pc, #504]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80128c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80128c8:	6013      	str	r3, [r2, #0]
 80128ca:	4b7c      	ldr	r3, [pc, #496]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4a7b      	ldr	r2, [pc, #492]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80128d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80128d4:	6013      	str	r3, [r2, #0]
 80128d6:	e00b      	b.n	80128f0 <HAL_RCC_OscConfig+0xb0>
 80128d8:	4b78      	ldr	r3, [pc, #480]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	4a77      	ldr	r2, [pc, #476]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80128de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80128e2:	6013      	str	r3, [r2, #0]
 80128e4:	4b75      	ldr	r3, [pc, #468]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	4a74      	ldr	r2, [pc, #464]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80128ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80128ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d013      	beq.n	8012920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80128f8:	f7fc f980 	bl	800ebfc <HAL_GetTick>
 80128fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80128fe:	e008      	b.n	8012912 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012900:	f7fc f97c 	bl	800ebfc <HAL_GetTick>
 8012904:	4602      	mov	r2, r0
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	1ad3      	subs	r3, r2, r3
 801290a:	2b64      	cmp	r3, #100	@ 0x64
 801290c:	d901      	bls.n	8012912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801290e:	2303      	movs	r3, #3
 8012910:	e2a6      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012912:	4b6a      	ldr	r3, [pc, #424]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801291a:	2b00      	cmp	r3, #0
 801291c:	d0f0      	beq.n	8012900 <HAL_RCC_OscConfig+0xc0>
 801291e:	e014      	b.n	801294a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012920:	f7fc f96c 	bl	800ebfc <HAL_GetTick>
 8012924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8012926:	e008      	b.n	801293a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012928:	f7fc f968 	bl	800ebfc <HAL_GetTick>
 801292c:	4602      	mov	r2, r0
 801292e:	693b      	ldr	r3, [r7, #16]
 8012930:	1ad3      	subs	r3, r2, r3
 8012932:	2b64      	cmp	r3, #100	@ 0x64
 8012934:	d901      	bls.n	801293a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012936:	2303      	movs	r3, #3
 8012938:	e292      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801293a:	4b60      	ldr	r3, [pc, #384]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012942:	2b00      	cmp	r3, #0
 8012944:	d1f0      	bne.n	8012928 <HAL_RCC_OscConfig+0xe8>
 8012946:	e000      	b.n	801294a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	f003 0302 	and.w	r3, r3, #2
 8012952:	2b00      	cmp	r3, #0
 8012954:	d075      	beq.n	8012a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012956:	4b59      	ldr	r3, [pc, #356]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012958:	689b      	ldr	r3, [r3, #8]
 801295a:	f003 030c 	and.w	r3, r3, #12
 801295e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012960:	4b56      	ldr	r3, [pc, #344]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	f003 0303 	and.w	r3, r3, #3
 8012968:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	2b0c      	cmp	r3, #12
 801296e:	d102      	bne.n	8012976 <HAL_RCC_OscConfig+0x136>
 8012970:	697b      	ldr	r3, [r7, #20]
 8012972:	2b02      	cmp	r3, #2
 8012974:	d002      	beq.n	801297c <HAL_RCC_OscConfig+0x13c>
 8012976:	69bb      	ldr	r3, [r7, #24]
 8012978:	2b04      	cmp	r3, #4
 801297a:	d11f      	bne.n	80129bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801297c:	4b4f      	ldr	r3, [pc, #316]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012984:	2b00      	cmp	r3, #0
 8012986:	d005      	beq.n	8012994 <HAL_RCC_OscConfig+0x154>
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	68db      	ldr	r3, [r3, #12]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d101      	bne.n	8012994 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8012990:	2301      	movs	r3, #1
 8012992:	e265      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012994:	4b49      	ldr	r3, [pc, #292]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	691b      	ldr	r3, [r3, #16]
 80129a0:	061b      	lsls	r3, r3, #24
 80129a2:	4946      	ldr	r1, [pc, #280]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80129a4:	4313      	orrs	r3, r2
 80129a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80129a8:	4b45      	ldr	r3, [pc, #276]	@ (8012ac0 <HAL_RCC_OscConfig+0x280>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7fc f8d9 	bl	800eb64 <HAL_InitTick>
 80129b2:	4603      	mov	r3, r0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d043      	beq.n	8012a40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80129b8:	2301      	movs	r3, #1
 80129ba:	e251      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d023      	beq.n	8012a0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80129c4:	4b3d      	ldr	r3, [pc, #244]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	4a3c      	ldr	r2, [pc, #240]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80129ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80129ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80129d0:	f7fc f914 	bl	800ebfc <HAL_GetTick>
 80129d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80129d6:	e008      	b.n	80129ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80129d8:	f7fc f910 	bl	800ebfc <HAL_GetTick>
 80129dc:	4602      	mov	r2, r0
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	1ad3      	subs	r3, r2, r3
 80129e2:	2b02      	cmp	r3, #2
 80129e4:	d901      	bls.n	80129ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80129e6:	2303      	movs	r3, #3
 80129e8:	e23a      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80129ea:	4b34      	ldr	r3, [pc, #208]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d0f0      	beq.n	80129d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80129f6:	4b31      	ldr	r3, [pc, #196]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	691b      	ldr	r3, [r3, #16]
 8012a02:	061b      	lsls	r3, r3, #24
 8012a04:	492d      	ldr	r1, [pc, #180]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012a06:	4313      	orrs	r3, r2
 8012a08:	604b      	str	r3, [r1, #4]
 8012a0a:	e01a      	b.n	8012a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a2a      	ldr	r2, [pc, #168]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012a12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012a18:	f7fc f8f0 	bl	800ebfc <HAL_GetTick>
 8012a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8012a1e:	e008      	b.n	8012a32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012a20:	f7fc f8ec 	bl	800ebfc <HAL_GetTick>
 8012a24:	4602      	mov	r2, r0
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	1ad3      	subs	r3, r2, r3
 8012a2a:	2b02      	cmp	r3, #2
 8012a2c:	d901      	bls.n	8012a32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8012a2e:	2303      	movs	r3, #3
 8012a30:	e216      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8012a32:	4b22      	ldr	r3, [pc, #136]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d1f0      	bne.n	8012a20 <HAL_RCC_OscConfig+0x1e0>
 8012a3e:	e000      	b.n	8012a42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012a40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f003 0308 	and.w	r3, r3, #8
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d041      	beq.n	8012ad2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	695b      	ldr	r3, [r3, #20]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d01c      	beq.n	8012a90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012a56:	4b19      	ldr	r3, [pc, #100]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012a5c:	4a17      	ldr	r2, [pc, #92]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012a5e:	f043 0301 	orr.w	r3, r3, #1
 8012a62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012a66:	f7fc f8c9 	bl	800ebfc <HAL_GetTick>
 8012a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8012a6c:	e008      	b.n	8012a80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012a6e:	f7fc f8c5 	bl	800ebfc <HAL_GetTick>
 8012a72:	4602      	mov	r2, r0
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	1ad3      	subs	r3, r2, r3
 8012a78:	2b02      	cmp	r3, #2
 8012a7a:	d901      	bls.n	8012a80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012a7c:	2303      	movs	r3, #3
 8012a7e:	e1ef      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8012a80:	4b0e      	ldr	r3, [pc, #56]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012a86:	f003 0302 	and.w	r3, r3, #2
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d0ef      	beq.n	8012a6e <HAL_RCC_OscConfig+0x22e>
 8012a8e:	e020      	b.n	8012ad2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012a90:	4b0a      	ldr	r3, [pc, #40]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012a96:	4a09      	ldr	r2, [pc, #36]	@ (8012abc <HAL_RCC_OscConfig+0x27c>)
 8012a98:	f023 0301 	bic.w	r3, r3, #1
 8012a9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012aa0:	f7fc f8ac 	bl	800ebfc <HAL_GetTick>
 8012aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8012aa6:	e00d      	b.n	8012ac4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012aa8:	f7fc f8a8 	bl	800ebfc <HAL_GetTick>
 8012aac:	4602      	mov	r2, r0
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	1ad3      	subs	r3, r2, r3
 8012ab2:	2b02      	cmp	r3, #2
 8012ab4:	d906      	bls.n	8012ac4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8012ab6:	2303      	movs	r3, #3
 8012ab8:	e1d2      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
 8012aba:	bf00      	nop
 8012abc:	40021000 	.word	0x40021000
 8012ac0:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8012ac4:	4b8c      	ldr	r3, [pc, #560]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012aca:	f003 0302 	and.w	r3, r3, #2
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d1ea      	bne.n	8012aa8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f003 0304 	and.w	r3, r3, #4
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	f000 80a6 	beq.w	8012c2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8012ae4:	4b84      	ldr	r3, [pc, #528]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d101      	bne.n	8012af4 <HAL_RCC_OscConfig+0x2b4>
 8012af0:	2301      	movs	r3, #1
 8012af2:	e000      	b.n	8012af6 <HAL_RCC_OscConfig+0x2b6>
 8012af4:	2300      	movs	r3, #0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d00d      	beq.n	8012b16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012afa:	4b7f      	ldr	r3, [pc, #508]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012afe:	4a7e      	ldr	r2, [pc, #504]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8012b06:	4b7c      	ldr	r3, [pc, #496]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012b0e:	60fb      	str	r3, [r7, #12]
 8012b10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8012b12:	2301      	movs	r3, #1
 8012b14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012b16:	4b79      	ldr	r3, [pc, #484]	@ (8012cfc <HAL_RCC_OscConfig+0x4bc>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d118      	bne.n	8012b54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012b22:	4b76      	ldr	r3, [pc, #472]	@ (8012cfc <HAL_RCC_OscConfig+0x4bc>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	4a75      	ldr	r2, [pc, #468]	@ (8012cfc <HAL_RCC_OscConfig+0x4bc>)
 8012b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012b2e:	f7fc f865 	bl	800ebfc <HAL_GetTick>
 8012b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012b34:	e008      	b.n	8012b48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012b36:	f7fc f861 	bl	800ebfc <HAL_GetTick>
 8012b3a:	4602      	mov	r2, r0
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	1ad3      	subs	r3, r2, r3
 8012b40:	2b02      	cmp	r3, #2
 8012b42:	d901      	bls.n	8012b48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8012b44:	2303      	movs	r3, #3
 8012b46:	e18b      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012b48:	4b6c      	ldr	r3, [pc, #432]	@ (8012cfc <HAL_RCC_OscConfig+0x4bc>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d0f0      	beq.n	8012b36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	689b      	ldr	r3, [r3, #8]
 8012b58:	2b01      	cmp	r3, #1
 8012b5a:	d108      	bne.n	8012b6e <HAL_RCC_OscConfig+0x32e>
 8012b5c:	4b66      	ldr	r3, [pc, #408]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b62:	4a65      	ldr	r2, [pc, #404]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012b64:	f043 0301 	orr.w	r3, r3, #1
 8012b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8012b6c:	e024      	b.n	8012bb8 <HAL_RCC_OscConfig+0x378>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	689b      	ldr	r3, [r3, #8]
 8012b72:	2b05      	cmp	r3, #5
 8012b74:	d110      	bne.n	8012b98 <HAL_RCC_OscConfig+0x358>
 8012b76:	4b60      	ldr	r3, [pc, #384]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b7c:	4a5e      	ldr	r2, [pc, #376]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012b7e:	f043 0304 	orr.w	r3, r3, #4
 8012b82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8012b86:	4b5c      	ldr	r3, [pc, #368]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b8c:	4a5a      	ldr	r2, [pc, #360]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012b8e:	f043 0301 	orr.w	r3, r3, #1
 8012b92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8012b96:	e00f      	b.n	8012bb8 <HAL_RCC_OscConfig+0x378>
 8012b98:	4b57      	ldr	r3, [pc, #348]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b9e:	4a56      	ldr	r2, [pc, #344]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012ba0:	f023 0301 	bic.w	r3, r3, #1
 8012ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8012ba8:	4b53      	ldr	r3, [pc, #332]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012bae:	4a52      	ldr	r2, [pc, #328]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012bb0:	f023 0304 	bic.w	r3, r3, #4
 8012bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	689b      	ldr	r3, [r3, #8]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d016      	beq.n	8012bee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012bc0:	f7fc f81c 	bl	800ebfc <HAL_GetTick>
 8012bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012bc6:	e00a      	b.n	8012bde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012bc8:	f7fc f818 	bl	800ebfc <HAL_GetTick>
 8012bcc:	4602      	mov	r2, r0
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	1ad3      	subs	r3, r2, r3
 8012bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012bd6:	4293      	cmp	r3, r2
 8012bd8:	d901      	bls.n	8012bde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8012bda:	2303      	movs	r3, #3
 8012bdc:	e140      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012bde:	4b46      	ldr	r3, [pc, #280]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012be4:	f003 0302 	and.w	r3, r3, #2
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d0ed      	beq.n	8012bc8 <HAL_RCC_OscConfig+0x388>
 8012bec:	e015      	b.n	8012c1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012bee:	f7fc f805 	bl	800ebfc <HAL_GetTick>
 8012bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8012bf4:	e00a      	b.n	8012c0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012bf6:	f7fc f801 	bl	800ebfc <HAL_GetTick>
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	1ad3      	subs	r3, r2, r3
 8012c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012c04:	4293      	cmp	r3, r2
 8012c06:	d901      	bls.n	8012c0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8012c08:	2303      	movs	r3, #3
 8012c0a:	e129      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8012c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012c12:	f003 0302 	and.w	r3, r3, #2
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d1ed      	bne.n	8012bf6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8012c1a:	7ffb      	ldrb	r3, [r7, #31]
 8012c1c:	2b01      	cmp	r3, #1
 8012c1e:	d105      	bne.n	8012c2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012c20:	4b35      	ldr	r3, [pc, #212]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012c24:	4a34      	ldr	r2, [pc, #208]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012c2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f003 0320 	and.w	r3, r3, #32
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d03c      	beq.n	8012cb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	699b      	ldr	r3, [r3, #24]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d01c      	beq.n	8012c7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8012c40:	4b2d      	ldr	r3, [pc, #180]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012c46:	4a2c      	ldr	r2, [pc, #176]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012c48:	f043 0301 	orr.w	r3, r3, #1
 8012c4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c50:	f7fb ffd4 	bl	800ebfc <HAL_GetTick>
 8012c54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8012c56:	e008      	b.n	8012c6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012c58:	f7fb ffd0 	bl	800ebfc <HAL_GetTick>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	1ad3      	subs	r3, r2, r3
 8012c62:	2b02      	cmp	r3, #2
 8012c64:	d901      	bls.n	8012c6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8012c66:	2303      	movs	r3, #3
 8012c68:	e0fa      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8012c6a:	4b23      	ldr	r3, [pc, #140]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012c70:	f003 0302 	and.w	r3, r3, #2
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d0ef      	beq.n	8012c58 <HAL_RCC_OscConfig+0x418>
 8012c78:	e01b      	b.n	8012cb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012c80:	4a1d      	ldr	r2, [pc, #116]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012c82:	f023 0301 	bic.w	r3, r3, #1
 8012c86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c8a:	f7fb ffb7 	bl	800ebfc <HAL_GetTick>
 8012c8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8012c90:	e008      	b.n	8012ca4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012c92:	f7fb ffb3 	bl	800ebfc <HAL_GetTick>
 8012c96:	4602      	mov	r2, r0
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	1ad3      	subs	r3, r2, r3
 8012c9c:	2b02      	cmp	r3, #2
 8012c9e:	d901      	bls.n	8012ca4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8012ca0:	2303      	movs	r3, #3
 8012ca2:	e0dd      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8012ca4:	4b14      	ldr	r3, [pc, #80]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012caa:	f003 0302 	and.w	r3, r3, #2
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d1ef      	bne.n	8012c92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	69db      	ldr	r3, [r3, #28]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	f000 80d1 	beq.w	8012e5e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012cbe:	689b      	ldr	r3, [r3, #8]
 8012cc0:	f003 030c 	and.w	r3, r3, #12
 8012cc4:	2b0c      	cmp	r3, #12
 8012cc6:	f000 808b 	beq.w	8012de0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	69db      	ldr	r3, [r3, #28]
 8012cce:	2b02      	cmp	r3, #2
 8012cd0:	d15e      	bne.n	8012d90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012cd2:	4b09      	ldr	r3, [pc, #36]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	4a08      	ldr	r2, [pc, #32]	@ (8012cf8 <HAL_RCC_OscConfig+0x4b8>)
 8012cd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012cde:	f7fb ff8d 	bl	800ebfc <HAL_GetTick>
 8012ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012ce4:	e00c      	b.n	8012d00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012ce6:	f7fb ff89 	bl	800ebfc <HAL_GetTick>
 8012cea:	4602      	mov	r2, r0
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	1ad3      	subs	r3, r2, r3
 8012cf0:	2b02      	cmp	r3, #2
 8012cf2:	d905      	bls.n	8012d00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8012cf4:	2303      	movs	r3, #3
 8012cf6:	e0b3      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
 8012cf8:	40021000 	.word	0x40021000
 8012cfc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012d00:	4b59      	ldr	r3, [pc, #356]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d1ec      	bne.n	8012ce6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012d0c:	4b56      	ldr	r3, [pc, #344]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012d0e:	68da      	ldr	r2, [r3, #12]
 8012d10:	4b56      	ldr	r3, [pc, #344]	@ (8012e6c <HAL_RCC_OscConfig+0x62c>)
 8012d12:	4013      	ands	r3, r2
 8012d14:	687a      	ldr	r2, [r7, #4]
 8012d16:	6a11      	ldr	r1, [r2, #32]
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8012d1c:	3a01      	subs	r2, #1
 8012d1e:	0112      	lsls	r2, r2, #4
 8012d20:	4311      	orrs	r1, r2
 8012d22:	687a      	ldr	r2, [r7, #4]
 8012d24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8012d26:	0212      	lsls	r2, r2, #8
 8012d28:	4311      	orrs	r1, r2
 8012d2a:	687a      	ldr	r2, [r7, #4]
 8012d2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012d2e:	0852      	lsrs	r2, r2, #1
 8012d30:	3a01      	subs	r2, #1
 8012d32:	0552      	lsls	r2, r2, #21
 8012d34:	4311      	orrs	r1, r2
 8012d36:	687a      	ldr	r2, [r7, #4]
 8012d38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012d3a:	0852      	lsrs	r2, r2, #1
 8012d3c:	3a01      	subs	r2, #1
 8012d3e:	0652      	lsls	r2, r2, #25
 8012d40:	4311      	orrs	r1, r2
 8012d42:	687a      	ldr	r2, [r7, #4]
 8012d44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012d46:	06d2      	lsls	r2, r2, #27
 8012d48:	430a      	orrs	r2, r1
 8012d4a:	4947      	ldr	r1, [pc, #284]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012d4c:	4313      	orrs	r3, r2
 8012d4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012d50:	4b45      	ldr	r3, [pc, #276]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	4a44      	ldr	r2, [pc, #272]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012d5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8012d5c:	4b42      	ldr	r3, [pc, #264]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	4a41      	ldr	r2, [pc, #260]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012d66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d68:	f7fb ff48 	bl	800ebfc <HAL_GetTick>
 8012d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012d6e:	e008      	b.n	8012d82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012d70:	f7fb ff44 	bl	800ebfc <HAL_GetTick>
 8012d74:	4602      	mov	r2, r0
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	1ad3      	subs	r3, r2, r3
 8012d7a:	2b02      	cmp	r3, #2
 8012d7c:	d901      	bls.n	8012d82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8012d7e:	2303      	movs	r3, #3
 8012d80:	e06e      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012d82:	4b39      	ldr	r3, [pc, #228]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d0f0      	beq.n	8012d70 <HAL_RCC_OscConfig+0x530>
 8012d8e:	e066      	b.n	8012e5e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012d90:	4b35      	ldr	r3, [pc, #212]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4a34      	ldr	r2, [pc, #208]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012d96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012d9a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8012d9c:	4b32      	ldr	r3, [pc, #200]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012d9e:	68db      	ldr	r3, [r3, #12]
 8012da0:	4a31      	ldr	r2, [pc, #196]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012da2:	f023 0303 	bic.w	r3, r3, #3
 8012da6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8012da8:	4b2f      	ldr	r3, [pc, #188]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	4a2e      	ldr	r2, [pc, #184]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012dae:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8012db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012db6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012db8:	f7fb ff20 	bl	800ebfc <HAL_GetTick>
 8012dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012dbe:	e008      	b.n	8012dd2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012dc0:	f7fb ff1c 	bl	800ebfc <HAL_GetTick>
 8012dc4:	4602      	mov	r2, r0
 8012dc6:	693b      	ldr	r3, [r7, #16]
 8012dc8:	1ad3      	subs	r3, r2, r3
 8012dca:	2b02      	cmp	r3, #2
 8012dcc:	d901      	bls.n	8012dd2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8012dce:	2303      	movs	r3, #3
 8012dd0:	e046      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012dd2:	4b25      	ldr	r3, [pc, #148]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d1f0      	bne.n	8012dc0 <HAL_RCC_OscConfig+0x580>
 8012dde:	e03e      	b.n	8012e5e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	69db      	ldr	r3, [r3, #28]
 8012de4:	2b01      	cmp	r3, #1
 8012de6:	d101      	bne.n	8012dec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8012de8:	2301      	movs	r3, #1
 8012dea:	e039      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8012dec:	4b1e      	ldr	r3, [pc, #120]	@ (8012e68 <HAL_RCC_OscConfig+0x628>)
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012df2:	697b      	ldr	r3, [r7, #20]
 8012df4:	f003 0203 	and.w	r2, r3, #3
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	6a1b      	ldr	r3, [r3, #32]
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d12c      	bne.n	8012e5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e0a:	3b01      	subs	r3, #1
 8012e0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d123      	bne.n	8012e5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d11b      	bne.n	8012e5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d113      	bne.n	8012e5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e3c:	085b      	lsrs	r3, r3, #1
 8012e3e:	3b01      	subs	r3, #1
 8012e40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d109      	bne.n	8012e5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e50:	085b      	lsrs	r3, r3, #1
 8012e52:	3b01      	subs	r3, #1
 8012e54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8012e56:	429a      	cmp	r2, r3
 8012e58:	d001      	beq.n	8012e5e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	e000      	b.n	8012e60 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8012e5e:	2300      	movs	r3, #0
}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3720      	adds	r7, #32
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	40021000 	.word	0x40021000
 8012e6c:	019f800c 	.word	0x019f800c

08012e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b086      	sub	sp, #24
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
 8012e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d101      	bne.n	8012e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8012e84:	2301      	movs	r3, #1
 8012e86:	e11e      	b.n	80130c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8012e88:	4b91      	ldr	r3, [pc, #580]	@ (80130d0 <HAL_RCC_ClockConfig+0x260>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	f003 030f 	and.w	r3, r3, #15
 8012e90:	683a      	ldr	r2, [r7, #0]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d910      	bls.n	8012eb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012e96:	4b8e      	ldr	r3, [pc, #568]	@ (80130d0 <HAL_RCC_ClockConfig+0x260>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f023 020f 	bic.w	r2, r3, #15
 8012e9e:	498c      	ldr	r1, [pc, #560]	@ (80130d0 <HAL_RCC_ClockConfig+0x260>)
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	4313      	orrs	r3, r2
 8012ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012ea6:	4b8a      	ldr	r3, [pc, #552]	@ (80130d0 <HAL_RCC_ClockConfig+0x260>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	f003 030f 	and.w	r3, r3, #15
 8012eae:	683a      	ldr	r2, [r7, #0]
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	d001      	beq.n	8012eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	e106      	b.n	80130c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	f003 0301 	and.w	r3, r3, #1
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d073      	beq.n	8012fac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	685b      	ldr	r3, [r3, #4]
 8012ec8:	2b03      	cmp	r3, #3
 8012eca:	d129      	bne.n	8012f20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012ecc:	4b81      	ldr	r3, [pc, #516]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d101      	bne.n	8012edc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8012ed8:	2301      	movs	r3, #1
 8012eda:	e0f4      	b.n	80130c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8012edc:	f000 f99e 	bl	801321c <RCC_GetSysClockFreqFromPLLSource>
 8012ee0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	4a7c      	ldr	r2, [pc, #496]	@ (80130d8 <HAL_RCC_ClockConfig+0x268>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d93f      	bls.n	8012f6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8012eea:	4b7a      	ldr	r3, [pc, #488]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012eec:	689b      	ldr	r3, [r3, #8]
 8012eee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d009      	beq.n	8012f0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d033      	beq.n	8012f6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d12f      	bne.n	8012f6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8012f0a:	4b72      	ldr	r3, [pc, #456]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012f0c:	689b      	ldr	r3, [r3, #8]
 8012f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8012f12:	4a70      	ldr	r2, [pc, #448]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8012f1a:	2380      	movs	r3, #128	@ 0x80
 8012f1c:	617b      	str	r3, [r7, #20]
 8012f1e:	e024      	b.n	8012f6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	685b      	ldr	r3, [r3, #4]
 8012f24:	2b02      	cmp	r3, #2
 8012f26:	d107      	bne.n	8012f38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012f28:	4b6a      	ldr	r3, [pc, #424]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d109      	bne.n	8012f48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8012f34:	2301      	movs	r3, #1
 8012f36:	e0c6      	b.n	80130c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012f38:	4b66      	ldr	r3, [pc, #408]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d101      	bne.n	8012f48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8012f44:	2301      	movs	r3, #1
 8012f46:	e0be      	b.n	80130c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8012f48:	f000 f8ce 	bl	80130e8 <HAL_RCC_GetSysClockFreq>
 8012f4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	4a61      	ldr	r2, [pc, #388]	@ (80130d8 <HAL_RCC_ClockConfig+0x268>)
 8012f52:	4293      	cmp	r3, r2
 8012f54:	d909      	bls.n	8012f6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8012f56:	4b5f      	ldr	r3, [pc, #380]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012f58:	689b      	ldr	r3, [r3, #8]
 8012f5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8012f5e:	4a5d      	ldr	r2, [pc, #372]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8012f66:	2380      	movs	r3, #128	@ 0x80
 8012f68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012f6c:	689b      	ldr	r3, [r3, #8]
 8012f6e:	f023 0203 	bic.w	r2, r3, #3
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	685b      	ldr	r3, [r3, #4]
 8012f76:	4957      	ldr	r1, [pc, #348]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012f78:	4313      	orrs	r3, r2
 8012f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012f7c:	f7fb fe3e 	bl	800ebfc <HAL_GetTick>
 8012f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012f82:	e00a      	b.n	8012f9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012f84:	f7fb fe3a 	bl	800ebfc <HAL_GetTick>
 8012f88:	4602      	mov	r2, r0
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	1ad3      	subs	r3, r2, r3
 8012f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d901      	bls.n	8012f9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8012f96:	2303      	movs	r3, #3
 8012f98:	e095      	b.n	80130c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012f9a:	4b4e      	ldr	r3, [pc, #312]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012f9c:	689b      	ldr	r3, [r3, #8]
 8012f9e:	f003 020c 	and.w	r2, r3, #12
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	009b      	lsls	r3, r3, #2
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d1eb      	bne.n	8012f84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	f003 0302 	and.w	r3, r3, #2
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d023      	beq.n	8013000 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	f003 0304 	and.w	r3, r3, #4
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d005      	beq.n	8012fd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012fc4:	4b43      	ldr	r3, [pc, #268]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012fc6:	689b      	ldr	r3, [r3, #8]
 8012fc8:	4a42      	ldr	r2, [pc, #264]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012fca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8012fce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	f003 0308 	and.w	r3, r3, #8
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d007      	beq.n	8012fec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8012fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012fde:	689b      	ldr	r3, [r3, #8]
 8012fe0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012fe6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8012fea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012fec:	4b39      	ldr	r3, [pc, #228]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012fee:	689b      	ldr	r3, [r3, #8]
 8012ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	689b      	ldr	r3, [r3, #8]
 8012ff8:	4936      	ldr	r1, [pc, #216]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8012ffa:	4313      	orrs	r3, r2
 8012ffc:	608b      	str	r3, [r1, #8]
 8012ffe:	e008      	b.n	8013012 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	2b80      	cmp	r3, #128	@ 0x80
 8013004:	d105      	bne.n	8013012 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8013006:	4b33      	ldr	r3, [pc, #204]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8013008:	689b      	ldr	r3, [r3, #8]
 801300a:	4a32      	ldr	r2, [pc, #200]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 801300c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013010:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013012:	4b2f      	ldr	r3, [pc, #188]	@ (80130d0 <HAL_RCC_ClockConfig+0x260>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	f003 030f 	and.w	r3, r3, #15
 801301a:	683a      	ldr	r2, [r7, #0]
 801301c:	429a      	cmp	r2, r3
 801301e:	d21d      	bcs.n	801305c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013020:	4b2b      	ldr	r3, [pc, #172]	@ (80130d0 <HAL_RCC_ClockConfig+0x260>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	f023 020f 	bic.w	r2, r3, #15
 8013028:	4929      	ldr	r1, [pc, #164]	@ (80130d0 <HAL_RCC_ClockConfig+0x260>)
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	4313      	orrs	r3, r2
 801302e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8013030:	f7fb fde4 	bl	800ebfc <HAL_GetTick>
 8013034:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013036:	e00a      	b.n	801304e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013038:	f7fb fde0 	bl	800ebfc <HAL_GetTick>
 801303c:	4602      	mov	r2, r0
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	1ad3      	subs	r3, r2, r3
 8013042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013046:	4293      	cmp	r3, r2
 8013048:	d901      	bls.n	801304e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801304a:	2303      	movs	r3, #3
 801304c:	e03b      	b.n	80130c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801304e:	4b20      	ldr	r3, [pc, #128]	@ (80130d0 <HAL_RCC_ClockConfig+0x260>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	f003 030f 	and.w	r3, r3, #15
 8013056:	683a      	ldr	r2, [r7, #0]
 8013058:	429a      	cmp	r2, r3
 801305a:	d1ed      	bne.n	8013038 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	f003 0304 	and.w	r3, r3, #4
 8013064:	2b00      	cmp	r3, #0
 8013066:	d008      	beq.n	801307a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013068:	4b1a      	ldr	r3, [pc, #104]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 801306a:	689b      	ldr	r3, [r3, #8]
 801306c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	68db      	ldr	r3, [r3, #12]
 8013074:	4917      	ldr	r1, [pc, #92]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8013076:	4313      	orrs	r3, r2
 8013078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	f003 0308 	and.w	r3, r3, #8
 8013082:	2b00      	cmp	r3, #0
 8013084:	d009      	beq.n	801309a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013086:	4b13      	ldr	r3, [pc, #76]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8013088:	689b      	ldr	r3, [r3, #8]
 801308a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	691b      	ldr	r3, [r3, #16]
 8013092:	00db      	lsls	r3, r3, #3
 8013094:	490f      	ldr	r1, [pc, #60]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 8013096:	4313      	orrs	r3, r2
 8013098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801309a:	f000 f825 	bl	80130e8 <HAL_RCC_GetSysClockFreq>
 801309e:	4602      	mov	r2, r0
 80130a0:	4b0c      	ldr	r3, [pc, #48]	@ (80130d4 <HAL_RCC_ClockConfig+0x264>)
 80130a2:	689b      	ldr	r3, [r3, #8]
 80130a4:	091b      	lsrs	r3, r3, #4
 80130a6:	f003 030f 	and.w	r3, r3, #15
 80130aa:	490c      	ldr	r1, [pc, #48]	@ (80130dc <HAL_RCC_ClockConfig+0x26c>)
 80130ac:	5ccb      	ldrb	r3, [r1, r3]
 80130ae:	f003 031f 	and.w	r3, r3, #31
 80130b2:	fa22 f303 	lsr.w	r3, r2, r3
 80130b6:	4a0a      	ldr	r2, [pc, #40]	@ (80130e0 <HAL_RCC_ClockConfig+0x270>)
 80130b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80130ba:	4b0a      	ldr	r3, [pc, #40]	@ (80130e4 <HAL_RCC_ClockConfig+0x274>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	4618      	mov	r0, r3
 80130c0:	f7fb fd50 	bl	800eb64 <HAL_InitTick>
 80130c4:	4603      	mov	r3, r0
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3718      	adds	r7, #24
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	40022000 	.word	0x40022000
 80130d4:	40021000 	.word	0x40021000
 80130d8:	04c4b400 	.word	0x04c4b400
 80130dc:	080175f0 	.word	0x080175f0
 80130e0:	20000020 	.word	0x20000020
 80130e4:	20000024 	.word	0x20000024

080130e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80130e8:	b480      	push	{r7}
 80130ea:	b087      	sub	sp, #28
 80130ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80130ee:	4b2c      	ldr	r3, [pc, #176]	@ (80131a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80130f0:	689b      	ldr	r3, [r3, #8]
 80130f2:	f003 030c 	and.w	r3, r3, #12
 80130f6:	2b04      	cmp	r3, #4
 80130f8:	d102      	bne.n	8013100 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80130fa:	4b2a      	ldr	r3, [pc, #168]	@ (80131a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80130fc:	613b      	str	r3, [r7, #16]
 80130fe:	e047      	b.n	8013190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8013100:	4b27      	ldr	r3, [pc, #156]	@ (80131a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013102:	689b      	ldr	r3, [r3, #8]
 8013104:	f003 030c 	and.w	r3, r3, #12
 8013108:	2b08      	cmp	r3, #8
 801310a:	d102      	bne.n	8013112 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801310c:	4b26      	ldr	r3, [pc, #152]	@ (80131a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 801310e:	613b      	str	r3, [r7, #16]
 8013110:	e03e      	b.n	8013190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8013112:	4b23      	ldr	r3, [pc, #140]	@ (80131a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013114:	689b      	ldr	r3, [r3, #8]
 8013116:	f003 030c 	and.w	r3, r3, #12
 801311a:	2b0c      	cmp	r3, #12
 801311c:	d136      	bne.n	801318c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801311e:	4b20      	ldr	r3, [pc, #128]	@ (80131a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013120:	68db      	ldr	r3, [r3, #12]
 8013122:	f003 0303 	and.w	r3, r3, #3
 8013126:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8013128:	4b1d      	ldr	r3, [pc, #116]	@ (80131a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	091b      	lsrs	r3, r3, #4
 801312e:	f003 030f 	and.w	r3, r3, #15
 8013132:	3301      	adds	r3, #1
 8013134:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	2b03      	cmp	r3, #3
 801313a:	d10c      	bne.n	8013156 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801313c:	4a1a      	ldr	r2, [pc, #104]	@ (80131a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	fbb2 f3f3 	udiv	r3, r2, r3
 8013144:	4a16      	ldr	r2, [pc, #88]	@ (80131a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013146:	68d2      	ldr	r2, [r2, #12]
 8013148:	0a12      	lsrs	r2, r2, #8
 801314a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801314e:	fb02 f303 	mul.w	r3, r2, r3
 8013152:	617b      	str	r3, [r7, #20]
      break;
 8013154:	e00c      	b.n	8013170 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013156:	4a13      	ldr	r2, [pc, #76]	@ (80131a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	fbb2 f3f3 	udiv	r3, r2, r3
 801315e:	4a10      	ldr	r2, [pc, #64]	@ (80131a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013160:	68d2      	ldr	r2, [r2, #12]
 8013162:	0a12      	lsrs	r2, r2, #8
 8013164:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013168:	fb02 f303 	mul.w	r3, r2, r3
 801316c:	617b      	str	r3, [r7, #20]
      break;
 801316e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8013170:	4b0b      	ldr	r3, [pc, #44]	@ (80131a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	0e5b      	lsrs	r3, r3, #25
 8013176:	f003 0303 	and.w	r3, r3, #3
 801317a:	3301      	adds	r3, #1
 801317c:	005b      	lsls	r3, r3, #1
 801317e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8013180:	697a      	ldr	r2, [r7, #20]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	fbb2 f3f3 	udiv	r3, r2, r3
 8013188:	613b      	str	r3, [r7, #16]
 801318a:	e001      	b.n	8013190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801318c:	2300      	movs	r3, #0
 801318e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8013190:	693b      	ldr	r3, [r7, #16]
}
 8013192:	4618      	mov	r0, r3
 8013194:	371c      	adds	r7, #28
 8013196:	46bd      	mov	sp, r7
 8013198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319c:	4770      	bx	lr
 801319e:	bf00      	nop
 80131a0:	40021000 	.word	0x40021000
 80131a4:	00f42400 	.word	0x00f42400
 80131a8:	007a1200 	.word	0x007a1200

080131ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80131ac:	b480      	push	{r7}
 80131ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80131b0:	4b03      	ldr	r3, [pc, #12]	@ (80131c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80131b2:	681b      	ldr	r3, [r3, #0]
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	46bd      	mov	sp, r7
 80131b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131bc:	4770      	bx	lr
 80131be:	bf00      	nop
 80131c0:	20000020 	.word	0x20000020

080131c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80131c8:	f7ff fff0 	bl	80131ac <HAL_RCC_GetHCLKFreq>
 80131cc:	4602      	mov	r2, r0
 80131ce:	4b06      	ldr	r3, [pc, #24]	@ (80131e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80131d0:	689b      	ldr	r3, [r3, #8]
 80131d2:	0a1b      	lsrs	r3, r3, #8
 80131d4:	f003 0307 	and.w	r3, r3, #7
 80131d8:	4904      	ldr	r1, [pc, #16]	@ (80131ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80131da:	5ccb      	ldrb	r3, [r1, r3]
 80131dc:	f003 031f 	and.w	r3, r3, #31
 80131e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	40021000 	.word	0x40021000
 80131ec:	08017600 	.word	0x08017600

080131f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80131f4:	f7ff ffda 	bl	80131ac <HAL_RCC_GetHCLKFreq>
 80131f8:	4602      	mov	r2, r0
 80131fa:	4b06      	ldr	r3, [pc, #24]	@ (8013214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80131fc:	689b      	ldr	r3, [r3, #8]
 80131fe:	0adb      	lsrs	r3, r3, #11
 8013200:	f003 0307 	and.w	r3, r3, #7
 8013204:	4904      	ldr	r1, [pc, #16]	@ (8013218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8013206:	5ccb      	ldrb	r3, [r1, r3]
 8013208:	f003 031f 	and.w	r3, r3, #31
 801320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013210:	4618      	mov	r0, r3
 8013212:	bd80      	pop	{r7, pc}
 8013214:	40021000 	.word	0x40021000
 8013218:	08017600 	.word	0x08017600

0801321c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801321c:	b480      	push	{r7}
 801321e:	b087      	sub	sp, #28
 8013220:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8013222:	4b1e      	ldr	r3, [pc, #120]	@ (801329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	f003 0303 	and.w	r3, r3, #3
 801322a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801322c:	4b1b      	ldr	r3, [pc, #108]	@ (801329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801322e:	68db      	ldr	r3, [r3, #12]
 8013230:	091b      	lsrs	r3, r3, #4
 8013232:	f003 030f 	and.w	r3, r3, #15
 8013236:	3301      	adds	r3, #1
 8013238:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801323a:	693b      	ldr	r3, [r7, #16]
 801323c:	2b03      	cmp	r3, #3
 801323e:	d10c      	bne.n	801325a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013240:	4a17      	ldr	r2, [pc, #92]	@ (80132a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	fbb2 f3f3 	udiv	r3, r2, r3
 8013248:	4a14      	ldr	r2, [pc, #80]	@ (801329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801324a:	68d2      	ldr	r2, [r2, #12]
 801324c:	0a12      	lsrs	r2, r2, #8
 801324e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013252:	fb02 f303 	mul.w	r3, r2, r3
 8013256:	617b      	str	r3, [r7, #20]
    break;
 8013258:	e00c      	b.n	8013274 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801325a:	4a12      	ldr	r2, [pc, #72]	@ (80132a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013262:	4a0e      	ldr	r2, [pc, #56]	@ (801329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013264:	68d2      	ldr	r2, [r2, #12]
 8013266:	0a12      	lsrs	r2, r2, #8
 8013268:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801326c:	fb02 f303 	mul.w	r3, r2, r3
 8013270:	617b      	str	r3, [r7, #20]
    break;
 8013272:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8013274:	4b09      	ldr	r3, [pc, #36]	@ (801329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8013276:	68db      	ldr	r3, [r3, #12]
 8013278:	0e5b      	lsrs	r3, r3, #25
 801327a:	f003 0303 	and.w	r3, r3, #3
 801327e:	3301      	adds	r3, #1
 8013280:	005b      	lsls	r3, r3, #1
 8013282:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8013284:	697a      	ldr	r2, [r7, #20]
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	fbb2 f3f3 	udiv	r3, r2, r3
 801328c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801328e:	687b      	ldr	r3, [r7, #4]
}
 8013290:	4618      	mov	r0, r3
 8013292:	371c      	adds	r7, #28
 8013294:	46bd      	mov	sp, r7
 8013296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329a:	4770      	bx	lr
 801329c:	40021000 	.word	0x40021000
 80132a0:	007a1200 	.word	0x007a1200
 80132a4:	00f42400 	.word	0x00f42400

080132a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b086      	sub	sp, #24
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80132b0:	2300      	movs	r3, #0
 80132b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80132b4:	2300      	movs	r3, #0
 80132b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	f000 8098 	beq.w	80133f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80132c6:	2300      	movs	r3, #0
 80132c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80132ca:	4b43      	ldr	r3, [pc, #268]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80132cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80132ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d10d      	bne.n	80132f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80132d6:	4b40      	ldr	r3, [pc, #256]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80132d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80132da:	4a3f      	ldr	r2, [pc, #252]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80132dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80132e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80132e2:	4b3d      	ldr	r3, [pc, #244]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80132e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80132e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80132ea:	60bb      	str	r3, [r7, #8]
 80132ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80132ee:	2301      	movs	r3, #1
 80132f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80132f2:	4b3a      	ldr	r3, [pc, #232]	@ (80133dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	4a39      	ldr	r2, [pc, #228]	@ (80133dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80132f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80132fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80132fe:	f7fb fc7d 	bl	800ebfc <HAL_GetTick>
 8013302:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013304:	e009      	b.n	801331a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013306:	f7fb fc79 	bl	800ebfc <HAL_GetTick>
 801330a:	4602      	mov	r2, r0
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	1ad3      	subs	r3, r2, r3
 8013310:	2b02      	cmp	r3, #2
 8013312:	d902      	bls.n	801331a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8013314:	2303      	movs	r3, #3
 8013316:	74fb      	strb	r3, [r7, #19]
        break;
 8013318:	e005      	b.n	8013326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801331a:	4b30      	ldr	r3, [pc, #192]	@ (80133dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013322:	2b00      	cmp	r3, #0
 8013324:	d0ef      	beq.n	8013306 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8013326:	7cfb      	ldrb	r3, [r7, #19]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d159      	bne.n	80133e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801332c:	4b2a      	ldr	r3, [pc, #168]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013336:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d01e      	beq.n	801337c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013342:	697a      	ldr	r2, [r7, #20]
 8013344:	429a      	cmp	r2, r3
 8013346:	d019      	beq.n	801337c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8013348:	4b23      	ldr	r3, [pc, #140]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801334e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8013354:	4b20      	ldr	r3, [pc, #128]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801335a:	4a1f      	ldr	r2, [pc, #124]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801335c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013364:	4b1c      	ldr	r3, [pc, #112]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801336a:	4a1b      	ldr	r2, [pc, #108]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801336c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8013374:	4a18      	ldr	r2, [pc, #96]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	f003 0301 	and.w	r3, r3, #1
 8013382:	2b00      	cmp	r3, #0
 8013384:	d016      	beq.n	80133b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013386:	f7fb fc39 	bl	800ebfc <HAL_GetTick>
 801338a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801338c:	e00b      	b.n	80133a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801338e:	f7fb fc35 	bl	800ebfc <HAL_GetTick>
 8013392:	4602      	mov	r2, r0
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	1ad3      	subs	r3, r2, r3
 8013398:	f241 3288 	movw	r2, #5000	@ 0x1388
 801339c:	4293      	cmp	r3, r2
 801339e:	d902      	bls.n	80133a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80133a0:	2303      	movs	r3, #3
 80133a2:	74fb      	strb	r3, [r7, #19]
            break;
 80133a4:	e006      	b.n	80133b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80133a6:	4b0c      	ldr	r3, [pc, #48]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80133a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80133ac:	f003 0302 	and.w	r3, r3, #2
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d0ec      	beq.n	801338e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80133b4:	7cfb      	ldrb	r3, [r7, #19]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d10b      	bne.n	80133d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80133ba:	4b07      	ldr	r3, [pc, #28]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80133bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80133c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133c8:	4903      	ldr	r1, [pc, #12]	@ (80133d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80133ca:	4313      	orrs	r3, r2
 80133cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80133d0:	e008      	b.n	80133e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80133d2:	7cfb      	ldrb	r3, [r7, #19]
 80133d4:	74bb      	strb	r3, [r7, #18]
 80133d6:	e005      	b.n	80133e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80133d8:	40021000 	.word	0x40021000
 80133dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80133e0:	7cfb      	ldrb	r3, [r7, #19]
 80133e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80133e4:	7c7b      	ldrb	r3, [r7, #17]
 80133e6:	2b01      	cmp	r3, #1
 80133e8:	d105      	bne.n	80133f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80133ea:	4ba7      	ldr	r3, [pc, #668]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80133ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80133ee:	4aa6      	ldr	r2, [pc, #664]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80133f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80133f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f003 0301 	and.w	r3, r3, #1
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d00a      	beq.n	8013418 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013402:	4ba1      	ldr	r3, [pc, #644]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013408:	f023 0203 	bic.w	r2, r3, #3
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	685b      	ldr	r3, [r3, #4]
 8013410:	499d      	ldr	r1, [pc, #628]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013412:	4313      	orrs	r3, r2
 8013414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f003 0302 	and.w	r3, r3, #2
 8013420:	2b00      	cmp	r3, #0
 8013422:	d00a      	beq.n	801343a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013424:	4b98      	ldr	r3, [pc, #608]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801342a:	f023 020c 	bic.w	r2, r3, #12
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	689b      	ldr	r3, [r3, #8]
 8013432:	4995      	ldr	r1, [pc, #596]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013434:	4313      	orrs	r3, r2
 8013436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	f003 0304 	and.w	r3, r3, #4
 8013442:	2b00      	cmp	r3, #0
 8013444:	d00a      	beq.n	801345c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8013446:	4b90      	ldr	r3, [pc, #576]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801344c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	68db      	ldr	r3, [r3, #12]
 8013454:	498c      	ldr	r1, [pc, #560]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013456:	4313      	orrs	r3, r2
 8013458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f003 0308 	and.w	r3, r3, #8
 8013464:	2b00      	cmp	r3, #0
 8013466:	d00a      	beq.n	801347e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8013468:	4b87      	ldr	r3, [pc, #540]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801346e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	691b      	ldr	r3, [r3, #16]
 8013476:	4984      	ldr	r1, [pc, #528]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013478:	4313      	orrs	r3, r2
 801347a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	f003 0310 	and.w	r3, r3, #16
 8013486:	2b00      	cmp	r3, #0
 8013488:	d00a      	beq.n	80134a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801348a:	4b7f      	ldr	r3, [pc, #508]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	695b      	ldr	r3, [r3, #20]
 8013498:	497b      	ldr	r1, [pc, #492]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801349a:	4313      	orrs	r3, r2
 801349c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	f003 0320 	and.w	r3, r3, #32
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d00a      	beq.n	80134c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80134ac:	4b76      	ldr	r3, [pc, #472]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80134ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80134b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	699b      	ldr	r3, [r3, #24]
 80134ba:	4973      	ldr	r1, [pc, #460]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80134bc:	4313      	orrs	r3, r2
 80134be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d00a      	beq.n	80134e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80134ce:	4b6e      	ldr	r3, [pc, #440]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80134d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80134d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	69db      	ldr	r3, [r3, #28]
 80134dc:	496a      	ldr	r1, [pc, #424]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80134de:	4313      	orrs	r3, r2
 80134e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d00a      	beq.n	8013506 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80134f0:	4b65      	ldr	r3, [pc, #404]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80134f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80134f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6a1b      	ldr	r3, [r3, #32]
 80134fe:	4962      	ldr	r1, [pc, #392]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013500:	4313      	orrs	r3, r2
 8013502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801350e:	2b00      	cmp	r3, #0
 8013510:	d00a      	beq.n	8013528 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8013512:	4b5d      	ldr	r3, [pc, #372]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013518:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013520:	4959      	ldr	r1, [pc, #356]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013522:	4313      	orrs	r3, r2
 8013524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013530:	2b00      	cmp	r3, #0
 8013532:	d00a      	beq.n	801354a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013534:	4b54      	ldr	r3, [pc, #336]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801353a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013542:	4951      	ldr	r1, [pc, #324]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013544:	4313      	orrs	r3, r2
 8013546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013552:	2b00      	cmp	r3, #0
 8013554:	d015      	beq.n	8013582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013556:	4b4c      	ldr	r3, [pc, #304]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801355c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013564:	4948      	ldr	r1, [pc, #288]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013566:	4313      	orrs	r3, r2
 8013568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013570:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013574:	d105      	bne.n	8013582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8013576:	4b44      	ldr	r3, [pc, #272]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013578:	68db      	ldr	r3, [r3, #12]
 801357a:	4a43      	ldr	r2, [pc, #268]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801357c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013580:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801358a:	2b00      	cmp	r3, #0
 801358c:	d015      	beq.n	80135ba <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801358e:	4b3e      	ldr	r3, [pc, #248]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013594:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801359c:	493a      	ldr	r1, [pc, #232]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801359e:	4313      	orrs	r3, r2
 80135a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80135ac:	d105      	bne.n	80135ba <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80135ae:	4b36      	ldr	r3, [pc, #216]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	4a35      	ldr	r2, [pc, #212]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80135b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80135b8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d015      	beq.n	80135f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80135c6:	4b30      	ldr	r3, [pc, #192]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80135c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80135cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80135d4:	492c      	ldr	r1, [pc, #176]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80135d6:	4313      	orrs	r3, r2
 80135d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80135e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80135e4:	d105      	bne.n	80135f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80135e6:	4b28      	ldr	r3, [pc, #160]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80135e8:	68db      	ldr	r3, [r3, #12]
 80135ea:	4a27      	ldr	r2, [pc, #156]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80135ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80135f0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d015      	beq.n	801362a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80135fe:	4b22      	ldr	r3, [pc, #136]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013604:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801360c:	491e      	ldr	r1, [pc, #120]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801360e:	4313      	orrs	r3, r2
 8013610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801361c:	d105      	bne.n	801362a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801361e:	4b1a      	ldr	r3, [pc, #104]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013620:	68db      	ldr	r3, [r3, #12]
 8013622:	4a19      	ldr	r2, [pc, #100]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013628:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013632:	2b00      	cmp	r3, #0
 8013634:	d015      	beq.n	8013662 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013636:	4b14      	ldr	r3, [pc, #80]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801363c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013644:	4910      	ldr	r1, [pc, #64]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013646:	4313      	orrs	r3, r2
 8013648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013650:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013654:	d105      	bne.n	8013662 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8013656:	4b0c      	ldr	r3, [pc, #48]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013658:	68db      	ldr	r3, [r3, #12]
 801365a:	4a0b      	ldr	r2, [pc, #44]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801365c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013660:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801366a:	2b00      	cmp	r3, #0
 801366c:	d018      	beq.n	80136a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801366e:	4b06      	ldr	r3, [pc, #24]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8013670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013674:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801367c:	4902      	ldr	r1, [pc, #8]	@ (8013688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801367e:	4313      	orrs	r3, r2
 8013680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	e001      	b.n	801368c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8013688:	40021000 	.word	0x40021000
 801368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801368e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013692:	d105      	bne.n	80136a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8013694:	4b21      	ldr	r3, [pc, #132]	@ (801371c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8013696:	68db      	ldr	r3, [r3, #12]
 8013698:	4a20      	ldr	r2, [pc, #128]	@ (801371c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801369a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801369e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d015      	beq.n	80136d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80136ac:	4b1b      	ldr	r3, [pc, #108]	@ (801371c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80136ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80136b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80136ba:	4918      	ldr	r1, [pc, #96]	@ (801371c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80136bc:	4313      	orrs	r3, r2
 80136be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80136c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80136ca:	d105      	bne.n	80136d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80136cc:	4b13      	ldr	r3, [pc, #76]	@ (801371c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80136ce:	68db      	ldr	r3, [r3, #12]
 80136d0:	4a12      	ldr	r2, [pc, #72]	@ (801371c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80136d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80136d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d015      	beq.n	8013710 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80136e4:	4b0d      	ldr	r3, [pc, #52]	@ (801371c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80136e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80136ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80136f2:	490a      	ldr	r1, [pc, #40]	@ (801371c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80136f4:	4313      	orrs	r3, r2
 80136f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80136fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013702:	d105      	bne.n	8013710 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8013704:	4b05      	ldr	r3, [pc, #20]	@ (801371c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8013706:	68db      	ldr	r3, [r3, #12]
 8013708:	4a04      	ldr	r2, [pc, #16]	@ (801371c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801370a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801370e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8013710:	7cbb      	ldrb	r3, [r7, #18]
}
 8013712:	4618      	mov	r0, r3
 8013714:	3718      	adds	r7, #24
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	40021000 	.word	0x40021000

08013720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b084      	sub	sp, #16
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d101      	bne.n	8013732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801372e:	2301      	movs	r3, #1
 8013730:	e09d      	b.n	801386e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013736:	2b00      	cmp	r3, #0
 8013738:	d108      	bne.n	801374c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	685b      	ldr	r3, [r3, #4]
 801373e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013742:	d009      	beq.n	8013758 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2200      	movs	r2, #0
 8013748:	61da      	str	r2, [r3, #28]
 801374a:	e005      	b.n	8013758 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2200      	movs	r2, #0
 8013750:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2200      	movs	r2, #0
 8013756:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2200      	movs	r2, #0
 801375c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8013764:	b2db      	uxtb	r3, r3
 8013766:	2b00      	cmp	r3, #0
 8013768:	d106      	bne.n	8013778 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2200      	movs	r2, #0
 801376e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f7fa ffe0 	bl	800e738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2202      	movs	r2, #2
 801377c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801378e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	68db      	ldr	r3, [r3, #12]
 8013794:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8013798:	d902      	bls.n	80137a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801379a:	2300      	movs	r3, #0
 801379c:	60fb      	str	r3, [r7, #12]
 801379e:	e002      	b.n	80137a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80137a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80137a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	68db      	ldr	r3, [r3, #12]
 80137aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80137ae:	d007      	beq.n	80137c0 <HAL_SPI_Init+0xa0>
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80137b8:	d002      	beq.n	80137c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2200      	movs	r2, #0
 80137be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	689b      	ldr	r3, [r3, #8]
 80137cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80137d0:	431a      	orrs	r2, r3
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	691b      	ldr	r3, [r3, #16]
 80137d6:	f003 0302 	and.w	r3, r3, #2
 80137da:	431a      	orrs	r2, r3
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	695b      	ldr	r3, [r3, #20]
 80137e0:	f003 0301 	and.w	r3, r3, #1
 80137e4:	431a      	orrs	r2, r3
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	699b      	ldr	r3, [r3, #24]
 80137ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80137ee:	431a      	orrs	r2, r3
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	69db      	ldr	r3, [r3, #28]
 80137f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80137f8:	431a      	orrs	r2, r3
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6a1b      	ldr	r3, [r3, #32]
 80137fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013802:	ea42 0103 	orr.w	r1, r2, r3
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801380a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	430a      	orrs	r2, r1
 8013814:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	699b      	ldr	r3, [r3, #24]
 801381a:	0c1b      	lsrs	r3, r3, #16
 801381c:	f003 0204 	and.w	r2, r3, #4
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013824:	f003 0310 	and.w	r3, r3, #16
 8013828:	431a      	orrs	r2, r3
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801382e:	f003 0308 	and.w	r3, r3, #8
 8013832:	431a      	orrs	r2, r3
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	68db      	ldr	r3, [r3, #12]
 8013838:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801383c:	ea42 0103 	orr.w	r1, r2, r3
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	430a      	orrs	r2, r1
 801384c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	69da      	ldr	r2, [r3, #28]
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801385c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2200      	movs	r2, #0
 8013862:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2201      	movs	r2, #1
 8013868:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 801386c:	2300      	movs	r3, #0
}
 801386e:	4618      	mov	r0, r3
 8013870:	3710      	adds	r7, #16
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}

08013876 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013876:	b580      	push	{r7, lr}
 8013878:	b088      	sub	sp, #32
 801387a:	af00      	add	r7, sp, #0
 801387c:	60f8      	str	r0, [r7, #12]
 801387e:	60b9      	str	r1, [r7, #8]
 8013880:	603b      	str	r3, [r7, #0]
 8013882:	4613      	mov	r3, r2
 8013884:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013886:	2300      	movs	r3, #0
 8013888:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8013890:	2b01      	cmp	r3, #1
 8013892:	d101      	bne.n	8013898 <HAL_SPI_Transmit+0x22>
 8013894:	2302      	movs	r3, #2
 8013896:	e158      	b.n	8013b4a <HAL_SPI_Transmit+0x2d4>
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	2201      	movs	r2, #1
 801389c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80138a0:	f7fb f9ac 	bl	800ebfc <HAL_GetTick>
 80138a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80138a6:	88fb      	ldrh	r3, [r7, #6]
 80138a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80138b0:	b2db      	uxtb	r3, r3
 80138b2:	2b01      	cmp	r3, #1
 80138b4:	d002      	beq.n	80138bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80138b6:	2302      	movs	r3, #2
 80138b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80138ba:	e13d      	b.n	8013b38 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d002      	beq.n	80138c8 <HAL_SPI_Transmit+0x52>
 80138c2:	88fb      	ldrh	r3, [r7, #6]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d102      	bne.n	80138ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80138c8:	2301      	movs	r3, #1
 80138ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80138cc:	e134      	b.n	8013b38 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2203      	movs	r2, #3
 80138d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2200      	movs	r2, #0
 80138da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	68ba      	ldr	r2, [r7, #8]
 80138e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	88fa      	ldrh	r2, [r7, #6]
 80138e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	88fa      	ldrh	r2, [r7, #6]
 80138ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	2200      	movs	r2, #0
 80138f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2200      	movs	r2, #0
 80138f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	2200      	movs	r2, #0
 8013900:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2200      	movs	r2, #0
 8013908:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	2200      	movs	r2, #0
 801390e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	689b      	ldr	r3, [r3, #8]
 8013914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013918:	d10f      	bne.n	801393a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	681a      	ldr	r2, [r3, #0]
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013928:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	681a      	ldr	r2, [r3, #0]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8013938:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013944:	2b40      	cmp	r3, #64	@ 0x40
 8013946:	d007      	beq.n	8013958 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	681a      	ldr	r2, [r3, #0]
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013956:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8013960:	d94b      	bls.n	80139fa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d002      	beq.n	8013970 <HAL_SPI_Transmit+0xfa>
 801396a:	8afb      	ldrh	r3, [r7, #22]
 801396c:	2b01      	cmp	r3, #1
 801396e:	d13e      	bne.n	80139ee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013974:	881a      	ldrh	r2, [r3, #0]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013980:	1c9a      	adds	r2, r3, #2
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801398a:	b29b      	uxth	r3, r3
 801398c:	3b01      	subs	r3, #1
 801398e:	b29a      	uxth	r2, r3
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013994:	e02b      	b.n	80139ee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	689b      	ldr	r3, [r3, #8]
 801399c:	f003 0302 	and.w	r3, r3, #2
 80139a0:	2b02      	cmp	r3, #2
 80139a2:	d112      	bne.n	80139ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139a8:	881a      	ldrh	r2, [r3, #0]
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139b4:	1c9a      	adds	r2, r3, #2
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80139be:	b29b      	uxth	r3, r3
 80139c0:	3b01      	subs	r3, #1
 80139c2:	b29a      	uxth	r2, r3
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80139c8:	e011      	b.n	80139ee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80139ca:	f7fb f917 	bl	800ebfc <HAL_GetTick>
 80139ce:	4602      	mov	r2, r0
 80139d0:	69bb      	ldr	r3, [r7, #24]
 80139d2:	1ad3      	subs	r3, r2, r3
 80139d4:	683a      	ldr	r2, [r7, #0]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d803      	bhi.n	80139e2 <HAL_SPI_Transmit+0x16c>
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139e0:	d102      	bne.n	80139e8 <HAL_SPI_Transmit+0x172>
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d102      	bne.n	80139ee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80139e8:	2303      	movs	r3, #3
 80139ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80139ec:	e0a4      	b.n	8013b38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80139f2:	b29b      	uxth	r3, r3
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d1ce      	bne.n	8013996 <HAL_SPI_Transmit+0x120>
 80139f8:	e07c      	b.n	8013af4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d002      	beq.n	8013a08 <HAL_SPI_Transmit+0x192>
 8013a02:	8afb      	ldrh	r3, [r7, #22]
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d170      	bne.n	8013aea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	2b01      	cmp	r3, #1
 8013a10:	d912      	bls.n	8013a38 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a16:	881a      	ldrh	r2, [r3, #0]
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a22:	1c9a      	adds	r2, r3, #2
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	3b02      	subs	r3, #2
 8013a30:	b29a      	uxth	r2, r3
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8013a36:	e058      	b.n	8013aea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	330c      	adds	r3, #12
 8013a42:	7812      	ldrb	r2, [r2, #0]
 8013a44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a4a:	1c5a      	adds	r2, r3, #1
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013a54:	b29b      	uxth	r3, r3
 8013a56:	3b01      	subs	r3, #1
 8013a58:	b29a      	uxth	r2, r3
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8013a5e:	e044      	b.n	8013aea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	689b      	ldr	r3, [r3, #8]
 8013a66:	f003 0302 	and.w	r3, r3, #2
 8013a6a:	2b02      	cmp	r3, #2
 8013a6c:	d12b      	bne.n	8013ac6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013a72:	b29b      	uxth	r3, r3
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	d912      	bls.n	8013a9e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a7c:	881a      	ldrh	r2, [r3, #0]
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a88:	1c9a      	adds	r2, r3, #2
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	3b02      	subs	r3, #2
 8013a96:	b29a      	uxth	r2, r3
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8013a9c:	e025      	b.n	8013aea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	330c      	adds	r3, #12
 8013aa8:	7812      	ldrb	r2, [r2, #0]
 8013aaa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ab0:	1c5a      	adds	r2, r3, #1
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	3b01      	subs	r3, #1
 8013abe:	b29a      	uxth	r2, r3
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8013ac4:	e011      	b.n	8013aea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013ac6:	f7fb f899 	bl	800ebfc <HAL_GetTick>
 8013aca:	4602      	mov	r2, r0
 8013acc:	69bb      	ldr	r3, [r7, #24]
 8013ace:	1ad3      	subs	r3, r2, r3
 8013ad0:	683a      	ldr	r2, [r7, #0]
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d803      	bhi.n	8013ade <HAL_SPI_Transmit+0x268>
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013adc:	d102      	bne.n	8013ae4 <HAL_SPI_Transmit+0x26e>
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d102      	bne.n	8013aea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8013ae4:	2303      	movs	r3, #3
 8013ae6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013ae8:	e026      	b.n	8013b38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013aee:	b29b      	uxth	r3, r3
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d1b5      	bne.n	8013a60 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013af4:	69ba      	ldr	r2, [r7, #24]
 8013af6:	6839      	ldr	r1, [r7, #0]
 8013af8:	68f8      	ldr	r0, [r7, #12]
 8013afa:	f000 fc6f 	bl	80143dc <SPI_EndRxTxTransaction>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d002      	beq.n	8013b0a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	2220      	movs	r2, #32
 8013b08:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	689b      	ldr	r3, [r3, #8]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d10a      	bne.n	8013b28 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013b12:	2300      	movs	r3, #0
 8013b14:	613b      	str	r3, [r7, #16]
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	68db      	ldr	r3, [r3, #12]
 8013b1c:	613b      	str	r3, [r7, #16]
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	689b      	ldr	r3, [r3, #8]
 8013b24:	613b      	str	r3, [r7, #16]
 8013b26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d002      	beq.n	8013b36 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8013b30:	2301      	movs	r3, #1
 8013b32:	77fb      	strb	r3, [r7, #31]
 8013b34:	e000      	b.n	8013b38 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8013b36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	2200      	movs	r2, #0
 8013b44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8013b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3720      	adds	r7, #32
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}

08013b52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013b52:	b580      	push	{r7, lr}
 8013b54:	b08a      	sub	sp, #40	@ 0x28
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	60f8      	str	r0, [r7, #12]
 8013b5a:	60b9      	str	r1, [r7, #8]
 8013b5c:	607a      	str	r2, [r7, #4]
 8013b5e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013b60:	2301      	movs	r3, #1
 8013b62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013b64:	2300      	movs	r3, #0
 8013b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8013b70:	2b01      	cmp	r3, #1
 8013b72:	d101      	bne.n	8013b78 <HAL_SPI_TransmitReceive+0x26>
 8013b74:	2302      	movs	r3, #2
 8013b76:	e1fb      	b.n	8013f70 <HAL_SPI_TransmitReceive+0x41e>
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013b80:	f7fb f83c 	bl	800ebfc <HAL_GetTick>
 8013b84:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8013b8c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	685b      	ldr	r3, [r3, #4]
 8013b92:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8013b94:	887b      	ldrh	r3, [r7, #2]
 8013b96:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8013b98:	887b      	ldrh	r3, [r7, #2]
 8013b9a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013b9c:	7efb      	ldrb	r3, [r7, #27]
 8013b9e:	2b01      	cmp	r3, #1
 8013ba0:	d00e      	beq.n	8013bc0 <HAL_SPI_TransmitReceive+0x6e>
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013ba8:	d106      	bne.n	8013bb8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	689b      	ldr	r3, [r3, #8]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d102      	bne.n	8013bb8 <HAL_SPI_TransmitReceive+0x66>
 8013bb2:	7efb      	ldrb	r3, [r7, #27]
 8013bb4:	2b04      	cmp	r3, #4
 8013bb6:	d003      	beq.n	8013bc0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8013bb8:	2302      	movs	r3, #2
 8013bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8013bbe:	e1cd      	b.n	8013f5c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d005      	beq.n	8013bd2 <HAL_SPI_TransmitReceive+0x80>
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d002      	beq.n	8013bd2 <HAL_SPI_TransmitReceive+0x80>
 8013bcc:	887b      	ldrh	r3, [r7, #2]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d103      	bne.n	8013bda <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8013bd8:	e1c0      	b.n	8013f5c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8013be0:	b2db      	uxtb	r3, r3
 8013be2:	2b04      	cmp	r3, #4
 8013be4:	d003      	beq.n	8013bee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	2205      	movs	r2, #5
 8013bea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	687a      	ldr	r2, [r7, #4]
 8013bf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	887a      	ldrh	r2, [r7, #2]
 8013bfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	887a      	ldrh	r2, [r7, #2]
 8013c06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	68ba      	ldr	r2, [r7, #8]
 8013c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	887a      	ldrh	r2, [r7, #2]
 8013c14:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	887a      	ldrh	r2, [r7, #2]
 8013c1a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	2200      	movs	r2, #0
 8013c20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	2200      	movs	r2, #0
 8013c26:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	68db      	ldr	r3, [r3, #12]
 8013c2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8013c30:	d802      	bhi.n	8013c38 <HAL_SPI_TransmitReceive+0xe6>
 8013c32:	8a3b      	ldrh	r3, [r7, #16]
 8013c34:	2b01      	cmp	r3, #1
 8013c36:	d908      	bls.n	8013c4a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	685a      	ldr	r2, [r3, #4]
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8013c46:	605a      	str	r2, [r3, #4]
 8013c48:	e007      	b.n	8013c5a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	685a      	ldr	r2, [r3, #4]
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013c58:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013c64:	2b40      	cmp	r3, #64	@ 0x40
 8013c66:	d007      	beq.n	8013c78 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	681a      	ldr	r2, [r3, #0]
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013c76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	68db      	ldr	r3, [r3, #12]
 8013c7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8013c80:	d97c      	bls.n	8013d7c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d002      	beq.n	8013c90 <HAL_SPI_TransmitReceive+0x13e>
 8013c8a:	8a7b      	ldrh	r3, [r7, #18]
 8013c8c:	2b01      	cmp	r3, #1
 8013c8e:	d169      	bne.n	8013d64 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c94:	881a      	ldrh	r2, [r3, #0]
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ca0:	1c9a      	adds	r2, r3, #2
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	3b01      	subs	r3, #1
 8013cae:	b29a      	uxth	r2, r3
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013cb4:	e056      	b.n	8013d64 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	689b      	ldr	r3, [r3, #8]
 8013cbc:	f003 0302 	and.w	r3, r3, #2
 8013cc0:	2b02      	cmp	r3, #2
 8013cc2:	d11b      	bne.n	8013cfc <HAL_SPI_TransmitReceive+0x1aa>
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d016      	beq.n	8013cfc <HAL_SPI_TransmitReceive+0x1aa>
 8013cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cd0:	2b01      	cmp	r3, #1
 8013cd2:	d113      	bne.n	8013cfc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cd8:	881a      	ldrh	r2, [r3, #0]
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ce4:	1c9a      	adds	r2, r3, #2
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	3b01      	subs	r3, #1
 8013cf2:	b29a      	uxth	r2, r3
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	689b      	ldr	r3, [r3, #8]
 8013d02:	f003 0301 	and.w	r3, r3, #1
 8013d06:	2b01      	cmp	r3, #1
 8013d08:	d11c      	bne.n	8013d44 <HAL_SPI_TransmitReceive+0x1f2>
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d016      	beq.n	8013d44 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	68da      	ldr	r2, [r3, #12]
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d20:	b292      	uxth	r2, r2
 8013d22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d28:	1c9a      	adds	r2, r3, #2
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013d34:	b29b      	uxth	r3, r3
 8013d36:	3b01      	subs	r3, #1
 8013d38:	b29a      	uxth	r2, r3
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013d40:	2301      	movs	r3, #1
 8013d42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013d44:	f7fa ff5a 	bl	800ebfc <HAL_GetTick>
 8013d48:	4602      	mov	r2, r0
 8013d4a:	69fb      	ldr	r3, [r7, #28]
 8013d4c:	1ad3      	subs	r3, r2, r3
 8013d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d807      	bhi.n	8013d64 <HAL_SPI_TransmitReceive+0x212>
 8013d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d5a:	d003      	beq.n	8013d64 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8013d5c:	2303      	movs	r3, #3
 8013d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8013d62:	e0fb      	b.n	8013f5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013d68:	b29b      	uxth	r3, r3
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d1a3      	bne.n	8013cb6 <HAL_SPI_TransmitReceive+0x164>
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013d74:	b29b      	uxth	r3, r3
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d19d      	bne.n	8013cb6 <HAL_SPI_TransmitReceive+0x164>
 8013d7a:	e0df      	b.n	8013f3c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d003      	beq.n	8013d8c <HAL_SPI_TransmitReceive+0x23a>
 8013d84:	8a7b      	ldrh	r3, [r7, #18]
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	f040 80cb 	bne.w	8013f22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013d90:	b29b      	uxth	r3, r3
 8013d92:	2b01      	cmp	r3, #1
 8013d94:	d912      	bls.n	8013dbc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d9a:	881a      	ldrh	r2, [r3, #0]
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013da6:	1c9a      	adds	r2, r3, #2
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013db0:	b29b      	uxth	r3, r3
 8013db2:	3b02      	subs	r3, #2
 8013db4:	b29a      	uxth	r2, r3
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8013dba:	e0b2      	b.n	8013f22 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	330c      	adds	r3, #12
 8013dc6:	7812      	ldrb	r2, [r2, #0]
 8013dc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dce:	1c5a      	adds	r2, r3, #1
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	3b01      	subs	r3, #1
 8013ddc:	b29a      	uxth	r2, r3
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013de2:	e09e      	b.n	8013f22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	689b      	ldr	r3, [r3, #8]
 8013dea:	f003 0302 	and.w	r3, r3, #2
 8013dee:	2b02      	cmp	r3, #2
 8013df0:	d134      	bne.n	8013e5c <HAL_SPI_TransmitReceive+0x30a>
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013df6:	b29b      	uxth	r3, r3
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d02f      	beq.n	8013e5c <HAL_SPI_TransmitReceive+0x30a>
 8013dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dfe:	2b01      	cmp	r3, #1
 8013e00:	d12c      	bne.n	8013e5c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013e06:	b29b      	uxth	r3, r3
 8013e08:	2b01      	cmp	r3, #1
 8013e0a:	d912      	bls.n	8013e32 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e10:	881a      	ldrh	r2, [r3, #0]
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e1c:	1c9a      	adds	r2, r3, #2
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	3b02      	subs	r3, #2
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8013e30:	e012      	b.n	8013e58 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	330c      	adds	r3, #12
 8013e3c:	7812      	ldrb	r2, [r2, #0]
 8013e3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e44:	1c5a      	adds	r2, r3, #1
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013e4e:	b29b      	uxth	r3, r3
 8013e50:	3b01      	subs	r3, #1
 8013e52:	b29a      	uxth	r2, r3
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013e58:	2300      	movs	r3, #0
 8013e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	689b      	ldr	r3, [r3, #8]
 8013e62:	f003 0301 	and.w	r3, r3, #1
 8013e66:	2b01      	cmp	r3, #1
 8013e68:	d148      	bne.n	8013efc <HAL_SPI_TransmitReceive+0x3aa>
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013e70:	b29b      	uxth	r3, r3
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d042      	beq.n	8013efc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013e7c:	b29b      	uxth	r3, r3
 8013e7e:	2b01      	cmp	r3, #1
 8013e80:	d923      	bls.n	8013eca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	68da      	ldr	r2, [r3, #12]
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e8c:	b292      	uxth	r2, r2
 8013e8e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e94:	1c9a      	adds	r2, r3, #2
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013ea0:	b29b      	uxth	r3, r3
 8013ea2:	3b02      	subs	r3, #2
 8013ea4:	b29a      	uxth	r2, r3
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	2b01      	cmp	r3, #1
 8013eb6:	d81f      	bhi.n	8013ef8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	685a      	ldr	r2, [r3, #4]
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013ec6:	605a      	str	r2, [r3, #4]
 8013ec8:	e016      	b.n	8013ef8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	f103 020c 	add.w	r2, r3, #12
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ed6:	7812      	ldrb	r2, [r2, #0]
 8013ed8:	b2d2      	uxtb	r2, r2
 8013eda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ee0:	1c5a      	adds	r2, r3, #1
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	3b01      	subs	r3, #1
 8013ef0:	b29a      	uxth	r2, r3
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013ef8:	2301      	movs	r3, #1
 8013efa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013efc:	f7fa fe7e 	bl	800ebfc <HAL_GetTick>
 8013f00:	4602      	mov	r2, r0
 8013f02:	69fb      	ldr	r3, [r7, #28]
 8013f04:	1ad3      	subs	r3, r2, r3
 8013f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	d803      	bhi.n	8013f14 <HAL_SPI_TransmitReceive+0x3c2>
 8013f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f12:	d102      	bne.n	8013f1a <HAL_SPI_TransmitReceive+0x3c8>
 8013f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d103      	bne.n	8013f22 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8013f1a:	2303      	movs	r3, #3
 8013f1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8013f20:	e01c      	b.n	8013f5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	f47f af5b 	bne.w	8013de4 <HAL_SPI_TransmitReceive+0x292>
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	f47f af54 	bne.w	8013de4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013f3c:	69fa      	ldr	r2, [r7, #28]
 8013f3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013f40:	68f8      	ldr	r0, [r7, #12]
 8013f42:	f000 fa4b 	bl	80143dc <SPI_EndRxTxTransaction>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d006      	beq.n	8013f5a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	2220      	movs	r2, #32
 8013f56:	661a      	str	r2, [r3, #96]	@ 0x60
 8013f58:	e000      	b.n	8013f5c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8013f5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	2201      	movs	r2, #1
 8013f60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2200      	movs	r2, #0
 8013f68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8013f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3728      	adds	r7, #40	@ 0x28
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}

08013f78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b088      	sub	sp, #32
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	685b      	ldr	r3, [r3, #4]
 8013f86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	689b      	ldr	r3, [r3, #8]
 8013f8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013f90:	69bb      	ldr	r3, [r7, #24]
 8013f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d10e      	bne.n	8013fb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8013f9a:	69bb      	ldr	r3, [r7, #24]
 8013f9c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d009      	beq.n	8013fb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d004      	beq.n	8013fb8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	4798      	blx	r3
    return;
 8013fb6:	e0ce      	b.n	8014156 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8013fb8:	69bb      	ldr	r3, [r7, #24]
 8013fba:	f003 0302 	and.w	r3, r3, #2
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d009      	beq.n	8013fd6 <HAL_SPI_IRQHandler+0x5e>
 8013fc2:	69fb      	ldr	r3, [r7, #28]
 8013fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d004      	beq.n	8013fd6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	4798      	blx	r3
    return;
 8013fd4:	e0bf      	b.n	8014156 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8013fd6:	69bb      	ldr	r3, [r7, #24]
 8013fd8:	f003 0320 	and.w	r3, r3, #32
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d10a      	bne.n	8013ff6 <HAL_SPI_IRQHandler+0x7e>
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d105      	bne.n	8013ff6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8013fea:	69bb      	ldr	r3, [r7, #24]
 8013fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f000 80b0 	beq.w	8014156 <HAL_SPI_IRQHandler+0x1de>
 8013ff6:	69fb      	ldr	r3, [r7, #28]
 8013ff8:	f003 0320 	and.w	r3, r3, #32
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	f000 80aa 	beq.w	8014156 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014002:	69bb      	ldr	r3, [r7, #24]
 8014004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014008:	2b00      	cmp	r3, #0
 801400a:	d023      	beq.n	8014054 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8014012:	b2db      	uxtb	r3, r3
 8014014:	2b03      	cmp	r3, #3
 8014016:	d011      	beq.n	801403c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801401c:	f043 0204 	orr.w	r2, r3, #4
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014024:	2300      	movs	r3, #0
 8014026:	617b      	str	r3, [r7, #20]
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	68db      	ldr	r3, [r3, #12]
 801402e:	617b      	str	r3, [r7, #20]
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	689b      	ldr	r3, [r3, #8]
 8014036:	617b      	str	r3, [r7, #20]
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	e00b      	b.n	8014054 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801403c:	2300      	movs	r3, #0
 801403e:	613b      	str	r3, [r7, #16]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	68db      	ldr	r3, [r3, #12]
 8014046:	613b      	str	r3, [r7, #16]
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	689b      	ldr	r3, [r3, #8]
 801404e:	613b      	str	r3, [r7, #16]
 8014050:	693b      	ldr	r3, [r7, #16]
        return;
 8014052:	e080      	b.n	8014156 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8014054:	69bb      	ldr	r3, [r7, #24]
 8014056:	f003 0320 	and.w	r3, r3, #32
 801405a:	2b00      	cmp	r3, #0
 801405c:	d014      	beq.n	8014088 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014062:	f043 0201 	orr.w	r2, r3, #1
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801406a:	2300      	movs	r3, #0
 801406c:	60fb      	str	r3, [r7, #12]
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	689b      	ldr	r3, [r3, #8]
 8014074:	60fb      	str	r3, [r7, #12]
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	681a      	ldr	r2, [r3, #0]
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014084:	601a      	str	r2, [r3, #0]
 8014086:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8014088:	69bb      	ldr	r3, [r7, #24]
 801408a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801408e:	2b00      	cmp	r3, #0
 8014090:	d00c      	beq.n	80140ac <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014096:	f043 0208 	orr.w	r2, r3, #8
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801409e:	2300      	movs	r3, #0
 80140a0:	60bb      	str	r3, [r7, #8]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	689b      	ldr	r3, [r3, #8]
 80140a8:	60bb      	str	r3, [r7, #8]
 80140aa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d04f      	beq.n	8014154 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	685a      	ldr	r2, [r3, #4]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80140c2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2201      	movs	r2, #1
 80140c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80140cc:	69fb      	ldr	r3, [r7, #28]
 80140ce:	f003 0302 	and.w	r3, r3, #2
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d104      	bne.n	80140e0 <HAL_SPI_IRQHandler+0x168>
 80140d6:	69fb      	ldr	r3, [r7, #28]
 80140d8:	f003 0301 	and.w	r3, r3, #1
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d034      	beq.n	801414a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	685a      	ldr	r2, [r3, #4]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	f022 0203 	bic.w	r2, r2, #3
 80140ee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d011      	beq.n	801411c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80140fc:	4a17      	ldr	r2, [pc, #92]	@ (801415c <HAL_SPI_IRQHandler+0x1e4>)
 80140fe:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014104:	4618      	mov	r0, r3
 8014106:	f7fc fe88 	bl	8010e1a <HAL_DMA_Abort_IT>
 801410a:	4603      	mov	r3, r0
 801410c:	2b00      	cmp	r3, #0
 801410e:	d005      	beq.n	801411c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014114:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014120:	2b00      	cmp	r3, #0
 8014122:	d016      	beq.n	8014152 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014128:	4a0c      	ldr	r2, [pc, #48]	@ (801415c <HAL_SPI_IRQHandler+0x1e4>)
 801412a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014130:	4618      	mov	r0, r3
 8014132:	f7fc fe72 	bl	8010e1a <HAL_DMA_Abort_IT>
 8014136:	4603      	mov	r3, r0
 8014138:	2b00      	cmp	r3, #0
 801413a:	d00a      	beq.n	8014152 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014140:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8014148:	e003      	b.n	8014152 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 f808 	bl	8014160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8014150:	e000      	b.n	8014154 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8014152:	bf00      	nop
    return;
 8014154:	bf00      	nop
  }
}
 8014156:	3720      	adds	r7, #32
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}
 801415c:	08014175 	.word	0x08014175

08014160 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014160:	b480      	push	{r7}
 8014162:	b083      	sub	sp, #12
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014168:	bf00      	nop
 801416a:	370c      	adds	r7, #12
 801416c:	46bd      	mov	sp, r7
 801416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014172:	4770      	bx	lr

08014174 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b084      	sub	sp, #16
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014180:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	2200      	movs	r2, #0
 8014186:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2200      	movs	r2, #0
 801418e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	f7ff ffe5 	bl	8014160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014196:	bf00      	nop
 8014198:	3710      	adds	r7, #16
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
	...

080141a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b088      	sub	sp, #32
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	603b      	str	r3, [r7, #0]
 80141ac:	4613      	mov	r3, r2
 80141ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80141b0:	f7fa fd24 	bl	800ebfc <HAL_GetTick>
 80141b4:	4602      	mov	r2, r0
 80141b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141b8:	1a9b      	subs	r3, r3, r2
 80141ba:	683a      	ldr	r2, [r7, #0]
 80141bc:	4413      	add	r3, r2
 80141be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80141c0:	f7fa fd1c 	bl	800ebfc <HAL_GetTick>
 80141c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80141c6:	4b39      	ldr	r3, [pc, #228]	@ (80142ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	015b      	lsls	r3, r3, #5
 80141cc:	0d1b      	lsrs	r3, r3, #20
 80141ce:	69fa      	ldr	r2, [r7, #28]
 80141d0:	fb02 f303 	mul.w	r3, r2, r3
 80141d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80141d6:	e054      	b.n	8014282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141de:	d050      	beq.n	8014282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80141e0:	f7fa fd0c 	bl	800ebfc <HAL_GetTick>
 80141e4:	4602      	mov	r2, r0
 80141e6:	69bb      	ldr	r3, [r7, #24]
 80141e8:	1ad3      	subs	r3, r2, r3
 80141ea:	69fa      	ldr	r2, [r7, #28]
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d902      	bls.n	80141f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d13d      	bne.n	8014272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	685a      	ldr	r2, [r3, #4]
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8014204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801420e:	d111      	bne.n	8014234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	689b      	ldr	r3, [r3, #8]
 8014214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014218:	d004      	beq.n	8014224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	689b      	ldr	r3, [r3, #8]
 801421e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014222:	d107      	bne.n	8014234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	681a      	ldr	r2, [r3, #0]
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801423c:	d10f      	bne.n	801425e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	681a      	ldr	r2, [r3, #0]
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801424c:	601a      	str	r2, [r3, #0]
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	681a      	ldr	r2, [r3, #0]
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801425c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	2201      	movs	r2, #1
 8014262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2200      	movs	r2, #0
 801426a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801426e:	2303      	movs	r3, #3
 8014270:	e017      	b.n	80142a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d101      	bne.n	801427c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014278:	2300      	movs	r3, #0
 801427a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801427c:	697b      	ldr	r3, [r7, #20]
 801427e:	3b01      	subs	r3, #1
 8014280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	689a      	ldr	r2, [r3, #8]
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	4013      	ands	r3, r2
 801428c:	68ba      	ldr	r2, [r7, #8]
 801428e:	429a      	cmp	r2, r3
 8014290:	bf0c      	ite	eq
 8014292:	2301      	moveq	r3, #1
 8014294:	2300      	movne	r3, #0
 8014296:	b2db      	uxtb	r3, r3
 8014298:	461a      	mov	r2, r3
 801429a:	79fb      	ldrb	r3, [r7, #7]
 801429c:	429a      	cmp	r2, r3
 801429e:	d19b      	bne.n	80141d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80142a0:	2300      	movs	r3, #0
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3720      	adds	r7, #32
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	20000020 	.word	0x20000020

080142b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b08a      	sub	sp, #40	@ 0x28
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	60f8      	str	r0, [r7, #12]
 80142b8:	60b9      	str	r1, [r7, #8]
 80142ba:	607a      	str	r2, [r7, #4]
 80142bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80142be:	2300      	movs	r3, #0
 80142c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80142c2:	f7fa fc9b 	bl	800ebfc <HAL_GetTick>
 80142c6:	4602      	mov	r2, r0
 80142c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142ca:	1a9b      	subs	r3, r3, r2
 80142cc:	683a      	ldr	r2, [r7, #0]
 80142ce:	4413      	add	r3, r2
 80142d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80142d2:	f7fa fc93 	bl	800ebfc <HAL_GetTick>
 80142d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	330c      	adds	r3, #12
 80142de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80142e0:	4b3d      	ldr	r3, [pc, #244]	@ (80143d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80142e2:	681a      	ldr	r2, [r3, #0]
 80142e4:	4613      	mov	r3, r2
 80142e6:	009b      	lsls	r3, r3, #2
 80142e8:	4413      	add	r3, r2
 80142ea:	00da      	lsls	r2, r3, #3
 80142ec:	1ad3      	subs	r3, r2, r3
 80142ee:	0d1b      	lsrs	r3, r3, #20
 80142f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142f2:	fb02 f303 	mul.w	r3, r2, r3
 80142f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80142f8:	e060      	b.n	80143bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80142fa:	68bb      	ldr	r3, [r7, #8]
 80142fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8014300:	d107      	bne.n	8014312 <SPI_WaitFifoStateUntilTimeout+0x62>
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d104      	bne.n	8014312 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8014308:	69fb      	ldr	r3, [r7, #28]
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	b2db      	uxtb	r3, r3
 801430e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8014310:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014318:	d050      	beq.n	80143bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801431a:	f7fa fc6f 	bl	800ebfc <HAL_GetTick>
 801431e:	4602      	mov	r2, r0
 8014320:	6a3b      	ldr	r3, [r7, #32]
 8014322:	1ad3      	subs	r3, r2, r3
 8014324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014326:	429a      	cmp	r2, r3
 8014328:	d902      	bls.n	8014330 <SPI_WaitFifoStateUntilTimeout+0x80>
 801432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801432c:	2b00      	cmp	r3, #0
 801432e:	d13d      	bne.n	80143ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	685a      	ldr	r2, [r3, #4]
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801433e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	685b      	ldr	r3, [r3, #4]
 8014344:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8014348:	d111      	bne.n	801436e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	689b      	ldr	r3, [r3, #8]
 801434e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014352:	d004      	beq.n	801435e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	689b      	ldr	r3, [r3, #8]
 8014358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801435c:	d107      	bne.n	801436e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	681a      	ldr	r2, [r3, #0]
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801436c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014376:	d10f      	bne.n	8014398 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	681a      	ldr	r2, [r3, #0]
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8014386:	601a      	str	r2, [r3, #0]
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	681a      	ldr	r2, [r3, #0]
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8014396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	2201      	movs	r2, #1
 801439c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	2200      	movs	r2, #0
 80143a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80143a8:	2303      	movs	r3, #3
 80143aa:	e010      	b.n	80143ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80143ac:	69bb      	ldr	r3, [r7, #24]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d101      	bne.n	80143b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80143b2:	2300      	movs	r3, #0
 80143b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80143b6:	69bb      	ldr	r3, [r7, #24]
 80143b8:	3b01      	subs	r3, #1
 80143ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	689a      	ldr	r2, [r3, #8]
 80143c2:	68bb      	ldr	r3, [r7, #8]
 80143c4:	4013      	ands	r3, r2
 80143c6:	687a      	ldr	r2, [r7, #4]
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d196      	bne.n	80142fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80143cc:	2300      	movs	r3, #0
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	3728      	adds	r7, #40	@ 0x28
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}
 80143d6:	bf00      	nop
 80143d8:	20000020 	.word	0x20000020

080143dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b086      	sub	sp, #24
 80143e0:	af02      	add	r7, sp, #8
 80143e2:	60f8      	str	r0, [r7, #12]
 80143e4:	60b9      	str	r1, [r7, #8]
 80143e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	9300      	str	r3, [sp, #0]
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	2200      	movs	r2, #0
 80143f0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80143f4:	68f8      	ldr	r0, [r7, #12]
 80143f6:	f7ff ff5b 	bl	80142b0 <SPI_WaitFifoStateUntilTimeout>
 80143fa:	4603      	mov	r3, r0
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d007      	beq.n	8014410 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014404:	f043 0220 	orr.w	r2, r3, #32
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801440c:	2303      	movs	r3, #3
 801440e:	e027      	b.n	8014460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	9300      	str	r3, [sp, #0]
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	2200      	movs	r2, #0
 8014418:	2180      	movs	r1, #128	@ 0x80
 801441a:	68f8      	ldr	r0, [r7, #12]
 801441c:	f7ff fec0 	bl	80141a0 <SPI_WaitFlagStateUntilTimeout>
 8014420:	4603      	mov	r3, r0
 8014422:	2b00      	cmp	r3, #0
 8014424:	d007      	beq.n	8014436 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801442a:	f043 0220 	orr.w	r2, r3, #32
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8014432:	2303      	movs	r3, #3
 8014434:	e014      	b.n	8014460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	9300      	str	r3, [sp, #0]
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	2200      	movs	r2, #0
 801443e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8014442:	68f8      	ldr	r0, [r7, #12]
 8014444:	f7ff ff34 	bl	80142b0 <SPI_WaitFifoStateUntilTimeout>
 8014448:	4603      	mov	r3, r0
 801444a:	2b00      	cmp	r3, #0
 801444c:	d007      	beq.n	801445e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014452:	f043 0220 	orr.w	r2, r3, #32
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801445a:	2303      	movs	r3, #3
 801445c:	e000      	b.n	8014460 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801445e:	2300      	movs	r3, #0
}
 8014460:	4618      	mov	r0, r3
 8014462:	3710      	adds	r7, #16
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b082      	sub	sp, #8
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d101      	bne.n	801447a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014476:	2301      	movs	r3, #1
 8014478:	e049      	b.n	801450e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014480:	b2db      	uxtb	r3, r3
 8014482:	2b00      	cmp	r3, #0
 8014484:	d106      	bne.n	8014494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	2200      	movs	r2, #0
 801448a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f7fa f9ee 	bl	800e870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2202      	movs	r2, #2
 8014498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	681a      	ldr	r2, [r3, #0]
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	3304      	adds	r3, #4
 80144a4:	4619      	mov	r1, r3
 80144a6:	4610      	mov	r0, r2
 80144a8:	f000 fa4e 	bl	8014948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2201      	movs	r2, #1
 80144b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2201      	movs	r2, #1
 80144b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2201      	movs	r2, #1
 80144c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2201      	movs	r2, #1
 80144c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2201      	movs	r2, #1
 80144d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2201      	movs	r2, #1
 80144d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2201      	movs	r2, #1
 80144e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2201      	movs	r2, #1
 80144e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2201      	movs	r2, #1
 80144f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2201      	movs	r2, #1
 80144f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	2201      	movs	r2, #1
 8014500:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2201      	movs	r2, #1
 8014508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801450c:	2300      	movs	r3, #0
}
 801450e:	4618      	mov	r0, r3
 8014510:	3708      	adds	r7, #8
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
	...

08014518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014518:	b480      	push	{r7}
 801451a:	b085      	sub	sp, #20
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014526:	b2db      	uxtb	r3, r3
 8014528:	2b01      	cmp	r3, #1
 801452a:	d001      	beq.n	8014530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801452c:	2301      	movs	r3, #1
 801452e:	e04f      	b.n	80145d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2202      	movs	r2, #2
 8014534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	68da      	ldr	r2, [r3, #12]
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	f042 0201 	orr.w	r2, r2, #1
 8014546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	4a23      	ldr	r2, [pc, #140]	@ (80145dc <HAL_TIM_Base_Start_IT+0xc4>)
 801454e:	4293      	cmp	r3, r2
 8014550:	d01d      	beq.n	801458e <HAL_TIM_Base_Start_IT+0x76>
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801455a:	d018      	beq.n	801458e <HAL_TIM_Base_Start_IT+0x76>
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	4a1f      	ldr	r2, [pc, #124]	@ (80145e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8014562:	4293      	cmp	r3, r2
 8014564:	d013      	beq.n	801458e <HAL_TIM_Base_Start_IT+0x76>
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	4a1e      	ldr	r2, [pc, #120]	@ (80145e4 <HAL_TIM_Base_Start_IT+0xcc>)
 801456c:	4293      	cmp	r3, r2
 801456e:	d00e      	beq.n	801458e <HAL_TIM_Base_Start_IT+0x76>
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	4a1c      	ldr	r2, [pc, #112]	@ (80145e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8014576:	4293      	cmp	r3, r2
 8014578:	d009      	beq.n	801458e <HAL_TIM_Base_Start_IT+0x76>
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	4a1b      	ldr	r2, [pc, #108]	@ (80145ec <HAL_TIM_Base_Start_IT+0xd4>)
 8014580:	4293      	cmp	r3, r2
 8014582:	d004      	beq.n	801458e <HAL_TIM_Base_Start_IT+0x76>
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4a19      	ldr	r2, [pc, #100]	@ (80145f0 <HAL_TIM_Base_Start_IT+0xd8>)
 801458a:	4293      	cmp	r3, r2
 801458c:	d115      	bne.n	80145ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	689a      	ldr	r2, [r3, #8]
 8014594:	4b17      	ldr	r3, [pc, #92]	@ (80145f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8014596:	4013      	ands	r3, r2
 8014598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2b06      	cmp	r3, #6
 801459e:	d015      	beq.n	80145cc <HAL_TIM_Base_Start_IT+0xb4>
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80145a6:	d011      	beq.n	80145cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	681a      	ldr	r2, [r3, #0]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	f042 0201 	orr.w	r2, r2, #1
 80145b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80145b8:	e008      	b.n	80145cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	681a      	ldr	r2, [r3, #0]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	f042 0201 	orr.w	r2, r2, #1
 80145c8:	601a      	str	r2, [r3, #0]
 80145ca:	e000      	b.n	80145ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80145cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80145ce:	2300      	movs	r3, #0
}
 80145d0:	4618      	mov	r0, r3
 80145d2:	3714      	adds	r7, #20
 80145d4:	46bd      	mov	sp, r7
 80145d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145da:	4770      	bx	lr
 80145dc:	40012c00 	.word	0x40012c00
 80145e0:	40000400 	.word	0x40000400
 80145e4:	40000800 	.word	0x40000800
 80145e8:	40013400 	.word	0x40013400
 80145ec:	40014000 	.word	0x40014000
 80145f0:	40015000 	.word	0x40015000
 80145f4:	00010007 	.word	0x00010007

080145f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b082      	sub	sp, #8
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	691b      	ldr	r3, [r3, #16]
 8014606:	f003 0302 	and.w	r3, r3, #2
 801460a:	2b02      	cmp	r3, #2
 801460c:	d122      	bne.n	8014654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	68db      	ldr	r3, [r3, #12]
 8014614:	f003 0302 	and.w	r3, r3, #2
 8014618:	2b02      	cmp	r3, #2
 801461a:	d11b      	bne.n	8014654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	f06f 0202 	mvn.w	r2, #2
 8014624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	2201      	movs	r2, #1
 801462a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	699b      	ldr	r3, [r3, #24]
 8014632:	f003 0303 	and.w	r3, r3, #3
 8014636:	2b00      	cmp	r3, #0
 8014638:	d003      	beq.n	8014642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	f000 f965 	bl	801490a <HAL_TIM_IC_CaptureCallback>
 8014640:	e005      	b.n	801464e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f000 f957 	bl	80148f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f000 f968 	bl	801491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	2200      	movs	r2, #0
 8014652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	691b      	ldr	r3, [r3, #16]
 801465a:	f003 0304 	and.w	r3, r3, #4
 801465e:	2b04      	cmp	r3, #4
 8014660:	d122      	bne.n	80146a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	68db      	ldr	r3, [r3, #12]
 8014668:	f003 0304 	and.w	r3, r3, #4
 801466c:	2b04      	cmp	r3, #4
 801466e:	d11b      	bne.n	80146a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	f06f 0204 	mvn.w	r2, #4
 8014678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2202      	movs	r2, #2
 801467e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	699b      	ldr	r3, [r3, #24]
 8014686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801468a:	2b00      	cmp	r3, #0
 801468c:	d003      	beq.n	8014696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f000 f93b 	bl	801490a <HAL_TIM_IC_CaptureCallback>
 8014694:	e005      	b.n	80146a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f000 f92d 	bl	80148f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f000 f93e 	bl	801491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	2200      	movs	r2, #0
 80146a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	691b      	ldr	r3, [r3, #16]
 80146ae:	f003 0308 	and.w	r3, r3, #8
 80146b2:	2b08      	cmp	r3, #8
 80146b4:	d122      	bne.n	80146fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	68db      	ldr	r3, [r3, #12]
 80146bc:	f003 0308 	and.w	r3, r3, #8
 80146c0:	2b08      	cmp	r3, #8
 80146c2:	d11b      	bne.n	80146fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	f06f 0208 	mvn.w	r2, #8
 80146cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	2204      	movs	r2, #4
 80146d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	69db      	ldr	r3, [r3, #28]
 80146da:	f003 0303 	and.w	r3, r3, #3
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d003      	beq.n	80146ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f000 f911 	bl	801490a <HAL_TIM_IC_CaptureCallback>
 80146e8:	e005      	b.n	80146f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f000 f903 	bl	80148f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f000 f914 	bl	801491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	2200      	movs	r2, #0
 80146fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	691b      	ldr	r3, [r3, #16]
 8014702:	f003 0310 	and.w	r3, r3, #16
 8014706:	2b10      	cmp	r3, #16
 8014708:	d122      	bne.n	8014750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	68db      	ldr	r3, [r3, #12]
 8014710:	f003 0310 	and.w	r3, r3, #16
 8014714:	2b10      	cmp	r3, #16
 8014716:	d11b      	bne.n	8014750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	f06f 0210 	mvn.w	r2, #16
 8014720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2208      	movs	r2, #8
 8014726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	69db      	ldr	r3, [r3, #28]
 801472e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014732:	2b00      	cmp	r3, #0
 8014734:	d003      	beq.n	801473e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f000 f8e7 	bl	801490a <HAL_TIM_IC_CaptureCallback>
 801473c:	e005      	b.n	801474a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f000 f8d9 	bl	80148f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f000 f8ea 	bl	801491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2200      	movs	r2, #0
 801474e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	691b      	ldr	r3, [r3, #16]
 8014756:	f003 0301 	and.w	r3, r3, #1
 801475a:	2b01      	cmp	r3, #1
 801475c:	d10e      	bne.n	801477c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	68db      	ldr	r3, [r3, #12]
 8014764:	f003 0301 	and.w	r3, r3, #1
 8014768:	2b01      	cmp	r3, #1
 801476a:	d107      	bne.n	801477c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	f06f 0201 	mvn.w	r2, #1
 8014774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014776:	6878      	ldr	r0, [r7, #4]
 8014778:	f7f9 f93a 	bl	800d9f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	691b      	ldr	r3, [r3, #16]
 8014782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014786:	2b80      	cmp	r3, #128	@ 0x80
 8014788:	d10e      	bne.n	80147a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	68db      	ldr	r3, [r3, #12]
 8014790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014794:	2b80      	cmp	r3, #128	@ 0x80
 8014796:	d107      	bne.n	80147a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80147a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80147a2:	6878      	ldr	r0, [r7, #4]
 80147a4:	f000 fa06 	bl	8014bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	691b      	ldr	r3, [r3, #16]
 80147ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80147b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80147b6:	d10e      	bne.n	80147d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	68db      	ldr	r3, [r3, #12]
 80147be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80147c2:	2b80      	cmp	r3, #128	@ 0x80
 80147c4:	d107      	bne.n	80147d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80147ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f000 f9f9 	bl	8014bc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	691b      	ldr	r3, [r3, #16]
 80147dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80147e0:	2b40      	cmp	r3, #64	@ 0x40
 80147e2:	d10e      	bne.n	8014802 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	68db      	ldr	r3, [r3, #12]
 80147ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80147ee:	2b40      	cmp	r3, #64	@ 0x40
 80147f0:	d107      	bne.n	8014802 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80147fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f000 f898 	bl	8014932 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	691b      	ldr	r3, [r3, #16]
 8014808:	f003 0320 	and.w	r3, r3, #32
 801480c:	2b20      	cmp	r3, #32
 801480e:	d10e      	bne.n	801482e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	68db      	ldr	r3, [r3, #12]
 8014816:	f003 0320 	and.w	r3, r3, #32
 801481a:	2b20      	cmp	r3, #32
 801481c:	d107      	bne.n	801482e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	f06f 0220 	mvn.w	r2, #32
 8014826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f000 f9b9 	bl	8014ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	691b      	ldr	r3, [r3, #16]
 8014834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801483c:	d10f      	bne.n	801485e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	68db      	ldr	r3, [r3, #12]
 8014844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014848:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801484c:	d107      	bne.n	801485e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8014856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f000 f9bf 	bl	8014bdc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	691b      	ldr	r3, [r3, #16]
 8014864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8014868:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801486c:	d10f      	bne.n	801488e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	68db      	ldr	r3, [r3, #12]
 8014874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8014878:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801487c:	d107      	bne.n	801488e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8014886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f000 f9b1 	bl	8014bf0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	691b      	ldr	r3, [r3, #16]
 8014894:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014898:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801489c:	d10f      	bne.n	80148be <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	68db      	ldr	r3, [r3, #12]
 80148a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80148a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80148ac:	d107      	bne.n	80148be <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80148b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f000 f9a3 	bl	8014c04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	691b      	ldr	r3, [r3, #16]
 80148c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80148c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80148cc:	d10f      	bne.n	80148ee <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	68db      	ldr	r3, [r3, #12]
 80148d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80148d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80148dc:	d107      	bne.n	80148ee <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80148e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f000 f995 	bl	8014c18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80148ee:	bf00      	nop
 80148f0:	3708      	adds	r7, #8
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}

080148f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80148f6:	b480      	push	{r7}
 80148f8:	b083      	sub	sp, #12
 80148fa:	af00      	add	r7, sp, #0
 80148fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80148fe:	bf00      	nop
 8014900:	370c      	adds	r7, #12
 8014902:	46bd      	mov	sp, r7
 8014904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014908:	4770      	bx	lr

0801490a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801490a:	b480      	push	{r7}
 801490c:	b083      	sub	sp, #12
 801490e:	af00      	add	r7, sp, #0
 8014910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014912:	bf00      	nop
 8014914:	370c      	adds	r7, #12
 8014916:	46bd      	mov	sp, r7
 8014918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491c:	4770      	bx	lr

0801491e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801491e:	b480      	push	{r7}
 8014920:	b083      	sub	sp, #12
 8014922:	af00      	add	r7, sp, #0
 8014924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014926:	bf00      	nop
 8014928:	370c      	adds	r7, #12
 801492a:	46bd      	mov	sp, r7
 801492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014930:	4770      	bx	lr

08014932 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014932:	b480      	push	{r7}
 8014934:	b083      	sub	sp, #12
 8014936:	af00      	add	r7, sp, #0
 8014938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801493a:	bf00      	nop
 801493c:	370c      	adds	r7, #12
 801493e:	46bd      	mov	sp, r7
 8014940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014944:	4770      	bx	lr
	...

08014948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014948:	b480      	push	{r7}
 801494a:	b085      	sub	sp, #20
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	4a42      	ldr	r2, [pc, #264]	@ (8014a64 <TIM_Base_SetConfig+0x11c>)
 801495c:	4293      	cmp	r3, r2
 801495e:	d013      	beq.n	8014988 <TIM_Base_SetConfig+0x40>
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014966:	d00f      	beq.n	8014988 <TIM_Base_SetConfig+0x40>
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	4a3f      	ldr	r2, [pc, #252]	@ (8014a68 <TIM_Base_SetConfig+0x120>)
 801496c:	4293      	cmp	r3, r2
 801496e:	d00b      	beq.n	8014988 <TIM_Base_SetConfig+0x40>
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	4a3e      	ldr	r2, [pc, #248]	@ (8014a6c <TIM_Base_SetConfig+0x124>)
 8014974:	4293      	cmp	r3, r2
 8014976:	d007      	beq.n	8014988 <TIM_Base_SetConfig+0x40>
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	4a3d      	ldr	r2, [pc, #244]	@ (8014a70 <TIM_Base_SetConfig+0x128>)
 801497c:	4293      	cmp	r3, r2
 801497e:	d003      	beq.n	8014988 <TIM_Base_SetConfig+0x40>
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	4a3c      	ldr	r2, [pc, #240]	@ (8014a74 <TIM_Base_SetConfig+0x12c>)
 8014984:	4293      	cmp	r3, r2
 8014986:	d108      	bne.n	801499a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801498e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	68fa      	ldr	r2, [r7, #12]
 8014996:	4313      	orrs	r3, r2
 8014998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	4a31      	ldr	r2, [pc, #196]	@ (8014a64 <TIM_Base_SetConfig+0x11c>)
 801499e:	4293      	cmp	r3, r2
 80149a0:	d01f      	beq.n	80149e2 <TIM_Base_SetConfig+0x9a>
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80149a8:	d01b      	beq.n	80149e2 <TIM_Base_SetConfig+0x9a>
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	4a2e      	ldr	r2, [pc, #184]	@ (8014a68 <TIM_Base_SetConfig+0x120>)
 80149ae:	4293      	cmp	r3, r2
 80149b0:	d017      	beq.n	80149e2 <TIM_Base_SetConfig+0x9a>
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	4a2d      	ldr	r2, [pc, #180]	@ (8014a6c <TIM_Base_SetConfig+0x124>)
 80149b6:	4293      	cmp	r3, r2
 80149b8:	d013      	beq.n	80149e2 <TIM_Base_SetConfig+0x9a>
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	4a2c      	ldr	r2, [pc, #176]	@ (8014a70 <TIM_Base_SetConfig+0x128>)
 80149be:	4293      	cmp	r3, r2
 80149c0:	d00f      	beq.n	80149e2 <TIM_Base_SetConfig+0x9a>
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	4a2c      	ldr	r2, [pc, #176]	@ (8014a78 <TIM_Base_SetConfig+0x130>)
 80149c6:	4293      	cmp	r3, r2
 80149c8:	d00b      	beq.n	80149e2 <TIM_Base_SetConfig+0x9a>
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	4a2b      	ldr	r2, [pc, #172]	@ (8014a7c <TIM_Base_SetConfig+0x134>)
 80149ce:	4293      	cmp	r3, r2
 80149d0:	d007      	beq.n	80149e2 <TIM_Base_SetConfig+0x9a>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	4a2a      	ldr	r2, [pc, #168]	@ (8014a80 <TIM_Base_SetConfig+0x138>)
 80149d6:	4293      	cmp	r3, r2
 80149d8:	d003      	beq.n	80149e2 <TIM_Base_SetConfig+0x9a>
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	4a25      	ldr	r2, [pc, #148]	@ (8014a74 <TIM_Base_SetConfig+0x12c>)
 80149de:	4293      	cmp	r3, r2
 80149e0:	d108      	bne.n	80149f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80149e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	68db      	ldr	r3, [r3, #12]
 80149ee:	68fa      	ldr	r2, [r7, #12]
 80149f0:	4313      	orrs	r3, r2
 80149f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	695b      	ldr	r3, [r3, #20]
 80149fe:	4313      	orrs	r3, r2
 8014a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	68fa      	ldr	r2, [r7, #12]
 8014a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014a08:	683b      	ldr	r3, [r7, #0]
 8014a0a:	689a      	ldr	r2, [r3, #8]
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	681a      	ldr	r2, [r3, #0]
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	4a12      	ldr	r2, [pc, #72]	@ (8014a64 <TIM_Base_SetConfig+0x11c>)
 8014a1c:	4293      	cmp	r3, r2
 8014a1e:	d013      	beq.n	8014a48 <TIM_Base_SetConfig+0x100>
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	4a13      	ldr	r2, [pc, #76]	@ (8014a70 <TIM_Base_SetConfig+0x128>)
 8014a24:	4293      	cmp	r3, r2
 8014a26:	d00f      	beq.n	8014a48 <TIM_Base_SetConfig+0x100>
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	4a13      	ldr	r2, [pc, #76]	@ (8014a78 <TIM_Base_SetConfig+0x130>)
 8014a2c:	4293      	cmp	r3, r2
 8014a2e:	d00b      	beq.n	8014a48 <TIM_Base_SetConfig+0x100>
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	4a12      	ldr	r2, [pc, #72]	@ (8014a7c <TIM_Base_SetConfig+0x134>)
 8014a34:	4293      	cmp	r3, r2
 8014a36:	d007      	beq.n	8014a48 <TIM_Base_SetConfig+0x100>
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	4a11      	ldr	r2, [pc, #68]	@ (8014a80 <TIM_Base_SetConfig+0x138>)
 8014a3c:	4293      	cmp	r3, r2
 8014a3e:	d003      	beq.n	8014a48 <TIM_Base_SetConfig+0x100>
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	4a0c      	ldr	r2, [pc, #48]	@ (8014a74 <TIM_Base_SetConfig+0x12c>)
 8014a44:	4293      	cmp	r3, r2
 8014a46:	d103      	bne.n	8014a50 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	691a      	ldr	r2, [r3, #16]
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2201      	movs	r2, #1
 8014a54:	615a      	str	r2, [r3, #20]
}
 8014a56:	bf00      	nop
 8014a58:	3714      	adds	r7, #20
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a60:	4770      	bx	lr
 8014a62:	bf00      	nop
 8014a64:	40012c00 	.word	0x40012c00
 8014a68:	40000400 	.word	0x40000400
 8014a6c:	40000800 	.word	0x40000800
 8014a70:	40013400 	.word	0x40013400
 8014a74:	40015000 	.word	0x40015000
 8014a78:	40014000 	.word	0x40014000
 8014a7c:	40014400 	.word	0x40014400
 8014a80:	40014800 	.word	0x40014800

08014a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014a84:	b480      	push	{r7}
 8014a86:	b085      	sub	sp, #20
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
 8014a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014a94:	2b01      	cmp	r3, #1
 8014a96:	d101      	bne.n	8014a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014a98:	2302      	movs	r3, #2
 8014a9a:	e06f      	b.n	8014b7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2201      	movs	r2, #1
 8014aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	2202      	movs	r2, #2
 8014aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	689b      	ldr	r3, [r3, #8]
 8014aba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	4a31      	ldr	r2, [pc, #196]	@ (8014b88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	d009      	beq.n	8014ada <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4a30      	ldr	r2, [pc, #192]	@ (8014b8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014acc:	4293      	cmp	r3, r2
 8014ace:	d004      	beq.n	8014ada <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8014b90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	d108      	bne.n	8014aec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8014ae0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	685b      	ldr	r3, [r3, #4]
 8014ae6:	68fa      	ldr	r2, [r7, #12]
 8014ae8:	4313      	orrs	r3, r2
 8014aea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8014af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	68fa      	ldr	r2, [r7, #12]
 8014afe:	4313      	orrs	r3, r2
 8014b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	68fa      	ldr	r2, [r7, #12]
 8014b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8014b88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014b10:	4293      	cmp	r3, r2
 8014b12:	d01d      	beq.n	8014b50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014b1c:	d018      	beq.n	8014b50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	4a1c      	ldr	r2, [pc, #112]	@ (8014b94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8014b24:	4293      	cmp	r3, r2
 8014b26:	d013      	beq.n	8014b50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	4a1a      	ldr	r2, [pc, #104]	@ (8014b98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8014b2e:	4293      	cmp	r3, r2
 8014b30:	d00e      	beq.n	8014b50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	4a15      	ldr	r2, [pc, #84]	@ (8014b8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	d009      	beq.n	8014b50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	4a16      	ldr	r2, [pc, #88]	@ (8014b9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8014b42:	4293      	cmp	r3, r2
 8014b44:	d004      	beq.n	8014b50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	4a11      	ldr	r2, [pc, #68]	@ (8014b90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d10c      	bne.n	8014b6a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014b56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	689b      	ldr	r3, [r3, #8]
 8014b5c:	68ba      	ldr	r2, [r7, #8]
 8014b5e:	4313      	orrs	r3, r2
 8014b60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	68ba      	ldr	r2, [r7, #8]
 8014b68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2201      	movs	r2, #1
 8014b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2200      	movs	r2, #0
 8014b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014b7a:	2300      	movs	r3, #0
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	3714      	adds	r7, #20
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr
 8014b88:	40012c00 	.word	0x40012c00
 8014b8c:	40013400 	.word	0x40013400
 8014b90:	40015000 	.word	0x40015000
 8014b94:	40000400 	.word	0x40000400
 8014b98:	40000800 	.word	0x40000800
 8014b9c:	40014000 	.word	0x40014000

08014ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014ba0:	b480      	push	{r7}
 8014ba2:	b083      	sub	sp, #12
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014ba8:	bf00      	nop
 8014baa:	370c      	adds	r7, #12
 8014bac:	46bd      	mov	sp, r7
 8014bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb2:	4770      	bx	lr

08014bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014bbc:	bf00      	nop
 8014bbe:	370c      	adds	r7, #12
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc6:	4770      	bx	lr

08014bc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b083      	sub	sp, #12
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014bd0:	bf00      	nop
 8014bd2:	370c      	adds	r7, #12
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr

08014bdc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8014bdc:	b480      	push	{r7}
 8014bde:	b083      	sub	sp, #12
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8014be4:	bf00      	nop
 8014be6:	370c      	adds	r7, #12
 8014be8:	46bd      	mov	sp, r7
 8014bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bee:	4770      	bx	lr

08014bf0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8014bf0:	b480      	push	{r7}
 8014bf2:	b083      	sub	sp, #12
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8014bf8:	bf00      	nop
 8014bfa:	370c      	adds	r7, #12
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c02:	4770      	bx	lr

08014c04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8014c04:	b480      	push	{r7}
 8014c06:	b083      	sub	sp, #12
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8014c0c:	bf00      	nop
 8014c0e:	370c      	adds	r7, #12
 8014c10:	46bd      	mov	sp, r7
 8014c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c16:	4770      	bx	lr

08014c18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8014c18:	b480      	push	{r7}
 8014c1a:	b083      	sub	sp, #12
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8014c20:	bf00      	nop
 8014c22:	370c      	adds	r7, #12
 8014c24:	46bd      	mov	sp, r7
 8014c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2a:	4770      	bx	lr

08014c2c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8014c2c:	b480      	push	{r7}
 8014c2e:	b091      	sub	sp, #68	@ 0x44
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	60f8      	str	r0, [r7, #12]
 8014c34:	60b9      	str	r1, [r7, #8]
 8014c36:	4613      	mov	r3, r2
 8014c38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c40:	2b20      	cmp	r3, #32
 8014c42:	f040 808c 	bne.w	8014d5e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d002      	beq.n	8014c52 <HAL_UART_Transmit_IT+0x26>
 8014c4c:	88fb      	ldrh	r3, [r7, #6]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d101      	bne.n	8014c56 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8014c52:	2301      	movs	r3, #1
 8014c54:	e084      	b.n	8014d60 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014c5c:	2b01      	cmp	r3, #1
 8014c5e:	d101      	bne.n	8014c64 <HAL_UART_Transmit_IT+0x38>
 8014c60:	2302      	movs	r3, #2
 8014c62:	e07d      	b.n	8014d60 <HAL_UART_Transmit_IT+0x134>
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2201      	movs	r2, #1
 8014c68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	68ba      	ldr	r2, [r7, #8]
 8014c70:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	88fa      	ldrh	r2, [r7, #6]
 8014c76:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	88fa      	ldrh	r2, [r7, #6]
 8014c7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2200      	movs	r2, #0
 8014c86:	675a      	str	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2221      	movs	r2, #33	@ 0x21
 8014c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014ca0:	d12e      	bne.n	8014d00 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	689b      	ldr	r3, [r3, #8]
 8014ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014caa:	d107      	bne.n	8014cbc <HAL_UART_Transmit_IT+0x90>
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	691b      	ldr	r3, [r3, #16]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d103      	bne.n	8014cbc <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8014d6c <HAL_UART_Transmit_IT+0x140>)
 8014cb8:	675a      	str	r2, [r3, #116]	@ 0x74
 8014cba:	e002      	b.n	8014cc2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8014d70 <HAL_UART_Transmit_IT+0x144>)
 8014cc0:	675a      	str	r2, [r3, #116]	@ 0x74
      }

      __HAL_UNLOCK(huart);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	3308      	adds	r3, #8
 8014cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cd4:	e853 3f00 	ldrex	r3, [r3]
 8014cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cdc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	3308      	adds	r3, #8
 8014ce8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014cea:	637a      	str	r2, [r7, #52]	@ 0x34
 8014cec:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014cf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014cf2:	e841 2300 	strex	r3, r2, [r1]
 8014cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8014cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d1e5      	bne.n	8014cca <HAL_UART_Transmit_IT+0x9e>
 8014cfe:	e02c      	b.n	8014d5a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	689b      	ldr	r3, [r3, #8]
 8014d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014d08:	d107      	bne.n	8014d1a <HAL_UART_Transmit_IT+0xee>
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	691b      	ldr	r3, [r3, #16]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d103      	bne.n	8014d1a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	4a17      	ldr	r2, [pc, #92]	@ (8014d74 <HAL_UART_Transmit_IT+0x148>)
 8014d16:	675a      	str	r2, [r3, #116]	@ 0x74
 8014d18:	e002      	b.n	8014d20 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	4a16      	ldr	r2, [pc, #88]	@ (8014d78 <HAL_UART_Transmit_IT+0x14c>)
 8014d1e:	675a      	str	r2, [r3, #116]	@ 0x74
      }

      __HAL_UNLOCK(huart);
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	2200      	movs	r2, #0
 8014d24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	e853 3f00 	ldrex	r3, [r3]
 8014d34:	613b      	str	r3, [r7, #16]
   return(result);
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	461a      	mov	r2, r3
 8014d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d46:	623b      	str	r3, [r7, #32]
 8014d48:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d4a:	69f9      	ldr	r1, [r7, #28]
 8014d4c:	6a3a      	ldr	r2, [r7, #32]
 8014d4e:	e841 2300 	strex	r3, r2, [r1]
 8014d52:	61bb      	str	r3, [r7, #24]
   return(result);
 8014d54:	69bb      	ldr	r3, [r7, #24]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d1e6      	bne.n	8014d28 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	e000      	b.n	8014d60 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8014d5e:	2302      	movs	r3, #2
  }
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3744      	adds	r7, #68	@ 0x44
 8014d64:	46bd      	mov	sp, r7
 8014d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6a:	4770      	bx	lr
 8014d6c:	08016759 	.word	0x08016759
 8014d70:	08016679 	.word	0x08016679
 8014d74:	080165b7 	.word	0x080165b7
 8014d78:	080164ff 	.word	0x080164ff

08014d7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b08a      	sub	sp, #40	@ 0x28
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	60f8      	str	r0, [r7, #12]
 8014d84:	60b9      	str	r1, [r7, #8]
 8014d86:	4613      	mov	r3, r2
 8014d88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014d90:	2b20      	cmp	r3, #32
 8014d92:	d142      	bne.n	8014e1a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8014d94:	68bb      	ldr	r3, [r7, #8]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d002      	beq.n	8014da0 <HAL_UART_Receive_IT+0x24>
 8014d9a:	88fb      	ldrh	r3, [r7, #6]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d101      	bne.n	8014da4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014da0:	2301      	movs	r3, #1
 8014da2:	e03b      	b.n	8014e1c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014daa:	2b01      	cmp	r3, #1
 8014dac:	d101      	bne.n	8014db2 <HAL_UART_Receive_IT+0x36>
 8014dae:	2302      	movs	r3, #2
 8014db0:	e034      	b.n	8014e1c <HAL_UART_Receive_IT+0xa0>
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	2201      	movs	r2, #1
 8014db6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	4a17      	ldr	r2, [pc, #92]	@ (8014e24 <HAL_UART_Receive_IT+0xa8>)
 8014dc6:	4293      	cmp	r3, r2
 8014dc8:	d01f      	beq.n	8014e0a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	685b      	ldr	r3, [r3, #4]
 8014dd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d018      	beq.n	8014e0a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	e853 3f00 	ldrex	r3, [r3]
 8014de4:	613b      	str	r3, [r7, #16]
   return(result);
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	461a      	mov	r2, r3
 8014df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014df6:	623b      	str	r3, [r7, #32]
 8014df8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dfa:	69f9      	ldr	r1, [r7, #28]
 8014dfc:	6a3a      	ldr	r2, [r7, #32]
 8014dfe:	e841 2300 	strex	r3, r2, [r1]
 8014e02:	61bb      	str	r3, [r7, #24]
   return(result);
 8014e04:	69bb      	ldr	r3, [r7, #24]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d1e6      	bne.n	8014dd8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014e0a:	88fb      	ldrh	r3, [r7, #6]
 8014e0c:	461a      	mov	r2, r3
 8014e0e:	68b9      	ldr	r1, [r7, #8]
 8014e10:	68f8      	ldr	r0, [r7, #12]
 8014e12:	f001 f94b 	bl	80160ac <UART_Start_Receive_IT>
 8014e16:	4603      	mov	r3, r0
 8014e18:	e000      	b.n	8014e1c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8014e1a:	2302      	movs	r3, #2
  }
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3728      	adds	r7, #40	@ 0x28
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}
 8014e24:	40008000 	.word	0x40008000

08014e28 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b0a2      	sub	sp, #136	@ 0x88
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8014e30:	2301      	movs	r3, #1
 8014e32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014e3e:	e853 3f00 	ldrex	r3, [r3]
 8014e42:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8014e44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014e46:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8014e4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	461a      	mov	r2, r3
 8014e54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014e58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014e5a:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e5c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014e5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014e60:	e841 2300 	strex	r3, r2, [r1]
 8014e64:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8014e66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d1e4      	bne.n	8014e36 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	3308      	adds	r3, #8
 8014e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e76:	e853 3f00 	ldrex	r3, [r3]
 8014e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014e7e:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 8014e82:	f023 0301 	bic.w	r3, r3, #1
 8014e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	3308      	adds	r3, #8
 8014e8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014e90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8014e92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014e96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014e98:	e841 2300 	strex	r3, r2, [r1]
 8014e9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d1e3      	bne.n	8014e6c <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ea8:	2b01      	cmp	r3, #1
 8014eaa:	d118      	bne.n	8014ede <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014eb4:	e853 3f00 	ldrex	r3, [r3]
 8014eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ebc:	f023 0310 	bic.w	r3, r3, #16
 8014ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	461a      	mov	r2, r3
 8014ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014eca:	647b      	str	r3, [r7, #68]	@ 0x44
 8014ecc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ece:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014ed0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ed2:	e841 2300 	strex	r3, r2, [r1]
 8014ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d1e6      	bne.n	8014eac <HAL_UART_Abort_IT+0x84>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d00f      	beq.n	8014f06 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	689b      	ldr	r3, [r3, #8]
 8014eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014ef0:	2b80      	cmp	r3, #128	@ 0x80
 8014ef2:	d104      	bne.n	8014efe <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014ef8:	4a64      	ldr	r2, [pc, #400]	@ (801508c <HAL_UART_Abort_IT+0x264>)
 8014efa:	639a      	str	r2, [r3, #56]	@ 0x38
 8014efc:	e003      	b.n	8014f06 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014f02:	2200      	movs	r2, #0
 8014f04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d00f      	beq.n	8014f2e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	689b      	ldr	r3, [r3, #8]
 8014f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014f18:	2b40      	cmp	r3, #64	@ 0x40
 8014f1a:	d104      	bne.n	8014f26 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014f20:	4a5b      	ldr	r2, [pc, #364]	@ (8015090 <HAL_UART_Abort_IT+0x268>)
 8014f22:	639a      	str	r2, [r3, #56]	@ 0x38
 8014f24:	e003      	b.n	8014f2e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	689b      	ldr	r3, [r3, #8]
 8014f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014f38:	2b80      	cmp	r3, #128	@ 0x80
 8014f3a:	d12d      	bne.n	8014f98 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	3308      	adds	r3, #8
 8014f42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f46:	e853 3f00 	ldrex	r3, [r3]
 8014f4a:	623b      	str	r3, [r7, #32]
   return(result);
 8014f4c:	6a3b      	ldr	r3, [r7, #32]
 8014f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014f52:	677b      	str	r3, [r7, #116]	@ 0x74
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	3308      	adds	r3, #8
 8014f5a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8014f5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8014f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014f64:	e841 2300 	strex	r3, r2, [r1]
 8014f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d1e5      	bne.n	8014f3c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d00f      	beq.n	8014f98 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f7fb ff4c 	bl	8010e1a <HAL_DMA_Abort_IT>
 8014f82:	4603      	mov	r3, r0
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d004      	beq.n	8014f92 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8014f90:	e002      	b.n	8014f98 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        abortcplt = 0U;
 8014f92:	2300      	movs	r3, #0
 8014f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	689b      	ldr	r3, [r3, #8]
 8014f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014fa2:	2b40      	cmp	r3, #64	@ 0x40
 8014fa4:	d130      	bne.n	8015008 <HAL_UART_Abort_IT+0x1e0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	3308      	adds	r3, #8
 8014fac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	e853 3f00 	ldrex	r3, [r3]
 8014fb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014fbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	3308      	adds	r3, #8
 8014fc4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014fc6:	61fa      	str	r2, [r7, #28]
 8014fc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fca:	69b9      	ldr	r1, [r7, #24]
 8014fcc:	69fa      	ldr	r2, [r7, #28]
 8014fce:	e841 2300 	strex	r3, r2, [r1]
 8014fd2:	617b      	str	r3, [r7, #20]
   return(result);
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d1e5      	bne.n	8014fa6 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d012      	beq.n	8015008 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7fb ff17 	bl	8010e1a <HAL_DMA_Abort_IT>
 8014fec:	4603      	mov	r3, r0
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d007      	beq.n	8015002 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015000:	e002      	b.n	8015008 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        abortcplt = 0U;
 8015002:	2300      	movs	r3, #0
 8015004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8015008:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801500c:	2b01      	cmp	r3, #1
 801500e:	d138      	bne.n	8015082 <HAL_UART_Abort_IT+0x25a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2200      	movs	r2, #0
 8015014:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2200      	movs	r2, #0
 801501c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2200      	movs	r2, #0
 8015024:	671a      	str	r2, [r3, #112]	@ 0x70
    huart->TxISR = NULL;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	2200      	movs	r2, #0
 801502a:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2200      	movs	r2, #0
 8015030:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	220f      	movs	r2, #15
 801503a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015044:	d107      	bne.n	8015056 <HAL_UART_Abort_IT+0x22e>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	699a      	ldr	r2, [r3, #24]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	f042 0210 	orr.w	r2, r2, #16
 8015054:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	699a      	ldr	r2, [r3, #24]
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	f042 0208 	orr.w	r2, r2, #8
 8015064:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	2220      	movs	r2, #32
 801506a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_READY;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2220      	movs	r2, #32
 8015072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2200      	movs	r2, #0
 801507a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f000 fb2b 	bl	80156d8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8015082:	2300      	movs	r3, #0
}
 8015084:	4618      	mov	r0, r3
 8015086:	3788      	adds	r7, #136	@ 0x88
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}
 801508c:	080163f9 	.word	0x080163f9
 8015090:	08016481 	.word	0x08016481

08015094 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b0ba      	sub	sp, #232	@ 0xe8
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	69db      	ldr	r3, [r3, #28]
 80150a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	689b      	ldr	r3, [r3, #8]
 80150b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80150ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80150be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80150c2:	4013      	ands	r3, r2
 80150c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80150c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d11b      	bne.n	8015108 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80150d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80150d4:	f003 0320 	and.w	r3, r3, #32
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d015      	beq.n	8015108 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80150dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80150e0:	f003 0320 	and.w	r3, r3, #32
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d105      	bne.n	80150f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80150e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80150ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d009      	beq.n	8015108 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	f000 82d6 	beq.w	80156aa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	4798      	blx	r3
      }
      return;
 8015106:	e2d0      	b.n	80156aa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8015108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801510c:	2b00      	cmp	r3, #0
 801510e:	f000 811f 	beq.w	8015350 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8015112:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8015116:	4b8b      	ldr	r3, [pc, #556]	@ (8015344 <HAL_UART_IRQHandler+0x2b0>)
 8015118:	4013      	ands	r3, r2
 801511a:	2b00      	cmp	r3, #0
 801511c:	d106      	bne.n	801512c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801511e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8015122:	4b89      	ldr	r3, [pc, #548]	@ (8015348 <HAL_UART_IRQHandler+0x2b4>)
 8015124:	4013      	ands	r3, r2
 8015126:	2b00      	cmp	r3, #0
 8015128:	f000 8112 	beq.w	8015350 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801512c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015130:	f003 0301 	and.w	r3, r3, #1
 8015134:	2b00      	cmp	r3, #0
 8015136:	d011      	beq.n	801515c <HAL_UART_IRQHandler+0xc8>
 8015138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801513c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015140:	2b00      	cmp	r3, #0
 8015142:	d00b      	beq.n	801515c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	2201      	movs	r2, #1
 801514a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015152:	f043 0201 	orr.w	r2, r3, #1
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015160:	f003 0302 	and.w	r3, r3, #2
 8015164:	2b00      	cmp	r3, #0
 8015166:	d011      	beq.n	801518c <HAL_UART_IRQHandler+0xf8>
 8015168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801516c:	f003 0301 	and.w	r3, r3, #1
 8015170:	2b00      	cmp	r3, #0
 8015172:	d00b      	beq.n	801518c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	2202      	movs	r2, #2
 801517a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015182:	f043 0204 	orr.w	r2, r3, #4
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801518c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015190:	f003 0304 	and.w	r3, r3, #4
 8015194:	2b00      	cmp	r3, #0
 8015196:	d011      	beq.n	80151bc <HAL_UART_IRQHandler+0x128>
 8015198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801519c:	f003 0301 	and.w	r3, r3, #1
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d00b      	beq.n	80151bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	2204      	movs	r2, #4
 80151aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80151b2:	f043 0202 	orr.w	r2, r3, #2
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80151bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80151c0:	f003 0308 	and.w	r3, r3, #8
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d017      	beq.n	80151f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80151c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80151cc:	f003 0320 	and.w	r3, r3, #32
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d105      	bne.n	80151e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80151d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80151d8:	4b5a      	ldr	r3, [pc, #360]	@ (8015344 <HAL_UART_IRQHandler+0x2b0>)
 80151da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d00b      	beq.n	80151f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	2208      	movs	r2, #8
 80151e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80151ee:	f043 0208 	orr.w	r2, r3, #8
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80151f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80151fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015200:	2b00      	cmp	r3, #0
 8015202:	d012      	beq.n	801522a <HAL_UART_IRQHandler+0x196>
 8015204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015208:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801520c:	2b00      	cmp	r3, #0
 801520e:	d00c      	beq.n	801522a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015218:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015220:	f043 0220 	orr.w	r2, r3, #32
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015230:	2b00      	cmp	r3, #0
 8015232:	f000 823c 	beq.w	80156ae <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801523a:	f003 0320 	and.w	r3, r3, #32
 801523e:	2b00      	cmp	r3, #0
 8015240:	d013      	beq.n	801526a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015246:	f003 0320 	and.w	r3, r3, #32
 801524a:	2b00      	cmp	r3, #0
 801524c:	d105      	bne.n	801525a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801524e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8015252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8015256:	2b00      	cmp	r3, #0
 8015258:	d007      	beq.n	801526a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801525e:	2b00      	cmp	r3, #0
 8015260:	d003      	beq.n	801526a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015266:	6878      	ldr	r0, [r7, #4]
 8015268:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015270:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	689b      	ldr	r3, [r3, #8]
 801527a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801527e:	2b40      	cmp	r3, #64	@ 0x40
 8015280:	d005      	beq.n	801528e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8015282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8015286:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801528a:	2b00      	cmp	r3, #0
 801528c:	d04f      	beq.n	801532e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f001 f836 	bl	8016300 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	689b      	ldr	r3, [r3, #8]
 801529a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801529e:	2b40      	cmp	r3, #64	@ 0x40
 80152a0:	d141      	bne.n	8015326 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	3308      	adds	r3, #8
 80152a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80152b0:	e853 3f00 	ldrex	r3, [r3]
 80152b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80152b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80152bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80152c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	3308      	adds	r3, #8
 80152ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80152ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80152d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80152da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80152de:	e841 2300 	strex	r3, r2, [r1]
 80152e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80152e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d1d9      	bne.n	80152a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d013      	beq.n	801531e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80152fa:	4a14      	ldr	r2, [pc, #80]	@ (801534c <HAL_UART_IRQHandler+0x2b8>)
 80152fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015302:	4618      	mov	r0, r3
 8015304:	f7fb fd89 	bl	8010e1a <HAL_DMA_Abort_IT>
 8015308:	4603      	mov	r3, r0
 801530a:	2b00      	cmp	r3, #0
 801530c:	d017      	beq.n	801533e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015314:	687a      	ldr	r2, [r7, #4]
 8015316:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8015318:	4610      	mov	r0, r2
 801531a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801531c:	e00f      	b.n	801533e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	f000 f9d0 	bl	80156c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015324:	e00b      	b.n	801533e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f000 f9cc 	bl	80156c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801532c:	e007      	b.n	801533e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	f000 f9c8 	bl	80156c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2200      	movs	r2, #0
 8015338:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 801533c:	e1b7      	b.n	80156ae <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801533e:	bf00      	nop
    return;
 8015340:	e1b5      	b.n	80156ae <HAL_UART_IRQHandler+0x61a>
 8015342:	bf00      	nop
 8015344:	10000001 	.word	0x10000001
 8015348:	04000120 	.word	0x04000120
 801534c:	080163cd 	.word	0x080163cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015354:	2b01      	cmp	r3, #1
 8015356:	f040 814a 	bne.w	80155ee <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801535e:	f003 0310 	and.w	r3, r3, #16
 8015362:	2b00      	cmp	r3, #0
 8015364:	f000 8143 	beq.w	80155ee <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8015368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801536c:	f003 0310 	and.w	r3, r3, #16
 8015370:	2b00      	cmp	r3, #0
 8015372:	f000 813c 	beq.w	80155ee <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	2210      	movs	r2, #16
 801537c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	689b      	ldr	r3, [r3, #8]
 8015384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015388:	2b40      	cmp	r3, #64	@ 0x40
 801538a:	f040 80b5 	bne.w	80154f8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	685b      	ldr	r3, [r3, #4]
 8015396:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801539a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801539e:	2b00      	cmp	r3, #0
 80153a0:	f000 8187 	beq.w	80156b2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80153aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80153ae:	429a      	cmp	r2, r3
 80153b0:	f080 817f 	bcs.w	80156b2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80153ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	f003 0320 	and.w	r3, r3, #32
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	f040 8086 	bne.w	80154dc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80153dc:	e853 3f00 	ldrex	r3, [r3]
 80153e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80153e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80153e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80153ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	461a      	mov	r2, r3
 80153f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80153fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80153fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015402:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8015406:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801540a:	e841 2300 	strex	r3, r2, [r1]
 801540e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8015412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015416:	2b00      	cmp	r3, #0
 8015418:	d1da      	bne.n	80153d0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	3308      	adds	r3, #8
 8015420:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015424:	e853 3f00 	ldrex	r3, [r3]
 8015428:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801542a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801542c:	f023 0301 	bic.w	r3, r3, #1
 8015430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	3308      	adds	r3, #8
 801543a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801543e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8015442:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015444:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8015446:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801544a:	e841 2300 	strex	r3, r2, [r1]
 801544e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8015450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015452:	2b00      	cmp	r3, #0
 8015454:	d1e1      	bne.n	801541a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	3308      	adds	r3, #8
 801545c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801545e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015460:	e853 3f00 	ldrex	r3, [r3]
 8015464:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8015466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801546c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	3308      	adds	r3, #8
 8015476:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801547a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801547c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801547e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8015480:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8015482:	e841 2300 	strex	r3, r2, [r1]
 8015486:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8015488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801548a:	2b00      	cmp	r3, #0
 801548c:	d1e3      	bne.n	8015456 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	2220      	movs	r2, #32
 8015492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2200      	movs	r2, #0
 801549a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154a4:	e853 3f00 	ldrex	r3, [r3]
 80154a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80154aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80154ac:	f023 0310 	bic.w	r3, r3, #16
 80154b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	461a      	mov	r2, r3
 80154ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80154be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80154c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80154c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80154c6:	e841 2300 	strex	r3, r2, [r1]
 80154ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80154cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d1e4      	bne.n	801549c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7fb fc46 	bl	8010d68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80154e8:	b29b      	uxth	r3, r3
 80154ea:	1ad3      	subs	r3, r2, r3
 80154ec:	b29b      	uxth	r3, r3
 80154ee:	4619      	mov	r1, r3
 80154f0:	6878      	ldr	r0, [r7, #4]
 80154f2:	f000 f8fb 	bl	80156ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80154f6:	e0dc      	b.n	80156b2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8015504:	b29b      	uxth	r3, r3
 8015506:	1ad3      	subs	r3, r2, r3
 8015508:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8015512:	b29b      	uxth	r3, r3
 8015514:	2b00      	cmp	r3, #0
 8015516:	f000 80ce 	beq.w	80156b6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 801551a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801551e:	2b00      	cmp	r3, #0
 8015520:	f000 80c9 	beq.w	80156b6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801552a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801552c:	e853 3f00 	ldrex	r3, [r3]
 8015530:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015538:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	461a      	mov	r2, r3
 8015542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015546:	647b      	str	r3, [r7, #68]	@ 0x44
 8015548:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801554a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801554c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801554e:	e841 2300 	strex	r3, r2, [r1]
 8015552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015556:	2b00      	cmp	r3, #0
 8015558:	d1e4      	bne.n	8015524 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	3308      	adds	r3, #8
 8015560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015564:	e853 3f00 	ldrex	r3, [r3]
 8015568:	623b      	str	r3, [r7, #32]
   return(result);
 801556a:	6a3b      	ldr	r3, [r7, #32]
 801556c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8015570:	f023 0301 	bic.w	r3, r3, #1
 8015574:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	3308      	adds	r3, #8
 801557e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8015582:	633a      	str	r2, [r7, #48]	@ 0x30
 8015584:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801558a:	e841 2300 	strex	r3, r2, [r1]
 801558e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015592:	2b00      	cmp	r3, #0
 8015594:	d1e1      	bne.n	801555a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	2220      	movs	r2, #32
 801559a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2200      	movs	r2, #0
 80155a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	2200      	movs	r2, #0
 80155a8:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	e853 3f00 	ldrex	r3, [r3]
 80155b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	f023 0310 	bic.w	r3, r3, #16
 80155be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	461a      	mov	r2, r3
 80155c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80155cc:	61fb      	str	r3, [r7, #28]
 80155ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155d0:	69b9      	ldr	r1, [r7, #24]
 80155d2:	69fa      	ldr	r2, [r7, #28]
 80155d4:	e841 2300 	strex	r3, r2, [r1]
 80155d8:	617b      	str	r3, [r7, #20]
   return(result);
 80155da:	697b      	ldr	r3, [r7, #20]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d1e4      	bne.n	80155aa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80155e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80155e4:	4619      	mov	r1, r3
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	f000 f880 	bl	80156ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80155ec:	e063      	b.n	80156b6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80155ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80155f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d00e      	beq.n	8015618 <HAL_UART_IRQHandler+0x584>
 80155fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80155fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8015602:	2b00      	cmp	r3, #0
 8015604:	d008      	beq.n	8015618 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801560e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f001 fe06 	bl	8017222 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015616:	e051      	b.n	80156bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8015618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801561c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015620:	2b00      	cmp	r3, #0
 8015622:	d014      	beq.n	801564e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8015624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801562c:	2b00      	cmp	r3, #0
 801562e:	d105      	bne.n	801563c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8015630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8015634:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8015638:	2b00      	cmp	r3, #0
 801563a:	d008      	beq.n	801564e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015640:	2b00      	cmp	r3, #0
 8015642:	d03a      	beq.n	80156ba <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	4798      	blx	r3
    }
    return;
 801564c:	e035      	b.n	80156ba <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801564e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015656:	2b00      	cmp	r3, #0
 8015658:	d009      	beq.n	801566e <HAL_UART_IRQHandler+0x5da>
 801565a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801565e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015662:	2b00      	cmp	r3, #0
 8015664:	d003      	beq.n	801566e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f001 f8eb 	bl	8016842 <UART_EndTransmit_IT>
    return;
 801566c:	e026      	b.n	80156bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801566e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8015676:	2b00      	cmp	r3, #0
 8015678:	d009      	beq.n	801568e <HAL_UART_IRQHandler+0x5fa>
 801567a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801567e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8015682:	2b00      	cmp	r3, #0
 8015684:	d003      	beq.n	801568e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8015686:	6878      	ldr	r0, [r7, #4]
 8015688:	f001 fddf 	bl	801724a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801568c:	e016      	b.n	80156bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801568e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015692:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8015696:	2b00      	cmp	r3, #0
 8015698:	d010      	beq.n	80156bc <HAL_UART_IRQHandler+0x628>
 801569a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801569e:	2b00      	cmp	r3, #0
 80156a0:	da0c      	bge.n	80156bc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f001 fdc7 	bl	8017236 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80156a8:	e008      	b.n	80156bc <HAL_UART_IRQHandler+0x628>
      return;
 80156aa:	bf00      	nop
 80156ac:	e006      	b.n	80156bc <HAL_UART_IRQHandler+0x628>
    return;
 80156ae:	bf00      	nop
 80156b0:	e004      	b.n	80156bc <HAL_UART_IRQHandler+0x628>
      return;
 80156b2:	bf00      	nop
 80156b4:	e002      	b.n	80156bc <HAL_UART_IRQHandler+0x628>
      return;
 80156b6:	bf00      	nop
 80156b8:	e000      	b.n	80156bc <HAL_UART_IRQHandler+0x628>
    return;
 80156ba:	bf00      	nop
  }
}
 80156bc:	37e8      	adds	r7, #232	@ 0xe8
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}
 80156c2:	bf00      	nop

080156c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80156c4:	b480      	push	{r7}
 80156c6:	b083      	sub	sp, #12
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80156cc:	bf00      	nop
 80156ce:	370c      	adds	r7, #12
 80156d0:	46bd      	mov	sp, r7
 80156d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d6:	4770      	bx	lr

080156d8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80156e0:	bf00      	nop
 80156e2:	370c      	adds	r7, #12
 80156e4:	46bd      	mov	sp, r7
 80156e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ea:	4770      	bx	lr

080156ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80156ec:	b480      	push	{r7}
 80156ee:	b083      	sub	sp, #12
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
 80156f4:	460b      	mov	r3, r1
 80156f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80156f8:	bf00      	nop
 80156fa:	370c      	adds	r7, #12
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr

08015704 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8015704:	b480      	push	{r7}
 8015706:	b085      	sub	sp, #20
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015712:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801571a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 801571c:	68fa      	ldr	r2, [r7, #12]
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	4313      	orrs	r3, r2
}
 8015722:	4618      	mov	r0, r3
 8015724:	3714      	adds	r7, #20
 8015726:	46bd      	mov	sp, r7
 8015728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572c:	4770      	bx	lr

0801572e <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 801572e:	b480      	push	{r7}
 8015730:	b083      	sub	sp, #12
 8015732:	af00      	add	r7, sp, #0
 8015734:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 801573c:	4618      	mov	r0, r3
 801573e:	370c      	adds	r7, #12
 8015740:	46bd      	mov	sp, r7
 8015742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015746:	4770      	bx	lr

08015748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801574c:	b08c      	sub	sp, #48	@ 0x30
 801574e:	af00      	add	r7, sp, #0
 8015750:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015752:	2300      	movs	r3, #0
 8015754:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	689a      	ldr	r2, [r3, #8]
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	691b      	ldr	r3, [r3, #16]
 8015760:	431a      	orrs	r2, r3
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	695b      	ldr	r3, [r3, #20]
 8015766:	431a      	orrs	r2, r3
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	69db      	ldr	r3, [r3, #28]
 801576c:	4313      	orrs	r3, r2
 801576e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015770:	697b      	ldr	r3, [r7, #20]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	681a      	ldr	r2, [r3, #0]
 8015776:	4baa      	ldr	r3, [pc, #680]	@ (8015a20 <UART_SetConfig+0x2d8>)
 8015778:	4013      	ands	r3, r2
 801577a:	697a      	ldr	r2, [r7, #20]
 801577c:	6812      	ldr	r2, [r2, #0]
 801577e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015780:	430b      	orrs	r3, r1
 8015782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801578e:	697b      	ldr	r3, [r7, #20]
 8015790:	68da      	ldr	r2, [r3, #12]
 8015792:	697b      	ldr	r3, [r7, #20]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	430a      	orrs	r2, r1
 8015798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801579a:	697b      	ldr	r3, [r7, #20]
 801579c:	699b      	ldr	r3, [r3, #24]
 801579e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	4a9f      	ldr	r2, [pc, #636]	@ (8015a24 <UART_SetConfig+0x2dc>)
 80157a6:	4293      	cmp	r3, r2
 80157a8:	d004      	beq.n	80157b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80157aa:	697b      	ldr	r3, [r7, #20]
 80157ac:	6a1b      	ldr	r3, [r3, #32]
 80157ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80157b0:	4313      	orrs	r3, r2
 80157b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	689b      	ldr	r3, [r3, #8]
 80157ba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80157be:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80157c2:	697a      	ldr	r2, [r7, #20]
 80157c4:	6812      	ldr	r2, [r2, #0]
 80157c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80157c8:	430b      	orrs	r3, r1
 80157ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157d2:	f023 010f 	bic.w	r1, r3, #15
 80157d6:	697b      	ldr	r3, [r7, #20]
 80157d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	430a      	orrs	r2, r1
 80157e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	4a90      	ldr	r2, [pc, #576]	@ (8015a28 <UART_SetConfig+0x2e0>)
 80157e8:	4293      	cmp	r3, r2
 80157ea:	d125      	bne.n	8015838 <UART_SetConfig+0xf0>
 80157ec:	4b8f      	ldr	r3, [pc, #572]	@ (8015a2c <UART_SetConfig+0x2e4>)
 80157ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80157f2:	f003 0303 	and.w	r3, r3, #3
 80157f6:	2b03      	cmp	r3, #3
 80157f8:	d81a      	bhi.n	8015830 <UART_SetConfig+0xe8>
 80157fa:	a201      	add	r2, pc, #4	@ (adr r2, 8015800 <UART_SetConfig+0xb8>)
 80157fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015800:	08015811 	.word	0x08015811
 8015804:	08015821 	.word	0x08015821
 8015808:	08015819 	.word	0x08015819
 801580c:	08015829 	.word	0x08015829
 8015810:	2301      	movs	r3, #1
 8015812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015816:	e116      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015818:	2302      	movs	r3, #2
 801581a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801581e:	e112      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015820:	2304      	movs	r3, #4
 8015822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015826:	e10e      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015828:	2308      	movs	r3, #8
 801582a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801582e:	e10a      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015830:	2310      	movs	r3, #16
 8015832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015836:	e106      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	4a7c      	ldr	r2, [pc, #496]	@ (8015a30 <UART_SetConfig+0x2e8>)
 801583e:	4293      	cmp	r3, r2
 8015840:	d138      	bne.n	80158b4 <UART_SetConfig+0x16c>
 8015842:	4b7a      	ldr	r3, [pc, #488]	@ (8015a2c <UART_SetConfig+0x2e4>)
 8015844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015848:	f003 030c 	and.w	r3, r3, #12
 801584c:	2b0c      	cmp	r3, #12
 801584e:	d82d      	bhi.n	80158ac <UART_SetConfig+0x164>
 8015850:	a201      	add	r2, pc, #4	@ (adr r2, 8015858 <UART_SetConfig+0x110>)
 8015852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015856:	bf00      	nop
 8015858:	0801588d 	.word	0x0801588d
 801585c:	080158ad 	.word	0x080158ad
 8015860:	080158ad 	.word	0x080158ad
 8015864:	080158ad 	.word	0x080158ad
 8015868:	0801589d 	.word	0x0801589d
 801586c:	080158ad 	.word	0x080158ad
 8015870:	080158ad 	.word	0x080158ad
 8015874:	080158ad 	.word	0x080158ad
 8015878:	08015895 	.word	0x08015895
 801587c:	080158ad 	.word	0x080158ad
 8015880:	080158ad 	.word	0x080158ad
 8015884:	080158ad 	.word	0x080158ad
 8015888:	080158a5 	.word	0x080158a5
 801588c:	2300      	movs	r3, #0
 801588e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015892:	e0d8      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015894:	2302      	movs	r3, #2
 8015896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801589a:	e0d4      	b.n	8015a46 <UART_SetConfig+0x2fe>
 801589c:	2304      	movs	r3, #4
 801589e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80158a2:	e0d0      	b.n	8015a46 <UART_SetConfig+0x2fe>
 80158a4:	2308      	movs	r3, #8
 80158a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80158aa:	e0cc      	b.n	8015a46 <UART_SetConfig+0x2fe>
 80158ac:	2310      	movs	r3, #16
 80158ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80158b2:	e0c8      	b.n	8015a46 <UART_SetConfig+0x2fe>
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	4a5e      	ldr	r2, [pc, #376]	@ (8015a34 <UART_SetConfig+0x2ec>)
 80158ba:	4293      	cmp	r3, r2
 80158bc:	d125      	bne.n	801590a <UART_SetConfig+0x1c2>
 80158be:	4b5b      	ldr	r3, [pc, #364]	@ (8015a2c <UART_SetConfig+0x2e4>)
 80158c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80158c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80158c8:	2b30      	cmp	r3, #48	@ 0x30
 80158ca:	d016      	beq.n	80158fa <UART_SetConfig+0x1b2>
 80158cc:	2b30      	cmp	r3, #48	@ 0x30
 80158ce:	d818      	bhi.n	8015902 <UART_SetConfig+0x1ba>
 80158d0:	2b20      	cmp	r3, #32
 80158d2:	d00a      	beq.n	80158ea <UART_SetConfig+0x1a2>
 80158d4:	2b20      	cmp	r3, #32
 80158d6:	d814      	bhi.n	8015902 <UART_SetConfig+0x1ba>
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d002      	beq.n	80158e2 <UART_SetConfig+0x19a>
 80158dc:	2b10      	cmp	r3, #16
 80158de:	d008      	beq.n	80158f2 <UART_SetConfig+0x1aa>
 80158e0:	e00f      	b.n	8015902 <UART_SetConfig+0x1ba>
 80158e2:	2300      	movs	r3, #0
 80158e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80158e8:	e0ad      	b.n	8015a46 <UART_SetConfig+0x2fe>
 80158ea:	2302      	movs	r3, #2
 80158ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80158f0:	e0a9      	b.n	8015a46 <UART_SetConfig+0x2fe>
 80158f2:	2304      	movs	r3, #4
 80158f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80158f8:	e0a5      	b.n	8015a46 <UART_SetConfig+0x2fe>
 80158fa:	2308      	movs	r3, #8
 80158fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015900:	e0a1      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015902:	2310      	movs	r3, #16
 8015904:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015908:	e09d      	b.n	8015a46 <UART_SetConfig+0x2fe>
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	4a4a      	ldr	r2, [pc, #296]	@ (8015a38 <UART_SetConfig+0x2f0>)
 8015910:	4293      	cmp	r3, r2
 8015912:	d125      	bne.n	8015960 <UART_SetConfig+0x218>
 8015914:	4b45      	ldr	r3, [pc, #276]	@ (8015a2c <UART_SetConfig+0x2e4>)
 8015916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801591a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801591e:	2bc0      	cmp	r3, #192	@ 0xc0
 8015920:	d016      	beq.n	8015950 <UART_SetConfig+0x208>
 8015922:	2bc0      	cmp	r3, #192	@ 0xc0
 8015924:	d818      	bhi.n	8015958 <UART_SetConfig+0x210>
 8015926:	2b80      	cmp	r3, #128	@ 0x80
 8015928:	d00a      	beq.n	8015940 <UART_SetConfig+0x1f8>
 801592a:	2b80      	cmp	r3, #128	@ 0x80
 801592c:	d814      	bhi.n	8015958 <UART_SetConfig+0x210>
 801592e:	2b00      	cmp	r3, #0
 8015930:	d002      	beq.n	8015938 <UART_SetConfig+0x1f0>
 8015932:	2b40      	cmp	r3, #64	@ 0x40
 8015934:	d008      	beq.n	8015948 <UART_SetConfig+0x200>
 8015936:	e00f      	b.n	8015958 <UART_SetConfig+0x210>
 8015938:	2300      	movs	r3, #0
 801593a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801593e:	e082      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015940:	2302      	movs	r3, #2
 8015942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015946:	e07e      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015948:	2304      	movs	r3, #4
 801594a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801594e:	e07a      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015950:	2308      	movs	r3, #8
 8015952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015956:	e076      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015958:	2310      	movs	r3, #16
 801595a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801595e:	e072      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015960:	697b      	ldr	r3, [r7, #20]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	4a35      	ldr	r2, [pc, #212]	@ (8015a3c <UART_SetConfig+0x2f4>)
 8015966:	4293      	cmp	r3, r2
 8015968:	d12a      	bne.n	80159c0 <UART_SetConfig+0x278>
 801596a:	4b30      	ldr	r3, [pc, #192]	@ (8015a2c <UART_SetConfig+0x2e4>)
 801596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015974:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015978:	d01a      	beq.n	80159b0 <UART_SetConfig+0x268>
 801597a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801597e:	d81b      	bhi.n	80159b8 <UART_SetConfig+0x270>
 8015980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015984:	d00c      	beq.n	80159a0 <UART_SetConfig+0x258>
 8015986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801598a:	d815      	bhi.n	80159b8 <UART_SetConfig+0x270>
 801598c:	2b00      	cmp	r3, #0
 801598e:	d003      	beq.n	8015998 <UART_SetConfig+0x250>
 8015990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015994:	d008      	beq.n	80159a8 <UART_SetConfig+0x260>
 8015996:	e00f      	b.n	80159b8 <UART_SetConfig+0x270>
 8015998:	2300      	movs	r3, #0
 801599a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801599e:	e052      	b.n	8015a46 <UART_SetConfig+0x2fe>
 80159a0:	2302      	movs	r3, #2
 80159a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80159a6:	e04e      	b.n	8015a46 <UART_SetConfig+0x2fe>
 80159a8:	2304      	movs	r3, #4
 80159aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80159ae:	e04a      	b.n	8015a46 <UART_SetConfig+0x2fe>
 80159b0:	2308      	movs	r3, #8
 80159b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80159b6:	e046      	b.n	8015a46 <UART_SetConfig+0x2fe>
 80159b8:	2310      	movs	r3, #16
 80159ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80159be:	e042      	b.n	8015a46 <UART_SetConfig+0x2fe>
 80159c0:	697b      	ldr	r3, [r7, #20]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	4a17      	ldr	r2, [pc, #92]	@ (8015a24 <UART_SetConfig+0x2dc>)
 80159c6:	4293      	cmp	r3, r2
 80159c8:	d13a      	bne.n	8015a40 <UART_SetConfig+0x2f8>
 80159ca:	4b18      	ldr	r3, [pc, #96]	@ (8015a2c <UART_SetConfig+0x2e4>)
 80159cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80159d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80159d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80159d8:	d01a      	beq.n	8015a10 <UART_SetConfig+0x2c8>
 80159da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80159de:	d81b      	bhi.n	8015a18 <UART_SetConfig+0x2d0>
 80159e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80159e4:	d00c      	beq.n	8015a00 <UART_SetConfig+0x2b8>
 80159e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80159ea:	d815      	bhi.n	8015a18 <UART_SetConfig+0x2d0>
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d003      	beq.n	80159f8 <UART_SetConfig+0x2b0>
 80159f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80159f4:	d008      	beq.n	8015a08 <UART_SetConfig+0x2c0>
 80159f6:	e00f      	b.n	8015a18 <UART_SetConfig+0x2d0>
 80159f8:	2300      	movs	r3, #0
 80159fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80159fe:	e022      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015a00:	2302      	movs	r3, #2
 8015a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a06:	e01e      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015a08:	2304      	movs	r3, #4
 8015a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a0e:	e01a      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015a10:	2308      	movs	r3, #8
 8015a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a16:	e016      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015a18:	2310      	movs	r3, #16
 8015a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015a1e:	e012      	b.n	8015a46 <UART_SetConfig+0x2fe>
 8015a20:	cfff69f3 	.word	0xcfff69f3
 8015a24:	40008000 	.word	0x40008000
 8015a28:	40013800 	.word	0x40013800
 8015a2c:	40021000 	.word	0x40021000
 8015a30:	40004400 	.word	0x40004400
 8015a34:	40004800 	.word	0x40004800
 8015a38:	40004c00 	.word	0x40004c00
 8015a3c:	40005000 	.word	0x40005000
 8015a40:	2310      	movs	r3, #16
 8015a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015a46:	697b      	ldr	r3, [r7, #20]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	4aae      	ldr	r2, [pc, #696]	@ (8015d04 <UART_SetConfig+0x5bc>)
 8015a4c:	4293      	cmp	r3, r2
 8015a4e:	f040 8097 	bne.w	8015b80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015a52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015a56:	2b08      	cmp	r3, #8
 8015a58:	d823      	bhi.n	8015aa2 <UART_SetConfig+0x35a>
 8015a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8015a60 <UART_SetConfig+0x318>)
 8015a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a60:	08015a85 	.word	0x08015a85
 8015a64:	08015aa3 	.word	0x08015aa3
 8015a68:	08015a8d 	.word	0x08015a8d
 8015a6c:	08015aa3 	.word	0x08015aa3
 8015a70:	08015a93 	.word	0x08015a93
 8015a74:	08015aa3 	.word	0x08015aa3
 8015a78:	08015aa3 	.word	0x08015aa3
 8015a7c:	08015aa3 	.word	0x08015aa3
 8015a80:	08015a9b 	.word	0x08015a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015a84:	f7fd fb9e 	bl	80131c4 <HAL_RCC_GetPCLK1Freq>
 8015a88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015a8a:	e010      	b.n	8015aae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015a8c:	4b9e      	ldr	r3, [pc, #632]	@ (8015d08 <UART_SetConfig+0x5c0>)
 8015a8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015a90:	e00d      	b.n	8015aae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015a92:	f7fd fb29 	bl	80130e8 <HAL_RCC_GetSysClockFreq>
 8015a96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015a98:	e009      	b.n	8015aae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015aa0:	e005      	b.n	8015aae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015aa6:	2301      	movs	r3, #1
 8015aa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015aac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	f000 8130 	beq.w	8015d16 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015aba:	4a94      	ldr	r2, [pc, #592]	@ (8015d0c <UART_SetConfig+0x5c4>)
 8015abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015ac0:	461a      	mov	r2, r3
 8015ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8015ac8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015aca:	697b      	ldr	r3, [r7, #20]
 8015acc:	685a      	ldr	r2, [r3, #4]
 8015ace:	4613      	mov	r3, r2
 8015ad0:	005b      	lsls	r3, r3, #1
 8015ad2:	4413      	add	r3, r2
 8015ad4:	69ba      	ldr	r2, [r7, #24]
 8015ad6:	429a      	cmp	r2, r3
 8015ad8:	d305      	bcc.n	8015ae6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	685b      	ldr	r3, [r3, #4]
 8015ade:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015ae0:	69ba      	ldr	r2, [r7, #24]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d903      	bls.n	8015aee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015aec:	e113      	b.n	8015d16 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015af0:	2200      	movs	r2, #0
 8015af2:	60bb      	str	r3, [r7, #8]
 8015af4:	60fa      	str	r2, [r7, #12]
 8015af6:	697b      	ldr	r3, [r7, #20]
 8015af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015afa:	4a84      	ldr	r2, [pc, #528]	@ (8015d0c <UART_SetConfig+0x5c4>)
 8015afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b00:	b29b      	uxth	r3, r3
 8015b02:	2200      	movs	r2, #0
 8015b04:	603b      	str	r3, [r7, #0]
 8015b06:	607a      	str	r2, [r7, #4]
 8015b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015b10:	f7f3 f870 	bl	8008bf4 <__aeabi_uldivmod>
 8015b14:	4602      	mov	r2, r0
 8015b16:	460b      	mov	r3, r1
 8015b18:	4610      	mov	r0, r2
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	f04f 0200 	mov.w	r2, #0
 8015b20:	f04f 0300 	mov.w	r3, #0
 8015b24:	020b      	lsls	r3, r1, #8
 8015b26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015b2a:	0202      	lsls	r2, r0, #8
 8015b2c:	6979      	ldr	r1, [r7, #20]
 8015b2e:	6849      	ldr	r1, [r1, #4]
 8015b30:	0849      	lsrs	r1, r1, #1
 8015b32:	2000      	movs	r0, #0
 8015b34:	460c      	mov	r4, r1
 8015b36:	4605      	mov	r5, r0
 8015b38:	eb12 0804 	adds.w	r8, r2, r4
 8015b3c:	eb43 0905 	adc.w	r9, r3, r5
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	685b      	ldr	r3, [r3, #4]
 8015b44:	2200      	movs	r2, #0
 8015b46:	469a      	mov	sl, r3
 8015b48:	4693      	mov	fp, r2
 8015b4a:	4652      	mov	r2, sl
 8015b4c:	465b      	mov	r3, fp
 8015b4e:	4640      	mov	r0, r8
 8015b50:	4649      	mov	r1, r9
 8015b52:	f7f3 f84f 	bl	8008bf4 <__aeabi_uldivmod>
 8015b56:	4602      	mov	r2, r0
 8015b58:	460b      	mov	r3, r1
 8015b5a:	4613      	mov	r3, r2
 8015b5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015b5e:	6a3b      	ldr	r3, [r7, #32]
 8015b60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015b64:	d308      	bcc.n	8015b78 <UART_SetConfig+0x430>
 8015b66:	6a3b      	ldr	r3, [r7, #32]
 8015b68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015b6c:	d204      	bcs.n	8015b78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	6a3a      	ldr	r2, [r7, #32]
 8015b74:	60da      	str	r2, [r3, #12]
 8015b76:	e0ce      	b.n	8015d16 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8015b78:	2301      	movs	r3, #1
 8015b7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015b7e:	e0ca      	b.n	8015d16 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	69db      	ldr	r3, [r3, #28]
 8015b84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015b88:	d166      	bne.n	8015c58 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8015b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015b8e:	2b08      	cmp	r3, #8
 8015b90:	d827      	bhi.n	8015be2 <UART_SetConfig+0x49a>
 8015b92:	a201      	add	r2, pc, #4	@ (adr r2, 8015b98 <UART_SetConfig+0x450>)
 8015b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b98:	08015bbd 	.word	0x08015bbd
 8015b9c:	08015bc5 	.word	0x08015bc5
 8015ba0:	08015bcd 	.word	0x08015bcd
 8015ba4:	08015be3 	.word	0x08015be3
 8015ba8:	08015bd3 	.word	0x08015bd3
 8015bac:	08015be3 	.word	0x08015be3
 8015bb0:	08015be3 	.word	0x08015be3
 8015bb4:	08015be3 	.word	0x08015be3
 8015bb8:	08015bdb 	.word	0x08015bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015bbc:	f7fd fb02 	bl	80131c4 <HAL_RCC_GetPCLK1Freq>
 8015bc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015bc2:	e014      	b.n	8015bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015bc4:	f7fd fb14 	bl	80131f0 <HAL_RCC_GetPCLK2Freq>
 8015bc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015bca:	e010      	b.n	8015bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8015d08 <UART_SetConfig+0x5c0>)
 8015bce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015bd0:	e00d      	b.n	8015bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015bd2:	f7fd fa89 	bl	80130e8 <HAL_RCC_GetSysClockFreq>
 8015bd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015bd8:	e009      	b.n	8015bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015bde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015be0:	e005      	b.n	8015bee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8015be2:	2300      	movs	r3, #0
 8015be4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015be6:	2301      	movs	r3, #1
 8015be8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015bec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	f000 8090 	beq.w	8015d16 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015bf6:	697b      	ldr	r3, [r7, #20]
 8015bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bfa:	4a44      	ldr	r2, [pc, #272]	@ (8015d0c <UART_SetConfig+0x5c4>)
 8015bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015c00:	461a      	mov	r2, r3
 8015c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8015c08:	005a      	lsls	r2, r3, #1
 8015c0a:	697b      	ldr	r3, [r7, #20]
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	085b      	lsrs	r3, r3, #1
 8015c10:	441a      	add	r2, r3
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	685b      	ldr	r3, [r3, #4]
 8015c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8015c1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015c1c:	6a3b      	ldr	r3, [r7, #32]
 8015c1e:	2b0f      	cmp	r3, #15
 8015c20:	d916      	bls.n	8015c50 <UART_SetConfig+0x508>
 8015c22:	6a3b      	ldr	r3, [r7, #32]
 8015c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015c28:	d212      	bcs.n	8015c50 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015c2a:	6a3b      	ldr	r3, [r7, #32]
 8015c2c:	b29b      	uxth	r3, r3
 8015c2e:	f023 030f 	bic.w	r3, r3, #15
 8015c32:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015c34:	6a3b      	ldr	r3, [r7, #32]
 8015c36:	085b      	lsrs	r3, r3, #1
 8015c38:	b29b      	uxth	r3, r3
 8015c3a:	f003 0307 	and.w	r3, r3, #7
 8015c3e:	b29a      	uxth	r2, r3
 8015c40:	8bfb      	ldrh	r3, [r7, #30]
 8015c42:	4313      	orrs	r3, r2
 8015c44:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8015c46:	697b      	ldr	r3, [r7, #20]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	8bfa      	ldrh	r2, [r7, #30]
 8015c4c:	60da      	str	r2, [r3, #12]
 8015c4e:	e062      	b.n	8015d16 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8015c50:	2301      	movs	r3, #1
 8015c52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8015c56:	e05e      	b.n	8015d16 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015c58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015c5c:	2b08      	cmp	r3, #8
 8015c5e:	d828      	bhi.n	8015cb2 <UART_SetConfig+0x56a>
 8015c60:	a201      	add	r2, pc, #4	@ (adr r2, 8015c68 <UART_SetConfig+0x520>)
 8015c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c66:	bf00      	nop
 8015c68:	08015c8d 	.word	0x08015c8d
 8015c6c:	08015c95 	.word	0x08015c95
 8015c70:	08015c9d 	.word	0x08015c9d
 8015c74:	08015cb3 	.word	0x08015cb3
 8015c78:	08015ca3 	.word	0x08015ca3
 8015c7c:	08015cb3 	.word	0x08015cb3
 8015c80:	08015cb3 	.word	0x08015cb3
 8015c84:	08015cb3 	.word	0x08015cb3
 8015c88:	08015cab 	.word	0x08015cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015c8c:	f7fd fa9a 	bl	80131c4 <HAL_RCC_GetPCLK1Freq>
 8015c90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015c92:	e014      	b.n	8015cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015c94:	f7fd faac 	bl	80131f0 <HAL_RCC_GetPCLK2Freq>
 8015c98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015c9a:	e010      	b.n	8015cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8015d08 <UART_SetConfig+0x5c0>)
 8015c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015ca0:	e00d      	b.n	8015cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015ca2:	f7fd fa21 	bl	80130e8 <HAL_RCC_GetSysClockFreq>
 8015ca6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8015ca8:	e009      	b.n	8015cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015cae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8015cb0:	e005      	b.n	8015cbe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8015cbc:	bf00      	nop
    }

    if (pclk != 0U)
 8015cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d028      	beq.n	8015d16 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015cc4:	697b      	ldr	r3, [r7, #20]
 8015cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cc8:	4a10      	ldr	r2, [pc, #64]	@ (8015d0c <UART_SetConfig+0x5c4>)
 8015cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015cce:	461a      	mov	r2, r3
 8015cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8015cd6:	697b      	ldr	r3, [r7, #20]
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	085b      	lsrs	r3, r3, #1
 8015cdc:	441a      	add	r2, r3
 8015cde:	697b      	ldr	r3, [r7, #20]
 8015ce0:	685b      	ldr	r3, [r3, #4]
 8015ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8015ce6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015ce8:	6a3b      	ldr	r3, [r7, #32]
 8015cea:	2b0f      	cmp	r3, #15
 8015cec:	d910      	bls.n	8015d10 <UART_SetConfig+0x5c8>
 8015cee:	6a3b      	ldr	r3, [r7, #32]
 8015cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015cf4:	d20c      	bcs.n	8015d10 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015cf6:	6a3b      	ldr	r3, [r7, #32]
 8015cf8:	b29a      	uxth	r2, r3
 8015cfa:	697b      	ldr	r3, [r7, #20]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	60da      	str	r2, [r3, #12]
 8015d00:	e009      	b.n	8015d16 <UART_SetConfig+0x5ce>
 8015d02:	bf00      	nop
 8015d04:	40008000 	.word	0x40008000
 8015d08:	00f42400 	.word	0x00f42400
 8015d0c:	08017608 	.word	0x08017608
      }
      else
      {
        ret = HAL_ERROR;
 8015d10:	2301      	movs	r3, #1
 8015d12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015d16:	697b      	ldr	r3, [r7, #20]
 8015d18:	2201      	movs	r2, #1
 8015d1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8015d1e:	697b      	ldr	r3, [r7, #20]
 8015d20:	2201      	movs	r2, #1
 8015d22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015d26:	697b      	ldr	r3, [r7, #20]
 8015d28:	2200      	movs	r2, #0
 8015d2a:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8015d32:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8015d36:	4618      	mov	r0, r3
 8015d38:	3730      	adds	r7, #48	@ 0x30
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08015d40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015d40:	b480      	push	{r7}
 8015d42:	b083      	sub	sp, #12
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d4c:	f003 0301 	and.w	r3, r3, #1
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d00a      	beq.n	8015d6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	685b      	ldr	r3, [r3, #4]
 8015d5a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	430a      	orrs	r2, r1
 8015d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d6e:	f003 0302 	and.w	r3, r3, #2
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d00a      	beq.n	8015d8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	430a      	orrs	r2, r1
 8015d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d90:	f003 0304 	and.w	r3, r3, #4
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d00a      	beq.n	8015dae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	685b      	ldr	r3, [r3, #4]
 8015d9e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	430a      	orrs	r2, r1
 8015dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015db2:	f003 0308 	and.w	r3, r3, #8
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d00a      	beq.n	8015dd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	685b      	ldr	r3, [r3, #4]
 8015dc0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	430a      	orrs	r2, r1
 8015dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015dd4:	f003 0310 	and.w	r3, r3, #16
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d00a      	beq.n	8015df2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	689b      	ldr	r3, [r3, #8]
 8015de2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	430a      	orrs	r2, r1
 8015df0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015df6:	f003 0320 	and.w	r3, r3, #32
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d00a      	beq.n	8015e14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	689b      	ldr	r3, [r3, #8]
 8015e04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	430a      	orrs	r2, r1
 8015e12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d01a      	beq.n	8015e56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	430a      	orrs	r2, r1
 8015e34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015e3e:	d10a      	bne.n	8015e56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	685b      	ldr	r3, [r3, #4]
 8015e46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	430a      	orrs	r2, r1
 8015e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d00a      	beq.n	8015e78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	685b      	ldr	r3, [r3, #4]
 8015e68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	430a      	orrs	r2, r1
 8015e76:	605a      	str	r2, [r3, #4]
  }
}
 8015e78:	bf00      	nop
 8015e7a:	370c      	adds	r7, #12
 8015e7c:	46bd      	mov	sp, r7
 8015e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e82:	4770      	bx	lr

08015e84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b086      	sub	sp, #24
 8015e88:	af02      	add	r7, sp, #8
 8015e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015e94:	f7f8 feb2 	bl	800ebfc <HAL_GetTick>
 8015e98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	f003 0308 	and.w	r3, r3, #8
 8015ea4:	2b08      	cmp	r3, #8
 8015ea6:	d10e      	bne.n	8015ec6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015ea8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015eac:	9300      	str	r3, [sp, #0]
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8015eb6:	6878      	ldr	r0, [r7, #4]
 8015eb8:	f000 f82f 	bl	8015f1a <UART_WaitOnFlagUntilTimeout>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d001      	beq.n	8015ec6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015ec2:	2303      	movs	r3, #3
 8015ec4:	e025      	b.n	8015f12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	f003 0304 	and.w	r3, r3, #4
 8015ed0:	2b04      	cmp	r3, #4
 8015ed2:	d10e      	bne.n	8015ef2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015ed4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015ed8:	9300      	str	r3, [sp, #0]
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	2200      	movs	r2, #0
 8015ede:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f000 f819 	bl	8015f1a <UART_WaitOnFlagUntilTimeout>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d001      	beq.n	8015ef2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015eee:	2303      	movs	r3, #3
 8015ef0:	e00f      	b.n	8015f12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	2220      	movs	r2, #32
 8015ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2220      	movs	r2, #32
 8015efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2200      	movs	r2, #0
 8015f06:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015f10:	2300      	movs	r3, #0
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	3710      	adds	r7, #16
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}

08015f1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015f1a:	b580      	push	{r7, lr}
 8015f1c:	b09c      	sub	sp, #112	@ 0x70
 8015f1e:	af00      	add	r7, sp, #0
 8015f20:	60f8      	str	r0, [r7, #12]
 8015f22:	60b9      	str	r1, [r7, #8]
 8015f24:	603b      	str	r3, [r7, #0]
 8015f26:	4613      	mov	r3, r2
 8015f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015f2a:	e0a9      	b.n	8016080 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015f2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f32:	f000 80a5 	beq.w	8016080 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015f36:	f7f8 fe61 	bl	800ebfc <HAL_GetTick>
 8015f3a:	4602      	mov	r2, r0
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	1ad3      	subs	r3, r2, r3
 8015f40:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8015f42:	429a      	cmp	r2, r3
 8015f44:	d302      	bcc.n	8015f4c <UART_WaitOnFlagUntilTimeout+0x32>
 8015f46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d140      	bne.n	8015fce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f54:	e853 3f00 	ldrex	r3, [r3]
 8015f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8015f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015f5c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8015f60:	667b      	str	r3, [r7, #100]	@ 0x64
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	461a      	mov	r2, r3
 8015f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015f6c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f6e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8015f70:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015f72:	e841 2300 	strex	r3, r2, [r1]
 8015f76:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8015f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d1e6      	bne.n	8015f4c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	3308      	adds	r3, #8
 8015f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f88:	e853 3f00 	ldrex	r3, [r3]
 8015f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f90:	f023 0301 	bic.w	r3, r3, #1
 8015f94:	663b      	str	r3, [r7, #96]	@ 0x60
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	3308      	adds	r3, #8
 8015f9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015f9e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8015fa0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fa2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015fa6:	e841 2300 	strex	r3, r2, [r1]
 8015faa:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8015fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d1e5      	bne.n	8015f7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	2220      	movs	r2, #32
 8015fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	2220      	movs	r2, #32
 8015fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8015fca:	2303      	movs	r3, #3
 8015fcc:	e069      	b.n	80160a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	f003 0304 	and.w	r3, r3, #4
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d051      	beq.n	8016080 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	69db      	ldr	r3, [r3, #28]
 8015fe2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015fea:	d149      	bne.n	8016080 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015ff4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ffe:	e853 3f00 	ldrex	r3, [r3]
 8016002:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016006:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 801600a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	461a      	mov	r2, r3
 8016012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016014:	637b      	str	r3, [r7, #52]	@ 0x34
 8016016:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016018:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801601a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801601c:	e841 2300 	strex	r3, r2, [r1]
 8016020:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8016022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016024:	2b00      	cmp	r3, #0
 8016026:	d1e6      	bne.n	8015ff6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	3308      	adds	r3, #8
 801602e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016030:	697b      	ldr	r3, [r7, #20]
 8016032:	e853 3f00 	ldrex	r3, [r3]
 8016036:	613b      	str	r3, [r7, #16]
   return(result);
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	f023 0301 	bic.w	r3, r3, #1
 801603e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	3308      	adds	r3, #8
 8016046:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016048:	623a      	str	r2, [r7, #32]
 801604a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801604c:	69f9      	ldr	r1, [r7, #28]
 801604e:	6a3a      	ldr	r2, [r7, #32]
 8016050:	e841 2300 	strex	r3, r2, [r1]
 8016054:	61bb      	str	r3, [r7, #24]
   return(result);
 8016056:	69bb      	ldr	r3, [r7, #24]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d1e5      	bne.n	8016028 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	2220      	movs	r2, #32
 8016060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	2220      	movs	r2, #32
 8016068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	2220      	movs	r2, #32
 8016070:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	2200      	movs	r2, #0
 8016078:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801607c:	2303      	movs	r3, #3
 801607e:	e010      	b.n	80160a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	69da      	ldr	r2, [r3, #28]
 8016086:	68bb      	ldr	r3, [r7, #8]
 8016088:	4013      	ands	r3, r2
 801608a:	68ba      	ldr	r2, [r7, #8]
 801608c:	429a      	cmp	r2, r3
 801608e:	bf0c      	ite	eq
 8016090:	2301      	moveq	r3, #1
 8016092:	2300      	movne	r3, #0
 8016094:	b2db      	uxtb	r3, r3
 8016096:	461a      	mov	r2, r3
 8016098:	79fb      	ldrb	r3, [r7, #7]
 801609a:	429a      	cmp	r2, r3
 801609c:	f43f af46 	beq.w	8015f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80160a0:	2300      	movs	r3, #0
}
 80160a2:	4618      	mov	r0, r3
 80160a4:	3770      	adds	r7, #112	@ 0x70
 80160a6:	46bd      	mov	sp, r7
 80160a8:	bd80      	pop	{r7, pc}
	...

080160ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80160ac:	b480      	push	{r7}
 80160ae:	b0a3      	sub	sp, #140	@ 0x8c
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	60f8      	str	r0, [r7, #12]
 80160b4:	60b9      	str	r1, [r7, #8]
 80160b6:	4613      	mov	r3, r2
 80160b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	68ba      	ldr	r2, [r7, #8]
 80160be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	88fa      	ldrh	r2, [r7, #6]
 80160c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	88fa      	ldrh	r2, [r7, #6]
 80160cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	2200      	movs	r2, #0
 80160d4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	689b      	ldr	r3, [r3, #8]
 80160da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80160de:	d10e      	bne.n	80160fe <UART_Start_Receive_IT+0x52>
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	691b      	ldr	r3, [r3, #16]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d105      	bne.n	80160f4 <UART_Start_Receive_IT+0x48>
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80160ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80160f2:	e02d      	b.n	8016150 <UART_Start_Receive_IT+0xa4>
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	22ff      	movs	r2, #255	@ 0xff
 80160f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80160fc:	e028      	b.n	8016150 <UART_Start_Receive_IT+0xa4>
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	689b      	ldr	r3, [r3, #8]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d10d      	bne.n	8016122 <UART_Start_Receive_IT+0x76>
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	691b      	ldr	r3, [r3, #16]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d104      	bne.n	8016118 <UART_Start_Receive_IT+0x6c>
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	22ff      	movs	r2, #255	@ 0xff
 8016112:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8016116:	e01b      	b.n	8016150 <UART_Start_Receive_IT+0xa4>
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	227f      	movs	r2, #127	@ 0x7f
 801611c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8016120:	e016      	b.n	8016150 <UART_Start_Receive_IT+0xa4>
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	689b      	ldr	r3, [r3, #8]
 8016126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801612a:	d10d      	bne.n	8016148 <UART_Start_Receive_IT+0x9c>
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	691b      	ldr	r3, [r3, #16]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d104      	bne.n	801613e <UART_Start_Receive_IT+0x92>
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	227f      	movs	r2, #127	@ 0x7f
 8016138:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801613c:	e008      	b.n	8016150 <UART_Start_Receive_IT+0xa4>
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	223f      	movs	r2, #63	@ 0x3f
 8016142:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8016146:	e003      	b.n	8016150 <UART_Start_Receive_IT+0xa4>
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	2200      	movs	r2, #0
 801614c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2200      	movs	r2, #0
 8016154:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	2222      	movs	r2, #34	@ 0x22
 801615c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	3308      	adds	r3, #8
 8016166:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801616a:	e853 3f00 	ldrex	r3, [r3]
 801616e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8016170:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016172:	f043 0301 	orr.w	r3, r3, #1
 8016176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	3308      	adds	r3, #8
 8016180:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016184:	673a      	str	r2, [r7, #112]	@ 0x70
 8016186:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016188:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801618a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801618c:	e841 2300 	strex	r3, r2, [r1]
 8016190:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8016192:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016194:	2b00      	cmp	r3, #0
 8016196:	d1e3      	bne.n	8016160 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801619c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80161a0:	d153      	bne.n	801624a <UART_Start_Receive_IT+0x19e>
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80161a8:	88fa      	ldrh	r2, [r7, #6]
 80161aa:	429a      	cmp	r2, r3
 80161ac:	d34d      	bcc.n	801624a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	689b      	ldr	r3, [r3, #8]
 80161b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80161b6:	d107      	bne.n	80161c8 <UART_Start_Receive_IT+0x11c>
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	691b      	ldr	r3, [r3, #16]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d103      	bne.n	80161c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	4a4b      	ldr	r2, [pc, #300]	@ (80162f0 <UART_Start_Receive_IT+0x244>)
 80161c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80161c6:	e002      	b.n	80161ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	4a4a      	ldr	r2, [pc, #296]	@ (80162f4 <UART_Start_Receive_IT+0x248>)
 80161cc:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	2200      	movs	r2, #0
 80161d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	691b      	ldr	r3, [r3, #16]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d01a      	beq.n	8016214 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80161e6:	e853 3f00 	ldrex	r3, [r3]
 80161ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80161ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80161ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80161f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	461a      	mov	r2, r3
 80161fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016202:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016204:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8016206:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8016208:	e841 2300 	strex	r3, r2, [r1]
 801620c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801620e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016210:	2b00      	cmp	r3, #0
 8016212:	d1e4      	bne.n	80161de <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	3308      	adds	r3, #8
 801621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801621c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801621e:	e853 3f00 	ldrex	r3, [r3]
 8016222:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8016224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801622a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	3308      	adds	r3, #8
 8016232:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8016234:	64ba      	str	r2, [r7, #72]	@ 0x48
 8016236:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016238:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801623a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801623c:	e841 2300 	strex	r3, r2, [r1]
 8016240:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8016242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016244:	2b00      	cmp	r3, #0
 8016246:	d1e5      	bne.n	8016214 <UART_Start_Receive_IT+0x168>
 8016248:	e04a      	b.n	80162e0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	689b      	ldr	r3, [r3, #8]
 801624e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016252:	d107      	bne.n	8016264 <UART_Start_Receive_IT+0x1b8>
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	691b      	ldr	r3, [r3, #16]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d103      	bne.n	8016264 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	4a26      	ldr	r2, [pc, #152]	@ (80162f8 <UART_Start_Receive_IT+0x24c>)
 8016260:	671a      	str	r2, [r3, #112]	@ 0x70
 8016262:	e002      	b.n	801626a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	4a25      	ldr	r2, [pc, #148]	@ (80162fc <UART_Start_Receive_IT+0x250>)
 8016268:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	2200      	movs	r2, #0
 801626e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	691b      	ldr	r3, [r3, #16]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d019      	beq.n	80162ae <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016282:	e853 3f00 	ldrex	r3, [r3]
 8016286:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801628a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801628e:	677b      	str	r3, [r7, #116]	@ 0x74
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	461a      	mov	r2, r3
 8016296:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016298:	637b      	str	r3, [r7, #52]	@ 0x34
 801629a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801629c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801629e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80162a0:	e841 2300 	strex	r3, r2, [r1]
 80162a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80162a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d1e6      	bne.n	801627a <UART_Start_Receive_IT+0x1ce>
 80162ac:	e018      	b.n	80162e0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162b4:	697b      	ldr	r3, [r7, #20]
 80162b6:	e853 3f00 	ldrex	r3, [r3]
 80162ba:	613b      	str	r3, [r7, #16]
   return(result);
 80162bc:	693b      	ldr	r3, [r7, #16]
 80162be:	f043 0320 	orr.w	r3, r3, #32
 80162c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	461a      	mov	r2, r3
 80162ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80162cc:	623b      	str	r3, [r7, #32]
 80162ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162d0:	69f9      	ldr	r1, [r7, #28]
 80162d2:	6a3a      	ldr	r2, [r7, #32]
 80162d4:	e841 2300 	strex	r3, r2, [r1]
 80162d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80162da:	69bb      	ldr	r3, [r7, #24]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d1e6      	bne.n	80162ae <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80162e0:	2300      	movs	r3, #0
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	378c      	adds	r7, #140	@ 0x8c
 80162e6:	46bd      	mov	sp, r7
 80162e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ec:	4770      	bx	lr
 80162ee:	bf00      	nop
 80162f0:	08016e51 	.word	0x08016e51
 80162f4:	08016b59 	.word	0x08016b59
 80162f8:	080169f9 	.word	0x080169f9
 80162fc:	08016899 	.word	0x08016899

08016300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016300:	b480      	push	{r7}
 8016302:	b095      	sub	sp, #84	@ 0x54
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801630e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016310:	e853 3f00 	ldrex	r3, [r3]
 8016314:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8016316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801631c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	461a      	mov	r2, r3
 8016324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016326:	643b      	str	r3, [r7, #64]	@ 0x40
 8016328:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801632a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801632c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801632e:	e841 2300 	strex	r3, r2, [r1]
 8016332:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8016334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016336:	2b00      	cmp	r3, #0
 8016338:	d1e6      	bne.n	8016308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	3308      	adds	r3, #8
 8016340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016342:	6a3b      	ldr	r3, [r7, #32]
 8016344:	e853 3f00 	ldrex	r3, [r3]
 8016348:	61fb      	str	r3, [r7, #28]
   return(result);
 801634a:	69fb      	ldr	r3, [r7, #28]
 801634c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016350:	f023 0301 	bic.w	r3, r3, #1
 8016354:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	3308      	adds	r3, #8
 801635c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801635e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8016360:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016366:	e841 2300 	strex	r3, r2, [r1]
 801636a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801636e:	2b00      	cmp	r3, #0
 8016370:	d1e3      	bne.n	801633a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016376:	2b01      	cmp	r3, #1
 8016378:	d118      	bne.n	80163ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	e853 3f00 	ldrex	r3, [r3]
 8016386:	60bb      	str	r3, [r7, #8]
   return(result);
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	f023 0310 	bic.w	r3, r3, #16
 801638e:	647b      	str	r3, [r7, #68]	@ 0x44
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	461a      	mov	r2, r3
 8016396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016398:	61bb      	str	r3, [r7, #24]
 801639a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801639c:	6979      	ldr	r1, [r7, #20]
 801639e:	69ba      	ldr	r2, [r7, #24]
 80163a0:	e841 2300 	strex	r3, r2, [r1]
 80163a4:	613b      	str	r3, [r7, #16]
   return(result);
 80163a6:	693b      	ldr	r3, [r7, #16]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d1e6      	bne.n	801637a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	2220      	movs	r2, #32
 80163b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2200      	movs	r2, #0
 80163b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2200      	movs	r2, #0
 80163be:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80163c0:	bf00      	nop
 80163c2:	3754      	adds	r7, #84	@ 0x54
 80163c4:	46bd      	mov	sp, r7
 80163c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ca:	4770      	bx	lr

080163cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b084      	sub	sp, #16
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2200      	movs	r2, #0
 80163de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	2200      	movs	r2, #0
 80163e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80163ea:	68f8      	ldr	r0, [r7, #12]
 80163ec:	f7ff f96a 	bl	80156c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80163f0:	bf00      	nop
 80163f2:	3710      	adds	r7, #16
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}

080163f8 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b084      	sub	sp, #16
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016404:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801640a:	2200      	movs	r2, #0
 801640c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016412:	2b00      	cmp	r3, #0
 8016414:	d004      	beq.n	8016420 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801641a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801641c:	2b00      	cmp	r3, #0
 801641e:	d12b      	bne.n	8016478 <UART_DMATxAbortCallback+0x80>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	2200      	movs	r2, #0
 8016424:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	2200      	movs	r2, #0
 801642c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	2200      	movs	r2, #0
 8016434:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	220f      	movs	r2, #15
 801643e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016444:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016448:	d107      	bne.n	801645a <UART_DMATxAbortCallback+0x62>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	699a      	ldr	r2, [r3, #24]
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	f042 0210 	orr.w	r2, r2, #16
 8016458:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	2220      	movs	r2, #32
 801645e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	2220      	movs	r2, #32
 8016466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	2200      	movs	r2, #0
 801646e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8016470:	68f8      	ldr	r0, [r7, #12]
 8016472:	f7ff f931 	bl	80156d8 <HAL_UART_AbortCpltCallback>
 8016476:	e000      	b.n	801647a <UART_DMATxAbortCallback+0x82>
      return;
 8016478:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801647a:	3710      	adds	r7, #16
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}

08016480 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	b084      	sub	sp, #16
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801648c:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016492:	2200      	movs	r2, #0
 8016494:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801649a:	2b00      	cmp	r3, #0
 801649c:	d004      	beq.n	80164a8 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80164a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d126      	bne.n	80164f6 <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	2200      	movs	r2, #0
 80164ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	2200      	movs	r2, #0
 80164b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	2200      	movs	r2, #0
 80164bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	220f      	movs	r2, #15
 80164c6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	699a      	ldr	r2, [r3, #24]
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	f042 0208 	orr.w	r2, r2, #8
 80164d6:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	2220      	movs	r2, #32
 80164dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	2220      	movs	r2, #32
 80164e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	2200      	movs	r2, #0
 80164ec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80164ee:	68f8      	ldr	r0, [r7, #12]
 80164f0:	f7ff f8f2 	bl	80156d8 <HAL_UART_AbortCpltCallback>
 80164f4:	e000      	b.n	80164f8 <UART_DMARxAbortCallback+0x78>
      return;
 80164f6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80164f8:	3710      	adds	r7, #16
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}

080164fe <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80164fe:	b480      	push	{r7}
 8016500:	b08f      	sub	sp, #60	@ 0x3c
 8016502:	af00      	add	r7, sp, #0
 8016504:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801650c:	2b21      	cmp	r3, #33	@ 0x21
 801650e:	d14c      	bne.n	80165aa <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8016516:	b29b      	uxth	r3, r3
 8016518:	2b00      	cmp	r3, #0
 801651a:	d132      	bne.n	8016582 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016522:	6a3b      	ldr	r3, [r7, #32]
 8016524:	e853 3f00 	ldrex	r3, [r3]
 8016528:	61fb      	str	r3, [r7, #28]
   return(result);
 801652a:	69fb      	ldr	r3, [r7, #28]
 801652c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016530:	637b      	str	r3, [r7, #52]	@ 0x34
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	461a      	mov	r2, r3
 8016538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801653a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801653c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801653e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016542:	e841 2300 	strex	r3, r2, [r1]
 8016546:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801654a:	2b00      	cmp	r3, #0
 801654c:	d1e6      	bne.n	801651c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	e853 3f00 	ldrex	r3, [r3]
 801655a:	60bb      	str	r3, [r7, #8]
   return(result);
 801655c:	68bb      	ldr	r3, [r7, #8]
 801655e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016562:	633b      	str	r3, [r7, #48]	@ 0x30
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	461a      	mov	r2, r3
 801656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801656c:	61bb      	str	r3, [r7, #24]
 801656e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016570:	6979      	ldr	r1, [r7, #20]
 8016572:	69ba      	ldr	r2, [r7, #24]
 8016574:	e841 2300 	strex	r3, r2, [r1]
 8016578:	613b      	str	r3, [r7, #16]
   return(result);
 801657a:	693b      	ldr	r3, [r7, #16]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d1e6      	bne.n	801654e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8016580:	e013      	b.n	80165aa <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016586:	781a      	ldrb	r2, [r3, #0]
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016592:	1c5a      	adds	r2, r3, #1
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801659e:	b29b      	uxth	r3, r3
 80165a0:	3b01      	subs	r3, #1
 80165a2:	b29a      	uxth	r2, r3
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80165aa:	bf00      	nop
 80165ac:	373c      	adds	r7, #60	@ 0x3c
 80165ae:	46bd      	mov	sp, r7
 80165b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b4:	4770      	bx	lr

080165b6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80165b6:	b480      	push	{r7}
 80165b8:	b091      	sub	sp, #68	@ 0x44
 80165ba:	af00      	add	r7, sp, #0
 80165bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80165c4:	2b21      	cmp	r3, #33	@ 0x21
 80165c6:	d151      	bne.n	801666c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80165ce:	b29b      	uxth	r3, r3
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d132      	bne.n	801663a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165dc:	e853 3f00 	ldrex	r3, [r3]
 80165e0:	623b      	str	r3, [r7, #32]
   return(result);
 80165e2:	6a3b      	ldr	r3, [r7, #32]
 80165e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80165e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	461a      	mov	r2, r3
 80165f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80165f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80165f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80165fa:	e841 2300 	strex	r3, r2, [r1]
 80165fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016602:	2b00      	cmp	r3, #0
 8016604:	d1e6      	bne.n	80165d4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801660c:	693b      	ldr	r3, [r7, #16]
 801660e:	e853 3f00 	ldrex	r3, [r3]
 8016612:	60fb      	str	r3, [r7, #12]
   return(result);
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801661a:	637b      	str	r3, [r7, #52]	@ 0x34
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	461a      	mov	r2, r3
 8016622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016624:	61fb      	str	r3, [r7, #28]
 8016626:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016628:	69b9      	ldr	r1, [r7, #24]
 801662a:	69fa      	ldr	r2, [r7, #28]
 801662c:	e841 2300 	strex	r3, r2, [r1]
 8016630:	617b      	str	r3, [r7, #20]
   return(result);
 8016632:	697b      	ldr	r3, [r7, #20]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d1e6      	bne.n	8016606 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8016638:	e018      	b.n	801666c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801663e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8016640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016642:	881b      	ldrh	r3, [r3, #0]
 8016644:	461a      	mov	r2, r3
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801664e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016654:	1c9a      	adds	r2, r3, #2
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8016660:	b29b      	uxth	r3, r3
 8016662:	3b01      	subs	r3, #1
 8016664:	b29a      	uxth	r2, r3
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801666c:	bf00      	nop
 801666e:	3744      	adds	r7, #68	@ 0x44
 8016670:	46bd      	mov	sp, r7
 8016672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016676:	4770      	bx	lr

08016678 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016678:	b480      	push	{r7}
 801667a:	b091      	sub	sp, #68	@ 0x44
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016686:	2b21      	cmp	r3, #33	@ 0x21
 8016688:	d160      	bne.n	801674c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8016690:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8016692:	e057      	b.n	8016744 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801669a:	b29b      	uxth	r3, r3
 801669c:	2b00      	cmp	r3, #0
 801669e:	d133      	bne.n	8016708 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	3308      	adds	r3, #8
 80166a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166aa:	e853 3f00 	ldrex	r3, [r3]
 80166ae:	623b      	str	r3, [r7, #32]
   return(result);
 80166b0:	6a3b      	ldr	r3, [r7, #32]
 80166b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80166b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	3308      	adds	r3, #8
 80166be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80166c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80166c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80166c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80166c8:	e841 2300 	strex	r3, r2, [r1]
 80166cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80166ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d1e5      	bne.n	80166a0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166da:	693b      	ldr	r3, [r7, #16]
 80166dc:	e853 3f00 	ldrex	r3, [r3]
 80166e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80166e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	461a      	mov	r2, r3
 80166f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166f2:	61fb      	str	r3, [r7, #28]
 80166f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166f6:	69b9      	ldr	r1, [r7, #24]
 80166f8:	69fa      	ldr	r2, [r7, #28]
 80166fa:	e841 2300 	strex	r3, r2, [r1]
 80166fe:	617b      	str	r3, [r7, #20]
   return(result);
 8016700:	697b      	ldr	r3, [r7, #20]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d1e6      	bne.n	80166d4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8016706:	e021      	b.n	801674c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	69db      	ldr	r3, [r3, #28]
 801670e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016712:	2b00      	cmp	r3, #0
 8016714:	d013      	beq.n	801673e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801671a:	781a      	ldrb	r2, [r3, #0]
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016726:	1c5a      	adds	r2, r3, #1
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8016732:	b29b      	uxth	r3, r3
 8016734:	3b01      	subs	r3, #1
 8016736:	b29a      	uxth	r2, r3
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801673e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016740:	3b01      	subs	r3, #1
 8016742:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8016744:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016746:	2b00      	cmp	r3, #0
 8016748:	d1a4      	bne.n	8016694 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801674a:	e7ff      	b.n	801674c <UART_TxISR_8BIT_FIFOEN+0xd4>
 801674c:	bf00      	nop
 801674e:	3744      	adds	r7, #68	@ 0x44
 8016750:	46bd      	mov	sp, r7
 8016752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016756:	4770      	bx	lr

08016758 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016758:	b480      	push	{r7}
 801675a:	b091      	sub	sp, #68	@ 0x44
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016766:	2b21      	cmp	r3, #33	@ 0x21
 8016768:	d165      	bne.n	8016836 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8016770:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8016772:	e05c      	b.n	801682e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801677a:	b29b      	uxth	r3, r3
 801677c:	2b00      	cmp	r3, #0
 801677e:	d133      	bne.n	80167e8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	3308      	adds	r3, #8
 8016786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016788:	6a3b      	ldr	r3, [r7, #32]
 801678a:	e853 3f00 	ldrex	r3, [r3]
 801678e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016790:	69fb      	ldr	r3, [r7, #28]
 8016792:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8016796:	637b      	str	r3, [r7, #52]	@ 0x34
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	3308      	adds	r3, #8
 801679e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80167a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80167a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80167a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80167a8:	e841 2300 	strex	r3, r2, [r1]
 80167ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80167ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d1e5      	bne.n	8016780 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	e853 3f00 	ldrex	r3, [r3]
 80167c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	461a      	mov	r2, r3
 80167d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167d2:	61bb      	str	r3, [r7, #24]
 80167d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167d6:	6979      	ldr	r1, [r7, #20]
 80167d8:	69ba      	ldr	r2, [r7, #24]
 80167da:	e841 2300 	strex	r3, r2, [r1]
 80167de:	613b      	str	r3, [r7, #16]
   return(result);
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d1e6      	bne.n	80167b4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80167e6:	e026      	b.n	8016836 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	69db      	ldr	r3, [r3, #28]
 80167ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d018      	beq.n	8016828 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80167fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80167fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167fe:	881b      	ldrh	r3, [r3, #0]
 8016800:	461a      	mov	r2, r3
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801680a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016810:	1c9a      	adds	r2, r3, #2
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801681c:	b29b      	uxth	r3, r3
 801681e:	3b01      	subs	r3, #1
 8016820:	b29a      	uxth	r2, r3
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8016828:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801682a:	3b01      	subs	r3, #1
 801682c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801682e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016830:	2b00      	cmp	r3, #0
 8016832:	d19f      	bne.n	8016774 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8016834:	e7ff      	b.n	8016836 <UART_TxISR_16BIT_FIFOEN+0xde>
 8016836:	bf00      	nop
 8016838:	3744      	adds	r7, #68	@ 0x44
 801683a:	46bd      	mov	sp, r7
 801683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016840:	4770      	bx	lr

08016842 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016842:	b580      	push	{r7, lr}
 8016844:	b088      	sub	sp, #32
 8016846:	af00      	add	r7, sp, #0
 8016848:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	e853 3f00 	ldrex	r3, [r3]
 8016856:	60bb      	str	r3, [r7, #8]
   return(result);
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801685e:	61fb      	str	r3, [r7, #28]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	461a      	mov	r2, r3
 8016866:	69fb      	ldr	r3, [r7, #28]
 8016868:	61bb      	str	r3, [r7, #24]
 801686a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801686c:	6979      	ldr	r1, [r7, #20]
 801686e:	69ba      	ldr	r2, [r7, #24]
 8016870:	e841 2300 	strex	r3, r2, [r1]
 8016874:	613b      	str	r3, [r7, #16]
   return(result);
 8016876:	693b      	ldr	r3, [r7, #16]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d1e6      	bne.n	801684a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	2220      	movs	r2, #32
 8016880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	2200      	movs	r2, #0
 8016888:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801688a:	6878      	ldr	r0, [r7, #4]
 801688c:	f7f6 f8e4 	bl	800ca58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016890:	bf00      	nop
 8016892:	3720      	adds	r7, #32
 8016894:	46bd      	mov	sp, r7
 8016896:	bd80      	pop	{r7, pc}

08016898 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b096      	sub	sp, #88	@ 0x58
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80168a6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80168b0:	2b22      	cmp	r3, #34	@ 0x22
 80168b2:	f040 8095 	bne.w	80169e0 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168bc:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80168c0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80168c4:	b2d9      	uxtb	r1, r3
 80168c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80168ca:	b2da      	uxtb	r2, r3
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80168d0:	400a      	ands	r2, r1
 80168d2:	b2d2      	uxtb	r2, r2
 80168d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80168da:	1c5a      	adds	r2, r3, #1
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	3b01      	subs	r3, #1
 80168ea:	b29a      	uxth	r2, r3
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d178      	bne.n	80169f0 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016906:	e853 3f00 	ldrex	r3, [r3]
 801690a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801690c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801690e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016912:	653b      	str	r3, [r7, #80]	@ 0x50
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	461a      	mov	r2, r3
 801691a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801691c:	647b      	str	r3, [r7, #68]	@ 0x44
 801691e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016920:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016924:	e841 2300 	strex	r3, r2, [r1]
 8016928:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801692a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801692c:	2b00      	cmp	r3, #0
 801692e:	d1e6      	bne.n	80168fe <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	3308      	adds	r3, #8
 8016936:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801693a:	e853 3f00 	ldrex	r3, [r3]
 801693e:	623b      	str	r3, [r7, #32]
   return(result);
 8016940:	6a3b      	ldr	r3, [r7, #32]
 8016942:	f023 0301 	bic.w	r3, r3, #1
 8016946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	3308      	adds	r3, #8
 801694e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016950:	633a      	str	r2, [r7, #48]	@ 0x30
 8016952:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016958:	e841 2300 	strex	r3, r2, [r1]
 801695c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801695e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016960:	2b00      	cmp	r3, #0
 8016962:	d1e5      	bne.n	8016930 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2220      	movs	r2, #32
 8016968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	2200      	movs	r2, #0
 8016970:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016976:	2b01      	cmp	r3, #1
 8016978:	d12e      	bne.n	80169d8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	2200      	movs	r2, #0
 801697e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016986:	693b      	ldr	r3, [r7, #16]
 8016988:	e853 3f00 	ldrex	r3, [r3]
 801698c:	60fb      	str	r3, [r7, #12]
   return(result);
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	f023 0310 	bic.w	r3, r3, #16
 8016994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	461a      	mov	r2, r3
 801699c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801699e:	61fb      	str	r3, [r7, #28]
 80169a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169a2:	69b9      	ldr	r1, [r7, #24]
 80169a4:	69fa      	ldr	r2, [r7, #28]
 80169a6:	e841 2300 	strex	r3, r2, [r1]
 80169aa:	617b      	str	r3, [r7, #20]
   return(result);
 80169ac:	697b      	ldr	r3, [r7, #20]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d1e6      	bne.n	8016980 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	69db      	ldr	r3, [r3, #28]
 80169b8:	f003 0310 	and.w	r3, r3, #16
 80169bc:	2b10      	cmp	r3, #16
 80169be:	d103      	bne.n	80169c8 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	2210      	movs	r2, #16
 80169c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80169ce:	4619      	mov	r1, r3
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f7fe fe8b 	bl	80156ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80169d6:	e00b      	b.n	80169f0 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80169d8:	6878      	ldr	r0, [r7, #4]
 80169da:	f7f6 f9bb 	bl	800cd54 <HAL_UART_RxCpltCallback>
}
 80169de:	e007      	b.n	80169f0 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	699a      	ldr	r2, [r3, #24]
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	f042 0208 	orr.w	r2, r2, #8
 80169ee:	619a      	str	r2, [r3, #24]
}
 80169f0:	bf00      	nop
 80169f2:	3758      	adds	r7, #88	@ 0x58
 80169f4:	46bd      	mov	sp, r7
 80169f6:	bd80      	pop	{r7, pc}

080169f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b096      	sub	sp, #88	@ 0x58
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016a06:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016a10:	2b22      	cmp	r3, #34	@ 0x22
 8016a12:	f040 8095 	bne.w	8016b40 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a1c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016a24:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8016a26:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8016a2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8016a2e:	4013      	ands	r3, r2
 8016a30:	b29a      	uxth	r2, r3
 8016a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016a34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016a3a:	1c9a      	adds	r2, r3, #2
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	3b01      	subs	r3, #1
 8016a4a:	b29a      	uxth	r2, r3
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8016a58:	b29b      	uxth	r3, r3
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d178      	bne.n	8016b50 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a66:	e853 3f00 	ldrex	r3, [r3]
 8016a6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8016a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	461a      	mov	r2, r3
 8016a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8016a7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016a82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016a84:	e841 2300 	strex	r3, r2, [r1]
 8016a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8016a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d1e6      	bne.n	8016a5e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	3308      	adds	r3, #8
 8016a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a98:	6a3b      	ldr	r3, [r7, #32]
 8016a9a:	e853 3f00 	ldrex	r3, [r3]
 8016a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016aa0:	69fb      	ldr	r3, [r7, #28]
 8016aa2:	f023 0301 	bic.w	r3, r3, #1
 8016aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	3308      	adds	r3, #8
 8016aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8016ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016ab8:	e841 2300 	strex	r3, r2, [r1]
 8016abc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d1e5      	bne.n	8016a90 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2220      	movs	r2, #32
 8016ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ad6:	2b01      	cmp	r3, #1
 8016ad8:	d12e      	bne.n	8016b38 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	2200      	movs	r2, #0
 8016ade:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	e853 3f00 	ldrex	r3, [r3]
 8016aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8016aee:	68bb      	ldr	r3, [r7, #8]
 8016af0:	f023 0310 	bic.w	r3, r3, #16
 8016af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	461a      	mov	r2, r3
 8016afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016afe:	61bb      	str	r3, [r7, #24]
 8016b00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b02:	6979      	ldr	r1, [r7, #20]
 8016b04:	69ba      	ldr	r2, [r7, #24]
 8016b06:	e841 2300 	strex	r3, r2, [r1]
 8016b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d1e6      	bne.n	8016ae0 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	69db      	ldr	r3, [r3, #28]
 8016b18:	f003 0310 	and.w	r3, r3, #16
 8016b1c:	2b10      	cmp	r3, #16
 8016b1e:	d103      	bne.n	8016b28 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	2210      	movs	r2, #16
 8016b26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8016b2e:	4619      	mov	r1, r3
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f7fe fddb 	bl	80156ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016b36:	e00b      	b.n	8016b50 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8016b38:	6878      	ldr	r0, [r7, #4]
 8016b3a:	f7f6 f90b 	bl	800cd54 <HAL_UART_RxCpltCallback>
}
 8016b3e:	e007      	b.n	8016b50 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	699a      	ldr	r2, [r3, #24]
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	f042 0208 	orr.w	r2, r2, #8
 8016b4e:	619a      	str	r2, [r3, #24]
}
 8016b50:	bf00      	nop
 8016b52:	3758      	adds	r7, #88	@ 0x58
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}

08016b58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b0a6      	sub	sp, #152	@ 0x98
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016b66:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	69db      	ldr	r3, [r3, #28]
 8016b70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	689b      	ldr	r3, [r3, #8]
 8016b84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016b8e:	2b22      	cmp	r3, #34	@ 0x22
 8016b90:	f040 814f 	bne.w	8016e32 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016b9a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016b9e:	e0f6      	b.n	8016d8e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ba6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016baa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8016bae:	b2d9      	uxtb	r1, r3
 8016bb0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8016bb4:	b2da      	uxtb	r2, r3
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016bba:	400a      	ands	r2, r1
 8016bbc:	b2d2      	uxtb	r2, r2
 8016bbe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016bc4:	1c5a      	adds	r2, r3, #1
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8016bd0:	b29b      	uxth	r3, r3
 8016bd2:	3b01      	subs	r3, #1
 8016bd4:	b29a      	uxth	r2, r3
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	69db      	ldr	r3, [r3, #28]
 8016be2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016be6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016bea:	f003 0307 	and.w	r3, r3, #7
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d053      	beq.n	8016c9a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016bf6:	f003 0301 	and.w	r3, r3, #1
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d011      	beq.n	8016c22 <UART_RxISR_8BIT_FIFOEN+0xca>
 8016bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d00b      	beq.n	8016c22 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	2201      	movs	r2, #1
 8016c10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016c18:	f043 0201 	orr.w	r2, r3, #1
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016c22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016c26:	f003 0302 	and.w	r3, r3, #2
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d011      	beq.n	8016c52 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8016c2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016c32:	f003 0301 	and.w	r3, r3, #1
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d00b      	beq.n	8016c52 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	2202      	movs	r2, #2
 8016c40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016c48:	f043 0204 	orr.w	r2, r3, #4
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016c52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016c56:	f003 0304 	and.w	r3, r3, #4
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d011      	beq.n	8016c82 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8016c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016c62:	f003 0301 	and.w	r3, r3, #1
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d00b      	beq.n	8016c82 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	2204      	movs	r2, #4
 8016c70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016c78:	f043 0202 	orr.w	r2, r3, #2
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d006      	beq.n	8016c9a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	f7fe fd19 	bl	80156c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	2200      	movs	r2, #0
 8016c96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8016ca0:	b29b      	uxth	r3, r3
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d173      	bne.n	8016d8e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016cae:	e853 3f00 	ldrex	r3, [r3]
 8016cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8016cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016cb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016cba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	461a      	mov	r2, r3
 8016cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8016cca:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ccc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8016cce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016cd0:	e841 2300 	strex	r3, r2, [r1]
 8016cd4:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8016cd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d1e4      	bne.n	8016ca6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	3308      	adds	r3, #8
 8016ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016ce6:	e853 3f00 	ldrex	r3, [r3]
 8016cea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8016cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016cf2:	f023 0301 	bic.w	r3, r3, #1
 8016cf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	3308      	adds	r3, #8
 8016cfe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8016d00:	657a      	str	r2, [r7, #84]	@ 0x54
 8016d02:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8016d06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016d08:	e841 2300 	strex	r3, r2, [r1]
 8016d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8016d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d1e3      	bne.n	8016cdc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	2220      	movs	r2, #32
 8016d18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2200      	movs	r2, #0
 8016d20:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d26:	2b01      	cmp	r3, #1
 8016d28:	d12e      	bne.n	8016d88 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d38:	e853 3f00 	ldrex	r3, [r3]
 8016d3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8016d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d40:	f023 0310 	bic.w	r3, r3, #16
 8016d44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016d4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8016d50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016d54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016d56:	e841 2300 	strex	r3, r2, [r1]
 8016d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8016d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d1e6      	bne.n	8016d30 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	69db      	ldr	r3, [r3, #28]
 8016d68:	f003 0310 	and.w	r3, r3, #16
 8016d6c:	2b10      	cmp	r3, #16
 8016d6e:	d103      	bne.n	8016d78 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	2210      	movs	r2, #16
 8016d76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8016d7e:	4619      	mov	r1, r3
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f7fe fcb3 	bl	80156ec <HAL_UARTEx_RxEventCallback>
 8016d86:	e002      	b.n	8016d8e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016d88:	6878      	ldr	r0, [r7, #4]
 8016d8a:	f7f5 ffe3 	bl	800cd54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016d8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d006      	beq.n	8016da4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8016d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016d9a:	f003 0320 	and.w	r3, r3, #32
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	f47f aefe 	bne.w	8016ba0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8016daa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016dae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d045      	beq.n	8016e42 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016dbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8016dc0:	429a      	cmp	r2, r3
 8016dc2:	d23e      	bcs.n	8016e42 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	3308      	adds	r3, #8
 8016dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016dcc:	6a3b      	ldr	r3, [r7, #32]
 8016dce:	e853 3f00 	ldrex	r3, [r3]
 8016dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8016dd4:	69fb      	ldr	r3, [r7, #28]
 8016dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016dda:	673b      	str	r3, [r7, #112]	@ 0x70
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	3308      	adds	r3, #8
 8016de2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8016de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016dec:	e841 2300 	strex	r3, r2, [r1]
 8016df0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8016df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d1e5      	bne.n	8016dc4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	4a14      	ldr	r2, [pc, #80]	@ (8016e4c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8016dfc:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	e853 3f00 	ldrex	r3, [r3]
 8016e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8016e0c:	68bb      	ldr	r3, [r7, #8]
 8016e0e:	f043 0320 	orr.w	r3, r3, #32
 8016e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	461a      	mov	r2, r3
 8016e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016e1c:	61bb      	str	r3, [r7, #24]
 8016e1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e20:	6979      	ldr	r1, [r7, #20]
 8016e22:	69ba      	ldr	r2, [r7, #24]
 8016e24:	e841 2300 	strex	r3, r2, [r1]
 8016e28:	613b      	str	r3, [r7, #16]
   return(result);
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d1e6      	bne.n	8016dfe <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016e30:	e007      	b.n	8016e42 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	699a      	ldr	r2, [r3, #24]
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	f042 0208 	orr.w	r2, r2, #8
 8016e40:	619a      	str	r2, [r3, #24]
}
 8016e42:	bf00      	nop
 8016e44:	3798      	adds	r7, #152	@ 0x98
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}
 8016e4a:	bf00      	nop
 8016e4c:	08016899 	.word	0x08016899

08016e50 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b0a8      	sub	sp, #160	@ 0xa0
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016e5e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	69db      	ldr	r3, [r3, #28]
 8016e68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	689b      	ldr	r3, [r3, #8]
 8016e7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016e86:	2b22      	cmp	r3, #34	@ 0x22
 8016e88:	f040 8153 	bne.w	8017132 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016e92:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016e96:	e0fa      	b.n	801708e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e9e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016ea6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8016eaa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8016eae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8016eb2:	4013      	ands	r3, r2
 8016eb4:	b29a      	uxth	r2, r3
 8016eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016eba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016ec0:	1c9a      	adds	r2, r3, #2
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8016ecc:	b29b      	uxth	r3, r3
 8016ece:	3b01      	subs	r3, #1
 8016ed0:	b29a      	uxth	r2, r3
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	69db      	ldr	r3, [r3, #28]
 8016ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016ee2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016ee6:	f003 0307 	and.w	r3, r3, #7
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d053      	beq.n	8016f96 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016eee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016ef2:	f003 0301 	and.w	r3, r3, #1
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d011      	beq.n	8016f1e <UART_RxISR_16BIT_FIFOEN+0xce>
 8016efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d00b      	beq.n	8016f1e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	2201      	movs	r2, #1
 8016f0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016f14:	f043 0201 	orr.w	r2, r3, #1
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016f1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016f22:	f003 0302 	and.w	r3, r3, #2
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d011      	beq.n	8016f4e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016f2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016f2e:	f003 0301 	and.w	r3, r3, #1
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d00b      	beq.n	8016f4e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2202      	movs	r2, #2
 8016f3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016f44:	f043 0204 	orr.w	r2, r3, #4
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016f4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016f52:	f003 0304 	and.w	r3, r3, #4
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d011      	beq.n	8016f7e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016f5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016f5e:	f003 0301 	and.w	r3, r3, #1
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d00b      	beq.n	8016f7e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	2204      	movs	r2, #4
 8016f6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016f74:	f043 0202 	orr.w	r2, r3, #2
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d006      	beq.n	8016f96 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016f88:	6878      	ldr	r0, [r7, #4]
 8016f8a:	f7fe fb9b 	bl	80156c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	2200      	movs	r2, #0
 8016f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8016f9c:	b29b      	uxth	r3, r3
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d175      	bne.n	801708e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016faa:	e853 3f00 	ldrex	r3, [r3]
 8016fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8016fb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016fb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016fb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016fc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016fc6:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fc8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8016fca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8016fcc:	e841 2300 	strex	r3, r2, [r1]
 8016fd0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8016fd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d1e4      	bne.n	8016fa2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	3308      	adds	r3, #8
 8016fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016fe2:	e853 3f00 	ldrex	r3, [r3]
 8016fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8016fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016fee:	f023 0301 	bic.w	r3, r3, #1
 8016ff2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	3308      	adds	r3, #8
 8016ffc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017000:	65ba      	str	r2, [r7, #88]	@ 0x58
 8017002:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017004:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017006:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017008:	e841 2300 	strex	r3, r2, [r1]
 801700c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801700e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017010:	2b00      	cmp	r3, #0
 8017012:	d1e1      	bne.n	8016fd8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	2220      	movs	r2, #32
 8017018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	2200      	movs	r2, #0
 8017020:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017026:	2b01      	cmp	r3, #1
 8017028:	d12e      	bne.n	8017088 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	2200      	movs	r2, #0
 801702e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017038:	e853 3f00 	ldrex	r3, [r3]
 801703c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801703e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017040:	f023 0310 	bic.w	r3, r3, #16
 8017044:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	461a      	mov	r2, r3
 801704c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801704e:	647b      	str	r3, [r7, #68]	@ 0x44
 8017050:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017052:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017054:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017056:	e841 2300 	strex	r3, r2, [r1]
 801705a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801705c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801705e:	2b00      	cmp	r3, #0
 8017060:	d1e6      	bne.n	8017030 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	69db      	ldr	r3, [r3, #28]
 8017068:	f003 0310 	and.w	r3, r3, #16
 801706c:	2b10      	cmp	r3, #16
 801706e:	d103      	bne.n	8017078 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	2210      	movs	r2, #16
 8017076:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801707e:	4619      	mov	r1, r3
 8017080:	6878      	ldr	r0, [r7, #4]
 8017082:	f7fe fb33 	bl	80156ec <HAL_UARTEx_RxEventCallback>
 8017086:	e002      	b.n	801708e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f7f5 fe63 	bl	800cd54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801708e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8017092:	2b00      	cmp	r3, #0
 8017094:	d006      	beq.n	80170a4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8017096:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801709a:	f003 0320 	and.w	r3, r3, #32
 801709e:	2b00      	cmp	r3, #0
 80170a0:	f47f aefa 	bne.w	8016e98 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80170aa:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80170ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d045      	beq.n	8017142 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80170bc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80170c0:	429a      	cmp	r2, r3
 80170c2:	d23e      	bcs.n	8017142 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	3308      	adds	r3, #8
 80170ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170ce:	e853 3f00 	ldrex	r3, [r3]
 80170d2:	623b      	str	r3, [r7, #32]
   return(result);
 80170d4:	6a3b      	ldr	r3, [r7, #32]
 80170d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80170da:	677b      	str	r3, [r7, #116]	@ 0x74
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	3308      	adds	r3, #8
 80170e2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80170e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80170e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80170ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80170ec:	e841 2300 	strex	r3, r2, [r1]
 80170f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80170f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d1e5      	bne.n	80170c4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	4a14      	ldr	r2, [pc, #80]	@ (801714c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80170fc:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017104:	693b      	ldr	r3, [r7, #16]
 8017106:	e853 3f00 	ldrex	r3, [r3]
 801710a:	60fb      	str	r3, [r7, #12]
   return(result);
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	f043 0320 	orr.w	r3, r3, #32
 8017112:	673b      	str	r3, [r7, #112]	@ 0x70
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	461a      	mov	r2, r3
 801711a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801711c:	61fb      	str	r3, [r7, #28]
 801711e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017120:	69b9      	ldr	r1, [r7, #24]
 8017122:	69fa      	ldr	r2, [r7, #28]
 8017124:	e841 2300 	strex	r3, r2, [r1]
 8017128:	617b      	str	r3, [r7, #20]
   return(result);
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d1e6      	bne.n	80170fe <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017130:	e007      	b.n	8017142 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	699a      	ldr	r2, [r3, #24]
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	f042 0208 	orr.w	r2, r2, #8
 8017140:	619a      	str	r2, [r3, #24]
}
 8017142:	bf00      	nop
 8017144:	37a0      	adds	r7, #160	@ 0xa0
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}
 801714a:	bf00      	nop
 801714c:	080169f9 	.word	0x080169f9

08017150 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b086      	sub	sp, #24
 8017154:	af00      	add	r7, sp, #0
 8017156:	60f8      	str	r0, [r7, #12]
 8017158:	60b9      	str	r1, [r7, #8]
 801715a:	607a      	str	r2, [r7, #4]
 801715c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d101      	bne.n	8017168 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8017164:	2301      	movs	r3, #1
 8017166:	e058      	b.n	801721a <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801716e:	2b00      	cmp	r3, #0
 8017170:	d106      	bne.n	8017180 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	2200      	movs	r2, #0
 8017176:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 801717a:	68f8      	ldr	r0, [r7, #12]
 801717c:	f7f7 fb9e 	bl	800e8bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	2224      	movs	r2, #36	@ 0x24
 8017184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	681a      	ldr	r2, [r3, #0]
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	f022 0201 	bic.w	r2, r2, #1
 8017196:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017198:	68f8      	ldr	r0, [r7, #12]
 801719a:	f7fe fad5 	bl	8015748 <UART_SetConfig>
 801719e:	4603      	mov	r3, r0
 80171a0:	2b01      	cmp	r3, #1
 80171a2:	d101      	bne.n	80171a8 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 80171a4:	2301      	movs	r3, #1
 80171a6:	e038      	b.n	801721a <HAL_RS485Ex_Init+0xca>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d002      	beq.n	80171b6 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80171b0:	68f8      	ldr	r0, [r7, #12]
 80171b2:	f7fe fdc5 	bl	8015d40 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	689a      	ldr	r2, [r3, #8]
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80171c4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	689b      	ldr	r3, [r3, #8]
 80171cc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	68ba      	ldr	r2, [r7, #8]
 80171d6:	430a      	orrs	r2, r1
 80171d8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	055b      	lsls	r3, r3, #21
 80171de:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80171e0:	683b      	ldr	r3, [r7, #0]
 80171e2:	041b      	lsls	r3, r3, #16
 80171e4:	697a      	ldr	r2, [r7, #20]
 80171e6:	4313      	orrs	r3, r2
 80171e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80171f4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80171f8:	68fa      	ldr	r2, [r7, #12]
 80171fa:	6812      	ldr	r2, [r2, #0]
 80171fc:	6979      	ldr	r1, [r7, #20]
 80171fe:	430b      	orrs	r3, r1
 8017200:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	681a      	ldr	r2, [r3, #0]
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	f042 0201 	orr.w	r2, r2, #1
 8017210:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017212:	68f8      	ldr	r0, [r7, #12]
 8017214:	f7fe fe36 	bl	8015e84 <UART_CheckIdleState>
 8017218:	4603      	mov	r3, r0
}
 801721a:	4618      	mov	r0, r3
 801721c:	3718      	adds	r7, #24
 801721e:	46bd      	mov	sp, r7
 8017220:	bd80      	pop	{r7, pc}

08017222 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8017222:	b480      	push	{r7}
 8017224:	b083      	sub	sp, #12
 8017226:	af00      	add	r7, sp, #0
 8017228:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801722a:	bf00      	nop
 801722c:	370c      	adds	r7, #12
 801722e:	46bd      	mov	sp, r7
 8017230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017234:	4770      	bx	lr

08017236 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8017236:	b480      	push	{r7}
 8017238:	b083      	sub	sp, #12
 801723a:	af00      	add	r7, sp, #0
 801723c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801723e:	bf00      	nop
 8017240:	370c      	adds	r7, #12
 8017242:	46bd      	mov	sp, r7
 8017244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017248:	4770      	bx	lr

0801724a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801724a:	b480      	push	{r7}
 801724c:	b083      	sub	sp, #12
 801724e:	af00      	add	r7, sp, #0
 8017250:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8017252:	bf00      	nop
 8017254:	370c      	adds	r7, #12
 8017256:	46bd      	mov	sp, r7
 8017258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725c:	4770      	bx	lr

0801725e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801725e:	b480      	push	{r7}
 8017260:	b085      	sub	sp, #20
 8017262:	af00      	add	r7, sp, #0
 8017264:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801726c:	2b01      	cmp	r3, #1
 801726e:	d101      	bne.n	8017274 <HAL_UARTEx_DisableFifoMode+0x16>
 8017270:	2302      	movs	r3, #2
 8017272:	e027      	b.n	80172c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2201      	movs	r2, #1
 8017278:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	2224      	movs	r2, #36	@ 0x24
 8017280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	681a      	ldr	r2, [r3, #0]
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	f022 0201 	bic.w	r2, r2, #1
 801729a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80172a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	2200      	movs	r2, #0
 80172a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	68fa      	ldr	r2, [r7, #12]
 80172b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	2220      	movs	r2, #32
 80172b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	2200      	movs	r2, #0
 80172be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80172c2:	2300      	movs	r3, #0
}
 80172c4:	4618      	mov	r0, r3
 80172c6:	3714      	adds	r7, #20
 80172c8:	46bd      	mov	sp, r7
 80172ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ce:	4770      	bx	lr

080172d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b084      	sub	sp, #16
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
 80172d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80172e0:	2b01      	cmp	r3, #1
 80172e2:	d101      	bne.n	80172e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80172e4:	2302      	movs	r3, #2
 80172e6:	e02d      	b.n	8017344 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2201      	movs	r2, #1
 80172ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	2224      	movs	r2, #36	@ 0x24
 80172f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	681a      	ldr	r2, [r3, #0]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	f022 0201 	bic.w	r2, r2, #1
 801730e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	689b      	ldr	r3, [r3, #8]
 8017316:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	683a      	ldr	r2, [r7, #0]
 8017320:	430a      	orrs	r2, r1
 8017322:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017324:	6878      	ldr	r0, [r7, #4]
 8017326:	f000 f84f 	bl	80173c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	68fa      	ldr	r2, [r7, #12]
 8017330:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	2220      	movs	r2, #32
 8017336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	2200      	movs	r2, #0
 801733e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8017342:	2300      	movs	r3, #0
}
 8017344:	4618      	mov	r0, r3
 8017346:	3710      	adds	r7, #16
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}

0801734c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b084      	sub	sp, #16
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801735c:	2b01      	cmp	r3, #1
 801735e:	d101      	bne.n	8017364 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8017360:	2302      	movs	r3, #2
 8017362:	e02d      	b.n	80173c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2201      	movs	r2, #1
 8017368:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2224      	movs	r2, #36	@ 0x24
 8017370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	681a      	ldr	r2, [r3, #0]
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	f022 0201 	bic.w	r2, r2, #1
 801738a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	689b      	ldr	r3, [r3, #8]
 8017392:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	683a      	ldr	r2, [r7, #0]
 801739c:	430a      	orrs	r2, r1
 801739e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f000 f811 	bl	80173c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	68fa      	ldr	r2, [r7, #12]
 80173ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	2220      	movs	r2, #32
 80173b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	2200      	movs	r2, #0
 80173ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80173be:	2300      	movs	r3, #0
}
 80173c0:	4618      	mov	r0, r3
 80173c2:	3710      	adds	r7, #16
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}

080173c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80173c8:	b480      	push	{r7}
 80173ca:	b085      	sub	sp, #20
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d108      	bne.n	80173ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	2201      	movs	r2, #1
 80173dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	2201      	movs	r2, #1
 80173e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80173e8:	e031      	b.n	801744e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80173ea:	2308      	movs	r3, #8
 80173ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80173ee:	2308      	movs	r3, #8
 80173f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	689b      	ldr	r3, [r3, #8]
 80173f8:	0e5b      	lsrs	r3, r3, #25
 80173fa:	b2db      	uxtb	r3, r3
 80173fc:	f003 0307 	and.w	r3, r3, #7
 8017400:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	689b      	ldr	r3, [r3, #8]
 8017408:	0f5b      	lsrs	r3, r3, #29
 801740a:	b2db      	uxtb	r3, r3
 801740c:	f003 0307 	and.w	r3, r3, #7
 8017410:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017412:	7bbb      	ldrb	r3, [r7, #14]
 8017414:	7b3a      	ldrb	r2, [r7, #12]
 8017416:	4911      	ldr	r1, [pc, #68]	@ (801745c <UARTEx_SetNbDataToProcess+0x94>)
 8017418:	5c8a      	ldrb	r2, [r1, r2]
 801741a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801741e:	7b3a      	ldrb	r2, [r7, #12]
 8017420:	490f      	ldr	r1, [pc, #60]	@ (8017460 <UARTEx_SetNbDataToProcess+0x98>)
 8017422:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017424:	fb93 f3f2 	sdiv	r3, r3, r2
 8017428:	b29a      	uxth	r2, r3
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017430:	7bfb      	ldrb	r3, [r7, #15]
 8017432:	7b7a      	ldrb	r2, [r7, #13]
 8017434:	4909      	ldr	r1, [pc, #36]	@ (801745c <UARTEx_SetNbDataToProcess+0x94>)
 8017436:	5c8a      	ldrb	r2, [r1, r2]
 8017438:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801743c:	7b7a      	ldrb	r2, [r7, #13]
 801743e:	4908      	ldr	r1, [pc, #32]	@ (8017460 <UARTEx_SetNbDataToProcess+0x98>)
 8017440:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017442:	fb93 f3f2 	sdiv	r3, r3, r2
 8017446:	b29a      	uxth	r2, r3
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801744e:	bf00      	nop
 8017450:	3714      	adds	r7, #20
 8017452:	46bd      	mov	sp, r7
 8017454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017458:	4770      	bx	lr
 801745a:	bf00      	nop
 801745c:	08017620 	.word	0x08017620
 8017460:	08017628 	.word	0x08017628

08017464 <memset>:
 8017464:	4402      	add	r2, r0
 8017466:	4603      	mov	r3, r0
 8017468:	4293      	cmp	r3, r2
 801746a:	d100      	bne.n	801746e <memset+0xa>
 801746c:	4770      	bx	lr
 801746e:	f803 1b01 	strb.w	r1, [r3], #1
 8017472:	e7f9      	b.n	8017468 <memset+0x4>

08017474 <__libc_init_array>:
 8017474:	b570      	push	{r4, r5, r6, lr}
 8017476:	4d0d      	ldr	r5, [pc, #52]	@ (80174ac <__libc_init_array+0x38>)
 8017478:	4c0d      	ldr	r4, [pc, #52]	@ (80174b0 <__libc_init_array+0x3c>)
 801747a:	1b64      	subs	r4, r4, r5
 801747c:	10a4      	asrs	r4, r4, #2
 801747e:	2600      	movs	r6, #0
 8017480:	42a6      	cmp	r6, r4
 8017482:	d109      	bne.n	8017498 <__libc_init_array+0x24>
 8017484:	4d0b      	ldr	r5, [pc, #44]	@ (80174b4 <__libc_init_array+0x40>)
 8017486:	4c0c      	ldr	r4, [pc, #48]	@ (80174b8 <__libc_init_array+0x44>)
 8017488:	f000 f8a2 	bl	80175d0 <_init>
 801748c:	1b64      	subs	r4, r4, r5
 801748e:	10a4      	asrs	r4, r4, #2
 8017490:	2600      	movs	r6, #0
 8017492:	42a6      	cmp	r6, r4
 8017494:	d105      	bne.n	80174a2 <__libc_init_array+0x2e>
 8017496:	bd70      	pop	{r4, r5, r6, pc}
 8017498:	f855 3b04 	ldr.w	r3, [r5], #4
 801749c:	4798      	blx	r3
 801749e:	3601      	adds	r6, #1
 80174a0:	e7ee      	b.n	8017480 <__libc_init_array+0xc>
 80174a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80174a6:	4798      	blx	r3
 80174a8:	3601      	adds	r6, #1
 80174aa:	e7f2      	b.n	8017492 <__libc_init_array+0x1e>
 80174ac:	08017638 	.word	0x08017638
 80174b0:	08017638 	.word	0x08017638
 80174b4:	08017638 	.word	0x08017638
 80174b8:	0801763c 	.word	0x0801763c

080174bc <memcpy>:
 80174bc:	440a      	add	r2, r1
 80174be:	4291      	cmp	r1, r2
 80174c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80174c4:	d100      	bne.n	80174c8 <memcpy+0xc>
 80174c6:	4770      	bx	lr
 80174c8:	b510      	push	{r4, lr}
 80174ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80174ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80174d2:	4291      	cmp	r1, r2
 80174d4:	d1f9      	bne.n	80174ca <memcpy+0xe>
 80174d6:	bd10      	pop	{r4, pc}

080174d8 <ceil>:
 80174d8:	ec51 0b10 	vmov	r0, r1, d0
 80174dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80174e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174e4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80174e8:	2e13      	cmp	r6, #19
 80174ea:	460c      	mov	r4, r1
 80174ec:	4605      	mov	r5, r0
 80174ee:	4680      	mov	r8, r0
 80174f0:	dc2e      	bgt.n	8017550 <ceil+0x78>
 80174f2:	2e00      	cmp	r6, #0
 80174f4:	da11      	bge.n	801751a <ceil+0x42>
 80174f6:	a332      	add	r3, pc, #200	@ (adr r3, 80175c0 <ceil+0xe8>)
 80174f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174fc:	f7f0 fe92 	bl	8008224 <__adddf3>
 8017500:	2200      	movs	r2, #0
 8017502:	2300      	movs	r3, #0
 8017504:	f7f1 fad4 	bl	8008ab0 <__aeabi_dcmpgt>
 8017508:	b120      	cbz	r0, 8017514 <ceil+0x3c>
 801750a:	2c00      	cmp	r4, #0
 801750c:	db4f      	blt.n	80175ae <ceil+0xd6>
 801750e:	4325      	orrs	r5, r4
 8017510:	d151      	bne.n	80175b6 <ceil+0xde>
 8017512:	462c      	mov	r4, r5
 8017514:	4621      	mov	r1, r4
 8017516:	4628      	mov	r0, r5
 8017518:	e023      	b.n	8017562 <ceil+0x8a>
 801751a:	4f2b      	ldr	r7, [pc, #172]	@ (80175c8 <ceil+0xf0>)
 801751c:	4137      	asrs	r7, r6
 801751e:	ea01 0307 	and.w	r3, r1, r7
 8017522:	4303      	orrs	r3, r0
 8017524:	d01d      	beq.n	8017562 <ceil+0x8a>
 8017526:	a326      	add	r3, pc, #152	@ (adr r3, 80175c0 <ceil+0xe8>)
 8017528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801752c:	f7f0 fe7a 	bl	8008224 <__adddf3>
 8017530:	2200      	movs	r2, #0
 8017532:	2300      	movs	r3, #0
 8017534:	f7f1 fabc 	bl	8008ab0 <__aeabi_dcmpgt>
 8017538:	2800      	cmp	r0, #0
 801753a:	d0eb      	beq.n	8017514 <ceil+0x3c>
 801753c:	2c00      	cmp	r4, #0
 801753e:	bfc2      	ittt	gt
 8017540:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8017544:	4133      	asrgt	r3, r6
 8017546:	18e4      	addgt	r4, r4, r3
 8017548:	ea24 0407 	bic.w	r4, r4, r7
 801754c:	2500      	movs	r5, #0
 801754e:	e7e1      	b.n	8017514 <ceil+0x3c>
 8017550:	2e33      	cmp	r6, #51	@ 0x33
 8017552:	dd0a      	ble.n	801756a <ceil+0x92>
 8017554:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8017558:	d103      	bne.n	8017562 <ceil+0x8a>
 801755a:	4602      	mov	r2, r0
 801755c:	460b      	mov	r3, r1
 801755e:	f7f0 fe61 	bl	8008224 <__adddf3>
 8017562:	ec41 0b10 	vmov	d0, r0, r1
 8017566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801756a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801756e:	f04f 37ff 	mov.w	r7, #4294967295
 8017572:	40df      	lsrs	r7, r3
 8017574:	4238      	tst	r0, r7
 8017576:	d0f4      	beq.n	8017562 <ceil+0x8a>
 8017578:	a311      	add	r3, pc, #68	@ (adr r3, 80175c0 <ceil+0xe8>)
 801757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801757e:	f7f0 fe51 	bl	8008224 <__adddf3>
 8017582:	2200      	movs	r2, #0
 8017584:	2300      	movs	r3, #0
 8017586:	f7f1 fa93 	bl	8008ab0 <__aeabi_dcmpgt>
 801758a:	2800      	cmp	r0, #0
 801758c:	d0c2      	beq.n	8017514 <ceil+0x3c>
 801758e:	2c00      	cmp	r4, #0
 8017590:	dd0a      	ble.n	80175a8 <ceil+0xd0>
 8017592:	2e14      	cmp	r6, #20
 8017594:	d101      	bne.n	801759a <ceil+0xc2>
 8017596:	3401      	adds	r4, #1
 8017598:	e006      	b.n	80175a8 <ceil+0xd0>
 801759a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801759e:	2301      	movs	r3, #1
 80175a0:	40b3      	lsls	r3, r6
 80175a2:	441d      	add	r5, r3
 80175a4:	45a8      	cmp	r8, r5
 80175a6:	d8f6      	bhi.n	8017596 <ceil+0xbe>
 80175a8:	ea25 0507 	bic.w	r5, r5, r7
 80175ac:	e7b2      	b.n	8017514 <ceil+0x3c>
 80175ae:	2500      	movs	r5, #0
 80175b0:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80175b4:	e7ae      	b.n	8017514 <ceil+0x3c>
 80175b6:	4c05      	ldr	r4, [pc, #20]	@ (80175cc <ceil+0xf4>)
 80175b8:	2500      	movs	r5, #0
 80175ba:	e7ab      	b.n	8017514 <ceil+0x3c>
 80175bc:	f3af 8000 	nop.w
 80175c0:	8800759c 	.word	0x8800759c
 80175c4:	7e37e43c 	.word	0x7e37e43c
 80175c8:	000fffff 	.word	0x000fffff
 80175cc:	3ff00000 	.word	0x3ff00000

080175d0 <_init>:
 80175d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175d2:	bf00      	nop
 80175d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175d6:	bc08      	pop	{r3}
 80175d8:	469e      	mov	lr, r3
 80175da:	4770      	bx	lr

080175dc <_fini>:
 80175dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175de:	bf00      	nop
 80175e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175e2:	bc08      	pop	{r3}
 80175e4:	469e      	mov	lr, r3
 80175e6:	4770      	bx	lr
