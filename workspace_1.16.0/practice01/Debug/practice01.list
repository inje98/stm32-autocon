
practice01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036a0  080036a0  000046a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b8  080036b8  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  080036b8  080036b8  000046b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036c0  080036c0  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c0  080036c0  000046c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036c4  080036c4  000046c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080036c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000010  080036d8  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080036d8  000050b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e39  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001814  00000000  00000000  0000ee79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  00010690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000590  00000000  00000000  00010dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024186  00000000  00000000  00011360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1bd  00000000  00000000  000354e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2258  00000000  00000000  0003f6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001218fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca4  00000000  00000000  00121940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001235e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003688 	.word	0x08003688

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08003688 	.word	0x08003688

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
  */
uint8_t a = 'a';
//uint8_t Test_Tx_Buufer[8] = {1, 2, 3, 4, 5, 6, 7, 8};

int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004fc:	f000 f94a 	bl	8000794 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fa79 	bl	80009f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f81c 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8b6 	bl	8000678 <MX_GPIO_Init>
  MX_UART4_Init();
 800050c:	f000 f880 	bl	8000610 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(HAL_UART_Receive(&huart4, &a, 1, 10))
 8000510:	230a      	movs	r3, #10
 8000512:	2201      	movs	r2, #1
 8000514:	4908      	ldr	r1, [pc, #32]	@ (8000538 <main+0x40>)
 8000516:	4809      	ldr	r0, [pc, #36]	@ (800053c <main+0x44>)
 8000518:	f002 f861 	bl	80025de <HAL_UART_Receive>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d005      	beq.n	800052e <main+0x36>
	  {
		  HAL_UART_Transmit(&huart4, &a, 1, 10);
 8000522:	230a      	movs	r3, #10
 8000524:	2201      	movs	r2, #1
 8000526:	4904      	ldr	r1, [pc, #16]	@ (8000538 <main+0x40>)
 8000528:	4804      	ldr	r0, [pc, #16]	@ (800053c <main+0x44>)
 800052a:	f001 ffcf 	bl	80024cc <HAL_UART_Transmit>
	  }

	  //HAL_UART_Transmit_IT(&huart4, &Test_Tx_Buufer[0], 8);
	  HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000532:	f000 fabd 	bl	8000ab0 <HAL_Delay>
	  if(HAL_UART_Receive(&huart4, &a, 1, 10))
 8000536:	e7eb      	b.n	8000510 <main+0x18>
 8000538:	20000000 	.word	0x20000000
 800053c:	2000002c 	.word	0x2000002c

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 f86e 	bl	8003630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	@ (8000608 <SystemClock_Config+0xc8>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <SystemClock_Config+0xc8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800057c:	4b23      	ldr	r3, [pc, #140]	@ (800060c <SystemClock_Config+0xcc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <SystemClock_Config+0xcc>)
 8000586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <SystemClock_Config+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b0:	23a8      	movs	r3, #168	@ 0xa8
 80005b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fe7b 	bl	80012bc <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005cc:	f000 f90e 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2105      	movs	r1, #5
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 f908 	bl	8001804 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005fa:	f000 f8f7 	bl	80007ec <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	@ 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <MX_UART4_Init+0x60>)
 8000616:	4a17      	ldr	r2, [pc, #92]	@ (8000674 <MX_UART4_Init+0x64>)
 8000618:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_UART4_Init+0x60>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_UART4_Init+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_UART4_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_UART4_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_UART4_Init+0x60>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <MX_UART4_Init+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <MX_UART4_Init+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_UART4_Init+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <MX_UART4_Init+0x60>)
 800064e:	2220      	movs	r2, #32
 8000650:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_UART4_Init+0x60>)
 8000654:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000658:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_UART4_Init+0x60>)
 800065c:	f001 fee8 	bl	8002430 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8000666:	f000 f8c1 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40004c00 	.word	0x40004c00

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b3d      	ldr	r3, [pc, #244]	@ (8000784 <MX_GPIO_Init+0x10c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a3c      	ldr	r2, [pc, #240]	@ (8000784 <MX_GPIO_Init+0x10c>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b3a      	ldr	r3, [pc, #232]	@ (8000784 <MX_GPIO_Init+0x10c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b37      	ldr	r3, [pc, #220]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a36      	ldr	r2, [pc, #216]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b34      	ldr	r3, [pc, #208]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a2a      	ldr	r2, [pc, #168]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a24      	ldr	r2, [pc, #144]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <MX_GPIO_Init+0x10c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2121      	movs	r1, #33	@ 0x21
 800070a:	481f      	ldr	r0, [pc, #124]	@ (8000788 <MX_GPIO_Init+0x110>)
 800070c:	f000 fdbc 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000716:	481d      	ldr	r0, [pc, #116]	@ (800078c <MX_GPIO_Init+0x114>)
 8000718:	f000 fdb6 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2140      	movs	r1, #64	@ 0x40
 8000720:	481b      	ldr	r0, [pc, #108]	@ (8000790 <MX_GPIO_Init+0x118>)
 8000722:	f000 fdb1 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000726:	2321      	movs	r3, #33	@ 0x21
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4812      	ldr	r0, [pc, #72]	@ (8000788 <MX_GPIO_Init+0x110>)
 800073e:	f000 fbf7 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000742:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	480c      	ldr	r0, [pc, #48]	@ (800078c <MX_GPIO_Init+0x114>)
 800075c:	f000 fbe8 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000760:	2340      	movs	r3, #64	@ 0x40
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_GPIO_Init+0x118>)
 8000778:	f000 fbda 	bl	8000f30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	@ 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800
 8000788:	40020400 	.word	0x40020400
 800078c:	40020c00 	.word	0x40020c00
 8000790:	40020800 	.word	0x40020800

08000794 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007a6:	f000 fab9 	bl	8000d1c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007b6:	231f      	movs	r3, #31
 80007b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007ba:	2387      	movs	r3, #135	@ 0x87
 80007bc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007be:	2300      	movs	r3, #0
 80007c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007c2:	2300      	movs	r3, #0
 80007c4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ca:	2301      	movs	r3, #1
 80007cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007d6:	463b      	mov	r3, r7
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fad7 	bl	8000d8c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007de:	2004      	movs	r0, #4
 80007e0:	f000 fab4 	bl	8000d4c <HAL_MPU_Enable>

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <Error_Handler+0x8>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <HAL_MspInit+0x44>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000802:	4a0e      	ldr	r2, [pc, #56]	@ (800083c <HAL_MspInit+0x44>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	@ 0x40
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <HAL_MspInit+0x44>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <HAL_MspInit+0x44>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	4a08      	ldr	r2, [pc, #32]	@ (800083c <HAL_MspInit+0x44>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000820:	6453      	str	r3, [r2, #68]	@ 0x44
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <HAL_MspInit+0x44>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b0aa      	sub	sp, #168	@ 0xa8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2284      	movs	r2, #132	@ 0x84
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fee5 	bl	8003630 <memset>
  if(huart->Instance==UART4)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a25      	ldr	r2, [pc, #148]	@ (8000900 <HAL_UART_MspInit+0xc0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d143      	bne.n	80008f8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000870:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000874:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000876:	2300      	movs	r3, #0
 8000878:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4618      	mov	r0, r3
 8000880:	f001 f9e6 	bl	8001c50 <HAL_RCCEx_PeriphCLKConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800088a:	f7ff ffaf 	bl	80007ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800088e:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <HAL_UART_MspInit+0xc4>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	4a1c      	ldr	r2, [pc, #112]	@ (8000904 <HAL_UART_MspInit+0xc4>)
 8000894:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000898:	6413      	str	r3, [r2, #64]	@ 0x40
 800089a:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <HAL_UART_MspInit+0xc4>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <HAL_UART_MspInit+0xc4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a16      	ldr	r2, [pc, #88]	@ (8000904 <HAL_UART_MspInit+0xc4>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <HAL_UART_MspInit+0xc4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008be:	2303      	movs	r3, #3
 80008c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80008d6:	2308      	movs	r3, #8
 80008d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80008e0:	4619      	mov	r1, r3
 80008e2:	4809      	ldr	r0, [pc, #36]	@ (8000908 <HAL_UART_MspInit+0xc8>)
 80008e4:	f000 fb24 	bl	8000f30 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2034      	movs	r0, #52	@ 0x34
 80008ee:	f000 f9de 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80008f2:	2034      	movs	r0, #52	@ 0x34
 80008f4:	f000 f9f7 	bl	8000ce6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80008f8:	bf00      	nop
 80008fa:	37a8      	adds	r7, #168	@ 0xa8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40004c00 	.word	0x40004c00
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <NMI_Handler+0x4>

08000914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <MemManage_Handler+0x4>

08000924 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <UsageFault_Handler+0x4>

08000934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000962:	f000 f885 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000970:	4802      	ldr	r0, [pc, #8]	@ (800097c <UART4_IRQHandler+0x10>)
 8000972:	f001 fefd 	bl	8002770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000002c 	.word	0x2000002c

08000980 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	@ (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a8:	f7ff ffea 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	@ (80009e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	@ (80009f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009d2:	f002 fe35 	bl	8003640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d6:	f7ff fd8f 	bl	80004f8 <main>
  bx  lr    
 80009da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009e8:	080036c8 	.word	0x080036c8
  ldr r2, =_sbss
 80009ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009f0:	200000b8 	.word	0x200000b8

080009f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC_IRQHandler>

080009f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f000 f94c 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a00:	200f      	movs	r0, #15
 8000a02:	f000 f805 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a06:	f7ff fef7 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_InitTick+0x54>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_InitTick+0x58>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f967 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00e      	b.n	8000a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d80a      	bhi.n	8000a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f000 f92f 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a50:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <HAL_InitTick+0x5c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000004 	.word	0x20000004
 8000a68:	2000000c 	.word	0x2000000c
 8000a6c:	20000008 	.word	0x20000008

08000a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_IncTick+0x20>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_IncTick+0x24>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <HAL_IncTick+0x24>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	2000000c 	.word	0x2000000c
 8000a94:	200000b4 	.word	0x200000b4

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <HAL_GetTick+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200000b4 	.word	0x200000b4

08000ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab8:	f7ff ffee 	bl	8000a98 <HAL_GetTick>
 8000abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac8:	d005      	beq.n	8000ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <HAL_Delay+0x44>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ad6:	bf00      	nop
 8000ad8:	f7ff ffde 	bl	8000a98 <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8f7      	bhi.n	8000ad8 <HAL_Delay+0x28>
  {
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000000c 	.word	0x2000000c

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <__NVIC_SetPriorityGrouping+0x40>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	4313      	orrs	r3, r2
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <__NVIC_SetPriorityGrouping+0x40>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00
 8000b3c:	05fa0000 	.word	0x05fa0000

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	@ (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff29 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff3e 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff31 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa2 	bl	8000c54 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d20:	f3bf 8f5f 	dmb	sy
}
 8000d24:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <HAL_MPU_Disable+0x28>)
 8000d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2a:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <HAL_MPU_Disable+0x28>)
 8000d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d30:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d32:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_MPU_Disable+0x2c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00
 8000d48:	e000ed90 	.word	0xe000ed90

08000d4c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d54:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <HAL_MPU_Enable+0x38>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_MPU_Enable+0x3c>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d62:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <HAL_MPU_Enable+0x3c>)
 8000d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d68:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6a:	f3bf 8f4f 	dsb	sy
}
 8000d6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d70:	f3bf 8f6f 	isb	sy
}
 8000d74:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed90 	.word	0xe000ed90
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	785a      	ldrb	r2, [r3, #1]
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <HAL_MPU_ConfigRegion+0x7c>)
 8000d9a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <HAL_MPU_ConfigRegion+0x7c>)
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	4a19      	ldr	r2, [pc, #100]	@ (8000e08 <HAL_MPU_ConfigRegion+0x7c>)
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000da8:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <HAL_MPU_ConfigRegion+0x7c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7b1b      	ldrb	r3, [r3, #12]
 8000db4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7adb      	ldrb	r3, [r3, #11]
 8000dba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000dbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7a9b      	ldrb	r3, [r3, #10]
 8000dc2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000dc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7b5b      	ldrb	r3, [r3, #13]
 8000dca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000dcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7b9b      	ldrb	r3, [r3, #14]
 8000dd2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000dd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7bdb      	ldrb	r3, [r3, #15]
 8000dda:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ddc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7a5b      	ldrb	r3, [r3, #9]
 8000de2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000de4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7a1b      	ldrb	r3, [r3, #8]
 8000dea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000dec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000df6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000df8:	6113      	str	r3, [r2, #16]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed90 	.word	0xe000ed90

08000e0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e1a:	f7ff fe3d 	bl	8000a98 <HAL_GetTick>
 8000e1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d008      	beq.n	8000e3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2280      	movs	r2, #128	@ 0x80
 8000e30:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e052      	b.n	8000ee4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0216 	bic.w	r2, r2, #22
 8000e4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	695a      	ldr	r2, [r3, #20]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d103      	bne.n	8000e6e <HAL_DMA_Abort+0x62>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d007      	beq.n	8000e7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0208 	bic.w	r2, r2, #8
 8000e7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0201 	bic.w	r2, r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e8e:	e013      	b.n	8000eb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e90:	f7ff fe02 	bl	8000a98 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d90c      	bls.n	8000eb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2220      	movs	r2, #32
 8000ea2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e015      	b.n	8000ee4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1e4      	bne.n	8000e90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eca:	223f      	movs	r2, #63	@ 0x3f
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d004      	beq.n	8000f0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2280      	movs	r2, #128	@ 0x80
 8000f04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00c      	b.n	8000f24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2205      	movs	r2, #5
 8000f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0201 	bic.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e175      	b.n	800123c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 8164 	bne.w	8001236 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d005      	beq.n	8000f86 <HAL_GPIO_Init+0x56>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d130      	bne.n	8000fe8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 0201 	and.w	r2, r3, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d017      	beq.n	8001024 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d123      	bne.n	8001078 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	69b9      	ldr	r1, [r7, #24]
 8001074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0203 	and.w	r2, r3, #3
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80be 	beq.w	8001236 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	4b66      	ldr	r3, [pc, #408]	@ (8001254 <HAL_GPIO_Init+0x324>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a65      	ldr	r2, [pc, #404]	@ (8001254 <HAL_GPIO_Init+0x324>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b63      	ldr	r3, [pc, #396]	@ (8001254 <HAL_GPIO_Init+0x324>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010d2:	4a61      	ldr	r2, [pc, #388]	@ (8001258 <HAL_GPIO_Init+0x328>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a58      	ldr	r2, [pc, #352]	@ (800125c <HAL_GPIO_Init+0x32c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d037      	beq.n	800116e <HAL_GPIO_Init+0x23e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a57      	ldr	r2, [pc, #348]	@ (8001260 <HAL_GPIO_Init+0x330>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d031      	beq.n	800116a <HAL_GPIO_Init+0x23a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a56      	ldr	r2, [pc, #344]	@ (8001264 <HAL_GPIO_Init+0x334>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d02b      	beq.n	8001166 <HAL_GPIO_Init+0x236>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a55      	ldr	r2, [pc, #340]	@ (8001268 <HAL_GPIO_Init+0x338>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d025      	beq.n	8001162 <HAL_GPIO_Init+0x232>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a54      	ldr	r2, [pc, #336]	@ (800126c <HAL_GPIO_Init+0x33c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d01f      	beq.n	800115e <HAL_GPIO_Init+0x22e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a53      	ldr	r2, [pc, #332]	@ (8001270 <HAL_GPIO_Init+0x340>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x22a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a52      	ldr	r2, [pc, #328]	@ (8001274 <HAL_GPIO_Init+0x344>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x226>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a51      	ldr	r2, [pc, #324]	@ (8001278 <HAL_GPIO_Init+0x348>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x222>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a50      	ldr	r2, [pc, #320]	@ (800127c <HAL_GPIO_Init+0x34c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x21e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4f      	ldr	r2, [pc, #316]	@ (8001280 <HAL_GPIO_Init+0x350>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x21a>
 8001146:	2309      	movs	r3, #9
 8001148:	e012      	b.n	8001170 <HAL_GPIO_Init+0x240>
 800114a:	230a      	movs	r3, #10
 800114c:	e010      	b.n	8001170 <HAL_GPIO_Init+0x240>
 800114e:	2308      	movs	r3, #8
 8001150:	e00e      	b.n	8001170 <HAL_GPIO_Init+0x240>
 8001152:	2307      	movs	r3, #7
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_Init+0x240>
 8001156:	2306      	movs	r3, #6
 8001158:	e00a      	b.n	8001170 <HAL_GPIO_Init+0x240>
 800115a:	2305      	movs	r3, #5
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x240>
 800115e:	2304      	movs	r3, #4
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x240>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x240>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x240>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x240>
 800116e:	2300      	movs	r3, #0
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001180:	4935      	ldr	r1, [pc, #212]	@ (8001258 <HAL_GPIO_Init+0x328>)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118e:	4b3d      	ldr	r3, [pc, #244]	@ (8001284 <HAL_GPIO_Init+0x354>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b2:	4a34      	ldr	r2, [pc, #208]	@ (8001284 <HAL_GPIO_Init+0x354>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b8:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <HAL_GPIO_Init+0x354>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011dc:	4a29      	ldr	r2, [pc, #164]	@ (8001284 <HAL_GPIO_Init+0x354>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e2:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <HAL_GPIO_Init+0x354>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001206:	4a1f      	ldr	r2, [pc, #124]	@ (8001284 <HAL_GPIO_Init+0x354>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_GPIO_Init+0x354>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001230:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <HAL_GPIO_Init+0x354>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3301      	adds	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	f67f ae86 	bls.w	8000f50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3724      	adds	r7, #36	@ 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40013800 	.word	0x40013800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40021000 	.word	0x40021000
 8001270:	40021400 	.word	0x40021400
 8001274:	40021800 	.word	0x40021800
 8001278:	40021c00 	.word	0x40021c00
 800127c:	40022000 	.word	0x40022000
 8001280:	40022400 	.word	0x40022400
 8001284:	40013c00 	.word	0x40013c00

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e291      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8087 	beq.w	80013ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e0:	4b96      	ldr	r3, [pc, #600]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d00c      	beq.n	8001306 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ec:	4b93      	ldr	r3, [pc, #588]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d112      	bne.n	800131e <HAL_RCC_OscConfig+0x62>
 80012f8:	4b90      	ldr	r3, [pc, #576]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001304:	d10b      	bne.n	800131e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001306:	4b8d      	ldr	r3, [pc, #564]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d06c      	beq.n	80013ec <HAL_RCC_OscConfig+0x130>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d168      	bne.n	80013ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e26b      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001326:	d106      	bne.n	8001336 <HAL_RCC_OscConfig+0x7a>
 8001328:	4b84      	ldr	r3, [pc, #528]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a83      	ldr	r2, [pc, #524]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 800132e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e02e      	b.n	8001394 <HAL_RCC_OscConfig+0xd8>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x9c>
 800133e:	4b7f      	ldr	r3, [pc, #508]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a7e      	ldr	r2, [pc, #504]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b7c      	ldr	r3, [pc, #496]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a7b      	ldr	r2, [pc, #492]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001350:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e01d      	b.n	8001394 <HAL_RCC_OscConfig+0xd8>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0xc0>
 8001362:	4b76      	ldr	r3, [pc, #472]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a75      	ldr	r2, [pc, #468]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b73      	ldr	r3, [pc, #460]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a72      	ldr	r2, [pc, #456]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0xd8>
 800137c:	4b6f      	ldr	r3, [pc, #444]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a6e      	ldr	r2, [pc, #440]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b6c      	ldr	r3, [pc, #432]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a6b      	ldr	r2, [pc, #428]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 800138e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d013      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fb7c 	bl	8000a98 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fb78 	bl	8000a98 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e21f      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b61      	ldr	r3, [pc, #388]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e014      	b.n	80013ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fb68 	bl	8000a98 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fb64 	bl	8000a98 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	@ 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e20b      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	4b57      	ldr	r3, [pc, #348]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x110>
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d069      	beq.n	80014ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013fa:	4b50      	ldr	r3, [pc, #320]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00b      	beq.n	800141e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001406:	4b4d      	ldr	r3, [pc, #308]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b08      	cmp	r3, #8
 8001410:	d11c      	bne.n	800144c <HAL_RCC_OscConfig+0x190>
 8001412:	4b4a      	ldr	r3, [pc, #296]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d116      	bne.n	800144c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	4b47      	ldr	r3, [pc, #284]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <HAL_RCC_OscConfig+0x17a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d001      	beq.n	8001436 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e1df      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4b41      	ldr	r3, [pc, #260]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	493d      	ldr	r1, [pc, #244]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	e040      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d023      	beq.n	800149c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001454:	4b39      	ldr	r3, [pc, #228]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a38      	ldr	r2, [pc, #224]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fb1a 	bl	8000a98 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fb16 	bl	8000a98 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1bd      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147a:	4b30      	ldr	r3, [pc, #192]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b2d      	ldr	r3, [pc, #180]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4929      	ldr	r1, [pc, #164]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
 800149a:	e018      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149c:	4b27      	ldr	r3, [pc, #156]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a26      	ldr	r2, [pc, #152]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff faf6 	bl	8000a98 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b0:	f7ff faf2 	bl	8000a98 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e199      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d038      	beq.n	800154c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d019      	beq.n	8001516 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e6:	4a15      	ldr	r2, [pc, #84]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff fad3 	bl	8000a98 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff facf 	bl	8000a98 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e176      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 800150a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x23a>
 8001514:	e01a      	b.n	800154c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 8001518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800151a:	4a08      	ldr	r2, [pc, #32]	@ (800153c <HAL_RCC_OscConfig+0x280>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001522:	f7ff fab9 	bl	8000a98 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fab5 	bl	8000a98 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d903      	bls.n	8001540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e15c      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
 800153c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	4b91      	ldr	r3, [pc, #580]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ee      	bne.n	800152a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80a4 	beq.w	80016a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	4b8b      	ldr	r3, [pc, #556]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10d      	bne.n	8001582 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b88      	ldr	r3, [pc, #544]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	4a87      	ldr	r2, [pc, #540]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
 8001572:	4b85      	ldr	r3, [pc, #532]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157e:	2301      	movs	r3, #1
 8001580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001582:	4b82      	ldr	r3, [pc, #520]	@ (800178c <HAL_RCC_OscConfig+0x4d0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d118      	bne.n	80015c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800158e:	4b7f      	ldr	r3, [pc, #508]	@ (800178c <HAL_RCC_OscConfig+0x4d0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a7e      	ldr	r2, [pc, #504]	@ (800178c <HAL_RCC_OscConfig+0x4d0>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159a:	f7ff fa7d 	bl	8000a98 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a2:	f7ff fa79 	bl	8000a98 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b64      	cmp	r3, #100	@ 0x64
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e120      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b4:	4b75      	ldr	r3, [pc, #468]	@ (800178c <HAL_RCC_OscConfig+0x4d0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x31a>
 80015c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015cc:	4a6e      	ldr	r2, [pc, #440]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d4:	e02d      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x33c>
 80015de:	4b6a      	ldr	r3, [pc, #424]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e2:	4a69      	ldr	r2, [pc, #420]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ea:	4b67      	ldr	r3, [pc, #412]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ee:	4a66      	ldr	r2, [pc, #408]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f6:	e01c      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d10c      	bne.n	800161a <HAL_RCC_OscConfig+0x35e>
 8001600:	4b61      	ldr	r3, [pc, #388]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001604:	4a60      	ldr	r2, [pc, #384]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6713      	str	r3, [r2, #112]	@ 0x70
 800160c:	4b5e      	ldr	r3, [pc, #376]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001610:	4a5d      	ldr	r2, [pc, #372]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6713      	str	r3, [r2, #112]	@ 0x70
 8001618:	e00b      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
 800161a:	4b5b      	ldr	r3, [pc, #364]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161e:	4a5a      	ldr	r2, [pc, #360]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6713      	str	r3, [r2, #112]	@ 0x70
 8001626:	4b58      	ldr	r3, [pc, #352]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162a:	4a57      	ldr	r2, [pc, #348]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800162c:	f023 0304 	bic.w	r3, r3, #4
 8001630:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d015      	beq.n	8001666 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163a:	f7ff fa2d 	bl	8000a98 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fa29 	bl	8000a98 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0ce      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001658:	4b4b      	ldr	r3, [pc, #300]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ee      	beq.n	8001642 <HAL_RCC_OscConfig+0x386>
 8001664:	e014      	b.n	8001690 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001666:	f7ff fa17 	bl	8000a98 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166c:	e00a      	b.n	8001684 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166e:	f7ff fa13 	bl	8000a98 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e0b8      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001684:	4b40      	ldr	r3, [pc, #256]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1ee      	bne.n	800166e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d105      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001696:	4b3c      	ldr	r3, [pc, #240]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	4a3b      	ldr	r2, [pc, #236]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800169c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80a4 	beq.w	80017f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ac:	4b36      	ldr	r3, [pc, #216]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d06b      	beq.n	8001790 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d149      	bne.n	8001754 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c0:	4b31      	ldr	r3, [pc, #196]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a30      	ldr	r2, [pc, #192]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80016c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff f9e4 	bl	8000a98 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff f9e0 	bl	8000a98 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e087      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001700:	019b      	lsls	r3, r3, #6
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	3b01      	subs	r3, #1
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001714:	061b      	lsls	r3, r3, #24
 8001716:	4313      	orrs	r3, r2
 8001718:	4a1b      	ldr	r2, [pc, #108]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800171a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800171e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a18      	ldr	r2, [pc, #96]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff f9b4 	bl	8000a98 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff f9b0 	bl	8000a98 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e057      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x478>
 8001752:	e04f      	b.n	80017f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0b      	ldr	r2, [pc, #44]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800175a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800175e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff f99a 	bl	8000a98 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff f996 	bl	8000a98 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e03d      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x4ac>
 8001786:	e035      	b.n	80017f4 <HAL_RCC_OscConfig+0x538>
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <HAL_RCC_OscConfig+0x544>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d028      	beq.n	80017f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d121      	bne.n	80017f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d11a      	bne.n	80017f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017c0:	4013      	ands	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d111      	bne.n	80017f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	3b01      	subs	r3, #1
 80017da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0d0      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b6a      	ldr	r3, [pc, #424]	@ (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d910      	bls.n	800184c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b67      	ldr	r3, [pc, #412]	@ (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 020f 	bic.w	r2, r3, #15
 8001832:	4965      	ldr	r1, [pc, #404]	@ (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183a:	4b63      	ldr	r3, [pc, #396]	@ (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0b8      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d020      	beq.n	800189a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001864:	4b59      	ldr	r3, [pc, #356]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4a58      	ldr	r2, [pc, #352]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 800186a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800186e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800187c:	4b53      	ldr	r3, [pc, #332]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a52      	ldr	r2, [pc, #328]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001882:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001886:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001888:	4b50      	ldr	r3, [pc, #320]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	494d      	ldr	r1, [pc, #308]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d040      	beq.n	8001928 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	4b47      	ldr	r3, [pc, #284]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d115      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e07f      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b41      	ldr	r3, [pc, #260]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e073      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b3d      	ldr	r3, [pc, #244]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e06b      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e6:	4b39      	ldr	r3, [pc, #228]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 0203 	bic.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4936      	ldr	r1, [pc, #216]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018f8:	f7ff f8ce 	bl	8000a98 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff f8ca 	bl	8000a98 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e053      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2d      	ldr	r3, [pc, #180]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 020c 	and.w	r2, r3, #12
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	429a      	cmp	r2, r3
 8001926:	d1eb      	bne.n	8001900 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001928:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d210      	bcs.n	8001958 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b24      	ldr	r3, [pc, #144]	@ (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 020f 	bic.w	r2, r3, #15
 800193e:	4922      	ldr	r1, [pc, #136]	@ (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b20      	ldr	r3, [pc, #128]	@ (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e032      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001964:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4916      	ldr	r1, [pc, #88]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001982:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	490e      	ldr	r1, [pc, #56]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001996:	f000 f821 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 800199a:	4602      	mov	r2, r0
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	490a      	ldr	r1, [pc, #40]	@ (80019d0 <HAL_RCC_ClockConfig+0x1cc>)
 80019a8:	5ccb      	ldrb	r3, [r1, r3]
 80019aa:	fa22 f303 	lsr.w	r3, r2, r3
 80019ae:	4a09      	ldr	r2, [pc, #36]	@ (80019d4 <HAL_RCC_ClockConfig+0x1d0>)
 80019b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_RCC_ClockConfig+0x1d4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f82a 	bl	8000a10 <HAL_InitTick>

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00
 80019cc:	40023800 	.word	0x40023800
 80019d0:	080036a0 	.word	0x080036a0
 80019d4:	20000004 	.word	0x20000004
 80019d8:	20000008 	.word	0x20000008

080019dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e0:	b094      	sub	sp, #80	@ 0x50
 80019e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019e8:	2300      	movs	r3, #0
 80019ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ec:	2300      	movs	r3, #0
 80019ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f4:	4b79      	ldr	r3, [pc, #484]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x200>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d00d      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x40>
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	f200 80e1 	bhi.w	8001bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x34>
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a0e:	e0db      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a10:	4b73      	ldr	r3, [pc, #460]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a14:	e0db      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a16:	4b73      	ldr	r3, [pc, #460]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a1a:	e0d8      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a26:	4b6d      	ldr	r3, [pc, #436]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d063      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a32:	4b6a      	ldr	r3, [pc, #424]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	099b      	lsrs	r3, r3, #6
 8001a38:	2200      	movs	r2, #0
 8001a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a4e:	4622      	mov	r2, r4
 8001a50:	462b      	mov	r3, r5
 8001a52:	f04f 0000 	mov.w	r0, #0
 8001a56:	f04f 0100 	mov.w	r1, #0
 8001a5a:	0159      	lsls	r1, r3, #5
 8001a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a60:	0150      	lsls	r0, r2, #5
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4621      	mov	r1, r4
 8001a68:	1a51      	subs	r1, r2, r1
 8001a6a:	6139      	str	r1, [r7, #16]
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a80:	4659      	mov	r1, fp
 8001a82:	018b      	lsls	r3, r1, #6
 8001a84:	4651      	mov	r1, sl
 8001a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a8a:	4651      	mov	r1, sl
 8001a8c:	018a      	lsls	r2, r1, #6
 8001a8e:	4651      	mov	r1, sl
 8001a90:	ebb2 0801 	subs.w	r8, r2, r1
 8001a94:	4659      	mov	r1, fp
 8001a96:	eb63 0901 	sbc.w	r9, r3, r1
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aae:	4690      	mov	r8, r2
 8001ab0:	4699      	mov	r9, r3
 8001ab2:	4623      	mov	r3, r4
 8001ab4:	eb18 0303 	adds.w	r3, r8, r3
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	462b      	mov	r3, r5
 8001abc:	eb49 0303 	adc.w	r3, r9, r3
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ace:	4629      	mov	r1, r5
 8001ad0:	024b      	lsls	r3, r1, #9
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ad8:	4621      	mov	r1, r4
 8001ada:	024a      	lsls	r2, r1, #9
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ae8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001aec:	f7fe fb8c 	bl	8000208 <__aeabi_uldivmod>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4613      	mov	r3, r2
 8001af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001af8:	e058      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afa:	4b38      	ldr	r3, [pc, #224]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	2200      	movs	r2, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	4611      	mov	r1, r2
 8001b06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b0a:	623b      	str	r3, [r7, #32]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b14:	4642      	mov	r2, r8
 8001b16:	464b      	mov	r3, r9
 8001b18:	f04f 0000 	mov.w	r0, #0
 8001b1c:	f04f 0100 	mov.w	r1, #0
 8001b20:	0159      	lsls	r1, r3, #5
 8001b22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b26:	0150      	lsls	r0, r2, #5
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4641      	mov	r1, r8
 8001b2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b32:	4649      	mov	r1, r9
 8001b34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b50:	eb63 050b 	sbc.w	r5, r3, fp
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	00eb      	lsls	r3, r5, #3
 8001b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b62:	00e2      	lsls	r2, r4, #3
 8001b64:	4614      	mov	r4, r2
 8001b66:	461d      	mov	r5, r3
 8001b68:	4643      	mov	r3, r8
 8001b6a:	18e3      	adds	r3, r4, r3
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	464b      	mov	r3, r9
 8001b70:	eb45 0303 	adc.w	r3, r5, r3
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b82:	4629      	mov	r1, r5
 8001b84:	028b      	lsls	r3, r1, #10
 8001b86:	4621      	mov	r1, r4
 8001b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	028a      	lsls	r2, r1, #10
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b96:	2200      	movs	r2, #0
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	61fa      	str	r2, [r7, #28]
 8001b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba0:	f7fe fb32 	bl	8000208 <__aeabi_uldivmod>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4613      	mov	r3, r2
 8001baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	0c1b      	lsrs	r3, r3, #16
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001bbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bc6:	e002      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3750      	adds	r7, #80	@ 0x50
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	00f42400 	.word	0x00f42400
 8001be4:	007a1200 	.word	0x007a1200

08001be8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c04:	f7ff fff0 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	0a9b      	lsrs	r3, r3, #10
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	4903      	ldr	r1, [pc, #12]	@ (8001c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	080036b0 	.word	0x080036b0

08001c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c2c:	f7ff ffdc 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	0b5b      	lsrs	r3, r3, #13
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	4903      	ldr	r1, [pc, #12]	@ (8001c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3e:	5ccb      	ldrb	r3, [r1, r3]
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	080036b0 	.word	0x080036b0

08001c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d012      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c78:	4b69      	ldr	r3, [pc, #420]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a68      	ldr	r2, [pc, #416]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c82:	6093      	str	r3, [r2, #8]
 8001c84:	4b66      	ldr	r3, [pc, #408]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8c:	4964      	ldr	r1, [pc, #400]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d017      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001caa:	4b5d      	ldr	r3, [pc, #372]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cb0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb8:	4959      	ldr	r1, [pc, #356]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cc8:	d101      	bne.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d017      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ce6:	4b4e      	ldr	r3, [pc, #312]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	494a      	ldr	r1, [pc, #296]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d04:	d101      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 808b 	beq.w	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	4a39      	ldr	r2, [pc, #228]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d40:	4b37      	ldr	r3, [pc, #220]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d4c:	4b35      	ldr	r3, [pc, #212]	@ (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a34      	ldr	r2, [pc, #208]	@ (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d58:	f7fe fe9e 	bl	8000a98 <HAL_GetTick>
 8001d5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d60:	f7fe fe9a 	bl	8000a98 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	@ 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e357      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d72:	4b2c      	ldr	r3, [pc, #176]	@ (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d7e:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d035      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d02e      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d9c:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001da4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001daa:	4a1d      	ldr	r2, [pc, #116]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001db2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dbc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001dbe:	4a18      	ldr	r2, [pc, #96]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001dc4:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d114      	bne.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fe62 	bl	8000a98 <HAL_GetTick>
 8001dd4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd6:	e00a      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7fe fe5e 	bl	8000a98 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e319      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dee:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0ee      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e06:	d111      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e14:	4b04      	ldr	r3, [pc, #16]	@ (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e16:	400b      	ands	r3, r1
 8001e18:	4901      	ldr	r1, [pc, #4]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
 8001e1e:	e00b      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000
 8001e28:	0ffffcff 	.word	0x0ffffcff
 8001e2c:	4baa      	ldr	r3, [pc, #680]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4aa9      	ldr	r2, [pc, #676]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e32:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e36:	6093      	str	r3, [r2, #8]
 8001e38:	4ba7      	ldr	r3, [pc, #668]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e44:	49a4      	ldr	r1, [pc, #656]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d010      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e56:	4ba0      	ldr	r3, [pc, #640]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e5c:	4a9e      	ldr	r2, [pc, #632]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e66:	4b9c      	ldr	r3, [pc, #624]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e68:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e70:	4999      	ldr	r1, [pc, #612]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00a      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e84:	4b94      	ldr	r3, [pc, #592]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e92:	4991      	ldr	r1, [pc, #580]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ea6:	4b8c      	ldr	r3, [pc, #560]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eb4:	4988      	ldr	r1, [pc, #544]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ec8:	4b83      	ldr	r3, [pc, #524]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ece:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ed6:	4980      	ldr	r1, [pc, #512]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001eea:	4b7b      	ldr	r3, [pc, #492]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef8:	4977      	ldr	r1, [pc, #476]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f0c:	4b72      	ldr	r3, [pc, #456]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f12:	f023 0203 	bic.w	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	496f      	ldr	r1, [pc, #444]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f34:	f023 020c 	bic.w	r2, r3, #12
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3c:	4966      	ldr	r1, [pc, #408]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f50:	4b61      	ldr	r3, [pc, #388]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f56:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	495e      	ldr	r1, [pc, #376]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f72:	4b59      	ldr	r3, [pc, #356]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f78:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f80:	4955      	ldr	r1, [pc, #340]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f94:	4b50      	ldr	r3, [pc, #320]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa2:	494d      	ldr	r1, [pc, #308]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fb6:	4b48      	ldr	r3, [pc, #288]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fbc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc4:	4944      	ldr	r1, [pc, #272]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fde:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe6:	493c      	ldr	r1, [pc, #240]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ffa:	4b37      	ldr	r3, [pc, #220]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002000:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002008:	4933      	ldr	r1, [pc, #204]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800201c:	4b2e      	ldr	r3, [pc, #184]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800202a:	492b      	ldr	r1, [pc, #172]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d011      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800203e:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002044:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800204c:	4922      	ldr	r1, [pc, #136]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002058:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800205c:	d101      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800205e:	2301      	movs	r3, #1
 8002060:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800206e:	2301      	movs	r3, #1
 8002070:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800207e:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208c:	4912      	ldr	r1, [pc, #72]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00b      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020a0:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020b0:	4909      	ldr	r1, [pc, #36]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d006      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80d9 	beq.w	800227e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020cc:	4b02      	ldr	r3, [pc, #8]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a01      	ldr	r2, [pc, #4]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80020d6:	e001      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80020d8:	40023800 	.word	0x40023800
 80020dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020de:	f7fe fcdb 	bl	8000a98 <HAL_GetTick>
 80020e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020e6:	f7fe fcd7 	bl	8000a98 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b64      	cmp	r3, #100	@ 0x64
 80020f2:	d901      	bls.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e194      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020f8:	4b6c      	ldr	r3, [pc, #432]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d021      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002114:	2b00      	cmp	r3, #0
 8002116:	d11d      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002118:	4b64      	ldr	r3, [pc, #400]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800211a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800211e:	0c1b      	lsrs	r3, r3, #16
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002126:	4b61      	ldr	r3, [pc, #388]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800212c:	0e1b      	lsrs	r3, r3, #24
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	019a      	lsls	r2, r3, #6
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	431a      	orrs	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	061b      	lsls	r3, r3, #24
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	071b      	lsls	r3, r3, #28
 800214c:	4957      	ldr	r1, [pc, #348]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002164:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002172:	2b00      	cmp	r3, #0
 8002174:	d02e      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800217e:	d129      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002180:	4b4a      	ldr	r3, [pc, #296]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800218e:	4b47      	ldr	r3, [pc, #284]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002190:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002194:	0f1b      	lsrs	r3, r3, #28
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	019a      	lsls	r2, r3, #6
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	041b      	lsls	r3, r3, #16
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	061b      	lsls	r3, r3, #24
 80021ae:	431a      	orrs	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	071b      	lsls	r3, r3, #28
 80021b4:	493d      	ldr	r1, [pc, #244]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021bc:	4b3b      	ldr	r3, [pc, #236]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021c2:	f023 021f 	bic.w	r2, r3, #31
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	3b01      	subs	r3, #1
 80021cc:	4937      	ldr	r1, [pc, #220]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01d      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021e0:	4b32      	ldr	r3, [pc, #200]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e6:	0e1b      	lsrs	r3, r3, #24
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021ee:	4b2f      	ldr	r3, [pc, #188]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021f4:	0f1b      	lsrs	r3, r3, #28
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	019a      	lsls	r2, r3, #6
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	041b      	lsls	r3, r3, #16
 8002208:	431a      	orrs	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	431a      	orrs	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	071b      	lsls	r3, r3, #28
 8002214:	4925      	ldr	r1, [pc, #148]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d011      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	019a      	lsls	r2, r3, #6
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	061b      	lsls	r3, r3, #24
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	071b      	lsls	r3, r3, #28
 8002244:	4919      	ldr	r1, [pc, #100]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800224c:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a16      	ldr	r2, [pc, #88]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002252:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002258:	f7fe fc1e 	bl	8000a98 <HAL_GetTick>
 800225c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002260:	f7fe fc1a 	bl	8000a98 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	@ 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0d7      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002272:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b01      	cmp	r3, #1
 8002282:	f040 80cd 	bne.w	8002420 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002286:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a08      	ldr	r2, [pc, #32]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800228c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002292:	f7fe fc01 	bl	8000a98 <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002298:	e00a      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800229a:	f7fe fbfd 	bl	8000a98 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b64      	cmp	r3, #100	@ 0x64
 80022a6:	d903      	bls.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0ba      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80022ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022b0:	4b5e      	ldr	r3, [pc, #376]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022bc:	d0ed      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d02e      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d12a      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022e6:	4b51      	ldr	r3, [pc, #324]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022f4:	4b4d      	ldr	r3, [pc, #308]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	0f1b      	lsrs	r3, r3, #28
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	019a      	lsls	r2, r3, #6
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	061b      	lsls	r3, r3, #24
 8002314:	431a      	orrs	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	071b      	lsls	r3, r3, #28
 800231a:	4944      	ldr	r1, [pc, #272]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002322:	4b42      	ldr	r3, [pc, #264]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002328:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	3b01      	subs	r3, #1
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	493d      	ldr	r1, [pc, #244]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d022      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800234c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002350:	d11d      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002352:	4b36      	ldr	r3, [pc, #216]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002358:	0e1b      	lsrs	r3, r3, #24
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002360:	4b32      	ldr	r3, [pc, #200]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002366:	0f1b      	lsrs	r3, r3, #28
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	019a      	lsls	r2, r3, #6
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	041b      	lsls	r3, r3, #16
 800237a:	431a      	orrs	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	061b      	lsls	r3, r3, #24
 8002380:	431a      	orrs	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	071b      	lsls	r3, r3, #28
 8002386:	4929      	ldr	r1, [pc, #164]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d028      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800239a:	4b24      	ldr	r3, [pc, #144]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a0:	0e1b      	lsrs	r3, r3, #24
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023a8:	4b20      	ldr	r3, [pc, #128]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	019a      	lsls	r2, r3, #6
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	041b      	lsls	r3, r3, #16
 80023c0:	431a      	orrs	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	071b      	lsls	r3, r3, #28
 80023ce:	4917      	ldr	r1, [pc, #92]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023d6:	4b15      	ldr	r3, [pc, #84]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	4911      	ldr	r1, [pc, #68]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023ec:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0e      	ldr	r2, [pc, #56]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f8:	f7fe fb4e 	bl	8000a98 <HAL_GetTick>
 80023fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002400:	f7fe fb4a 	bl	8000a98 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	@ 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e007      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800241a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800241e:	d1ef      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800

08002430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e040      	b.n	80024c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe f9f4 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2224      	movs	r2, #36	@ 0x24
 800245c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fed0 	bl	800321c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fc69 	bl	8002d54 <UART_SetConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e01b      	b.n	80024c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800249a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 ff4f 	bl	8003360 <UART_CheckIdleState>
 80024c2:	4603      	mov	r3, r0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d177      	bne.n	80025d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_UART_Transmit+0x24>
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e070      	b.n	80025d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2221      	movs	r2, #33	@ 0x21
 8002500:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002502:	f7fe fac9 	bl	8000a98 <HAL_GetTick>
 8002506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002520:	d108      	bne.n	8002534 <HAL_UART_Transmit+0x68>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d104      	bne.n	8002534 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	e003      	b.n	800253c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800253c:	e02f      	b.n	800259e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	2180      	movs	r1, #128	@ 0x80
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 ff60 	bl	800340e <UART_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e03b      	b.n	80025d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10b      	bne.n	800257c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002572:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	3302      	adds	r3, #2
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	e007      	b.n	800258c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3301      	adds	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1c9      	bne.n	800253e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2200      	movs	r2, #0
 80025b2:	2140      	movs	r1, #64	@ 0x40
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 ff2a 	bl	800340e <UART_WaitOnFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e005      	b.n	80025d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2220      	movs	r2, #32
 80025ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b08a      	sub	sp, #40	@ 0x28
 80025e2:	af02      	add	r7, sp, #8
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	4613      	mov	r3, r2
 80025ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	f040 80b5 	bne.w	8002764 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_UART_Receive+0x28>
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0ad      	b.n	8002766 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2222      	movs	r2, #34	@ 0x22
 8002616:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002620:	f7fe fa3a 	bl	8000a98 <HAL_GetTick>
 8002624:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	88fa      	ldrh	r2, [r7, #6]
 8002632:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800263e:	d10e      	bne.n	800265e <HAL_UART_Receive+0x80>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_UART_Receive+0x76>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800264e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002652:	e02d      	b.n	80026b0 <HAL_UART_Receive+0xd2>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	22ff      	movs	r2, #255	@ 0xff
 8002658:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800265c:	e028      	b.n	80026b0 <HAL_UART_Receive+0xd2>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10d      	bne.n	8002682 <HAL_UART_Receive+0xa4>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d104      	bne.n	8002678 <HAL_UART_Receive+0x9a>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	22ff      	movs	r2, #255	@ 0xff
 8002672:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002676:	e01b      	b.n	80026b0 <HAL_UART_Receive+0xd2>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	227f      	movs	r2, #127	@ 0x7f
 800267c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002680:	e016      	b.n	80026b0 <HAL_UART_Receive+0xd2>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800268a:	d10d      	bne.n	80026a8 <HAL_UART_Receive+0xca>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <HAL_UART_Receive+0xc0>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	227f      	movs	r2, #127	@ 0x7f
 8002698:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800269c:	e008      	b.n	80026b0 <HAL_UART_Receive+0xd2>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	223f      	movs	r2, #63	@ 0x3f
 80026a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80026a6:	e003      	b.n	80026b0 <HAL_UART_Receive+0xd2>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80026b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026c0:	d108      	bne.n	80026d4 <HAL_UART_Receive+0xf6>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d104      	bne.n	80026d4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	e003      	b.n	80026dc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80026dc:	e036      	b.n	800274c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2200      	movs	r2, #0
 80026e6:	2120      	movs	r1, #32
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fe90 	bl	800340e <UART_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e032      	b.n	8002766 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10c      	bne.n	8002720 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	b29a      	uxth	r2, r3
 800270e:	8a7b      	ldrh	r3, [r7, #18]
 8002710:	4013      	ands	r3, r2
 8002712:	b29a      	uxth	r2, r3
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	3302      	adds	r3, #2
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e00c      	b.n	800273a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	b2da      	uxtb	r2, r3
 8002728:	8a7b      	ldrh	r3, [r7, #18]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4013      	ands	r3, r2
 800272e:	b2da      	uxtb	r2, r3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	3301      	adds	r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1c2      	bne.n	80026de <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b0ba      	sub	sp, #232	@ 0xe8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002796:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800279a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800279e:	4013      	ands	r3, r2
 80027a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80027a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d115      	bne.n	80027d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00f      	beq.n	80027d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d009      	beq.n	80027d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8297 	beq.w	8002cfc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
      }
      return;
 80027d6:	e291      	b.n	8002cfc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8117 	beq.w	8002a10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80027e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80027ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80027f2:	4b85      	ldr	r3, [pc, #532]	@ (8002a08 <HAL_UART_IRQHandler+0x298>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 810a 	beq.w	8002a10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d011      	beq.n	800282c <HAL_UART_IRQHandler+0xbc>
 8002808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800280c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00b      	beq.n	800282c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800282c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d011      	beq.n	800285c <HAL_UART_IRQHandler+0xec>
 8002838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2202      	movs	r2, #2
 800284a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002852:	f043 0204 	orr.w	r2, r3, #4
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800285c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d011      	beq.n	800288c <HAL_UART_IRQHandler+0x11c>
 8002868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2204      	movs	r2, #4
 800287a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002882:	f043 0202 	orr.w	r2, r3, #2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800288c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d017      	beq.n	80028c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2208      	movs	r2, #8
 80028b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028be:	f043 0208 	orr.w	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <HAL_UART_IRQHandler+0x18a>
 80028d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00c      	beq.n	80028fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 81fd 	beq.w	8002d00 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00d      	beq.n	800292e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002934:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002942:	2b40      	cmp	r3, #64	@ 0x40
 8002944:	d005      	beq.n	8002952 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800294a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800294e:	2b00      	cmp	r3, #0
 8002950:	d04f      	beq.n	80029f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fdc8 	bl	80034e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d141      	bne.n	80029ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3308      	adds	r3, #8
 800296c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002974:	e853 3f00 	ldrex	r3, [r3]
 8002978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800297c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3308      	adds	r3, #8
 800298e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002992:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800299e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029a2:	e841 2300 	strex	r3, r2, [r1]
 80029a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1d9      	bne.n	8002966 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d013      	beq.n	80029e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029be:	4a13      	ldr	r2, [pc, #76]	@ (8002a0c <HAL_UART_IRQHandler+0x29c>)
 80029c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fa90 	bl	8000eec <HAL_DMA_Abort_IT>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d017      	beq.n	8002a02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029dc:	4610      	mov	r0, r2
 80029de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e0:	e00f      	b.n	8002a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f9a0 	bl	8002d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e8:	e00b      	b.n	8002a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f99c 	bl	8002d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f0:	e007      	b.n	8002a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f998 	bl	8002d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002a00:	e17e      	b.n	8002d00 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a02:	bf00      	nop
    return;
 8002a04:	e17c      	b.n	8002d00 <HAL_UART_IRQHandler+0x590>
 8002a06:	bf00      	nop
 8002a08:	04000120 	.word	0x04000120
 8002a0c:	080035b1 	.word	0x080035b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	f040 814c 	bne.w	8002cb2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8145 	beq.w	8002cb2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 813e 	beq.w	8002cb2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a48:	2b40      	cmp	r3, #64	@ 0x40
 8002a4a:	f040 80b6 	bne.w	8002bba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8150 	beq.w	8002d04 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	f080 8148 	bcs.w	8002d04 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a88:	f000 8086 	beq.w	8002b98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a98:	e853 3f00 	ldrex	r3, [r3]
 8002a9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002aba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ac6:	e841 2300 	strex	r3, r2, [r1]
 8002aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1da      	bne.n	8002a8c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3308      	adds	r3, #8
 8002adc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ae0:	e853 3f00 	ldrex	r3, [r3]
 8002ae4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ae6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3308      	adds	r3, #8
 8002af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002afa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e1      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3308      	adds	r3, #8
 8002b18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3308      	adds	r3, #8
 8002b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b3e:	e841 2300 	strex	r3, r2, [r1]
 8002b42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1e3      	bne.n	8002b12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b68:	f023 0310 	bic.w	r3, r3, #16
 8002b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e4      	bne.n	8002b58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe f93a 	bl	8000e0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8c2 	bl	8002d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bb8:	e0a4      	b.n	8002d04 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8096 	beq.w	8002d08 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8002bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8091 	beq.w	8002d08 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bee:	e853 3f00 	ldrex	r3, [r3]
 8002bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c10:	e841 2300 	strex	r3, r2, [r1]
 8002c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e4      	bne.n	8002be6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3308      	adds	r3, #8
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	e853 3f00 	ldrex	r3, [r3]
 8002c2a:	623b      	str	r3, [r7, #32]
   return(result);
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c40:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c48:	e841 2300 	strex	r3, r2, [r1]
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e3      	bne.n	8002c1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f023 0310 	bic.w	r3, r3, #16
 8002c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	617b      	str	r3, [r7, #20]
   return(result);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e4      	bne.n	8002c68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f846 	bl	8002d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cb0:	e02a      	b.n	8002d08 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00e      	beq.n	8002cdc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01c      	beq.n	8002d0c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
    }
    return;
 8002cda:	e017      	b.n	8002d0c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <HAL_UART_IRQHandler+0x59e>
 8002ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00c      	beq.n	8002d0e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fc71 	bl	80035dc <UART_EndTransmit_IT>
    return;
 8002cfa:	e008      	b.n	8002d0e <HAL_UART_IRQHandler+0x59e>
      return;
 8002cfc:	bf00      	nop
 8002cfe:	e006      	b.n	8002d0e <HAL_UART_IRQHandler+0x59e>
    return;
 8002d00:	bf00      	nop
 8002d02:	e004      	b.n	8002d0e <HAL_UART_IRQHandler+0x59e>
      return;
 8002d04:	bf00      	nop
 8002d06:	e002      	b.n	8002d0e <HAL_UART_IRQHandler+0x59e>
      return;
 8002d08:	bf00      	nop
 8002d0a:	e000      	b.n	8002d0e <HAL_UART_IRQHandler+0x59e>
    return;
 8002d0c:	bf00      	nop
  }

}
 8002d0e:	37e8      	adds	r7, #232	@ 0xe8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4ba6      	ldr	r3, [pc, #664]	@ (8003018 <UART_SetConfig+0x2c4>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	6979      	ldr	r1, [r7, #20]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a94      	ldr	r2, [pc, #592]	@ (800301c <UART_SetConfig+0x2c8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d120      	bne.n	8002e12 <UART_SetConfig+0xbe>
 8002dd0:	4b93      	ldr	r3, [pc, #588]	@ (8003020 <UART_SetConfig+0x2cc>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d816      	bhi.n	8002e0c <UART_SetConfig+0xb8>
 8002dde:	a201      	add	r2, pc, #4	@ (adr r2, 8002de4 <UART_SetConfig+0x90>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002df5 	.word	0x08002df5
 8002de8:	08002e01 	.word	0x08002e01
 8002dec:	08002dfb 	.word	0x08002dfb
 8002df0:	08002e07 	.word	0x08002e07
 8002df4:	2301      	movs	r3, #1
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	e150      	b.n	800309c <UART_SetConfig+0x348>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	77fb      	strb	r3, [r7, #31]
 8002dfe:	e14d      	b.n	800309c <UART_SetConfig+0x348>
 8002e00:	2304      	movs	r3, #4
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e14a      	b.n	800309c <UART_SetConfig+0x348>
 8002e06:	2308      	movs	r3, #8
 8002e08:	77fb      	strb	r3, [r7, #31]
 8002e0a:	e147      	b.n	800309c <UART_SetConfig+0x348>
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	77fb      	strb	r3, [r7, #31]
 8002e10:	e144      	b.n	800309c <UART_SetConfig+0x348>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a83      	ldr	r2, [pc, #524]	@ (8003024 <UART_SetConfig+0x2d0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d132      	bne.n	8002e82 <UART_SetConfig+0x12e>
 8002e1c:	4b80      	ldr	r3, [pc, #512]	@ (8003020 <UART_SetConfig+0x2cc>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d828      	bhi.n	8002e7c <UART_SetConfig+0x128>
 8002e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e30 <UART_SetConfig+0xdc>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002e65 	.word	0x08002e65
 8002e34:	08002e7d 	.word	0x08002e7d
 8002e38:	08002e7d 	.word	0x08002e7d
 8002e3c:	08002e7d 	.word	0x08002e7d
 8002e40:	08002e71 	.word	0x08002e71
 8002e44:	08002e7d 	.word	0x08002e7d
 8002e48:	08002e7d 	.word	0x08002e7d
 8002e4c:	08002e7d 	.word	0x08002e7d
 8002e50:	08002e6b 	.word	0x08002e6b
 8002e54:	08002e7d 	.word	0x08002e7d
 8002e58:	08002e7d 	.word	0x08002e7d
 8002e5c:	08002e7d 	.word	0x08002e7d
 8002e60:	08002e77 	.word	0x08002e77
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]
 8002e68:	e118      	b.n	800309c <UART_SetConfig+0x348>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	77fb      	strb	r3, [r7, #31]
 8002e6e:	e115      	b.n	800309c <UART_SetConfig+0x348>
 8002e70:	2304      	movs	r3, #4
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	e112      	b.n	800309c <UART_SetConfig+0x348>
 8002e76:	2308      	movs	r3, #8
 8002e78:	77fb      	strb	r3, [r7, #31]
 8002e7a:	e10f      	b.n	800309c <UART_SetConfig+0x348>
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	77fb      	strb	r3, [r7, #31]
 8002e80:	e10c      	b.n	800309c <UART_SetConfig+0x348>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a68      	ldr	r2, [pc, #416]	@ (8003028 <UART_SetConfig+0x2d4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d120      	bne.n	8002ece <UART_SetConfig+0x17a>
 8002e8c:	4b64      	ldr	r3, [pc, #400]	@ (8003020 <UART_SetConfig+0x2cc>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e96:	2b30      	cmp	r3, #48	@ 0x30
 8002e98:	d013      	beq.n	8002ec2 <UART_SetConfig+0x16e>
 8002e9a:	2b30      	cmp	r3, #48	@ 0x30
 8002e9c:	d814      	bhi.n	8002ec8 <UART_SetConfig+0x174>
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d009      	beq.n	8002eb6 <UART_SetConfig+0x162>
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d810      	bhi.n	8002ec8 <UART_SetConfig+0x174>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <UART_SetConfig+0x15c>
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d006      	beq.n	8002ebc <UART_SetConfig+0x168>
 8002eae:	e00b      	b.n	8002ec8 <UART_SetConfig+0x174>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e0f2      	b.n	800309c <UART_SetConfig+0x348>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	77fb      	strb	r3, [r7, #31]
 8002eba:	e0ef      	b.n	800309c <UART_SetConfig+0x348>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	77fb      	strb	r3, [r7, #31]
 8002ec0:	e0ec      	b.n	800309c <UART_SetConfig+0x348>
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	77fb      	strb	r3, [r7, #31]
 8002ec6:	e0e9      	b.n	800309c <UART_SetConfig+0x348>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	77fb      	strb	r3, [r7, #31]
 8002ecc:	e0e6      	b.n	800309c <UART_SetConfig+0x348>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a56      	ldr	r2, [pc, #344]	@ (800302c <UART_SetConfig+0x2d8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d120      	bne.n	8002f1a <UART_SetConfig+0x1c6>
 8002ed8:	4b51      	ldr	r3, [pc, #324]	@ (8003020 <UART_SetConfig+0x2cc>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ee2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ee4:	d013      	beq.n	8002f0e <UART_SetConfig+0x1ba>
 8002ee6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ee8:	d814      	bhi.n	8002f14 <UART_SetConfig+0x1c0>
 8002eea:	2b80      	cmp	r3, #128	@ 0x80
 8002eec:	d009      	beq.n	8002f02 <UART_SetConfig+0x1ae>
 8002eee:	2b80      	cmp	r3, #128	@ 0x80
 8002ef0:	d810      	bhi.n	8002f14 <UART_SetConfig+0x1c0>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <UART_SetConfig+0x1a8>
 8002ef6:	2b40      	cmp	r3, #64	@ 0x40
 8002ef8:	d006      	beq.n	8002f08 <UART_SetConfig+0x1b4>
 8002efa:	e00b      	b.n	8002f14 <UART_SetConfig+0x1c0>
 8002efc:	2300      	movs	r3, #0
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e0cc      	b.n	800309c <UART_SetConfig+0x348>
 8002f02:	2302      	movs	r3, #2
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e0c9      	b.n	800309c <UART_SetConfig+0x348>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e0c6      	b.n	800309c <UART_SetConfig+0x348>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	77fb      	strb	r3, [r7, #31]
 8002f12:	e0c3      	b.n	800309c <UART_SetConfig+0x348>
 8002f14:	2310      	movs	r3, #16
 8002f16:	77fb      	strb	r3, [r7, #31]
 8002f18:	e0c0      	b.n	800309c <UART_SetConfig+0x348>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a44      	ldr	r2, [pc, #272]	@ (8003030 <UART_SetConfig+0x2dc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d125      	bne.n	8002f70 <UART_SetConfig+0x21c>
 8002f24:	4b3e      	ldr	r3, [pc, #248]	@ (8003020 <UART_SetConfig+0x2cc>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f32:	d017      	beq.n	8002f64 <UART_SetConfig+0x210>
 8002f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f38:	d817      	bhi.n	8002f6a <UART_SetConfig+0x216>
 8002f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f3e:	d00b      	beq.n	8002f58 <UART_SetConfig+0x204>
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f44:	d811      	bhi.n	8002f6a <UART_SetConfig+0x216>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <UART_SetConfig+0x1fe>
 8002f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f4e:	d006      	beq.n	8002f5e <UART_SetConfig+0x20a>
 8002f50:	e00b      	b.n	8002f6a <UART_SetConfig+0x216>
 8002f52:	2300      	movs	r3, #0
 8002f54:	77fb      	strb	r3, [r7, #31]
 8002f56:	e0a1      	b.n	800309c <UART_SetConfig+0x348>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e09e      	b.n	800309c <UART_SetConfig+0x348>
 8002f5e:	2304      	movs	r3, #4
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e09b      	b.n	800309c <UART_SetConfig+0x348>
 8002f64:	2308      	movs	r3, #8
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e098      	b.n	800309c <UART_SetConfig+0x348>
 8002f6a:	2310      	movs	r3, #16
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e095      	b.n	800309c <UART_SetConfig+0x348>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2f      	ldr	r2, [pc, #188]	@ (8003034 <UART_SetConfig+0x2e0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d125      	bne.n	8002fc6 <UART_SetConfig+0x272>
 8002f7a:	4b29      	ldr	r3, [pc, #164]	@ (8003020 <UART_SetConfig+0x2cc>)
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f88:	d017      	beq.n	8002fba <UART_SetConfig+0x266>
 8002f8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f8e:	d817      	bhi.n	8002fc0 <UART_SetConfig+0x26c>
 8002f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f94:	d00b      	beq.n	8002fae <UART_SetConfig+0x25a>
 8002f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f9a:	d811      	bhi.n	8002fc0 <UART_SetConfig+0x26c>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <UART_SetConfig+0x254>
 8002fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa4:	d006      	beq.n	8002fb4 <UART_SetConfig+0x260>
 8002fa6:	e00b      	b.n	8002fc0 <UART_SetConfig+0x26c>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e076      	b.n	800309c <UART_SetConfig+0x348>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	77fb      	strb	r3, [r7, #31]
 8002fb2:	e073      	b.n	800309c <UART_SetConfig+0x348>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e070      	b.n	800309c <UART_SetConfig+0x348>
 8002fba:	2308      	movs	r3, #8
 8002fbc:	77fb      	strb	r3, [r7, #31]
 8002fbe:	e06d      	b.n	800309c <UART_SetConfig+0x348>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e06a      	b.n	800309c <UART_SetConfig+0x348>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1b      	ldr	r2, [pc, #108]	@ (8003038 <UART_SetConfig+0x2e4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d138      	bne.n	8003042 <UART_SetConfig+0x2ee>
 8002fd0:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <UART_SetConfig+0x2cc>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002fda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fde:	d017      	beq.n	8003010 <UART_SetConfig+0x2bc>
 8002fe0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fe4:	d82a      	bhi.n	800303c <UART_SetConfig+0x2e8>
 8002fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fea:	d00b      	beq.n	8003004 <UART_SetConfig+0x2b0>
 8002fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff0:	d824      	bhi.n	800303c <UART_SetConfig+0x2e8>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <UART_SetConfig+0x2aa>
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ffa:	d006      	beq.n	800300a <UART_SetConfig+0x2b6>
 8002ffc:	e01e      	b.n	800303c <UART_SetConfig+0x2e8>
 8002ffe:	2300      	movs	r3, #0
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e04b      	b.n	800309c <UART_SetConfig+0x348>
 8003004:	2302      	movs	r3, #2
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e048      	b.n	800309c <UART_SetConfig+0x348>
 800300a:	2304      	movs	r3, #4
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e045      	b.n	800309c <UART_SetConfig+0x348>
 8003010:	2308      	movs	r3, #8
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e042      	b.n	800309c <UART_SetConfig+0x348>
 8003016:	bf00      	nop
 8003018:	efff69f3 	.word	0xefff69f3
 800301c:	40011000 	.word	0x40011000
 8003020:	40023800 	.word	0x40023800
 8003024:	40004400 	.word	0x40004400
 8003028:	40004800 	.word	0x40004800
 800302c:	40004c00 	.word	0x40004c00
 8003030:	40005000 	.word	0x40005000
 8003034:	40011400 	.word	0x40011400
 8003038:	40007800 	.word	0x40007800
 800303c:	2310      	movs	r3, #16
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e02c      	b.n	800309c <UART_SetConfig+0x348>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a72      	ldr	r2, [pc, #456]	@ (8003210 <UART_SetConfig+0x4bc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d125      	bne.n	8003098 <UART_SetConfig+0x344>
 800304c:	4b71      	ldr	r3, [pc, #452]	@ (8003214 <UART_SetConfig+0x4c0>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003052:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003056:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800305a:	d017      	beq.n	800308c <UART_SetConfig+0x338>
 800305c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003060:	d817      	bhi.n	8003092 <UART_SetConfig+0x33e>
 8003062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003066:	d00b      	beq.n	8003080 <UART_SetConfig+0x32c>
 8003068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800306c:	d811      	bhi.n	8003092 <UART_SetConfig+0x33e>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <UART_SetConfig+0x326>
 8003072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003076:	d006      	beq.n	8003086 <UART_SetConfig+0x332>
 8003078:	e00b      	b.n	8003092 <UART_SetConfig+0x33e>
 800307a:	2300      	movs	r3, #0
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	e00d      	b.n	800309c <UART_SetConfig+0x348>
 8003080:	2302      	movs	r3, #2
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e00a      	b.n	800309c <UART_SetConfig+0x348>
 8003086:	2304      	movs	r3, #4
 8003088:	77fb      	strb	r3, [r7, #31]
 800308a:	e007      	b.n	800309c <UART_SetConfig+0x348>
 800308c:	2308      	movs	r3, #8
 800308e:	77fb      	strb	r3, [r7, #31]
 8003090:	e004      	b.n	800309c <UART_SetConfig+0x348>
 8003092:	2310      	movs	r3, #16
 8003094:	77fb      	strb	r3, [r7, #31]
 8003096:	e001      	b.n	800309c <UART_SetConfig+0x348>
 8003098:	2310      	movs	r3, #16
 800309a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a4:	d15b      	bne.n	800315e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80030a6:	7ffb      	ldrb	r3, [r7, #31]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d828      	bhi.n	80030fe <UART_SetConfig+0x3aa>
 80030ac:	a201      	add	r2, pc, #4	@ (adr r2, 80030b4 <UART_SetConfig+0x360>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030d9 	.word	0x080030d9
 80030b8:	080030e1 	.word	0x080030e1
 80030bc:	080030e9 	.word	0x080030e9
 80030c0:	080030ff 	.word	0x080030ff
 80030c4:	080030ef 	.word	0x080030ef
 80030c8:	080030ff 	.word	0x080030ff
 80030cc:	080030ff 	.word	0x080030ff
 80030d0:	080030ff 	.word	0x080030ff
 80030d4:	080030f7 	.word	0x080030f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d8:	f7fe fd92 	bl	8001c00 <HAL_RCC_GetPCLK1Freq>
 80030dc:	61b8      	str	r0, [r7, #24]
        break;
 80030de:	e013      	b.n	8003108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030e0:	f7fe fda2 	bl	8001c28 <HAL_RCC_GetPCLK2Freq>
 80030e4:	61b8      	str	r0, [r7, #24]
        break;
 80030e6:	e00f      	b.n	8003108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003218 <UART_SetConfig+0x4c4>)
 80030ea:	61bb      	str	r3, [r7, #24]
        break;
 80030ec:	e00c      	b.n	8003108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ee:	f7fe fc75 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 80030f2:	61b8      	str	r0, [r7, #24]
        break;
 80030f4:	e008      	b.n	8003108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030fa:	61bb      	str	r3, [r7, #24]
        break;
 80030fc:	e004      	b.n	8003108 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	77bb      	strb	r3, [r7, #30]
        break;
 8003106:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d074      	beq.n	80031f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	005a      	lsls	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b0f      	cmp	r3, #15
 8003128:	d916      	bls.n	8003158 <UART_SetConfig+0x404>
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003130:	d212      	bcs.n	8003158 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f023 030f 	bic.w	r3, r3, #15
 800313a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	085b      	lsrs	r3, r3, #1
 8003140:	b29b      	uxth	r3, r3
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	b29a      	uxth	r2, r3
 8003148:	89fb      	ldrh	r3, [r7, #14]
 800314a:	4313      	orrs	r3, r2
 800314c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	89fa      	ldrh	r2, [r7, #14]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	e04f      	b.n	80031f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	77bb      	strb	r3, [r7, #30]
 800315c:	e04c      	b.n	80031f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800315e:	7ffb      	ldrb	r3, [r7, #31]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d828      	bhi.n	80031b6 <UART_SetConfig+0x462>
 8003164:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <UART_SetConfig+0x418>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	08003191 	.word	0x08003191
 8003170:	08003199 	.word	0x08003199
 8003174:	080031a1 	.word	0x080031a1
 8003178:	080031b7 	.word	0x080031b7
 800317c:	080031a7 	.word	0x080031a7
 8003180:	080031b7 	.word	0x080031b7
 8003184:	080031b7 	.word	0x080031b7
 8003188:	080031b7 	.word	0x080031b7
 800318c:	080031af 	.word	0x080031af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003190:	f7fe fd36 	bl	8001c00 <HAL_RCC_GetPCLK1Freq>
 8003194:	61b8      	str	r0, [r7, #24]
        break;
 8003196:	e013      	b.n	80031c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003198:	f7fe fd46 	bl	8001c28 <HAL_RCC_GetPCLK2Freq>
 800319c:	61b8      	str	r0, [r7, #24]
        break;
 800319e:	e00f      	b.n	80031c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003218 <UART_SetConfig+0x4c4>)
 80031a2:	61bb      	str	r3, [r7, #24]
        break;
 80031a4:	e00c      	b.n	80031c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a6:	f7fe fc19 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 80031aa:	61b8      	str	r0, [r7, #24]
        break;
 80031ac:	e008      	b.n	80031c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031b2:	61bb      	str	r3, [r7, #24]
        break;
 80031b4:	e004      	b.n	80031c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	77bb      	strb	r3, [r7, #30]
        break;
 80031be:	bf00      	nop
    }

    if (pclk != 0U)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d018      	beq.n	80031f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	085a      	lsrs	r2, r3, #1
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	441a      	add	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b0f      	cmp	r3, #15
 80031de:	d909      	bls.n	80031f4 <UART_SetConfig+0x4a0>
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e6:	d205      	bcs.n	80031f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	e001      	b.n	80031f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003204:	7fbb      	ldrb	r3, [r7, #30]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40007c00 	.word	0x40007c00
 8003214:	40023800 	.word	0x40023800
 8003218:	00f42400 	.word	0x00f42400

0800321c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01a      	beq.n	8003332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800331a:	d10a      	bne.n	8003332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
  }
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08c      	sub	sp, #48	@ 0x30
 8003364:	af02      	add	r7, sp, #8
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003370:	f7fd fb92 	bl	8000a98 <HAL_GetTick>
 8003374:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b08      	cmp	r3, #8
 8003382:	d12e      	bne.n	80033e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003384:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	2200      	movs	r2, #0
 800338e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f83b 	bl	800340e <UART_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d021      	beq.n	80033e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	69b9      	ldr	r1, [r7, #24]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	617b      	str	r3, [r7, #20]
   return(result);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e6      	bne.n	800339e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e011      	b.n	8003406 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3728      	adds	r7, #40	@ 0x28
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	4613      	mov	r3, r2
 800341c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341e:	e04f      	b.n	80034c0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003426:	d04b      	beq.n	80034c0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003428:	f7fd fb36 	bl	8000a98 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	429a      	cmp	r2, r3
 8003436:	d302      	bcc.n	800343e <UART_WaitOnFlagUntilTimeout+0x30>
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e04e      	b.n	80034e0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d037      	beq.n	80034c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b80      	cmp	r3, #128	@ 0x80
 8003454:	d034      	beq.n	80034c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b40      	cmp	r3, #64	@ 0x40
 800345a:	d031      	beq.n	80034c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b08      	cmp	r3, #8
 8003468:	d110      	bne.n	800348c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2208      	movs	r2, #8
 8003470:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f838 	bl	80034e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2208      	movs	r2, #8
 800347c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e029      	b.n	80034e0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800349a:	d111      	bne.n	80034c0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f81e 	bl	80034e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e00f      	b.n	80034e0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d0a0      	beq.n	8003420 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b095      	sub	sp, #84	@ 0x54
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800350e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003510:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003514:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800351c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e6      	bne.n	80034f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3308      	adds	r3, #8
 8003528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	61fb      	str	r3, [r7, #28]
   return(result);
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3308      	adds	r3, #8
 8003540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003544:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e5      	bne.n	8003522 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355a:	2b01      	cmp	r3, #1
 800355c:	d118      	bne.n	8003590 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	60bb      	str	r3, [r7, #8]
   return(result);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f023 0310 	bic.w	r3, r3, #16
 8003572:	647b      	str	r3, [r7, #68]	@ 0x44
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	6979      	ldr	r1, [r7, #20]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	613b      	str	r3, [r7, #16]
   return(result);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e6      	bne.n	800355e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035a4:	bf00      	nop
 80035a6:	3754      	adds	r7, #84	@ 0x54
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7ff fbaa 	bl	8002d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	6979      	ldr	r1, [r7, #20]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	613b      	str	r3, [r7, #16]
   return(result);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e6      	bne.n	80035e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fb76 	bl	8002d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003628:	bf00      	nop
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <memset>:
 8003630:	4402      	add	r2, r0
 8003632:	4603      	mov	r3, r0
 8003634:	4293      	cmp	r3, r2
 8003636:	d100      	bne.n	800363a <memset+0xa>
 8003638:	4770      	bx	lr
 800363a:	f803 1b01 	strb.w	r1, [r3], #1
 800363e:	e7f9      	b.n	8003634 <memset+0x4>

08003640 <__libc_init_array>:
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	4d0d      	ldr	r5, [pc, #52]	@ (8003678 <__libc_init_array+0x38>)
 8003644:	4c0d      	ldr	r4, [pc, #52]	@ (800367c <__libc_init_array+0x3c>)
 8003646:	1b64      	subs	r4, r4, r5
 8003648:	10a4      	asrs	r4, r4, #2
 800364a:	2600      	movs	r6, #0
 800364c:	42a6      	cmp	r6, r4
 800364e:	d109      	bne.n	8003664 <__libc_init_array+0x24>
 8003650:	4d0b      	ldr	r5, [pc, #44]	@ (8003680 <__libc_init_array+0x40>)
 8003652:	4c0c      	ldr	r4, [pc, #48]	@ (8003684 <__libc_init_array+0x44>)
 8003654:	f000 f818 	bl	8003688 <_init>
 8003658:	1b64      	subs	r4, r4, r5
 800365a:	10a4      	asrs	r4, r4, #2
 800365c:	2600      	movs	r6, #0
 800365e:	42a6      	cmp	r6, r4
 8003660:	d105      	bne.n	800366e <__libc_init_array+0x2e>
 8003662:	bd70      	pop	{r4, r5, r6, pc}
 8003664:	f855 3b04 	ldr.w	r3, [r5], #4
 8003668:	4798      	blx	r3
 800366a:	3601      	adds	r6, #1
 800366c:	e7ee      	b.n	800364c <__libc_init_array+0xc>
 800366e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003672:	4798      	blx	r3
 8003674:	3601      	adds	r6, #1
 8003676:	e7f2      	b.n	800365e <__libc_init_array+0x1e>
 8003678:	080036c0 	.word	0x080036c0
 800367c:	080036c0 	.word	0x080036c0
 8003680:	080036c0 	.word	0x080036c0
 8003684:	080036c4 	.word	0x080036c4

08003688 <_init>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	bf00      	nop
 800368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368e:	bc08      	pop	{r3}
 8003690:	469e      	mov	lr, r3
 8003692:	4770      	bx	lr

08003694 <_fini>:
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	bf00      	nop
 8003698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369a:	bc08      	pop	{r3}
 800369c:	469e      	mov	lr, r3
 800369e:	4770      	bx	lr
